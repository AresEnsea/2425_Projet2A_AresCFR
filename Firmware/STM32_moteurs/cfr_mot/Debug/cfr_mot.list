
cfr_mot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004368  08004368  00005368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043b0  080043b0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080043b0  080043b0  000053b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043b8  080043b8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043b8  080043b8  000053b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043bc  080043bc  000053bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080043c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  080043cc  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080043cc  00006100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec7a  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cae  00000000  00000000  00014cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00016968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b1c  00000000  00000000  00017790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d2e  00000000  00000000  000182ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104f3  00000000  00000000  0003dfda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee870  00000000  00000000  0004e4cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013cd3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf4  00000000  00000000  0013cd80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00140974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004350 	.word	0x08004350

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004350 	.word	0x08004350

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fb32 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f876 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f96c 	bl	80007a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004c8:	f000 f93a 	bl	8000740 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004cc:	f000 f8c2 	bl	8000654 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //PB10 TIM2 CH3
 80004d0:	2108      	movs	r1, #8
 80004d2:	4835      	ldr	r0, [pc, #212]	@ (80005a8 <main+0xf0>)
 80004d4:	f002 fa46 	bl	8002964 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Set the rotation direction backward
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80004d8:	2200      	movs	r2, #0
 80004da:	2110      	movs	r1, #16
 80004dc:	4833      	ldr	r0, [pc, #204]	@ (80005ac <main+0xf4>)
 80004de:	f000 fe51 	bl	8001184 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80004e2:	2201      	movs	r2, #1
 80004e4:	2120      	movs	r1, #32
 80004e6:	4831      	ldr	r0, [pc, #196]	@ (80005ac <main+0xf4>)
 80004e8:	f000 fe4c 	bl	8001184 <HAL_GPIO_WritePin>
	      // Set the speed slow
	      __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 1000);
 80004ec:	4b2e      	ldr	r3, [pc, #184]	@ (80005a8 <main+0xf0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80004f4:	63da      	str	r2, [r3, #60]	@ 0x3c
	      HAL_Delay(2000);
 80004f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80004fa:	f000 fb8f 	bl	8000c1c <HAL_Delay>
	      // Set the speed medium
	      __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 1500);
 80004fe:	4b2a      	ldr	r3, [pc, #168]	@ (80005a8 <main+0xf0>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000506:	63da      	str	r2, [r3, #60]	@ 0x3c
	      HAL_Delay(2000);
 8000508:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800050c:	f000 fb86 	bl	8000c1c <HAL_Delay>
	      // Set the speed high
	      __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 2000);
 8000510:	4b25      	ldr	r3, [pc, #148]	@ (80005a8 <main+0xf0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000518:	63da      	str	r2, [r3, #60]	@ 0x3c
	      HAL_Delay(2000);
 800051a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800051e:	f000 fb7d 	bl	8000c1c <HAL_Delay>
	      // Stop the motor
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2110      	movs	r1, #16
 8000526:	4821      	ldr	r0, [pc, #132]	@ (80005ac <main+0xf4>)
 8000528:	f000 fe2c 	bl	8001184 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 800052c:	2200      	movs	r2, #0
 800052e:	2120      	movs	r1, #32
 8000530:	481e      	ldr	r0, [pc, #120]	@ (80005ac <main+0xf4>)
 8000532:	f000 fe27 	bl	8001184 <HAL_GPIO_WritePin>
	      HAL_Delay(2000);
 8000536:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800053a:	f000 fb6f 	bl	8000c1c <HAL_Delay>
	      // Set the rotation direction forward
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 800053e:	2201      	movs	r2, #1
 8000540:	2110      	movs	r1, #16
 8000542:	481a      	ldr	r0, [pc, #104]	@ (80005ac <main+0xf4>)
 8000544:	f000 fe1e 	bl	8001184 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000548:	2200      	movs	r2, #0
 800054a:	2120      	movs	r1, #32
 800054c:	4817      	ldr	r0, [pc, #92]	@ (80005ac <main+0xf4>)
 800054e:	f000 fe19 	bl	8001184 <HAL_GPIO_WritePin>
	      // Set the speed slow
	      __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 1000);
 8000552:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <main+0xf0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800055a:	63da      	str	r2, [r3, #60]	@ 0x3c
	      HAL_Delay(2000);
 800055c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000560:	f000 fb5c 	bl	8000c1c <HAL_Delay>
	      // Set the speed medium
	      __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 1500);
 8000564:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <main+0xf0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800056c:	63da      	str	r2, [r3, #60]	@ 0x3c
	      HAL_Delay(2000);
 800056e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000572:	f000 fb53 	bl	8000c1c <HAL_Delay>
	      // Set the speed high
	      __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3, 2000);
 8000576:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <main+0xf0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800057e:	63da      	str	r2, [r3, #60]	@ 0x3c
	      HAL_Delay(2000);
 8000580:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000584:	f000 fb4a 	bl	8000c1c <HAL_Delay>
	      // Stop the motor
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000588:	2200      	movs	r2, #0
 800058a:	2110      	movs	r1, #16
 800058c:	4807      	ldr	r0, [pc, #28]	@ (80005ac <main+0xf4>)
 800058e:	f000 fdf9 	bl	8001184 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2120      	movs	r1, #32
 8000596:	4805      	ldr	r0, [pc, #20]	@ (80005ac <main+0xf4>)
 8000598:	f000 fdf4 	bl	8001184 <HAL_GPIO_WritePin>
	      HAL_Delay(2000);
 800059c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005a0:	f000 fb3c 	bl	8000c1c <HAL_Delay>
	      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80005a4:	bf00      	nop
 80005a6:	e797      	b.n	80004d8 <main+0x20>
 80005a8:	20000028 	.word	0x20000028
 80005ac:	48000400 	.word	0x48000400

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b096      	sub	sp, #88	@ 0x58
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2244      	movs	r2, #68	@ 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fe99 	bl	80042f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005d6:	f000 fdfb 	bl	80011d0 <HAL_PWREx_ControlVoltageScaling>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e0:	f000 f95a 	bl	8000898 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ee:	2310      	movs	r3, #16
 80005f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f6:	2302      	movs	r3, #2
 80005f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005fa:	2301      	movs	r3, #1
 80005fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 80005fe:	2308      	movs	r3, #8
 8000600:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000602:	2307      	movs	r3, #7
 8000604:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fe32 	bl	800127c <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800061e:	f000 f93b 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2303      	movs	r3, #3
 8000628:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	2104      	movs	r1, #4
 800063c:	4618      	mov	r0, r3
 800063e:	f001 f9f9 	bl	8001a34 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000648:	f000 f926 	bl	8000898 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3758      	adds	r7, #88	@ 0x58
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08e      	sub	sp, #56	@ 0x38
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
 8000682:	615a      	str	r2, [r3, #20]
 8000684:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000686:	4b2d      	ldr	r3, [pc, #180]	@ (800073c <MX_TIM2_Init+0xe8>)
 8000688:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800068c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800068e:	4b2b      	ldr	r3, [pc, #172]	@ (800073c <MX_TIM2_Init+0xe8>)
 8000690:	224f      	movs	r2, #79	@ 0x4f
 8000692:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000694:	4b29      	ldr	r3, [pc, #164]	@ (800073c <MX_TIM2_Init+0xe8>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800069a:	4b28      	ldr	r3, [pc, #160]	@ (800073c <MX_TIM2_Init+0xe8>)
 800069c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80006a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006a2:	4b26      	ldr	r3, [pc, #152]	@ (800073c <MX_TIM2_Init+0xe8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a8:	4b24      	ldr	r3, [pc, #144]	@ (800073c <MX_TIM2_Init+0xe8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006ae:	4823      	ldr	r0, [pc, #140]	@ (800073c <MX_TIM2_Init+0xe8>)
 80006b0:	f002 f8a0 	bl	80027f4 <HAL_TIM_Base_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80006ba:	f000 f8ed 	bl	8000898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006c8:	4619      	mov	r1, r3
 80006ca:	481c      	ldr	r0, [pc, #112]	@ (800073c <MX_TIM2_Init+0xe8>)
 80006cc:	f002 fb64 	bl	8002d98 <HAL_TIM_ConfigClockSource>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80006d6:	f000 f8df 	bl	8000898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006da:	4818      	ldr	r0, [pc, #96]	@ (800073c <MX_TIM2_Init+0xe8>)
 80006dc:	f002 f8e1 	bl	80028a2 <HAL_TIM_PWM_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80006e6:	f000 f8d7 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	4619      	mov	r1, r3
 80006f8:	4810      	ldr	r0, [pc, #64]	@ (800073c <MX_TIM2_Init+0xe8>)
 80006fa:	f003 f853 	bl	80037a4 <HAL_TIMEx_MasterConfigSynchronization>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000704:	f000 f8c8 	bl	8000898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000708:	2360      	movs	r3, #96	@ 0x60
 800070a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	2208      	movs	r2, #8
 800071c:	4619      	mov	r1, r3
 800071e:	4807      	ldr	r0, [pc, #28]	@ (800073c <MX_TIM2_Init+0xe8>)
 8000720:	f002 fa26 	bl	8002b70 <HAL_TIM_PWM_ConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800072a:	f000 f8b5 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800072e:	4803      	ldr	r0, [pc, #12]	@ (800073c <MX_TIM2_Init+0xe8>)
 8000730:	f000 f8fa 	bl	8000928 <HAL_TIM_MspPostInit>

}
 8000734:	bf00      	nop
 8000736:	3738      	adds	r7, #56	@ 0x38
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000028 	.word	0x20000028

08000740 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000744:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000746:	4a15      	ldr	r2, [pc, #84]	@ (800079c <MX_USART2_UART_Init+0x5c>)
 8000748:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075e:	4b0e      	ldr	r3, [pc, #56]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800077c:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_USART2_UART_Init+0x58>)
 8000784:	f003 f896 	bl	80038b4 <HAL_UART_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800078e:	f000 f883 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000074 	.word	0x20000074
 800079c:	40004400 	.word	0x40004400

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	@ 0x28
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b35      	ldr	r3, [pc, #212]	@ (800088c <MX_GPIO_Init+0xec>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	4a34      	ldr	r2, [pc, #208]	@ (800088c <MX_GPIO_Init+0xec>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c2:	4b32      	ldr	r3, [pc, #200]	@ (800088c <MX_GPIO_Init+0xec>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	4b2f      	ldr	r3, [pc, #188]	@ (800088c <MX_GPIO_Init+0xec>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a2e      	ldr	r2, [pc, #184]	@ (800088c <MX_GPIO_Init+0xec>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b2c      	ldr	r3, [pc, #176]	@ (800088c <MX_GPIO_Init+0xec>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b29      	ldr	r3, [pc, #164]	@ (800088c <MX_GPIO_Init+0xec>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a28      	ldr	r2, [pc, #160]	@ (800088c <MX_GPIO_Init+0xec>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b26      	ldr	r3, [pc, #152]	@ (800088c <MX_GPIO_Init+0xec>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b23      	ldr	r3, [pc, #140]	@ (800088c <MX_GPIO_Init+0xec>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a22      	ldr	r2, [pc, #136]	@ (800088c <MX_GPIO_Init+0xec>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <MX_GPIO_Init+0xec>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2120      	movs	r1, #32
 800081a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081e:	f000 fcb1 	bl	8001184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2130      	movs	r1, #48	@ 0x30
 8000826:	481a      	ldr	r0, [pc, #104]	@ (8000890 <MX_GPIO_Init+0xf0>)
 8000828:	f000 fcac 	bl	8001184 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000832:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4814      	ldr	r0, [pc, #80]	@ (8000894 <MX_GPIO_Init+0xf4>)
 8000844:	f000 faf4 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000848:	2320      	movs	r3, #32
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000862:	f000 fae5 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000866:	2330      	movs	r3, #48	@ 0x30
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_GPIO_Init+0xf0>)
 800087e:	f000 fad7 	bl	8000e30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	@ 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	48000400 	.word	0x48000400
 8000894:	48000800 	.word	0x48000800

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ae:	4a0e      	ldr	r2, [pc, #56]	@ (80008e8 <HAL_MspInit+0x44>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008b6:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <HAL_MspInit+0x44>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c6:	4a08      	ldr	r2, [pc, #32]	@ (80008e8 <HAL_MspInit+0x44>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <HAL_MspInit+0x44>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008fc:	d10b      	bne.n	8000916 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_TIM_Base_MspInit+0x38>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_TIM_Base_MspInit+0x38>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6593      	str	r3, [r2, #88]	@ 0x58
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_TIM_Base_MspInit+0x38>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000948:	d11c      	bne.n	8000984 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b10      	ldr	r3, [pc, #64]	@ (800098c <HAL_TIM_MspPostInit+0x64>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094e:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <HAL_TIM_MspPostInit+0x64>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000956:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <HAL_TIM_MspPostInit+0x64>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000962:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000966:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000974:	2301      	movs	r3, #1
 8000976:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	4619      	mov	r1, r3
 800097e:	4804      	ldr	r0, [pc, #16]	@ (8000990 <HAL_TIM_MspPostInit+0x68>)
 8000980:	f000 fa56 	bl	8000e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000984:	bf00      	nop
 8000986:	3720      	adds	r7, #32
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40021000 	.word	0x40021000
 8000990:	48000400 	.word	0x48000400

08000994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b0ac      	sub	sp, #176	@ 0xb0
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2288      	movs	r2, #136	@ 0x88
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f003 fc9e 	bl	80042f6 <memset>
  if(huart->Instance==USART2)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a21      	ldr	r2, [pc, #132]	@ (8000a44 <HAL_UART_MspInit+0xb0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d13b      	bne.n	8000a3c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 fa53 	bl	8001e7c <HAL_RCCEx_PeriphCLKConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009dc:	f7ff ff5c 	bl	8000898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e0:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <HAL_UART_MspInit+0xb4>)
 80009e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e4:	4a18      	ldr	r2, [pc, #96]	@ (8000a48 <HAL_UART_MspInit+0xb4>)
 80009e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ec:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <HAL_UART_MspInit+0xb4>)
 80009ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <HAL_UART_MspInit+0xb4>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fc:	4a12      	ldr	r2, [pc, #72]	@ (8000a48 <HAL_UART_MspInit+0xb4>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a04:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <HAL_UART_MspInit+0xb4>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a10:	230c      	movs	r3, #12
 8000a12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a28:	2307      	movs	r3, #7
 8000a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a32:	4619      	mov	r1, r3
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a38:	f000 f9fa 	bl	8000e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a3c:	bf00      	nop
 8000a3e:	37b0      	adds	r7, #176	@ 0xb0
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40004400 	.word	0x40004400
 8000a48:	40021000 	.word	0x40021000

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <NMI_Handler+0x4>

08000a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <HardFault_Handler+0x4>

08000a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <MemManage_Handler+0x4>

08000a64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa2:	f000 f89b 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	@ (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad4:	f7ff ffea 	bl	8000aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad8:	480c      	ldr	r0, [pc, #48]	@ (8000b0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000ada:	490d      	ldr	r1, [pc, #52]	@ (8000b10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000adc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b14 <LoopForever+0xe>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	@ (8000b18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af0:	4c0a      	ldr	r4, [pc, #40]	@ (8000b1c <LoopForever+0x16>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000afe:	f003 fc03 	bl	8004308 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b02:	f7ff fcd9 	bl	80004b8 <main>

08000b06 <LoopForever>:

LoopForever:
    b LoopForever
 8000b06:	e7fe      	b.n	8000b06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b14:	080043c0 	.word	0x080043c0
  ldr r2, =_sbss
 8000b18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b1c:	20000100 	.word	0x20000100

08000b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC1_2_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <HAL_Init+0x3c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a0b      	ldr	r2, [pc, #44]	@ (8000b60 <HAL_Init+0x3c>)
 8000b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b38:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3a:	2003      	movs	r0, #3
 8000b3c:	f000 f944 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b40:	2000      	movs	r0, #0
 8000b42:	f000 f80f 	bl	8000b64 <HAL_InitTick>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	71fb      	strb	r3, [r7, #7]
 8000b50:	e001      	b.n	8000b56 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b52:	f7ff fea7 	bl	80008a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b56:	79fb      	ldrb	r3, [r7, #7]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40022000 	.word	0x40022000

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b70:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <HAL_InitTick+0x6c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d023      	beq.n	8000bc0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b78:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <HAL_InitTick+0x70>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <HAL_InitTick+0x6c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f941 	bl	8000e16 <HAL_SYSTICK_Config>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d10f      	bne.n	8000bba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b0f      	cmp	r3, #15
 8000b9e:	d809      	bhi.n	8000bb4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	6879      	ldr	r1, [r7, #4]
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	f000 f919 	bl	8000dde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bac:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd8 <HAL_InitTick+0x74>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	e007      	b.n	8000bc4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
 8000bb8:	e004      	b.n	8000bc4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	e001      	b.n	8000bc4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	200000fc 	.word	0x200000fc

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	@ (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	200000fc 	.word	0x200000fc

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff ffee 	bl	8000c04 <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <HAL_Delay+0x44>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f7ff ffde 	bl	8000c04 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	@ (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	@ (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	@ 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	@ 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f7ff ff8e 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff47 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff5c 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff8e 	bl	8000d1c <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffb0 	bl	8000d84 <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3e:	e17f      	b.n	8001140 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	2101      	movs	r1, #1
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 8171 	beq.w	800113a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d005      	beq.n	8000e70 <HAL_GPIO_Init+0x40>
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d130      	bne.n	8000ed2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	68da      	ldr	r2, [r3, #12]
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	091b      	lsrs	r3, r3, #4
 8000ebc:	f003 0201 	and.w	r2, r3, #1
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d118      	bne.n	8000f10 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	08db      	lsrs	r3, r3, #3
 8000efa:	f003 0201 	and.w	r2, r3, #1
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d017      	beq.n	8000f4c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d123      	bne.n	8000fa0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	08da      	lsrs	r2, r3, #3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3208      	adds	r2, #8
 8000f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	220f      	movs	r2, #15
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	691a      	ldr	r2, [r3, #16]
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	6939      	ldr	r1, [r7, #16]
 8000f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0203 	and.w	r2, r3, #3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 80ac 	beq.w	800113a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8001160 <HAL_GPIO_Init+0x330>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe6:	4a5e      	ldr	r2, [pc, #376]	@ (8001160 <HAL_GPIO_Init+0x330>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fee:	4b5c      	ldr	r3, [pc, #368]	@ (8001160 <HAL_GPIO_Init+0x330>)
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ffa:	4a5a      	ldr	r2, [pc, #360]	@ (8001164 <HAL_GPIO_Init+0x334>)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	3302      	adds	r3, #2
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	220f      	movs	r2, #15
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001024:	d025      	beq.n	8001072 <HAL_GPIO_Init+0x242>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4f      	ldr	r2, [pc, #316]	@ (8001168 <HAL_GPIO_Init+0x338>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d01f      	beq.n	800106e <HAL_GPIO_Init+0x23e>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a4e      	ldr	r2, [pc, #312]	@ (800116c <HAL_GPIO_Init+0x33c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d019      	beq.n	800106a <HAL_GPIO_Init+0x23a>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a4d      	ldr	r2, [pc, #308]	@ (8001170 <HAL_GPIO_Init+0x340>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d013      	beq.n	8001066 <HAL_GPIO_Init+0x236>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4c      	ldr	r2, [pc, #304]	@ (8001174 <HAL_GPIO_Init+0x344>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d00d      	beq.n	8001062 <HAL_GPIO_Init+0x232>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4b      	ldr	r2, [pc, #300]	@ (8001178 <HAL_GPIO_Init+0x348>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d007      	beq.n	800105e <HAL_GPIO_Init+0x22e>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4a      	ldr	r2, [pc, #296]	@ (800117c <HAL_GPIO_Init+0x34c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_GPIO_Init+0x22a>
 8001056:	2306      	movs	r3, #6
 8001058:	e00c      	b.n	8001074 <HAL_GPIO_Init+0x244>
 800105a:	2307      	movs	r3, #7
 800105c:	e00a      	b.n	8001074 <HAL_GPIO_Init+0x244>
 800105e:	2305      	movs	r3, #5
 8001060:	e008      	b.n	8001074 <HAL_GPIO_Init+0x244>
 8001062:	2304      	movs	r3, #4
 8001064:	e006      	b.n	8001074 <HAL_GPIO_Init+0x244>
 8001066:	2303      	movs	r3, #3
 8001068:	e004      	b.n	8001074 <HAL_GPIO_Init+0x244>
 800106a:	2302      	movs	r3, #2
 800106c:	e002      	b.n	8001074 <HAL_GPIO_Init+0x244>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_GPIO_Init+0x244>
 8001072:	2300      	movs	r3, #0
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	f002 0203 	and.w	r2, r2, #3
 800107a:	0092      	lsls	r2, r2, #2
 800107c:	4093      	lsls	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001084:	4937      	ldr	r1, [pc, #220]	@ (8001164 <HAL_GPIO_Init+0x334>)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001092:	4b3b      	ldr	r3, [pc, #236]	@ (8001180 <HAL_GPIO_Init+0x350>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010b6:	4a32      	ldr	r2, [pc, #200]	@ (8001180 <HAL_GPIO_Init+0x350>)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010bc:	4b30      	ldr	r3, [pc, #192]	@ (8001180 <HAL_GPIO_Init+0x350>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	4313      	orrs	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010e0:	4a27      	ldr	r2, [pc, #156]	@ (8001180 <HAL_GPIO_Init+0x350>)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010e6:	4b26      	ldr	r3, [pc, #152]	@ (8001180 <HAL_GPIO_Init+0x350>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4013      	ands	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800110a:	4a1d      	ldr	r2, [pc, #116]	@ (8001180 <HAL_GPIO_Init+0x350>)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <HAL_GPIO_Init+0x350>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001134:	4a12      	ldr	r2, [pc, #72]	@ (8001180 <HAL_GPIO_Init+0x350>)
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa22 f303 	lsr.w	r3, r2, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	f47f ae78 	bne.w	8000e40 <HAL_GPIO_Init+0x10>
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	371c      	adds	r7, #28
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000
 8001164:	40010000 	.word	0x40010000
 8001168:	48000400 	.word	0x48000400
 800116c:	48000800 	.word	0x48000800
 8001170:	48000c00 	.word	0x48000c00
 8001174:	48001000 	.word	0x48001000
 8001178:	48001400 	.word	0x48001400
 800117c:	48001800 	.word	0x48001800
 8001180:	40010400 	.word	0x40010400

08001184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
 8001190:	4613      	mov	r3, r2
 8001192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001194:	787b      	ldrb	r3, [r7, #1]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800119a:	887a      	ldrh	r2, [r7, #2]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011a0:	e002      	b.n	80011a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011b8:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <HAL_PWREx_GetVoltageRange+0x18>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40007000 	.word	0x40007000

080011d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011de:	d130      	bne.n	8001242 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011e0:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011ec:	d038      	beq.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ee:	4b20      	ldr	r3, [pc, #128]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001274 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2232      	movs	r2, #50	@ 0x32
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	4a1b      	ldr	r2, [pc, #108]	@ (8001278 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800120a:	fba2 2303 	umull	r2, r3, r2, r3
 800120e:	0c9b      	lsrs	r3, r3, #18
 8001210:	3301      	adds	r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001214:	e002      	b.n	800121c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3b01      	subs	r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800121c:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001228:	d102      	bne.n	8001230 <HAL_PWREx_ControlVoltageScaling+0x60>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f2      	bne.n	8001216 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001230:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800123c:	d110      	bne.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e00f      	b.n	8001262 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001242:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800124a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800124e:	d007      	beq.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001250:	4b07      	ldr	r3, [pc, #28]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001258:	4a05      	ldr	r2, [pc, #20]	@ (8001270 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800125e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40007000 	.word	0x40007000
 8001274:	20000000 	.word	0x20000000
 8001278:	431bde83 	.word	0x431bde83

0800127c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e3ca      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800128e:	4b97      	ldr	r3, [pc, #604]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001298:	4b94      	ldr	r3, [pc, #592]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80e4 	beq.w	8001478 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d007      	beq.n	80012c6 <HAL_RCC_OscConfig+0x4a>
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b0c      	cmp	r3, #12
 80012ba:	f040 808b 	bne.w	80013d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	f040 8087 	bne.w	80013d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012c6:	4b89      	ldr	r3, [pc, #548]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <HAL_RCC_OscConfig+0x62>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e3a2      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a1a      	ldr	r2, [r3, #32]
 80012e2:	4b82      	ldr	r3, [pc, #520]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d004      	beq.n	80012f8 <HAL_RCC_OscConfig+0x7c>
 80012ee:	4b7f      	ldr	r3, [pc, #508]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012f6:	e005      	b.n	8001304 <HAL_RCC_OscConfig+0x88>
 80012f8:	4b7c      	ldr	r3, [pc, #496]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80012fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001304:	4293      	cmp	r3, r2
 8001306:	d223      	bcs.n	8001350 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1b      	ldr	r3, [r3, #32]
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fd55 	bl	8001dbc <RCC_SetFlashLatencyFromMSIRange>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e383      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800131c:	4b73      	ldr	r3, [pc, #460]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a72      	ldr	r2, [pc, #456]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001322:	f043 0308 	orr.w	r3, r3, #8
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b70      	ldr	r3, [pc, #448]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	496d      	ldr	r1, [pc, #436]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800133a:	4b6c      	ldr	r3, [pc, #432]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	021b      	lsls	r3, r3, #8
 8001348:	4968      	ldr	r1, [pc, #416]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
 800134e:	e025      	b.n	800139c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001350:	4b66      	ldr	r3, [pc, #408]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a65      	ldr	r2, [pc, #404]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001356:	f043 0308 	orr.w	r3, r3, #8
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b63      	ldr	r3, [pc, #396]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4960      	ldr	r1, [pc, #384]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800136e:	4b5f      	ldr	r3, [pc, #380]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	495b      	ldr	r1, [pc, #364]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800137e:	4313      	orrs	r3, r2
 8001380:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d109      	bne.n	800139c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fd15 	bl	8001dbc <RCC_SetFlashLatencyFromMSIRange>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e343      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800139c:	f000 fc4a 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b52      	ldr	r3, [pc, #328]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	091b      	lsrs	r3, r3, #4
 80013a8:	f003 030f 	and.w	r3, r3, #15
 80013ac:	4950      	ldr	r1, [pc, #320]	@ (80014f0 <HAL_RCC_OscConfig+0x274>)
 80013ae:	5ccb      	ldrb	r3, [r1, r3]
 80013b0:	f003 031f 	and.w	r3, r3, #31
 80013b4:	fa22 f303 	lsr.w	r3, r2, r3
 80013b8:	4a4e      	ldr	r2, [pc, #312]	@ (80014f4 <HAL_RCC_OscConfig+0x278>)
 80013ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013bc:	4b4e      	ldr	r3, [pc, #312]	@ (80014f8 <HAL_RCC_OscConfig+0x27c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fbcf 	bl	8000b64 <HAL_InitTick>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d052      	beq.n	8001476 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	e327      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d032      	beq.n	8001442 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013dc:	4b43      	ldr	r3, [pc, #268]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a42      	ldr	r2, [pc, #264]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fc0c 	bl	8000c04 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013f0:	f7ff fc08 	bl	8000c04 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e310      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001402:	4b3a      	ldr	r3, [pc, #232]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800140e:	4b37      	ldr	r3, [pc, #220]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a36      	ldr	r2, [pc, #216]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001414:	f043 0308 	orr.w	r3, r3, #8
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	4b34      	ldr	r3, [pc, #208]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	4931      	ldr	r1, [pc, #196]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001428:	4313      	orrs	r3, r2
 800142a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800142c:	4b2f      	ldr	r3, [pc, #188]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	492c      	ldr	r1, [pc, #176]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800143c:	4313      	orrs	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
 8001440:	e01a      	b.n	8001478 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001442:	4b2a      	ldr	r3, [pc, #168]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a29      	ldr	r2, [pc, #164]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800144e:	f7ff fbd9 	bl	8000c04 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001456:	f7ff fbd5 	bl	8000c04 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e2dd      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001468:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1f0      	bne.n	8001456 <HAL_RCC_OscConfig+0x1da>
 8001474:	e000      	b.n	8001478 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001476:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b00      	cmp	r3, #0
 8001482:	d074      	beq.n	800156e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	2b08      	cmp	r3, #8
 8001488:	d005      	beq.n	8001496 <HAL_RCC_OscConfig+0x21a>
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2b0c      	cmp	r3, #12
 800148e:	d10e      	bne.n	80014ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	2b03      	cmp	r3, #3
 8001494:	d10b      	bne.n	80014ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d064      	beq.n	800156c <HAL_RCC_OscConfig+0x2f0>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d160      	bne.n	800156c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e2ba      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x24a>
 80014b8:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0b      	ldr	r2, [pc, #44]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80014be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	e026      	b.n	8001514 <HAL_RCC_OscConfig+0x298>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014ce:	d115      	bne.n	80014fc <HAL_RCC_OscConfig+0x280>
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a05      	ldr	r2, [pc, #20]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80014d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b03      	ldr	r3, [pc, #12]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a02      	ldr	r2, [pc, #8]	@ (80014ec <HAL_RCC_OscConfig+0x270>)
 80014e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	e014      	b.n	8001514 <HAL_RCC_OscConfig+0x298>
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	08004368 	.word	0x08004368
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000004 	.word	0x20000004
 80014fc:	4ba0      	ldr	r3, [pc, #640]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a9f      	ldr	r2, [pc, #636]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b9d      	ldr	r3, [pc, #628]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a9c      	ldr	r2, [pc, #624]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fb72 	bl	8000c04 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fb6e 	bl	8000c04 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e276      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001536:	4b92      	ldr	r3, [pc, #584]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0x2a8>
 8001542:	e014      	b.n	800156e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fb5e 	bl	8000c04 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fb5a 	bl	8000c04 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	@ 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e262      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800155e:	4b88      	ldr	r3, [pc, #544]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x2d0>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d060      	beq.n	800163c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	2b04      	cmp	r3, #4
 800157e:	d005      	beq.n	800158c <HAL_RCC_OscConfig+0x310>
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2b0c      	cmp	r3, #12
 8001584:	d119      	bne.n	80015ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d116      	bne.n	80015ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800158c:	4b7c      	ldr	r3, [pc, #496]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_OscConfig+0x328>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e23f      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a4:	4b76      	ldr	r3, [pc, #472]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	061b      	lsls	r3, r3, #24
 80015b2:	4973      	ldr	r1, [pc, #460]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b8:	e040      	b.n	800163c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d023      	beq.n	800160a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a6e      	ldr	r2, [pc, #440]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80015c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ce:	f7ff fb19 	bl	8000c04 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d6:	f7ff fb15 	bl	8000c04 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e21d      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e8:	4b65      	ldr	r3, [pc, #404]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4b62      	ldr	r3, [pc, #392]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	061b      	lsls	r3, r3, #24
 8001602:	495f      	ldr	r1, [pc, #380]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
 8001608:	e018      	b.n	800163c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160a:	4b5d      	ldr	r3, [pc, #372]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a5c      	ldr	r2, [pc, #368]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001616:	f7ff faf5 	bl	8000c04 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161e:	f7ff faf1 	bl	8000c04 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e1f9      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001630:	4b53      	ldr	r3, [pc, #332]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f0      	bne.n	800161e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d03c      	beq.n	80016c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d01c      	beq.n	800168a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001650:	4b4b      	ldr	r3, [pc, #300]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001656:	4a4a      	ldr	r2, [pc, #296]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001660:	f7ff fad0 	bl	8000c04 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001668:	f7ff facc 	bl	8000c04 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e1d4      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800167a:	4b41      	ldr	r3, [pc, #260]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800167c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0ef      	beq.n	8001668 <HAL_RCC_OscConfig+0x3ec>
 8001688:	e01b      	b.n	80016c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168a:	4b3d      	ldr	r3, [pc, #244]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800168c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001690:	4a3b      	ldr	r2, [pc, #236]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001692:	f023 0301 	bic.w	r3, r3, #1
 8001696:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169a:	f7ff fab3 	bl	8000c04 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a2:	f7ff faaf 	bl	8000c04 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e1b7      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b4:	4b32      	ldr	r3, [pc, #200]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80016b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1ef      	bne.n	80016a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 80a6 	beq.w	800181c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10d      	bne.n	80016fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e0:	4b27      	ldr	r3, [pc, #156]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e4:	4a26      	ldr	r2, [pc, #152]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80016e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ec:	4b24      	ldr	r3, [pc, #144]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f8:	2301      	movs	r3, #1
 80016fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016fc:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <HAL_RCC_OscConfig+0x508>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d118      	bne.n	800173a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001708:	4b1e      	ldr	r3, [pc, #120]	@ (8001784 <HAL_RCC_OscConfig+0x508>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a1d      	ldr	r2, [pc, #116]	@ (8001784 <HAL_RCC_OscConfig+0x508>)
 800170e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001712:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001714:	f7ff fa76 	bl	8000c04 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171c:	f7ff fa72 	bl	8000c04 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e17a      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172e:	4b15      	ldr	r3, [pc, #84]	@ (8001784 <HAL_RCC_OscConfig+0x508>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d108      	bne.n	8001754 <HAL_RCC_OscConfig+0x4d8>
 8001742:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001752:	e029      	b.n	80017a8 <HAL_RCC_OscConfig+0x52c>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b05      	cmp	r3, #5
 800175a:	d115      	bne.n	8001788 <HAL_RCC_OscConfig+0x50c>
 800175c:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800175e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001762:	4a07      	ldr	r2, [pc, #28]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800176c:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 800176e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001772:	4a03      	ldr	r2, [pc, #12]	@ (8001780 <HAL_RCC_OscConfig+0x504>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800177c:	e014      	b.n	80017a8 <HAL_RCC_OscConfig+0x52c>
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
 8001784:	40007000 	.word	0x40007000
 8001788:	4b9c      	ldr	r3, [pc, #624]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 800178a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800178e:	4a9b      	ldr	r2, [pc, #620]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001798:	4b98      	ldr	r3, [pc, #608]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179e:	4a97      	ldr	r2, [pc, #604]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 80017a0:	f023 0304 	bic.w	r3, r3, #4
 80017a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d016      	beq.n	80017de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7ff fa28 	bl	8000c04 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b8:	f7ff fa24 	bl	8000c04 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e12a      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ce:	4b8b      	ldr	r3, [pc, #556]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 80017d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0ed      	beq.n	80017b8 <HAL_RCC_OscConfig+0x53c>
 80017dc:	e015      	b.n	800180a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017de:	f7ff fa11 	bl	8000c04 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7ff fa0d 	bl	8000c04 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e113      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017fc:	4b7f      	ldr	r3, [pc, #508]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 80017fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1ed      	bne.n	80017e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800180a:	7ffb      	ldrb	r3, [r7, #31]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d105      	bne.n	800181c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001810:	4b7a      	ldr	r3, [pc, #488]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 8001812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001814:	4a79      	ldr	r2, [pc, #484]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 8001816:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800181a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80fe 	beq.w	8001a22 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182a:	2b02      	cmp	r3, #2
 800182c:	f040 80d0 	bne.w	80019d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001830:	4b72      	ldr	r3, [pc, #456]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f003 0203 	and.w	r2, r3, #3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001840:	429a      	cmp	r2, r3
 8001842:	d130      	bne.n	80018a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	3b01      	subs	r3, #1
 8001850:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d127      	bne.n	80018a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001860:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d11f      	bne.n	80018a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001870:	2a07      	cmp	r2, #7
 8001872:	bf14      	ite	ne
 8001874:	2201      	movne	r2, #1
 8001876:	2200      	moveq	r2, #0
 8001878:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800187a:	4293      	cmp	r3, r2
 800187c:	d113      	bne.n	80018a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001888:	085b      	lsrs	r3, r3, #1
 800188a:	3b01      	subs	r3, #1
 800188c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d109      	bne.n	80018a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	085b      	lsrs	r3, r3, #1
 800189e:	3b01      	subs	r3, #1
 80018a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d06e      	beq.n	8001984 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b0c      	cmp	r3, #12
 80018aa:	d069      	beq.n	8001980 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018ac:	4b53      	ldr	r3, [pc, #332]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d105      	bne.n	80018c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018b8:	4b50      	ldr	r3, [pc, #320]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0ad      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018c8:	4b4c      	ldr	r3, [pc, #304]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a4b      	ldr	r2, [pc, #300]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 80018ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018d4:	f7ff f996 	bl	8000c04 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff f992 	bl	8000c04 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e09a      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ee:	4b43      	ldr	r3, [pc, #268]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018fa:	4b40      	ldr	r3, [pc, #256]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	4b40      	ldr	r3, [pc, #256]	@ (8001a00 <HAL_RCC_OscConfig+0x784>)
 8001900:	4013      	ands	r3, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800190a:	3a01      	subs	r2, #1
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	4311      	orrs	r1, r2
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001914:	0212      	lsls	r2, r2, #8
 8001916:	4311      	orrs	r1, r2
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800191c:	0852      	lsrs	r2, r2, #1
 800191e:	3a01      	subs	r2, #1
 8001920:	0552      	lsls	r2, r2, #21
 8001922:	4311      	orrs	r1, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001928:	0852      	lsrs	r2, r2, #1
 800192a:	3a01      	subs	r2, #1
 800192c:	0652      	lsls	r2, r2, #25
 800192e:	4311      	orrs	r1, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001934:	0912      	lsrs	r2, r2, #4
 8001936:	0452      	lsls	r2, r2, #17
 8001938:	430a      	orrs	r2, r1
 800193a:	4930      	ldr	r1, [pc, #192]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 800193c:	4313      	orrs	r3, r2
 800193e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001940:	4b2e      	ldr	r3, [pc, #184]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a2d      	ldr	r2, [pc, #180]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 8001946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800194a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800194c:	4b2b      	ldr	r3, [pc, #172]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4a2a      	ldr	r2, [pc, #168]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 8001952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001956:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001958:	f7ff f954 	bl	8000c04 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff f950 	bl	8000c04 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e058      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001972:	4b22      	ldr	r3, [pc, #136]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800197e:	e050      	b.n	8001a22 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e04f      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001984:	4b1d      	ldr	r3, [pc, #116]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d148      	bne.n	8001a22 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001990:	4b1a      	ldr	r3, [pc, #104]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a19      	ldr	r2, [pc, #100]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 8001996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800199a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800199c:	4b17      	ldr	r3, [pc, #92]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4a16      	ldr	r2, [pc, #88]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 80019a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019a8:	f7ff f92c 	bl	8000c04 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff f928 	bl	8000c04 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e030      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0x734>
 80019ce:	e028      	b.n	8001a22 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2b0c      	cmp	r3, #12
 80019d4:	d023      	beq.n	8001a1e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a08      	ldr	r2, [pc, #32]	@ (80019fc <HAL_RCC_OscConfig+0x780>)
 80019dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e2:	f7ff f90f 	bl	8000c04 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e8:	e00c      	b.n	8001a04 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ea:	f7ff f90b 	bl	8000c04 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d905      	bls.n	8001a04 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e013      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
 80019fc:	40021000 	.word	0x40021000
 8001a00:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a04:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <HAL_RCC_OscConfig+0x7b0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1ec      	bne.n	80019ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_RCC_OscConfig+0x7b0>)
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	4905      	ldr	r1, [pc, #20]	@ (8001a2c <HAL_RCC_OscConfig+0x7b0>)
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_RCC_OscConfig+0x7b4>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60cb      	str	r3, [r1, #12]
 8001a1c:	e001      	b.n	8001a22 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3720      	adds	r7, #32
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	feeefffc 	.word	0xfeeefffc

08001a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0e7      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a48:	4b75      	ldr	r3, [pc, #468]	@ (8001c20 <HAL_RCC_ClockConfig+0x1ec>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d910      	bls.n	8001a78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a56:	4b72      	ldr	r3, [pc, #456]	@ (8001c20 <HAL_RCC_ClockConfig+0x1ec>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 0207 	bic.w	r2, r3, #7
 8001a5e:	4970      	ldr	r1, [pc, #448]	@ (8001c20 <HAL_RCC_ClockConfig+0x1ec>)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a66:	4b6e      	ldr	r3, [pc, #440]	@ (8001c20 <HAL_RCC_ClockConfig+0x1ec>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0cf      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d010      	beq.n	8001aa6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	4b66      	ldr	r3, [pc, #408]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d908      	bls.n	8001aa6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a94:	4b63      	ldr	r3, [pc, #396]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	4960      	ldr	r1, [pc, #384]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d04c      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d107      	bne.n	8001aca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aba:	4b5a      	ldr	r3, [pc, #360]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d121      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e0a6      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d107      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad2:	4b54      	ldr	r3, [pc, #336]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d115      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e09a      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aea:	4b4e      	ldr	r3, [pc, #312]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e08e      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001afa:	4b4a      	ldr	r3, [pc, #296]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e086      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b0a:	4b46      	ldr	r3, [pc, #280]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f023 0203 	bic.w	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4943      	ldr	r1, [pc, #268]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b1c:	f7ff f872 	bl	8000c04 <HAL_GetTick>
 8001b20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b24:	f7ff f86e 	bl	8000c04 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e06e      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 020c 	and.w	r2, r3, #12
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d1eb      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d010      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	4b31      	ldr	r3, [pc, #196]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d208      	bcs.n	8001b7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b68:	4b2e      	ldr	r3, [pc, #184]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	492b      	ldr	r1, [pc, #172]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b7a:	4b29      	ldr	r3, [pc, #164]	@ (8001c20 <HAL_RCC_ClockConfig+0x1ec>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d210      	bcs.n	8001baa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b88:	4b25      	ldr	r3, [pc, #148]	@ (8001c20 <HAL_RCC_ClockConfig+0x1ec>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f023 0207 	bic.w	r2, r3, #7
 8001b90:	4923      	ldr	r1, [pc, #140]	@ (8001c20 <HAL_RCC_ClockConfig+0x1ec>)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b98:	4b21      	ldr	r3, [pc, #132]	@ (8001c20 <HAL_RCC_ClockConfig+0x1ec>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d001      	beq.n	8001baa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e036      	b.n	8001c18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d008      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	4918      	ldr	r1, [pc, #96]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d009      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bd4:	4b13      	ldr	r3, [pc, #76]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4910      	ldr	r1, [pc, #64]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001be8:	f000 f824 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b0d      	ldr	r3, [pc, #52]	@ (8001c24 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	091b      	lsrs	r3, r3, #4
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	490b      	ldr	r1, [pc, #44]	@ (8001c28 <HAL_RCC_ClockConfig+0x1f4>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	f003 031f 	and.w	r3, r3, #31
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
 8001c04:	4a09      	ldr	r2, [pc, #36]	@ (8001c2c <HAL_RCC_ClockConfig+0x1f8>)
 8001c06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c08:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <HAL_RCC_ClockConfig+0x1fc>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe ffa9 	bl	8000b64 <HAL_InitTick>
 8001c12:	4603      	mov	r3, r0
 8001c14:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c16:	7afb      	ldrb	r3, [r7, #11]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40022000 	.word	0x40022000
 8001c24:	40021000 	.word	0x40021000
 8001c28:	08004368 	.word	0x08004368
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	@ 0x24
 8001c38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c42:	4b3e      	ldr	r3, [pc, #248]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0x34>
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d121      	bne.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d11e      	bne.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c68:	4b34      	ldr	r3, [pc, #208]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0308 	and.w	r3, r3, #8
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d107      	bne.n	8001c84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c74:	4b31      	ldr	r3, [pc, #196]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c7a:	0a1b      	lsrs	r3, r3, #8
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	e005      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c84:	4b2d      	ldr	r3, [pc, #180]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c90:	4a2b      	ldr	r2, [pc, #172]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10d      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d102      	bne.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cac:	4b25      	ldr	r3, [pc, #148]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	e004      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cb8:	4b23      	ldr	r3, [pc, #140]	@ (8001d48 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	d134      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d003      	beq.n	8001cda <HAL_RCC_GetSysClockFreq+0xa6>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d003      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xac>
 8001cd8:	e005      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cda:	4b1a      	ldr	r3, [pc, #104]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cdc:	617b      	str	r3, [r7, #20]
      break;
 8001cde:	e005      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ce0:	4b19      	ldr	r3, [pc, #100]	@ (8001d48 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ce2:	617b      	str	r3, [r7, #20]
      break;
 8001ce4:	e002      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	617b      	str	r3, [r7, #20]
      break;
 8001cea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cec:	4b13      	ldr	r3, [pc, #76]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	0a1b      	lsrs	r3, r3, #8
 8001d00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	fb03 f202 	mul.w	r2, r3, r2
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d12:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	0e5b      	lsrs	r3, r3, #25
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d2c:	69bb      	ldr	r3, [r7, #24]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3724      	adds	r7, #36	@ 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08004380 	.word	0x08004380
 8001d44:	00f42400 	.word	0x00f42400
 8001d48:	007a1200 	.word	0x007a1200

08001d4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d50:	4b03      	ldr	r3, [pc, #12]	@ (8001d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000000 	.word	0x20000000

08001d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d68:	f7ff fff0 	bl	8001d4c <HAL_RCC_GetHCLKFreq>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	4904      	ldr	r1, [pc, #16]	@ (8001d8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d7a:	5ccb      	ldrb	r3, [r1, r3]
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	08004378 	.word	0x08004378

08001d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d94:	f7ff ffda 	bl	8001d4c <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	0adb      	lsrs	r3, r3, #11
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4904      	ldr	r1, [pc, #16]	@ (8001db8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08004378 	.word	0x08004378

08001dbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001dd4:	f7ff f9ee 	bl	80011b4 <HAL_PWREx_GetVoltageRange>
 8001dd8:	6178      	str	r0, [r7, #20]
 8001dda:	e014      	b.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	4b25      	ldr	r3, [pc, #148]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de0:	4a24      	ldr	r2, [pc, #144]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001de2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de8:	4b22      	ldr	r3, [pc, #136]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001df4:	f7ff f9de 	bl	80011b4 <HAL_PWREx_GetVoltageRange>
 8001df8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8001e74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e0c:	d10b      	bne.n	8001e26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b80      	cmp	r3, #128	@ 0x80
 8001e12:	d919      	bls.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e18:	d902      	bls.n	8001e20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	e013      	b.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e20:	2301      	movs	r3, #1
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	e010      	b.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b80      	cmp	r3, #128	@ 0x80
 8001e2a:	d902      	bls.n	8001e32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	e00a      	b.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b80      	cmp	r3, #128	@ 0x80
 8001e36:	d102      	bne.n	8001e3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e38:	2302      	movs	r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	e004      	b.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b70      	cmp	r3, #112	@ 0x70
 8001e42:	d101      	bne.n	8001e48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e44:	2301      	movs	r3, #1
 8001e46:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e48:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 0207 	bic.w	r2, r3, #7
 8001e50:	4909      	ldr	r1, [pc, #36]	@ (8001e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e58:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d001      	beq.n	8001e6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40022000 	.word	0x40022000

08001e7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e84:	2300      	movs	r3, #0
 8001e86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e88:	2300      	movs	r3, #0
 8001e8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d041      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ea0:	d02a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ea2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001ea6:	d824      	bhi.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ea8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001eac:	d008      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001eae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001eb2:	d81e      	bhi.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001eb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ebc:	d010      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ebe:	e018      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ec0:	4b86      	ldr	r3, [pc, #536]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4a85      	ldr	r2, [pc, #532]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ecc:	e015      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 fabb 	bl	8002450 <RCCEx_PLLSAI1_Config>
 8001eda:	4603      	mov	r3, r0
 8001edc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ede:	e00c      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3320      	adds	r3, #32
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fba6 	bl	8002638 <RCCEx_PLLSAI2_Config>
 8001eec:	4603      	mov	r3, r0
 8001eee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ef0:	e003      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ef6:	e000      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001efa:	7cfb      	ldrb	r3, [r7, #19]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10b      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f00:	4b76      	ldr	r3, [pc, #472]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f0e:	4973      	ldr	r1, [pc, #460]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f16:	e001      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f18:	7cfb      	ldrb	r3, [r7, #19]
 8001f1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d041      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f30:	d02a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001f36:	d824      	bhi.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f3c:	d008      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f42:	d81e      	bhi.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f4c:	d010      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f4e:	e018      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f50:	4b62      	ldr	r3, [pc, #392]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4a61      	ldr	r2, [pc, #388]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f5c:	e015      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 fa73 	bl	8002450 <RCCEx_PLLSAI1_Config>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f6e:	e00c      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3320      	adds	r3, #32
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f000 fb5e 	bl	8002638 <RCCEx_PLLSAI2_Config>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f80:	e003      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	74fb      	strb	r3, [r7, #19]
      break;
 8001f86:	e000      	b.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f8a:	7cfb      	ldrb	r3, [r7, #19]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f90:	4b52      	ldr	r3, [pc, #328]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f9e:	494f      	ldr	r1, [pc, #316]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fa6:	e001      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa8:	7cfb      	ldrb	r3, [r7, #19]
 8001faa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80a0 	beq.w	80020fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fbe:	4b47      	ldr	r3, [pc, #284]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00d      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd4:	4b41      	ldr	r3, [pc, #260]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd8:	4a40      	ldr	r2, [pc, #256]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fe0:	4b3e      	ldr	r3, [pc, #248]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fec:	2301      	movs	r3, #1
 8001fee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff0:	4b3b      	ldr	r3, [pc, #236]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a3a      	ldr	r2, [pc, #232]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ffa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ffc:	f7fe fe02 	bl	8000c04 <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002002:	e009      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002004:	f7fe fdfe 	bl	8000c04 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d902      	bls.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	74fb      	strb	r3, [r7, #19]
        break;
 8002016:	e005      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002018:	4b31      	ldr	r3, [pc, #196]	@ (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ef      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002024:	7cfb      	ldrb	r3, [r7, #19]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d15c      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800202a:	4b2c      	ldr	r3, [pc, #176]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002030:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002034:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01f      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	429a      	cmp	r2, r3
 8002046:	d019      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002048:	4b24      	ldr	r3, [pc, #144]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002052:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002054:	4b21      	ldr	r3, [pc, #132]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205a:	4a20      	ldr	r2, [pc, #128]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002064:	4b1d      	ldr	r3, [pc, #116]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206a:	4a1c      	ldr	r2, [pc, #112]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002074:	4a19      	ldr	r2, [pc, #100]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d016      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7fe fdbd 	bl	8000c04 <HAL_GetTick>
 800208a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208c:	e00b      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208e:	f7fe fdb9 	bl	8000c04 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209c:	4293      	cmp	r3, r2
 800209e:	d902      	bls.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	74fb      	strb	r3, [r7, #19]
            break;
 80020a4:	e006      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0ec      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10c      	bne.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020ba:	4b08      	ldr	r3, [pc, #32]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020ca:	4904      	ldr	r1, [pc, #16]	@ (80020dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020d2:	e009      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020d4:	7cfb      	ldrb	r3, [r7, #19]
 80020d6:	74bb      	strb	r3, [r7, #18]
 80020d8:	e006      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e4:	7cfb      	ldrb	r3, [r7, #19]
 80020e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e8:	7c7b      	ldrb	r3, [r7, #17]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d105      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ee:	4b9e      	ldr	r3, [pc, #632]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020f2:	4a9d      	ldr	r2, [pc, #628]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002106:	4b98      	ldr	r3, [pc, #608]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210c:	f023 0203 	bic.w	r2, r3, #3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002114:	4994      	ldr	r1, [pc, #592]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002128:	4b8f      	ldr	r3, [pc, #572]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212e:	f023 020c 	bic.w	r2, r3, #12
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002136:	498c      	ldr	r1, [pc, #560]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800214a:	4b87      	ldr	r3, [pc, #540]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002150:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002158:	4983      	ldr	r1, [pc, #524]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800216c:	4b7e      	ldr	r3, [pc, #504]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	497b      	ldr	r1, [pc, #492]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0310 	and.w	r3, r3, #16
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800218e:	4b76      	ldr	r3, [pc, #472]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800219c:	4972      	ldr	r1, [pc, #456]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00a      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021b0:	4b6d      	ldr	r3, [pc, #436]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021be:	496a      	ldr	r1, [pc, #424]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021d2:	4b65      	ldr	r3, [pc, #404]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e0:	4961      	ldr	r1, [pc, #388]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021f4:	4b5c      	ldr	r3, [pc, #368]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002202:	4959      	ldr	r1, [pc, #356]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002216:	4b54      	ldr	r3, [pc, #336]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002224:	4950      	ldr	r1, [pc, #320]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002238:	4b4b      	ldr	r3, [pc, #300]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002246:	4948      	ldr	r1, [pc, #288]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800225a:	4b43      	ldr	r3, [pc, #268]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002260:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002268:	493f      	ldr	r1, [pc, #252]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d028      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800227c:	4b3a      	ldr	r3, [pc, #232]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002282:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800228a:	4937      	ldr	r1, [pc, #220]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800229a:	d106      	bne.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800229c:	4b32      	ldr	r3, [pc, #200]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a31      	ldr	r2, [pc, #196]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022a6:	60d3      	str	r3, [r2, #12]
 80022a8:	e011      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022b2:	d10c      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3304      	adds	r3, #4
 80022b8:	2101      	movs	r1, #1
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f8c8 	bl	8002450 <RCCEx_PLLSAI1_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022c4:	7cfb      	ldrb	r3, [r7, #19]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d028      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80022da:	4b23      	ldr	r3, [pc, #140]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e8:	491f      	ldr	r1, [pc, #124]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022f8:	d106      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002300:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002304:	60d3      	str	r3, [r2, #12]
 8002306:	e011      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002310:	d10c      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3304      	adds	r3, #4
 8002316:	2101      	movs	r1, #1
 8002318:	4618      	mov	r0, r3
 800231a:	f000 f899 	bl	8002450 <RCCEx_PLLSAI1_Config>
 800231e:	4603      	mov	r3, r0
 8002320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002322:	7cfb      	ldrb	r3, [r7, #19]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002328:	7cfb      	ldrb	r3, [r7, #19]
 800232a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d02b      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002338:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002346:	4908      	ldr	r1, [pc, #32]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002352:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002356:	d109      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002358:	4b03      	ldr	r3, [pc, #12]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a02      	ldr	r2, [pc, #8]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002362:	60d3      	str	r3, [r2, #12]
 8002364:	e014      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002370:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002374:	d10c      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3304      	adds	r3, #4
 800237a:	2101      	movs	r1, #1
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f867 	bl	8002450 <RCCEx_PLLSAI1_Config>
 8002382:	4603      	mov	r3, r0
 8002384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002386:	7cfb      	ldrb	r3, [r7, #19]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d02f      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800239c:	4b2b      	ldr	r3, [pc, #172]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023aa:	4928      	ldr	r1, [pc, #160]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023ba:	d10d      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3304      	adds	r3, #4
 80023c0:	2102      	movs	r1, #2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f844 	bl	8002450 <RCCEx_PLLSAI1_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d014      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	74bb      	strb	r3, [r7, #18]
 80023d6:	e011      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023e0:	d10c      	bne.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3320      	adds	r3, #32
 80023e6:	2102      	movs	r1, #2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 f925 	bl	8002638 <RCCEx_PLLSAI2_Config>
 80023ee:	4603      	mov	r3, r0
 80023f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002408:	4b10      	ldr	r3, [pc, #64]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800240a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002416:	490d      	ldr	r1, [pc, #52]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002418:	4313      	orrs	r3, r2
 800241a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800242a:	4b08      	ldr	r3, [pc, #32]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800242c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002430:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800243a:	4904      	ldr	r1, [pc, #16]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002442:	7cbb      	ldrb	r3, [r7, #18]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000

08002450 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800245e:	4b75      	ldr	r3, [pc, #468]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d018      	beq.n	800249c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800246a:	4b72      	ldr	r3, [pc, #456]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f003 0203 	and.w	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d10d      	bne.n	8002496 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
       ||
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002482:	4b6c      	ldr	r3, [pc, #432]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
       ||
 8002492:	429a      	cmp	r2, r3
 8002494:	d047      	beq.n	8002526 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	e044      	b.n	8002526 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d018      	beq.n	80024d6 <RCCEx_PLLSAI1_Config+0x86>
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d825      	bhi.n	80024f4 <RCCEx_PLLSAI1_Config+0xa4>
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d002      	beq.n	80024b2 <RCCEx_PLLSAI1_Config+0x62>
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d009      	beq.n	80024c4 <RCCEx_PLLSAI1_Config+0x74>
 80024b0:	e020      	b.n	80024f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024b2:	4b60      	ldr	r3, [pc, #384]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d11d      	bne.n	80024fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c2:	e01a      	b.n	80024fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024c4:	4b5b      	ldr	r3, [pc, #364]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d116      	bne.n	80024fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d4:	e013      	b.n	80024fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024d6:	4b57      	ldr	r3, [pc, #348]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10f      	bne.n	8002502 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024e2:	4b54      	ldr	r3, [pc, #336]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024f2:	e006      	b.n	8002502 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
      break;
 80024f8:	e004      	b.n	8002504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024fa:	bf00      	nop
 80024fc:	e002      	b.n	8002504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024fe:	bf00      	nop
 8002500:	e000      	b.n	8002504 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002502:	bf00      	nop
    }

    if(status == HAL_OK)
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10d      	bne.n	8002526 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800250a:	4b4a      	ldr	r3, [pc, #296]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	430b      	orrs	r3, r1
 8002520:	4944      	ldr	r1, [pc, #272]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002522:	4313      	orrs	r3, r2
 8002524:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d17d      	bne.n	8002628 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800252c:	4b41      	ldr	r3, [pc, #260]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a40      	ldr	r2, [pc, #256]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002532:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002538:	f7fe fb64 	bl	8000c04 <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800253e:	e009      	b.n	8002554 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002540:	f7fe fb60 	bl	8000c04 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d902      	bls.n	8002554 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	73fb      	strb	r3, [r7, #15]
        break;
 8002552:	e005      	b.n	8002560 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002554:	4b37      	ldr	r3, [pc, #220]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1ef      	bne.n	8002540 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d160      	bne.n	8002628 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d111      	bne.n	8002590 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800256c:	4b31      	ldr	r3, [pc, #196]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002574:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6892      	ldr	r2, [r2, #8]
 800257c:	0211      	lsls	r1, r2, #8
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68d2      	ldr	r2, [r2, #12]
 8002582:	0912      	lsrs	r2, r2, #4
 8002584:	0452      	lsls	r2, r2, #17
 8002586:	430a      	orrs	r2, r1
 8002588:	492a      	ldr	r1, [pc, #168]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258a:	4313      	orrs	r3, r2
 800258c:	610b      	str	r3, [r1, #16]
 800258e:	e027      	b.n	80025e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d112      	bne.n	80025bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002596:	4b27      	ldr	r3, [pc, #156]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800259e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6892      	ldr	r2, [r2, #8]
 80025a6:	0211      	lsls	r1, r2, #8
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6912      	ldr	r2, [r2, #16]
 80025ac:	0852      	lsrs	r2, r2, #1
 80025ae:	3a01      	subs	r2, #1
 80025b0:	0552      	lsls	r2, r2, #21
 80025b2:	430a      	orrs	r2, r1
 80025b4:	491f      	ldr	r1, [pc, #124]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	610b      	str	r3, [r1, #16]
 80025ba:	e011      	b.n	80025e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80025c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6892      	ldr	r2, [r2, #8]
 80025cc:	0211      	lsls	r1, r2, #8
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6952      	ldr	r2, [r2, #20]
 80025d2:	0852      	lsrs	r2, r2, #1
 80025d4:	3a01      	subs	r2, #1
 80025d6:	0652      	lsls	r2, r2, #25
 80025d8:	430a      	orrs	r2, r1
 80025da:	4916      	ldr	r1, [pc, #88]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025e0:	4b14      	ldr	r3, [pc, #80]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a13      	ldr	r2, [pc, #76]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7fe fb0a 	bl	8000c04 <HAL_GetTick>
 80025f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025f2:	e009      	b.n	8002608 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025f4:	f7fe fb06 	bl	8000c04 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d902      	bls.n	8002608 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	73fb      	strb	r3, [r7, #15]
          break;
 8002606:	e005      	b.n	8002614 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002608:	4b0a      	ldr	r3, [pc, #40]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0ef      	beq.n	80025f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800261a:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	4904      	ldr	r1, [pc, #16]	@ (8002634 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002624:	4313      	orrs	r3, r2
 8002626:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002628:	7bfb      	ldrb	r3, [r7, #15]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000

08002638 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002646:	4b6a      	ldr	r3, [pc, #424]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d018      	beq.n	8002684 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002652:	4b67      	ldr	r3, [pc, #412]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f003 0203 	and.w	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	429a      	cmp	r2, r3
 8002660:	d10d      	bne.n	800267e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
       ||
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800266a:	4b61      	ldr	r3, [pc, #388]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
       ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d047      	beq.n	800270e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	73fb      	strb	r3, [r7, #15]
 8002682:	e044      	b.n	800270e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d018      	beq.n	80026be <RCCEx_PLLSAI2_Config+0x86>
 800268c:	2b03      	cmp	r3, #3
 800268e:	d825      	bhi.n	80026dc <RCCEx_PLLSAI2_Config+0xa4>
 8002690:	2b01      	cmp	r3, #1
 8002692:	d002      	beq.n	800269a <RCCEx_PLLSAI2_Config+0x62>
 8002694:	2b02      	cmp	r3, #2
 8002696:	d009      	beq.n	80026ac <RCCEx_PLLSAI2_Config+0x74>
 8002698:	e020      	b.n	80026dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800269a:	4b55      	ldr	r3, [pc, #340]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d11d      	bne.n	80026e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026aa:	e01a      	b.n	80026e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026ac:	4b50      	ldr	r3, [pc, #320]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d116      	bne.n	80026e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026bc:	e013      	b.n	80026e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026be:	4b4c      	ldr	r3, [pc, #304]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10f      	bne.n	80026ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026ca:	4b49      	ldr	r3, [pc, #292]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026da:	e006      	b.n	80026ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
      break;
 80026e0:	e004      	b.n	80026ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026e2:	bf00      	nop
 80026e4:	e002      	b.n	80026ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026e6:	bf00      	nop
 80026e8:	e000      	b.n	80026ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10d      	bne.n	800270e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026f2:	4b3f      	ldr	r3, [pc, #252]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	430b      	orrs	r3, r1
 8002708:	4939      	ldr	r1, [pc, #228]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270a:	4313      	orrs	r3, r2
 800270c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d167      	bne.n	80027e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002714:	4b36      	ldr	r3, [pc, #216]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a35      	ldr	r2, [pc, #212]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800271e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002720:	f7fe fa70 	bl	8000c04 <HAL_GetTick>
 8002724:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002726:	e009      	b.n	800273c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002728:	f7fe fa6c 	bl	8000c04 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d902      	bls.n	800273c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	73fb      	strb	r3, [r7, #15]
        break;
 800273a:	e005      	b.n	8002748 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800273c:	4b2c      	ldr	r3, [pc, #176]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1ef      	bne.n	8002728 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d14a      	bne.n	80027e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d111      	bne.n	8002778 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002754:	4b26      	ldr	r3, [pc, #152]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800275c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6892      	ldr	r2, [r2, #8]
 8002764:	0211      	lsls	r1, r2, #8
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68d2      	ldr	r2, [r2, #12]
 800276a:	0912      	lsrs	r2, r2, #4
 800276c:	0452      	lsls	r2, r2, #17
 800276e:	430a      	orrs	r2, r1
 8002770:	491f      	ldr	r1, [pc, #124]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002772:	4313      	orrs	r3, r2
 8002774:	614b      	str	r3, [r1, #20]
 8002776:	e011      	b.n	800279c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002778:	4b1d      	ldr	r3, [pc, #116]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002780:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6892      	ldr	r2, [r2, #8]
 8002788:	0211      	lsls	r1, r2, #8
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6912      	ldr	r2, [r2, #16]
 800278e:	0852      	lsrs	r2, r2, #1
 8002790:	3a01      	subs	r2, #1
 8002792:	0652      	lsls	r2, r2, #25
 8002794:	430a      	orrs	r2, r1
 8002796:	4916      	ldr	r1, [pc, #88]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002798:	4313      	orrs	r3, r2
 800279a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800279c:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a13      	ldr	r2, [pc, #76]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7fe fa2c 	bl	8000c04 <HAL_GetTick>
 80027ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027ae:	e009      	b.n	80027c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027b0:	f7fe fa28 	bl	8000c04 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d902      	bls.n	80027c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	73fb      	strb	r3, [r7, #15]
          break;
 80027c2:	e005      	b.n	80027d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027c4:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0ef      	beq.n	80027b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80027d6:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	4904      	ldr	r1, [pc, #16]	@ (80027f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000

080027f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e049      	b.n	800289a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe f866 	bl	80008ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3304      	adds	r3, #4
 8002830:	4619      	mov	r1, r3
 8002832:	4610      	mov	r0, r2
 8002834:	f000 fb7a 	bl	8002f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e049      	b.n	8002948 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d106      	bne.n	80028ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f841 	bl	8002950 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2202      	movs	r2, #2
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3304      	adds	r3, #4
 80028de:	4619      	mov	r1, r3
 80028e0:	4610      	mov	r0, r2
 80028e2:	f000 fb23 	bl	8002f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <HAL_TIM_PWM_Start+0x24>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b01      	cmp	r3, #1
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	e03c      	b.n	8002a02 <HAL_TIM_PWM_Start+0x9e>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2b04      	cmp	r3, #4
 800298c:	d109      	bne.n	80029a2 <HAL_TIM_PWM_Start+0x3e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	bf14      	ite	ne
 800299a:	2301      	movne	r3, #1
 800299c:	2300      	moveq	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	e02f      	b.n	8002a02 <HAL_TIM_PWM_Start+0x9e>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d109      	bne.n	80029bc <HAL_TIM_PWM_Start+0x58>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	bf14      	ite	ne
 80029b4:	2301      	movne	r3, #1
 80029b6:	2300      	moveq	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	e022      	b.n	8002a02 <HAL_TIM_PWM_Start+0x9e>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d109      	bne.n	80029d6 <HAL_TIM_PWM_Start+0x72>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	bf14      	ite	ne
 80029ce:	2301      	movne	r3, #1
 80029d0:	2300      	moveq	r3, #0
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	e015      	b.n	8002a02 <HAL_TIM_PWM_Start+0x9e>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d109      	bne.n	80029f0 <HAL_TIM_PWM_Start+0x8c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	bf14      	ite	ne
 80029e8:	2301      	movne	r3, #1
 80029ea:	2300      	moveq	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	e008      	b.n	8002a02 <HAL_TIM_PWM_Start+0x9e>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e09c      	b.n	8002b44 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d104      	bne.n	8002a1a <HAL_TIM_PWM_Start+0xb6>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a18:	e023      	b.n	8002a62 <HAL_TIM_PWM_Start+0xfe>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d104      	bne.n	8002a2a <HAL_TIM_PWM_Start+0xc6>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a28:	e01b      	b.n	8002a62 <HAL_TIM_PWM_Start+0xfe>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d104      	bne.n	8002a3a <HAL_TIM_PWM_Start+0xd6>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a38:	e013      	b.n	8002a62 <HAL_TIM_PWM_Start+0xfe>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b0c      	cmp	r3, #12
 8002a3e:	d104      	bne.n	8002a4a <HAL_TIM_PWM_Start+0xe6>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a48:	e00b      	b.n	8002a62 <HAL_TIM_PWM_Start+0xfe>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b10      	cmp	r3, #16
 8002a4e:	d104      	bne.n	8002a5a <HAL_TIM_PWM_Start+0xf6>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a58:	e003      	b.n	8002a62 <HAL_TIM_PWM_Start+0xfe>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2201      	movs	r2, #1
 8002a68:	6839      	ldr	r1, [r7, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fe74 	bl	8003758 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a35      	ldr	r2, [pc, #212]	@ (8002b4c <HAL_TIM_PWM_Start+0x1e8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d013      	beq.n	8002aa2 <HAL_TIM_PWM_Start+0x13e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a34      	ldr	r2, [pc, #208]	@ (8002b50 <HAL_TIM_PWM_Start+0x1ec>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00e      	beq.n	8002aa2 <HAL_TIM_PWM_Start+0x13e>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a32      	ldr	r2, [pc, #200]	@ (8002b54 <HAL_TIM_PWM_Start+0x1f0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d009      	beq.n	8002aa2 <HAL_TIM_PWM_Start+0x13e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a31      	ldr	r2, [pc, #196]	@ (8002b58 <HAL_TIM_PWM_Start+0x1f4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d004      	beq.n	8002aa2 <HAL_TIM_PWM_Start+0x13e>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a2f      	ldr	r2, [pc, #188]	@ (8002b5c <HAL_TIM_PWM_Start+0x1f8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_PWM_Start+0x142>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_TIM_PWM_Start+0x144>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d007      	beq.n	8002abc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002aba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a22      	ldr	r2, [pc, #136]	@ (8002b4c <HAL_TIM_PWM_Start+0x1e8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d01d      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x19e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ace:	d018      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x19e>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a22      	ldr	r2, [pc, #136]	@ (8002b60 <HAL_TIM_PWM_Start+0x1fc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d013      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x19e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a21      	ldr	r2, [pc, #132]	@ (8002b64 <HAL_TIM_PWM_Start+0x200>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d00e      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x19e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b68 <HAL_TIM_PWM_Start+0x204>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d009      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x19e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a17      	ldr	r2, [pc, #92]	@ (8002b50 <HAL_TIM_PWM_Start+0x1ec>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d004      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x19e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a15      	ldr	r2, [pc, #84]	@ (8002b54 <HAL_TIM_PWM_Start+0x1f0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d115      	bne.n	8002b2e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	4b18      	ldr	r3, [pc, #96]	@ (8002b6c <HAL_TIM_PWM_Start+0x208>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b06      	cmp	r3, #6
 8002b12:	d015      	beq.n	8002b40 <HAL_TIM_PWM_Start+0x1dc>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b1a:	d011      	beq.n	8002b40 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2c:	e008      	b.n	8002b40 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f042 0201 	orr.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e000      	b.n	8002b42 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40012c00 	.word	0x40012c00
 8002b50:	40013400 	.word	0x40013400
 8002b54:	40014000 	.word	0x40014000
 8002b58:	40014400 	.word	0x40014400
 8002b5c:	40014800 	.word	0x40014800
 8002b60:	40000400 	.word	0x40000400
 8002b64:	40000800 	.word	0x40000800
 8002b68:	40000c00 	.word	0x40000c00
 8002b6c:	00010007 	.word	0x00010007

08002b70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e0ff      	b.n	8002d8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b14      	cmp	r3, #20
 8002b9a:	f200 80f0 	bhi.w	8002d7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002bf9 	.word	0x08002bf9
 8002ba8:	08002d7f 	.word	0x08002d7f
 8002bac:	08002d7f 	.word	0x08002d7f
 8002bb0:	08002d7f 	.word	0x08002d7f
 8002bb4:	08002c39 	.word	0x08002c39
 8002bb8:	08002d7f 	.word	0x08002d7f
 8002bbc:	08002d7f 	.word	0x08002d7f
 8002bc0:	08002d7f 	.word	0x08002d7f
 8002bc4:	08002c7b 	.word	0x08002c7b
 8002bc8:	08002d7f 	.word	0x08002d7f
 8002bcc:	08002d7f 	.word	0x08002d7f
 8002bd0:	08002d7f 	.word	0x08002d7f
 8002bd4:	08002cbb 	.word	0x08002cbb
 8002bd8:	08002d7f 	.word	0x08002d7f
 8002bdc:	08002d7f 	.word	0x08002d7f
 8002be0:	08002d7f 	.word	0x08002d7f
 8002be4:	08002cfd 	.word	0x08002cfd
 8002be8:	08002d7f 	.word	0x08002d7f
 8002bec:	08002d7f 	.word	0x08002d7f
 8002bf0:	08002d7f 	.word	0x08002d7f
 8002bf4:	08002d3d 	.word	0x08002d3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fa3a 	bl	8003078 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0208 	orr.w	r2, r2, #8
 8002c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0204 	bic.w	r2, r2, #4
 8002c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6999      	ldr	r1, [r3, #24]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	619a      	str	r2, [r3, #24]
      break;
 8002c36:	e0a5      	b.n	8002d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68b9      	ldr	r1, [r7, #8]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 faaa 	bl	8003198 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699a      	ldr	r2, [r3, #24]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6999      	ldr	r1, [r3, #24]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	021a      	lsls	r2, r3, #8
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	619a      	str	r2, [r3, #24]
      break;
 8002c78:	e084      	b.n	8002d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fb13 	bl	80032ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0208 	orr.w	r2, r2, #8
 8002c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69da      	ldr	r2, [r3, #28]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0204 	bic.w	r2, r2, #4
 8002ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	69d9      	ldr	r1, [r3, #28]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	61da      	str	r2, [r3, #28]
      break;
 8002cb8:	e064      	b.n	8002d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f000 fb7b 	bl	80033bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	69d9      	ldr	r1, [r3, #28]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	021a      	lsls	r2, r3, #8
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	61da      	str	r2, [r3, #28]
      break;
 8002cfa:	e043      	b.n	8002d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fbc4 	bl	8003490 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f042 0208 	orr.w	r2, r2, #8
 8002d16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0204 	bic.w	r2, r2, #4
 8002d26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d3a:	e023      	b.n	8002d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fc08 	bl	8003558 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d66:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	021a      	lsls	r2, r3, #8
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d7c:	e002      	b.n	8002d84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	75fb      	strb	r3, [r7, #23]
      break;
 8002d82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop

08002d98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d101      	bne.n	8002db4 <HAL_TIM_ConfigClockSource+0x1c>
 8002db0:	2302      	movs	r3, #2
 8002db2:	e0b6      	b.n	8002f22 <HAL_TIM_ConfigClockSource+0x18a>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dd2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002dde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002df0:	d03e      	beq.n	8002e70 <HAL_TIM_ConfigClockSource+0xd8>
 8002df2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002df6:	f200 8087 	bhi.w	8002f08 <HAL_TIM_ConfigClockSource+0x170>
 8002dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dfe:	f000 8086 	beq.w	8002f0e <HAL_TIM_ConfigClockSource+0x176>
 8002e02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e06:	d87f      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x170>
 8002e08:	2b70      	cmp	r3, #112	@ 0x70
 8002e0a:	d01a      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0xaa>
 8002e0c:	2b70      	cmp	r3, #112	@ 0x70
 8002e0e:	d87b      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x170>
 8002e10:	2b60      	cmp	r3, #96	@ 0x60
 8002e12:	d050      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x11e>
 8002e14:	2b60      	cmp	r3, #96	@ 0x60
 8002e16:	d877      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x170>
 8002e18:	2b50      	cmp	r3, #80	@ 0x50
 8002e1a:	d03c      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0xfe>
 8002e1c:	2b50      	cmp	r3, #80	@ 0x50
 8002e1e:	d873      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x170>
 8002e20:	2b40      	cmp	r3, #64	@ 0x40
 8002e22:	d058      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x13e>
 8002e24:	2b40      	cmp	r3, #64	@ 0x40
 8002e26:	d86f      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x170>
 8002e28:	2b30      	cmp	r3, #48	@ 0x30
 8002e2a:	d064      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x15e>
 8002e2c:	2b30      	cmp	r3, #48	@ 0x30
 8002e2e:	d86b      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x170>
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d060      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x15e>
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d867      	bhi.n	8002f08 <HAL_TIM_ConfigClockSource+0x170>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d05c      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x15e>
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d05a      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x15e>
 8002e40:	e062      	b.n	8002f08 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e52:	f000 fc61 	bl	8003718 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	609a      	str	r2, [r3, #8]
      break;
 8002e6e:	e04f      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e80:	f000 fc4a 	bl	8003718 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e92:	609a      	str	r2, [r3, #8]
      break;
 8002e94:	e03c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f000 fbbe 	bl	8003624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2150      	movs	r1, #80	@ 0x50
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fc17 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8002eb4:	e02c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	f000 fbdd 	bl	8003682 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2160      	movs	r1, #96	@ 0x60
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fc07 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8002ed4:	e01c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f000 fb9e 	bl	8003624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2140      	movs	r1, #64	@ 0x40
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 fbf7 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8002ef4:	e00c      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4619      	mov	r1, r3
 8002f00:	4610      	mov	r0, r2
 8002f02:	f000 fbee 	bl	80036e2 <TIM_ITRx_SetConfig>
      break;
 8002f06:	e003      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f0c:	e000      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002f0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a46      	ldr	r2, [pc, #280]	@ (8003058 <TIM_Base_SetConfig+0x12c>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d013      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f4a:	d00f      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a43      	ldr	r2, [pc, #268]	@ (800305c <TIM_Base_SetConfig+0x130>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00b      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a42      	ldr	r2, [pc, #264]	@ (8003060 <TIM_Base_SetConfig+0x134>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d007      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a41      	ldr	r2, [pc, #260]	@ (8003064 <TIM_Base_SetConfig+0x138>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d003      	beq.n	8002f6c <TIM_Base_SetConfig+0x40>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a40      	ldr	r2, [pc, #256]	@ (8003068 <TIM_Base_SetConfig+0x13c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d108      	bne.n	8002f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a35      	ldr	r2, [pc, #212]	@ (8003058 <TIM_Base_SetConfig+0x12c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d01f      	beq.n	8002fc6 <TIM_Base_SetConfig+0x9a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f8c:	d01b      	beq.n	8002fc6 <TIM_Base_SetConfig+0x9a>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a32      	ldr	r2, [pc, #200]	@ (800305c <TIM_Base_SetConfig+0x130>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d017      	beq.n	8002fc6 <TIM_Base_SetConfig+0x9a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a31      	ldr	r2, [pc, #196]	@ (8003060 <TIM_Base_SetConfig+0x134>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d013      	beq.n	8002fc6 <TIM_Base_SetConfig+0x9a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a30      	ldr	r2, [pc, #192]	@ (8003064 <TIM_Base_SetConfig+0x138>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00f      	beq.n	8002fc6 <TIM_Base_SetConfig+0x9a>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a2f      	ldr	r2, [pc, #188]	@ (8003068 <TIM_Base_SetConfig+0x13c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00b      	beq.n	8002fc6 <TIM_Base_SetConfig+0x9a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800306c <TIM_Base_SetConfig+0x140>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <TIM_Base_SetConfig+0x9a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8003070 <TIM_Base_SetConfig+0x144>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d003      	beq.n	8002fc6 <TIM_Base_SetConfig+0x9a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a2c      	ldr	r2, [pc, #176]	@ (8003074 <TIM_Base_SetConfig+0x148>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d108      	bne.n	8002fd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a16      	ldr	r2, [pc, #88]	@ (8003058 <TIM_Base_SetConfig+0x12c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00f      	beq.n	8003024 <TIM_Base_SetConfig+0xf8>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a18      	ldr	r2, [pc, #96]	@ (8003068 <TIM_Base_SetConfig+0x13c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00b      	beq.n	8003024 <TIM_Base_SetConfig+0xf8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a17      	ldr	r2, [pc, #92]	@ (800306c <TIM_Base_SetConfig+0x140>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d007      	beq.n	8003024 <TIM_Base_SetConfig+0xf8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a16      	ldr	r2, [pc, #88]	@ (8003070 <TIM_Base_SetConfig+0x144>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d003      	beq.n	8003024 <TIM_Base_SetConfig+0xf8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a15      	ldr	r2, [pc, #84]	@ (8003074 <TIM_Base_SetConfig+0x148>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d103      	bne.n	800302c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b01      	cmp	r3, #1
 800303c:	d105      	bne.n	800304a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f023 0201 	bic.w	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	611a      	str	r2, [r3, #16]
  }
}
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40012c00 	.word	0x40012c00
 800305c:	40000400 	.word	0x40000400
 8003060:	40000800 	.word	0x40000800
 8003064:	40000c00 	.word	0x40000c00
 8003068:	40013400 	.word	0x40013400
 800306c:	40014000 	.word	0x40014000
 8003070:	40014400 	.word	0x40014400
 8003074:	40014800 	.word	0x40014800

08003078 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f023 0201 	bic.w	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0303 	bic.w	r3, r3, #3
 80030b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f023 0302 	bic.w	r3, r3, #2
 80030c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003184 <TIM_OC1_SetConfig+0x10c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d00f      	beq.n	80030f8 <TIM_OC1_SetConfig+0x80>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a2b      	ldr	r2, [pc, #172]	@ (8003188 <TIM_OC1_SetConfig+0x110>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00b      	beq.n	80030f8 <TIM_OC1_SetConfig+0x80>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a2a      	ldr	r2, [pc, #168]	@ (800318c <TIM_OC1_SetConfig+0x114>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d007      	beq.n	80030f8 <TIM_OC1_SetConfig+0x80>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a29      	ldr	r2, [pc, #164]	@ (8003190 <TIM_OC1_SetConfig+0x118>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d003      	beq.n	80030f8 <TIM_OC1_SetConfig+0x80>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a28      	ldr	r2, [pc, #160]	@ (8003194 <TIM_OC1_SetConfig+0x11c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d10c      	bne.n	8003112 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f023 0308 	bic.w	r3, r3, #8
 80030fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4313      	orrs	r3, r2
 8003108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f023 0304 	bic.w	r3, r3, #4
 8003110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a1b      	ldr	r2, [pc, #108]	@ (8003184 <TIM_OC1_SetConfig+0x10c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00f      	beq.n	800313a <TIM_OC1_SetConfig+0xc2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a1a      	ldr	r2, [pc, #104]	@ (8003188 <TIM_OC1_SetConfig+0x110>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00b      	beq.n	800313a <TIM_OC1_SetConfig+0xc2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a19      	ldr	r2, [pc, #100]	@ (800318c <TIM_OC1_SetConfig+0x114>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d007      	beq.n	800313a <TIM_OC1_SetConfig+0xc2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a18      	ldr	r2, [pc, #96]	@ (8003190 <TIM_OC1_SetConfig+0x118>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d003      	beq.n	800313a <TIM_OC1_SetConfig+0xc2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a17      	ldr	r2, [pc, #92]	@ (8003194 <TIM_OC1_SetConfig+0x11c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d111      	bne.n	800315e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	621a      	str	r2, [r3, #32]
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	40012c00 	.word	0x40012c00
 8003188:	40013400 	.word	0x40013400
 800318c:	40014000 	.word	0x40014000
 8003190:	40014400 	.word	0x40014400
 8003194:	40014800 	.word	0x40014800

08003198 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f023 0210 	bic.w	r2, r3, #16
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f023 0320 	bic.w	r3, r3, #32
 80031e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a28      	ldr	r2, [pc, #160]	@ (8003298 <TIM_OC2_SetConfig+0x100>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d003      	beq.n	8003204 <TIM_OC2_SetConfig+0x6c>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a27      	ldr	r2, [pc, #156]	@ (800329c <TIM_OC2_SetConfig+0x104>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d10d      	bne.n	8003220 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800320a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	4313      	orrs	r3, r2
 8003216:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800321e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a1d      	ldr	r2, [pc, #116]	@ (8003298 <TIM_OC2_SetConfig+0x100>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00f      	beq.n	8003248 <TIM_OC2_SetConfig+0xb0>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a1c      	ldr	r2, [pc, #112]	@ (800329c <TIM_OC2_SetConfig+0x104>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00b      	beq.n	8003248 <TIM_OC2_SetConfig+0xb0>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a1b      	ldr	r2, [pc, #108]	@ (80032a0 <TIM_OC2_SetConfig+0x108>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d007      	beq.n	8003248 <TIM_OC2_SetConfig+0xb0>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a1a      	ldr	r2, [pc, #104]	@ (80032a4 <TIM_OC2_SetConfig+0x10c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d003      	beq.n	8003248 <TIM_OC2_SetConfig+0xb0>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a19      	ldr	r2, [pc, #100]	@ (80032a8 <TIM_OC2_SetConfig+0x110>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d113      	bne.n	8003270 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800324e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003256:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	621a      	str	r2, [r3, #32]
}
 800328a:	bf00      	nop
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40012c00 	.word	0x40012c00
 800329c:	40013400 	.word	0x40013400
 80032a0:	40014000 	.word	0x40014000
 80032a4:	40014400 	.word	0x40014400
 80032a8:	40014800 	.word	0x40014800

080032ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0303 	bic.w	r3, r3, #3
 80032e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	021b      	lsls	r3, r3, #8
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a27      	ldr	r2, [pc, #156]	@ (80033a8 <TIM_OC3_SetConfig+0xfc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d003      	beq.n	8003316 <TIM_OC3_SetConfig+0x6a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a26      	ldr	r2, [pc, #152]	@ (80033ac <TIM_OC3_SetConfig+0x100>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d10d      	bne.n	8003332 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800331c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	021b      	lsls	r3, r3, #8
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a1c      	ldr	r2, [pc, #112]	@ (80033a8 <TIM_OC3_SetConfig+0xfc>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d00f      	beq.n	800335a <TIM_OC3_SetConfig+0xae>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a1b      	ldr	r2, [pc, #108]	@ (80033ac <TIM_OC3_SetConfig+0x100>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00b      	beq.n	800335a <TIM_OC3_SetConfig+0xae>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a1a      	ldr	r2, [pc, #104]	@ (80033b0 <TIM_OC3_SetConfig+0x104>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d007      	beq.n	800335a <TIM_OC3_SetConfig+0xae>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a19      	ldr	r2, [pc, #100]	@ (80033b4 <TIM_OC3_SetConfig+0x108>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d003      	beq.n	800335a <TIM_OC3_SetConfig+0xae>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a18      	ldr	r2, [pc, #96]	@ (80033b8 <TIM_OC3_SetConfig+0x10c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d113      	bne.n	8003382 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	621a      	str	r2, [r3, #32]
}
 800339c:	bf00      	nop
 800339e:	371c      	adds	r7, #28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	40012c00 	.word	0x40012c00
 80033ac:	40013400 	.word	0x40013400
 80033b0:	40014000 	.word	0x40014000
 80033b4:	40014400 	.word	0x40014400
 80033b8:	40014800 	.word	0x40014800

080033bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	021b      	lsls	r3, r3, #8
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800340a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	031b      	lsls	r3, r3, #12
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a18      	ldr	r2, [pc, #96]	@ (800347c <TIM_OC4_SetConfig+0xc0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00f      	beq.n	8003440 <TIM_OC4_SetConfig+0x84>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a17      	ldr	r2, [pc, #92]	@ (8003480 <TIM_OC4_SetConfig+0xc4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00b      	beq.n	8003440 <TIM_OC4_SetConfig+0x84>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a16      	ldr	r2, [pc, #88]	@ (8003484 <TIM_OC4_SetConfig+0xc8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d007      	beq.n	8003440 <TIM_OC4_SetConfig+0x84>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a15      	ldr	r2, [pc, #84]	@ (8003488 <TIM_OC4_SetConfig+0xcc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d003      	beq.n	8003440 <TIM_OC4_SetConfig+0x84>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a14      	ldr	r2, [pc, #80]	@ (800348c <TIM_OC4_SetConfig+0xd0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d109      	bne.n	8003454 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003446:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	019b      	lsls	r3, r3, #6
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	621a      	str	r2, [r3, #32]
}
 800346e:	bf00      	nop
 8003470:	371c      	adds	r7, #28
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40012c00 	.word	0x40012c00
 8003480:	40013400 	.word	0x40013400
 8003484:	40014000 	.word	0x40014000
 8003488:	40014400 	.word	0x40014400
 800348c:	40014800 	.word	0x40014800

08003490 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003490:	b480      	push	{r7}
 8003492:	b087      	sub	sp, #28
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80034d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	041b      	lsls	r3, r3, #16
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a17      	ldr	r2, [pc, #92]	@ (8003544 <TIM_OC5_SetConfig+0xb4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d00f      	beq.n	800350a <TIM_OC5_SetConfig+0x7a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a16      	ldr	r2, [pc, #88]	@ (8003548 <TIM_OC5_SetConfig+0xb8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00b      	beq.n	800350a <TIM_OC5_SetConfig+0x7a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a15      	ldr	r2, [pc, #84]	@ (800354c <TIM_OC5_SetConfig+0xbc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d007      	beq.n	800350a <TIM_OC5_SetConfig+0x7a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a14      	ldr	r2, [pc, #80]	@ (8003550 <TIM_OC5_SetConfig+0xc0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d003      	beq.n	800350a <TIM_OC5_SetConfig+0x7a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a13      	ldr	r2, [pc, #76]	@ (8003554 <TIM_OC5_SetConfig+0xc4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d109      	bne.n	800351e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003510:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	621a      	str	r2, [r3, #32]
}
 8003538:	bf00      	nop
 800353a:	371c      	adds	r7, #28
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	40012c00 	.word	0x40012c00
 8003548:	40013400 	.word	0x40013400
 800354c:	40014000 	.word	0x40014000
 8003550:	40014400 	.word	0x40014400
 8003554:	40014800 	.word	0x40014800

08003558 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003586:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800358a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	021b      	lsls	r3, r3, #8
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800359e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	051b      	lsls	r3, r3, #20
 80035a6:	693a      	ldr	r2, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a18      	ldr	r2, [pc, #96]	@ (8003610 <TIM_OC6_SetConfig+0xb8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00f      	beq.n	80035d4 <TIM_OC6_SetConfig+0x7c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a17      	ldr	r2, [pc, #92]	@ (8003614 <TIM_OC6_SetConfig+0xbc>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00b      	beq.n	80035d4 <TIM_OC6_SetConfig+0x7c>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a16      	ldr	r2, [pc, #88]	@ (8003618 <TIM_OC6_SetConfig+0xc0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d007      	beq.n	80035d4 <TIM_OC6_SetConfig+0x7c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a15      	ldr	r2, [pc, #84]	@ (800361c <TIM_OC6_SetConfig+0xc4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d003      	beq.n	80035d4 <TIM_OC6_SetConfig+0x7c>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a14      	ldr	r2, [pc, #80]	@ (8003620 <TIM_OC6_SetConfig+0xc8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d109      	bne.n	80035e8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	029b      	lsls	r3, r3, #10
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	621a      	str	r2, [r3, #32]
}
 8003602:	bf00      	nop
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40012c00 	.word	0x40012c00
 8003614:	40013400 	.word	0x40013400
 8003618:	40014000 	.word	0x40014000
 800361c:	40014400 	.word	0x40014400
 8003620:	40014800 	.word	0x40014800

08003624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f023 0201 	bic.w	r2, r3, #1
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	699b      	ldr	r3, [r3, #24]
 8003646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800364e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f023 030a 	bic.w	r3, r3, #10
 8003660:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003682:	b480      	push	{r7}
 8003684:	b087      	sub	sp, #28
 8003686:	af00      	add	r7, sp, #0
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	60b9      	str	r1, [r7, #8]
 800368c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f023 0210 	bic.w	r2, r3, #16
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	031b      	lsls	r3, r3, #12
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	621a      	str	r2, [r3, #32]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b085      	sub	sp, #20
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	f043 0307 	orr.w	r3, r3, #7
 8003704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	609a      	str	r2, [r3, #8]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	021a      	lsls	r2, r3, #8
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	431a      	orrs	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4313      	orrs	r3, r2
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	4313      	orrs	r3, r2
 8003744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	2201      	movs	r2, #1
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6a1a      	ldr	r2, [r3, #32]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	43db      	mvns	r3, r3
 800377a:	401a      	ands	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a1a      	ldr	r2, [r3, #32]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 031f 	and.w	r3, r3, #31
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	fa01 f303 	lsl.w	r3, r1, r3
 8003790:	431a      	orrs	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	621a      	str	r2, [r3, #32]
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e068      	b.n	800388e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a2e      	ldr	r2, [pc, #184]	@ (800389c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d004      	beq.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a2d      	ldr	r2, [pc, #180]	@ (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d108      	bne.n	8003802 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80037f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003808:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a1e      	ldr	r2, [pc, #120]	@ (800389c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d01d      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800382e:	d018      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a1b      	ldr	r2, [pc, #108]	@ (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1a      	ldr	r2, [pc, #104]	@ (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d00e      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a18      	ldr	r2, [pc, #96]	@ (80038ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d009      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a13      	ldr	r2, [pc, #76]	@ (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d004      	beq.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a14      	ldr	r2, [pc, #80]	@ (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d10c      	bne.n	800387c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	4313      	orrs	r3, r2
 8003872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	40013400 	.word	0x40013400
 80038a4:	40000400 	.word	0x40000400
 80038a8:	40000800 	.word	0x40000800
 80038ac:	40000c00 	.word	0x40000c00
 80038b0:	40014000 	.word	0x40014000

080038b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e040      	b.n	8003948 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd f85c 	bl	8000994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2224      	movs	r2, #36	@ 0x24
 80038e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0201 	bic.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fae0 	bl	8003ec0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f825 	bl	8003950 <UART_SetConfig>
 8003906:	4603      	mov	r3, r0
 8003908:	2b01      	cmp	r3, #1
 800390a:	d101      	bne.n	8003910 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e01b      	b.n	8003948 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685a      	ldr	r2, [r3, #4]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800391e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800392e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0201 	orr.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fb5f 	bl	8004004 <UART_CheckIdleState>
 8003946:	4603      	mov	r3, r0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003954:	b08a      	sub	sp, #40	@ 0x28
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	431a      	orrs	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	431a      	orrs	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	4313      	orrs	r3, r2
 8003976:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	4ba4      	ldr	r3, [pc, #656]	@ (8003c10 <UART_SetConfig+0x2c0>)
 8003980:	4013      	ands	r3, r2
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003988:	430b      	orrs	r3, r1
 800398a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a99      	ldr	r2, [pc, #612]	@ (8003c14 <UART_SetConfig+0x2c4>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b8:	4313      	orrs	r3, r2
 80039ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039cc:	430a      	orrs	r2, r1
 80039ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a90      	ldr	r2, [pc, #576]	@ (8003c18 <UART_SetConfig+0x2c8>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d126      	bne.n	8003a28 <UART_SetConfig+0xd8>
 80039da:	4b90      	ldr	r3, [pc, #576]	@ (8003c1c <UART_SetConfig+0x2cc>)
 80039dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d81b      	bhi.n	8003a20 <UART_SetConfig+0xd0>
 80039e8:	a201      	add	r2, pc, #4	@ (adr r2, 80039f0 <UART_SetConfig+0xa0>)
 80039ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ee:	bf00      	nop
 80039f0:	08003a01 	.word	0x08003a01
 80039f4:	08003a11 	.word	0x08003a11
 80039f8:	08003a09 	.word	0x08003a09
 80039fc:	08003a19 	.word	0x08003a19
 8003a00:	2301      	movs	r3, #1
 8003a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a06:	e116      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a0e:	e112      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003a10:	2304      	movs	r3, #4
 8003a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a16:	e10e      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003a18:	2308      	movs	r3, #8
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a1e:	e10a      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003a20:	2310      	movs	r3, #16
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a26:	e106      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a7c      	ldr	r2, [pc, #496]	@ (8003c20 <UART_SetConfig+0x2d0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d138      	bne.n	8003aa4 <UART_SetConfig+0x154>
 8003a32:	4b7a      	ldr	r3, [pc, #488]	@ (8003c1c <UART_SetConfig+0x2cc>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a38:	f003 030c 	and.w	r3, r3, #12
 8003a3c:	2b0c      	cmp	r3, #12
 8003a3e:	d82d      	bhi.n	8003a9c <UART_SetConfig+0x14c>
 8003a40:	a201      	add	r2, pc, #4	@ (adr r2, 8003a48 <UART_SetConfig+0xf8>)
 8003a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a46:	bf00      	nop
 8003a48:	08003a7d 	.word	0x08003a7d
 8003a4c:	08003a9d 	.word	0x08003a9d
 8003a50:	08003a9d 	.word	0x08003a9d
 8003a54:	08003a9d 	.word	0x08003a9d
 8003a58:	08003a8d 	.word	0x08003a8d
 8003a5c:	08003a9d 	.word	0x08003a9d
 8003a60:	08003a9d 	.word	0x08003a9d
 8003a64:	08003a9d 	.word	0x08003a9d
 8003a68:	08003a85 	.word	0x08003a85
 8003a6c:	08003a9d 	.word	0x08003a9d
 8003a70:	08003a9d 	.word	0x08003a9d
 8003a74:	08003a9d 	.word	0x08003a9d
 8003a78:	08003a95 	.word	0x08003a95
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a82:	e0d8      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003a84:	2302      	movs	r3, #2
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a8a:	e0d4      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a92:	e0d0      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003a94:	2308      	movs	r3, #8
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a9a:	e0cc      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003a9c:	2310      	movs	r3, #16
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aa2:	e0c8      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a5e      	ldr	r2, [pc, #376]	@ (8003c24 <UART_SetConfig+0x2d4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d125      	bne.n	8003afa <UART_SetConfig+0x1aa>
 8003aae:	4b5b      	ldr	r3, [pc, #364]	@ (8003c1c <UART_SetConfig+0x2cc>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ab8:	2b30      	cmp	r3, #48	@ 0x30
 8003aba:	d016      	beq.n	8003aea <UART_SetConfig+0x19a>
 8003abc:	2b30      	cmp	r3, #48	@ 0x30
 8003abe:	d818      	bhi.n	8003af2 <UART_SetConfig+0x1a2>
 8003ac0:	2b20      	cmp	r3, #32
 8003ac2:	d00a      	beq.n	8003ada <UART_SetConfig+0x18a>
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	d814      	bhi.n	8003af2 <UART_SetConfig+0x1a2>
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <UART_SetConfig+0x182>
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d008      	beq.n	8003ae2 <UART_SetConfig+0x192>
 8003ad0:	e00f      	b.n	8003af2 <UART_SetConfig+0x1a2>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ad8:	e0ad      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003ada:	2302      	movs	r3, #2
 8003adc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ae0:	e0a9      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003ae2:	2304      	movs	r3, #4
 8003ae4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ae8:	e0a5      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003aea:	2308      	movs	r3, #8
 8003aec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003af0:	e0a1      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003af2:	2310      	movs	r3, #16
 8003af4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003af8:	e09d      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a4a      	ldr	r2, [pc, #296]	@ (8003c28 <UART_SetConfig+0x2d8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d125      	bne.n	8003b50 <UART_SetConfig+0x200>
 8003b04:	4b45      	ldr	r3, [pc, #276]	@ (8003c1c <UART_SetConfig+0x2cc>)
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b10:	d016      	beq.n	8003b40 <UART_SetConfig+0x1f0>
 8003b12:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b14:	d818      	bhi.n	8003b48 <UART_SetConfig+0x1f8>
 8003b16:	2b80      	cmp	r3, #128	@ 0x80
 8003b18:	d00a      	beq.n	8003b30 <UART_SetConfig+0x1e0>
 8003b1a:	2b80      	cmp	r3, #128	@ 0x80
 8003b1c:	d814      	bhi.n	8003b48 <UART_SetConfig+0x1f8>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <UART_SetConfig+0x1d8>
 8003b22:	2b40      	cmp	r3, #64	@ 0x40
 8003b24:	d008      	beq.n	8003b38 <UART_SetConfig+0x1e8>
 8003b26:	e00f      	b.n	8003b48 <UART_SetConfig+0x1f8>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b2e:	e082      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003b30:	2302      	movs	r3, #2
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b36:	e07e      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b3e:	e07a      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003b40:	2308      	movs	r3, #8
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b46:	e076      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003b48:	2310      	movs	r3, #16
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b4e:	e072      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a35      	ldr	r2, [pc, #212]	@ (8003c2c <UART_SetConfig+0x2dc>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d12a      	bne.n	8003bb0 <UART_SetConfig+0x260>
 8003b5a:	4b30      	ldr	r3, [pc, #192]	@ (8003c1c <UART_SetConfig+0x2cc>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b68:	d01a      	beq.n	8003ba0 <UART_SetConfig+0x250>
 8003b6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b6e:	d81b      	bhi.n	8003ba8 <UART_SetConfig+0x258>
 8003b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b74:	d00c      	beq.n	8003b90 <UART_SetConfig+0x240>
 8003b76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b7a:	d815      	bhi.n	8003ba8 <UART_SetConfig+0x258>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <UART_SetConfig+0x238>
 8003b80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b84:	d008      	beq.n	8003b98 <UART_SetConfig+0x248>
 8003b86:	e00f      	b.n	8003ba8 <UART_SetConfig+0x258>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b8e:	e052      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003b90:	2302      	movs	r3, #2
 8003b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b96:	e04e      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003b98:	2304      	movs	r3, #4
 8003b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b9e:	e04a      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ba6:	e046      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003ba8:	2310      	movs	r3, #16
 8003baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bae:	e042      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a17      	ldr	r2, [pc, #92]	@ (8003c14 <UART_SetConfig+0x2c4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d13a      	bne.n	8003c30 <UART_SetConfig+0x2e0>
 8003bba:	4b18      	ldr	r3, [pc, #96]	@ (8003c1c <UART_SetConfig+0x2cc>)
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003bc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bc8:	d01a      	beq.n	8003c00 <UART_SetConfig+0x2b0>
 8003bca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003bce:	d81b      	bhi.n	8003c08 <UART_SetConfig+0x2b8>
 8003bd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bd4:	d00c      	beq.n	8003bf0 <UART_SetConfig+0x2a0>
 8003bd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bda:	d815      	bhi.n	8003c08 <UART_SetConfig+0x2b8>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <UART_SetConfig+0x298>
 8003be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be4:	d008      	beq.n	8003bf8 <UART_SetConfig+0x2a8>
 8003be6:	e00f      	b.n	8003c08 <UART_SetConfig+0x2b8>
 8003be8:	2300      	movs	r3, #0
 8003bea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bee:	e022      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bf6:	e01e      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bfe:	e01a      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003c00:	2308      	movs	r3, #8
 8003c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c06:	e016      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003c08:	2310      	movs	r3, #16
 8003c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c0e:	e012      	b.n	8003c36 <UART_SetConfig+0x2e6>
 8003c10:	efff69f3 	.word	0xefff69f3
 8003c14:	40008000 	.word	0x40008000
 8003c18:	40013800 	.word	0x40013800
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40004400 	.word	0x40004400
 8003c24:	40004800 	.word	0x40004800
 8003c28:	40004c00 	.word	0x40004c00
 8003c2c:	40005000 	.word	0x40005000
 8003c30:	2310      	movs	r3, #16
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a9f      	ldr	r2, [pc, #636]	@ (8003eb8 <UART_SetConfig+0x568>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d17a      	bne.n	8003d36 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d824      	bhi.n	8003c92 <UART_SetConfig+0x342>
 8003c48:	a201      	add	r2, pc, #4	@ (adr r2, 8003c50 <UART_SetConfig+0x300>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003c75 	.word	0x08003c75
 8003c54:	08003c93 	.word	0x08003c93
 8003c58:	08003c7d 	.word	0x08003c7d
 8003c5c:	08003c93 	.word	0x08003c93
 8003c60:	08003c83 	.word	0x08003c83
 8003c64:	08003c93 	.word	0x08003c93
 8003c68:	08003c93 	.word	0x08003c93
 8003c6c:	08003c93 	.word	0x08003c93
 8003c70:	08003c8b 	.word	0x08003c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c74:	f7fe f876 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 8003c78:	61f8      	str	r0, [r7, #28]
        break;
 8003c7a:	e010      	b.n	8003c9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c7c:	4b8f      	ldr	r3, [pc, #572]	@ (8003ebc <UART_SetConfig+0x56c>)
 8003c7e:	61fb      	str	r3, [r7, #28]
        break;
 8003c80:	e00d      	b.n	8003c9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c82:	f7fd ffd7 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 8003c86:	61f8      	str	r0, [r7, #28]
        break;
 8003c88:	e009      	b.n	8003c9e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c8e:	61fb      	str	r3, [r7, #28]
        break;
 8003c90:	e005      	b.n	8003c9e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80fb 	beq.w	8003e9c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	4413      	add	r3, r2
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d305      	bcc.n	8003cc2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d903      	bls.n	8003cca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003cc8:	e0e8      	b.n	8003e9c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	461c      	mov	r4, r3
 8003cd0:	4615      	mov	r5, r2
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	022b      	lsls	r3, r5, #8
 8003cdc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ce0:	0222      	lsls	r2, r4, #8
 8003ce2:	68f9      	ldr	r1, [r7, #12]
 8003ce4:	6849      	ldr	r1, [r1, #4]
 8003ce6:	0849      	lsrs	r1, r1, #1
 8003ce8:	2000      	movs	r0, #0
 8003cea:	4688      	mov	r8, r1
 8003cec:	4681      	mov	r9, r0
 8003cee:	eb12 0a08 	adds.w	sl, r2, r8
 8003cf2:	eb43 0b09 	adc.w	fp, r3, r9
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	603b      	str	r3, [r7, #0]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d04:	4650      	mov	r0, sl
 8003d06:	4659      	mov	r1, fp
 8003d08:	f7fc fa5e 	bl	80001c8 <__aeabi_uldivmod>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4613      	mov	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d1a:	d308      	bcc.n	8003d2e <UART_SetConfig+0x3de>
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d22:	d204      	bcs.n	8003d2e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	60da      	str	r2, [r3, #12]
 8003d2c:	e0b6      	b.n	8003e9c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003d34:	e0b2      	b.n	8003e9c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d3e:	d15e      	bne.n	8003dfe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d40:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d828      	bhi.n	8003d9a <UART_SetConfig+0x44a>
 8003d48:	a201      	add	r2, pc, #4	@ (adr r2, 8003d50 <UART_SetConfig+0x400>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d75 	.word	0x08003d75
 8003d54:	08003d7d 	.word	0x08003d7d
 8003d58:	08003d85 	.word	0x08003d85
 8003d5c:	08003d9b 	.word	0x08003d9b
 8003d60:	08003d8b 	.word	0x08003d8b
 8003d64:	08003d9b 	.word	0x08003d9b
 8003d68:	08003d9b 	.word	0x08003d9b
 8003d6c:	08003d9b 	.word	0x08003d9b
 8003d70:	08003d93 	.word	0x08003d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d74:	f7fd fff6 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 8003d78:	61f8      	str	r0, [r7, #28]
        break;
 8003d7a:	e014      	b.n	8003da6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d7c:	f7fe f808 	bl	8001d90 <HAL_RCC_GetPCLK2Freq>
 8003d80:	61f8      	str	r0, [r7, #28]
        break;
 8003d82:	e010      	b.n	8003da6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d84:	4b4d      	ldr	r3, [pc, #308]	@ (8003ebc <UART_SetConfig+0x56c>)
 8003d86:	61fb      	str	r3, [r7, #28]
        break;
 8003d88:	e00d      	b.n	8003da6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d8a:	f7fd ff53 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 8003d8e:	61f8      	str	r0, [r7, #28]
        break;
 8003d90:	e009      	b.n	8003da6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d96:	61fb      	str	r3, [r7, #28]
        break;
 8003d98:	e005      	b.n	8003da6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003da4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d077      	beq.n	8003e9c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	005a      	lsls	r2, r3, #1
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	085b      	lsrs	r3, r3, #1
 8003db6:	441a      	add	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b0f      	cmp	r3, #15
 8003dc6:	d916      	bls.n	8003df6 <UART_SetConfig+0x4a6>
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dce:	d212      	bcs.n	8003df6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	f023 030f 	bic.w	r3, r3, #15
 8003dd8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	085b      	lsrs	r3, r3, #1
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	8afb      	ldrh	r3, [r7, #22]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	8afa      	ldrh	r2, [r7, #22]
 8003df2:	60da      	str	r2, [r3, #12]
 8003df4:	e052      	b.n	8003e9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003dfc:	e04e      	b.n	8003e9c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dfe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d827      	bhi.n	8003e56 <UART_SetConfig+0x506>
 8003e06:	a201      	add	r2, pc, #4	@ (adr r2, 8003e0c <UART_SetConfig+0x4bc>)
 8003e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0c:	08003e31 	.word	0x08003e31
 8003e10:	08003e39 	.word	0x08003e39
 8003e14:	08003e41 	.word	0x08003e41
 8003e18:	08003e57 	.word	0x08003e57
 8003e1c:	08003e47 	.word	0x08003e47
 8003e20:	08003e57 	.word	0x08003e57
 8003e24:	08003e57 	.word	0x08003e57
 8003e28:	08003e57 	.word	0x08003e57
 8003e2c:	08003e4f 	.word	0x08003e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e30:	f7fd ff98 	bl	8001d64 <HAL_RCC_GetPCLK1Freq>
 8003e34:	61f8      	str	r0, [r7, #28]
        break;
 8003e36:	e014      	b.n	8003e62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e38:	f7fd ffaa 	bl	8001d90 <HAL_RCC_GetPCLK2Freq>
 8003e3c:	61f8      	str	r0, [r7, #28]
        break;
 8003e3e:	e010      	b.n	8003e62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e40:	4b1e      	ldr	r3, [pc, #120]	@ (8003ebc <UART_SetConfig+0x56c>)
 8003e42:	61fb      	str	r3, [r7, #28]
        break;
 8003e44:	e00d      	b.n	8003e62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e46:	f7fd fef5 	bl	8001c34 <HAL_RCC_GetSysClockFreq>
 8003e4a:	61f8      	str	r0, [r7, #28]
        break;
 8003e4c:	e009      	b.n	8003e62 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e52:	61fb      	str	r3, [r7, #28]
        break;
 8003e54:	e005      	b.n	8003e62 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e60:	bf00      	nop
    }

    if (pclk != 0U)
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d019      	beq.n	8003e9c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	085a      	lsrs	r2, r3, #1
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	441a      	add	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b0f      	cmp	r3, #15
 8003e80:	d909      	bls.n	8003e96 <UART_SetConfig+0x546>
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e88:	d205      	bcs.n	8003e96 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60da      	str	r2, [r3, #12]
 8003e94:	e002      	b.n	8003e9c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003ea8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3728      	adds	r7, #40	@ 0x28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40008000 	.word	0x40008000
 8003ebc:	00f42400 	.word	0x00f42400

08003ec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01a      	beq.n	8003fd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fbe:	d10a      	bne.n	8003fd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	605a      	str	r2, [r3, #4]
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b098      	sub	sp, #96	@ 0x60
 8004008:	af02      	add	r7, sp, #8
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004014:	f7fc fdf6 	bl	8000c04 <HAL_GetTick>
 8004018:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b08      	cmp	r3, #8
 8004026:	d12e      	bne.n	8004086 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004028:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004030:	2200      	movs	r2, #0
 8004032:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f88c 	bl	8004154 <UART_WaitOnFlagUntilTimeout>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d021      	beq.n	8004086 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004052:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004056:	653b      	str	r3, [r7, #80]	@ 0x50
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004060:	647b      	str	r3, [r7, #68]	@ 0x44
 8004062:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004066:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800406e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e6      	bne.n	8004042 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e062      	b.n	800414c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b04      	cmp	r3, #4
 8004092:	d149      	bne.n	8004128 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004094:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800409c:	2200      	movs	r2, #0
 800409e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f856 	bl	8004154 <UART_WaitOnFlagUntilTimeout>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d03c      	beq.n	8004128 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b6:	e853 3f00 	ldrex	r3, [r3]
 80040ba:	623b      	str	r3, [r7, #32]
   return(result);
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80040ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040d4:	e841 2300 	strex	r3, r2, [r1]
 80040d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1e6      	bne.n	80040ae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3308      	adds	r3, #8
 80040e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0301 	bic.w	r3, r3, #1
 80040f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3308      	adds	r3, #8
 80040fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004100:	61fa      	str	r2, [r7, #28]
 8004102:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	69b9      	ldr	r1, [r7, #24]
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	e841 2300 	strex	r3, r2, [r1]
 800410c:	617b      	str	r3, [r7, #20]
   return(result);
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e5      	bne.n	80040e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e011      	b.n	800414c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2220      	movs	r2, #32
 800412c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3758      	adds	r7, #88	@ 0x58
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	4613      	mov	r3, r2
 8004162:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004164:	e04f      	b.n	8004206 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416c:	d04b      	beq.n	8004206 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416e:	f7fc fd49 	bl	8000c04 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	429a      	cmp	r2, r3
 800417c:	d302      	bcc.n	8004184 <UART_WaitOnFlagUntilTimeout+0x30>
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e04e      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d037      	beq.n	8004206 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	2b80      	cmp	r3, #128	@ 0x80
 800419a:	d034      	beq.n	8004206 <UART_WaitOnFlagUntilTimeout+0xb2>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b40      	cmp	r3, #64	@ 0x40
 80041a0:	d031      	beq.n	8004206 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d110      	bne.n	80041d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2208      	movs	r2, #8
 80041b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f838 	bl	800422e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2208      	movs	r2, #8
 80041c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e029      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041e0:	d111      	bne.n	8004206 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 f81e 	bl	800422e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e00f      	b.n	8004226 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	4013      	ands	r3, r2
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	429a      	cmp	r2, r3
 8004214:	bf0c      	ite	eq
 8004216:	2301      	moveq	r3, #1
 8004218:	2300      	movne	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	429a      	cmp	r2, r3
 8004222:	d0a0      	beq.n	8004166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800422e:	b480      	push	{r7}
 8004230:	b095      	sub	sp, #84	@ 0x54
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004246:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800424a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004254:	643b      	str	r3, [r7, #64]	@ 0x40
 8004256:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800425a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e6      	bne.n	8004236 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3308      	adds	r3, #8
 800426e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	61fb      	str	r3, [r7, #28]
   return(result);
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f023 0301 	bic.w	r3, r3, #1
 800427e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3308      	adds	r3, #8
 8004286:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004288:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800428a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800428e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004290:	e841 2300 	strex	r3, r2, [r1]
 8004294:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e5      	bne.n	8004268 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d118      	bne.n	80042d6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f023 0310 	bic.w	r3, r3, #16
 80042b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	6979      	ldr	r1, [r7, #20]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	613b      	str	r3, [r7, #16]
   return(result);
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e6      	bne.n	80042a4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80042ea:	bf00      	nop
 80042ec:	3754      	adds	r7, #84	@ 0x54
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <memset>:
 80042f6:	4402      	add	r2, r0
 80042f8:	4603      	mov	r3, r0
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d100      	bne.n	8004300 <memset+0xa>
 80042fe:	4770      	bx	lr
 8004300:	f803 1b01 	strb.w	r1, [r3], #1
 8004304:	e7f9      	b.n	80042fa <memset+0x4>
	...

08004308 <__libc_init_array>:
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	4d0d      	ldr	r5, [pc, #52]	@ (8004340 <__libc_init_array+0x38>)
 800430c:	4c0d      	ldr	r4, [pc, #52]	@ (8004344 <__libc_init_array+0x3c>)
 800430e:	1b64      	subs	r4, r4, r5
 8004310:	10a4      	asrs	r4, r4, #2
 8004312:	2600      	movs	r6, #0
 8004314:	42a6      	cmp	r6, r4
 8004316:	d109      	bne.n	800432c <__libc_init_array+0x24>
 8004318:	4d0b      	ldr	r5, [pc, #44]	@ (8004348 <__libc_init_array+0x40>)
 800431a:	4c0c      	ldr	r4, [pc, #48]	@ (800434c <__libc_init_array+0x44>)
 800431c:	f000 f818 	bl	8004350 <_init>
 8004320:	1b64      	subs	r4, r4, r5
 8004322:	10a4      	asrs	r4, r4, #2
 8004324:	2600      	movs	r6, #0
 8004326:	42a6      	cmp	r6, r4
 8004328:	d105      	bne.n	8004336 <__libc_init_array+0x2e>
 800432a:	bd70      	pop	{r4, r5, r6, pc}
 800432c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004330:	4798      	blx	r3
 8004332:	3601      	adds	r6, #1
 8004334:	e7ee      	b.n	8004314 <__libc_init_array+0xc>
 8004336:	f855 3b04 	ldr.w	r3, [r5], #4
 800433a:	4798      	blx	r3
 800433c:	3601      	adds	r6, #1
 800433e:	e7f2      	b.n	8004326 <__libc_init_array+0x1e>
 8004340:	080043b8 	.word	0x080043b8
 8004344:	080043b8 	.word	0x080043b8
 8004348:	080043b8 	.word	0x080043b8
 800434c:	080043bc 	.word	0x080043bc

08004350 <_init>:
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004352:	bf00      	nop
 8004354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004356:	bc08      	pop	{r3}
 8004358:	469e      	mov	lr, r3
 800435a:	4770      	bx	lr

0800435c <_fini>:
 800435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435e:	bf00      	nop
 8004360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004362:	bc08      	pop	{r3}
 8004364:	469e      	mov	lr, r3
 8004366:	4770      	bx	lr
