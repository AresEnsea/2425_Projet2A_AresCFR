// generated from rosidl_adapter/resource/msg.idl.em
// with input from ros2_serial_msgs/msg/SerialMapping.msg
// generated code does not contain a copyright notice


module ros2_serial_msgs {
  module msg {
    module SerialMapping_Constants {
      @verbatim (language="comment", text=
        "Enum for the direction communication should take; from serial to ROS 2 or" "\n"        "or vice-versa.  Used in the \"direction\" sequence below.")
      const uint8 SERIALTOROS2 = 0;
      const uint8 ROS2TOSERIAL = 1;
    };
    @verbatim (language="comment", text=
      "Response to a request for a manifest of serial types for the ros2_serial_example." "\n"
      "Note that this is *not* intended to be sent over the ROS 2 network; we reuse" "\n"
      "the ROS 2 machinery to generate the CDR serialization/deserialization for this" "\n"
      "type so we can use it directly on the serial wire.")
    struct SerialMapping {
      @verbatim (language="comment", text=
        "Note that all sequences below *must* have the same size when serializing." "\n"
        "The sequence of topic names to map to serial.")
      sequence<string> topic_names;

      @verbatim (language="comment", text=
        "The serial number to map to the topic.  Even though" "\n"
        "it is a uint64, not all mappings may be valid; this" "\n"
        "is controlled by the value of topic_id_size_t.")
      sequence<uint64> serial_mappings;

      @verbatim (language="comment", text=
        "The ROS 2 message type corresponding to the topic." "\n"
        "Only types that have been compiled into the" "\n"
        "ros2_to_serial_bridge will be bridged.")
      sequence<string> types;

      @verbatim (language="comment", text=
        "The direction (from serial to ROS 2 or vice-versa);" "\n"
        "one of the enums above.")
      sequence<uint8> direction;
    };
  };
};
