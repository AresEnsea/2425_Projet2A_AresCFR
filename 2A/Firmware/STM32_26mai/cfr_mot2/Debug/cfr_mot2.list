
cfr_mot2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000928  0800af90  0800af90  0000bf90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8b8  0800b8b8  0000d1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b8b8  0800b8b8  0000c8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8c0  0800b8c0  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8c0  0800b8c0  0000c8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b8c4  0800b8c4  0000c8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800b8c8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  200001e0  0800baa8  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  0800baa8  0000d7c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001252b  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e6  00000000  00000000  0001f73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00021e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd2  00000000  00000000  00022ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028095  00000000  00000000  00023b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001415e  00000000  00000000  0004bc07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f510f  00000000  00000000  0005fd65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154e74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005938  00000000  00000000  00154eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0015a7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af78 	.word	0x0800af78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800af78 	.word	0x0800af78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <__io_putchar>:
static void MX_TIM3_Init(void);
static void MX_UART5_Init(void);

/* Private user code ---------------------------------------------------------*/
/* Redirect printf to UART2 for debug output */
int __io_putchar(int ch) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f40:	1d39      	adds	r1, r7, #4
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	2201      	movs	r2, #1
 8000f48:	4803      	ldr	r0, [pc, #12]	@ (8000f58 <__io_putchar+0x20>)
 8000f4a:	f004 ffa7 	bl	8005e9c <HAL_UART_Transmit>
    return ch;
 8000f4e:	687b      	ldr	r3, [r7, #4]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000041c 	.word	0x2000041c
 8000f5c:	00000000 	.word	0x00000000

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f64:	b0d9      	sub	sp, #356	@ 0x164
 8000f66:	af10      	add	r7, sp, #64	@ 0x40
    /* Initialize HAL */
    HAL_Init();
 8000f68:	f001 fec8 	bl	8002cfc <HAL_Init>

    /* Configure system clock */
    SystemClock_Config();
 8000f6c:	f000 fefc 	bl	8001d68 <SystemClock_Config>

    /* Initialize peripherals */
    MX_GPIO_Init();
 8000f70:	f001 f99c 	bl	80022ac <MX_GPIO_Init>
    MX_TIM2_Init();
 8000f74:	f001 f8c2 	bl	80020fc <MX_TIM2_Init>
    MX_LPUART1_UART_Init();
 8000f78:	f000 ff48 	bl	8001e0c <MX_LPUART1_UART_Init>
    MX_TIM1_Init();
 8000f7c:	f001 f864 	bl	8002048 <MX_TIM1_Init>
    MX_USART2_UART_Init();
 8000f80:	f001 f802 	bl	8001f88 <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 8000f84:	f001 f830 	bl	8001fe8 <MX_USART3_UART_Init>
    MX_UART4_Init();
 8000f88:	f000 ff6c 	bl	8001e64 <MX_UART4_Init>
    MX_USART1_UART_Init();
 8000f8c:	f000 ffcc 	bl	8001f28 <MX_USART1_UART_Init>
    MX_TIM3_Init();
 8000f90:	f001 f936 	bl	8002200 <MX_TIM3_Init>
    MX_UART5_Init();
 8000f94:	f000 ff98 	bl	8001ec8 <MX_UART5_Init>

    /* Start PWM for motor control */
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f98:	2108      	movs	r1, #8
 8000f9a:	48c7      	ldr	r0, [pc, #796]	@ (80012b8 <main+0x358>)
 8000f9c:	f003 fe54 	bl	8004c48 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000fa0:	210c      	movs	r1, #12
 8000fa2:	48c5      	ldr	r0, [pc, #788]	@ (80012b8 <main+0x358>)
 8000fa4:	f003 fe50 	bl	8004c48 <HAL_TIM_PWM_Start>

    /* Start UART reception in interrupt mode */
    HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)rx_data, sizeof(rx_data));
 8000fa8:	221b      	movs	r2, #27
 8000faa:	49c4      	ldr	r1, [pc, #784]	@ (80012bc <main+0x35c>)
 8000fac:	48c4      	ldr	r0, [pc, #784]	@ (80012c0 <main+0x360>)
 8000fae:	f004 ffff 	bl	8005fb0 <HAL_UART_Receive_IT>

    /* Start encoders for both wheels */
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000fb2:	213c      	movs	r1, #60	@ 0x3c
 8000fb4:	48c3      	ldr	r0, [pc, #780]	@ (80012c4 <main+0x364>)
 8000fb6:	f003 fff3 	bl	8004fa0 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000fba:	213c      	movs	r1, #60	@ 0x3c
 8000fbc:	48c2      	ldr	r0, [pc, #776]	@ (80012c8 <main+0x368>)
 8000fbe:	f003 ffef 	bl	8004fa0 <HAL_TIM_Encoder_Start>

    /* Initialize encoder values */
    prev_left = (int16_t)__HAL_TIM_GET_COUNTER(&htim3);
 8000fc2:	4bc0      	ldr	r3, [pc, #768]	@ (80012c4 <main+0x364>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	4bc0      	ldr	r3, [pc, #768]	@ (80012cc <main+0x36c>)
 8000fcc:	801a      	strh	r2, [r3, #0]
    prev_right = (int16_t)__HAL_TIM_GET_COUNTER(&htim1);
 8000fce:	4bbe      	ldr	r3, [pc, #760]	@ (80012c8 <main+0x368>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	4bbe      	ldr	r3, [pc, #760]	@ (80012d0 <main+0x370>)
 8000fd8:	801a      	strh	r2, [r3, #0]
    origin_left = prev_left;
 8000fda:	4bbc      	ldr	r3, [pc, #752]	@ (80012cc <main+0x36c>)
 8000fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4bbc      	ldr	r3, [pc, #752]	@ (80012d4 <main+0x374>)
 8000fe4:	601a      	str	r2, [r3, #0]
    origin_right = prev_right;
 8000fe6:	4bba      	ldr	r3, [pc, #744]	@ (80012d0 <main+0x370>)
 8000fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4bba      	ldr	r3, [pc, #744]	@ (80012d8 <main+0x378>)
 8000ff0:	601a      	str	r2, [r3, #0]

    while (1)
    {
        /* Find start of UART frame (marked by '>') */
        int offset = -1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        for (int j = 0; j < sizeof(rx_data); j++) {
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001000:	e010      	b.n	8001024 <main+0xc4>
            if (rx_data[j] == '>') {
 8001002:	4aae      	ldr	r2, [pc, #696]	@ (80012bc <main+0x35c>)
 8001004:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b3e      	cmp	r3, #62	@ 0x3e
 800100e:	d104      	bne.n	800101a <main+0xba>
                offset = j;
 8001010:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001014:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                break;
 8001018:	e008      	b.n	800102c <main+0xcc>
        for (int j = 0; j < sizeof(rx_data); j++) {
 800101a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800101e:	3301      	adds	r3, #1
 8001020:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001024:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001028:	2b1a      	cmp	r3, #26
 800102a:	d9ea      	bls.n	8001002 <main+0xa2>
            }
        }

        /* Process UART frame if valid */
        if (offset >= 0) {
 800102c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001030:	2b00      	cmp	r3, #0
 8001032:	f2c0 82d4 	blt.w	80015de <main+0x67e>
            /* Copy data for console output */
            char console_data[29];
            for (int i = 0; i < 27; i++) {
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800103c:	e01e      	b.n	800107c <main+0x11c>
                console_data[i] = rx_data[(offset + i) % 27];
 800103e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001046:	18d1      	adds	r1, r2, r3
 8001048:	4ba4      	ldr	r3, [pc, #656]	@ (80012dc <main+0x37c>)
 800104a:	fb83 2301 	smull	r2, r3, r3, r1
 800104e:	10da      	asrs	r2, r3, #3
 8001050:	17cb      	asrs	r3, r1, #31
 8001052:	1ad2      	subs	r2, r2, r3
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	00da      	lsls	r2, r3, #3
 800105c:	4413      	add	r3, r2
 800105e:	1aca      	subs	r2, r1, r3
 8001060:	4b96      	ldr	r3, [pc, #600]	@ (80012bc <main+0x35c>)
 8001062:	5c99      	ldrb	r1, [r3, r2]
 8001064:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800106c:	4413      	add	r3, r2
 800106e:	460a      	mov	r2, r1
 8001070:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 27; i++) {
 8001072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001076:	3301      	adds	r3, #1
 8001078:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800107c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001080:	2b1a      	cmp	r3, #26
 8001082:	dddc      	ble.n	800103e <main+0xde>
            }
            console_data[27] = '\r';
 8001084:	230d      	movs	r3, #13
 8001086:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
            console_data[28] = '\n';
 800108a:	230a      	movs	r3, #10
 800108c:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
            HAL_UART_Transmit(&huart2, (uint8_t *)console_data, 29, HAL_MAX_DELAY);
 8001090:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
 8001098:	221d      	movs	r2, #29
 800109a:	4891      	ldr	r0, [pc, #580]	@ (80012e0 <main+0x380>)
 800109c:	f004 fefe 	bl	8005e9c <HAL_UART_Transmit>

            /* Extract right motor distance (mot_maxon_dataD) */
            char mot_maxon_dataD[5];
            for (int i = 0; i < 4; i++) {
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80010a6:	e01f      	b.n	80010e8 <main+0x188>
                mot_maxon_dataD[i] = rx_data[(offset + 2 + i) % 27];
 80010a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80010ac:	1c9a      	adds	r2, r3, #2
 80010ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80010b2:	18d1      	adds	r1, r2, r3
 80010b4:	4b89      	ldr	r3, [pc, #548]	@ (80012dc <main+0x37c>)
 80010b6:	fb83 2301 	smull	r2, r3, r3, r1
 80010ba:	10da      	asrs	r2, r3, #3
 80010bc:	17cb      	asrs	r3, r1, #31
 80010be:	1ad2      	subs	r2, r2, r3
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	00da      	lsls	r2, r3, #3
 80010c8:	4413      	add	r3, r2
 80010ca:	1aca      	subs	r2, r1, r3
 80010cc:	4b7b      	ldr	r3, [pc, #492]	@ (80012bc <main+0x35c>)
 80010ce:	5c99      	ldrb	r1, [r3, r2]
 80010d0:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 80010d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80010d8:	4413      	add	r3, r2
 80010da:	460a      	mov	r2, r1
 80010dc:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 80010de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80010e2:	3301      	adds	r3, #1
 80010e4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80010e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	dddb      	ble.n	80010a8 <main+0x148>
            }
            mot_maxon_dataD[4] = '\0';
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            int target_mm_D = atoi(mot_maxon_dataD);
 80010f6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80010fa:	4618      	mov	r0, r3
 80010fc:	f006 fa6a 	bl	80075d4 <atoi>
 8001100:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
            if (target_mm_D < 0) target_mm_D = 0;
 8001104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001108:	2b00      	cmp	r3, #0
 800110a:	da02      	bge.n	8001112 <main+0x1b2>
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

            /* Extract right motor direction (inv_d) */
            int inv_d = rx_data[(offset + 1) % 27] - '0';
 8001112:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001116:	1c59      	adds	r1, r3, #1
 8001118:	4b70      	ldr	r3, [pc, #448]	@ (80012dc <main+0x37c>)
 800111a:	fb83 2301 	smull	r2, r3, r3, r1
 800111e:	10da      	asrs	r2, r3, #3
 8001120:	17cb      	asrs	r3, r1, #31
 8001122:	1ad2      	subs	r2, r2, r3
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	00da      	lsls	r2, r3, #3
 800112c:	4413      	add	r3, r2
 800112e:	1aca      	subs	r2, r1, r3
 8001130:	4b62      	ldr	r3, [pc, #392]	@ (80012bc <main+0x35c>)
 8001132:	5c9b      	ldrb	r3, [r3, r2]
 8001134:	3b30      	subs	r3, #48	@ 0x30
 8001136:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            if (inv_d != 0 && inv_d != 1) inv_d = 0;
 800113a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <main+0x1f0>
 8001142:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001146:	2b01      	cmp	r3, #1
 8001148:	d002      	beq.n	8001150 <main+0x1f0>
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

            /* Extract left motor distance (mot_maxon_dataG) */
            char mot_maxon_dataG[5];
            for (int i = 0; i < 4; i++) {
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001156:	e01f      	b.n	8001198 <main+0x238>
                mot_maxon_dataG[i] = rx_data[(offset + 7 + i) % 27];
 8001158:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800115c:	1dda      	adds	r2, r3, #7
 800115e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001162:	18d1      	adds	r1, r2, r3
 8001164:	4b5d      	ldr	r3, [pc, #372]	@ (80012dc <main+0x37c>)
 8001166:	fb83 2301 	smull	r2, r3, r3, r1
 800116a:	10da      	asrs	r2, r3, #3
 800116c:	17cb      	asrs	r3, r1, #31
 800116e:	1ad2      	subs	r2, r2, r3
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	00da      	lsls	r2, r3, #3
 8001178:	4413      	add	r3, r2
 800117a:	1aca      	subs	r2, r1, r3
 800117c:	4b4f      	ldr	r3, [pc, #316]	@ (80012bc <main+0x35c>)
 800117e:	5c99      	ldrb	r1, [r3, r2]
 8001180:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8001184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001188:	4413      	add	r3, r2
 800118a:	460a      	mov	r2, r1
 800118c:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 800118e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001192:	3301      	adds	r3, #1
 8001194:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800119c:	2b03      	cmp	r3, #3
 800119e:	dddb      	ble.n	8001158 <main+0x1f8>
            }
            mot_maxon_dataG[4] = '\0';
 80011a0:	2300      	movs	r3, #0
 80011a2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            int target_mm_G = atoi(mot_maxon_dataG);
 80011a6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011aa:	4618      	mov	r0, r3
 80011ac:	f006 fa12 	bl	80075d4 <atoi>
 80011b0:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
            if (target_mm_G < 0) target_mm_G = 0;
 80011b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	da02      	bge.n	80011c2 <main+0x262>
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

            /* Extract left motor direction (inv_g) */
            int inv_g = rx_data[(offset + 6) % 27] - '0';
 80011c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80011c6:	1d99      	adds	r1, r3, #6
 80011c8:	4b44      	ldr	r3, [pc, #272]	@ (80012dc <main+0x37c>)
 80011ca:	fb83 2301 	smull	r2, r3, r3, r1
 80011ce:	10da      	asrs	r2, r3, #3
 80011d0:	17cb      	asrs	r3, r1, #31
 80011d2:	1ad2      	subs	r2, r2, r3
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	00da      	lsls	r2, r3, #3
 80011dc:	4413      	add	r3, r2
 80011de:	1aca      	subs	r2, r1, r3
 80011e0:	4b36      	ldr	r3, [pc, #216]	@ (80012bc <main+0x35c>)
 80011e2:	5c9b      	ldrb	r3, [r3, r2]
 80011e4:	3b30      	subs	r3, #48	@ 0x30
 80011e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
            if (inv_g != 0 && inv_g != 1) inv_g = 0;
 80011ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d006      	beq.n	8001200 <main+0x2a0>
 80011f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d002      	beq.n	8001200 <main+0x2a0>
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

            /* Convert target distances (mm) to encoder counts */
            float distance_per_count = WHEEL_CIRCUMFERENCE / ENCODER_COUNTS_PER_REV;
 8001200:	4b38      	ldr	r3, [pc, #224]	@ (80012e4 <main+0x384>)
 8001202:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            int32_t counts_D = (int32_t)((float)target_mm_D / 1000.0f / distance_per_count);
 8001206:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001212:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80012e8 <main+0x388>
 8001216:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800121a:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800121e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001226:	ee17 3a90 	vmov	r3, s15
 800122a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
            int32_t counts_G = (int32_t)((float)target_mm_G / 1000.0f / distance_per_count);
 800122e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80012e8 <main+0x388>
 800123e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001242:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8001246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800124a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800124e:	ee17 3a90 	vmov	r3, s15
 8001252:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            target_left = origin_left + (inv_g == 0 ? counts_G : -counts_G);
 8001256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <main+0x306>
 800125e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001262:	425b      	negs	r3, r3
 8001264:	e001      	b.n	800126a <main+0x30a>
 8001266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800126a:	4a1a      	ldr	r2, [pc, #104]	@ (80012d4 <main+0x374>)
 800126c:	6812      	ldr	r2, [r2, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a1e      	ldr	r2, [pc, #120]	@ (80012ec <main+0x38c>)
 8001272:	6013      	str	r3, [r2, #0]
            target_right = origin_right + (inv_d == 0 ? counts_D : -counts_D);
 8001274:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <main+0x324>
 800127c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001280:	425b      	negs	r3, r3
 8001282:	e001      	b.n	8001288 <main+0x328>
 8001284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001288:	4a13      	ldr	r2, [pc, #76]	@ (80012d8 <main+0x378>)
 800128a:	6812      	ldr	r2, [r2, #0]
 800128c:	4413      	add	r3, r2
 800128e:	4a18      	ldr	r2, [pc, #96]	@ (80012f0 <main+0x390>)
 8001290:	6013      	str	r3, [r2, #0]

            /* Enable position control if not locked */
            if (!control_locked) {
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <main+0x394>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	f083 0301 	eor.w	r3, r3, #1
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 8090 	beq.w	80013c2 <main+0x462>
                position_control_active = (target_mm_D > 0 || target_mm_G > 0);
 80012a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	dc03      	bgt.n	80012b2 <main+0x352>
 80012aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	dd22      	ble.n	80012f8 <main+0x398>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e021      	b.n	80012fa <main+0x39a>
 80012b6:	bf00      	nop
 80012b8:	20000578 	.word	0x20000578
 80012bc:	20000610 	.word	0x20000610
 80012c0:	200001fc 	.word	0x200001fc
 80012c4:	200005c4 	.word	0x200005c4
 80012c8:	2000052c 	.word	0x2000052c
 80012cc:	20000638 	.word	0x20000638
 80012d0:	2000063a 	.word	0x2000063a
 80012d4:	2000065c 	.word	0x2000065c
 80012d8:	20000660 	.word	0x20000660
 80012dc:	4bda12f7 	.word	0x4bda12f7
 80012e0:	2000041c 	.word	0x2000041c
 80012e4:	38752546 	.word	0x38752546
 80012e8:	447a0000 	.word	0x447a0000
 80012ec:	20000654 	.word	0x20000654
 80012f0:	20000658 	.word	0x20000658
 80012f4:	20000650 	.word	0x20000650
 80012f8:	2300      	movs	r3, #0
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b66      	ldr	r3, [pc, #408]	@ (800149c <main+0x53c>)
 8001302:	701a      	strb	r2, [r3, #0]
                v_L_base = (target_mm_G > 0) ? low_speed : 0;
 8001304:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	dd01      	ble.n	8001310 <main+0x3b0>
 800130c:	23c8      	movs	r3, #200	@ 0xc8
 800130e:	e000      	b.n	8001312 <main+0x3b2>
 8001310:	2300      	movs	r3, #0
 8001312:	4a63      	ldr	r2, [pc, #396]	@ (80014a0 <main+0x540>)
 8001314:	6013      	str	r3, [r2, #0]
                v_R_base = (target_mm_D > 0) ? (int)(low_speed * right_motor_compensation) : 0;
 8001316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800131a:	2b00      	cmp	r3, #0
 800131c:	dd0c      	ble.n	8001338 <main+0x3d8>
 800131e:	eddf 7a61 	vldr	s15, [pc, #388]	@ 80014a4 <main+0x544>
 8001322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001326:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80014a8 <main+0x548>
 800132a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800132e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001332:	ee17 2a90 	vmov	r2, s15
 8001336:	e000      	b.n	800133a <main+0x3da>
 8001338:	2200      	movs	r2, #0
 800133a:	4b5c      	ldr	r3, [pc, #368]	@ (80014ac <main+0x54c>)
 800133c:	601a      	str	r2, [r3, #0]
                inv_L = inv_g;
 800133e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001342:	b2da      	uxtb	r2, r3
 8001344:	4b5a      	ldr	r3, [pc, #360]	@ (80014b0 <main+0x550>)
 8001346:	701a      	strb	r2, [r3, #0]
                inv_R = inv_d;
 8001348:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b59      	ldr	r3, [pc, #356]	@ (80014b4 <main+0x554>)
 8001350:	701a      	strb	r2, [r3, #0]
                is_straight = (target_mm_G == target_mm_D) && (inv_L == inv_R);
 8001352:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8001356:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800135a:	429a      	cmp	r2, r3
 800135c:	d107      	bne.n	800136e <main+0x40e>
 800135e:	4b54      	ldr	r3, [pc, #336]	@ (80014b0 <main+0x550>)
 8001360:	781a      	ldrb	r2, [r3, #0]
 8001362:	4b54      	ldr	r3, [pc, #336]	@ (80014b4 <main+0x554>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d101      	bne.n	800136e <main+0x40e>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <main+0x410>
 800136e:	2300      	movs	r3, #0
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b50      	ldr	r3, [pc, #320]	@ (80014b8 <main+0x558>)
 8001378:	701a      	strb	r2, [r3, #0]
                if (is_straight) {
 800137a:	4b4f      	ldr	r3, [pc, #316]	@ (80014b8 <main+0x558>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00a      	beq.n	8001398 <main+0x438>
                    s = (inv_L == 0) ? 1 : -1;
 8001382:	4b4b      	ldr	r3, [pc, #300]	@ (80014b0 <main+0x550>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <main+0x42e>
 800138a:	2301      	movs	r3, #1
 800138c:	e001      	b.n	8001392 <main+0x432>
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	4a4a      	ldr	r2, [pc, #296]	@ (80014bc <main+0x55c>)
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e003      	b.n	80013a0 <main+0x440>
                } else {
                    e_sum = 0.0f; /* Reset integral error for non-straight motion */
 8001398:	4b49      	ldr	r3, [pc, #292]	@ (80014c0 <main+0x560>)
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
                }
                mot_maxon_both(v_R_base, inv_R, v_L_base, inv_L);
 80013a0:	4b42      	ldr	r3, [pc, #264]	@ (80014ac <main+0x54c>)
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	4b43      	ldr	r3, [pc, #268]	@ (80014b4 <main+0x554>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4b3d      	ldr	r3, [pc, #244]	@ (80014a0 <main+0x540>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b40      	ldr	r3, [pc, #256]	@ (80014b0 <main+0x550>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	f001 f821 	bl	80023f8 <mot_maxon_both>
                left_reached_count = 0;
 80013b6:	4b43      	ldr	r3, [pc, #268]	@ (80014c4 <main+0x564>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
                right_reached_count = 0;
 80013bc:	4b42      	ldr	r3, [pc, #264]	@ (80014c8 <main+0x568>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]
            }

            /* Transmit servo data */
            char servo_goal_data[13];
            servo_goal_data[0] = '<';
 80013c2:	233c      	movs	r3, #60	@ 0x3c
 80013c4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
            for (int i = 0; i < 12; i++) {
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80013ce:	e023      	b.n	8001418 <main+0x4b8>
                servo_goal_data[i + 1] = rx_data[(offset + 11 + i) % 27];
 80013d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80013d4:	f103 020b 	add.w	r2, r3, #11
 80013d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80013dc:	18d1      	adds	r1, r2, r3
 80013de:	4b3b      	ldr	r3, [pc, #236]	@ (80014cc <main+0x56c>)
 80013e0:	fb83 2301 	smull	r2, r3, r3, r1
 80013e4:	10da      	asrs	r2, r3, #3
 80013e6:	17cb      	asrs	r3, r1, #31
 80013e8:	1ad2      	subs	r2, r2, r3
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	00da      	lsls	r2, r3, #3
 80013f2:	4413      	add	r3, r2
 80013f4:	1aca      	subs	r2, r1, r3
 80013f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80013fa:	3301      	adds	r3, #1
 80013fc:	4934      	ldr	r1, [pc, #208]	@ (80014d0 <main+0x570>)
 80013fe:	5c8a      	ldrb	r2, [r1, r2]
 8001400:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001404:	f107 0120 	add.w	r1, r7, #32
 8001408:	440b      	add	r3, r1
 800140a:	f803 2cb4 	strb.w	r2, [r3, #-180]
            for (int i = 0; i < 12; i++) {
 800140e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001412:	3301      	adds	r3, #1
 8001414:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001418:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800141c:	2b0b      	cmp	r3, #11
 800141e:	ddd7      	ble.n	80013d0 <main+0x470>
            }
            HAL_UART_Transmit(&huart4, (uint8_t *)servo_goal_data, 13, HAL_MAX_DELAY);
 8001420:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
 8001428:	220d      	movs	r2, #13
 800142a:	482a      	ldr	r0, [pc, #168]	@ (80014d4 <main+0x574>)
 800142c:	f004 fd36 	bl	8005e9c <HAL_UART_Transmit>

            /* Transmit stepper motor 1 data */
            char stepper_data1[2];
            for (int i = 0; i < 2; i++) {
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001436:	e020      	b.n	800147a <main+0x51a>
                stepper_data1[i] = rx_data[(offset + 23 + i) % 27];
 8001438:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800143c:	f103 0217 	add.w	r2, r3, #23
 8001440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001444:	18d1      	adds	r1, r2, r3
 8001446:	4b21      	ldr	r3, [pc, #132]	@ (80014cc <main+0x56c>)
 8001448:	fb83 2301 	smull	r2, r3, r3, r1
 800144c:	10da      	asrs	r2, r3, #3
 800144e:	17cb      	asrs	r3, r1, #31
 8001450:	1ad2      	subs	r2, r2, r3
 8001452:	4613      	mov	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	00da      	lsls	r2, r3, #3
 800145a:	4413      	add	r3, r2
 800145c:	1aca      	subs	r2, r1, r3
 800145e:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <main+0x570>)
 8001460:	5c99      	ldrb	r1, [r3, r2]
 8001462:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8001466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800146a:	4413      	add	r3, r2
 800146c:	460a      	mov	r2, r1
 800146e:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 2; i++) {
 8001470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001474:	3301      	adds	r3, #1
 8001476:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800147a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800147e:	2b01      	cmp	r3, #1
 8001480:	ddda      	ble.n	8001438 <main+0x4d8>
            }
            HAL_UART_Transmit(&huart3, (uint8_t *)stepper_data1, 2, HAL_MAX_DELAY);
 8001482:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	2202      	movs	r2, #2
 800148c:	4812      	ldr	r0, [pc, #72]	@ (80014d8 <main+0x578>)
 800148e:	f004 fd05 	bl	8005e9c <HAL_UART_Transmit>

            /* Transmit stepper motor 2 data */
            char stepper_data2[2];
            for (int i = 0; i < 2; i++) {
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001498:	e041      	b.n	800151e <main+0x5be>
 800149a:	bf00      	nop
 800149c:	2000064f 	.word	0x2000064f
 80014a0:	20000644 	.word	0x20000644
 80014a4:	000000c8 	.word	0x000000c8
 80014a8:	3f733333 	.word	0x3f733333
 80014ac:	20000648 	.word	0x20000648
 80014b0:	2000064c 	.word	0x2000064c
 80014b4:	2000064d 	.word	0x2000064d
 80014b8:	2000064e 	.word	0x2000064e
 80014bc:	20000008 	.word	0x20000008
 80014c0:	20000640 	.word	0x20000640
 80014c4:	2000066c 	.word	0x2000066c
 80014c8:	2000066d 	.word	0x2000066d
 80014cc:	4bda12f7 	.word	0x4bda12f7
 80014d0:	20000610 	.word	0x20000610
 80014d4:	20000284 	.word	0x20000284
 80014d8:	200004a4 	.word	0x200004a4
                stepper_data2[i] = rx_data[(offset + 25 + i) % 27];
 80014dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80014e0:	f103 0219 	add.w	r2, r3, #25
 80014e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80014e8:	18d1      	adds	r1, r2, r3
 80014ea:	4bb5      	ldr	r3, [pc, #724]	@ (80017c0 <main+0x860>)
 80014ec:	fb83 2301 	smull	r2, r3, r3, r1
 80014f0:	10da      	asrs	r2, r3, #3
 80014f2:	17cb      	asrs	r3, r1, #31
 80014f4:	1ad2      	subs	r2, r2, r3
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	00da      	lsls	r2, r3, #3
 80014fe:	4413      	add	r3, r2
 8001500:	1aca      	subs	r2, r1, r3
 8001502:	4bb0      	ldr	r3, [pc, #704]	@ (80017c4 <main+0x864>)
 8001504:	5c99      	ldrb	r1, [r3, r2]
 8001506:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800150a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800150e:	4413      	add	r3, r2
 8001510:	460a      	mov	r2, r1
 8001512:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 2; i++) {
 8001514:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001518:	3301      	adds	r3, #1
 800151a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800151e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001522:	2b01      	cmp	r3, #1
 8001524:	ddda      	ble.n	80014dc <main+0x57c>
            }
            HAL_UART_Transmit(&huart1, (uint8_t *)stepper_data2, 2, HAL_MAX_DELAY);
 8001526:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	2202      	movs	r2, #2
 8001530:	48a5      	ldr	r0, [pc, #660]	@ (80017c8 <main+0x868>)
 8001532:	f004 fcb3 	bl	8005e9c <HAL_UART_Transmit>

            /* Reset odometry and encoders if last byte is '1' */
            if (rx_data[(offset + 26) % 27] == '1') {
 8001536:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800153a:	f103 011a 	add.w	r1, r3, #26
 800153e:	4ba0      	ldr	r3, [pc, #640]	@ (80017c0 <main+0x860>)
 8001540:	fb83 2301 	smull	r2, r3, r3, r1
 8001544:	10da      	asrs	r2, r3, #3
 8001546:	17cb      	asrs	r3, r1, #31
 8001548:	1ad2      	subs	r2, r2, r3
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	00da      	lsls	r2, r3, #3
 8001552:	4413      	add	r3, r2
 8001554:	1aca      	subs	r2, r1, r3
 8001556:	4b9b      	ldr	r3, [pc, #620]	@ (80017c4 <main+0x864>)
 8001558:	5c9b      	ldrb	r3, [r3, r2]
 800155a:	2b31      	cmp	r3, #49	@ 0x31
 800155c:	d13a      	bne.n	80015d4 <main+0x674>
                x = 0.0f;
 800155e:	4b9b      	ldr	r3, [pc, #620]	@ (80017cc <main+0x86c>)
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
                y = 0.0f;
 8001566:	4b9a      	ldr	r3, [pc, #616]	@ (80017d0 <main+0x870>)
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
                theta = 0.0f;
 800156e:	4b99      	ldr	r3, [pc, #612]	@ (80017d4 <main+0x874>)
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
                __HAL_TIM_SET_COUNTER(&htim3, 0);
 8001576:	4b98      	ldr	r3, [pc, #608]	@ (80017d8 <main+0x878>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2200      	movs	r2, #0
 800157c:	625a      	str	r2, [r3, #36]	@ 0x24
                __HAL_TIM_SET_COUNTER(&htim1, 0);
 800157e:	4b97      	ldr	r3, [pc, #604]	@ (80017dc <main+0x87c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2200      	movs	r2, #0
 8001584:	625a      	str	r2, [r3, #36]	@ 0x24
                prev_left = 0;
 8001586:	4b96      	ldr	r3, [pc, #600]	@ (80017e0 <main+0x880>)
 8001588:	2200      	movs	r2, #0
 800158a:	801a      	strh	r2, [r3, #0]
                prev_right = 0;
 800158c:	4b95      	ldr	r3, [pc, #596]	@ (80017e4 <main+0x884>)
 800158e:	2200      	movs	r2, #0
 8001590:	801a      	strh	r2, [r3, #0]
                origin_left = 0;
 8001592:	4b95      	ldr	r3, [pc, #596]	@ (80017e8 <main+0x888>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
                origin_right = 0;
 8001598:	4b94      	ldr	r3, [pc, #592]	@ (80017ec <main+0x88c>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
                total_dist_left = 0.0f;
 800159e:	4b94      	ldr	r3, [pc, #592]	@ (80017f0 <main+0x890>)
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
                total_dist_right = 0.0f;
 80015a6:	4b93      	ldr	r3, [pc, #588]	@ (80017f4 <main+0x894>)
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
                e_sum = 0.0f;
 80015ae:	4b92      	ldr	r3, [pc, #584]	@ (80017f8 <main+0x898>)
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
                position_control_active = false;
 80015b6:	4b91      	ldr	r3, [pc, #580]	@ (80017fc <main+0x89c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
                control_locked = false;
 80015bc:	4b90      	ldr	r3, [pc, #576]	@ (8001800 <main+0x8a0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
                mot_maxon_both(0, 0, 0, 0);
 80015c2:	2300      	movs	r3, #0
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	2000      	movs	r0, #0
 80015ca:	f000 ff15 	bl	80023f8 <mot_maxon_both>
                printf("Odometry, encoder counters, and total distances reset to 0\r\n");
 80015ce:	488d      	ldr	r0, [pc, #564]	@ (8001804 <main+0x8a4>)
 80015d0:	f006 fe0a 	bl	80081e8 <puts>
            }

            /* Clear UART receive buffer */
            memset(rx_data, 0, sizeof(rx_data));
 80015d4:	221b      	movs	r2, #27
 80015d6:	2100      	movs	r1, #0
 80015d8:	487a      	ldr	r0, [pc, #488]	@ (80017c4 <main+0x864>)
 80015da:	f006 ff19 	bl	8008410 <memset>
        }

        /* Restart UART reception */
        HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)rx_data, sizeof(rx_data));
 80015de:	221b      	movs	r2, #27
 80015e0:	4978      	ldr	r1, [pc, #480]	@ (80017c4 <main+0x864>)
 80015e2:	4889      	ldr	r0, [pc, #548]	@ (8001808 <main+0x8a8>)
 80015e4:	f004 fce4 	bl	8005fb0 <HAL_UART_Receive_IT>

        /* Update odometry and control every 10 ms */
        uint32_t current_time = HAL_GetTick();
 80015e8:	f001 fbf8 	bl	8002ddc <HAL_GetTick>
 80015ec:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
        if (current_time - last_update_time >= 10) {
 80015f0:	4b86      	ldr	r3, [pc, #536]	@ (800180c <main+0x8ac>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b09      	cmp	r3, #9
 80015fc:	f67f acf9 	bls.w	8000ff2 <main+0x92>
            last_update_time = current_time;
 8001600:	4a82      	ldr	r2, [pc, #520]	@ (800180c <main+0x8ac>)
 8001602:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001606:	6013      	str	r3, [r2, #0]

            /* Read current encoder values */
            int16_t curr_left = (int16_t)__HAL_TIM_GET_COUNTER(&htim3);
 8001608:	4b73      	ldr	r3, [pc, #460]	@ (80017d8 <main+0x878>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
            int16_t curr_right = (int16_t)__HAL_TIM_GET_COUNTER(&htim1);
 8001612:	4b72      	ldr	r3, [pc, #456]	@ (80017dc <main+0x87c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001618:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc

            /* Calculate encoder deltas with overflow handling */
            int32_t delta_left = (int32_t)curr_left - (int32_t)prev_left;
 800161c:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
 8001620:	4a6f      	ldr	r2, [pc, #444]	@ (80017e0 <main+0x880>)
 8001622:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001626:	1a9b      	subs	r3, r3, r2
 8001628:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            int32_t delta_right = (int32_t)curr_right - (int32_t)prev_right;
 800162c:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	@ 0xcc
 8001630:	4a6c      	ldr	r2, [pc, #432]	@ (80017e4 <main+0x884>)
 8001632:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            if (delta_left < -32768) delta_left += 65536;
 800163c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001640:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001644:	da06      	bge.n	8001654 <main+0x6f4>
 8001646:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800164a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800164e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001652:	e00a      	b.n	800166a <main+0x70a>
            else if (delta_left > 32768) delta_left -= 65536;
 8001654:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001658:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800165c:	dd05      	ble.n	800166a <main+0x70a>
 800165e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001662:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8001666:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            if (delta_right < -32768) delta_right += 65536;
 800166a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800166e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001672:	da06      	bge.n	8001682 <main+0x722>
 8001674:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001678:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800167c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001680:	e00a      	b.n	8001698 <main+0x738>
            else if (delta_right > 32768) delta_right -= 65536;
 8001682:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001686:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800168a:	dd05      	ble.n	8001698 <main+0x738>
 800168c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001690:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8001694:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

            /* Update previous encoder values */
            prev_left = curr_left;
 8001698:	4a51      	ldr	r2, [pc, #324]	@ (80017e0 <main+0x880>)
 800169a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800169e:	8013      	strh	r3, [r2, #0]
            prev_right = curr_right;
 80016a0:	4a50      	ldr	r2, [pc, #320]	@ (80017e4 <main+0x884>)
 80016a2:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 80016a6:	8013      	strh	r3, [r2, #0]

            /* Calculate distances traveled */
            float dist_left = (float)delta_left * WHEEL_CIRCUMFERENCE / ENCODER_COUNTS_PER_REV;
 80016a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b4:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001810 <main+0x8b0>
 80016b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016bc:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8001814 <main+0x8b4>
 80016c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c4:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8
            float dist_right = (float)delta_right * WHEEL_CIRCUMFERENCE / ENCODER_COUNTS_PER_REV;
 80016c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80016cc:	ee07 3a90 	vmov	s15, r3
 80016d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d4:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001810 <main+0x8b0>
 80016d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016dc:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8001814 <main+0x8b4>
 80016e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016e4:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4

            /* Update total distances */
            total_dist_left += fabs(dist_left);
 80016e8:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 80016ec:	eeb0 7ae7 	vabs.f32	s14, s15
 80016f0:	4b3f      	ldr	r3, [pc, #252]	@ (80017f0 <main+0x890>)
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fa:	4b3d      	ldr	r3, [pc, #244]	@ (80017f0 <main+0x890>)
 80016fc:	edc3 7a00 	vstr	s15, [r3]
            total_dist_right += fabs(dist_right);
 8001700:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001704:	eeb0 7ae7 	vabs.f32	s14, s15
 8001708:	4b3a      	ldr	r3, [pc, #232]	@ (80017f4 <main+0x894>)
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001712:	4b38      	ldr	r3, [pc, #224]	@ (80017f4 <main+0x894>)
 8001714:	edc3 7a00 	vstr	s15, [r3]

            /* Position control logic */
            if (position_control_active && !control_locked) {
 8001718:	4b38      	ldr	r3, [pc, #224]	@ (80017fc <main+0x89c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 819b 	beq.w	8001a58 <main+0xaf8>
 8001722:	4b37      	ldr	r3, [pc, #220]	@ (8001800 <main+0x8a0>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	f083 0301 	eor.w	r3, r3, #1
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 8193 	beq.w	8001a58 <main+0xaf8>
                /* Check if wheels have reached their targets */
                bool left_reached = (inv_L == 0) ? (curr_left >= target_left - ENCODER_TOLERANCE) :
 8001732:	4b39      	ldr	r3, [pc, #228]	@ (8001818 <main+0x8b8>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10a      	bne.n	8001750 <main+0x7f0>
 800173a:	f9b7 20ce 	ldrsh.w	r2, [r7, #206]	@ 0xce
 800173e:	4b37      	ldr	r3, [pc, #220]	@ (800181c <main+0x8bc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	3b05      	subs	r3, #5
 8001744:	429a      	cmp	r2, r3
 8001746:	bfac      	ite	ge
 8001748:	2301      	movge	r3, #1
 800174a:	2300      	movlt	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	e009      	b.n	8001764 <main+0x804>
 8001750:	f9b7 20ce 	ldrsh.w	r2, [r7, #206]	@ 0xce
                                                  (curr_left <= target_left + ENCODER_TOLERANCE);
 8001754:	4b31      	ldr	r3, [pc, #196]	@ (800181c <main+0x8bc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3305      	adds	r3, #5
                bool left_reached = (inv_L == 0) ? (curr_left >= target_left - ENCODER_TOLERANCE) :
 800175a:	429a      	cmp	r2, r3
 800175c:	bfd4      	ite	le
 800175e:	2301      	movle	r3, #1
 8001760:	2300      	movgt	r3, #0
 8001762:	b2db      	uxtb	r3, r3
 8001764:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
                bool right_reached = (inv_R == 0) ? (curr_right >= target_right - ENCODER_TOLERANCE) :
 8001768:	4b2d      	ldr	r3, [pc, #180]	@ (8001820 <main+0x8c0>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d10a      	bne.n	8001786 <main+0x826>
 8001770:	f9b7 20cc 	ldrsh.w	r2, [r7, #204]	@ 0xcc
 8001774:	4b2b      	ldr	r3, [pc, #172]	@ (8001824 <main+0x8c4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3b05      	subs	r3, #5
 800177a:	429a      	cmp	r2, r3
 800177c:	bfac      	ite	ge
 800177e:	2301      	movge	r3, #1
 8001780:	2300      	movlt	r3, #0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	e009      	b.n	800179a <main+0x83a>
 8001786:	f9b7 20cc 	ldrsh.w	r2, [r7, #204]	@ 0xcc
                                                   (curr_right <= target_right + ENCODER_TOLERANCE);
 800178a:	4b26      	ldr	r3, [pc, #152]	@ (8001824 <main+0x8c4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	3305      	adds	r3, #5
                bool right_reached = (inv_R == 0) ? (curr_right >= target_right - ENCODER_TOLERANCE) :
 8001790:	429a      	cmp	r2, r3
 8001792:	bfd4      	ite	le
 8001794:	2301      	movle	r3, #1
 8001796:	2300      	movgt	r3, #0
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2

                /* Set speeds: stop wheel if target reached */
                int v_L_applied = left_reached ? 0 : v_L_base;
 800179e:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <main+0x84a>
 80017a6:	2300      	movs	r3, #0
 80017a8:	e001      	b.n	80017ae <main+0x84e>
 80017aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001828 <main+0x8c8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                int v_R_applied = right_reached ? 0 : v_R_base;
 80017b2:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d038      	beq.n	800182c <main+0x8cc>
 80017ba:	2300      	movs	r3, #0
 80017bc:	e038      	b.n	8001830 <main+0x8d0>
 80017be:	bf00      	nop
 80017c0:	4bda12f7 	.word	0x4bda12f7
 80017c4:	20000610 	.word	0x20000610
 80017c8:	20000394 	.word	0x20000394
 80017cc:	2000062c 	.word	0x2000062c
 80017d0:	20000630 	.word	0x20000630
 80017d4:	20000634 	.word	0x20000634
 80017d8:	200005c4 	.word	0x200005c4
 80017dc:	2000052c 	.word	0x2000052c
 80017e0:	20000638 	.word	0x20000638
 80017e4:	2000063a 	.word	0x2000063a
 80017e8:	2000065c 	.word	0x2000065c
 80017ec:	20000660 	.word	0x20000660
 80017f0:	20000664 	.word	0x20000664
 80017f4:	20000668 	.word	0x20000668
 80017f8:	20000640 	.word	0x20000640
 80017fc:	2000064f 	.word	0x2000064f
 8001800:	20000650 	.word	0x20000650
 8001804:	0800af90 	.word	0x0800af90
 8001808:	200001fc 	.word	0x200001fc
 800180c:	2000063c 	.word	0x2000063c
 8001810:	3e752546 	.word	0x3e752546
 8001814:	45800000 	.word	0x45800000
 8001818:	2000064c 	.word	0x2000064c
 800181c:	20000654 	.word	0x20000654
 8001820:	2000064d 	.word	0x2000064d
 8001824:	20000658 	.word	0x20000658
 8001828:	20000644 	.word	0x20000644
 800182c:	4bc6      	ldr	r3, [pc, #792]	@ (8001b48 <main+0xbe8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

                /* Apply PI controller for straight-line motion */
                if (is_straight && !left_reached && !right_reached) {
 8001834:	4bc5      	ldr	r3, [pc, #788]	@ (8001b4c <main+0xbec>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 8092 	beq.w	8001962 <main+0xa02>
 800183e:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8001842:	f083 0301 	eor.w	r3, r3, #1
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 808a 	beq.w	8001962 <main+0xa02>
 800184e:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 8001852:	f083 0301 	eor.w	r3, r3, #1
 8001856:	b2db      	uxtb	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 8082 	beq.w	8001962 <main+0xa02>
                    float e = s * (dist_right - dist_left); /* Error: difference in distances */
 800185e:	4bbc      	ldr	r3, [pc, #752]	@ (8001b50 <main+0xbf0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800186a:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 800186e:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8001872:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187a:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
                    e_sum += e * 0.01f;                     /* Update integral term */
 800187e:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001882:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8001b54 <main+0xbf4>
 8001886:	ee27 7a87 	vmul.f32	s14, s15, s14
 800188a:	4bb3      	ldr	r3, [pc, #716]	@ (8001b58 <main+0xbf8>)
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001894:	4bb0      	ldr	r3, [pc, #704]	@ (8001b58 <main+0xbf8>)
 8001896:	edc3 7a00 	vstr	s15, [r3]
                    if (e_sum > 0.1f) e_sum = 0.1f;        /* Limit integral term */
 800189a:	4baf      	ldr	r3, [pc, #700]	@ (8001b58 <main+0xbf8>)
 800189c:	edd3 7a00 	vldr	s15, [r3]
 80018a0:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8001b5c <main+0xbfc>
 80018a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ac:	dd02      	ble.n	80018b4 <main+0x954>
 80018ae:	4baa      	ldr	r3, [pc, #680]	@ (8001b58 <main+0xbf8>)
 80018b0:	4aab      	ldr	r2, [pc, #684]	@ (8001b60 <main+0xc00>)
 80018b2:	601a      	str	r2, [r3, #0]
                    if (e_sum < -0.1f) e_sum = -0.1f;
 80018b4:	4ba8      	ldr	r3, [pc, #672]	@ (8001b58 <main+0xbf8>)
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8001b64 <main+0xc04>
 80018be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c6:	d502      	bpl.n	80018ce <main+0x96e>
 80018c8:	4ba3      	ldr	r3, [pc, #652]	@ (8001b58 <main+0xbf8>)
 80018ca:	4aa7      	ldr	r2, [pc, #668]	@ (8001b68 <main+0xc08>)
 80018cc:	601a      	str	r2, [r3, #0]
                    int Delta_v_L = (int)(K_p * e + K_i * e_sum); /* PI adjustment */
 80018ce:	4ba7      	ldr	r3, [pc, #668]	@ (8001b6c <main+0xc0c>)
 80018d0:	ed93 7a00 	vldr	s14, [r3]
 80018d4:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80018d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018dc:	4ba4      	ldr	r3, [pc, #656]	@ (8001b70 <main+0xc10>)
 80018de:	edd3 6a00 	vldr	s13, [r3]
 80018e2:	4b9d      	ldr	r3, [pc, #628]	@ (8001b58 <main+0xbf8>)
 80018e4:	edd3 7a00 	vldr	s15, [r3]
 80018e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f4:	ee17 3a90 	vmov	r3, s15
 80018f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
                    int Delta_v_R = -Delta_v_L;
 80018fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001900:	425b      	negs	r3, r3
 8001902:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
                    v_L_applied += Delta_v_L;
 8001906:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800190a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800190e:	4413      	add	r3, r2
 8001910:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                    v_R_applied += Delta_v_R;
 8001914:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8001918:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800191c:	4413      	add	r3, r2
 800191e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
                    if (v_L_applied > 1999) v_L_applied = 1999; /* Limit speeds */
 8001922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001926:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800192a:	db03      	blt.n	8001934 <main+0x9d4>
 800192c:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 8001930:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                    if (v_L_applied < 0) v_L_applied = 0;
 8001934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001938:	2b00      	cmp	r3, #0
 800193a:	da02      	bge.n	8001942 <main+0x9e2>
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                    if (v_R_applied > 1999) v_R_applied = 1999;
 8001942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001946:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800194a:	db03      	blt.n	8001954 <main+0x9f4>
 800194c:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 8001950:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
                    if (v_R_applied < 0) v_R_applied = 0;
 8001954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001958:	2b00      	cmp	r3, #0
 800195a:	da02      	bge.n	8001962 <main+0xa02>
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
                }

                /* Log when each wheel reaches its target */
                if (left_reached && left_reached_count == 0) {
 8001962:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00c      	beq.n	8001984 <main+0xa24>
 800196a:	4b82      	ldr	r3, [pc, #520]	@ (8001b74 <main+0xc14>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d108      	bne.n	8001984 <main+0xa24>
                    printf("Left wheel reached: left=%d\r\n", curr_left);
 8001972:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
 8001976:	4619      	mov	r1, r3
 8001978:	487f      	ldr	r0, [pc, #508]	@ (8001b78 <main+0xc18>)
 800197a:	f006 fbcd 	bl	8008118 <iprintf>
                    left_reached_count = 1;
 800197e:	4b7d      	ldr	r3, [pc, #500]	@ (8001b74 <main+0xc14>)
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
                }
                if (!left_reached) {
 8001984:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8001988:	f083 0301 	eor.w	r3, r3, #1
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <main+0xa38>
                    left_reached_count = 0;
 8001992:	4b78      	ldr	r3, [pc, #480]	@ (8001b74 <main+0xc14>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
                }

                if (right_reached && right_reached_count == 0) {
 8001998:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00c      	beq.n	80019ba <main+0xa5a>
 80019a0:	4b76      	ldr	r3, [pc, #472]	@ (8001b7c <main+0xc1c>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d108      	bne.n	80019ba <main+0xa5a>
                    printf("Right wheel reached: right=%d\r\n", curr_right);
 80019a8:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	@ 0xcc
 80019ac:	4619      	mov	r1, r3
 80019ae:	4874      	ldr	r0, [pc, #464]	@ (8001b80 <main+0xc20>)
 80019b0:	f006 fbb2 	bl	8008118 <iprintf>
                    right_reached_count = 1;
 80019b4:	4b71      	ldr	r3, [pc, #452]	@ (8001b7c <main+0xc1c>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]
                }
                if (!right_reached) {
 80019ba:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 80019be:	f083 0301 	eor.w	r3, r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d002      	beq.n	80019ce <main+0xa6e>
                    right_reached_count = 0;
 80019c8:	4b6c      	ldr	r3, [pc, #432]	@ (8001b7c <main+0xc1c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
                }

                /* Apply adjusted speeds to motors */
                mot_maxon_both(v_R_applied, inv_R, v_L_applied, inv_L);
 80019ce:	4b6d      	ldr	r3, [pc, #436]	@ (8001b84 <main+0xc24>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001b88 <main+0xc28>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80019dc:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 80019e0:	f000 fd0a 	bl	80023f8 <mot_maxon_both>

                /* Debug: print applied speeds every 10 iterations */
                static uint8_t speed_print_counter = 0;
                speed_print_counter++;
 80019e4:	4b69      	ldr	r3, [pc, #420]	@ (8001b8c <main+0xc2c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	3301      	adds	r3, #1
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	4b67      	ldr	r3, [pc, #412]	@ (8001b8c <main+0xc2c>)
 80019ee:	701a      	strb	r2, [r3, #0]
                if (speed_print_counter >= 10) {
 80019f0:	4b66      	ldr	r3, [pc, #408]	@ (8001b8c <main+0xc2c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b09      	cmp	r3, #9
 80019f6:	d909      	bls.n	8001a0c <main+0xaac>
                    speed_print_counter = 0;
 80019f8:	4b64      	ldr	r3, [pc, #400]	@ (8001b8c <main+0xc2c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
                    printf("Speeds: v_L_applied=%d, v_R_applied=%d\r\n", v_L_applied, v_R_applied);
 80019fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8001a02:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8001a06:	4862      	ldr	r0, [pc, #392]	@ (8001b90 <main+0xc30>)
 8001a08:	f006 fb86 	bl	8008118 <iprintf>
                }

                /* Stop control when both wheels reach their targets */
                if (left_reached && right_reached) {
 8001a0c:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d021      	beq.n	8001a58 <main+0xaf8>
 8001a14:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01d      	beq.n	8001a58 <main+0xaf8>
                    position_control_active = false;
 8001a1c:	4b5d      	ldr	r3, [pc, #372]	@ (8001b94 <main+0xc34>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
                    control_locked = true;
 8001a22:	4b5d      	ldr	r3, [pc, #372]	@ (8001b98 <main+0xc38>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	701a      	strb	r2, [r3, #0]
                    v_L_base = 0;
 8001a28:	4b5c      	ldr	r3, [pc, #368]	@ (8001b9c <main+0xc3c>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
                    v_R_base = 0;
 8001a2e:	4b46      	ldr	r3, [pc, #280]	@ (8001b48 <main+0xbe8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
                    e_sum = 0.0f;
 8001a34:	4b48      	ldr	r3, [pc, #288]	@ (8001b58 <main+0xbf8>)
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
                    mot_maxon_both(0, 0, 0, 0);
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	2000      	movs	r0, #0
 8001a44:	f000 fcd8 	bl	80023f8 <mot_maxon_both>
                    printf("Target position reached: left=%d, right=%d\r\n", curr_left, curr_right);
 8001a48:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
 8001a4c:	f9b7 20cc 	ldrsh.w	r2, [r7, #204]	@ 0xcc
 8001a50:	4619      	mov	r1, r3
 8001a52:	4853      	ldr	r0, [pc, #332]	@ (8001ba0 <main+0xc40>)
 8001a54:	f006 fb60 	bl	8008118 <iprintf>
                }
            }

            /* Update odometry */
            float delta_dist = (dist_left + dist_right) / 2.0f;
 8001a58:	ed97 7a32 	vldr	s14, [r7, #200]	@ 0xc8
 8001a5c:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001a60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a64:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001a68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a6c:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            float delta_theta = (dist_right - dist_left) / WHEEL_BASE;
 8001a70:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001a74:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8001a78:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a7c:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8001ba4 <main+0xc44>
 8001a80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a84:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            x += delta_dist * cosf(theta);
 8001a88:	4b47      	ldr	r3, [pc, #284]	@ (8001ba8 <main+0xc48>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a92:	f008 fcf3 	bl	800a47c <cosf>
 8001a96:	eeb0 7a40 	vmov.f32	s14, s0
 8001a9a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001a9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa2:	4b42      	ldr	r3, [pc, #264]	@ (8001bac <main+0xc4c>)
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aac:	4b3f      	ldr	r3, [pc, #252]	@ (8001bac <main+0xc4c>)
 8001aae:	edc3 7a00 	vstr	s15, [r3]
            y += delta_dist * sinf(theta);
 8001ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba8 <main+0xc48>)
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8001abc:	f008 fd22 	bl	800a504 <sinf>
 8001ac0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ac4:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001ac8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001acc:	4b38      	ldr	r3, [pc, #224]	@ (8001bb0 <main+0xc50>)
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad6:	4b36      	ldr	r3, [pc, #216]	@ (8001bb0 <main+0xc50>)
 8001ad8:	edc3 7a00 	vstr	s15, [r3]
            theta += delta_theta;
 8001adc:	4b32      	ldr	r3, [pc, #200]	@ (8001ba8 <main+0xc48>)
 8001ade:	ed93 7a00 	vldr	s14, [r3]
 8001ae2:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aea:	4b2f      	ldr	r3, [pc, #188]	@ (8001ba8 <main+0xc48>)
 8001aec:	edc3 7a00 	vstr	s15, [r3]
            while (theta > M_PI) theta -= 2 * M_PI;
 8001af0:	e012      	b.n	8001b18 <main+0xbb8>
 8001af2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba8 <main+0xc48>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fd26 	bl	8000548 <__aeabi_f2d>
 8001afc:	a30e      	add	r3, pc, #56	@ (adr r3, 8001b38 <main+0xbd8>)
 8001afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b02:	f7fe fbc1 	bl	8000288 <__aeabi_dsub>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4610      	mov	r0, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f7ff f84b 	bl	8000ba8 <__aeabi_d2f>
 8001b12:	4603      	mov	r3, r0
 8001b14:	4a24      	ldr	r2, [pc, #144]	@ (8001ba8 <main+0xc48>)
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b23      	ldr	r3, [pc, #140]	@ (8001ba8 <main+0xc48>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd13 	bl	8000548 <__aeabi_f2d>
 8001b22:	a307      	add	r3, pc, #28	@ (adr r3, 8001b40 <main+0xbe0>)
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fff6 	bl	8000b18 <__aeabi_dcmpgt>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1df      	bne.n	8001af2 <main+0xb92>
            while (theta < -M_PI) theta += 2 * M_PI;
 8001b32:	e052      	b.n	8001bda <main+0xc7a>
 8001b34:	f3af 8000 	nop.w
 8001b38:	54442d18 	.word	0x54442d18
 8001b3c:	401921fb 	.word	0x401921fb
 8001b40:	54442d18 	.word	0x54442d18
 8001b44:	400921fb 	.word	0x400921fb
 8001b48:	20000648 	.word	0x20000648
 8001b4c:	2000064e 	.word	0x2000064e
 8001b50:	20000008 	.word	0x20000008
 8001b54:	3c23d70a 	.word	0x3c23d70a
 8001b58:	20000640 	.word	0x20000640
 8001b5c:	3dcccccd 	.word	0x3dcccccd
 8001b60:	3dcccccd 	.word	0x3dcccccd
 8001b64:	bdcccccd 	.word	0xbdcccccd
 8001b68:	bdcccccd 	.word	0xbdcccccd
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000004 	.word	0x20000004
 8001b74:	2000066c 	.word	0x2000066c
 8001b78:	0800afcc 	.word	0x0800afcc
 8001b7c:	2000066d 	.word	0x2000066d
 8001b80:	0800afec 	.word	0x0800afec
 8001b84:	2000064d 	.word	0x2000064d
 8001b88:	2000064c 	.word	0x2000064c
 8001b8c:	2000066e 	.word	0x2000066e
 8001b90:	0800b00c 	.word	0x0800b00c
 8001b94:	2000064f 	.word	0x2000064f
 8001b98:	20000650 	.word	0x20000650
 8001b9c:	20000644 	.word	0x20000644
 8001ba0:	0800b038 	.word	0x0800b038
 8001ba4:	3e75c28f 	.word	0x3e75c28f
 8001ba8:	20000634 	.word	0x20000634
 8001bac:	2000062c 	.word	0x2000062c
 8001bb0:	20000630 	.word	0x20000630
 8001bb4:	4b62      	ldr	r3, [pc, #392]	@ (8001d40 <main+0xde0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7fe fcc5 	bl	8000548 <__aeabi_f2d>
 8001bbe:	a35c      	add	r3, pc, #368	@ (adr r3, 8001d30 <main+0xdd0>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fb62 	bl	800028c <__adddf3>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f7fe ffea 	bl	8000ba8 <__aeabi_d2f>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4a5a      	ldr	r2, [pc, #360]	@ (8001d40 <main+0xde0>)
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b59      	ldr	r3, [pc, #356]	@ (8001d40 <main+0xde0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fcb2 	bl	8000548 <__aeabi_f2d>
 8001be4:	a354      	add	r3, pc, #336	@ (adr r3, 8001d38 <main+0xdd8>)
 8001be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bea:	f7fe ff77 	bl	8000adc <__aeabi_dcmplt>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d1df      	bne.n	8001bb4 <main+0xc54>

            /* Send odometry data every 10 iterations */
            static uint8_t odom_send_counter = 0;
            odom_send_counter++;
 8001bf4:	4b53      	ldr	r3, [pc, #332]	@ (8001d44 <main+0xde4>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b51      	ldr	r3, [pc, #324]	@ (8001d44 <main+0xde4>)
 8001bfe:	701a      	strb	r2, [r3, #0]
            if (odom_send_counter >= 10) {
 8001c00:	4b50      	ldr	r3, [pc, #320]	@ (8001d44 <main+0xde4>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b09      	cmp	r3, #9
 8001c06:	d931      	bls.n	8001c6c <main+0xd0c>
                odom_send_counter = 0;
 8001c08:	4b4e      	ldr	r3, [pc, #312]	@ (8001d44 <main+0xde4>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
                char odom_str[64];
                snprintf(odom_str, sizeof(odom_str), "x:%.3f,y:%.3f,theta:%.3f\r\n", x, y, theta);
 8001c0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001d48 <main+0xde8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fc98 	bl	8000548 <__aeabi_f2d>
 8001c18:	4604      	mov	r4, r0
 8001c1a:	460d      	mov	r5, r1
 8001c1c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d4c <main+0xdec>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fc91 	bl	8000548 <__aeabi_f2d>
 8001c26:	4680      	mov	r8, r0
 8001c28:	4689      	mov	r9, r1
 8001c2a:	4b45      	ldr	r3, [pc, #276]	@ (8001d40 <main+0xde0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc8a 	bl	8000548 <__aeabi_f2d>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001c3c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c40:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c44:	e9cd 4500 	strd	r4, r5, [sp]
 8001c48:	4a41      	ldr	r2, [pc, #260]	@ (8001d50 <main+0xdf0>)
 8001c4a:	2140      	movs	r1, #64	@ 0x40
 8001c4c:	f006 fad4 	bl	80081f8 <sniprintf>
                HAL_UART_Transmit(&huart5, (uint8_t *)odom_str, strlen(odom_str), HAL_MAX_DELAY);
 8001c50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fb0b 	bl	8000270 <strlen>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	483b      	ldr	r0, [pc, #236]	@ (8001d54 <main+0xdf4>)
 8001c68:	f004 f918 	bl	8005e9c <HAL_UART_Transmit>
            }

            /* Debug: print pose and encoder data every 10 iterations */
            static uint8_t print_counter = 0;
            print_counter++;
 8001c6c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d58 <main+0xdf8>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	3301      	adds	r3, #1
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	4b38      	ldr	r3, [pc, #224]	@ (8001d58 <main+0xdf8>)
 8001c76:	701a      	strb	r2, [r3, #0]
            if (print_counter >= 10) {
 8001c78:	4b37      	ldr	r3, [pc, #220]	@ (8001d58 <main+0xdf8>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b09      	cmp	r3, #9
 8001c7e:	f67f a9b8 	bls.w	8000ff2 <main+0x92>
                print_counter = 0;
 8001c82:	4b35      	ldr	r3, [pc, #212]	@ (8001d58 <main+0xdf8>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
                printf("Pose: x=%.3f m, y=%.3f m, theta=%.3f rad, left=%d, delta_left=%ld, dist_left=%.3f m, right=%d, delta_right=%ld, dist_right=%.3f m, total_left=%.3f m, total_right=%.3f m\r\n",
 8001c88:	4b2f      	ldr	r3, [pc, #188]	@ (8001d48 <main+0xde8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fc5b 	bl	8000548 <__aeabi_f2d>
 8001c92:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001c96:	4b2d      	ldr	r3, [pc, #180]	@ (8001d4c <main+0xdec>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc54 	bl	8000548 <__aeabi_f2d>
 8001ca0:	4682      	mov	sl, r0
 8001ca2:	468b      	mov	fp, r1
 8001ca4:	4b26      	ldr	r3, [pc, #152]	@ (8001d40 <main+0xde0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fc4d 	bl	8000548 <__aeabi_f2d>
 8001cae:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001cb2:	f9b7 60ce 	ldrsh.w	r6, [r7, #206]	@ 0xce
 8001cb6:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8001cba:	f7fe fc45 	bl	8000548 <__aeabi_f2d>
 8001cbe:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001cc2:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	@ 0xcc
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8001ccc:	f7fe fc3c 	bl	8000548 <__aeabi_f2d>
 8001cd0:	4680      	mov	r8, r0
 8001cd2:	4689      	mov	r9, r1
 8001cd4:	4b21      	ldr	r3, [pc, #132]	@ (8001d5c <main+0xdfc>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fc35 	bl	8000548 <__aeabi_f2d>
 8001cde:	4604      	mov	r4, r0
 8001ce0:	460d      	mov	r5, r1
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d60 <main+0xe00>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fc2e 	bl	8000548 <__aeabi_f2d>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8001cf4:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 8001cf8:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8001cfc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001d00:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	9308      	str	r3, [sp, #32]
 8001d06:	ed97 7b02 	vldr	d7, [r7, #8]
 8001d0a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001d0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001d12:	9305      	str	r3, [sp, #20]
 8001d14:	9604      	str	r6, [sp, #16]
 8001d16:	ed97 7b04 	vldr	d7, [r7, #16]
 8001d1a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001d1e:	e9cd ab00 	strd	sl, fp, [sp]
 8001d22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d26:	480f      	ldr	r0, [pc, #60]	@ (8001d64 <main+0xe04>)
 8001d28:	f006 f9f6 	bl	8008118 <iprintf>
    {
 8001d2c:	f7ff b961 	b.w	8000ff2 <main+0x92>
 8001d30:	54442d18 	.word	0x54442d18
 8001d34:	401921fb 	.word	0x401921fb
 8001d38:	54442d18 	.word	0x54442d18
 8001d3c:	c00921fb 	.word	0xc00921fb
 8001d40:	20000634 	.word	0x20000634
 8001d44:	2000066f 	.word	0x2000066f
 8001d48:	2000062c 	.word	0x2000062c
 8001d4c:	20000630 	.word	0x20000630
 8001d50:	0800b068 	.word	0x0800b068
 8001d54:	2000030c 	.word	0x2000030c
 8001d58:	20000670 	.word	0x20000670
 8001d5c:	20000664 	.word	0x20000664
 8001d60:	20000668 	.word	0x20000668
 8001d64:	0800b084 	.word	0x0800b084

08001d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b096      	sub	sp, #88	@ 0x58
 8001d6c:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	2244      	movs	r2, #68	@ 0x44
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f006 fb4a 	bl	8008410 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d7c:	463b      	mov	r3, r7
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]

    /* Configure voltage scaling */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d8a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001d8e:	f001 fb91 	bl	80034b4 <HAL_PWREx_ControlVoltageScaling>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <SystemClock_Config+0x34>
    {
        Error_Handler();
 8001d98:	f000 fb28 	bl	80023ec <Error_Handler>
    }

    /* Initialize oscillators */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001da0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001da4:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001da6:	2310      	movs	r3, #16
 8001da8:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001daa:	2302      	movs	r3, #2
 8001dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dae:	2302      	movs	r3, #2
 8001db0:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLN = 10;
 8001db6:	230a      	movs	r3, #10
 8001db8:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001dba:	2307      	movs	r3, #7
 8001dbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f001 fbc8 	bl	8003560 <HAL_RCC_OscConfig>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <SystemClock_Config+0x72>
    {
        Error_Handler();
 8001dd6:	f000 fb09 	bl	80023ec <Error_Handler>
    }

    /* Configure clock sources */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dda:	230f      	movs	r3, #15
 8001ddc:	603b      	str	r3, [r7, #0]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dde:	2303      	movs	r3, #3
 8001de0:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dea:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	2104      	movs	r1, #4
 8001df4:	4618      	mov	r0, r3
 8001df6:	f001 ff8f 	bl	8003d18 <HAL_RCC_ClockConfig>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <SystemClock_Config+0x9c>
    {
        Error_Handler();
 8001e00:	f000 faf4 	bl	80023ec <Error_Handler>
    }
}
 8001e04:	bf00      	nop
 8001e06:	3758      	adds	r7, #88	@ 0x58
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
    hlpuart1.Instance = LPUART1;
 8001e10:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <MX_LPUART1_UART_Init+0x50>)
 8001e12:	4a13      	ldr	r2, [pc, #76]	@ (8001e60 <MX_LPUART1_UART_Init+0x54>)
 8001e14:	601a      	str	r2, [r3, #0]
    hlpuart1.Init.BaudRate = 115200;
 8001e16:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <MX_LPUART1_UART_Init+0x50>)
 8001e18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e1c:	605a      	str	r2, [r3, #4]
    hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <MX_LPUART1_UART_Init+0x50>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
    hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001e24:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <MX_LPUART1_UART_Init+0x50>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
    hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <MX_LPUART1_UART_Init+0x50>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	611a      	str	r2, [r3, #16]
    hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001e30:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <MX_LPUART1_UART_Init+0x50>)
 8001e32:	220c      	movs	r2, #12
 8001e34:	615a      	str	r2, [r3, #20]
    hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e36:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <MX_LPUART1_UART_Init+0x50>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
    hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e3c:	4b07      	ldr	r3, [pc, #28]	@ (8001e5c <MX_LPUART1_UART_Init+0x50>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	621a      	str	r2, [r3, #32]
    hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e42:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <MX_LPUART1_UART_Init+0x50>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001e48:	4804      	ldr	r0, [pc, #16]	@ (8001e5c <MX_LPUART1_UART_Init+0x50>)
 8001e4a:	f003 ffd9 	bl	8005e00 <HAL_UART_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_LPUART1_UART_Init+0x4c>
    {
        Error_Handler();
 8001e54:	f000 faca 	bl	80023ec <Error_Handler>
    }
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200001fc 	.word	0x200001fc
 8001e60:	40008000 	.word	0x40008000

08001e64 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
    huart4.Instance = UART4;
 8001e68:	4b14      	ldr	r3, [pc, #80]	@ (8001ebc <MX_UART4_Init+0x58>)
 8001e6a:	4a15      	ldr	r2, [pc, #84]	@ (8001ec0 <MX_UART4_Init+0x5c>)
 8001e6c:	601a      	str	r2, [r3, #0]
    huart4.Init.BaudRate = 115200;
 8001e6e:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <MX_UART4_Init+0x58>)
 8001e70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e74:	605a      	str	r2, [r3, #4]
    huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e76:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <MX_UART4_Init+0x58>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
    huart4.Init.StopBits = UART_STOPBITS_1;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <MX_UART4_Init+0x58>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
    huart4.Init.Parity = UART_PARITY_NONE;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	@ (8001ebc <MX_UART4_Init+0x58>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]
    huart4.Init.Mode = UART_MODE_TX_RX;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <MX_UART4_Init+0x58>)
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	615a      	str	r2, [r3, #20]
    huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <MX_UART4_Init+0x58>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
    huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e94:	4b09      	ldr	r3, [pc, #36]	@ (8001ebc <MX_UART4_Init+0x58>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	61da      	str	r2, [r3, #28]
    hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <MX_UART4_Init+0x60>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
    huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <MX_UART4_Init+0x58>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ea6:	4805      	ldr	r0, [pc, #20]	@ (8001ebc <MX_UART4_Init+0x58>)
 8001ea8:	f003 ffaa 	bl	8005e00 <HAL_UART_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_UART4_Init+0x52>
    {
        Error_Handler();
 8001eb2:	f000 fa9b 	bl	80023ec <Error_Handler>
    }
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000284 	.word	0x20000284
 8001ec0:	40004c00 	.word	0x40004c00
 8001ec4:	200001fc 	.word	0x200001fc

08001ec8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
    huart5.Instance = UART5;
 8001ecc:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <MX_UART5_Init+0x58>)
 8001ece:	4a15      	ldr	r2, [pc, #84]	@ (8001f24 <MX_UART5_Init+0x5c>)
 8001ed0:	601a      	str	r2, [r3, #0]
    huart5.Init.BaudRate = 115200;
 8001ed2:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <MX_UART5_Init+0x58>)
 8001ed4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ed8:	605a      	str	r2, [r3, #4]
    huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001eda:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <MX_UART5_Init+0x58>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
    huart5.Init.StopBits = UART_STOPBITS_1;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8001f20 <MX_UART5_Init+0x58>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
    huart5.Init.Parity = UART_PARITY_NONE;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <MX_UART5_Init+0x58>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
    huart5.Init.Mode = UART_MODE_TX_RX;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <MX_UART5_Init+0x58>)
 8001eee:	220c      	movs	r2, #12
 8001ef0:	615a      	str	r2, [r3, #20]
    huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f20 <MX_UART5_Init+0x58>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
    huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <MX_UART5_Init+0x58>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
    huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001efe:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <MX_UART5_Init+0x58>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
    huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <MX_UART5_Init+0x58>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f0a:	4805      	ldr	r0, [pc, #20]	@ (8001f20 <MX_UART5_Init+0x58>)
 8001f0c:	f003 ff78 	bl	8005e00 <HAL_UART_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_UART5_Init+0x52>
    {
        Error_Handler();
 8001f16:	f000 fa69 	bl	80023ec <Error_Handler>
    }
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	2000030c 	.word	0x2000030c
 8001f24:	40005000 	.word	0x40005000

08001f28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
    huart1.Instance = USART1;
 8001f2c:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f2e:	4a15      	ldr	r2, [pc, #84]	@ (8001f84 <MX_USART1_UART_Init+0x5c>)
 8001f30:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8001f32:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f38:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f3a:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001f40:	4b0f      	ldr	r3, [pc, #60]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f4e:	220c      	movs	r2, #12
 8001f50:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f58:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	@ (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f6c:	f003 ff48 	bl	8005e00 <HAL_UART_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_USART1_UART_Init+0x52>
    {
        Error_Handler();
 8001f76:	f000 fa39 	bl	80023ec <Error_Handler>
    }
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000394 	.word	0x20000394
 8001f84:	40013800 	.word	0x40013800

08001f88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8001f8c:	4b14      	ldr	r3, [pc, #80]	@ (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001f8e:	4a15      	ldr	r2, [pc, #84]	@ (8001fe4 <MX_USART2_UART_Init+0x5c>)
 8001f90:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001f92:	4b13      	ldr	r3, [pc, #76]	@ (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001f94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f98:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9a:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fae:	220c      	movs	r2, #12
 8001fb0:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb8:	4b09      	ldr	r3, [pc, #36]	@ (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fbe:	4b08      	ldr	r3, [pc, #32]	@ (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fca:	4805      	ldr	r0, [pc, #20]	@ (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fcc:	f003 ff18 	bl	8005e00 <HAL_UART_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_USART2_UART_Init+0x52>
    {
        Error_Handler();
 8001fd6:	f000 fa09 	bl	80023ec <Error_Handler>
    }
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	2000041c 	.word	0x2000041c
 8001fe4:	40004400 	.word	0x40004400

08001fe8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
    huart3.Instance = USART3;
 8001fec:	4b14      	ldr	r3, [pc, #80]	@ (8002040 <MX_USART3_UART_Init+0x58>)
 8001fee:	4a15      	ldr	r2, [pc, #84]	@ (8002044 <MX_USART3_UART_Init+0x5c>)
 8001ff0:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8001ff2:	4b13      	ldr	r3, [pc, #76]	@ (8002040 <MX_USART3_UART_Init+0x58>)
 8001ff4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ff8:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <MX_USART3_UART_Init+0x58>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8002000:	4b0f      	ldr	r3, [pc, #60]	@ (8002040 <MX_USART3_UART_Init+0x58>)
 8002002:	2200      	movs	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8002006:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <MX_USART3_UART_Init+0x58>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 800200c:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <MX_USART3_UART_Init+0x58>)
 800200e:	220c      	movs	r2, #12
 8002010:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002012:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <MX_USART3_UART_Init+0x58>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002018:	4b09      	ldr	r3, [pc, #36]	@ (8002040 <MX_USART3_UART_Init+0x58>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800201e:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <MX_USART3_UART_Init+0x58>)
 8002020:	2200      	movs	r2, #0
 8002022:	621a      	str	r2, [r3, #32]
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002024:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <MX_USART3_UART_Init+0x58>)
 8002026:	2200      	movs	r2, #0
 8002028:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart3) != HAL_OK)
 800202a:	4805      	ldr	r0, [pc, #20]	@ (8002040 <MX_USART3_UART_Init+0x58>)
 800202c:	f003 fee8 	bl	8005e00 <HAL_UART_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_USART3_UART_Init+0x52>
    {
        Error_Handler();
 8002036:	f000 f9d9 	bl	80023ec <Error_Handler>
    }
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200004a4 	.word	0x200004a4
 8002044:	40004800 	.word	0x40004800

08002048 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function (Right wheel encoder: PA8, PA9)
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08c      	sub	sp, #48	@ 0x30
 800204c:	af00      	add	r7, sp, #0
    TIM_Encoder_InitTypeDef sConfig = {0};
 800204e:	f107 030c 	add.w	r3, r7, #12
 8002052:	2224      	movs	r2, #36	@ 0x24
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f006 f9da 	bl	8008410 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205c:	463b      	mov	r3, r7
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]

    htim1.Instance = TIM1;
 8002066:	4b23      	ldr	r3, [pc, #140]	@ (80020f4 <MX_TIM1_Init+0xac>)
 8002068:	4a23      	ldr	r2, [pc, #140]	@ (80020f8 <MX_TIM1_Init+0xb0>)
 800206a:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 0;
 800206c:	4b21      	ldr	r3, [pc, #132]	@ (80020f4 <MX_TIM1_Init+0xac>)
 800206e:	2200      	movs	r2, #0
 8002070:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002072:	4b20      	ldr	r3, [pc, #128]	@ (80020f4 <MX_TIM1_Init+0xac>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 65535;
 8002078:	4b1e      	ldr	r3, [pc, #120]	@ (80020f4 <MX_TIM1_Init+0xac>)
 800207a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800207e:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002080:	4b1c      	ldr	r3, [pc, #112]	@ (80020f4 <MX_TIM1_Init+0xac>)
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8002086:	4b1b      	ldr	r3, [pc, #108]	@ (80020f4 <MX_TIM1_Init+0xac>)
 8002088:	2200      	movs	r2, #0
 800208a:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208c:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <MX_TIM1_Init+0xac>)
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002092:	2303      	movs	r3, #3
 8002094:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800209a:	2301      	movs	r3, #1
 800209c:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80020a6:	2302      	movs	r3, #2
 80020a8:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020aa:	2301      	movs	r3, #1
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020ae:	2300      	movs	r3, #0
 80020b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    sConfig.IC2Filter = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80020b6:	f107 030c 	add.w	r3, r7, #12
 80020ba:	4619      	mov	r1, r3
 80020bc:	480d      	ldr	r0, [pc, #52]	@ (80020f4 <MX_TIM1_Init+0xac>)
 80020be:	f002 fec9 	bl	8004e54 <HAL_TIM_Encoder_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM1_Init+0x84>
    {
        Error_Handler();
 80020c8:	f000 f990 	bl	80023ec <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020cc:	2300      	movs	r3, #0
 80020ce:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020d0:	2300      	movs	r3, #0
 80020d2:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020d8:	463b      	mov	r3, r7
 80020da:	4619      	mov	r1, r3
 80020dc:	4805      	ldr	r0, [pc, #20]	@ (80020f4 <MX_TIM1_Init+0xac>)
 80020de:	f003 fe07 	bl	8005cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM1_Init+0xa4>
    {
        Error_Handler();
 80020e8:	f000 f980 	bl	80023ec <Error_Handler>
    }
}
 80020ec:	bf00      	nop
 80020ee:	3730      	adds	r7, #48	@ 0x30
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	2000052c 	.word	0x2000052c
 80020f8:	40012c00 	.word	0x40012c00

080020fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function (PWM for motor control)
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08e      	sub	sp, #56	@ 0x38
 8002100:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002102:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002110:	f107 031c 	add.w	r3, r7, #28
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800211c:	463b      	mov	r3, r7
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	60da      	str	r2, [r3, #12]
 8002128:	611a      	str	r2, [r3, #16]
 800212a:	615a      	str	r2, [r3, #20]
 800212c:	619a      	str	r2, [r3, #24]

    htim2.Instance = TIM2;
 800212e:	4b33      	ldr	r3, [pc, #204]	@ (80021fc <MX_TIM2_Init+0x100>)
 8002130:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002134:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 79;
 8002136:	4b31      	ldr	r3, [pc, #196]	@ (80021fc <MX_TIM2_Init+0x100>)
 8002138:	224f      	movs	r2, #79	@ 0x4f
 800213a:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213c:	4b2f      	ldr	r3, [pc, #188]	@ (80021fc <MX_TIM2_Init+0x100>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 1999;
 8002142:	4b2e      	ldr	r3, [pc, #184]	@ (80021fc <MX_TIM2_Init+0x100>)
 8002144:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002148:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214a:	4b2c      	ldr	r3, [pc, #176]	@ (80021fc <MX_TIM2_Init+0x100>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002150:	4b2a      	ldr	r3, [pc, #168]	@ (80021fc <MX_TIM2_Init+0x100>)
 8002152:	2200      	movs	r2, #0
 8002154:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002156:	4829      	ldr	r0, [pc, #164]	@ (80021fc <MX_TIM2_Init+0x100>)
 8002158:	f002 fcbe 	bl	8004ad8 <HAL_TIM_Base_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM2_Init+0x6a>
    {
        Error_Handler();
 8002162:	f000 f943 	bl	80023ec <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800216a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800216c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002170:	4619      	mov	r1, r3
 8002172:	4822      	ldr	r0, [pc, #136]	@ (80021fc <MX_TIM2_Init+0x100>)
 8002174:	f003 f8b6 	bl	80052e4 <HAL_TIM_ConfigClockSource>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM2_Init+0x86>
    {
        Error_Handler();
 800217e:	f000 f935 	bl	80023ec <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002182:	481e      	ldr	r0, [pc, #120]	@ (80021fc <MX_TIM2_Init+0x100>)
 8002184:	f002 fcff 	bl	8004b86 <HAL_TIM_PWM_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM2_Init+0x96>
    {
        Error_Handler();
 800218e:	f000 f92d 	bl	80023ec <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800219a:	f107 031c 	add.w	r3, r7, #28
 800219e:	4619      	mov	r1, r3
 80021a0:	4816      	ldr	r0, [pc, #88]	@ (80021fc <MX_TIM2_Init+0x100>)
 80021a2:	f003 fda5 	bl	8005cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM2_Init+0xb4>
    {
        Error_Handler();
 80021ac:	f000 f91e 	bl	80023ec <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021b0:	2360      	movs	r3, #96	@ 0x60
 80021b2:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021c0:	463b      	mov	r3, r7
 80021c2:	2208      	movs	r2, #8
 80021c4:	4619      	mov	r1, r3
 80021c6:	480d      	ldr	r0, [pc, #52]	@ (80021fc <MX_TIM2_Init+0x100>)
 80021c8:	f002 ff78 	bl	80050bc <HAL_TIM_PWM_ConfigChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM2_Init+0xda>
    {
        Error_Handler();
 80021d2:	f000 f90b 	bl	80023ec <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021d6:	463b      	mov	r3, r7
 80021d8:	220c      	movs	r2, #12
 80021da:	4619      	mov	r1, r3
 80021dc:	4807      	ldr	r0, [pc, #28]	@ (80021fc <MX_TIM2_Init+0x100>)
 80021de:	f002 ff6d 	bl	80050bc <HAL_TIM_PWM_ConfigChannel>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM2_Init+0xf0>
    {
        Error_Handler();
 80021e8:	f000 f900 	bl	80023ec <Error_Handler>
    }
    HAL_TIM_MspPostInit(&htim2);
 80021ec:	4803      	ldr	r0, [pc, #12]	@ (80021fc <MX_TIM2_Init+0x100>)
 80021ee:	f000 fc09 	bl	8002a04 <HAL_TIM_MspPostInit>
}
 80021f2:	bf00      	nop
 80021f4:	3738      	adds	r7, #56	@ 0x38
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000578 	.word	0x20000578

08002200 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function (Left wheel encoder: PA6, PA7)
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	@ 0x30
 8002204:	af00      	add	r7, sp, #0
    TIM_Encoder_InitTypeDef sConfig = {0};
 8002206:	f107 030c 	add.w	r3, r7, #12
 800220a:	2224      	movs	r2, #36	@ 0x24
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f006 f8fe 	bl	8008410 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002214:	463b      	mov	r3, r7
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
 800221c:	609a      	str	r2, [r3, #8]

    htim3.Instance = TIM3;
 800221e:	4b21      	ldr	r3, [pc, #132]	@ (80022a4 <MX_TIM3_Init+0xa4>)
 8002220:	4a21      	ldr	r2, [pc, #132]	@ (80022a8 <MX_TIM3_Init+0xa8>)
 8002222:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 0;
 8002224:	4b1f      	ldr	r3, [pc, #124]	@ (80022a4 <MX_TIM3_Init+0xa4>)
 8002226:	2200      	movs	r2, #0
 8002228:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222a:	4b1e      	ldr	r3, [pc, #120]	@ (80022a4 <MX_TIM3_Init+0xa4>)
 800222c:	2200      	movs	r2, #0
 800222e:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535;
 8002230:	4b1c      	ldr	r3, [pc, #112]	@ (80022a4 <MX_TIM3_Init+0xa4>)
 8002232:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002236:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002238:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <MX_TIM3_Init+0xa4>)
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223e:	4b19      	ldr	r3, [pc, #100]	@ (80022a4 <MX_TIM3_Init+0xa4>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002244:	2303      	movs	r3, #3
 8002246:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800224c:	2301      	movs	r3, #1
 800224e:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002250:	2300      	movs	r3, #0
 8002252:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002258:	2302      	movs	r3, #2
 800225a:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800225c:	2301      	movs	r3, #1
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002260:	2300      	movs	r3, #0
 8002262:	62bb      	str	r3, [r7, #40]	@ 0x28
    sConfig.IC2Filter = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	4619      	mov	r1, r3
 800226e:	480d      	ldr	r0, [pc, #52]	@ (80022a4 <MX_TIM3_Init+0xa4>)
 8002270:	f002 fdf0 	bl	8004e54 <HAL_TIM_Encoder_Init>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM3_Init+0x7e>
    {
        Error_Handler();
 800227a:	f000 f8b7 	bl	80023ec <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002282:	2300      	movs	r3, #0
 8002284:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002286:	463b      	mov	r3, r7
 8002288:	4619      	mov	r1, r3
 800228a:	4806      	ldr	r0, [pc, #24]	@ (80022a4 <MX_TIM3_Init+0xa4>)
 800228c:	f003 fd30 	bl	8005cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM3_Init+0x9a>
    {
        Error_Handler();
 8002296:	f000 f8a9 	bl	80023ec <Error_Handler>
    }
}
 800229a:	bf00      	nop
 800229c:	3730      	adds	r7, #48	@ 0x30
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200005c4 	.word	0x200005c4
 80022a8:	40000400 	.word	0x40000400

080022ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08a      	sub	sp, #40	@ 0x28
 80022b0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	60da      	str	r2, [r3, #12]
 80022c0:	611a      	str	r2, [r3, #16]

    /* Enable GPIO clocks */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c2:	4b3c      	ldr	r3, [pc, #240]	@ (80023b4 <MX_GPIO_Init+0x108>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c6:	4a3b      	ldr	r2, [pc, #236]	@ (80023b4 <MX_GPIO_Init+0x108>)
 80022c8:	f043 0304 	orr.w	r3, r3, #4
 80022cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ce:	4b39      	ldr	r3, [pc, #228]	@ (80023b4 <MX_GPIO_Init+0x108>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80022da:	4b36      	ldr	r3, [pc, #216]	@ (80023b4 <MX_GPIO_Init+0x108>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022de:	4a35      	ldr	r2, [pc, #212]	@ (80023b4 <MX_GPIO_Init+0x108>)
 80022e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022e6:	4b33      	ldr	r3, [pc, #204]	@ (80023b4 <MX_GPIO_Init+0x108>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	4b30      	ldr	r3, [pc, #192]	@ (80023b4 <MX_GPIO_Init+0x108>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f6:	4a2f      	ldr	r2, [pc, #188]	@ (80023b4 <MX_GPIO_Init+0x108>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022fe:	4b2d      	ldr	r3, [pc, #180]	@ (80023b4 <MX_GPIO_Init+0x108>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800230a:	4b2a      	ldr	r3, [pc, #168]	@ (80023b4 <MX_GPIO_Init+0x108>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230e:	4a29      	ldr	r2, [pc, #164]	@ (80023b4 <MX_GPIO_Init+0x108>)
 8002310:	f043 0302 	orr.w	r3, r3, #2
 8002314:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002316:	4b27      	ldr	r3, [pc, #156]	@ (80023b4 <MX_GPIO_Init+0x108>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002322:	4b24      	ldr	r3, [pc, #144]	@ (80023b4 <MX_GPIO_Init+0x108>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002326:	4a23      	ldr	r2, [pc, #140]	@ (80023b4 <MX_GPIO_Init+0x108>)
 8002328:	f043 0308 	orr.w	r3, r3, #8
 800232c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800232e:	4b21      	ldr	r3, [pc, #132]	@ (80023b4 <MX_GPIO_Init+0x108>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	683b      	ldr	r3, [r7, #0]

    /* Set initial state of output pins */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800233a:	2200      	movs	r2, #0
 800233c:	2120      	movs	r1, #32
 800233e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002342:	f001 f891 	bl	8003468 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002346:	2200      	movs	r2, #0
 8002348:	f44f 714c 	mov.w	r1, #816	@ 0x330
 800234c:	481a      	ldr	r0, [pc, #104]	@ (80023b8 <MX_GPIO_Init+0x10c>)
 800234e:	f001 f88b 	bl	8003468 <HAL_GPIO_WritePin>

    /* Configure Button pin (B1) */
    GPIO_InitStruct.Pin = B1_Pin;
 8002352:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002358:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800235c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4619      	mov	r1, r3
 8002368:	4814      	ldr	r0, [pc, #80]	@ (80023bc <MX_GPIO_Init+0x110>)
 800236a:	f000 fed3 	bl	8003114 <HAL_GPIO_Init>

    /* Configure LD2 pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 800236e:	2320      	movs	r3, #32
 8002370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002372:	2301      	movs	r3, #1
 8002374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	4619      	mov	r1, r3
 8002384:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002388:	f000 fec4 	bl	8003114 <HAL_GPIO_Init>

    /* Configure motor control pins on GPIOB */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 800238c:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8002390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002392:	2301      	movs	r3, #1
 8002394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	4804      	ldr	r0, [pc, #16]	@ (80023b8 <MX_GPIO_Init+0x10c>)
 80023a6:	f000 feb5 	bl	8003114 <HAL_GPIO_Init>
}
 80023aa:	bf00      	nop
 80023ac:	3728      	adds	r7, #40	@ 0x28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	48000400 	.word	0x48000400
 80023bc:	48000800 	.word	0x48000800

080023c0 <HAL_UART_RxCpltCallback>:
  * @brief UART Receive Complete Callback
  * @param huart UART handle
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
    if (huart == &hlpuart1) {
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a06      	ldr	r2, [pc, #24]	@ (80023e4 <HAL_UART_RxCpltCallback+0x24>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d104      	bne.n	80023da <HAL_UART_RxCpltCallback+0x1a>
        HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)rx_data, sizeof(rx_data));
 80023d0:	221b      	movs	r2, #27
 80023d2:	4905      	ldr	r1, [pc, #20]	@ (80023e8 <HAL_UART_RxCpltCallback+0x28>)
 80023d4:	4803      	ldr	r0, [pc, #12]	@ (80023e4 <HAL_UART_RxCpltCallback+0x24>)
 80023d6:	f003 fdeb 	bl	8005fb0 <HAL_UART_Receive_IT>
    }
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200001fc 	.word	0x200001fc
 80023e8:	20000610 	.word	0x20000610

080023ec <Error_Handler>:
/**
  * @brief Error Handler
  * @retval None
  */
void Error_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023f0:	b672      	cpsid	i
}
 80023f2:	bf00      	nop
    __disable_irq();
    while (1)
 80023f4:	bf00      	nop
 80023f6:	e7fd      	b.n	80023f4 <Error_Handler+0x8>

080023f8 <mot_maxon_both>:
#include "maxon.h"
#include "main.h"

extern TIM_HandleTypeDef htim2;

void mot_maxon_both(int result_D, int inv_D, int result_G, int inv_G) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	603b      	str	r3, [r7, #0]
    if (result_D == 0 && result_G == 0) {
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d121      	bne.n	8002450 <mot_maxon_both+0x58>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11e      	bne.n	8002450 <mot_maxon_both+0x58>
        // Disable motors when PWM is zero
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  // Droit A
 8002412:	2200      	movs	r2, #0
 8002414:	2110      	movs	r1, #16
 8002416:	4828      	ldr	r0, [pc, #160]	@ (80024b8 <mot_maxon_both+0xc0>)
 8002418:	f001 f826 	bl	8003468 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);  // Droit B
 800241c:	2200      	movs	r2, #0
 800241e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002422:	4825      	ldr	r0, [pc, #148]	@ (80024b8 <mot_maxon_both+0xc0>)
 8002424:	f001 f820 	bl	8003468 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);  // Gauche A
 8002428:	2200      	movs	r2, #0
 800242a:	2120      	movs	r1, #32
 800242c:	4822      	ldr	r0, [pc, #136]	@ (80024b8 <mot_maxon_both+0xc0>)
 800242e:	f001 f81b 	bl	8003468 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);  // Gauche B
 8002432:	2200      	movs	r2, #0
 8002434:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002438:	481f      	ldr	r0, [pc, #124]	@ (80024b8 <mot_maxon_both+0xc0>)
 800243a:	f001 f815 	bl	8003468 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);       // Moteur Droit
 800243e:	4b1f      	ldr	r3, [pc, #124]	@ (80024bc <mot_maxon_both+0xc4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2200      	movs	r2, #0
 8002444:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);       // Moteur Gauche
 8002446:	4b1d      	ldr	r3, [pc, #116]	@ (80024bc <mot_maxon_both+0xc4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2200      	movs	r2, #0
 800244c:	641a      	str	r2, [r3, #64]	@ 0x40
 800244e:	e02e      	b.n	80024ae <mot_maxon_both+0xb6>
    } else {
        // Appliquer la direction
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, inv_D);      // Droit A
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	461a      	mov	r2, r3
 8002456:	2110      	movs	r1, #16
 8002458:	4817      	ldr	r0, [pc, #92]	@ (80024b8 <mot_maxon_both+0xc0>)
 800245a:	f001 f805 	bl	8003468 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, !inv_D);     // Droit B
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf0c      	ite	eq
 8002464:	2301      	moveq	r3, #1
 8002466:	2300      	movne	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002470:	4811      	ldr	r0, [pc, #68]	@ (80024b8 <mot_maxon_both+0xc0>)
 8002472:	f000 fff9 	bl	8003468 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, inv_G);      // Gauche A
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	2120      	movs	r1, #32
 800247e:	480e      	ldr	r0, [pc, #56]	@ (80024b8 <mot_maxon_both+0xc0>)
 8002480:	f000 fff2 	bl	8003468 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, !inv_G);     // Gauche B
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	bf0c      	ite	eq
 800248a:	2301      	moveq	r3, #1
 800248c:	2300      	movne	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002496:	4808      	ldr	r0, [pc, #32]	@ (80024b8 <mot_maxon_both+0xc0>)
 8002498:	f000 ffe6 	bl	8003468 <HAL_GPIO_WritePin>

        // Appliquer la PWM
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result_D);  // Moteur Droit
 800249c:	4b07      	ldr	r3, [pc, #28]	@ (80024bc <mot_maxon_both+0xc4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	63da      	str	r2, [r3, #60]	@ 0x3c
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result_G);  // Moteur Gauche
 80024a4:	4b05      	ldr	r3, [pc, #20]	@ (80024bc <mot_maxon_both+0xc4>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	48000400 	.word	0x48000400
 80024bc:	20000578 	.word	0x20000578

080024c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002504 <HAL_MspInit+0x44>)
 80024c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002504 <HAL_MspInit+0x44>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80024d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <HAL_MspInit+0x44>)
 80024d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	607b      	str	r3, [r7, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024de:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <HAL_MspInit+0x44>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e2:	4a08      	ldr	r2, [pc, #32]	@ (8002504 <HAL_MspInit+0x44>)
 80024e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_MspInit+0x44>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000

08002508 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b0b6      	sub	sp, #216	@ 0xd8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002520:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002524:	2288      	movs	r2, #136	@ 0x88
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f005 ff71 	bl	8008410 <memset>
  if(huart->Instance==LPUART1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a9c      	ldr	r2, [pc, #624]	@ (80027a4 <HAL_UART_MspInit+0x29c>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d144      	bne.n	80025c2 <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002538:	2320      	movs	r3, #32
 800253a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800253c:	2300      	movs	r3, #0
 800253e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002542:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002546:	4618      	mov	r0, r3
 8002548:	f001 fe0a 	bl	8004160 <HAL_RCCEx_PeriphCLKConfig>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002552:	f7ff ff4b 	bl	80023ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002556:	4b94      	ldr	r3, [pc, #592]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 8002558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255a:	4a93      	ldr	r2, [pc, #588]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002562:	4b91      	ldr	r3, [pc, #580]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 8002564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800256c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800256e:	4b8e      	ldr	r3, [pc, #568]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 8002570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002572:	4a8d      	ldr	r2, [pc, #564]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 8002574:	f043 0304 	orr.w	r3, r3, #4
 8002578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800257a:	4b8b      	ldr	r3, [pc, #556]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 800257c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	637b      	str	r3, [r7, #52]	@ 0x34
 8002584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002586:	2303      	movs	r3, #3
 8002588:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002598:	2303      	movs	r3, #3
 800259a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800259e:	2308      	movs	r3, #8
 80025a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025a4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80025a8:	4619      	mov	r1, r3
 80025aa:	4880      	ldr	r0, [pc, #512]	@ (80027ac <HAL_UART_MspInit+0x2a4>)
 80025ac:	f000 fdb2 	bl	8003114 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80025b0:	2200      	movs	r2, #0
 80025b2:	2100      	movs	r1, #0
 80025b4:	2046      	movs	r0, #70	@ 0x46
 80025b6:	f000 fcf8 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80025ba:	2046      	movs	r0, #70	@ 0x46
 80025bc:	f000 fd11 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025c0:	e182      	b.n	80028c8 <HAL_UART_MspInit+0x3c0>
  else if(huart->Instance==UART4)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a7a      	ldr	r2, [pc, #488]	@ (80027b0 <HAL_UART_MspInit+0x2a8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d145      	bne.n	8002658 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80025cc:	2308      	movs	r3, #8
 80025ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80025da:	4618      	mov	r0, r3
 80025dc:	f001 fdc0 	bl	8004160 <HAL_RCCEx_PeriphCLKConfig>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_UART_MspInit+0xe2>
      Error_Handler();
 80025e6:	f7ff ff01 	bl	80023ec <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80025ea:	4b6f      	ldr	r3, [pc, #444]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ee:	4a6e      	ldr	r2, [pc, #440]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 80025f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80025f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80025f6:	4b6c      	ldr	r3, [pc, #432]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8002600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	4b69      	ldr	r3, [pc, #420]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 8002604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002606:	4a68      	ldr	r2, [pc, #416]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800260e:	4b66      	ldr	r3, [pc, #408]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800261a:	2303      	movs	r3, #3
 800261c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262c:	2303      	movs	r3, #3
 800262e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002632:	2308      	movs	r3, #8
 8002634:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002638:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800263c:	4619      	mov	r1, r3
 800263e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002642:	f000 fd67 	bl	8003114 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	2034      	movs	r0, #52	@ 0x34
 800264c:	f000 fcad 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002650:	2034      	movs	r0, #52	@ 0x34
 8002652:	f000 fcc6 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
}
 8002656:	e137      	b.n	80028c8 <HAL_UART_MspInit+0x3c0>
  else if(huart->Instance==UART5)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a55      	ldr	r2, [pc, #340]	@ (80027b4 <HAL_UART_MspInit+0x2ac>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d15e      	bne.n	8002720 <HAL_UART_MspInit+0x218>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002662:	2310      	movs	r3, #16
 8002664:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002666:	2300      	movs	r3, #0
 8002668:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800266c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002670:	4618      	mov	r0, r3
 8002672:	f001 fd75 	bl	8004160 <HAL_RCCEx_PeriphCLKConfig>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <HAL_UART_MspInit+0x178>
      Error_Handler();
 800267c:	f7ff feb6 	bl	80023ec <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002680:	4b49      	ldr	r3, [pc, #292]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002684:	4a48      	ldr	r2, [pc, #288]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 8002686:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800268a:	6593      	str	r3, [r2, #88]	@ 0x58
 800268c:	4b46      	ldr	r3, [pc, #280]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 800268e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002690:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002698:	4b43      	ldr	r3, [pc, #268]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 800269a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269c:	4a42      	ldr	r2, [pc, #264]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026a4:	4b40      	ldr	r3, [pc, #256]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 80026a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026b0:	4b3d      	ldr	r3, [pc, #244]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 80026b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b4:	4a3c      	ldr	r2, [pc, #240]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 80026b6:	f043 0308 	orr.w	r3, r3, #8
 80026ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026bc:	4b3a      	ldr	r3, [pc, #232]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 80026be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	623b      	str	r3, [r7, #32]
 80026c6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026dc:	2303      	movs	r3, #3
 80026de:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80026e2:	2308      	movs	r3, #8
 80026e4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026e8:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80026ec:	4619      	mov	r1, r3
 80026ee:	482f      	ldr	r0, [pc, #188]	@ (80027ac <HAL_UART_MspInit+0x2a4>)
 80026f0:	f000 fd10 	bl	8003114 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026f4:	2304      	movs	r3, #4
 80026f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002706:	2303      	movs	r3, #3
 8002708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800270c:	2308      	movs	r3, #8
 800270e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002712:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002716:	4619      	mov	r1, r3
 8002718:	4827      	ldr	r0, [pc, #156]	@ (80027b8 <HAL_UART_MspInit+0x2b0>)
 800271a:	f000 fcfb 	bl	8003114 <HAL_GPIO_Init>
}
 800271e:	e0d3      	b.n	80028c8 <HAL_UART_MspInit+0x3c0>
  else if(huart->Instance==USART1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a25      	ldr	r2, [pc, #148]	@ (80027bc <HAL_UART_MspInit+0x2b4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d14c      	bne.n	80027c4 <HAL_UART_MspInit+0x2bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800272a:	2301      	movs	r3, #1
 800272c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800272e:	2300      	movs	r3, #0
 8002730:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002732:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002736:	4618      	mov	r0, r3
 8002738:	f001 fd12 	bl	8004160 <HAL_RCCEx_PeriphCLKConfig>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_UART_MspInit+0x23e>
      Error_Handler();
 8002742:	f7ff fe53 	bl	80023ec <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002746:	4b18      	ldr	r3, [pc, #96]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 8002748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800274a:	4a17      	ldr	r2, [pc, #92]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 800274c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002750:	6613      	str	r3, [r2, #96]	@ 0x60
 8002752:	4b15      	ldr	r3, [pc, #84]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 8002754:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275e:	4b12      	ldr	r3, [pc, #72]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 8002760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002762:	4a11      	ldr	r2, [pc, #68]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800276a:	4b0f      	ldr	r3, [pc, #60]	@ (80027a8 <HAL_UART_MspInit+0x2a0>)
 800276c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002776:	23c0      	movs	r3, #192	@ 0xc0
 8002778:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	2302      	movs	r3, #2
 800277e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800278e:	2307      	movs	r3, #7
 8002790:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002794:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002798:	4619      	mov	r1, r3
 800279a:	4809      	ldr	r0, [pc, #36]	@ (80027c0 <HAL_UART_MspInit+0x2b8>)
 800279c:	f000 fcba 	bl	8003114 <HAL_GPIO_Init>
}
 80027a0:	e092      	b.n	80028c8 <HAL_UART_MspInit+0x3c0>
 80027a2:	bf00      	nop
 80027a4:	40008000 	.word	0x40008000
 80027a8:	40021000 	.word	0x40021000
 80027ac:	48000800 	.word	0x48000800
 80027b0:	40004c00 	.word	0x40004c00
 80027b4:	40005000 	.word	0x40005000
 80027b8:	48000c00 	.word	0x48000c00
 80027bc:	40013800 	.word	0x40013800
 80027c0:	48000400 	.word	0x48000400
  else if(huart->Instance==USART2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a41      	ldr	r2, [pc, #260]	@ (80028d0 <HAL_UART_MspInit+0x3c8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d13c      	bne.n	8002848 <HAL_UART_MspInit+0x340>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80027ce:	2302      	movs	r3, #2
 80027d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027d2:	2300      	movs	r3, #0
 80027d4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027d6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80027da:	4618      	mov	r0, r3
 80027dc:	f001 fcc0 	bl	8004160 <HAL_RCCEx_PeriphCLKConfig>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_UART_MspInit+0x2e2>
      Error_Handler();
 80027e6:	f7ff fe01 	bl	80023ec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027ea:	4b3a      	ldr	r3, [pc, #232]	@ (80028d4 <HAL_UART_MspInit+0x3cc>)
 80027ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ee:	4a39      	ldr	r2, [pc, #228]	@ (80028d4 <HAL_UART_MspInit+0x3cc>)
 80027f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80027f6:	4b37      	ldr	r3, [pc, #220]	@ (80028d4 <HAL_UART_MspInit+0x3cc>)
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002802:	4b34      	ldr	r3, [pc, #208]	@ (80028d4 <HAL_UART_MspInit+0x3cc>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002806:	4a33      	ldr	r2, [pc, #204]	@ (80028d4 <HAL_UART_MspInit+0x3cc>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800280e:	4b31      	ldr	r3, [pc, #196]	@ (80028d4 <HAL_UART_MspInit+0x3cc>)
 8002810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 800281a:	230c      	movs	r3, #12
 800281c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002832:	2307      	movs	r3, #7
 8002834:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002838:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800283c:	4619      	mov	r1, r3
 800283e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002842:	f000 fc67 	bl	8003114 <HAL_GPIO_Init>
}
 8002846:	e03f      	b.n	80028c8 <HAL_UART_MspInit+0x3c0>
  else if(huart->Instance==USART3)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a22      	ldr	r2, [pc, #136]	@ (80028d8 <HAL_UART_MspInit+0x3d0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d13a      	bne.n	80028c8 <HAL_UART_MspInit+0x3c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002852:	2304      	movs	r3, #4
 8002854:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002856:	2300      	movs	r3, #0
 8002858:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800285a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800285e:	4618      	mov	r0, r3
 8002860:	f001 fc7e 	bl	8004160 <HAL_RCCEx_PeriphCLKConfig>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_UART_MspInit+0x366>
      Error_Handler();
 800286a:	f7ff fdbf 	bl	80023ec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800286e:	4b19      	ldr	r3, [pc, #100]	@ (80028d4 <HAL_UART_MspInit+0x3cc>)
 8002870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002872:	4a18      	ldr	r2, [pc, #96]	@ (80028d4 <HAL_UART_MspInit+0x3cc>)
 8002874:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002878:	6593      	str	r3, [r2, #88]	@ 0x58
 800287a:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <HAL_UART_MspInit+0x3cc>)
 800287c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002886:	4b13      	ldr	r3, [pc, #76]	@ (80028d4 <HAL_UART_MspInit+0x3cc>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800288a:	4a12      	ldr	r2, [pc, #72]	@ (80028d4 <HAL_UART_MspInit+0x3cc>)
 800288c:	f043 0304 	orr.w	r3, r3, #4
 8002890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002892:	4b10      	ldr	r3, [pc, #64]	@ (80028d4 <HAL_UART_MspInit+0x3cc>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800289e:	2330      	movs	r3, #48	@ 0x30
 80028a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b0:	2303      	movs	r3, #3
 80028b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028b6:	2307      	movs	r3, #7
 80028b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028bc:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80028c0:	4619      	mov	r1, r3
 80028c2:	4806      	ldr	r0, [pc, #24]	@ (80028dc <HAL_UART_MspInit+0x3d4>)
 80028c4:	f000 fc26 	bl	8003114 <HAL_GPIO_Init>
}
 80028c8:	bf00      	nop
 80028ca:	37d8      	adds	r7, #216	@ 0xd8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40004400 	.word	0x40004400
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40004800 	.word	0x40004800
 80028dc:	48000800 	.word	0x48000800

080028e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08c      	sub	sp, #48	@ 0x30
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 031c 	add.w	r3, r7, #28
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a2f      	ldr	r2, [pc, #188]	@ (80029bc <HAL_TIM_Encoder_MspInit+0xdc>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d12a      	bne.n	8002958 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002902:	4b2f      	ldr	r3, [pc, #188]	@ (80029c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002906:	4a2e      	ldr	r2, [pc, #184]	@ (80029c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002908:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800290c:	6613      	str	r3, [r2, #96]	@ 0x60
 800290e:	4b2c      	ldr	r3, [pc, #176]	@ (80029c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291a:	4b29      	ldr	r3, [pc, #164]	@ (80029c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291e:	4a28      	ldr	r2, [pc, #160]	@ (80029c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002926:	4b26      	ldr	r3, [pc, #152]	@ (80029c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002932:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002940:	2300      	movs	r3, #0
 8002942:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002944:	2301      	movs	r3, #1
 8002946:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002948:	f107 031c 	add.w	r3, r7, #28
 800294c:	4619      	mov	r1, r3
 800294e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002952:	f000 fbdf 	bl	8003114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002956:	e02d      	b.n	80029b4 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM3)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a19      	ldr	r2, [pc, #100]	@ (80029c4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d128      	bne.n	80029b4 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002962:	4b17      	ldr	r3, [pc, #92]	@ (80029c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002966:	4a16      	ldr	r2, [pc, #88]	@ (80029c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	6593      	str	r3, [r2, #88]	@ 0x58
 800296e:	4b14      	ldr	r3, [pc, #80]	@ (80029c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297a:	4b11      	ldr	r3, [pc, #68]	@ (80029c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800297c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297e:	4a10      	ldr	r2, [pc, #64]	@ (80029c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002986:	4b0e      	ldr	r3, [pc, #56]	@ (80029c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002992:	23c0      	movs	r3, #192	@ 0xc0
 8002994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299e:	2300      	movs	r3, #0
 80029a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029a2:	2302      	movs	r3, #2
 80029a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a6:	f107 031c 	add.w	r3, r7, #28
 80029aa:	4619      	mov	r1, r3
 80029ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029b0:	f000 fbb0 	bl	8003114 <HAL_GPIO_Init>
}
 80029b4:	bf00      	nop
 80029b6:	3730      	adds	r7, #48	@ 0x30
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40000400 	.word	0x40000400

080029c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d8:	d10b      	bne.n	80029f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029da:	4b09      	ldr	r3, [pc, #36]	@ (8002a00 <HAL_TIM_Base_MspInit+0x38>)
 80029dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029de:	4a08      	ldr	r2, [pc, #32]	@ (8002a00 <HAL_TIM_Base_MspInit+0x38>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80029e6:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <HAL_TIM_Base_MspInit+0x38>)
 80029e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	40021000 	.word	0x40021000

08002a04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 030c 	add.w	r3, r7, #12
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a24:	d11c      	bne.n	8002a60 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a26:	4b10      	ldr	r3, [pc, #64]	@ (8002a68 <HAL_TIM_MspPostInit+0x64>)
 8002a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8002a68 <HAL_TIM_MspPostInit+0x64>)
 8002a2c:	f043 0302 	orr.w	r3, r3, #2
 8002a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a32:	4b0d      	ldr	r3, [pc, #52]	@ (8002a68 <HAL_TIM_MspPostInit+0x64>)
 8002a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a3e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a44:	2302      	movs	r3, #2
 8002a46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a50:	2301      	movs	r3, #1
 8002a52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4804      	ldr	r0, [pc, #16]	@ (8002a6c <HAL_TIM_MspPostInit+0x68>)
 8002a5c:	f000 fb5a 	bl	8003114 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a60:	bf00      	nop
 8002a62:	3720      	adds	r7, #32
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	48000400 	.word	0x48000400

08002a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a74:	bf00      	nop
 8002a76:	e7fd      	b.n	8002a74 <NMI_Handler+0x4>

08002a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <HardFault_Handler+0x4>

08002a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a84:	bf00      	nop
 8002a86:	e7fd      	b.n	8002a84 <MemManage_Handler+0x4>

08002a88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a8c:	bf00      	nop
 8002a8e:	e7fd      	b.n	8002a8c <BusFault_Handler+0x4>

08002a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a94:	bf00      	nop
 8002a96:	e7fd      	b.n	8002a94 <UsageFault_Handler+0x4>

08002a98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ac6:	f000 f975 	bl	8002db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002ad4:	4802      	ldr	r0, [pc, #8]	@ (8002ae0 <UART4_IRQHandler+0x10>)
 8002ad6:	f003 fab7 	bl	8006048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000284 	.word	0x20000284

08002ae4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002ae8:	4802      	ldr	r0, [pc, #8]	@ (8002af4 <LPUART1_IRQHandler+0x10>)
 8002aea:	f003 faad 	bl	8006048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200001fc 	.word	0x200001fc

08002af8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return 1;
 8002afc:	2301      	movs	r3, #1
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_kill>:

int _kill(int pid, int sig)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b12:	f005 fccf 	bl	80084b4 <__errno>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2216      	movs	r2, #22
 8002b1a:	601a      	str	r2, [r3, #0]
  return -1;
 8002b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_exit>:

void _exit (int status)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b30:	f04f 31ff 	mov.w	r1, #4294967295
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ffe7 	bl	8002b08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b3a:	bf00      	nop
 8002b3c:	e7fd      	b.n	8002b3a <_exit+0x12>

08002b3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b086      	sub	sp, #24
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	e00a      	b.n	8002b66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b50:	f3af 8000 	nop.w
 8002b54:	4601      	mov	r1, r0
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	60ba      	str	r2, [r7, #8]
 8002b5c:	b2ca      	uxtb	r2, r1
 8002b5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	3301      	adds	r3, #1
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	dbf0      	blt.n	8002b50 <_read+0x12>
  }

  return len;
 8002b6e:	687b      	ldr	r3, [r7, #4]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	e009      	b.n	8002b9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	60ba      	str	r2, [r7, #8]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe f9d0 	bl	8000f38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	dbf1      	blt.n	8002b8a <_write+0x12>
  }
  return len;
 8002ba6:	687b      	ldr	r3, [r7, #4]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <_close>:

int _close(int file)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bd8:	605a      	str	r2, [r3, #4]
  return 0;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <_isatty>:

int _isatty(int file)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bf0:	2301      	movs	r3, #1
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b085      	sub	sp, #20
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c20:	4a14      	ldr	r2, [pc, #80]	@ (8002c74 <_sbrk+0x5c>)
 8002c22:	4b15      	ldr	r3, [pc, #84]	@ (8002c78 <_sbrk+0x60>)
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c2c:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <_sbrk+0x64>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d102      	bne.n	8002c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c34:	4b11      	ldr	r3, [pc, #68]	@ (8002c7c <_sbrk+0x64>)
 8002c36:	4a12      	ldr	r2, [pc, #72]	@ (8002c80 <_sbrk+0x68>)
 8002c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c3a:	4b10      	ldr	r3, [pc, #64]	@ (8002c7c <_sbrk+0x64>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d207      	bcs.n	8002c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c48:	f005 fc34 	bl	80084b4 <__errno>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	220c      	movs	r2, #12
 8002c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
 8002c56:	e009      	b.n	8002c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c58:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <_sbrk+0x64>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c5e:	4b07      	ldr	r3, [pc, #28]	@ (8002c7c <_sbrk+0x64>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	4a05      	ldr	r2, [pc, #20]	@ (8002c7c <_sbrk+0x64>)
 8002c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	20018000 	.word	0x20018000
 8002c78:	00000400 	.word	0x00000400
 8002c7c:	20000674 	.word	0x20000674
 8002c80:	200007c8 	.word	0x200007c8

08002c84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c88:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <SystemInit+0x20>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ca4 <SystemInit+0x20>)
 8002c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ce0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cac:	f7ff ffea 	bl	8002c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cb0:	480c      	ldr	r0, [pc, #48]	@ (8002ce4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cb2:	490d      	ldr	r1, [pc, #52]	@ (8002ce8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cec <LoopForever+0xe>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb8:	e002      	b.n	8002cc0 <LoopCopyDataInit>

08002cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cbe:	3304      	adds	r3, #4

08002cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc4:	d3f9      	bcc.n	8002cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8002cf4 <LoopForever+0x16>)
  movs r3, #0
 8002cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ccc:	e001      	b.n	8002cd2 <LoopFillZerobss>

08002cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd0:	3204      	adds	r2, #4

08002cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd4:	d3fb      	bcc.n	8002cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cd6:	f005 fbf3 	bl	80084c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cda:	f7fe f941 	bl	8000f60 <main>

08002cde <LoopForever>:

LoopForever:
    b LoopForever
 8002cde:	e7fe      	b.n	8002cde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ce0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002cec:	0800b8c8 	.word	0x0800b8c8
  ldr r2, =_sbss
 8002cf0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002cf4:	200007c8 	.word	0x200007c8

08002cf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cf8:	e7fe      	b.n	8002cf8 <ADC1_2_IRQHandler>
	...

08002cfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d06:	4b0c      	ldr	r3, [pc, #48]	@ (8002d38 <HAL_Init+0x3c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002d38 <HAL_Init+0x3c>)
 8002d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d10:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d12:	2003      	movs	r0, #3
 8002d14:	f000 f93e 	bl	8002f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f000 f80f 	bl	8002d3c <HAL_InitTick>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	71fb      	strb	r3, [r7, #7]
 8002d28:	e001      	b.n	8002d2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d2a:	f7ff fbc9 	bl	80024c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40022000 	.word	0x40022000

08002d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d48:	4b17      	ldr	r3, [pc, #92]	@ (8002da8 <HAL_InitTick+0x6c>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d023      	beq.n	8002d98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d50:	4b16      	ldr	r3, [pc, #88]	@ (8002dac <HAL_InitTick+0x70>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b14      	ldr	r3, [pc, #80]	@ (8002da8 <HAL_InitTick+0x6c>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 f949 	bl	8002ffe <HAL_SYSTICK_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10f      	bne.n	8002d92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b0f      	cmp	r3, #15
 8002d76:	d809      	bhi.n	8002d8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d80:	f000 f913 	bl	8002faa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d84:	4a0a      	ldr	r2, [pc, #40]	@ (8002db0 <HAL_InitTick+0x74>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e007      	b.n	8002d9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
 8002d90:	e004      	b.n	8002d9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	73fb      	strb	r3, [r7, #15]
 8002d96:	e001      	b.n	8002d9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000014 	.word	0x20000014
 8002dac:	2000000c 	.word	0x2000000c
 8002db0:	20000010 	.word	0x20000010

08002db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002db8:	4b06      	ldr	r3, [pc, #24]	@ (8002dd4 <HAL_IncTick+0x20>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <HAL_IncTick+0x24>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	4a04      	ldr	r2, [pc, #16]	@ (8002dd8 <HAL_IncTick+0x24>)
 8002dc6:	6013      	str	r3, [r2, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000014 	.word	0x20000014
 8002dd8:	20000678 	.word	0x20000678

08002ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return uwTick;
 8002de0:	4b03      	ldr	r3, [pc, #12]	@ (8002df0 <HAL_GetTick+0x14>)
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000678 	.word	0x20000678

08002df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e04:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e10:	4013      	ands	r3, r2
 8002e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e26:	4a04      	ldr	r2, [pc, #16]	@ (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	60d3      	str	r3, [r2, #12]
}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e40:	4b04      	ldr	r3, [pc, #16]	@ (8002e54 <__NVIC_GetPriorityGrouping+0x18>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	f003 0307 	and.w	r3, r3, #7
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	db0b      	blt.n	8002e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	4907      	ldr	r1, [pc, #28]	@ (8002e90 <__NVIC_EnableIRQ+0x38>)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2001      	movs	r0, #1
 8002e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000e100 	.word	0xe000e100

08002e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	6039      	str	r1, [r7, #0]
 8002e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	db0a      	blt.n	8002ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	490c      	ldr	r1, [pc, #48]	@ (8002ee0 <__NVIC_SetPriority+0x4c>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	0112      	lsls	r2, r2, #4
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ebc:	e00a      	b.n	8002ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4908      	ldr	r1, [pc, #32]	@ (8002ee4 <__NVIC_SetPriority+0x50>)
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	3b04      	subs	r3, #4
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	761a      	strb	r2, [r3, #24]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000e100 	.word	0xe000e100
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	@ 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f1c3 0307 	rsb	r3, r3, #7
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	bf28      	it	cs
 8002f06:	2304      	movcs	r3, #4
 8002f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d902      	bls.n	8002f18 <NVIC_EncodePriority+0x30>
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3b03      	subs	r3, #3
 8002f16:	e000      	b.n	8002f1a <NVIC_EncodePriority+0x32>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43da      	mvns	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f30:	f04f 31ff 	mov.w	r1, #4294967295
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	43d9      	mvns	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	4313      	orrs	r3, r2
         );
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3724      	adds	r7, #36	@ 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f60:	d301      	bcc.n	8002f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00f      	b.n	8002f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f66:	4a0a      	ldr	r2, [pc, #40]	@ (8002f90 <SysTick_Config+0x40>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f6e:	210f      	movs	r1, #15
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f7ff ff8e 	bl	8002e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <SysTick_Config+0x40>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f7e:	4b04      	ldr	r3, [pc, #16]	@ (8002f90 <SysTick_Config+0x40>)
 8002f80:	2207      	movs	r2, #7
 8002f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	e000e010 	.word	0xe000e010

08002f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff29 	bl	8002df4 <__NVIC_SetPriorityGrouping>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fbc:	f7ff ff3e 	bl	8002e3c <__NVIC_GetPriorityGrouping>
 8002fc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	6978      	ldr	r0, [r7, #20]
 8002fc8:	f7ff ff8e 	bl	8002ee8 <NVIC_EncodePriority>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff5d 	bl	8002e94 <__NVIC_SetPriority>
}
 8002fda:	bf00      	nop
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	4603      	mov	r3, r0
 8002fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff31 	bl	8002e58 <__NVIC_EnableIRQ>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ffa2 	bl	8002f50 <SysTick_Config>
 800300c:	4603      	mov	r3, r0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003016:	b480      	push	{r7}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d008      	beq.n	8003040 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2204      	movs	r2, #4
 8003032:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e022      	b.n	8003086 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 020e 	bic.w	r2, r2, #14
 800304e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0201 	bic.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003064:	f003 021c 	and.w	r2, r3, #28
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	2101      	movs	r1, #1
 800306e:	fa01 f202 	lsl.w	r2, r1, r2
 8003072:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003084:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d005      	beq.n	80030b6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2204      	movs	r2, #4
 80030ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
 80030b4:	e029      	b.n	800310a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 020e 	bic.w	r2, r2, #14
 80030c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0201 	bic.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030da:	f003 021c 	and.w	r2, r3, #28
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e2:	2101      	movs	r1, #1
 80030e4:	fa01 f202 	lsl.w	r2, r1, r2
 80030e8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	4798      	blx	r3
    }
  }
  return status;
 800310a:	7bfb      	ldrb	r3, [r7, #15]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003122:	e17f      	b.n	8003424 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	2101      	movs	r1, #1
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	fa01 f303 	lsl.w	r3, r1, r3
 8003130:	4013      	ands	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8171 	beq.w	800341e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d005      	beq.n	8003154 <HAL_GPIO_Init+0x40>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d130      	bne.n	80031b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	2203      	movs	r2, #3
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4013      	ands	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800318a:	2201      	movs	r2, #1
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43db      	mvns	r3, r3
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4013      	ands	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f003 0201 	and.w	r2, r3, #1
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d118      	bne.n	80031f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80031c8:	2201      	movs	r2, #1
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	08db      	lsrs	r3, r3, #3
 80031de:	f003 0201 	and.w	r2, r3, #1
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d017      	beq.n	8003230 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	2203      	movs	r2, #3
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d123      	bne.n	8003284 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	08da      	lsrs	r2, r3, #3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3208      	adds	r2, #8
 8003244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003248:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	220f      	movs	r2, #15
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	08da      	lsrs	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3208      	adds	r2, #8
 800327e:	6939      	ldr	r1, [r7, #16]
 8003280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	2203      	movs	r2, #3
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	43db      	mvns	r3, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 0203 	and.w	r2, r3, #3
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80ac 	beq.w	800341e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003444 <HAL_GPIO_Init+0x330>)
 80032c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ca:	4a5e      	ldr	r2, [pc, #376]	@ (8003444 <HAL_GPIO_Init+0x330>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80032d2:	4b5c      	ldr	r3, [pc, #368]	@ (8003444 <HAL_GPIO_Init+0x330>)
 80032d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032de:	4a5a      	ldr	r2, [pc, #360]	@ (8003448 <HAL_GPIO_Init+0x334>)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	089b      	lsrs	r3, r3, #2
 80032e4:	3302      	adds	r3, #2
 80032e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	220f      	movs	r2, #15
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4013      	ands	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003308:	d025      	beq.n	8003356 <HAL_GPIO_Init+0x242>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a4f      	ldr	r2, [pc, #316]	@ (800344c <HAL_GPIO_Init+0x338>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d01f      	beq.n	8003352 <HAL_GPIO_Init+0x23e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a4e      	ldr	r2, [pc, #312]	@ (8003450 <HAL_GPIO_Init+0x33c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d019      	beq.n	800334e <HAL_GPIO_Init+0x23a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a4d      	ldr	r2, [pc, #308]	@ (8003454 <HAL_GPIO_Init+0x340>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d013      	beq.n	800334a <HAL_GPIO_Init+0x236>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a4c      	ldr	r2, [pc, #304]	@ (8003458 <HAL_GPIO_Init+0x344>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00d      	beq.n	8003346 <HAL_GPIO_Init+0x232>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a4b      	ldr	r2, [pc, #300]	@ (800345c <HAL_GPIO_Init+0x348>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d007      	beq.n	8003342 <HAL_GPIO_Init+0x22e>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a4a      	ldr	r2, [pc, #296]	@ (8003460 <HAL_GPIO_Init+0x34c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d101      	bne.n	800333e <HAL_GPIO_Init+0x22a>
 800333a:	2306      	movs	r3, #6
 800333c:	e00c      	b.n	8003358 <HAL_GPIO_Init+0x244>
 800333e:	2307      	movs	r3, #7
 8003340:	e00a      	b.n	8003358 <HAL_GPIO_Init+0x244>
 8003342:	2305      	movs	r3, #5
 8003344:	e008      	b.n	8003358 <HAL_GPIO_Init+0x244>
 8003346:	2304      	movs	r3, #4
 8003348:	e006      	b.n	8003358 <HAL_GPIO_Init+0x244>
 800334a:	2303      	movs	r3, #3
 800334c:	e004      	b.n	8003358 <HAL_GPIO_Init+0x244>
 800334e:	2302      	movs	r3, #2
 8003350:	e002      	b.n	8003358 <HAL_GPIO_Init+0x244>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <HAL_GPIO_Init+0x244>
 8003356:	2300      	movs	r3, #0
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	f002 0203 	and.w	r2, r2, #3
 800335e:	0092      	lsls	r2, r2, #2
 8003360:	4093      	lsls	r3, r2
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003368:	4937      	ldr	r1, [pc, #220]	@ (8003448 <HAL_GPIO_Init+0x334>)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	089b      	lsrs	r3, r3, #2
 800336e:	3302      	adds	r3, #2
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003376:	4b3b      	ldr	r3, [pc, #236]	@ (8003464 <HAL_GPIO_Init+0x350>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	43db      	mvns	r3, r3
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4013      	ands	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800339a:	4a32      	ldr	r2, [pc, #200]	@ (8003464 <HAL_GPIO_Init+0x350>)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033a0:	4b30      	ldr	r3, [pc, #192]	@ (8003464 <HAL_GPIO_Init+0x350>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	43db      	mvns	r3, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033c4:	4a27      	ldr	r2, [pc, #156]	@ (8003464 <HAL_GPIO_Init+0x350>)
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033ca:	4b26      	ldr	r3, [pc, #152]	@ (8003464 <HAL_GPIO_Init+0x350>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4013      	ands	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003464 <HAL_GPIO_Init+0x350>)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003464 <HAL_GPIO_Init+0x350>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4013      	ands	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003418:	4a12      	ldr	r2, [pc, #72]	@ (8003464 <HAL_GPIO_Init+0x350>)
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	3301      	adds	r3, #1
 8003422:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	fa22 f303 	lsr.w	r3, r2, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	f47f ae78 	bne.w	8003124 <HAL_GPIO_Init+0x10>
  }
}
 8003434:	bf00      	nop
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40021000 	.word	0x40021000
 8003448:	40010000 	.word	0x40010000
 800344c:	48000400 	.word	0x48000400
 8003450:	48000800 	.word	0x48000800
 8003454:	48000c00 	.word	0x48000c00
 8003458:	48001000 	.word	0x48001000
 800345c:	48001400 	.word	0x48001400
 8003460:	48001800 	.word	0x48001800
 8003464:	40010400 	.word	0x40010400

08003468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	807b      	strh	r3, [r7, #2]
 8003474:	4613      	mov	r3, r2
 8003476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003478:	787b      	ldrb	r3, [r7, #1]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800347e:	887a      	ldrh	r2, [r7, #2]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003484:	e002      	b.n	800348c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003486:	887a      	ldrh	r2, [r7, #2]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800349c:	4b04      	ldr	r3, [pc, #16]	@ (80034b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40007000 	.word	0x40007000

080034b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034c2:	d130      	bne.n	8003526 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80034c4:	4b23      	ldr	r3, [pc, #140]	@ (8003554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034d0:	d038      	beq.n	8003544 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034d2:	4b20      	ldr	r3, [pc, #128]	@ (8003554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034da:	4a1e      	ldr	r2, [pc, #120]	@ (8003554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2232      	movs	r2, #50	@ 0x32
 80034e8:	fb02 f303 	mul.w	r3, r2, r3
 80034ec:	4a1b      	ldr	r2, [pc, #108]	@ (800355c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	0c9b      	lsrs	r3, r3, #18
 80034f4:	3301      	adds	r3, #1
 80034f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034f8:	e002      	b.n	8003500 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003500:	4b14      	ldr	r3, [pc, #80]	@ (8003554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800350c:	d102      	bne.n	8003514 <HAL_PWREx_ControlVoltageScaling+0x60>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f2      	bne.n	80034fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003514:	4b0f      	ldr	r3, [pc, #60]	@ (8003554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800351c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003520:	d110      	bne.n	8003544 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e00f      	b.n	8003546 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003526:	4b0b      	ldr	r3, [pc, #44]	@ (8003554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800352e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003532:	d007      	beq.n	8003544 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003534:	4b07      	ldr	r3, [pc, #28]	@ (8003554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800353c:	4a05      	ldr	r2, [pc, #20]	@ (8003554 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800353e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003542:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40007000 	.word	0x40007000
 8003558:	2000000c 	.word	0x2000000c
 800355c:	431bde83 	.word	0x431bde83

08003560 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e3ca      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003572:	4b97      	ldr	r3, [pc, #604]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800357c:	4b94      	ldr	r3, [pc, #592]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 80e4 	beq.w	800375c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <HAL_RCC_OscConfig+0x4a>
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b0c      	cmp	r3, #12
 800359e:	f040 808b 	bne.w	80036b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	f040 8087 	bne.w	80036b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035aa:	4b89      	ldr	r3, [pc, #548]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <HAL_RCC_OscConfig+0x62>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e3a2      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1a      	ldr	r2, [r3, #32]
 80035c6:	4b82      	ldr	r3, [pc, #520]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d004      	beq.n	80035dc <HAL_RCC_OscConfig+0x7c>
 80035d2:	4b7f      	ldr	r3, [pc, #508]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035da:	e005      	b.n	80035e8 <HAL_RCC_OscConfig+0x88>
 80035dc:	4b7c      	ldr	r3, [pc, #496]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 80035de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d223      	bcs.n	8003634 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fd55 	bl	80040a0 <RCC_SetFlashLatencyFromMSIRange>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e383      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003600:	4b73      	ldr	r3, [pc, #460]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a72      	ldr	r2, [pc, #456]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 8003606:	f043 0308 	orr.w	r3, r3, #8
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b70      	ldr	r3, [pc, #448]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	496d      	ldr	r1, [pc, #436]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 800361a:	4313      	orrs	r3, r2
 800361c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800361e:	4b6c      	ldr	r3, [pc, #432]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	021b      	lsls	r3, r3, #8
 800362c:	4968      	ldr	r1, [pc, #416]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 800362e:	4313      	orrs	r3, r2
 8003630:	604b      	str	r3, [r1, #4]
 8003632:	e025      	b.n	8003680 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003634:	4b66      	ldr	r3, [pc, #408]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a65      	ldr	r2, [pc, #404]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 800363a:	f043 0308 	orr.w	r3, r3, #8
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	4b63      	ldr	r3, [pc, #396]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	4960      	ldr	r1, [pc, #384]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003652:	4b5f      	ldr	r3, [pc, #380]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	495b      	ldr	r1, [pc, #364]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 8003662:	4313      	orrs	r3, r2
 8003664:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d109      	bne.n	8003680 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fd15 	bl	80040a0 <RCC_SetFlashLatencyFromMSIRange>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e343      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003680:	f000 fc4a 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b52      	ldr	r3, [pc, #328]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	4950      	ldr	r1, [pc, #320]	@ (80037d4 <HAL_RCC_OscConfig+0x274>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
 800369c:	4a4e      	ldr	r2, [pc, #312]	@ (80037d8 <HAL_RCC_OscConfig+0x278>)
 800369e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036a0:	4b4e      	ldr	r3, [pc, #312]	@ (80037dc <HAL_RCC_OscConfig+0x27c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fb49 	bl	8002d3c <HAL_InitTick>
 80036aa:	4603      	mov	r3, r0
 80036ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d052      	beq.n	800375a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	e327      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d032      	beq.n	8003726 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036c0:	4b43      	ldr	r3, [pc, #268]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a42      	ldr	r2, [pc, #264]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036cc:	f7ff fb86 	bl	8002ddc <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036d4:	f7ff fb82 	bl	8002ddc <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e310      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036e6:	4b3a      	ldr	r3, [pc, #232]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036f2:	4b37      	ldr	r3, [pc, #220]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a36      	ldr	r2, [pc, #216]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 80036f8:	f043 0308 	orr.w	r3, r3, #8
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	4b34      	ldr	r3, [pc, #208]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	4931      	ldr	r1, [pc, #196]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 800370c:	4313      	orrs	r3, r2
 800370e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003710:	4b2f      	ldr	r3, [pc, #188]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	492c      	ldr	r1, [pc, #176]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]
 8003724:	e01a      	b.n	800375c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003726:	4b2a      	ldr	r3, [pc, #168]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a29      	ldr	r2, [pc, #164]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003732:	f7ff fb53 	bl	8002ddc <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800373a:	f7ff fb4f 	bl	8002ddc <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e2dd      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800374c:	4b20      	ldr	r3, [pc, #128]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f0      	bne.n	800373a <HAL_RCC_OscConfig+0x1da>
 8003758:	e000      	b.n	800375c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800375a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d074      	beq.n	8003852 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	2b08      	cmp	r3, #8
 800376c:	d005      	beq.n	800377a <HAL_RCC_OscConfig+0x21a>
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b0c      	cmp	r3, #12
 8003772:	d10e      	bne.n	8003792 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d10b      	bne.n	8003792 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800377a:	4b15      	ldr	r3, [pc, #84]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d064      	beq.n	8003850 <HAL_RCC_OscConfig+0x2f0>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d160      	bne.n	8003850 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e2ba      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800379a:	d106      	bne.n	80037aa <HAL_RCC_OscConfig+0x24a>
 800379c:	4b0c      	ldr	r3, [pc, #48]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a0b      	ldr	r2, [pc, #44]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 80037a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	e026      	b.n	80037f8 <HAL_RCC_OscConfig+0x298>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037b2:	d115      	bne.n	80037e0 <HAL_RCC_OscConfig+0x280>
 80037b4:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a05      	ldr	r2, [pc, #20]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 80037ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a02      	ldr	r2, [pc, #8]	@ (80037d0 <HAL_RCC_OscConfig+0x270>)
 80037c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	e014      	b.n	80037f8 <HAL_RCC_OscConfig+0x298>
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
 80037d4:	0800b130 	.word	0x0800b130
 80037d8:	2000000c 	.word	0x2000000c
 80037dc:	20000010 	.word	0x20000010
 80037e0:	4ba0      	ldr	r3, [pc, #640]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a9f      	ldr	r2, [pc, #636]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 80037e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	4b9d      	ldr	r3, [pc, #628]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a9c      	ldr	r2, [pc, #624]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 80037f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d013      	beq.n	8003828 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7ff faec 	bl	8002ddc <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003808:	f7ff fae8 	bl	8002ddc <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	@ 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e276      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800381a:	4b92      	ldr	r3, [pc, #584]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0x2a8>
 8003826:	e014      	b.n	8003852 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003828:	f7ff fad8 	bl	8002ddc <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003830:	f7ff fad4 	bl	8002ddc <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b64      	cmp	r3, #100	@ 0x64
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e262      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003842:	4b88      	ldr	r3, [pc, #544]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x2d0>
 800384e:	e000      	b.n	8003852 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0302 	and.w	r3, r3, #2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d060      	beq.n	8003920 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2b04      	cmp	r3, #4
 8003862:	d005      	beq.n	8003870 <HAL_RCC_OscConfig+0x310>
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d119      	bne.n	800389e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d116      	bne.n	800389e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003870:	4b7c      	ldr	r3, [pc, #496]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_RCC_OscConfig+0x328>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e23f      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003888:	4b76      	ldr	r3, [pc, #472]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	061b      	lsls	r3, r3, #24
 8003896:	4973      	ldr	r1, [pc, #460]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 8003898:	4313      	orrs	r3, r2
 800389a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800389c:	e040      	b.n	8003920 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d023      	beq.n	80038ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a6:	4b6f      	ldr	r3, [pc, #444]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a6e      	ldr	r2, [pc, #440]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 80038ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7ff fa93 	bl	8002ddc <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ba:	f7ff fa8f 	bl	8002ddc <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e21d      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038cc:	4b65      	ldr	r3, [pc, #404]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d8:	4b62      	ldr	r3, [pc, #392]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	061b      	lsls	r3, r3, #24
 80038e6:	495f      	ldr	r1, [pc, #380]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	604b      	str	r3, [r1, #4]
 80038ec:	e018      	b.n	8003920 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a5c      	ldr	r2, [pc, #368]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 80038f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fa:	f7ff fa6f 	bl	8002ddc <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003902:	f7ff fa6b 	bl	8002ddc <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e1f9      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003914:	4b53      	ldr	r3, [pc, #332]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f0      	bne.n	8003902 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d03c      	beq.n	80039a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01c      	beq.n	800396e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003934:	4b4b      	ldr	r3, [pc, #300]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 8003936:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800393a:	4a4a      	ldr	r2, [pc, #296]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003944:	f7ff fa4a 	bl	8002ddc <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800394c:	f7ff fa46 	bl	8002ddc <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e1d4      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800395e:	4b41      	ldr	r3, [pc, #260]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 8003960:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ef      	beq.n	800394c <HAL_RCC_OscConfig+0x3ec>
 800396c:	e01b      	b.n	80039a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800396e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 8003970:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003974:	4a3b      	ldr	r2, [pc, #236]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 8003976:	f023 0301 	bic.w	r3, r3, #1
 800397a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397e:	f7ff fa2d 	bl	8002ddc <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003986:	f7ff fa29 	bl	8002ddc <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e1b7      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003998:	4b32      	ldr	r3, [pc, #200]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 800399a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1ef      	bne.n	8003986 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80a6 	beq.w	8003b00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b4:	2300      	movs	r3, #0
 80039b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 80039ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10d      	bne.n	80039e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c4:	4b27      	ldr	r3, [pc, #156]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 80039c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c8:	4a26      	ldr	r2, [pc, #152]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 80039ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80039d0:	4b24      	ldr	r3, [pc, #144]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 80039d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039dc:	2301      	movs	r3, #1
 80039de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e0:	4b21      	ldr	r3, [pc, #132]	@ (8003a68 <HAL_RCC_OscConfig+0x508>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d118      	bne.n	8003a1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003a68 <HAL_RCC_OscConfig+0x508>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003a68 <HAL_RCC_OscConfig+0x508>)
 80039f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039f8:	f7ff f9f0 	bl	8002ddc <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a00:	f7ff f9ec 	bl	8002ddc <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e17a      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a12:	4b15      	ldr	r3, [pc, #84]	@ (8003a68 <HAL_RCC_OscConfig+0x508>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d108      	bne.n	8003a38 <HAL_RCC_OscConfig+0x4d8>
 8003a26:	4b0f      	ldr	r3, [pc, #60]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a36:	e029      	b.n	8003a8c <HAL_RCC_OscConfig+0x52c>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b05      	cmp	r3, #5
 8003a3e:	d115      	bne.n	8003a6c <HAL_RCC_OscConfig+0x50c>
 8003a40:	4b08      	ldr	r3, [pc, #32]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a46:	4a07      	ldr	r2, [pc, #28]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 8003a48:	f043 0304 	orr.w	r3, r3, #4
 8003a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a50:	4b04      	ldr	r3, [pc, #16]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a56:	4a03      	ldr	r2, [pc, #12]	@ (8003a64 <HAL_RCC_OscConfig+0x504>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a60:	e014      	b.n	8003a8c <HAL_RCC_OscConfig+0x52c>
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40007000 	.word	0x40007000
 8003a6c:	4b9c      	ldr	r3, [pc, #624]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a72:	4a9b      	ldr	r2, [pc, #620]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003a74:	f023 0301 	bic.w	r3, r3, #1
 8003a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a7c:	4b98      	ldr	r3, [pc, #608]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a82:	4a97      	ldr	r2, [pc, #604]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003a84:	f023 0304 	bic.w	r3, r3, #4
 8003a88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d016      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a94:	f7ff f9a2 	bl	8002ddc <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9c:	f7ff f99e 	bl	8002ddc <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e12a      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab2:	4b8b      	ldr	r3, [pc, #556]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0ed      	beq.n	8003a9c <HAL_RCC_OscConfig+0x53c>
 8003ac0:	e015      	b.n	8003aee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac2:	f7ff f98b 	bl	8002ddc <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ac8:	e00a      	b.n	8003ae0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7ff f987 	bl	8002ddc <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e113      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ae0:	4b7f      	ldr	r3, [pc, #508]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1ed      	bne.n	8003aca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aee:	7ffb      	ldrb	r3, [r7, #31]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d105      	bne.n	8003b00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af4:	4b7a      	ldr	r3, [pc, #488]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af8:	4a79      	ldr	r2, [pc, #484]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003afa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003afe:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80fe 	beq.w	8003d06 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	f040 80d0 	bne.w	8003cb4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b14:	4b72      	ldr	r3, [pc, #456]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f003 0203 	and.w	r2, r3, #3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d130      	bne.n	8003b8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b32:	3b01      	subs	r3, #1
 8003b34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d127      	bne.n	8003b8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b44:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d11f      	bne.n	8003b8a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b54:	2a07      	cmp	r2, #7
 8003b56:	bf14      	ite	ne
 8003b58:	2201      	movne	r2, #1
 8003b5a:	2200      	moveq	r2, #0
 8003b5c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d113      	bne.n	8003b8a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6c:	085b      	lsrs	r3, r3, #1
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d109      	bne.n	8003b8a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	3b01      	subs	r3, #1
 8003b84:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d06e      	beq.n	8003c68 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	2b0c      	cmp	r3, #12
 8003b8e:	d069      	beq.n	8003c64 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b90:	4b53      	ldr	r3, [pc, #332]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d105      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b9c:	4b50      	ldr	r3, [pc, #320]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0ad      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bac:	4b4c      	ldr	r3, [pc, #304]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a4b      	ldr	r2, [pc, #300]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003bb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bb6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bb8:	f7ff f910 	bl	8002ddc <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc0:	f7ff f90c 	bl	8002ddc <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e09a      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd2:	4b43      	ldr	r3, [pc, #268]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bde:	4b40      	ldr	r3, [pc, #256]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	4b40      	ldr	r3, [pc, #256]	@ (8003ce4 <HAL_RCC_OscConfig+0x784>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003bee:	3a01      	subs	r2, #1
 8003bf0:	0112      	lsls	r2, r2, #4
 8003bf2:	4311      	orrs	r1, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003bf8:	0212      	lsls	r2, r2, #8
 8003bfa:	4311      	orrs	r1, r2
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c00:	0852      	lsrs	r2, r2, #1
 8003c02:	3a01      	subs	r2, #1
 8003c04:	0552      	lsls	r2, r2, #21
 8003c06:	4311      	orrs	r1, r2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c0c:	0852      	lsrs	r2, r2, #1
 8003c0e:	3a01      	subs	r2, #1
 8003c10:	0652      	lsls	r2, r2, #25
 8003c12:	4311      	orrs	r1, r2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c18:	0912      	lsrs	r2, r2, #4
 8003c1a:	0452      	lsls	r2, r2, #17
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	4930      	ldr	r1, [pc, #192]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c24:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a2d      	ldr	r2, [pc, #180]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003c2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c30:	4b2b      	ldr	r3, [pc, #172]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003c36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c3c:	f7ff f8ce 	bl	8002ddc <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c44:	f7ff f8ca 	bl	8002ddc <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e058      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c56:	4b22      	ldr	r3, [pc, #136]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c62:	e050      	b.n	8003d06 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e04f      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d148      	bne.n	8003d06 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c74:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a19      	ldr	r2, [pc, #100]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c80:	4b17      	ldr	r3, [pc, #92]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4a16      	ldr	r2, [pc, #88]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003c86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c8c:	f7ff f8a6 	bl	8002ddc <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c94:	f7ff f8a2 	bl	8002ddc <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e030      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCC_OscConfig+0x734>
 8003cb2:	e028      	b.n	8003d06 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	2b0c      	cmp	r3, #12
 8003cb8:	d023      	beq.n	8003d02 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cba:	4b09      	ldr	r3, [pc, #36]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a08      	ldr	r2, [pc, #32]	@ (8003ce0 <HAL_RCC_OscConfig+0x780>)
 8003cc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc6:	f7ff f889 	bl	8002ddc <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ccc:	e00c      	b.n	8003ce8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cce:	f7ff f885 	bl	8002ddc <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d905      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e013      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ce8:	4b09      	ldr	r3, [pc, #36]	@ (8003d10 <HAL_RCC_OscConfig+0x7b0>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1ec      	bne.n	8003cce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003cf4:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <HAL_RCC_OscConfig+0x7b0>)
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	4905      	ldr	r1, [pc, #20]	@ (8003d10 <HAL_RCC_OscConfig+0x7b0>)
 8003cfa:	4b06      	ldr	r3, [pc, #24]	@ (8003d14 <HAL_RCC_OscConfig+0x7b4>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60cb      	str	r3, [r1, #12]
 8003d00:	e001      	b.n	8003d06 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3720      	adds	r7, #32
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	feeefffc 	.word	0xfeeefffc

08003d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0e7      	b.n	8003efc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b75      	ldr	r3, [pc, #468]	@ (8003f04 <HAL_RCC_ClockConfig+0x1ec>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d910      	bls.n	8003d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b72      	ldr	r3, [pc, #456]	@ (8003f04 <HAL_RCC_ClockConfig+0x1ec>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 0207 	bic.w	r2, r3, #7
 8003d42:	4970      	ldr	r1, [pc, #448]	@ (8003f04 <HAL_RCC_ClockConfig+0x1ec>)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b6e      	ldr	r3, [pc, #440]	@ (8003f04 <HAL_RCC_ClockConfig+0x1ec>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0cf      	b.n	8003efc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d010      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	4b66      	ldr	r3, [pc, #408]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d908      	bls.n	8003d8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d78:	4b63      	ldr	r3, [pc, #396]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4960      	ldr	r1, [pc, #384]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d04c      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d107      	bne.n	8003dae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d9e:	4b5a      	ldr	r3, [pc, #360]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d121      	bne.n	8003dee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e0a6      	b.n	8003efc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d107      	bne.n	8003dc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db6:	4b54      	ldr	r3, [pc, #336]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d115      	bne.n	8003dee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e09a      	b.n	8003efc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d107      	bne.n	8003dde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dce:	4b4e      	ldr	r3, [pc, #312]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e08e      	b.n	8003efc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dde:	4b4a      	ldr	r3, [pc, #296]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e086      	b.n	8003efc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dee:	4b46      	ldr	r3, [pc, #280]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f023 0203 	bic.w	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4943      	ldr	r1, [pc, #268]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e00:	f7fe ffec 	bl	8002ddc <HAL_GetTick>
 8003e04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e06:	e00a      	b.n	8003e1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e08:	f7fe ffe8 	bl	8002ddc <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e06e      	b.n	8003efc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1e:	4b3a      	ldr	r3, [pc, #232]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 020c 	and.w	r2, r3, #12
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d1eb      	bne.n	8003e08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d010      	beq.n	8003e5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	4b31      	ldr	r3, [pc, #196]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d208      	bcs.n	8003e5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e4c:	4b2e      	ldr	r3, [pc, #184]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	492b      	ldr	r1, [pc, #172]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e5e:	4b29      	ldr	r3, [pc, #164]	@ (8003f04 <HAL_RCC_ClockConfig+0x1ec>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0307 	and.w	r3, r3, #7
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d210      	bcs.n	8003e8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6c:	4b25      	ldr	r3, [pc, #148]	@ (8003f04 <HAL_RCC_ClockConfig+0x1ec>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f023 0207 	bic.w	r2, r3, #7
 8003e74:	4923      	ldr	r1, [pc, #140]	@ (8003f04 <HAL_RCC_ClockConfig+0x1ec>)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7c:	4b21      	ldr	r3, [pc, #132]	@ (8003f04 <HAL_RCC_ClockConfig+0x1ec>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d001      	beq.n	8003e8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e036      	b.n	8003efc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d008      	beq.n	8003eac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	4918      	ldr	r1, [pc, #96]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d009      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eb8:	4b13      	ldr	r3, [pc, #76]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4910      	ldr	r1, [pc, #64]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ecc:	f000 f824 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f08 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	091b      	lsrs	r3, r3, #4
 8003ed8:	f003 030f 	and.w	r3, r3, #15
 8003edc:	490b      	ldr	r1, [pc, #44]	@ (8003f0c <HAL_RCC_ClockConfig+0x1f4>)
 8003ede:	5ccb      	ldrb	r3, [r1, r3]
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee8:	4a09      	ldr	r2, [pc, #36]	@ (8003f10 <HAL_RCC_ClockConfig+0x1f8>)
 8003eea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003eec:	4b09      	ldr	r3, [pc, #36]	@ (8003f14 <HAL_RCC_ClockConfig+0x1fc>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7fe ff23 	bl	8002d3c <HAL_InitTick>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	72fb      	strb	r3, [r7, #11]

  return status;
 8003efa:	7afb      	ldrb	r3, [r7, #11]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40022000 	.word	0x40022000
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	0800b130 	.word	0x0800b130
 8003f10:	2000000c 	.word	0x2000000c
 8003f14:	20000010 	.word	0x20000010

08003f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b089      	sub	sp, #36	@ 0x24
 8003f1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61fb      	str	r3, [r7, #28]
 8003f22:	2300      	movs	r3, #0
 8003f24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f26:	4b3e      	ldr	r3, [pc, #248]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
 8003f2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f30:	4b3b      	ldr	r3, [pc, #236]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f003 0303 	and.w	r3, r3, #3
 8003f38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_GetSysClockFreq+0x34>
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	2b0c      	cmp	r3, #12
 8003f44:	d121      	bne.n	8003f8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d11e      	bne.n	8003f8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f4c:	4b34      	ldr	r3, [pc, #208]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0308 	and.w	r3, r3, #8
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d107      	bne.n	8003f68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f58:	4b31      	ldr	r3, [pc, #196]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f5e:	0a1b      	lsrs	r3, r3, #8
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	61fb      	str	r3, [r7, #28]
 8003f66:	e005      	b.n	8003f74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f68:	4b2d      	ldr	r3, [pc, #180]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f74:	4a2b      	ldr	r2, [pc, #172]	@ (8004024 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10d      	bne.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f88:	e00a      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d102      	bne.n	8003f96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f90:	4b25      	ldr	r3, [pc, #148]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f92:	61bb      	str	r3, [r7, #24]
 8003f94:	e004      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d101      	bne.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f9c:	4b23      	ldr	r3, [pc, #140]	@ (800402c <HAL_RCC_GetSysClockFreq+0x114>)
 8003f9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	2b0c      	cmp	r3, #12
 8003fa4:	d134      	bne.n	8004010 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d003      	beq.n	8003fbe <HAL_RCC_GetSysClockFreq+0xa6>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d003      	beq.n	8003fc4 <HAL_RCC_GetSysClockFreq+0xac>
 8003fbc:	e005      	b.n	8003fca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8004028 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fc0:	617b      	str	r3, [r7, #20]
      break;
 8003fc2:	e005      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fc4:	4b19      	ldr	r3, [pc, #100]	@ (800402c <HAL_RCC_GetSysClockFreq+0x114>)
 8003fc6:	617b      	str	r3, [r7, #20]
      break;
 8003fc8:	e002      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	617b      	str	r3, [r7, #20]
      break;
 8003fce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fd0:	4b13      	ldr	r3, [pc, #76]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	f003 0307 	and.w	r3, r3, #7
 8003fda:	3301      	adds	r3, #1
 8003fdc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fde:	4b10      	ldr	r3, [pc, #64]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	0a1b      	lsrs	r3, r3, #8
 8003fe4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	fb03 f202 	mul.w	r2, r3, r2
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8004020 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	0e5b      	lsrs	r3, r3, #25
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	3301      	adds	r3, #1
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	fbb2 f3f3 	udiv	r3, r2, r3
 800400e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004010:	69bb      	ldr	r3, [r7, #24]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3724      	adds	r7, #36	@ 0x24
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40021000 	.word	0x40021000
 8004024:	0800b148 	.word	0x0800b148
 8004028:	00f42400 	.word	0x00f42400
 800402c:	007a1200 	.word	0x007a1200

08004030 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004034:	4b03      	ldr	r3, [pc, #12]	@ (8004044 <HAL_RCC_GetHCLKFreq+0x14>)
 8004036:	681b      	ldr	r3, [r3, #0]
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	2000000c 	.word	0x2000000c

08004048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800404c:	f7ff fff0 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 8004050:	4602      	mov	r2, r0
 8004052:	4b06      	ldr	r3, [pc, #24]	@ (800406c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	0a1b      	lsrs	r3, r3, #8
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	4904      	ldr	r1, [pc, #16]	@ (8004070 <HAL_RCC_GetPCLK1Freq+0x28>)
 800405e:	5ccb      	ldrb	r3, [r1, r3]
 8004060:	f003 031f 	and.w	r3, r3, #31
 8004064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004068:	4618      	mov	r0, r3
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40021000 	.word	0x40021000
 8004070:	0800b140 	.word	0x0800b140

08004074 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004078:	f7ff ffda 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 800407c:	4602      	mov	r2, r0
 800407e:	4b06      	ldr	r3, [pc, #24]	@ (8004098 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	0adb      	lsrs	r3, r3, #11
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	4904      	ldr	r1, [pc, #16]	@ (800409c <HAL_RCC_GetPCLK2Freq+0x28>)
 800408a:	5ccb      	ldrb	r3, [r1, r3]
 800408c:	f003 031f 	and.w	r3, r3, #31
 8004090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004094:	4618      	mov	r0, r3
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40021000 	.word	0x40021000
 800409c:	0800b140 	.word	0x0800b140

080040a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80040a8:	2300      	movs	r3, #0
 80040aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80040ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d003      	beq.n	80040c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040b8:	f7ff f9ee 	bl	8003498 <HAL_PWREx_GetVoltageRange>
 80040bc:	6178      	str	r0, [r7, #20]
 80040be:	e014      	b.n	80040ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040c0:	4b25      	ldr	r3, [pc, #148]	@ (8004158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c4:	4a24      	ldr	r2, [pc, #144]	@ (8004158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80040cc:	4b22      	ldr	r3, [pc, #136]	@ (8004158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040d8:	f7ff f9de 	bl	8003498 <HAL_PWREx_GetVoltageRange>
 80040dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040de:	4b1e      	ldr	r3, [pc, #120]	@ (8004158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004158 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040f0:	d10b      	bne.n	800410a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b80      	cmp	r3, #128	@ 0x80
 80040f6:	d919      	bls.n	800412c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80040fc:	d902      	bls.n	8004104 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040fe:	2302      	movs	r3, #2
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	e013      	b.n	800412c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004104:	2301      	movs	r3, #1
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	e010      	b.n	800412c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b80      	cmp	r3, #128	@ 0x80
 800410e:	d902      	bls.n	8004116 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004110:	2303      	movs	r3, #3
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	e00a      	b.n	800412c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b80      	cmp	r3, #128	@ 0x80
 800411a:	d102      	bne.n	8004122 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800411c:	2302      	movs	r3, #2
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	e004      	b.n	800412c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b70      	cmp	r3, #112	@ 0x70
 8004126:	d101      	bne.n	800412c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004128:	2301      	movs	r3, #1
 800412a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800412c:	4b0b      	ldr	r3, [pc, #44]	@ (800415c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f023 0207 	bic.w	r2, r3, #7
 8004134:	4909      	ldr	r1, [pc, #36]	@ (800415c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800413c:	4b07      	ldr	r3, [pc, #28]	@ (800415c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	429a      	cmp	r2, r3
 8004148:	d001      	beq.n	800414e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	40021000 	.word	0x40021000
 800415c:	40022000 	.word	0x40022000

08004160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004168:	2300      	movs	r3, #0
 800416a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800416c:	2300      	movs	r3, #0
 800416e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004178:	2b00      	cmp	r3, #0
 800417a:	d041      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004180:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004184:	d02a      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004186:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800418a:	d824      	bhi.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800418c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004190:	d008      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004192:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004196:	d81e      	bhi.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800419c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041a0:	d010      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041a2:	e018      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041a4:	4b86      	ldr	r3, [pc, #536]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4a85      	ldr	r2, [pc, #532]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041b0:	e015      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3304      	adds	r3, #4
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fabb 	bl	8004734 <RCCEx_PLLSAI1_Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041c2:	e00c      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3320      	adds	r3, #32
 80041c8:	2100      	movs	r1, #0
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fba6 	bl	800491c <RCCEx_PLLSAI2_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041d4:	e003      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	74fb      	strb	r3, [r7, #19]
      break;
 80041da:	e000      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80041dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041de:	7cfb      	ldrb	r3, [r7, #19]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10b      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041e4:	4b76      	ldr	r3, [pc, #472]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041f2:	4973      	ldr	r1, [pc, #460]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041fa:	e001      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fc:	7cfb      	ldrb	r3, [r7, #19]
 80041fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d041      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004210:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004214:	d02a      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004216:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800421a:	d824      	bhi.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800421c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004220:	d008      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004222:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004226:	d81e      	bhi.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800422c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004230:	d010      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004232:	e018      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004234:	4b62      	ldr	r3, [pc, #392]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4a61      	ldr	r2, [pc, #388]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800423e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004240:	e015      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	3304      	adds	r3, #4
 8004246:	2100      	movs	r1, #0
 8004248:	4618      	mov	r0, r3
 800424a:	f000 fa73 	bl	8004734 <RCCEx_PLLSAI1_Config>
 800424e:	4603      	mov	r3, r0
 8004250:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004252:	e00c      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3320      	adds	r3, #32
 8004258:	2100      	movs	r1, #0
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fb5e 	bl	800491c <RCCEx_PLLSAI2_Config>
 8004260:	4603      	mov	r3, r0
 8004262:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004264:	e003      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	74fb      	strb	r3, [r7, #19]
      break;
 800426a:	e000      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800426c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800426e:	7cfb      	ldrb	r3, [r7, #19]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10b      	bne.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004274:	4b52      	ldr	r3, [pc, #328]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004282:	494f      	ldr	r1, [pc, #316]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800428a:	e001      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428c:	7cfb      	ldrb	r3, [r7, #19]
 800428e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 80a0 	beq.w	80043de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429e:	2300      	movs	r3, #0
 80042a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042a2:	4b47      	ldr	r3, [pc, #284]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80042b2:	2300      	movs	r3, #0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00d      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b8:	4b41      	ldr	r3, [pc, #260]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042bc:	4a40      	ldr	r2, [pc, #256]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80042c4:	4b3e      	ldr	r3, [pc, #248]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d0:	2301      	movs	r3, #1
 80042d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d4:	4b3b      	ldr	r3, [pc, #236]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a3a      	ldr	r2, [pc, #232]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042e0:	f7fe fd7c 	bl	8002ddc <HAL_GetTick>
 80042e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042e6:	e009      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e8:	f7fe fd78 	bl	8002ddc <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d902      	bls.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	74fb      	strb	r3, [r7, #19]
        break;
 80042fa:	e005      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042fc:	4b31      	ldr	r3, [pc, #196]	@ (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0ef      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d15c      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800430e:	4b2c      	ldr	r3, [pc, #176]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004314:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004318:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01f      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	429a      	cmp	r2, r3
 800432a:	d019      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800432c:	4b24      	ldr	r3, [pc, #144]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004336:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004338:	4b21      	ldr	r3, [pc, #132]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433e:	4a20      	ldr	r2, [pc, #128]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004344:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004348:	4b1d      	ldr	r3, [pc, #116]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800434e:	4a1c      	ldr	r2, [pc, #112]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004354:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004358:	4a19      	ldr	r2, [pc, #100]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d016      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436a:	f7fe fd37 	bl	8002ddc <HAL_GetTick>
 800436e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004370:	e00b      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004372:	f7fe fd33 	bl	8002ddc <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004380:	4293      	cmp	r3, r2
 8004382:	d902      	bls.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	74fb      	strb	r3, [r7, #19]
            break;
 8004388:	e006      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438a:	4b0d      	ldr	r3, [pc, #52]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800438c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0ec      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004398:	7cfb      	ldrb	r3, [r7, #19]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d10c      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800439e:	4b08      	ldr	r3, [pc, #32]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043ae:	4904      	ldr	r1, [pc, #16]	@ (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80043b6:	e009      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043b8:	7cfb      	ldrb	r3, [r7, #19]
 80043ba:	74bb      	strb	r3, [r7, #18]
 80043bc:	e006      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000
 80043c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c8:	7cfb      	ldrb	r3, [r7, #19]
 80043ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043cc:	7c7b      	ldrb	r3, [r7, #17]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d105      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d2:	4b9e      	ldr	r3, [pc, #632]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d6:	4a9d      	ldr	r2, [pc, #628]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043ea:	4b98      	ldr	r3, [pc, #608]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f0:	f023 0203 	bic.w	r2, r3, #3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f8:	4994      	ldr	r1, [pc, #592]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800440c:	4b8f      	ldr	r3, [pc, #572]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004412:	f023 020c 	bic.w	r2, r3, #12
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441a:	498c      	ldr	r1, [pc, #560]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800442e:	4b87      	ldr	r3, [pc, #540]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004434:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443c:	4983      	ldr	r1, [pc, #524]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004450:	4b7e      	ldr	r3, [pc, #504]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004456:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	497b      	ldr	r1, [pc, #492]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004472:	4b76      	ldr	r3, [pc, #472]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004478:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004480:	4972      	ldr	r1, [pc, #456]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0320 	and.w	r3, r3, #32
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004494:	4b6d      	ldr	r3, [pc, #436]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a2:	496a      	ldr	r1, [pc, #424]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044b6:	4b65      	ldr	r3, [pc, #404]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044c4:	4961      	ldr	r1, [pc, #388]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044d8:	4b5c      	ldr	r3, [pc, #368]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e6:	4959      	ldr	r1, [pc, #356]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044fa:	4b54      	ldr	r3, [pc, #336]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004500:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004508:	4950      	ldr	r1, [pc, #320]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800451c:	4b4b      	ldr	r3, [pc, #300]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004522:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452a:	4948      	ldr	r1, [pc, #288]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800453e:	4b43      	ldr	r3, [pc, #268]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004544:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454c:	493f      	ldr	r1, [pc, #252]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d028      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004560:	4b3a      	ldr	r3, [pc, #232]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004566:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800456e:	4937      	ldr	r1, [pc, #220]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800457a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800457e:	d106      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004580:	4b32      	ldr	r3, [pc, #200]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	4a31      	ldr	r2, [pc, #196]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800458a:	60d3      	str	r3, [r2, #12]
 800458c:	e011      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004592:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004596:	d10c      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
 800459c:	2101      	movs	r1, #1
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 f8c8 	bl	8004734 <RCCEx_PLLSAI1_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045a8:	7cfb      	ldrb	r3, [r7, #19]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80045ae:	7cfb      	ldrb	r3, [r7, #19]
 80045b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d028      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045be:	4b23      	ldr	r3, [pc, #140]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045cc:	491f      	ldr	r1, [pc, #124]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045dc:	d106      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045de:	4b1b      	ldr	r3, [pc, #108]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	4a1a      	ldr	r2, [pc, #104]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045e8:	60d3      	str	r3, [r2, #12]
 80045ea:	e011      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045f4:	d10c      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3304      	adds	r3, #4
 80045fa:	2101      	movs	r1, #1
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 f899 	bl	8004734 <RCCEx_PLLSAI1_Config>
 8004602:	4603      	mov	r3, r0
 8004604:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004606:	7cfb      	ldrb	r3, [r7, #19]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800460c:	7cfb      	ldrb	r3, [r7, #19]
 800460e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d02b      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800461c:	4b0b      	ldr	r3, [pc, #44]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004622:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800462a:	4908      	ldr	r1, [pc, #32]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004636:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800463a:	d109      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800463c:	4b03      	ldr	r3, [pc, #12]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	4a02      	ldr	r2, [pc, #8]	@ (800464c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004646:	60d3      	str	r3, [r2, #12]
 8004648:	e014      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800464a:	bf00      	nop
 800464c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004654:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004658:	d10c      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3304      	adds	r3, #4
 800465e:	2101      	movs	r1, #1
 8004660:	4618      	mov	r0, r3
 8004662:	f000 f867 	bl	8004734 <RCCEx_PLLSAI1_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800466a:	7cfb      	ldrb	r3, [r7, #19]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004670:	7cfb      	ldrb	r3, [r7, #19]
 8004672:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d02f      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004680:	4b2b      	ldr	r3, [pc, #172]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004686:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800468e:	4928      	ldr	r1, [pc, #160]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800469a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800469e:	d10d      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	3304      	adds	r3, #4
 80046a4:	2102      	movs	r1, #2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 f844 	bl	8004734 <RCCEx_PLLSAI1_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046b0:	7cfb      	ldrb	r3, [r7, #19]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d014      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046b6:	7cfb      	ldrb	r3, [r7, #19]
 80046b8:	74bb      	strb	r3, [r7, #18]
 80046ba:	e011      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3320      	adds	r3, #32
 80046ca:	2102      	movs	r1, #2
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 f925 	bl	800491c <RCCEx_PLLSAI2_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046d6:	7cfb      	ldrb	r3, [r7, #19]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046dc:	7cfb      	ldrb	r3, [r7, #19]
 80046de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046ec:	4b10      	ldr	r3, [pc, #64]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046fa:	490d      	ldr	r1, [pc, #52]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00b      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800470e:	4b08      	ldr	r3, [pc, #32]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004714:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800471e:	4904      	ldr	r1, [pc, #16]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004726:	7cbb      	ldrb	r3, [r7, #18]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000

08004734 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004742:	4b75      	ldr	r3, [pc, #468]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d018      	beq.n	8004780 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800474e:	4b72      	ldr	r3, [pc, #456]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f003 0203 	and.w	r2, r3, #3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d10d      	bne.n	800477a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
       ||
 8004762:	2b00      	cmp	r3, #0
 8004764:	d009      	beq.n	800477a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004766:	4b6c      	ldr	r3, [pc, #432]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	091b      	lsrs	r3, r3, #4
 800476c:	f003 0307 	and.w	r3, r3, #7
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
       ||
 8004776:	429a      	cmp	r2, r3
 8004778:	d047      	beq.n	800480a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	73fb      	strb	r3, [r7, #15]
 800477e:	e044      	b.n	800480a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b03      	cmp	r3, #3
 8004786:	d018      	beq.n	80047ba <RCCEx_PLLSAI1_Config+0x86>
 8004788:	2b03      	cmp	r3, #3
 800478a:	d825      	bhi.n	80047d8 <RCCEx_PLLSAI1_Config+0xa4>
 800478c:	2b01      	cmp	r3, #1
 800478e:	d002      	beq.n	8004796 <RCCEx_PLLSAI1_Config+0x62>
 8004790:	2b02      	cmp	r3, #2
 8004792:	d009      	beq.n	80047a8 <RCCEx_PLLSAI1_Config+0x74>
 8004794:	e020      	b.n	80047d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004796:	4b60      	ldr	r3, [pc, #384]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d11d      	bne.n	80047de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a6:	e01a      	b.n	80047de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047a8:	4b5b      	ldr	r3, [pc, #364]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d116      	bne.n	80047e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047b8:	e013      	b.n	80047e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047ba:	4b57      	ldr	r3, [pc, #348]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10f      	bne.n	80047e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047c6:	4b54      	ldr	r3, [pc, #336]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d109      	bne.n	80047e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047d6:	e006      	b.n	80047e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	73fb      	strb	r3, [r7, #15]
      break;
 80047dc:	e004      	b.n	80047e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047de:	bf00      	nop
 80047e0:	e002      	b.n	80047e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047e2:	bf00      	nop
 80047e4:	e000      	b.n	80047e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10d      	bne.n	800480a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6819      	ldr	r1, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	3b01      	subs	r3, #1
 8004800:	011b      	lsls	r3, r3, #4
 8004802:	430b      	orrs	r3, r1
 8004804:	4944      	ldr	r1, [pc, #272]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004806:	4313      	orrs	r3, r2
 8004808:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d17d      	bne.n	800490c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004810:	4b41      	ldr	r3, [pc, #260]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a40      	ldr	r2, [pc, #256]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004816:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800481a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800481c:	f7fe fade 	bl	8002ddc <HAL_GetTick>
 8004820:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004822:	e009      	b.n	8004838 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004824:	f7fe fada 	bl	8002ddc <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d902      	bls.n	8004838 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	73fb      	strb	r3, [r7, #15]
        break;
 8004836:	e005      	b.n	8004844 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004838:	4b37      	ldr	r3, [pc, #220]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1ef      	bne.n	8004824 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d160      	bne.n	800490c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d111      	bne.n	8004874 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004850:	4b31      	ldr	r3, [pc, #196]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004858:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6892      	ldr	r2, [r2, #8]
 8004860:	0211      	lsls	r1, r2, #8
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	68d2      	ldr	r2, [r2, #12]
 8004866:	0912      	lsrs	r2, r2, #4
 8004868:	0452      	lsls	r2, r2, #17
 800486a:	430a      	orrs	r2, r1
 800486c:	492a      	ldr	r1, [pc, #168]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800486e:	4313      	orrs	r3, r2
 8004870:	610b      	str	r3, [r1, #16]
 8004872:	e027      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d112      	bne.n	80048a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800487a:	4b27      	ldr	r3, [pc, #156]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004882:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6892      	ldr	r2, [r2, #8]
 800488a:	0211      	lsls	r1, r2, #8
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6912      	ldr	r2, [r2, #16]
 8004890:	0852      	lsrs	r2, r2, #1
 8004892:	3a01      	subs	r2, #1
 8004894:	0552      	lsls	r2, r2, #21
 8004896:	430a      	orrs	r2, r1
 8004898:	491f      	ldr	r1, [pc, #124]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 800489a:	4313      	orrs	r3, r2
 800489c:	610b      	str	r3, [r1, #16]
 800489e:	e011      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80048a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6892      	ldr	r2, [r2, #8]
 80048b0:	0211      	lsls	r1, r2, #8
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6952      	ldr	r2, [r2, #20]
 80048b6:	0852      	lsrs	r2, r2, #1
 80048b8:	3a01      	subs	r2, #1
 80048ba:	0652      	lsls	r2, r2, #25
 80048bc:	430a      	orrs	r2, r1
 80048be:	4916      	ldr	r1, [pc, #88]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80048c4:	4b14      	ldr	r3, [pc, #80]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a13      	ldr	r2, [pc, #76]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048d0:	f7fe fa84 	bl	8002ddc <HAL_GetTick>
 80048d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048d6:	e009      	b.n	80048ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048d8:	f7fe fa80 	bl	8002ddc <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d902      	bls.n	80048ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	73fb      	strb	r3, [r7, #15]
          break;
 80048ea:	e005      	b.n	80048f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0ef      	beq.n	80048d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048fe:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	4904      	ldr	r1, [pc, #16]	@ (8004918 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004908:	4313      	orrs	r3, r2
 800490a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40021000 	.word	0x40021000

0800491c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800492a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d018      	beq.n	8004968 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004936:	4b67      	ldr	r3, [pc, #412]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f003 0203 	and.w	r2, r3, #3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d10d      	bne.n	8004962 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
       ||
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800494e:	4b61      	ldr	r3, [pc, #388]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	091b      	lsrs	r3, r3, #4
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
       ||
 800495e:	429a      	cmp	r2, r3
 8004960:	d047      	beq.n	80049f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	73fb      	strb	r3, [r7, #15]
 8004966:	e044      	b.n	80049f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b03      	cmp	r3, #3
 800496e:	d018      	beq.n	80049a2 <RCCEx_PLLSAI2_Config+0x86>
 8004970:	2b03      	cmp	r3, #3
 8004972:	d825      	bhi.n	80049c0 <RCCEx_PLLSAI2_Config+0xa4>
 8004974:	2b01      	cmp	r3, #1
 8004976:	d002      	beq.n	800497e <RCCEx_PLLSAI2_Config+0x62>
 8004978:	2b02      	cmp	r3, #2
 800497a:	d009      	beq.n	8004990 <RCCEx_PLLSAI2_Config+0x74>
 800497c:	e020      	b.n	80049c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800497e:	4b55      	ldr	r3, [pc, #340]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d11d      	bne.n	80049c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800498e:	e01a      	b.n	80049c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004990:	4b50      	ldr	r3, [pc, #320]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004998:	2b00      	cmp	r3, #0
 800499a:	d116      	bne.n	80049ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a0:	e013      	b.n	80049ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049a2:	4b4c      	ldr	r3, [pc, #304]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10f      	bne.n	80049ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049ae:	4b49      	ldr	r3, [pc, #292]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d109      	bne.n	80049ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049be:	e006      	b.n	80049ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
      break;
 80049c4:	e004      	b.n	80049d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049c6:	bf00      	nop
 80049c8:	e002      	b.n	80049d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049ca:	bf00      	nop
 80049cc:	e000      	b.n	80049d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80049ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10d      	bne.n	80049f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049d6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6819      	ldr	r1, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	430b      	orrs	r3, r1
 80049ec:	4939      	ldr	r1, [pc, #228]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d167      	bne.n	8004ac8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049f8:	4b36      	ldr	r3, [pc, #216]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a35      	ldr	r2, [pc, #212]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a04:	f7fe f9ea 	bl	8002ddc <HAL_GetTick>
 8004a08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a0a:	e009      	b.n	8004a20 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a0c:	f7fe f9e6 	bl	8002ddc <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d902      	bls.n	8004a20 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a1e:	e005      	b.n	8004a2c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a20:	4b2c      	ldr	r3, [pc, #176]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1ef      	bne.n	8004a0c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d14a      	bne.n	8004ac8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d111      	bne.n	8004a5c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a38:	4b26      	ldr	r3, [pc, #152]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004a40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6892      	ldr	r2, [r2, #8]
 8004a48:	0211      	lsls	r1, r2, #8
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	68d2      	ldr	r2, [r2, #12]
 8004a4e:	0912      	lsrs	r2, r2, #4
 8004a50:	0452      	lsls	r2, r2, #17
 8004a52:	430a      	orrs	r2, r1
 8004a54:	491f      	ldr	r1, [pc, #124]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	614b      	str	r3, [r1, #20]
 8004a5a:	e011      	b.n	8004a80 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a64:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6892      	ldr	r2, [r2, #8]
 8004a6c:	0211      	lsls	r1, r2, #8
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6912      	ldr	r2, [r2, #16]
 8004a72:	0852      	lsrs	r2, r2, #1
 8004a74:	3a01      	subs	r2, #1
 8004a76:	0652      	lsls	r2, r2, #25
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	4916      	ldr	r1, [pc, #88]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a80:	4b14      	ldr	r3, [pc, #80]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a13      	ldr	r2, [pc, #76]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8c:	f7fe f9a6 	bl	8002ddc <HAL_GetTick>
 8004a90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a92:	e009      	b.n	8004aa8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a94:	f7fe f9a2 	bl	8002ddc <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d902      	bls.n	8004aa8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	73fb      	strb	r3, [r7, #15]
          break;
 8004aa6:	e005      	b.n	8004ab4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0ef      	beq.n	8004a94 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004aba:	4b06      	ldr	r3, [pc, #24]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	4904      	ldr	r1, [pc, #16]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40021000 	.word	0x40021000

08004ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e049      	b.n	8004b7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fd ff62 	bl	80029c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f000 fcae 	bl	8005478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e049      	b.n	8004c2c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d106      	bne.n	8004bb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f841 	bl	8004c34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	f000 fc57 	bl	8005478 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <HAL_TIM_PWM_Start+0x24>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	bf14      	ite	ne
 8004c64:	2301      	movne	r3, #1
 8004c66:	2300      	moveq	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	e03c      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x9e>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d109      	bne.n	8004c86 <HAL_TIM_PWM_Start+0x3e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	bf14      	ite	ne
 8004c7e:	2301      	movne	r3, #1
 8004c80:	2300      	moveq	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	e02f      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x9e>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d109      	bne.n	8004ca0 <HAL_TIM_PWM_Start+0x58>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	bf14      	ite	ne
 8004c98:	2301      	movne	r3, #1
 8004c9a:	2300      	moveq	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	e022      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x9e>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b0c      	cmp	r3, #12
 8004ca4:	d109      	bne.n	8004cba <HAL_TIM_PWM_Start+0x72>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	bf14      	ite	ne
 8004cb2:	2301      	movne	r3, #1
 8004cb4:	2300      	moveq	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	e015      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x9e>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b10      	cmp	r3, #16
 8004cbe:	d109      	bne.n	8004cd4 <HAL_TIM_PWM_Start+0x8c>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	bf14      	ite	ne
 8004ccc:	2301      	movne	r3, #1
 8004cce:	2300      	moveq	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	e008      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x9e>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	bf14      	ite	ne
 8004ce0:	2301      	movne	r3, #1
 8004ce2:	2300      	moveq	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e09c      	b.n	8004e28 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d104      	bne.n	8004cfe <HAL_TIM_PWM_Start+0xb6>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cfc:	e023      	b.n	8004d46 <HAL_TIM_PWM_Start+0xfe>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	d104      	bne.n	8004d0e <HAL_TIM_PWM_Start+0xc6>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d0c:	e01b      	b.n	8004d46 <HAL_TIM_PWM_Start+0xfe>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d104      	bne.n	8004d1e <HAL_TIM_PWM_Start+0xd6>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d1c:	e013      	b.n	8004d46 <HAL_TIM_PWM_Start+0xfe>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b0c      	cmp	r3, #12
 8004d22:	d104      	bne.n	8004d2e <HAL_TIM_PWM_Start+0xe6>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d2c:	e00b      	b.n	8004d46 <HAL_TIM_PWM_Start+0xfe>
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d104      	bne.n	8004d3e <HAL_TIM_PWM_Start+0xf6>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d3c:	e003      	b.n	8004d46 <HAL_TIM_PWM_Start+0xfe>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	6839      	ldr	r1, [r7, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 ffa8 	bl	8005ca4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a35      	ldr	r2, [pc, #212]	@ (8004e30 <HAL_TIM_PWM_Start+0x1e8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d013      	beq.n	8004d86 <HAL_TIM_PWM_Start+0x13e>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a34      	ldr	r2, [pc, #208]	@ (8004e34 <HAL_TIM_PWM_Start+0x1ec>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00e      	beq.n	8004d86 <HAL_TIM_PWM_Start+0x13e>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a32      	ldr	r2, [pc, #200]	@ (8004e38 <HAL_TIM_PWM_Start+0x1f0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d009      	beq.n	8004d86 <HAL_TIM_PWM_Start+0x13e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a31      	ldr	r2, [pc, #196]	@ (8004e3c <HAL_TIM_PWM_Start+0x1f4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d004      	beq.n	8004d86 <HAL_TIM_PWM_Start+0x13e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a2f      	ldr	r2, [pc, #188]	@ (8004e40 <HAL_TIM_PWM_Start+0x1f8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d101      	bne.n	8004d8a <HAL_TIM_PWM_Start+0x142>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <HAL_TIM_PWM_Start+0x144>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d9e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a22      	ldr	r2, [pc, #136]	@ (8004e30 <HAL_TIM_PWM_Start+0x1e8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d01d      	beq.n	8004de6 <HAL_TIM_PWM_Start+0x19e>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004db2:	d018      	beq.n	8004de6 <HAL_TIM_PWM_Start+0x19e>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a22      	ldr	r2, [pc, #136]	@ (8004e44 <HAL_TIM_PWM_Start+0x1fc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d013      	beq.n	8004de6 <HAL_TIM_PWM_Start+0x19e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a21      	ldr	r2, [pc, #132]	@ (8004e48 <HAL_TIM_PWM_Start+0x200>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d00e      	beq.n	8004de6 <HAL_TIM_PWM_Start+0x19e>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8004e4c <HAL_TIM_PWM_Start+0x204>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d009      	beq.n	8004de6 <HAL_TIM_PWM_Start+0x19e>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a17      	ldr	r2, [pc, #92]	@ (8004e34 <HAL_TIM_PWM_Start+0x1ec>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d004      	beq.n	8004de6 <HAL_TIM_PWM_Start+0x19e>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a15      	ldr	r2, [pc, #84]	@ (8004e38 <HAL_TIM_PWM_Start+0x1f0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d115      	bne.n	8004e12 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	4b18      	ldr	r3, [pc, #96]	@ (8004e50 <HAL_TIM_PWM_Start+0x208>)
 8004dee:	4013      	ands	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2b06      	cmp	r3, #6
 8004df6:	d015      	beq.n	8004e24 <HAL_TIM_PWM_Start+0x1dc>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dfe:	d011      	beq.n	8004e24 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e10:	e008      	b.n	8004e24 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0201 	orr.w	r2, r2, #1
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	e000      	b.n	8004e26 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40012c00 	.word	0x40012c00
 8004e34:	40013400 	.word	0x40013400
 8004e38:	40014000 	.word	0x40014000
 8004e3c:	40014400 	.word	0x40014400
 8004e40:	40014800 	.word	0x40014800
 8004e44:	40000400 	.word	0x40000400
 8004e48:	40000800 	.word	0x40000800
 8004e4c:	40000c00 	.word	0x40000c00
 8004e50:	00010007 	.word	0x00010007

08004e54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e097      	b.n	8004f98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7fd fd2f 	bl	80028e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6812      	ldr	r2, [r2, #0]
 8004e94:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004e98:	f023 0307 	bic.w	r3, r3, #7
 8004e9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	f000 fae5 	bl	8005478 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ed6:	f023 0303 	bic.w	r3, r3, #3
 8004eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	021b      	lsls	r3, r3, #8
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004ef4:	f023 030c 	bic.w	r3, r3, #12
 8004ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	4313      	orrs	r3, r2
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	011a      	lsls	r2, r3, #4
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	031b      	lsls	r3, r3, #12
 8004f24:	4313      	orrs	r3, r2
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004f32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004f3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	4313      	orrs	r3, r2
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fb0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004fb8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d110      	bne.n	8004ff2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d102      	bne.n	8004fdc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fd6:	7b7b      	ldrb	r3, [r7, #13]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d001      	beq.n	8004fe0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e069      	b.n	80050b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2202      	movs	r2, #2
 8004fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ff0:	e031      	b.n	8005056 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d110      	bne.n	800501a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ff8:	7bbb      	ldrb	r3, [r7, #14]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d102      	bne.n	8005004 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ffe:	7b3b      	ldrb	r3, [r7, #12]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d001      	beq.n	8005008 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e055      	b.n	80050b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005018:	e01d      	b.n	8005056 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800501a:	7bfb      	ldrb	r3, [r7, #15]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d108      	bne.n	8005032 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005020:	7bbb      	ldrb	r3, [r7, #14]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d105      	bne.n	8005032 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005026:	7b7b      	ldrb	r3, [r7, #13]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d102      	bne.n	8005032 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800502c:	7b3b      	ldrb	r3, [r7, #12]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d001      	beq.n	8005036 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e03e      	b.n	80050b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2202      	movs	r2, #2
 800503a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2202      	movs	r2, #2
 800504a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_TIM_Encoder_Start+0xc4>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2b04      	cmp	r3, #4
 8005060:	d008      	beq.n	8005074 <HAL_TIM_Encoder_Start+0xd4>
 8005062:	e00f      	b.n	8005084 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2201      	movs	r2, #1
 800506a:	2100      	movs	r1, #0
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fe19 	bl	8005ca4 <TIM_CCxChannelCmd>
      break;
 8005072:	e016      	b.n	80050a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2201      	movs	r2, #1
 800507a:	2104      	movs	r1, #4
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fe11 	bl	8005ca4 <TIM_CCxChannelCmd>
      break;
 8005082:	e00e      	b.n	80050a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2201      	movs	r2, #1
 800508a:	2100      	movs	r1, #0
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fe09 	bl	8005ca4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2201      	movs	r2, #1
 8005098:	2104      	movs	r1, #4
 800509a:	4618      	mov	r0, r3
 800509c:	f000 fe02 	bl	8005ca4 <TIM_CCxChannelCmd>
      break;
 80050a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0201 	orr.w	r2, r2, #1
 80050b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e0ff      	b.n	80052da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b14      	cmp	r3, #20
 80050e6:	f200 80f0 	bhi.w	80052ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80050ea:	a201      	add	r2, pc, #4	@ (adr r2, 80050f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f0:	08005145 	.word	0x08005145
 80050f4:	080052cb 	.word	0x080052cb
 80050f8:	080052cb 	.word	0x080052cb
 80050fc:	080052cb 	.word	0x080052cb
 8005100:	08005185 	.word	0x08005185
 8005104:	080052cb 	.word	0x080052cb
 8005108:	080052cb 	.word	0x080052cb
 800510c:	080052cb 	.word	0x080052cb
 8005110:	080051c7 	.word	0x080051c7
 8005114:	080052cb 	.word	0x080052cb
 8005118:	080052cb 	.word	0x080052cb
 800511c:	080052cb 	.word	0x080052cb
 8005120:	08005207 	.word	0x08005207
 8005124:	080052cb 	.word	0x080052cb
 8005128:	080052cb 	.word	0x080052cb
 800512c:	080052cb 	.word	0x080052cb
 8005130:	08005249 	.word	0x08005249
 8005134:	080052cb 	.word	0x080052cb
 8005138:	080052cb 	.word	0x080052cb
 800513c:	080052cb 	.word	0x080052cb
 8005140:	08005289 	.word	0x08005289
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68b9      	ldr	r1, [r7, #8]
 800514a:	4618      	mov	r0, r3
 800514c:	f000 fa3a 	bl	80055c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699a      	ldr	r2, [r3, #24]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0208 	orr.w	r2, r2, #8
 800515e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699a      	ldr	r2, [r3, #24]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0204 	bic.w	r2, r2, #4
 800516e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6999      	ldr	r1, [r3, #24]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	619a      	str	r2, [r3, #24]
      break;
 8005182:	e0a5      	b.n	80052d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	4618      	mov	r0, r3
 800518c:	f000 faaa 	bl	80056e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699a      	ldr	r2, [r3, #24]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800519e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699a      	ldr	r2, [r3, #24]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6999      	ldr	r1, [r3, #24]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	021a      	lsls	r2, r3, #8
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	430a      	orrs	r2, r1
 80051c2:	619a      	str	r2, [r3, #24]
      break;
 80051c4:	e084      	b.n	80052d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68b9      	ldr	r1, [r7, #8]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fb13 	bl	80057f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	69da      	ldr	r2, [r3, #28]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0208 	orr.w	r2, r2, #8
 80051e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0204 	bic.w	r2, r2, #4
 80051f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69d9      	ldr	r1, [r3, #28]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	691a      	ldr	r2, [r3, #16]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	61da      	str	r2, [r3, #28]
      break;
 8005204:	e064      	b.n	80052d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68b9      	ldr	r1, [r7, #8]
 800520c:	4618      	mov	r0, r3
 800520e:	f000 fb7b 	bl	8005908 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69da      	ldr	r2, [r3, #28]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	69d9      	ldr	r1, [r3, #28]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	021a      	lsls	r2, r3, #8
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	61da      	str	r2, [r3, #28]
      break;
 8005246:	e043      	b.n	80052d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fbc4 	bl	80059dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0208 	orr.w	r2, r2, #8
 8005262:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0204 	bic.w	r2, r2, #4
 8005272:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005286:	e023      	b.n	80052d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68b9      	ldr	r1, [r7, #8]
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fc08 	bl	8005aa4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	021a      	lsls	r2, r3, #8
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	430a      	orrs	r2, r1
 80052c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80052c8:	e002      	b.n	80052d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	75fb      	strb	r3, [r7, #23]
      break;
 80052ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop

080052e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_TIM_ConfigClockSource+0x1c>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e0b6      	b.n	800546e <HAL_TIM_ConfigClockSource+0x18a>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800531e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800532a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800533c:	d03e      	beq.n	80053bc <HAL_TIM_ConfigClockSource+0xd8>
 800533e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005342:	f200 8087 	bhi.w	8005454 <HAL_TIM_ConfigClockSource+0x170>
 8005346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800534a:	f000 8086 	beq.w	800545a <HAL_TIM_ConfigClockSource+0x176>
 800534e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005352:	d87f      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x170>
 8005354:	2b70      	cmp	r3, #112	@ 0x70
 8005356:	d01a      	beq.n	800538e <HAL_TIM_ConfigClockSource+0xaa>
 8005358:	2b70      	cmp	r3, #112	@ 0x70
 800535a:	d87b      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x170>
 800535c:	2b60      	cmp	r3, #96	@ 0x60
 800535e:	d050      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x11e>
 8005360:	2b60      	cmp	r3, #96	@ 0x60
 8005362:	d877      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x170>
 8005364:	2b50      	cmp	r3, #80	@ 0x50
 8005366:	d03c      	beq.n	80053e2 <HAL_TIM_ConfigClockSource+0xfe>
 8005368:	2b50      	cmp	r3, #80	@ 0x50
 800536a:	d873      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x170>
 800536c:	2b40      	cmp	r3, #64	@ 0x40
 800536e:	d058      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x13e>
 8005370:	2b40      	cmp	r3, #64	@ 0x40
 8005372:	d86f      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x170>
 8005374:	2b30      	cmp	r3, #48	@ 0x30
 8005376:	d064      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x15e>
 8005378:	2b30      	cmp	r3, #48	@ 0x30
 800537a:	d86b      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x170>
 800537c:	2b20      	cmp	r3, #32
 800537e:	d060      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x15e>
 8005380:	2b20      	cmp	r3, #32
 8005382:	d867      	bhi.n	8005454 <HAL_TIM_ConfigClockSource+0x170>
 8005384:	2b00      	cmp	r3, #0
 8005386:	d05c      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x15e>
 8005388:	2b10      	cmp	r3, #16
 800538a:	d05a      	beq.n	8005442 <HAL_TIM_ConfigClockSource+0x15e>
 800538c:	e062      	b.n	8005454 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800539e:	f000 fc61 	bl	8005c64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	609a      	str	r2, [r3, #8]
      break;
 80053ba:	e04f      	b.n	800545c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053cc:	f000 fc4a 	bl	8005c64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053de:	609a      	str	r2, [r3, #8]
      break;
 80053e0:	e03c      	b.n	800545c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ee:	461a      	mov	r2, r3
 80053f0:	f000 fbbe 	bl	8005b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2150      	movs	r1, #80	@ 0x50
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fc17 	bl	8005c2e <TIM_ITRx_SetConfig>
      break;
 8005400:	e02c      	b.n	800545c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800540e:	461a      	mov	r2, r3
 8005410:	f000 fbdd 	bl	8005bce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2160      	movs	r1, #96	@ 0x60
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fc07 	bl	8005c2e <TIM_ITRx_SetConfig>
      break;
 8005420:	e01c      	b.n	800545c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800542e:	461a      	mov	r2, r3
 8005430:	f000 fb9e 	bl	8005b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2140      	movs	r1, #64	@ 0x40
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fbf7 	bl	8005c2e <TIM_ITRx_SetConfig>
      break;
 8005440:	e00c      	b.n	800545c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4619      	mov	r1, r3
 800544c:	4610      	mov	r0, r2
 800544e:	f000 fbee 	bl	8005c2e <TIM_ITRx_SetConfig>
      break;
 8005452:	e003      	b.n	800545c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	73fb      	strb	r3, [r7, #15]
      break;
 8005458:	e000      	b.n	800545c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800545a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800546c:	7bfb      	ldrb	r3, [r7, #15]
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a46      	ldr	r2, [pc, #280]	@ (80055a4 <TIM_Base_SetConfig+0x12c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d013      	beq.n	80054b8 <TIM_Base_SetConfig+0x40>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005496:	d00f      	beq.n	80054b8 <TIM_Base_SetConfig+0x40>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a43      	ldr	r2, [pc, #268]	@ (80055a8 <TIM_Base_SetConfig+0x130>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00b      	beq.n	80054b8 <TIM_Base_SetConfig+0x40>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a42      	ldr	r2, [pc, #264]	@ (80055ac <TIM_Base_SetConfig+0x134>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d007      	beq.n	80054b8 <TIM_Base_SetConfig+0x40>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a41      	ldr	r2, [pc, #260]	@ (80055b0 <TIM_Base_SetConfig+0x138>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d003      	beq.n	80054b8 <TIM_Base_SetConfig+0x40>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a40      	ldr	r2, [pc, #256]	@ (80055b4 <TIM_Base_SetConfig+0x13c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d108      	bne.n	80054ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a35      	ldr	r2, [pc, #212]	@ (80055a4 <TIM_Base_SetConfig+0x12c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d01f      	beq.n	8005512 <TIM_Base_SetConfig+0x9a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d8:	d01b      	beq.n	8005512 <TIM_Base_SetConfig+0x9a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a32      	ldr	r2, [pc, #200]	@ (80055a8 <TIM_Base_SetConfig+0x130>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d017      	beq.n	8005512 <TIM_Base_SetConfig+0x9a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a31      	ldr	r2, [pc, #196]	@ (80055ac <TIM_Base_SetConfig+0x134>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d013      	beq.n	8005512 <TIM_Base_SetConfig+0x9a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a30      	ldr	r2, [pc, #192]	@ (80055b0 <TIM_Base_SetConfig+0x138>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d00f      	beq.n	8005512 <TIM_Base_SetConfig+0x9a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a2f      	ldr	r2, [pc, #188]	@ (80055b4 <TIM_Base_SetConfig+0x13c>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00b      	beq.n	8005512 <TIM_Base_SetConfig+0x9a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2e      	ldr	r2, [pc, #184]	@ (80055b8 <TIM_Base_SetConfig+0x140>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d007      	beq.n	8005512 <TIM_Base_SetConfig+0x9a>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2d      	ldr	r2, [pc, #180]	@ (80055bc <TIM_Base_SetConfig+0x144>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d003      	beq.n	8005512 <TIM_Base_SetConfig+0x9a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a2c      	ldr	r2, [pc, #176]	@ (80055c0 <TIM_Base_SetConfig+0x148>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d108      	bne.n	8005524 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	4313      	orrs	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a16      	ldr	r2, [pc, #88]	@ (80055a4 <TIM_Base_SetConfig+0x12c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00f      	beq.n	8005570 <TIM_Base_SetConfig+0xf8>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a18      	ldr	r2, [pc, #96]	@ (80055b4 <TIM_Base_SetConfig+0x13c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00b      	beq.n	8005570 <TIM_Base_SetConfig+0xf8>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a17      	ldr	r2, [pc, #92]	@ (80055b8 <TIM_Base_SetConfig+0x140>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d007      	beq.n	8005570 <TIM_Base_SetConfig+0xf8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a16      	ldr	r2, [pc, #88]	@ (80055bc <TIM_Base_SetConfig+0x144>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d003      	beq.n	8005570 <TIM_Base_SetConfig+0xf8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a15      	ldr	r2, [pc, #84]	@ (80055c0 <TIM_Base_SetConfig+0x148>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d103      	bne.n	8005578 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b01      	cmp	r3, #1
 8005588:	d105      	bne.n	8005596 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f023 0201 	bic.w	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	611a      	str	r2, [r3, #16]
  }
}
 8005596:	bf00      	nop
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40012c00 	.word	0x40012c00
 80055a8:	40000400 	.word	0x40000400
 80055ac:	40000800 	.word	0x40000800
 80055b0:	40000c00 	.word	0x40000c00
 80055b4:	40013400 	.word	0x40013400
 80055b8:	40014000 	.word	0x40014000
 80055bc:	40014400 	.word	0x40014400
 80055c0:	40014800 	.word	0x40014800

080055c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	f023 0201 	bic.w	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0303 	bic.w	r3, r3, #3
 80055fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f023 0302 	bic.w	r3, r3, #2
 8005610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4313      	orrs	r3, r2
 800561a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a2c      	ldr	r2, [pc, #176]	@ (80056d0 <TIM_OC1_SetConfig+0x10c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00f      	beq.n	8005644 <TIM_OC1_SetConfig+0x80>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a2b      	ldr	r2, [pc, #172]	@ (80056d4 <TIM_OC1_SetConfig+0x110>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00b      	beq.n	8005644 <TIM_OC1_SetConfig+0x80>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a2a      	ldr	r2, [pc, #168]	@ (80056d8 <TIM_OC1_SetConfig+0x114>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d007      	beq.n	8005644 <TIM_OC1_SetConfig+0x80>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a29      	ldr	r2, [pc, #164]	@ (80056dc <TIM_OC1_SetConfig+0x118>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d003      	beq.n	8005644 <TIM_OC1_SetConfig+0x80>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a28      	ldr	r2, [pc, #160]	@ (80056e0 <TIM_OC1_SetConfig+0x11c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d10c      	bne.n	800565e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f023 0308 	bic.w	r3, r3, #8
 800564a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f023 0304 	bic.w	r3, r3, #4
 800565c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a1b      	ldr	r2, [pc, #108]	@ (80056d0 <TIM_OC1_SetConfig+0x10c>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00f      	beq.n	8005686 <TIM_OC1_SetConfig+0xc2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a1a      	ldr	r2, [pc, #104]	@ (80056d4 <TIM_OC1_SetConfig+0x110>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d00b      	beq.n	8005686 <TIM_OC1_SetConfig+0xc2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a19      	ldr	r2, [pc, #100]	@ (80056d8 <TIM_OC1_SetConfig+0x114>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d007      	beq.n	8005686 <TIM_OC1_SetConfig+0xc2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a18      	ldr	r2, [pc, #96]	@ (80056dc <TIM_OC1_SetConfig+0x118>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d003      	beq.n	8005686 <TIM_OC1_SetConfig+0xc2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a17      	ldr	r2, [pc, #92]	@ (80056e0 <TIM_OC1_SetConfig+0x11c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d111      	bne.n	80056aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800568c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	621a      	str	r2, [r3, #32]
}
 80056c4:	bf00      	nop
 80056c6:	371c      	adds	r7, #28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	40012c00 	.word	0x40012c00
 80056d4:	40013400 	.word	0x40013400
 80056d8:	40014000 	.word	0x40014000
 80056dc:	40014400 	.word	0x40014400
 80056e0:	40014800 	.word	0x40014800

080056e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
 80056f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	f023 0210 	bic.w	r2, r3, #16
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005712:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800571e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	021b      	lsls	r3, r3, #8
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4313      	orrs	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f023 0320 	bic.w	r3, r3, #32
 8005732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a28      	ldr	r2, [pc, #160]	@ (80057e4 <TIM_OC2_SetConfig+0x100>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d003      	beq.n	8005750 <TIM_OC2_SetConfig+0x6c>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a27      	ldr	r2, [pc, #156]	@ (80057e8 <TIM_OC2_SetConfig+0x104>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d10d      	bne.n	800576c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	4313      	orrs	r3, r2
 8005762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800576a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a1d      	ldr	r2, [pc, #116]	@ (80057e4 <TIM_OC2_SetConfig+0x100>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d00f      	beq.n	8005794 <TIM_OC2_SetConfig+0xb0>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a1c      	ldr	r2, [pc, #112]	@ (80057e8 <TIM_OC2_SetConfig+0x104>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00b      	beq.n	8005794 <TIM_OC2_SetConfig+0xb0>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a1b      	ldr	r2, [pc, #108]	@ (80057ec <TIM_OC2_SetConfig+0x108>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d007      	beq.n	8005794 <TIM_OC2_SetConfig+0xb0>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a1a      	ldr	r2, [pc, #104]	@ (80057f0 <TIM_OC2_SetConfig+0x10c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d003      	beq.n	8005794 <TIM_OC2_SetConfig+0xb0>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a19      	ldr	r2, [pc, #100]	@ (80057f4 <TIM_OC2_SetConfig+0x110>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d113      	bne.n	80057bc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800579a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	621a      	str	r2, [r3, #32]
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40012c00 	.word	0x40012c00
 80057e8:	40013400 	.word	0x40013400
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40014400 	.word	0x40014400
 80057f4:	40014800 	.word	0x40014800

080057f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005826:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800582a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0303 	bic.w	r3, r3, #3
 8005832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005844:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	021b      	lsls	r3, r3, #8
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a27      	ldr	r2, [pc, #156]	@ (80058f4 <TIM_OC3_SetConfig+0xfc>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d003      	beq.n	8005862 <TIM_OC3_SetConfig+0x6a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a26      	ldr	r2, [pc, #152]	@ (80058f8 <TIM_OC3_SetConfig+0x100>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d10d      	bne.n	800587e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005868:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	021b      	lsls	r3, r3, #8
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800587c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a1c      	ldr	r2, [pc, #112]	@ (80058f4 <TIM_OC3_SetConfig+0xfc>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00f      	beq.n	80058a6 <TIM_OC3_SetConfig+0xae>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a1b      	ldr	r2, [pc, #108]	@ (80058f8 <TIM_OC3_SetConfig+0x100>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00b      	beq.n	80058a6 <TIM_OC3_SetConfig+0xae>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a1a      	ldr	r2, [pc, #104]	@ (80058fc <TIM_OC3_SetConfig+0x104>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d007      	beq.n	80058a6 <TIM_OC3_SetConfig+0xae>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a19      	ldr	r2, [pc, #100]	@ (8005900 <TIM_OC3_SetConfig+0x108>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d003      	beq.n	80058a6 <TIM_OC3_SetConfig+0xae>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a18      	ldr	r2, [pc, #96]	@ (8005904 <TIM_OC3_SetConfig+0x10c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d113      	bne.n	80058ce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	697a      	ldr	r2, [r7, #20]
 80058e6:	621a      	str	r2, [r3, #32]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	40012c00 	.word	0x40012c00
 80058f8:	40013400 	.word	0x40013400
 80058fc:	40014000 	.word	0x40014000
 8005900:	40014400 	.word	0x40014400
 8005904:	40014800 	.word	0x40014800

08005908 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005936:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800593a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	021b      	lsls	r3, r3, #8
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	031b      	lsls	r3, r3, #12
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a18      	ldr	r2, [pc, #96]	@ (80059c8 <TIM_OC4_SetConfig+0xc0>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00f      	beq.n	800598c <TIM_OC4_SetConfig+0x84>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a17      	ldr	r2, [pc, #92]	@ (80059cc <TIM_OC4_SetConfig+0xc4>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00b      	beq.n	800598c <TIM_OC4_SetConfig+0x84>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a16      	ldr	r2, [pc, #88]	@ (80059d0 <TIM_OC4_SetConfig+0xc8>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d007      	beq.n	800598c <TIM_OC4_SetConfig+0x84>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a15      	ldr	r2, [pc, #84]	@ (80059d4 <TIM_OC4_SetConfig+0xcc>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_OC4_SetConfig+0x84>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a14      	ldr	r2, [pc, #80]	@ (80059d8 <TIM_OC4_SetConfig+0xd0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d109      	bne.n	80059a0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005992:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	019b      	lsls	r3, r3, #6
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	621a      	str	r2, [r3, #32]
}
 80059ba:	bf00      	nop
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40012c00 	.word	0x40012c00
 80059cc:	40013400 	.word	0x40013400
 80059d0:	40014000 	.word	0x40014000
 80059d4:	40014400 	.word	0x40014400
 80059d8:	40014800 	.word	0x40014800

080059dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005a20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	041b      	lsls	r3, r3, #16
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a17      	ldr	r2, [pc, #92]	@ (8005a90 <TIM_OC5_SetConfig+0xb4>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00f      	beq.n	8005a56 <TIM_OC5_SetConfig+0x7a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a16      	ldr	r2, [pc, #88]	@ (8005a94 <TIM_OC5_SetConfig+0xb8>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00b      	beq.n	8005a56 <TIM_OC5_SetConfig+0x7a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a15      	ldr	r2, [pc, #84]	@ (8005a98 <TIM_OC5_SetConfig+0xbc>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d007      	beq.n	8005a56 <TIM_OC5_SetConfig+0x7a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a14      	ldr	r2, [pc, #80]	@ (8005a9c <TIM_OC5_SetConfig+0xc0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d003      	beq.n	8005a56 <TIM_OC5_SetConfig+0x7a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a13      	ldr	r2, [pc, #76]	@ (8005aa0 <TIM_OC5_SetConfig+0xc4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d109      	bne.n	8005a6a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	021b      	lsls	r3, r3, #8
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	621a      	str	r2, [r3, #32]
}
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	40012c00 	.word	0x40012c00
 8005a94:	40013400 	.word	0x40013400
 8005a98:	40014000 	.word	0x40014000
 8005a9c:	40014400 	.word	0x40014400
 8005aa0:	40014800 	.word	0x40014800

08005aa4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ad2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	051b      	lsls	r3, r3, #20
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a18      	ldr	r2, [pc, #96]	@ (8005b5c <TIM_OC6_SetConfig+0xb8>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d00f      	beq.n	8005b20 <TIM_OC6_SetConfig+0x7c>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a17      	ldr	r2, [pc, #92]	@ (8005b60 <TIM_OC6_SetConfig+0xbc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00b      	beq.n	8005b20 <TIM_OC6_SetConfig+0x7c>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a16      	ldr	r2, [pc, #88]	@ (8005b64 <TIM_OC6_SetConfig+0xc0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d007      	beq.n	8005b20 <TIM_OC6_SetConfig+0x7c>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a15      	ldr	r2, [pc, #84]	@ (8005b68 <TIM_OC6_SetConfig+0xc4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d003      	beq.n	8005b20 <TIM_OC6_SetConfig+0x7c>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a14      	ldr	r2, [pc, #80]	@ (8005b6c <TIM_OC6_SetConfig+0xc8>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d109      	bne.n	8005b34 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	029b      	lsls	r3, r3, #10
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	621a      	str	r2, [r3, #32]
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40012c00 	.word	0x40012c00
 8005b60:	40013400 	.word	0x40013400
 8005b64:	40014000 	.word	0x40014000
 8005b68:	40014400 	.word	0x40014400
 8005b6c:	40014800 	.word	0x40014800

08005b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b087      	sub	sp, #28
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	f023 0201 	bic.w	r2, r3, #1
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f023 030a 	bic.w	r3, r3, #10
 8005bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	621a      	str	r2, [r3, #32]
}
 8005bc2:	bf00      	nop
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b087      	sub	sp, #28
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	f023 0210 	bic.w	r2, r3, #16
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	031b      	lsls	r3, r3, #12
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b085      	sub	sp, #20
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	f043 0307 	orr.w	r3, r3, #7
 8005c50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	609a      	str	r2, [r3, #8]
}
 8005c58:	bf00      	nop
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	021a      	lsls	r2, r3, #8
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	609a      	str	r2, [r3, #8]
}
 8005c98:	bf00      	nop
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f003 031f 	and.w	r3, r3, #31
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a1a      	ldr	r2, [r3, #32]
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	401a      	ands	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a1a      	ldr	r2, [r3, #32]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f003 031f 	and.w	r3, r3, #31
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	621a      	str	r2, [r3, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
	...

08005cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e068      	b.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d004      	beq.n	8005d3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a2d      	ldr	r2, [pc, #180]	@ (8005dec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d108      	bne.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d01d      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d7a:	d018      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1b      	ldr	r2, [pc, #108]	@ (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d013      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1a      	ldr	r2, [pc, #104]	@ (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d00e      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a18      	ldr	r2, [pc, #96]	@ (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d009      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a13      	ldr	r2, [pc, #76]	@ (8005dec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d004      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a14      	ldr	r2, [pc, #80]	@ (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d10c      	bne.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40012c00 	.word	0x40012c00
 8005dec:	40013400 	.word	0x40013400
 8005df0:	40000400 	.word	0x40000400
 8005df4:	40000800 	.word	0x40000800
 8005df8:	40000c00 	.word	0x40000c00
 8005dfc:	40014000 	.word	0x40014000

08005e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e040      	b.n	8005e94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fc fb70 	bl	8002508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2224      	movs	r2, #36	@ 0x24
 8005e2c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0201 	bic.w	r2, r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fedc 	bl	8006c04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fc21 	bl	8006694 <UART_SetConfig>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e01b      	b.n	8005e94 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689a      	ldr	r2, [r3, #8]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0201 	orr.w	r2, r2, #1
 8005e8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 ff5b 	bl	8006d48 <UART_CheckIdleState>
 8005e92:	4603      	mov	r3, r0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08a      	sub	sp, #40	@ 0x28
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005eb0:	2b20      	cmp	r3, #32
 8005eb2:	d177      	bne.n	8005fa4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <HAL_UART_Transmit+0x24>
 8005eba:	88fb      	ldrh	r3, [r7, #6]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e070      	b.n	8005fa6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2221      	movs	r2, #33	@ 0x21
 8005ed0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ed2:	f7fc ff83 	bl	8002ddc <HAL_GetTick>
 8005ed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	88fa      	ldrh	r2, [r7, #6]
 8005edc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	88fa      	ldrh	r2, [r7, #6]
 8005ee4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ef0:	d108      	bne.n	8005f04 <HAL_UART_Transmit+0x68>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d104      	bne.n	8005f04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	61bb      	str	r3, [r7, #24]
 8005f02:	e003      	b.n	8005f0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f0c:	e02f      	b.n	8005f6e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2200      	movs	r2, #0
 8005f16:	2180      	movs	r1, #128	@ 0x80
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 ffbd 	bl	8006e98 <UART_WaitOnFlagUntilTimeout>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d004      	beq.n	8005f2e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e03b      	b.n	8005fa6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10b      	bne.n	8005f4c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	881a      	ldrh	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f40:	b292      	uxth	r2, r2
 8005f42:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	3302      	adds	r3, #2
 8005f48:	61bb      	str	r3, [r7, #24]
 8005f4a:	e007      	b.n	8005f5c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	781a      	ldrb	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1c9      	bne.n	8005f0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2200      	movs	r2, #0
 8005f82:	2140      	movs	r1, #64	@ 0x40
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 ff87 	bl	8006e98 <UART_WaitOnFlagUntilTimeout>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d004      	beq.n	8005f9a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2220      	movs	r2, #32
 8005f94:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e005      	b.n	8005fa6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e000      	b.n	8005fa6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005fa4:	2302      	movs	r3, #2
  }
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3720      	adds	r7, #32
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b08a      	sub	sp, #40	@ 0x28
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fc4:	2b20      	cmp	r3, #32
 8005fc6:	d137      	bne.n	8006038 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <HAL_UART_Receive_IT+0x24>
 8005fce:	88fb      	ldrh	r3, [r7, #6]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e030      	b.n	800603a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a18      	ldr	r2, [pc, #96]	@ (8006044 <HAL_UART_Receive_IT+0x94>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d01f      	beq.n	8006028 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d018      	beq.n	8006028 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	e853 3f00 	ldrex	r3, [r3]
 8006002:	613b      	str	r3, [r7, #16]
   return(result);
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800600a:	627b      	str	r3, [r7, #36]	@ 0x24
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006014:	623b      	str	r3, [r7, #32]
 8006016:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	69f9      	ldr	r1, [r7, #28]
 800601a:	6a3a      	ldr	r2, [r7, #32]
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	61bb      	str	r3, [r7, #24]
   return(result);
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e6      	bne.n	8005ff6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006028:	88fb      	ldrh	r3, [r7, #6]
 800602a:	461a      	mov	r2, r3
 800602c:	68b9      	ldr	r1, [r7, #8]
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 ffa0 	bl	8006f74 <UART_Start_Receive_IT>
 8006034:	4603      	mov	r3, r0
 8006036:	e000      	b.n	800603a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006038:	2302      	movs	r3, #2
  }
}
 800603a:	4618      	mov	r0, r3
 800603c:	3728      	adds	r7, #40	@ 0x28
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40008000 	.word	0x40008000

08006048 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b0ba      	sub	sp, #232	@ 0xe8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800606e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006072:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006076:	4013      	ands	r3, r2
 8006078:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800607c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006080:	2b00      	cmp	r3, #0
 8006082:	d115      	bne.n	80060b0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00f      	beq.n	80060b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b00      	cmp	r3, #0
 800609a:	d009      	beq.n	80060b0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 82ca 	beq.w	800663a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	4798      	blx	r3
      }
      return;
 80060ae:	e2c4      	b.n	800663a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80060b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 8117 	beq.w	80062e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80060ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80060c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80060ca:	4b85      	ldr	r3, [pc, #532]	@ (80062e0 <HAL_UART_IRQHandler+0x298>)
 80060cc:	4013      	ands	r3, r2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 810a 	beq.w	80062e8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d011      	beq.n	8006104 <HAL_UART_IRQHandler+0xbc>
 80060e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2201      	movs	r2, #1
 80060f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060fa:	f043 0201 	orr.w	r2, r3, #1
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d011      	beq.n	8006134 <HAL_UART_IRQHandler+0xec>
 8006110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00b      	beq.n	8006134 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2202      	movs	r2, #2
 8006122:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800612a:	f043 0204 	orr.w	r2, r3, #4
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	d011      	beq.n	8006164 <HAL_UART_IRQHandler+0x11c>
 8006140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00b      	beq.n	8006164 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2204      	movs	r2, #4
 8006152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800615a:	f043 0202 	orr.w	r2, r3, #2
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	2b00      	cmp	r3, #0
 800616e:	d017      	beq.n	80061a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006174:	f003 0320 	and.w	r3, r3, #32
 8006178:	2b00      	cmp	r3, #0
 800617a:	d105      	bne.n	8006188 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800617c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006180:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00b      	beq.n	80061a0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2208      	movs	r2, #8
 800618e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006196:	f043 0208 	orr.w	r2, r3, #8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80061a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d012      	beq.n	80061d2 <HAL_UART_IRQHandler+0x18a>
 80061ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00c      	beq.n	80061d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061c8:	f043 0220 	orr.w	r2, r3, #32
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 8230 	beq.w	800663e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80061de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061e2:	f003 0320 	and.w	r3, r3, #32
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00d      	beq.n	8006206 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061ee:	f003 0320 	and.w	r3, r3, #32
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d007      	beq.n	8006206 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800620c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800621a:	2b40      	cmp	r3, #64	@ 0x40
 800621c:	d005      	beq.n	800622a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800621e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006222:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006226:	2b00      	cmp	r3, #0
 8006228:	d04f      	beq.n	80062ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 ff68 	bl	8007100 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800623a:	2b40      	cmp	r3, #64	@ 0x40
 800623c:	d141      	bne.n	80062c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3308      	adds	r3, #8
 8006244:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006248:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006254:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800625c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3308      	adds	r3, #8
 8006266:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800626a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800626e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006276:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006282:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1d9      	bne.n	800623e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800628e:	2b00      	cmp	r3, #0
 8006290:	d013      	beq.n	80062ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006296:	4a13      	ldr	r2, [pc, #76]	@ (80062e4 <HAL_UART_IRQHandler+0x29c>)
 8006298:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fc fef7 	bl	8003092 <HAL_DMA_Abort_IT>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d017      	beq.n	80062da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80062b4:	4610      	mov	r0, r2
 80062b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b8:	e00f      	b.n	80062da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f9d4 	bl	8006668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c0:	e00b      	b.n	80062da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f9d0 	bl	8006668 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c8:	e007      	b.n	80062da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f9cc 	bl	8006668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80062d8:	e1b1      	b.n	800663e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062da:	bf00      	nop
    return;
 80062dc:	e1af      	b.n	800663e <HAL_UART_IRQHandler+0x5f6>
 80062de:	bf00      	nop
 80062e0:	04000120 	.word	0x04000120
 80062e4:	080071c9 	.word	0x080071c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	f040 816a 	bne.w	80065c6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f6:	f003 0310 	and.w	r3, r3, #16
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 8163 	beq.w	80065c6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 815c 	beq.w	80065c6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2210      	movs	r2, #16
 8006314:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006320:	2b40      	cmp	r3, #64	@ 0x40
 8006322:	f040 80d4 	bne.w	80064ce <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006332:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 80ad 	beq.w	8006496 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006346:	429a      	cmp	r2, r3
 8006348:	f080 80a5 	bcs.w	8006496 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006352:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0320 	and.w	r3, r3, #32
 8006362:	2b00      	cmp	r3, #0
 8006364:	f040 8086 	bne.w	8006474 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006370:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800637c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006384:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006392:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006396:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800639e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80063a2:	e841 2300 	strex	r3, r2, [r1]
 80063a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80063aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1da      	bne.n	8006368 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3308      	adds	r3, #8
 80063b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063bc:	e853 3f00 	ldrex	r3, [r3]
 80063c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80063c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063c4:	f023 0301 	bic.w	r3, r3, #1
 80063c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3308      	adds	r3, #8
 80063d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80063d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80063da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80063de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80063e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e1      	bne.n	80063b2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3308      	adds	r3, #8
 80063f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80063fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006400:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006404:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3308      	adds	r3, #8
 800640e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006412:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006414:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006418:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006420:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e3      	bne.n	80063ee <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2220      	movs	r2, #32
 800642a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006444:	f023 0310 	bic.w	r3, r3, #16
 8006448:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	461a      	mov	r2, r3
 8006452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006456:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006458:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800645c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006464:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e4      	bne.n	8006434 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800646e:	4618      	mov	r0, r3
 8006470:	f7fc fdd1 	bl	8003016 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006486:	b29b      	uxth	r3, r3
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	b29b      	uxth	r3, r3
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f8f4 	bl	800667c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006494:	e0d5      	b.n	8006642 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800649c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064a0:	429a      	cmp	r2, r3
 80064a2:	f040 80ce 	bne.w	8006642 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 0320 	and.w	r3, r3, #32
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	f040 80c5 	bne.w	8006642 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f8d8 	bl	800667c <HAL_UARTEx_RxEventCallback>
      return;
 80064cc:	e0b9      	b.n	8006642 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064da:	b29b      	uxth	r3, r3
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 80ab 	beq.w	8006646 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80064f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 80a6 	beq.w	8006646 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800650a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800650e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800651c:	647b      	str	r3, [r7, #68]	@ 0x44
 800651e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006522:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006524:	e841 2300 	strex	r3, r2, [r1]
 8006528:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800652a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e4      	bne.n	80064fa <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3308      	adds	r3, #8
 8006536:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653a:	e853 3f00 	ldrex	r3, [r3]
 800653e:	623b      	str	r3, [r7, #32]
   return(result);
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	f023 0301 	bic.w	r3, r3, #1
 8006546:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3308      	adds	r3, #8
 8006550:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006554:	633a      	str	r2, [r7, #48]	@ 0x30
 8006556:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006558:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800655a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800655c:	e841 2300 	strex	r3, r2, [r1]
 8006560:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1e3      	bne.n	8006530 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	e853 3f00 	ldrex	r3, [r3]
 8006588:	60fb      	str	r3, [r7, #12]
   return(result);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f023 0310 	bic.w	r3, r3, #16
 8006590:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	461a      	mov	r2, r3
 800659a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800659e:	61fb      	str	r3, [r7, #28]
 80065a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a2:	69b9      	ldr	r1, [r7, #24]
 80065a4:	69fa      	ldr	r2, [r7, #28]
 80065a6:	e841 2300 	strex	r3, r2, [r1]
 80065aa:	617b      	str	r3, [r7, #20]
   return(result);
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1e4      	bne.n	800657c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2202      	movs	r2, #2
 80065b6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f85c 	bl	800667c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065c4:	e03f      	b.n	8006646 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00e      	beq.n	80065f0 <HAL_UART_IRQHandler+0x5a8>
 80065d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d008      	beq.n	80065f0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80065e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 ffe9 	bl	80075c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065ee:	e02d      	b.n	800664c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80065f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00e      	beq.n	800661a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80065fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006604:	2b00      	cmp	r3, #0
 8006606:	d008      	beq.n	800661a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800660c:	2b00      	cmp	r3, #0
 800660e:	d01c      	beq.n	800664a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	4798      	blx	r3
    }
    return;
 8006618:	e017      	b.n	800664a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800661a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800661e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006622:	2b00      	cmp	r3, #0
 8006624:	d012      	beq.n	800664c <HAL_UART_IRQHandler+0x604>
 8006626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800662a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00c      	beq.n	800664c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fdde 	bl	80071f4 <UART_EndTransmit_IT>
    return;
 8006638:	e008      	b.n	800664c <HAL_UART_IRQHandler+0x604>
      return;
 800663a:	bf00      	nop
 800663c:	e006      	b.n	800664c <HAL_UART_IRQHandler+0x604>
    return;
 800663e:	bf00      	nop
 8006640:	e004      	b.n	800664c <HAL_UART_IRQHandler+0x604>
      return;
 8006642:	bf00      	nop
 8006644:	e002      	b.n	800664c <HAL_UART_IRQHandler+0x604>
      return;
 8006646:	bf00      	nop
 8006648:	e000      	b.n	800664c <HAL_UART_IRQHandler+0x604>
    return;
 800664a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800664c:	37e8      	adds	r7, #232	@ 0xe8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop

08006654 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006698:	b08a      	sub	sp, #40	@ 0x28
 800669a:	af00      	add	r7, sp, #0
 800669c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	431a      	orrs	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	431a      	orrs	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4ba4      	ldr	r3, [pc, #656]	@ (8006954 <UART_SetConfig+0x2c0>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	6812      	ldr	r2, [r2, #0]
 80066ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066cc:	430b      	orrs	r3, r1
 80066ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a99      	ldr	r2, [pc, #612]	@ (8006958 <UART_SetConfig+0x2c4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d004      	beq.n	8006700 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066fc:	4313      	orrs	r3, r2
 80066fe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006710:	430a      	orrs	r2, r1
 8006712:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a90      	ldr	r2, [pc, #576]	@ (800695c <UART_SetConfig+0x2c8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d126      	bne.n	800676c <UART_SetConfig+0xd8>
 800671e:	4b90      	ldr	r3, [pc, #576]	@ (8006960 <UART_SetConfig+0x2cc>)
 8006720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006724:	f003 0303 	and.w	r3, r3, #3
 8006728:	2b03      	cmp	r3, #3
 800672a:	d81b      	bhi.n	8006764 <UART_SetConfig+0xd0>
 800672c:	a201      	add	r2, pc, #4	@ (adr r2, 8006734 <UART_SetConfig+0xa0>)
 800672e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006732:	bf00      	nop
 8006734:	08006745 	.word	0x08006745
 8006738:	08006755 	.word	0x08006755
 800673c:	0800674d 	.word	0x0800674d
 8006740:	0800675d 	.word	0x0800675d
 8006744:	2301      	movs	r3, #1
 8006746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800674a:	e116      	b.n	800697a <UART_SetConfig+0x2e6>
 800674c:	2302      	movs	r3, #2
 800674e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006752:	e112      	b.n	800697a <UART_SetConfig+0x2e6>
 8006754:	2304      	movs	r3, #4
 8006756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800675a:	e10e      	b.n	800697a <UART_SetConfig+0x2e6>
 800675c:	2308      	movs	r3, #8
 800675e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006762:	e10a      	b.n	800697a <UART_SetConfig+0x2e6>
 8006764:	2310      	movs	r3, #16
 8006766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800676a:	e106      	b.n	800697a <UART_SetConfig+0x2e6>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a7c      	ldr	r2, [pc, #496]	@ (8006964 <UART_SetConfig+0x2d0>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d138      	bne.n	80067e8 <UART_SetConfig+0x154>
 8006776:	4b7a      	ldr	r3, [pc, #488]	@ (8006960 <UART_SetConfig+0x2cc>)
 8006778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800677c:	f003 030c 	and.w	r3, r3, #12
 8006780:	2b0c      	cmp	r3, #12
 8006782:	d82d      	bhi.n	80067e0 <UART_SetConfig+0x14c>
 8006784:	a201      	add	r2, pc, #4	@ (adr r2, 800678c <UART_SetConfig+0xf8>)
 8006786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678a:	bf00      	nop
 800678c:	080067c1 	.word	0x080067c1
 8006790:	080067e1 	.word	0x080067e1
 8006794:	080067e1 	.word	0x080067e1
 8006798:	080067e1 	.word	0x080067e1
 800679c:	080067d1 	.word	0x080067d1
 80067a0:	080067e1 	.word	0x080067e1
 80067a4:	080067e1 	.word	0x080067e1
 80067a8:	080067e1 	.word	0x080067e1
 80067ac:	080067c9 	.word	0x080067c9
 80067b0:	080067e1 	.word	0x080067e1
 80067b4:	080067e1 	.word	0x080067e1
 80067b8:	080067e1 	.word	0x080067e1
 80067bc:	080067d9 	.word	0x080067d9
 80067c0:	2300      	movs	r3, #0
 80067c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067c6:	e0d8      	b.n	800697a <UART_SetConfig+0x2e6>
 80067c8:	2302      	movs	r3, #2
 80067ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ce:	e0d4      	b.n	800697a <UART_SetConfig+0x2e6>
 80067d0:	2304      	movs	r3, #4
 80067d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067d6:	e0d0      	b.n	800697a <UART_SetConfig+0x2e6>
 80067d8:	2308      	movs	r3, #8
 80067da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067de:	e0cc      	b.n	800697a <UART_SetConfig+0x2e6>
 80067e0:	2310      	movs	r3, #16
 80067e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067e6:	e0c8      	b.n	800697a <UART_SetConfig+0x2e6>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a5e      	ldr	r2, [pc, #376]	@ (8006968 <UART_SetConfig+0x2d4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d125      	bne.n	800683e <UART_SetConfig+0x1aa>
 80067f2:	4b5b      	ldr	r3, [pc, #364]	@ (8006960 <UART_SetConfig+0x2cc>)
 80067f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80067fc:	2b30      	cmp	r3, #48	@ 0x30
 80067fe:	d016      	beq.n	800682e <UART_SetConfig+0x19a>
 8006800:	2b30      	cmp	r3, #48	@ 0x30
 8006802:	d818      	bhi.n	8006836 <UART_SetConfig+0x1a2>
 8006804:	2b20      	cmp	r3, #32
 8006806:	d00a      	beq.n	800681e <UART_SetConfig+0x18a>
 8006808:	2b20      	cmp	r3, #32
 800680a:	d814      	bhi.n	8006836 <UART_SetConfig+0x1a2>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <UART_SetConfig+0x182>
 8006810:	2b10      	cmp	r3, #16
 8006812:	d008      	beq.n	8006826 <UART_SetConfig+0x192>
 8006814:	e00f      	b.n	8006836 <UART_SetConfig+0x1a2>
 8006816:	2300      	movs	r3, #0
 8006818:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800681c:	e0ad      	b.n	800697a <UART_SetConfig+0x2e6>
 800681e:	2302      	movs	r3, #2
 8006820:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006824:	e0a9      	b.n	800697a <UART_SetConfig+0x2e6>
 8006826:	2304      	movs	r3, #4
 8006828:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800682c:	e0a5      	b.n	800697a <UART_SetConfig+0x2e6>
 800682e:	2308      	movs	r3, #8
 8006830:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006834:	e0a1      	b.n	800697a <UART_SetConfig+0x2e6>
 8006836:	2310      	movs	r3, #16
 8006838:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800683c:	e09d      	b.n	800697a <UART_SetConfig+0x2e6>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a4a      	ldr	r2, [pc, #296]	@ (800696c <UART_SetConfig+0x2d8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d125      	bne.n	8006894 <UART_SetConfig+0x200>
 8006848:	4b45      	ldr	r3, [pc, #276]	@ (8006960 <UART_SetConfig+0x2cc>)
 800684a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800684e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006852:	2bc0      	cmp	r3, #192	@ 0xc0
 8006854:	d016      	beq.n	8006884 <UART_SetConfig+0x1f0>
 8006856:	2bc0      	cmp	r3, #192	@ 0xc0
 8006858:	d818      	bhi.n	800688c <UART_SetConfig+0x1f8>
 800685a:	2b80      	cmp	r3, #128	@ 0x80
 800685c:	d00a      	beq.n	8006874 <UART_SetConfig+0x1e0>
 800685e:	2b80      	cmp	r3, #128	@ 0x80
 8006860:	d814      	bhi.n	800688c <UART_SetConfig+0x1f8>
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <UART_SetConfig+0x1d8>
 8006866:	2b40      	cmp	r3, #64	@ 0x40
 8006868:	d008      	beq.n	800687c <UART_SetConfig+0x1e8>
 800686a:	e00f      	b.n	800688c <UART_SetConfig+0x1f8>
 800686c:	2300      	movs	r3, #0
 800686e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006872:	e082      	b.n	800697a <UART_SetConfig+0x2e6>
 8006874:	2302      	movs	r3, #2
 8006876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800687a:	e07e      	b.n	800697a <UART_SetConfig+0x2e6>
 800687c:	2304      	movs	r3, #4
 800687e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006882:	e07a      	b.n	800697a <UART_SetConfig+0x2e6>
 8006884:	2308      	movs	r3, #8
 8006886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800688a:	e076      	b.n	800697a <UART_SetConfig+0x2e6>
 800688c:	2310      	movs	r3, #16
 800688e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006892:	e072      	b.n	800697a <UART_SetConfig+0x2e6>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a35      	ldr	r2, [pc, #212]	@ (8006970 <UART_SetConfig+0x2dc>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d12a      	bne.n	80068f4 <UART_SetConfig+0x260>
 800689e:	4b30      	ldr	r3, [pc, #192]	@ (8006960 <UART_SetConfig+0x2cc>)
 80068a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068ac:	d01a      	beq.n	80068e4 <UART_SetConfig+0x250>
 80068ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068b2:	d81b      	bhi.n	80068ec <UART_SetConfig+0x258>
 80068b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068b8:	d00c      	beq.n	80068d4 <UART_SetConfig+0x240>
 80068ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068be:	d815      	bhi.n	80068ec <UART_SetConfig+0x258>
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d003      	beq.n	80068cc <UART_SetConfig+0x238>
 80068c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068c8:	d008      	beq.n	80068dc <UART_SetConfig+0x248>
 80068ca:	e00f      	b.n	80068ec <UART_SetConfig+0x258>
 80068cc:	2300      	movs	r3, #0
 80068ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068d2:	e052      	b.n	800697a <UART_SetConfig+0x2e6>
 80068d4:	2302      	movs	r3, #2
 80068d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068da:	e04e      	b.n	800697a <UART_SetConfig+0x2e6>
 80068dc:	2304      	movs	r3, #4
 80068de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068e2:	e04a      	b.n	800697a <UART_SetConfig+0x2e6>
 80068e4:	2308      	movs	r3, #8
 80068e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ea:	e046      	b.n	800697a <UART_SetConfig+0x2e6>
 80068ec:	2310      	movs	r3, #16
 80068ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068f2:	e042      	b.n	800697a <UART_SetConfig+0x2e6>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a17      	ldr	r2, [pc, #92]	@ (8006958 <UART_SetConfig+0x2c4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d13a      	bne.n	8006974 <UART_SetConfig+0x2e0>
 80068fe:	4b18      	ldr	r3, [pc, #96]	@ (8006960 <UART_SetConfig+0x2cc>)
 8006900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006904:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006908:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800690c:	d01a      	beq.n	8006944 <UART_SetConfig+0x2b0>
 800690e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006912:	d81b      	bhi.n	800694c <UART_SetConfig+0x2b8>
 8006914:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006918:	d00c      	beq.n	8006934 <UART_SetConfig+0x2a0>
 800691a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800691e:	d815      	bhi.n	800694c <UART_SetConfig+0x2b8>
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <UART_SetConfig+0x298>
 8006924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006928:	d008      	beq.n	800693c <UART_SetConfig+0x2a8>
 800692a:	e00f      	b.n	800694c <UART_SetConfig+0x2b8>
 800692c:	2300      	movs	r3, #0
 800692e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006932:	e022      	b.n	800697a <UART_SetConfig+0x2e6>
 8006934:	2302      	movs	r3, #2
 8006936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800693a:	e01e      	b.n	800697a <UART_SetConfig+0x2e6>
 800693c:	2304      	movs	r3, #4
 800693e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006942:	e01a      	b.n	800697a <UART_SetConfig+0x2e6>
 8006944:	2308      	movs	r3, #8
 8006946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800694a:	e016      	b.n	800697a <UART_SetConfig+0x2e6>
 800694c:	2310      	movs	r3, #16
 800694e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006952:	e012      	b.n	800697a <UART_SetConfig+0x2e6>
 8006954:	efff69f3 	.word	0xefff69f3
 8006958:	40008000 	.word	0x40008000
 800695c:	40013800 	.word	0x40013800
 8006960:	40021000 	.word	0x40021000
 8006964:	40004400 	.word	0x40004400
 8006968:	40004800 	.word	0x40004800
 800696c:	40004c00 	.word	0x40004c00
 8006970:	40005000 	.word	0x40005000
 8006974:	2310      	movs	r3, #16
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a9f      	ldr	r2, [pc, #636]	@ (8006bfc <UART_SetConfig+0x568>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d17a      	bne.n	8006a7a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006984:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006988:	2b08      	cmp	r3, #8
 800698a:	d824      	bhi.n	80069d6 <UART_SetConfig+0x342>
 800698c:	a201      	add	r2, pc, #4	@ (adr r2, 8006994 <UART_SetConfig+0x300>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069b9 	.word	0x080069b9
 8006998:	080069d7 	.word	0x080069d7
 800699c:	080069c1 	.word	0x080069c1
 80069a0:	080069d7 	.word	0x080069d7
 80069a4:	080069c7 	.word	0x080069c7
 80069a8:	080069d7 	.word	0x080069d7
 80069ac:	080069d7 	.word	0x080069d7
 80069b0:	080069d7 	.word	0x080069d7
 80069b4:	080069cf 	.word	0x080069cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b8:	f7fd fb46 	bl	8004048 <HAL_RCC_GetPCLK1Freq>
 80069bc:	61f8      	str	r0, [r7, #28]
        break;
 80069be:	e010      	b.n	80069e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069c0:	4b8f      	ldr	r3, [pc, #572]	@ (8006c00 <UART_SetConfig+0x56c>)
 80069c2:	61fb      	str	r3, [r7, #28]
        break;
 80069c4:	e00d      	b.n	80069e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069c6:	f7fd faa7 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 80069ca:	61f8      	str	r0, [r7, #28]
        break;
 80069cc:	e009      	b.n	80069e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069d2:	61fb      	str	r3, [r7, #28]
        break;
 80069d4:	e005      	b.n	80069e2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80069e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 80fb 	beq.w	8006be0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	4613      	mov	r3, r2
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	4413      	add	r3, r2
 80069f4:	69fa      	ldr	r2, [r7, #28]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d305      	bcc.n	8006a06 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d903      	bls.n	8006a0e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a0c:	e0e8      	b.n	8006be0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	2200      	movs	r2, #0
 8006a12:	461c      	mov	r4, r3
 8006a14:	4615      	mov	r5, r2
 8006a16:	f04f 0200 	mov.w	r2, #0
 8006a1a:	f04f 0300 	mov.w	r3, #0
 8006a1e:	022b      	lsls	r3, r5, #8
 8006a20:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006a24:	0222      	lsls	r2, r4, #8
 8006a26:	68f9      	ldr	r1, [r7, #12]
 8006a28:	6849      	ldr	r1, [r1, #4]
 8006a2a:	0849      	lsrs	r1, r1, #1
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	4688      	mov	r8, r1
 8006a30:	4681      	mov	r9, r0
 8006a32:	eb12 0a08 	adds.w	sl, r2, r8
 8006a36:	eb43 0b09 	adc.w	fp, r3, r9
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	603b      	str	r3, [r7, #0]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a48:	4650      	mov	r0, sl
 8006a4a:	4659      	mov	r1, fp
 8006a4c:	f7fa f8fc 	bl	8000c48 <__aeabi_uldivmod>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4613      	mov	r3, r2
 8006a56:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a5e:	d308      	bcc.n	8006a72 <UART_SetConfig+0x3de>
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a66:	d204      	bcs.n	8006a72 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	60da      	str	r2, [r3, #12]
 8006a70:	e0b6      	b.n	8006be0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a78:	e0b2      	b.n	8006be0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a82:	d15e      	bne.n	8006b42 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006a84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d828      	bhi.n	8006ade <UART_SetConfig+0x44a>
 8006a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a94 <UART_SetConfig+0x400>)
 8006a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a92:	bf00      	nop
 8006a94:	08006ab9 	.word	0x08006ab9
 8006a98:	08006ac1 	.word	0x08006ac1
 8006a9c:	08006ac9 	.word	0x08006ac9
 8006aa0:	08006adf 	.word	0x08006adf
 8006aa4:	08006acf 	.word	0x08006acf
 8006aa8:	08006adf 	.word	0x08006adf
 8006aac:	08006adf 	.word	0x08006adf
 8006ab0:	08006adf 	.word	0x08006adf
 8006ab4:	08006ad7 	.word	0x08006ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab8:	f7fd fac6 	bl	8004048 <HAL_RCC_GetPCLK1Freq>
 8006abc:	61f8      	str	r0, [r7, #28]
        break;
 8006abe:	e014      	b.n	8006aea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ac0:	f7fd fad8 	bl	8004074 <HAL_RCC_GetPCLK2Freq>
 8006ac4:	61f8      	str	r0, [r7, #28]
        break;
 8006ac6:	e010      	b.n	8006aea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8006c00 <UART_SetConfig+0x56c>)
 8006aca:	61fb      	str	r3, [r7, #28]
        break;
 8006acc:	e00d      	b.n	8006aea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ace:	f7fd fa23 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8006ad2:	61f8      	str	r0, [r7, #28]
        break;
 8006ad4:	e009      	b.n	8006aea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ada:	61fb      	str	r3, [r7, #28]
        break;
 8006adc:	e005      	b.n	8006aea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ae8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d077      	beq.n	8006be0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	005a      	lsls	r2, r3, #1
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	085b      	lsrs	r3, r3, #1
 8006afa:	441a      	add	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b04:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	2b0f      	cmp	r3, #15
 8006b0a:	d916      	bls.n	8006b3a <UART_SetConfig+0x4a6>
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b12:	d212      	bcs.n	8006b3a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	f023 030f 	bic.w	r3, r3, #15
 8006b1c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	085b      	lsrs	r3, r3, #1
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	8afb      	ldrh	r3, [r7, #22]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	8afa      	ldrh	r2, [r7, #22]
 8006b36:	60da      	str	r2, [r3, #12]
 8006b38:	e052      	b.n	8006be0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b40:	e04e      	b.n	8006be0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b46:	2b08      	cmp	r3, #8
 8006b48:	d827      	bhi.n	8006b9a <UART_SetConfig+0x506>
 8006b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b50 <UART_SetConfig+0x4bc>)
 8006b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b50:	08006b75 	.word	0x08006b75
 8006b54:	08006b7d 	.word	0x08006b7d
 8006b58:	08006b85 	.word	0x08006b85
 8006b5c:	08006b9b 	.word	0x08006b9b
 8006b60:	08006b8b 	.word	0x08006b8b
 8006b64:	08006b9b 	.word	0x08006b9b
 8006b68:	08006b9b 	.word	0x08006b9b
 8006b6c:	08006b9b 	.word	0x08006b9b
 8006b70:	08006b93 	.word	0x08006b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b74:	f7fd fa68 	bl	8004048 <HAL_RCC_GetPCLK1Freq>
 8006b78:	61f8      	str	r0, [r7, #28]
        break;
 8006b7a:	e014      	b.n	8006ba6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b7c:	f7fd fa7a 	bl	8004074 <HAL_RCC_GetPCLK2Freq>
 8006b80:	61f8      	str	r0, [r7, #28]
        break;
 8006b82:	e010      	b.n	8006ba6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b84:	4b1e      	ldr	r3, [pc, #120]	@ (8006c00 <UART_SetConfig+0x56c>)
 8006b86:	61fb      	str	r3, [r7, #28]
        break;
 8006b88:	e00d      	b.n	8006ba6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b8a:	f7fd f9c5 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8006b8e:	61f8      	str	r0, [r7, #28]
        break;
 8006b90:	e009      	b.n	8006ba6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b96:	61fb      	str	r3, [r7, #28]
        break;
 8006b98:	e005      	b.n	8006ba6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ba4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d019      	beq.n	8006be0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	085a      	lsrs	r2, r3, #1
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	441a      	add	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bbe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2b0f      	cmp	r3, #15
 8006bc4:	d909      	bls.n	8006bda <UART_SetConfig+0x546>
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bcc:	d205      	bcs.n	8006bda <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60da      	str	r2, [r3, #12]
 8006bd8:	e002      	b.n	8006be0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006bec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3728      	adds	r7, #40	@ 0x28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bfa:	bf00      	nop
 8006bfc:	40008000 	.word	0x40008000
 8006c00:	00f42400 	.word	0x00f42400

08006c04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00a      	beq.n	8006c2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c54:	f003 0302 	and.w	r3, r3, #2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00a      	beq.n	8006c72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c76:	f003 0304 	and.w	r3, r3, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c98:	f003 0310 	and.w	r3, r3, #16
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00a      	beq.n	8006cb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d01a      	beq.n	8006d1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d02:	d10a      	bne.n	8006d1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	605a      	str	r2, [r3, #4]
  }
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b098      	sub	sp, #96	@ 0x60
 8006d4c:	af02      	add	r7, sp, #8
 8006d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d58:	f7fc f840 	bl	8002ddc <HAL_GetTick>
 8006d5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0308 	and.w	r3, r3, #8
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d12e      	bne.n	8006dca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d74:	2200      	movs	r2, #0
 8006d76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f88c 	bl	8006e98 <UART_WaitOnFlagUntilTimeout>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d021      	beq.n	8006dca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d8e:	e853 3f00 	ldrex	r3, [r3]
 8006d92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	461a      	mov	r2, r3
 8006da2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006da6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006daa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dac:	e841 2300 	strex	r3, r2, [r1]
 8006db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1e6      	bne.n	8006d86 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2220      	movs	r2, #32
 8006dbc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e062      	b.n	8006e90 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b04      	cmp	r3, #4
 8006dd6:	d149      	bne.n	8006e6c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006de0:	2200      	movs	r2, #0
 8006de2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f856 	bl	8006e98 <UART_WaitOnFlagUntilTimeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d03c      	beq.n	8006e6c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	623b      	str	r3, [r7, #32]
   return(result);
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e10:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e6      	bne.n	8006df2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3308      	adds	r3, #8
 8006e2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	e853 3f00 	ldrex	r3, [r3]
 8006e32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0301 	bic.w	r3, r3, #1
 8006e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3308      	adds	r3, #8
 8006e42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e44:	61fa      	str	r2, [r7, #28]
 8006e46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	69b9      	ldr	r1, [r7, #24]
 8006e4a:	69fa      	ldr	r2, [r7, #28]
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	617b      	str	r3, [r7, #20]
   return(result);
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e5      	bne.n	8006e24 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e011      	b.n	8006e90 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3758      	adds	r7, #88	@ 0x58
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	603b      	str	r3, [r7, #0]
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ea8:	e04f      	b.n	8006f4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb0:	d04b      	beq.n	8006f4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eb2:	f7fb ff93 	bl	8002ddc <HAL_GetTick>
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d302      	bcc.n	8006ec8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ec8:	2303      	movs	r3, #3
 8006eca:	e04e      	b.n	8006f6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0304 	and.w	r3, r3, #4
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d037      	beq.n	8006f4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b80      	cmp	r3, #128	@ 0x80
 8006ede:	d034      	beq.n	8006f4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b40      	cmp	r3, #64	@ 0x40
 8006ee4:	d031      	beq.n	8006f4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	f003 0308 	and.w	r3, r3, #8
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	d110      	bne.n	8006f16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2208      	movs	r2, #8
 8006efa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 f8ff 	bl	8007100 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2208      	movs	r2, #8
 8006f06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e029      	b.n	8006f6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f24:	d111      	bne.n	8006f4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 f8e5 	bl	8007100 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e00f      	b.n	8006f6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69da      	ldr	r2, [r3, #28]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	4013      	ands	r3, r2
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	bf0c      	ite	eq
 8006f5a:	2301      	moveq	r3, #1
 8006f5c:	2300      	movne	r3, #0
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	79fb      	ldrb	r3, [r7, #7]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d0a0      	beq.n	8006eaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3710      	adds	r7, #16
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b097      	sub	sp, #92	@ 0x5c
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	88fa      	ldrh	r2, [r7, #6]
 8006f8c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	88fa      	ldrh	r2, [r7, #6]
 8006f94:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fa6:	d10e      	bne.n	8006fc6 <UART_Start_Receive_IT+0x52>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d105      	bne.n	8006fbc <UART_Start_Receive_IT+0x48>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006fb6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006fba:	e02d      	b.n	8007018 <UART_Start_Receive_IT+0xa4>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	22ff      	movs	r2, #255	@ 0xff
 8006fc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006fc4:	e028      	b.n	8007018 <UART_Start_Receive_IT+0xa4>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10d      	bne.n	8006fea <UART_Start_Receive_IT+0x76>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d104      	bne.n	8006fe0 <UART_Start_Receive_IT+0x6c>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	22ff      	movs	r2, #255	@ 0xff
 8006fda:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006fde:	e01b      	b.n	8007018 <UART_Start_Receive_IT+0xa4>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	227f      	movs	r2, #127	@ 0x7f
 8006fe4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006fe8:	e016      	b.n	8007018 <UART_Start_Receive_IT+0xa4>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ff2:	d10d      	bne.n	8007010 <UART_Start_Receive_IT+0x9c>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d104      	bne.n	8007006 <UART_Start_Receive_IT+0x92>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	227f      	movs	r2, #127	@ 0x7f
 8007000:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007004:	e008      	b.n	8007018 <UART_Start_Receive_IT+0xa4>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	223f      	movs	r2, #63	@ 0x3f
 800700a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800700e:	e003      	b.n	8007018 <UART_Start_Receive_IT+0xa4>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2222      	movs	r2, #34	@ 0x22
 8007024:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3308      	adds	r3, #8
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703a:	f043 0301 	orr.w	r3, r3, #1
 800703e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3308      	adds	r3, #8
 8007046:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007048:	64ba      	str	r2, [r7, #72]	@ 0x48
 800704a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800704e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007050:	e841 2300 	strex	r3, r2, [r1]
 8007054:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e5      	bne.n	8007028 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007064:	d107      	bne.n	8007076 <UART_Start_Receive_IT+0x102>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d103      	bne.n	8007076 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	4a21      	ldr	r2, [pc, #132]	@ (80070f8 <UART_Start_Receive_IT+0x184>)
 8007072:	669a      	str	r2, [r3, #104]	@ 0x68
 8007074:	e002      	b.n	800707c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4a20      	ldr	r2, [pc, #128]	@ (80070fc <UART_Start_Receive_IT+0x188>)
 800707a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d019      	beq.n	80070b8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007094:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007098:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	461a      	mov	r2, r3
 80070a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070a4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80070a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80070b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e6      	bne.n	8007084 <UART_Start_Receive_IT+0x110>
 80070b6:	e018      	b.n	80070ea <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	613b      	str	r3, [r7, #16]
   return(result);
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f043 0320 	orr.w	r3, r3, #32
 80070cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070d6:	623b      	str	r3, [r7, #32]
 80070d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070da:	69f9      	ldr	r1, [r7, #28]
 80070dc:	6a3a      	ldr	r2, [r7, #32]
 80070de:	e841 2300 	strex	r3, r2, [r1]
 80070e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1e6      	bne.n	80070b8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	375c      	adds	r7, #92	@ 0x5c
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	08007405 	.word	0x08007405
 80070fc:	08007249 	.word	0x08007249

08007100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007100:	b480      	push	{r7}
 8007102:	b095      	sub	sp, #84	@ 0x54
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007110:	e853 3f00 	ldrex	r3, [r3]
 8007114:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007118:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800711c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007126:	643b      	str	r3, [r7, #64]	@ 0x40
 8007128:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800712c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800712e:	e841 2300 	strex	r3, r2, [r1]
 8007132:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1e6      	bne.n	8007108 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	3308      	adds	r3, #8
 8007140:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007142:	6a3b      	ldr	r3, [r7, #32]
 8007144:	e853 3f00 	ldrex	r3, [r3]
 8007148:	61fb      	str	r3, [r7, #28]
   return(result);
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	f023 0301 	bic.w	r3, r3, #1
 8007150:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3308      	adds	r3, #8
 8007158:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800715a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800715c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007160:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007162:	e841 2300 	strex	r3, r2, [r1]
 8007166:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e5      	bne.n	800713a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007172:	2b01      	cmp	r3, #1
 8007174:	d118      	bne.n	80071a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	e853 3f00 	ldrex	r3, [r3]
 8007182:	60bb      	str	r3, [r7, #8]
   return(result);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f023 0310 	bic.w	r3, r3, #16
 800718a:	647b      	str	r3, [r7, #68]	@ 0x44
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007194:	61bb      	str	r3, [r7, #24]
 8007196:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007198:	6979      	ldr	r1, [r7, #20]
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	e841 2300 	strex	r3, r2, [r1]
 80071a0:	613b      	str	r3, [r7, #16]
   return(result);
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1e6      	bne.n	8007176 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80071bc:	bf00      	nop
 80071be:	3754      	adds	r7, #84	@ 0x54
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f7ff fa3e 	bl	8006668 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ec:	bf00      	nop
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	e853 3f00 	ldrex	r3, [r3]
 8007208:	60bb      	str	r3, [r7, #8]
   return(result);
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007210:	61fb      	str	r3, [r7, #28]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	61bb      	str	r3, [r7, #24]
 800721c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	6979      	ldr	r1, [r7, #20]
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	613b      	str	r3, [r7, #16]
   return(result);
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e6      	bne.n	80071fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2220      	movs	r2, #32
 8007232:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7ff fa0a 	bl	8006654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007240:	bf00      	nop
 8007242:	3720      	adds	r7, #32
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b09c      	sub	sp, #112	@ 0x70
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007256:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007260:	2b22      	cmp	r3, #34	@ 0x22
 8007262:	f040 80be 	bne.w	80073e2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800726c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007270:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007274:	b2d9      	uxtb	r1, r3
 8007276:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800727a:	b2da      	uxtb	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007280:	400a      	ands	r2, r1
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007296:	b29b      	uxth	r3, r3
 8007298:	3b01      	subs	r3, #1
 800729a:	b29a      	uxth	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f040 80a3 	bne.w	80073f6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072b8:	e853 3f00 	ldrex	r3, [r3]
 80072bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80072d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e6      	bne.n	80072b0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3308      	adds	r3, #8
 80072e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072f4:	f023 0301 	bic.w	r3, r3, #1
 80072f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3308      	adds	r3, #8
 8007300:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007302:	647a      	str	r2, [r7, #68]	@ 0x44
 8007304:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007308:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e5      	bne.n	80072e2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2220      	movs	r2, #32
 800731a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a34      	ldr	r2, [pc, #208]	@ (8007400 <UART_RxISR_8BIT+0x1b8>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d01f      	beq.n	8007374 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d018      	beq.n	8007374 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	623b      	str	r3, [r7, #32]
   return(result);
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007356:	663b      	str	r3, [r7, #96]	@ 0x60
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007360:	633b      	str	r3, [r7, #48]	@ 0x30
 8007362:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007366:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800736e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e6      	bne.n	8007342 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007378:	2b01      	cmp	r3, #1
 800737a:	d12e      	bne.n	80073da <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	e853 3f00 	ldrex	r3, [r3]
 800738e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f023 0310 	bic.w	r3, r3, #16
 8007396:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	461a      	mov	r2, r3
 800739e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073a0:	61fb      	str	r3, [r7, #28]
 80073a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a4:	69b9      	ldr	r1, [r7, #24]
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	e841 2300 	strex	r3, r2, [r1]
 80073ac:	617b      	str	r3, [r7, #20]
   return(result);
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1e6      	bne.n	8007382 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	f003 0310 	and.w	r3, r3, #16
 80073be:	2b10      	cmp	r3, #16
 80073c0:	d103      	bne.n	80073ca <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2210      	movs	r2, #16
 80073c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7ff f952 	bl	800667c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073d8:	e00d      	b.n	80073f6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7fa fff0 	bl	80023c0 <HAL_UART_RxCpltCallback>
}
 80073e0:	e009      	b.n	80073f6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	8b1b      	ldrh	r3, [r3, #24]
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0208 	orr.w	r2, r2, #8
 80073f2:	b292      	uxth	r2, r2
 80073f4:	831a      	strh	r2, [r3, #24]
}
 80073f6:	bf00      	nop
 80073f8:	3770      	adds	r7, #112	@ 0x70
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	40008000 	.word	0x40008000

08007404 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b09c      	sub	sp, #112	@ 0x70
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007412:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800741c:	2b22      	cmp	r3, #34	@ 0x22
 800741e:	f040 80be 	bne.w	800759e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007428:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007430:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007432:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007436:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800743a:	4013      	ands	r3, r2
 800743c:	b29a      	uxth	r2, r3
 800743e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007440:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007446:	1c9a      	adds	r2, r3, #2
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007452:	b29b      	uxth	r3, r3
 8007454:	3b01      	subs	r3, #1
 8007456:	b29a      	uxth	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007464:	b29b      	uxth	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	f040 80a3 	bne.w	80075b2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007474:	e853 3f00 	ldrex	r3, [r3]
 8007478:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800747a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800747c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007480:	667b      	str	r3, [r7, #100]	@ 0x64
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800748a:	657b      	str	r3, [r7, #84]	@ 0x54
 800748c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007490:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e6      	bne.n	800746c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3308      	adds	r3, #8
 80074a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b0:	f023 0301 	bic.w	r3, r3, #1
 80074b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3308      	adds	r3, #8
 80074bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80074be:	643a      	str	r2, [r7, #64]	@ 0x40
 80074c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e5      	bne.n	800749e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a34      	ldr	r2, [pc, #208]	@ (80075bc <UART_RxISR_16BIT+0x1b8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d01f      	beq.n	8007530 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d018      	beq.n	8007530 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	61fb      	str	r3, [r7, #28]
   return(result);
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007512:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800751c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800751e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e6      	bne.n	80074fe <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007534:	2b01      	cmp	r3, #1
 8007536:	d12e      	bne.n	8007596 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	e853 3f00 	ldrex	r3, [r3]
 800754a:	60bb      	str	r3, [r7, #8]
   return(result);
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	f023 0310 	bic.w	r3, r3, #16
 8007552:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	461a      	mov	r2, r3
 800755a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800755c:	61bb      	str	r3, [r7, #24]
 800755e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	6979      	ldr	r1, [r7, #20]
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	e841 2300 	strex	r3, r2, [r1]
 8007568:	613b      	str	r3, [r7, #16]
   return(result);
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1e6      	bne.n	800753e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	f003 0310 	and.w	r3, r3, #16
 800757a:	2b10      	cmp	r3, #16
 800757c:	d103      	bne.n	8007586 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2210      	movs	r2, #16
 8007584:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800758c:	4619      	mov	r1, r3
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff f874 	bl	800667c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007594:	e00d      	b.n	80075b2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7fa ff12 	bl	80023c0 <HAL_UART_RxCpltCallback>
}
 800759c:	e009      	b.n	80075b2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	8b1b      	ldrh	r3, [r3, #24]
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0208 	orr.w	r2, r2, #8
 80075ae:	b292      	uxth	r2, r2
 80075b0:	831a      	strh	r2, [r3, #24]
}
 80075b2:	bf00      	nop
 80075b4:	3770      	adds	r7, #112	@ 0x70
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	40008000 	.word	0x40008000

080075c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <atoi>:
 80075d4:	220a      	movs	r2, #10
 80075d6:	2100      	movs	r1, #0
 80075d8:	f000 b87a 	b.w	80076d0 <strtol>

080075dc <_strtol_l.constprop.0>:
 80075dc:	2b24      	cmp	r3, #36	@ 0x24
 80075de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e2:	4686      	mov	lr, r0
 80075e4:	4690      	mov	r8, r2
 80075e6:	d801      	bhi.n	80075ec <_strtol_l.constprop.0+0x10>
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d106      	bne.n	80075fa <_strtol_l.constprop.0+0x1e>
 80075ec:	f000 ff62 	bl	80084b4 <__errno>
 80075f0:	2316      	movs	r3, #22
 80075f2:	6003      	str	r3, [r0, #0]
 80075f4:	2000      	movs	r0, #0
 80075f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075fa:	4834      	ldr	r0, [pc, #208]	@ (80076cc <_strtol_l.constprop.0+0xf0>)
 80075fc:	460d      	mov	r5, r1
 80075fe:	462a      	mov	r2, r5
 8007600:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007604:	5d06      	ldrb	r6, [r0, r4]
 8007606:	f016 0608 	ands.w	r6, r6, #8
 800760a:	d1f8      	bne.n	80075fe <_strtol_l.constprop.0+0x22>
 800760c:	2c2d      	cmp	r4, #45	@ 0x2d
 800760e:	d12d      	bne.n	800766c <_strtol_l.constprop.0+0x90>
 8007610:	782c      	ldrb	r4, [r5, #0]
 8007612:	2601      	movs	r6, #1
 8007614:	1c95      	adds	r5, r2, #2
 8007616:	f033 0210 	bics.w	r2, r3, #16
 800761a:	d109      	bne.n	8007630 <_strtol_l.constprop.0+0x54>
 800761c:	2c30      	cmp	r4, #48	@ 0x30
 800761e:	d12a      	bne.n	8007676 <_strtol_l.constprop.0+0x9a>
 8007620:	782a      	ldrb	r2, [r5, #0]
 8007622:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007626:	2a58      	cmp	r2, #88	@ 0x58
 8007628:	d125      	bne.n	8007676 <_strtol_l.constprop.0+0x9a>
 800762a:	786c      	ldrb	r4, [r5, #1]
 800762c:	2310      	movs	r3, #16
 800762e:	3502      	adds	r5, #2
 8007630:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007634:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007638:	2200      	movs	r2, #0
 800763a:	fbbc f9f3 	udiv	r9, ip, r3
 800763e:	4610      	mov	r0, r2
 8007640:	fb03 ca19 	mls	sl, r3, r9, ip
 8007644:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007648:	2f09      	cmp	r7, #9
 800764a:	d81b      	bhi.n	8007684 <_strtol_l.constprop.0+0xa8>
 800764c:	463c      	mov	r4, r7
 800764e:	42a3      	cmp	r3, r4
 8007650:	dd27      	ble.n	80076a2 <_strtol_l.constprop.0+0xc6>
 8007652:	1c57      	adds	r7, r2, #1
 8007654:	d007      	beq.n	8007666 <_strtol_l.constprop.0+0x8a>
 8007656:	4581      	cmp	r9, r0
 8007658:	d320      	bcc.n	800769c <_strtol_l.constprop.0+0xc0>
 800765a:	d101      	bne.n	8007660 <_strtol_l.constprop.0+0x84>
 800765c:	45a2      	cmp	sl, r4
 800765e:	db1d      	blt.n	800769c <_strtol_l.constprop.0+0xc0>
 8007660:	fb00 4003 	mla	r0, r0, r3, r4
 8007664:	2201      	movs	r2, #1
 8007666:	f815 4b01 	ldrb.w	r4, [r5], #1
 800766a:	e7eb      	b.n	8007644 <_strtol_l.constprop.0+0x68>
 800766c:	2c2b      	cmp	r4, #43	@ 0x2b
 800766e:	bf04      	itt	eq
 8007670:	782c      	ldrbeq	r4, [r5, #0]
 8007672:	1c95      	addeq	r5, r2, #2
 8007674:	e7cf      	b.n	8007616 <_strtol_l.constprop.0+0x3a>
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1da      	bne.n	8007630 <_strtol_l.constprop.0+0x54>
 800767a:	2c30      	cmp	r4, #48	@ 0x30
 800767c:	bf0c      	ite	eq
 800767e:	2308      	moveq	r3, #8
 8007680:	230a      	movne	r3, #10
 8007682:	e7d5      	b.n	8007630 <_strtol_l.constprop.0+0x54>
 8007684:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007688:	2f19      	cmp	r7, #25
 800768a:	d801      	bhi.n	8007690 <_strtol_l.constprop.0+0xb4>
 800768c:	3c37      	subs	r4, #55	@ 0x37
 800768e:	e7de      	b.n	800764e <_strtol_l.constprop.0+0x72>
 8007690:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007694:	2f19      	cmp	r7, #25
 8007696:	d804      	bhi.n	80076a2 <_strtol_l.constprop.0+0xc6>
 8007698:	3c57      	subs	r4, #87	@ 0x57
 800769a:	e7d8      	b.n	800764e <_strtol_l.constprop.0+0x72>
 800769c:	f04f 32ff 	mov.w	r2, #4294967295
 80076a0:	e7e1      	b.n	8007666 <_strtol_l.constprop.0+0x8a>
 80076a2:	1c53      	adds	r3, r2, #1
 80076a4:	d108      	bne.n	80076b8 <_strtol_l.constprop.0+0xdc>
 80076a6:	2322      	movs	r3, #34	@ 0x22
 80076a8:	f8ce 3000 	str.w	r3, [lr]
 80076ac:	4660      	mov	r0, ip
 80076ae:	f1b8 0f00 	cmp.w	r8, #0
 80076b2:	d0a0      	beq.n	80075f6 <_strtol_l.constprop.0+0x1a>
 80076b4:	1e69      	subs	r1, r5, #1
 80076b6:	e006      	b.n	80076c6 <_strtol_l.constprop.0+0xea>
 80076b8:	b106      	cbz	r6, 80076bc <_strtol_l.constprop.0+0xe0>
 80076ba:	4240      	negs	r0, r0
 80076bc:	f1b8 0f00 	cmp.w	r8, #0
 80076c0:	d099      	beq.n	80075f6 <_strtol_l.constprop.0+0x1a>
 80076c2:	2a00      	cmp	r2, #0
 80076c4:	d1f6      	bne.n	80076b4 <_strtol_l.constprop.0+0xd8>
 80076c6:	f8c8 1000 	str.w	r1, [r8]
 80076ca:	e794      	b.n	80075f6 <_strtol_l.constprop.0+0x1a>
 80076cc:	0800b179 	.word	0x0800b179

080076d0 <strtol>:
 80076d0:	4613      	mov	r3, r2
 80076d2:	460a      	mov	r2, r1
 80076d4:	4601      	mov	r1, r0
 80076d6:	4802      	ldr	r0, [pc, #8]	@ (80076e0 <strtol+0x10>)
 80076d8:	6800      	ldr	r0, [r0, #0]
 80076da:	f7ff bf7f 	b.w	80075dc <_strtol_l.constprop.0>
 80076de:	bf00      	nop
 80076e0:	20000024 	.word	0x20000024

080076e4 <__cvt>:
 80076e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076e8:	ec57 6b10 	vmov	r6, r7, d0
 80076ec:	2f00      	cmp	r7, #0
 80076ee:	460c      	mov	r4, r1
 80076f0:	4619      	mov	r1, r3
 80076f2:	463b      	mov	r3, r7
 80076f4:	bfbb      	ittet	lt
 80076f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80076fa:	461f      	movlt	r7, r3
 80076fc:	2300      	movge	r3, #0
 80076fe:	232d      	movlt	r3, #45	@ 0x2d
 8007700:	700b      	strb	r3, [r1, #0]
 8007702:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007704:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007708:	4691      	mov	r9, r2
 800770a:	f023 0820 	bic.w	r8, r3, #32
 800770e:	bfbc      	itt	lt
 8007710:	4632      	movlt	r2, r6
 8007712:	4616      	movlt	r6, r2
 8007714:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007718:	d005      	beq.n	8007726 <__cvt+0x42>
 800771a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800771e:	d100      	bne.n	8007722 <__cvt+0x3e>
 8007720:	3401      	adds	r4, #1
 8007722:	2102      	movs	r1, #2
 8007724:	e000      	b.n	8007728 <__cvt+0x44>
 8007726:	2103      	movs	r1, #3
 8007728:	ab03      	add	r3, sp, #12
 800772a:	9301      	str	r3, [sp, #4]
 800772c:	ab02      	add	r3, sp, #8
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	ec47 6b10 	vmov	d0, r6, r7
 8007734:	4653      	mov	r3, sl
 8007736:	4622      	mov	r2, r4
 8007738:	f000 ff72 	bl	8008620 <_dtoa_r>
 800773c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007740:	4605      	mov	r5, r0
 8007742:	d119      	bne.n	8007778 <__cvt+0x94>
 8007744:	f019 0f01 	tst.w	r9, #1
 8007748:	d00e      	beq.n	8007768 <__cvt+0x84>
 800774a:	eb00 0904 	add.w	r9, r0, r4
 800774e:	2200      	movs	r2, #0
 8007750:	2300      	movs	r3, #0
 8007752:	4630      	mov	r0, r6
 8007754:	4639      	mov	r1, r7
 8007756:	f7f9 f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800775a:	b108      	cbz	r0, 8007760 <__cvt+0x7c>
 800775c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007760:	2230      	movs	r2, #48	@ 0x30
 8007762:	9b03      	ldr	r3, [sp, #12]
 8007764:	454b      	cmp	r3, r9
 8007766:	d31e      	bcc.n	80077a6 <__cvt+0xc2>
 8007768:	9b03      	ldr	r3, [sp, #12]
 800776a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800776c:	1b5b      	subs	r3, r3, r5
 800776e:	4628      	mov	r0, r5
 8007770:	6013      	str	r3, [r2, #0]
 8007772:	b004      	add	sp, #16
 8007774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007778:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800777c:	eb00 0904 	add.w	r9, r0, r4
 8007780:	d1e5      	bne.n	800774e <__cvt+0x6a>
 8007782:	7803      	ldrb	r3, [r0, #0]
 8007784:	2b30      	cmp	r3, #48	@ 0x30
 8007786:	d10a      	bne.n	800779e <__cvt+0xba>
 8007788:	2200      	movs	r2, #0
 800778a:	2300      	movs	r3, #0
 800778c:	4630      	mov	r0, r6
 800778e:	4639      	mov	r1, r7
 8007790:	f7f9 f99a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007794:	b918      	cbnz	r0, 800779e <__cvt+0xba>
 8007796:	f1c4 0401 	rsb	r4, r4, #1
 800779a:	f8ca 4000 	str.w	r4, [sl]
 800779e:	f8da 3000 	ldr.w	r3, [sl]
 80077a2:	4499      	add	r9, r3
 80077a4:	e7d3      	b.n	800774e <__cvt+0x6a>
 80077a6:	1c59      	adds	r1, r3, #1
 80077a8:	9103      	str	r1, [sp, #12]
 80077aa:	701a      	strb	r2, [r3, #0]
 80077ac:	e7d9      	b.n	8007762 <__cvt+0x7e>

080077ae <__exponent>:
 80077ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077b0:	2900      	cmp	r1, #0
 80077b2:	bfba      	itte	lt
 80077b4:	4249      	neglt	r1, r1
 80077b6:	232d      	movlt	r3, #45	@ 0x2d
 80077b8:	232b      	movge	r3, #43	@ 0x2b
 80077ba:	2909      	cmp	r1, #9
 80077bc:	7002      	strb	r2, [r0, #0]
 80077be:	7043      	strb	r3, [r0, #1]
 80077c0:	dd29      	ble.n	8007816 <__exponent+0x68>
 80077c2:	f10d 0307 	add.w	r3, sp, #7
 80077c6:	461d      	mov	r5, r3
 80077c8:	270a      	movs	r7, #10
 80077ca:	461a      	mov	r2, r3
 80077cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80077d0:	fb07 1416 	mls	r4, r7, r6, r1
 80077d4:	3430      	adds	r4, #48	@ 0x30
 80077d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80077da:	460c      	mov	r4, r1
 80077dc:	2c63      	cmp	r4, #99	@ 0x63
 80077de:	f103 33ff 	add.w	r3, r3, #4294967295
 80077e2:	4631      	mov	r1, r6
 80077e4:	dcf1      	bgt.n	80077ca <__exponent+0x1c>
 80077e6:	3130      	adds	r1, #48	@ 0x30
 80077e8:	1e94      	subs	r4, r2, #2
 80077ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077ee:	1c41      	adds	r1, r0, #1
 80077f0:	4623      	mov	r3, r4
 80077f2:	42ab      	cmp	r3, r5
 80077f4:	d30a      	bcc.n	800780c <__exponent+0x5e>
 80077f6:	f10d 0309 	add.w	r3, sp, #9
 80077fa:	1a9b      	subs	r3, r3, r2
 80077fc:	42ac      	cmp	r4, r5
 80077fe:	bf88      	it	hi
 8007800:	2300      	movhi	r3, #0
 8007802:	3302      	adds	r3, #2
 8007804:	4403      	add	r3, r0
 8007806:	1a18      	subs	r0, r3, r0
 8007808:	b003      	add	sp, #12
 800780a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800780c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007810:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007814:	e7ed      	b.n	80077f2 <__exponent+0x44>
 8007816:	2330      	movs	r3, #48	@ 0x30
 8007818:	3130      	adds	r1, #48	@ 0x30
 800781a:	7083      	strb	r3, [r0, #2]
 800781c:	70c1      	strb	r1, [r0, #3]
 800781e:	1d03      	adds	r3, r0, #4
 8007820:	e7f1      	b.n	8007806 <__exponent+0x58>
	...

08007824 <_printf_float>:
 8007824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007828:	b08d      	sub	sp, #52	@ 0x34
 800782a:	460c      	mov	r4, r1
 800782c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007830:	4616      	mov	r6, r2
 8007832:	461f      	mov	r7, r3
 8007834:	4605      	mov	r5, r0
 8007836:	f000 fdf3 	bl	8008420 <_localeconv_r>
 800783a:	6803      	ldr	r3, [r0, #0]
 800783c:	9304      	str	r3, [sp, #16]
 800783e:	4618      	mov	r0, r3
 8007840:	f7f8 fd16 	bl	8000270 <strlen>
 8007844:	2300      	movs	r3, #0
 8007846:	930a      	str	r3, [sp, #40]	@ 0x28
 8007848:	f8d8 3000 	ldr.w	r3, [r8]
 800784c:	9005      	str	r0, [sp, #20]
 800784e:	3307      	adds	r3, #7
 8007850:	f023 0307 	bic.w	r3, r3, #7
 8007854:	f103 0208 	add.w	r2, r3, #8
 8007858:	f894 a018 	ldrb.w	sl, [r4, #24]
 800785c:	f8d4 b000 	ldr.w	fp, [r4]
 8007860:	f8c8 2000 	str.w	r2, [r8]
 8007864:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007868:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800786c:	9307      	str	r3, [sp, #28]
 800786e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007872:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800787a:	4b9c      	ldr	r3, [pc, #624]	@ (8007aec <_printf_float+0x2c8>)
 800787c:	f04f 32ff 	mov.w	r2, #4294967295
 8007880:	f7f9 f954 	bl	8000b2c <__aeabi_dcmpun>
 8007884:	bb70      	cbnz	r0, 80078e4 <_printf_float+0xc0>
 8007886:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800788a:	4b98      	ldr	r3, [pc, #608]	@ (8007aec <_printf_float+0x2c8>)
 800788c:	f04f 32ff 	mov.w	r2, #4294967295
 8007890:	f7f9 f92e 	bl	8000af0 <__aeabi_dcmple>
 8007894:	bb30      	cbnz	r0, 80078e4 <_printf_float+0xc0>
 8007896:	2200      	movs	r2, #0
 8007898:	2300      	movs	r3, #0
 800789a:	4640      	mov	r0, r8
 800789c:	4649      	mov	r1, r9
 800789e:	f7f9 f91d 	bl	8000adc <__aeabi_dcmplt>
 80078a2:	b110      	cbz	r0, 80078aa <_printf_float+0x86>
 80078a4:	232d      	movs	r3, #45	@ 0x2d
 80078a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078aa:	4a91      	ldr	r2, [pc, #580]	@ (8007af0 <_printf_float+0x2cc>)
 80078ac:	4b91      	ldr	r3, [pc, #580]	@ (8007af4 <_printf_float+0x2d0>)
 80078ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80078b2:	bf94      	ite	ls
 80078b4:	4690      	movls	r8, r2
 80078b6:	4698      	movhi	r8, r3
 80078b8:	2303      	movs	r3, #3
 80078ba:	6123      	str	r3, [r4, #16]
 80078bc:	f02b 0304 	bic.w	r3, fp, #4
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	f04f 0900 	mov.w	r9, #0
 80078c6:	9700      	str	r7, [sp, #0]
 80078c8:	4633      	mov	r3, r6
 80078ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80078cc:	4621      	mov	r1, r4
 80078ce:	4628      	mov	r0, r5
 80078d0:	f000 f9d2 	bl	8007c78 <_printf_common>
 80078d4:	3001      	adds	r0, #1
 80078d6:	f040 808d 	bne.w	80079f4 <_printf_float+0x1d0>
 80078da:	f04f 30ff 	mov.w	r0, #4294967295
 80078de:	b00d      	add	sp, #52	@ 0x34
 80078e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e4:	4642      	mov	r2, r8
 80078e6:	464b      	mov	r3, r9
 80078e8:	4640      	mov	r0, r8
 80078ea:	4649      	mov	r1, r9
 80078ec:	f7f9 f91e 	bl	8000b2c <__aeabi_dcmpun>
 80078f0:	b140      	cbz	r0, 8007904 <_printf_float+0xe0>
 80078f2:	464b      	mov	r3, r9
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	bfbc      	itt	lt
 80078f8:	232d      	movlt	r3, #45	@ 0x2d
 80078fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80078fe:	4a7e      	ldr	r2, [pc, #504]	@ (8007af8 <_printf_float+0x2d4>)
 8007900:	4b7e      	ldr	r3, [pc, #504]	@ (8007afc <_printf_float+0x2d8>)
 8007902:	e7d4      	b.n	80078ae <_printf_float+0x8a>
 8007904:	6863      	ldr	r3, [r4, #4]
 8007906:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800790a:	9206      	str	r2, [sp, #24]
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	d13b      	bne.n	8007988 <_printf_float+0x164>
 8007910:	2306      	movs	r3, #6
 8007912:	6063      	str	r3, [r4, #4]
 8007914:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007918:	2300      	movs	r3, #0
 800791a:	6022      	str	r2, [r4, #0]
 800791c:	9303      	str	r3, [sp, #12]
 800791e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007920:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007924:	ab09      	add	r3, sp, #36	@ 0x24
 8007926:	9300      	str	r3, [sp, #0]
 8007928:	6861      	ldr	r1, [r4, #4]
 800792a:	ec49 8b10 	vmov	d0, r8, r9
 800792e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007932:	4628      	mov	r0, r5
 8007934:	f7ff fed6 	bl	80076e4 <__cvt>
 8007938:	9b06      	ldr	r3, [sp, #24]
 800793a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800793c:	2b47      	cmp	r3, #71	@ 0x47
 800793e:	4680      	mov	r8, r0
 8007940:	d129      	bne.n	8007996 <_printf_float+0x172>
 8007942:	1cc8      	adds	r0, r1, #3
 8007944:	db02      	blt.n	800794c <_printf_float+0x128>
 8007946:	6863      	ldr	r3, [r4, #4]
 8007948:	4299      	cmp	r1, r3
 800794a:	dd41      	ble.n	80079d0 <_printf_float+0x1ac>
 800794c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007950:	fa5f fa8a 	uxtb.w	sl, sl
 8007954:	3901      	subs	r1, #1
 8007956:	4652      	mov	r2, sl
 8007958:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800795c:	9109      	str	r1, [sp, #36]	@ 0x24
 800795e:	f7ff ff26 	bl	80077ae <__exponent>
 8007962:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007964:	1813      	adds	r3, r2, r0
 8007966:	2a01      	cmp	r2, #1
 8007968:	4681      	mov	r9, r0
 800796a:	6123      	str	r3, [r4, #16]
 800796c:	dc02      	bgt.n	8007974 <_printf_float+0x150>
 800796e:	6822      	ldr	r2, [r4, #0]
 8007970:	07d2      	lsls	r2, r2, #31
 8007972:	d501      	bpl.n	8007978 <_printf_float+0x154>
 8007974:	3301      	adds	r3, #1
 8007976:	6123      	str	r3, [r4, #16]
 8007978:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800797c:	2b00      	cmp	r3, #0
 800797e:	d0a2      	beq.n	80078c6 <_printf_float+0xa2>
 8007980:	232d      	movs	r3, #45	@ 0x2d
 8007982:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007986:	e79e      	b.n	80078c6 <_printf_float+0xa2>
 8007988:	9a06      	ldr	r2, [sp, #24]
 800798a:	2a47      	cmp	r2, #71	@ 0x47
 800798c:	d1c2      	bne.n	8007914 <_printf_float+0xf0>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1c0      	bne.n	8007914 <_printf_float+0xf0>
 8007992:	2301      	movs	r3, #1
 8007994:	e7bd      	b.n	8007912 <_printf_float+0xee>
 8007996:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800799a:	d9db      	bls.n	8007954 <_printf_float+0x130>
 800799c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80079a0:	d118      	bne.n	80079d4 <_printf_float+0x1b0>
 80079a2:	2900      	cmp	r1, #0
 80079a4:	6863      	ldr	r3, [r4, #4]
 80079a6:	dd0b      	ble.n	80079c0 <_printf_float+0x19c>
 80079a8:	6121      	str	r1, [r4, #16]
 80079aa:	b913      	cbnz	r3, 80079b2 <_printf_float+0x18e>
 80079ac:	6822      	ldr	r2, [r4, #0]
 80079ae:	07d0      	lsls	r0, r2, #31
 80079b0:	d502      	bpl.n	80079b8 <_printf_float+0x194>
 80079b2:	3301      	adds	r3, #1
 80079b4:	440b      	add	r3, r1
 80079b6:	6123      	str	r3, [r4, #16]
 80079b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80079ba:	f04f 0900 	mov.w	r9, #0
 80079be:	e7db      	b.n	8007978 <_printf_float+0x154>
 80079c0:	b913      	cbnz	r3, 80079c8 <_printf_float+0x1a4>
 80079c2:	6822      	ldr	r2, [r4, #0]
 80079c4:	07d2      	lsls	r2, r2, #31
 80079c6:	d501      	bpl.n	80079cc <_printf_float+0x1a8>
 80079c8:	3302      	adds	r3, #2
 80079ca:	e7f4      	b.n	80079b6 <_printf_float+0x192>
 80079cc:	2301      	movs	r3, #1
 80079ce:	e7f2      	b.n	80079b6 <_printf_float+0x192>
 80079d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80079d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079d6:	4299      	cmp	r1, r3
 80079d8:	db05      	blt.n	80079e6 <_printf_float+0x1c2>
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	6121      	str	r1, [r4, #16]
 80079de:	07d8      	lsls	r0, r3, #31
 80079e0:	d5ea      	bpl.n	80079b8 <_printf_float+0x194>
 80079e2:	1c4b      	adds	r3, r1, #1
 80079e4:	e7e7      	b.n	80079b6 <_printf_float+0x192>
 80079e6:	2900      	cmp	r1, #0
 80079e8:	bfd4      	ite	le
 80079ea:	f1c1 0202 	rsble	r2, r1, #2
 80079ee:	2201      	movgt	r2, #1
 80079f0:	4413      	add	r3, r2
 80079f2:	e7e0      	b.n	80079b6 <_printf_float+0x192>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	055a      	lsls	r2, r3, #21
 80079f8:	d407      	bmi.n	8007a0a <_printf_float+0x1e6>
 80079fa:	6923      	ldr	r3, [r4, #16]
 80079fc:	4642      	mov	r2, r8
 80079fe:	4631      	mov	r1, r6
 8007a00:	4628      	mov	r0, r5
 8007a02:	47b8      	blx	r7
 8007a04:	3001      	adds	r0, #1
 8007a06:	d12b      	bne.n	8007a60 <_printf_float+0x23c>
 8007a08:	e767      	b.n	80078da <_printf_float+0xb6>
 8007a0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a0e:	f240 80dd 	bls.w	8007bcc <_printf_float+0x3a8>
 8007a12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a16:	2200      	movs	r2, #0
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f7f9 f855 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	d033      	beq.n	8007a8a <_printf_float+0x266>
 8007a22:	4a37      	ldr	r2, [pc, #220]	@ (8007b00 <_printf_float+0x2dc>)
 8007a24:	2301      	movs	r3, #1
 8007a26:	4631      	mov	r1, r6
 8007a28:	4628      	mov	r0, r5
 8007a2a:	47b8      	blx	r7
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	f43f af54 	beq.w	80078da <_printf_float+0xb6>
 8007a32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007a36:	4543      	cmp	r3, r8
 8007a38:	db02      	blt.n	8007a40 <_printf_float+0x21c>
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	07d8      	lsls	r0, r3, #31
 8007a3e:	d50f      	bpl.n	8007a60 <_printf_float+0x23c>
 8007a40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a44:	4631      	mov	r1, r6
 8007a46:	4628      	mov	r0, r5
 8007a48:	47b8      	blx	r7
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	f43f af45 	beq.w	80078da <_printf_float+0xb6>
 8007a50:	f04f 0900 	mov.w	r9, #0
 8007a54:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a58:	f104 0a1a 	add.w	sl, r4, #26
 8007a5c:	45c8      	cmp	r8, r9
 8007a5e:	dc09      	bgt.n	8007a74 <_printf_float+0x250>
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	079b      	lsls	r3, r3, #30
 8007a64:	f100 8103 	bmi.w	8007c6e <_printf_float+0x44a>
 8007a68:	68e0      	ldr	r0, [r4, #12]
 8007a6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a6c:	4298      	cmp	r0, r3
 8007a6e:	bfb8      	it	lt
 8007a70:	4618      	movlt	r0, r3
 8007a72:	e734      	b.n	80078de <_printf_float+0xba>
 8007a74:	2301      	movs	r3, #1
 8007a76:	4652      	mov	r2, sl
 8007a78:	4631      	mov	r1, r6
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	47b8      	blx	r7
 8007a7e:	3001      	adds	r0, #1
 8007a80:	f43f af2b 	beq.w	80078da <_printf_float+0xb6>
 8007a84:	f109 0901 	add.w	r9, r9, #1
 8007a88:	e7e8      	b.n	8007a5c <_printf_float+0x238>
 8007a8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	dc39      	bgt.n	8007b04 <_printf_float+0x2e0>
 8007a90:	4a1b      	ldr	r2, [pc, #108]	@ (8007b00 <_printf_float+0x2dc>)
 8007a92:	2301      	movs	r3, #1
 8007a94:	4631      	mov	r1, r6
 8007a96:	4628      	mov	r0, r5
 8007a98:	47b8      	blx	r7
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	f43f af1d 	beq.w	80078da <_printf_float+0xb6>
 8007aa0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007aa4:	ea59 0303 	orrs.w	r3, r9, r3
 8007aa8:	d102      	bne.n	8007ab0 <_printf_float+0x28c>
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	07d9      	lsls	r1, r3, #31
 8007aae:	d5d7      	bpl.n	8007a60 <_printf_float+0x23c>
 8007ab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	47b8      	blx	r7
 8007aba:	3001      	adds	r0, #1
 8007abc:	f43f af0d 	beq.w	80078da <_printf_float+0xb6>
 8007ac0:	f04f 0a00 	mov.w	sl, #0
 8007ac4:	f104 0b1a 	add.w	fp, r4, #26
 8007ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aca:	425b      	negs	r3, r3
 8007acc:	4553      	cmp	r3, sl
 8007ace:	dc01      	bgt.n	8007ad4 <_printf_float+0x2b0>
 8007ad0:	464b      	mov	r3, r9
 8007ad2:	e793      	b.n	80079fc <_printf_float+0x1d8>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	465a      	mov	r2, fp
 8007ad8:	4631      	mov	r1, r6
 8007ada:	4628      	mov	r0, r5
 8007adc:	47b8      	blx	r7
 8007ade:	3001      	adds	r0, #1
 8007ae0:	f43f aefb 	beq.w	80078da <_printf_float+0xb6>
 8007ae4:	f10a 0a01 	add.w	sl, sl, #1
 8007ae8:	e7ee      	b.n	8007ac8 <_printf_float+0x2a4>
 8007aea:	bf00      	nop
 8007aec:	7fefffff 	.word	0x7fefffff
 8007af0:	0800b279 	.word	0x0800b279
 8007af4:	0800b27d 	.word	0x0800b27d
 8007af8:	0800b281 	.word	0x0800b281
 8007afc:	0800b285 	.word	0x0800b285
 8007b00:	0800b289 	.word	0x0800b289
 8007b04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b0a:	4553      	cmp	r3, sl
 8007b0c:	bfa8      	it	ge
 8007b0e:	4653      	movge	r3, sl
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	4699      	mov	r9, r3
 8007b14:	dc36      	bgt.n	8007b84 <_printf_float+0x360>
 8007b16:	f04f 0b00 	mov.w	fp, #0
 8007b1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b1e:	f104 021a 	add.w	r2, r4, #26
 8007b22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b24:	9306      	str	r3, [sp, #24]
 8007b26:	eba3 0309 	sub.w	r3, r3, r9
 8007b2a:	455b      	cmp	r3, fp
 8007b2c:	dc31      	bgt.n	8007b92 <_printf_float+0x36e>
 8007b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b30:	459a      	cmp	sl, r3
 8007b32:	dc3a      	bgt.n	8007baa <_printf_float+0x386>
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	07da      	lsls	r2, r3, #31
 8007b38:	d437      	bmi.n	8007baa <_printf_float+0x386>
 8007b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b3c:	ebaa 0903 	sub.w	r9, sl, r3
 8007b40:	9b06      	ldr	r3, [sp, #24]
 8007b42:	ebaa 0303 	sub.w	r3, sl, r3
 8007b46:	4599      	cmp	r9, r3
 8007b48:	bfa8      	it	ge
 8007b4a:	4699      	movge	r9, r3
 8007b4c:	f1b9 0f00 	cmp.w	r9, #0
 8007b50:	dc33      	bgt.n	8007bba <_printf_float+0x396>
 8007b52:	f04f 0800 	mov.w	r8, #0
 8007b56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b5a:	f104 0b1a 	add.w	fp, r4, #26
 8007b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b60:	ebaa 0303 	sub.w	r3, sl, r3
 8007b64:	eba3 0309 	sub.w	r3, r3, r9
 8007b68:	4543      	cmp	r3, r8
 8007b6a:	f77f af79 	ble.w	8007a60 <_printf_float+0x23c>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	465a      	mov	r2, fp
 8007b72:	4631      	mov	r1, r6
 8007b74:	4628      	mov	r0, r5
 8007b76:	47b8      	blx	r7
 8007b78:	3001      	adds	r0, #1
 8007b7a:	f43f aeae 	beq.w	80078da <_printf_float+0xb6>
 8007b7e:	f108 0801 	add.w	r8, r8, #1
 8007b82:	e7ec      	b.n	8007b5e <_printf_float+0x33a>
 8007b84:	4642      	mov	r2, r8
 8007b86:	4631      	mov	r1, r6
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b8      	blx	r7
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	d1c2      	bne.n	8007b16 <_printf_float+0x2f2>
 8007b90:	e6a3      	b.n	80078da <_printf_float+0xb6>
 8007b92:	2301      	movs	r3, #1
 8007b94:	4631      	mov	r1, r6
 8007b96:	4628      	mov	r0, r5
 8007b98:	9206      	str	r2, [sp, #24]
 8007b9a:	47b8      	blx	r7
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	f43f ae9c 	beq.w	80078da <_printf_float+0xb6>
 8007ba2:	9a06      	ldr	r2, [sp, #24]
 8007ba4:	f10b 0b01 	add.w	fp, fp, #1
 8007ba8:	e7bb      	b.n	8007b22 <_printf_float+0x2fe>
 8007baa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	47b8      	blx	r7
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	d1c0      	bne.n	8007b3a <_printf_float+0x316>
 8007bb8:	e68f      	b.n	80078da <_printf_float+0xb6>
 8007bba:	9a06      	ldr	r2, [sp, #24]
 8007bbc:	464b      	mov	r3, r9
 8007bbe:	4442      	add	r2, r8
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	47b8      	blx	r7
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	d1c3      	bne.n	8007b52 <_printf_float+0x32e>
 8007bca:	e686      	b.n	80078da <_printf_float+0xb6>
 8007bcc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007bd0:	f1ba 0f01 	cmp.w	sl, #1
 8007bd4:	dc01      	bgt.n	8007bda <_printf_float+0x3b6>
 8007bd6:	07db      	lsls	r3, r3, #31
 8007bd8:	d536      	bpl.n	8007c48 <_printf_float+0x424>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	4642      	mov	r2, r8
 8007bde:	4631      	mov	r1, r6
 8007be0:	4628      	mov	r0, r5
 8007be2:	47b8      	blx	r7
 8007be4:	3001      	adds	r0, #1
 8007be6:	f43f ae78 	beq.w	80078da <_printf_float+0xb6>
 8007bea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bee:	4631      	mov	r1, r6
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	47b8      	blx	r7
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	f43f ae70 	beq.w	80078da <_printf_float+0xb6>
 8007bfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007bfe:	2200      	movs	r2, #0
 8007c00:	2300      	movs	r3, #0
 8007c02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c06:	f7f8 ff5f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c0a:	b9c0      	cbnz	r0, 8007c3e <_printf_float+0x41a>
 8007c0c:	4653      	mov	r3, sl
 8007c0e:	f108 0201 	add.w	r2, r8, #1
 8007c12:	4631      	mov	r1, r6
 8007c14:	4628      	mov	r0, r5
 8007c16:	47b8      	blx	r7
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d10c      	bne.n	8007c36 <_printf_float+0x412>
 8007c1c:	e65d      	b.n	80078da <_printf_float+0xb6>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	465a      	mov	r2, fp
 8007c22:	4631      	mov	r1, r6
 8007c24:	4628      	mov	r0, r5
 8007c26:	47b8      	blx	r7
 8007c28:	3001      	adds	r0, #1
 8007c2a:	f43f ae56 	beq.w	80078da <_printf_float+0xb6>
 8007c2e:	f108 0801 	add.w	r8, r8, #1
 8007c32:	45d0      	cmp	r8, sl
 8007c34:	dbf3      	blt.n	8007c1e <_printf_float+0x3fa>
 8007c36:	464b      	mov	r3, r9
 8007c38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c3c:	e6df      	b.n	80079fe <_printf_float+0x1da>
 8007c3e:	f04f 0800 	mov.w	r8, #0
 8007c42:	f104 0b1a 	add.w	fp, r4, #26
 8007c46:	e7f4      	b.n	8007c32 <_printf_float+0x40e>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	4642      	mov	r2, r8
 8007c4c:	e7e1      	b.n	8007c12 <_printf_float+0x3ee>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	464a      	mov	r2, r9
 8007c52:	4631      	mov	r1, r6
 8007c54:	4628      	mov	r0, r5
 8007c56:	47b8      	blx	r7
 8007c58:	3001      	adds	r0, #1
 8007c5a:	f43f ae3e 	beq.w	80078da <_printf_float+0xb6>
 8007c5e:	f108 0801 	add.w	r8, r8, #1
 8007c62:	68e3      	ldr	r3, [r4, #12]
 8007c64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c66:	1a5b      	subs	r3, r3, r1
 8007c68:	4543      	cmp	r3, r8
 8007c6a:	dcf0      	bgt.n	8007c4e <_printf_float+0x42a>
 8007c6c:	e6fc      	b.n	8007a68 <_printf_float+0x244>
 8007c6e:	f04f 0800 	mov.w	r8, #0
 8007c72:	f104 0919 	add.w	r9, r4, #25
 8007c76:	e7f4      	b.n	8007c62 <_printf_float+0x43e>

08007c78 <_printf_common>:
 8007c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c7c:	4616      	mov	r6, r2
 8007c7e:	4698      	mov	r8, r3
 8007c80:	688a      	ldr	r2, [r1, #8]
 8007c82:	690b      	ldr	r3, [r1, #16]
 8007c84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	bfb8      	it	lt
 8007c8c:	4613      	movlt	r3, r2
 8007c8e:	6033      	str	r3, [r6, #0]
 8007c90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c94:	4607      	mov	r7, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	b10a      	cbz	r2, 8007c9e <_printf_common+0x26>
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	6033      	str	r3, [r6, #0]
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	0699      	lsls	r1, r3, #26
 8007ca2:	bf42      	ittt	mi
 8007ca4:	6833      	ldrmi	r3, [r6, #0]
 8007ca6:	3302      	addmi	r3, #2
 8007ca8:	6033      	strmi	r3, [r6, #0]
 8007caa:	6825      	ldr	r5, [r4, #0]
 8007cac:	f015 0506 	ands.w	r5, r5, #6
 8007cb0:	d106      	bne.n	8007cc0 <_printf_common+0x48>
 8007cb2:	f104 0a19 	add.w	sl, r4, #25
 8007cb6:	68e3      	ldr	r3, [r4, #12]
 8007cb8:	6832      	ldr	r2, [r6, #0]
 8007cba:	1a9b      	subs	r3, r3, r2
 8007cbc:	42ab      	cmp	r3, r5
 8007cbe:	dc26      	bgt.n	8007d0e <_printf_common+0x96>
 8007cc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007cc4:	6822      	ldr	r2, [r4, #0]
 8007cc6:	3b00      	subs	r3, #0
 8007cc8:	bf18      	it	ne
 8007cca:	2301      	movne	r3, #1
 8007ccc:	0692      	lsls	r2, r2, #26
 8007cce:	d42b      	bmi.n	8007d28 <_printf_common+0xb0>
 8007cd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007cd4:	4641      	mov	r1, r8
 8007cd6:	4638      	mov	r0, r7
 8007cd8:	47c8      	blx	r9
 8007cda:	3001      	adds	r0, #1
 8007cdc:	d01e      	beq.n	8007d1c <_printf_common+0xa4>
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	6922      	ldr	r2, [r4, #16]
 8007ce2:	f003 0306 	and.w	r3, r3, #6
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	bf02      	ittt	eq
 8007cea:	68e5      	ldreq	r5, [r4, #12]
 8007cec:	6833      	ldreq	r3, [r6, #0]
 8007cee:	1aed      	subeq	r5, r5, r3
 8007cf0:	68a3      	ldr	r3, [r4, #8]
 8007cf2:	bf0c      	ite	eq
 8007cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cf8:	2500      	movne	r5, #0
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	bfc4      	itt	gt
 8007cfe:	1a9b      	subgt	r3, r3, r2
 8007d00:	18ed      	addgt	r5, r5, r3
 8007d02:	2600      	movs	r6, #0
 8007d04:	341a      	adds	r4, #26
 8007d06:	42b5      	cmp	r5, r6
 8007d08:	d11a      	bne.n	8007d40 <_printf_common+0xc8>
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	e008      	b.n	8007d20 <_printf_common+0xa8>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	4652      	mov	r2, sl
 8007d12:	4641      	mov	r1, r8
 8007d14:	4638      	mov	r0, r7
 8007d16:	47c8      	blx	r9
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d103      	bne.n	8007d24 <_printf_common+0xac>
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d24:	3501      	adds	r5, #1
 8007d26:	e7c6      	b.n	8007cb6 <_printf_common+0x3e>
 8007d28:	18e1      	adds	r1, r4, r3
 8007d2a:	1c5a      	adds	r2, r3, #1
 8007d2c:	2030      	movs	r0, #48	@ 0x30
 8007d2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d32:	4422      	add	r2, r4
 8007d34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d3c:	3302      	adds	r3, #2
 8007d3e:	e7c7      	b.n	8007cd0 <_printf_common+0x58>
 8007d40:	2301      	movs	r3, #1
 8007d42:	4622      	mov	r2, r4
 8007d44:	4641      	mov	r1, r8
 8007d46:	4638      	mov	r0, r7
 8007d48:	47c8      	blx	r9
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	d0e6      	beq.n	8007d1c <_printf_common+0xa4>
 8007d4e:	3601      	adds	r6, #1
 8007d50:	e7d9      	b.n	8007d06 <_printf_common+0x8e>
	...

08007d54 <_printf_i>:
 8007d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d58:	7e0f      	ldrb	r7, [r1, #24]
 8007d5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d5c:	2f78      	cmp	r7, #120	@ 0x78
 8007d5e:	4691      	mov	r9, r2
 8007d60:	4680      	mov	r8, r0
 8007d62:	460c      	mov	r4, r1
 8007d64:	469a      	mov	sl, r3
 8007d66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d6a:	d807      	bhi.n	8007d7c <_printf_i+0x28>
 8007d6c:	2f62      	cmp	r7, #98	@ 0x62
 8007d6e:	d80a      	bhi.n	8007d86 <_printf_i+0x32>
 8007d70:	2f00      	cmp	r7, #0
 8007d72:	f000 80d2 	beq.w	8007f1a <_printf_i+0x1c6>
 8007d76:	2f58      	cmp	r7, #88	@ 0x58
 8007d78:	f000 80b9 	beq.w	8007eee <_printf_i+0x19a>
 8007d7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d84:	e03a      	b.n	8007dfc <_printf_i+0xa8>
 8007d86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d8a:	2b15      	cmp	r3, #21
 8007d8c:	d8f6      	bhi.n	8007d7c <_printf_i+0x28>
 8007d8e:	a101      	add	r1, pc, #4	@ (adr r1, 8007d94 <_printf_i+0x40>)
 8007d90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d94:	08007ded 	.word	0x08007ded
 8007d98:	08007e01 	.word	0x08007e01
 8007d9c:	08007d7d 	.word	0x08007d7d
 8007da0:	08007d7d 	.word	0x08007d7d
 8007da4:	08007d7d 	.word	0x08007d7d
 8007da8:	08007d7d 	.word	0x08007d7d
 8007dac:	08007e01 	.word	0x08007e01
 8007db0:	08007d7d 	.word	0x08007d7d
 8007db4:	08007d7d 	.word	0x08007d7d
 8007db8:	08007d7d 	.word	0x08007d7d
 8007dbc:	08007d7d 	.word	0x08007d7d
 8007dc0:	08007f01 	.word	0x08007f01
 8007dc4:	08007e2b 	.word	0x08007e2b
 8007dc8:	08007ebb 	.word	0x08007ebb
 8007dcc:	08007d7d 	.word	0x08007d7d
 8007dd0:	08007d7d 	.word	0x08007d7d
 8007dd4:	08007f23 	.word	0x08007f23
 8007dd8:	08007d7d 	.word	0x08007d7d
 8007ddc:	08007e2b 	.word	0x08007e2b
 8007de0:	08007d7d 	.word	0x08007d7d
 8007de4:	08007d7d 	.word	0x08007d7d
 8007de8:	08007ec3 	.word	0x08007ec3
 8007dec:	6833      	ldr	r3, [r6, #0]
 8007dee:	1d1a      	adds	r2, r3, #4
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6032      	str	r2, [r6, #0]
 8007df4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007df8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e09d      	b.n	8007f3c <_printf_i+0x1e8>
 8007e00:	6833      	ldr	r3, [r6, #0]
 8007e02:	6820      	ldr	r0, [r4, #0]
 8007e04:	1d19      	adds	r1, r3, #4
 8007e06:	6031      	str	r1, [r6, #0]
 8007e08:	0606      	lsls	r6, r0, #24
 8007e0a:	d501      	bpl.n	8007e10 <_printf_i+0xbc>
 8007e0c:	681d      	ldr	r5, [r3, #0]
 8007e0e:	e003      	b.n	8007e18 <_printf_i+0xc4>
 8007e10:	0645      	lsls	r5, r0, #25
 8007e12:	d5fb      	bpl.n	8007e0c <_printf_i+0xb8>
 8007e14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e18:	2d00      	cmp	r5, #0
 8007e1a:	da03      	bge.n	8007e24 <_printf_i+0xd0>
 8007e1c:	232d      	movs	r3, #45	@ 0x2d
 8007e1e:	426d      	negs	r5, r5
 8007e20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e24:	4859      	ldr	r0, [pc, #356]	@ (8007f8c <_printf_i+0x238>)
 8007e26:	230a      	movs	r3, #10
 8007e28:	e011      	b.n	8007e4e <_printf_i+0xfa>
 8007e2a:	6821      	ldr	r1, [r4, #0]
 8007e2c:	6833      	ldr	r3, [r6, #0]
 8007e2e:	0608      	lsls	r0, r1, #24
 8007e30:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e34:	d402      	bmi.n	8007e3c <_printf_i+0xe8>
 8007e36:	0649      	lsls	r1, r1, #25
 8007e38:	bf48      	it	mi
 8007e3a:	b2ad      	uxthmi	r5, r5
 8007e3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e3e:	4853      	ldr	r0, [pc, #332]	@ (8007f8c <_printf_i+0x238>)
 8007e40:	6033      	str	r3, [r6, #0]
 8007e42:	bf14      	ite	ne
 8007e44:	230a      	movne	r3, #10
 8007e46:	2308      	moveq	r3, #8
 8007e48:	2100      	movs	r1, #0
 8007e4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e4e:	6866      	ldr	r6, [r4, #4]
 8007e50:	60a6      	str	r6, [r4, #8]
 8007e52:	2e00      	cmp	r6, #0
 8007e54:	bfa2      	ittt	ge
 8007e56:	6821      	ldrge	r1, [r4, #0]
 8007e58:	f021 0104 	bicge.w	r1, r1, #4
 8007e5c:	6021      	strge	r1, [r4, #0]
 8007e5e:	b90d      	cbnz	r5, 8007e64 <_printf_i+0x110>
 8007e60:	2e00      	cmp	r6, #0
 8007e62:	d04b      	beq.n	8007efc <_printf_i+0x1a8>
 8007e64:	4616      	mov	r6, r2
 8007e66:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e6a:	fb03 5711 	mls	r7, r3, r1, r5
 8007e6e:	5dc7      	ldrb	r7, [r0, r7]
 8007e70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e74:	462f      	mov	r7, r5
 8007e76:	42bb      	cmp	r3, r7
 8007e78:	460d      	mov	r5, r1
 8007e7a:	d9f4      	bls.n	8007e66 <_printf_i+0x112>
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d10b      	bne.n	8007e98 <_printf_i+0x144>
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	07df      	lsls	r7, r3, #31
 8007e84:	d508      	bpl.n	8007e98 <_printf_i+0x144>
 8007e86:	6923      	ldr	r3, [r4, #16]
 8007e88:	6861      	ldr	r1, [r4, #4]
 8007e8a:	4299      	cmp	r1, r3
 8007e8c:	bfde      	ittt	le
 8007e8e:	2330      	movle	r3, #48	@ 0x30
 8007e90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e98:	1b92      	subs	r2, r2, r6
 8007e9a:	6122      	str	r2, [r4, #16]
 8007e9c:	f8cd a000 	str.w	sl, [sp]
 8007ea0:	464b      	mov	r3, r9
 8007ea2:	aa03      	add	r2, sp, #12
 8007ea4:	4621      	mov	r1, r4
 8007ea6:	4640      	mov	r0, r8
 8007ea8:	f7ff fee6 	bl	8007c78 <_printf_common>
 8007eac:	3001      	adds	r0, #1
 8007eae:	d14a      	bne.n	8007f46 <_printf_i+0x1f2>
 8007eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb4:	b004      	add	sp, #16
 8007eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	f043 0320 	orr.w	r3, r3, #32
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	4833      	ldr	r0, [pc, #204]	@ (8007f90 <_printf_i+0x23c>)
 8007ec4:	2778      	movs	r7, #120	@ 0x78
 8007ec6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	6831      	ldr	r1, [r6, #0]
 8007ece:	061f      	lsls	r7, r3, #24
 8007ed0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ed4:	d402      	bmi.n	8007edc <_printf_i+0x188>
 8007ed6:	065f      	lsls	r7, r3, #25
 8007ed8:	bf48      	it	mi
 8007eda:	b2ad      	uxthmi	r5, r5
 8007edc:	6031      	str	r1, [r6, #0]
 8007ede:	07d9      	lsls	r1, r3, #31
 8007ee0:	bf44      	itt	mi
 8007ee2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ee6:	6023      	strmi	r3, [r4, #0]
 8007ee8:	b11d      	cbz	r5, 8007ef2 <_printf_i+0x19e>
 8007eea:	2310      	movs	r3, #16
 8007eec:	e7ac      	b.n	8007e48 <_printf_i+0xf4>
 8007eee:	4827      	ldr	r0, [pc, #156]	@ (8007f8c <_printf_i+0x238>)
 8007ef0:	e7e9      	b.n	8007ec6 <_printf_i+0x172>
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	f023 0320 	bic.w	r3, r3, #32
 8007ef8:	6023      	str	r3, [r4, #0]
 8007efa:	e7f6      	b.n	8007eea <_printf_i+0x196>
 8007efc:	4616      	mov	r6, r2
 8007efe:	e7bd      	b.n	8007e7c <_printf_i+0x128>
 8007f00:	6833      	ldr	r3, [r6, #0]
 8007f02:	6825      	ldr	r5, [r4, #0]
 8007f04:	6961      	ldr	r1, [r4, #20]
 8007f06:	1d18      	adds	r0, r3, #4
 8007f08:	6030      	str	r0, [r6, #0]
 8007f0a:	062e      	lsls	r6, r5, #24
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	d501      	bpl.n	8007f14 <_printf_i+0x1c0>
 8007f10:	6019      	str	r1, [r3, #0]
 8007f12:	e002      	b.n	8007f1a <_printf_i+0x1c6>
 8007f14:	0668      	lsls	r0, r5, #25
 8007f16:	d5fb      	bpl.n	8007f10 <_printf_i+0x1bc>
 8007f18:	8019      	strh	r1, [r3, #0]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	6123      	str	r3, [r4, #16]
 8007f1e:	4616      	mov	r6, r2
 8007f20:	e7bc      	b.n	8007e9c <_printf_i+0x148>
 8007f22:	6833      	ldr	r3, [r6, #0]
 8007f24:	1d1a      	adds	r2, r3, #4
 8007f26:	6032      	str	r2, [r6, #0]
 8007f28:	681e      	ldr	r6, [r3, #0]
 8007f2a:	6862      	ldr	r2, [r4, #4]
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	4630      	mov	r0, r6
 8007f30:	f7f8 f94e 	bl	80001d0 <memchr>
 8007f34:	b108      	cbz	r0, 8007f3a <_printf_i+0x1e6>
 8007f36:	1b80      	subs	r0, r0, r6
 8007f38:	6060      	str	r0, [r4, #4]
 8007f3a:	6863      	ldr	r3, [r4, #4]
 8007f3c:	6123      	str	r3, [r4, #16]
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f44:	e7aa      	b.n	8007e9c <_printf_i+0x148>
 8007f46:	6923      	ldr	r3, [r4, #16]
 8007f48:	4632      	mov	r2, r6
 8007f4a:	4649      	mov	r1, r9
 8007f4c:	4640      	mov	r0, r8
 8007f4e:	47d0      	blx	sl
 8007f50:	3001      	adds	r0, #1
 8007f52:	d0ad      	beq.n	8007eb0 <_printf_i+0x15c>
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	079b      	lsls	r3, r3, #30
 8007f58:	d413      	bmi.n	8007f82 <_printf_i+0x22e>
 8007f5a:	68e0      	ldr	r0, [r4, #12]
 8007f5c:	9b03      	ldr	r3, [sp, #12]
 8007f5e:	4298      	cmp	r0, r3
 8007f60:	bfb8      	it	lt
 8007f62:	4618      	movlt	r0, r3
 8007f64:	e7a6      	b.n	8007eb4 <_printf_i+0x160>
 8007f66:	2301      	movs	r3, #1
 8007f68:	4632      	mov	r2, r6
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	47d0      	blx	sl
 8007f70:	3001      	adds	r0, #1
 8007f72:	d09d      	beq.n	8007eb0 <_printf_i+0x15c>
 8007f74:	3501      	adds	r5, #1
 8007f76:	68e3      	ldr	r3, [r4, #12]
 8007f78:	9903      	ldr	r1, [sp, #12]
 8007f7a:	1a5b      	subs	r3, r3, r1
 8007f7c:	42ab      	cmp	r3, r5
 8007f7e:	dcf2      	bgt.n	8007f66 <_printf_i+0x212>
 8007f80:	e7eb      	b.n	8007f5a <_printf_i+0x206>
 8007f82:	2500      	movs	r5, #0
 8007f84:	f104 0619 	add.w	r6, r4, #25
 8007f88:	e7f5      	b.n	8007f76 <_printf_i+0x222>
 8007f8a:	bf00      	nop
 8007f8c:	0800b28b 	.word	0x0800b28b
 8007f90:	0800b29c 	.word	0x0800b29c

08007f94 <std>:
 8007f94:	2300      	movs	r3, #0
 8007f96:	b510      	push	{r4, lr}
 8007f98:	4604      	mov	r4, r0
 8007f9a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fa2:	6083      	str	r3, [r0, #8]
 8007fa4:	8181      	strh	r1, [r0, #12]
 8007fa6:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fa8:	81c2      	strh	r2, [r0, #14]
 8007faa:	6183      	str	r3, [r0, #24]
 8007fac:	4619      	mov	r1, r3
 8007fae:	2208      	movs	r2, #8
 8007fb0:	305c      	adds	r0, #92	@ 0x5c
 8007fb2:	f000 fa2d 	bl	8008410 <memset>
 8007fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007fec <std+0x58>)
 8007fb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8007fba:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff0 <std+0x5c>)
 8007fbc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff4 <std+0x60>)
 8007fc0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff8 <std+0x64>)
 8007fc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ffc <std+0x68>)
 8007fc8:	6224      	str	r4, [r4, #32]
 8007fca:	429c      	cmp	r4, r3
 8007fcc:	d006      	beq.n	8007fdc <std+0x48>
 8007fce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fd2:	4294      	cmp	r4, r2
 8007fd4:	d002      	beq.n	8007fdc <std+0x48>
 8007fd6:	33d0      	adds	r3, #208	@ 0xd0
 8007fd8:	429c      	cmp	r4, r3
 8007fda:	d105      	bne.n	8007fe8 <std+0x54>
 8007fdc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fe4:	f000 ba90 	b.w	8008508 <__retarget_lock_init_recursive>
 8007fe8:	bd10      	pop	{r4, pc}
 8007fea:	bf00      	nop
 8007fec:	08008261 	.word	0x08008261
 8007ff0:	08008283 	.word	0x08008283
 8007ff4:	080082bb 	.word	0x080082bb
 8007ff8:	080082df 	.word	0x080082df
 8007ffc:	2000067c 	.word	0x2000067c

08008000 <stdio_exit_handler>:
 8008000:	4a02      	ldr	r2, [pc, #8]	@ (800800c <stdio_exit_handler+0xc>)
 8008002:	4903      	ldr	r1, [pc, #12]	@ (8008010 <stdio_exit_handler+0x10>)
 8008004:	4803      	ldr	r0, [pc, #12]	@ (8008014 <stdio_exit_handler+0x14>)
 8008006:	f000 b869 	b.w	80080dc <_fwalk_sglue>
 800800a:	bf00      	nop
 800800c:	20000018 	.word	0x20000018
 8008010:	0800a0e9 	.word	0x0800a0e9
 8008014:	20000028 	.word	0x20000028

08008018 <cleanup_stdio>:
 8008018:	6841      	ldr	r1, [r0, #4]
 800801a:	4b0c      	ldr	r3, [pc, #48]	@ (800804c <cleanup_stdio+0x34>)
 800801c:	4299      	cmp	r1, r3
 800801e:	b510      	push	{r4, lr}
 8008020:	4604      	mov	r4, r0
 8008022:	d001      	beq.n	8008028 <cleanup_stdio+0x10>
 8008024:	f002 f860 	bl	800a0e8 <_fflush_r>
 8008028:	68a1      	ldr	r1, [r4, #8]
 800802a:	4b09      	ldr	r3, [pc, #36]	@ (8008050 <cleanup_stdio+0x38>)
 800802c:	4299      	cmp	r1, r3
 800802e:	d002      	beq.n	8008036 <cleanup_stdio+0x1e>
 8008030:	4620      	mov	r0, r4
 8008032:	f002 f859 	bl	800a0e8 <_fflush_r>
 8008036:	68e1      	ldr	r1, [r4, #12]
 8008038:	4b06      	ldr	r3, [pc, #24]	@ (8008054 <cleanup_stdio+0x3c>)
 800803a:	4299      	cmp	r1, r3
 800803c:	d004      	beq.n	8008048 <cleanup_stdio+0x30>
 800803e:	4620      	mov	r0, r4
 8008040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008044:	f002 b850 	b.w	800a0e8 <_fflush_r>
 8008048:	bd10      	pop	{r4, pc}
 800804a:	bf00      	nop
 800804c:	2000067c 	.word	0x2000067c
 8008050:	200006e4 	.word	0x200006e4
 8008054:	2000074c 	.word	0x2000074c

08008058 <global_stdio_init.part.0>:
 8008058:	b510      	push	{r4, lr}
 800805a:	4b0b      	ldr	r3, [pc, #44]	@ (8008088 <global_stdio_init.part.0+0x30>)
 800805c:	4c0b      	ldr	r4, [pc, #44]	@ (800808c <global_stdio_init.part.0+0x34>)
 800805e:	4a0c      	ldr	r2, [pc, #48]	@ (8008090 <global_stdio_init.part.0+0x38>)
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	4620      	mov	r0, r4
 8008064:	2200      	movs	r2, #0
 8008066:	2104      	movs	r1, #4
 8008068:	f7ff ff94 	bl	8007f94 <std>
 800806c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008070:	2201      	movs	r2, #1
 8008072:	2109      	movs	r1, #9
 8008074:	f7ff ff8e 	bl	8007f94 <std>
 8008078:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800807c:	2202      	movs	r2, #2
 800807e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008082:	2112      	movs	r1, #18
 8008084:	f7ff bf86 	b.w	8007f94 <std>
 8008088:	200007b4 	.word	0x200007b4
 800808c:	2000067c 	.word	0x2000067c
 8008090:	08008001 	.word	0x08008001

08008094 <__sfp_lock_acquire>:
 8008094:	4801      	ldr	r0, [pc, #4]	@ (800809c <__sfp_lock_acquire+0x8>)
 8008096:	f000 ba38 	b.w	800850a <__retarget_lock_acquire_recursive>
 800809a:	bf00      	nop
 800809c:	200007bd 	.word	0x200007bd

080080a0 <__sfp_lock_release>:
 80080a0:	4801      	ldr	r0, [pc, #4]	@ (80080a8 <__sfp_lock_release+0x8>)
 80080a2:	f000 ba33 	b.w	800850c <__retarget_lock_release_recursive>
 80080a6:	bf00      	nop
 80080a8:	200007bd 	.word	0x200007bd

080080ac <__sinit>:
 80080ac:	b510      	push	{r4, lr}
 80080ae:	4604      	mov	r4, r0
 80080b0:	f7ff fff0 	bl	8008094 <__sfp_lock_acquire>
 80080b4:	6a23      	ldr	r3, [r4, #32]
 80080b6:	b11b      	cbz	r3, 80080c0 <__sinit+0x14>
 80080b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080bc:	f7ff bff0 	b.w	80080a0 <__sfp_lock_release>
 80080c0:	4b04      	ldr	r3, [pc, #16]	@ (80080d4 <__sinit+0x28>)
 80080c2:	6223      	str	r3, [r4, #32]
 80080c4:	4b04      	ldr	r3, [pc, #16]	@ (80080d8 <__sinit+0x2c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1f5      	bne.n	80080b8 <__sinit+0xc>
 80080cc:	f7ff ffc4 	bl	8008058 <global_stdio_init.part.0>
 80080d0:	e7f2      	b.n	80080b8 <__sinit+0xc>
 80080d2:	bf00      	nop
 80080d4:	08008019 	.word	0x08008019
 80080d8:	200007b4 	.word	0x200007b4

080080dc <_fwalk_sglue>:
 80080dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080e0:	4607      	mov	r7, r0
 80080e2:	4688      	mov	r8, r1
 80080e4:	4614      	mov	r4, r2
 80080e6:	2600      	movs	r6, #0
 80080e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080ec:	f1b9 0901 	subs.w	r9, r9, #1
 80080f0:	d505      	bpl.n	80080fe <_fwalk_sglue+0x22>
 80080f2:	6824      	ldr	r4, [r4, #0]
 80080f4:	2c00      	cmp	r4, #0
 80080f6:	d1f7      	bne.n	80080e8 <_fwalk_sglue+0xc>
 80080f8:	4630      	mov	r0, r6
 80080fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080fe:	89ab      	ldrh	r3, [r5, #12]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d907      	bls.n	8008114 <_fwalk_sglue+0x38>
 8008104:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008108:	3301      	adds	r3, #1
 800810a:	d003      	beq.n	8008114 <_fwalk_sglue+0x38>
 800810c:	4629      	mov	r1, r5
 800810e:	4638      	mov	r0, r7
 8008110:	47c0      	blx	r8
 8008112:	4306      	orrs	r6, r0
 8008114:	3568      	adds	r5, #104	@ 0x68
 8008116:	e7e9      	b.n	80080ec <_fwalk_sglue+0x10>

08008118 <iprintf>:
 8008118:	b40f      	push	{r0, r1, r2, r3}
 800811a:	b507      	push	{r0, r1, r2, lr}
 800811c:	4906      	ldr	r1, [pc, #24]	@ (8008138 <iprintf+0x20>)
 800811e:	ab04      	add	r3, sp, #16
 8008120:	6808      	ldr	r0, [r1, #0]
 8008122:	f853 2b04 	ldr.w	r2, [r3], #4
 8008126:	6881      	ldr	r1, [r0, #8]
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	f001 fe41 	bl	8009db0 <_vfiprintf_r>
 800812e:	b003      	add	sp, #12
 8008130:	f85d eb04 	ldr.w	lr, [sp], #4
 8008134:	b004      	add	sp, #16
 8008136:	4770      	bx	lr
 8008138:	20000024 	.word	0x20000024

0800813c <_puts_r>:
 800813c:	6a03      	ldr	r3, [r0, #32]
 800813e:	b570      	push	{r4, r5, r6, lr}
 8008140:	6884      	ldr	r4, [r0, #8]
 8008142:	4605      	mov	r5, r0
 8008144:	460e      	mov	r6, r1
 8008146:	b90b      	cbnz	r3, 800814c <_puts_r+0x10>
 8008148:	f7ff ffb0 	bl	80080ac <__sinit>
 800814c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800814e:	07db      	lsls	r3, r3, #31
 8008150:	d405      	bmi.n	800815e <_puts_r+0x22>
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	0598      	lsls	r0, r3, #22
 8008156:	d402      	bmi.n	800815e <_puts_r+0x22>
 8008158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800815a:	f000 f9d6 	bl	800850a <__retarget_lock_acquire_recursive>
 800815e:	89a3      	ldrh	r3, [r4, #12]
 8008160:	0719      	lsls	r1, r3, #28
 8008162:	d502      	bpl.n	800816a <_puts_r+0x2e>
 8008164:	6923      	ldr	r3, [r4, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d135      	bne.n	80081d6 <_puts_r+0x9a>
 800816a:	4621      	mov	r1, r4
 800816c:	4628      	mov	r0, r5
 800816e:	f000 f8f9 	bl	8008364 <__swsetup_r>
 8008172:	b380      	cbz	r0, 80081d6 <_puts_r+0x9a>
 8008174:	f04f 35ff 	mov.w	r5, #4294967295
 8008178:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800817a:	07da      	lsls	r2, r3, #31
 800817c:	d405      	bmi.n	800818a <_puts_r+0x4e>
 800817e:	89a3      	ldrh	r3, [r4, #12]
 8008180:	059b      	lsls	r3, r3, #22
 8008182:	d402      	bmi.n	800818a <_puts_r+0x4e>
 8008184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008186:	f000 f9c1 	bl	800850c <__retarget_lock_release_recursive>
 800818a:	4628      	mov	r0, r5
 800818c:	bd70      	pop	{r4, r5, r6, pc}
 800818e:	2b00      	cmp	r3, #0
 8008190:	da04      	bge.n	800819c <_puts_r+0x60>
 8008192:	69a2      	ldr	r2, [r4, #24]
 8008194:	429a      	cmp	r2, r3
 8008196:	dc17      	bgt.n	80081c8 <_puts_r+0x8c>
 8008198:	290a      	cmp	r1, #10
 800819a:	d015      	beq.n	80081c8 <_puts_r+0x8c>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	1c5a      	adds	r2, r3, #1
 80081a0:	6022      	str	r2, [r4, #0]
 80081a2:	7019      	strb	r1, [r3, #0]
 80081a4:	68a3      	ldr	r3, [r4, #8]
 80081a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081aa:	3b01      	subs	r3, #1
 80081ac:	60a3      	str	r3, [r4, #8]
 80081ae:	2900      	cmp	r1, #0
 80081b0:	d1ed      	bne.n	800818e <_puts_r+0x52>
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	da11      	bge.n	80081da <_puts_r+0x9e>
 80081b6:	4622      	mov	r2, r4
 80081b8:	210a      	movs	r1, #10
 80081ba:	4628      	mov	r0, r5
 80081bc:	f000 f893 	bl	80082e6 <__swbuf_r>
 80081c0:	3001      	adds	r0, #1
 80081c2:	d0d7      	beq.n	8008174 <_puts_r+0x38>
 80081c4:	250a      	movs	r5, #10
 80081c6:	e7d7      	b.n	8008178 <_puts_r+0x3c>
 80081c8:	4622      	mov	r2, r4
 80081ca:	4628      	mov	r0, r5
 80081cc:	f000 f88b 	bl	80082e6 <__swbuf_r>
 80081d0:	3001      	adds	r0, #1
 80081d2:	d1e7      	bne.n	80081a4 <_puts_r+0x68>
 80081d4:	e7ce      	b.n	8008174 <_puts_r+0x38>
 80081d6:	3e01      	subs	r6, #1
 80081d8:	e7e4      	b.n	80081a4 <_puts_r+0x68>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	1c5a      	adds	r2, r3, #1
 80081de:	6022      	str	r2, [r4, #0]
 80081e0:	220a      	movs	r2, #10
 80081e2:	701a      	strb	r2, [r3, #0]
 80081e4:	e7ee      	b.n	80081c4 <_puts_r+0x88>
	...

080081e8 <puts>:
 80081e8:	4b02      	ldr	r3, [pc, #8]	@ (80081f4 <puts+0xc>)
 80081ea:	4601      	mov	r1, r0
 80081ec:	6818      	ldr	r0, [r3, #0]
 80081ee:	f7ff bfa5 	b.w	800813c <_puts_r>
 80081f2:	bf00      	nop
 80081f4:	20000024 	.word	0x20000024

080081f8 <sniprintf>:
 80081f8:	b40c      	push	{r2, r3}
 80081fa:	b530      	push	{r4, r5, lr}
 80081fc:	4b17      	ldr	r3, [pc, #92]	@ (800825c <sniprintf+0x64>)
 80081fe:	1e0c      	subs	r4, r1, #0
 8008200:	681d      	ldr	r5, [r3, #0]
 8008202:	b09d      	sub	sp, #116	@ 0x74
 8008204:	da08      	bge.n	8008218 <sniprintf+0x20>
 8008206:	238b      	movs	r3, #139	@ 0x8b
 8008208:	602b      	str	r3, [r5, #0]
 800820a:	f04f 30ff 	mov.w	r0, #4294967295
 800820e:	b01d      	add	sp, #116	@ 0x74
 8008210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008214:	b002      	add	sp, #8
 8008216:	4770      	bx	lr
 8008218:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800821c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008220:	bf14      	ite	ne
 8008222:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008226:	4623      	moveq	r3, r4
 8008228:	9304      	str	r3, [sp, #16]
 800822a:	9307      	str	r3, [sp, #28]
 800822c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008230:	9002      	str	r0, [sp, #8]
 8008232:	9006      	str	r0, [sp, #24]
 8008234:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008238:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800823a:	ab21      	add	r3, sp, #132	@ 0x84
 800823c:	a902      	add	r1, sp, #8
 800823e:	4628      	mov	r0, r5
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	f001 fc8f 	bl	8009b64 <_svfiprintf_r>
 8008246:	1c43      	adds	r3, r0, #1
 8008248:	bfbc      	itt	lt
 800824a:	238b      	movlt	r3, #139	@ 0x8b
 800824c:	602b      	strlt	r3, [r5, #0]
 800824e:	2c00      	cmp	r4, #0
 8008250:	d0dd      	beq.n	800820e <sniprintf+0x16>
 8008252:	9b02      	ldr	r3, [sp, #8]
 8008254:	2200      	movs	r2, #0
 8008256:	701a      	strb	r2, [r3, #0]
 8008258:	e7d9      	b.n	800820e <sniprintf+0x16>
 800825a:	bf00      	nop
 800825c:	20000024 	.word	0x20000024

08008260 <__sread>:
 8008260:	b510      	push	{r4, lr}
 8008262:	460c      	mov	r4, r1
 8008264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008268:	f000 f900 	bl	800846c <_read_r>
 800826c:	2800      	cmp	r0, #0
 800826e:	bfab      	itete	ge
 8008270:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008272:	89a3      	ldrhlt	r3, [r4, #12]
 8008274:	181b      	addge	r3, r3, r0
 8008276:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800827a:	bfac      	ite	ge
 800827c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800827e:	81a3      	strhlt	r3, [r4, #12]
 8008280:	bd10      	pop	{r4, pc}

08008282 <__swrite>:
 8008282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008286:	461f      	mov	r7, r3
 8008288:	898b      	ldrh	r3, [r1, #12]
 800828a:	05db      	lsls	r3, r3, #23
 800828c:	4605      	mov	r5, r0
 800828e:	460c      	mov	r4, r1
 8008290:	4616      	mov	r6, r2
 8008292:	d505      	bpl.n	80082a0 <__swrite+0x1e>
 8008294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008298:	2302      	movs	r3, #2
 800829a:	2200      	movs	r2, #0
 800829c:	f000 f8d4 	bl	8008448 <_lseek_r>
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082aa:	81a3      	strh	r3, [r4, #12]
 80082ac:	4632      	mov	r2, r6
 80082ae:	463b      	mov	r3, r7
 80082b0:	4628      	mov	r0, r5
 80082b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082b6:	f000 b8eb 	b.w	8008490 <_write_r>

080082ba <__sseek>:
 80082ba:	b510      	push	{r4, lr}
 80082bc:	460c      	mov	r4, r1
 80082be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c2:	f000 f8c1 	bl	8008448 <_lseek_r>
 80082c6:	1c43      	adds	r3, r0, #1
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	bf15      	itete	ne
 80082cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082d6:	81a3      	strheq	r3, [r4, #12]
 80082d8:	bf18      	it	ne
 80082da:	81a3      	strhne	r3, [r4, #12]
 80082dc:	bd10      	pop	{r4, pc}

080082de <__sclose>:
 80082de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e2:	f000 b8a1 	b.w	8008428 <_close_r>

080082e6 <__swbuf_r>:
 80082e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e8:	460e      	mov	r6, r1
 80082ea:	4614      	mov	r4, r2
 80082ec:	4605      	mov	r5, r0
 80082ee:	b118      	cbz	r0, 80082f8 <__swbuf_r+0x12>
 80082f0:	6a03      	ldr	r3, [r0, #32]
 80082f2:	b90b      	cbnz	r3, 80082f8 <__swbuf_r+0x12>
 80082f4:	f7ff feda 	bl	80080ac <__sinit>
 80082f8:	69a3      	ldr	r3, [r4, #24]
 80082fa:	60a3      	str	r3, [r4, #8]
 80082fc:	89a3      	ldrh	r3, [r4, #12]
 80082fe:	071a      	lsls	r2, r3, #28
 8008300:	d501      	bpl.n	8008306 <__swbuf_r+0x20>
 8008302:	6923      	ldr	r3, [r4, #16]
 8008304:	b943      	cbnz	r3, 8008318 <__swbuf_r+0x32>
 8008306:	4621      	mov	r1, r4
 8008308:	4628      	mov	r0, r5
 800830a:	f000 f82b 	bl	8008364 <__swsetup_r>
 800830e:	b118      	cbz	r0, 8008318 <__swbuf_r+0x32>
 8008310:	f04f 37ff 	mov.w	r7, #4294967295
 8008314:	4638      	mov	r0, r7
 8008316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008318:	6823      	ldr	r3, [r4, #0]
 800831a:	6922      	ldr	r2, [r4, #16]
 800831c:	1a98      	subs	r0, r3, r2
 800831e:	6963      	ldr	r3, [r4, #20]
 8008320:	b2f6      	uxtb	r6, r6
 8008322:	4283      	cmp	r3, r0
 8008324:	4637      	mov	r7, r6
 8008326:	dc05      	bgt.n	8008334 <__swbuf_r+0x4e>
 8008328:	4621      	mov	r1, r4
 800832a:	4628      	mov	r0, r5
 800832c:	f001 fedc 	bl	800a0e8 <_fflush_r>
 8008330:	2800      	cmp	r0, #0
 8008332:	d1ed      	bne.n	8008310 <__swbuf_r+0x2a>
 8008334:	68a3      	ldr	r3, [r4, #8]
 8008336:	3b01      	subs	r3, #1
 8008338:	60a3      	str	r3, [r4, #8]
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	1c5a      	adds	r2, r3, #1
 800833e:	6022      	str	r2, [r4, #0]
 8008340:	701e      	strb	r6, [r3, #0]
 8008342:	6962      	ldr	r2, [r4, #20]
 8008344:	1c43      	adds	r3, r0, #1
 8008346:	429a      	cmp	r2, r3
 8008348:	d004      	beq.n	8008354 <__swbuf_r+0x6e>
 800834a:	89a3      	ldrh	r3, [r4, #12]
 800834c:	07db      	lsls	r3, r3, #31
 800834e:	d5e1      	bpl.n	8008314 <__swbuf_r+0x2e>
 8008350:	2e0a      	cmp	r6, #10
 8008352:	d1df      	bne.n	8008314 <__swbuf_r+0x2e>
 8008354:	4621      	mov	r1, r4
 8008356:	4628      	mov	r0, r5
 8008358:	f001 fec6 	bl	800a0e8 <_fflush_r>
 800835c:	2800      	cmp	r0, #0
 800835e:	d0d9      	beq.n	8008314 <__swbuf_r+0x2e>
 8008360:	e7d6      	b.n	8008310 <__swbuf_r+0x2a>
	...

08008364 <__swsetup_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4b29      	ldr	r3, [pc, #164]	@ (800840c <__swsetup_r+0xa8>)
 8008368:	4605      	mov	r5, r0
 800836a:	6818      	ldr	r0, [r3, #0]
 800836c:	460c      	mov	r4, r1
 800836e:	b118      	cbz	r0, 8008378 <__swsetup_r+0x14>
 8008370:	6a03      	ldr	r3, [r0, #32]
 8008372:	b90b      	cbnz	r3, 8008378 <__swsetup_r+0x14>
 8008374:	f7ff fe9a 	bl	80080ac <__sinit>
 8008378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800837c:	0719      	lsls	r1, r3, #28
 800837e:	d422      	bmi.n	80083c6 <__swsetup_r+0x62>
 8008380:	06da      	lsls	r2, r3, #27
 8008382:	d407      	bmi.n	8008394 <__swsetup_r+0x30>
 8008384:	2209      	movs	r2, #9
 8008386:	602a      	str	r2, [r5, #0]
 8008388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800838c:	81a3      	strh	r3, [r4, #12]
 800838e:	f04f 30ff 	mov.w	r0, #4294967295
 8008392:	e033      	b.n	80083fc <__swsetup_r+0x98>
 8008394:	0758      	lsls	r0, r3, #29
 8008396:	d512      	bpl.n	80083be <__swsetup_r+0x5a>
 8008398:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800839a:	b141      	cbz	r1, 80083ae <__swsetup_r+0x4a>
 800839c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083a0:	4299      	cmp	r1, r3
 80083a2:	d002      	beq.n	80083aa <__swsetup_r+0x46>
 80083a4:	4628      	mov	r0, r5
 80083a6:	f000 feff 	bl	80091a8 <_free_r>
 80083aa:	2300      	movs	r3, #0
 80083ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80083ae:	89a3      	ldrh	r3, [r4, #12]
 80083b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083b4:	81a3      	strh	r3, [r4, #12]
 80083b6:	2300      	movs	r3, #0
 80083b8:	6063      	str	r3, [r4, #4]
 80083ba:	6923      	ldr	r3, [r4, #16]
 80083bc:	6023      	str	r3, [r4, #0]
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	f043 0308 	orr.w	r3, r3, #8
 80083c4:	81a3      	strh	r3, [r4, #12]
 80083c6:	6923      	ldr	r3, [r4, #16]
 80083c8:	b94b      	cbnz	r3, 80083de <__swsetup_r+0x7a>
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80083d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083d4:	d003      	beq.n	80083de <__swsetup_r+0x7a>
 80083d6:	4621      	mov	r1, r4
 80083d8:	4628      	mov	r0, r5
 80083da:	f001 fed3 	bl	800a184 <__smakebuf_r>
 80083de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083e2:	f013 0201 	ands.w	r2, r3, #1
 80083e6:	d00a      	beq.n	80083fe <__swsetup_r+0x9a>
 80083e8:	2200      	movs	r2, #0
 80083ea:	60a2      	str	r2, [r4, #8]
 80083ec:	6962      	ldr	r2, [r4, #20]
 80083ee:	4252      	negs	r2, r2
 80083f0:	61a2      	str	r2, [r4, #24]
 80083f2:	6922      	ldr	r2, [r4, #16]
 80083f4:	b942      	cbnz	r2, 8008408 <__swsetup_r+0xa4>
 80083f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083fa:	d1c5      	bne.n	8008388 <__swsetup_r+0x24>
 80083fc:	bd38      	pop	{r3, r4, r5, pc}
 80083fe:	0799      	lsls	r1, r3, #30
 8008400:	bf58      	it	pl
 8008402:	6962      	ldrpl	r2, [r4, #20]
 8008404:	60a2      	str	r2, [r4, #8]
 8008406:	e7f4      	b.n	80083f2 <__swsetup_r+0x8e>
 8008408:	2000      	movs	r0, #0
 800840a:	e7f7      	b.n	80083fc <__swsetup_r+0x98>
 800840c:	20000024 	.word	0x20000024

08008410 <memset>:
 8008410:	4402      	add	r2, r0
 8008412:	4603      	mov	r3, r0
 8008414:	4293      	cmp	r3, r2
 8008416:	d100      	bne.n	800841a <memset+0xa>
 8008418:	4770      	bx	lr
 800841a:	f803 1b01 	strb.w	r1, [r3], #1
 800841e:	e7f9      	b.n	8008414 <memset+0x4>

08008420 <_localeconv_r>:
 8008420:	4800      	ldr	r0, [pc, #0]	@ (8008424 <_localeconv_r+0x4>)
 8008422:	4770      	bx	lr
 8008424:	20000164 	.word	0x20000164

08008428 <_close_r>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	4d06      	ldr	r5, [pc, #24]	@ (8008444 <_close_r+0x1c>)
 800842c:	2300      	movs	r3, #0
 800842e:	4604      	mov	r4, r0
 8008430:	4608      	mov	r0, r1
 8008432:	602b      	str	r3, [r5, #0]
 8008434:	f7fa fbbc 	bl	8002bb0 <_close>
 8008438:	1c43      	adds	r3, r0, #1
 800843a:	d102      	bne.n	8008442 <_close_r+0x1a>
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	b103      	cbz	r3, 8008442 <_close_r+0x1a>
 8008440:	6023      	str	r3, [r4, #0]
 8008442:	bd38      	pop	{r3, r4, r5, pc}
 8008444:	200007b8 	.word	0x200007b8

08008448 <_lseek_r>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	4d07      	ldr	r5, [pc, #28]	@ (8008468 <_lseek_r+0x20>)
 800844c:	4604      	mov	r4, r0
 800844e:	4608      	mov	r0, r1
 8008450:	4611      	mov	r1, r2
 8008452:	2200      	movs	r2, #0
 8008454:	602a      	str	r2, [r5, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	f7fa fbd1 	bl	8002bfe <_lseek>
 800845c:	1c43      	adds	r3, r0, #1
 800845e:	d102      	bne.n	8008466 <_lseek_r+0x1e>
 8008460:	682b      	ldr	r3, [r5, #0]
 8008462:	b103      	cbz	r3, 8008466 <_lseek_r+0x1e>
 8008464:	6023      	str	r3, [r4, #0]
 8008466:	bd38      	pop	{r3, r4, r5, pc}
 8008468:	200007b8 	.word	0x200007b8

0800846c <_read_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4d07      	ldr	r5, [pc, #28]	@ (800848c <_read_r+0x20>)
 8008470:	4604      	mov	r4, r0
 8008472:	4608      	mov	r0, r1
 8008474:	4611      	mov	r1, r2
 8008476:	2200      	movs	r2, #0
 8008478:	602a      	str	r2, [r5, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	f7fa fb5f 	bl	8002b3e <_read>
 8008480:	1c43      	adds	r3, r0, #1
 8008482:	d102      	bne.n	800848a <_read_r+0x1e>
 8008484:	682b      	ldr	r3, [r5, #0]
 8008486:	b103      	cbz	r3, 800848a <_read_r+0x1e>
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	bd38      	pop	{r3, r4, r5, pc}
 800848c:	200007b8 	.word	0x200007b8

08008490 <_write_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	4d07      	ldr	r5, [pc, #28]	@ (80084b0 <_write_r+0x20>)
 8008494:	4604      	mov	r4, r0
 8008496:	4608      	mov	r0, r1
 8008498:	4611      	mov	r1, r2
 800849a:	2200      	movs	r2, #0
 800849c:	602a      	str	r2, [r5, #0]
 800849e:	461a      	mov	r2, r3
 80084a0:	f7fa fb6a 	bl	8002b78 <_write>
 80084a4:	1c43      	adds	r3, r0, #1
 80084a6:	d102      	bne.n	80084ae <_write_r+0x1e>
 80084a8:	682b      	ldr	r3, [r5, #0]
 80084aa:	b103      	cbz	r3, 80084ae <_write_r+0x1e>
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	bd38      	pop	{r3, r4, r5, pc}
 80084b0:	200007b8 	.word	0x200007b8

080084b4 <__errno>:
 80084b4:	4b01      	ldr	r3, [pc, #4]	@ (80084bc <__errno+0x8>)
 80084b6:	6818      	ldr	r0, [r3, #0]
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	20000024 	.word	0x20000024

080084c0 <__libc_init_array>:
 80084c0:	b570      	push	{r4, r5, r6, lr}
 80084c2:	4d0d      	ldr	r5, [pc, #52]	@ (80084f8 <__libc_init_array+0x38>)
 80084c4:	4c0d      	ldr	r4, [pc, #52]	@ (80084fc <__libc_init_array+0x3c>)
 80084c6:	1b64      	subs	r4, r4, r5
 80084c8:	10a4      	asrs	r4, r4, #2
 80084ca:	2600      	movs	r6, #0
 80084cc:	42a6      	cmp	r6, r4
 80084ce:	d109      	bne.n	80084e4 <__libc_init_array+0x24>
 80084d0:	4d0b      	ldr	r5, [pc, #44]	@ (8008500 <__libc_init_array+0x40>)
 80084d2:	4c0c      	ldr	r4, [pc, #48]	@ (8008504 <__libc_init_array+0x44>)
 80084d4:	f002 fd50 	bl	800af78 <_init>
 80084d8:	1b64      	subs	r4, r4, r5
 80084da:	10a4      	asrs	r4, r4, #2
 80084dc:	2600      	movs	r6, #0
 80084de:	42a6      	cmp	r6, r4
 80084e0:	d105      	bne.n	80084ee <__libc_init_array+0x2e>
 80084e2:	bd70      	pop	{r4, r5, r6, pc}
 80084e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084e8:	4798      	blx	r3
 80084ea:	3601      	adds	r6, #1
 80084ec:	e7ee      	b.n	80084cc <__libc_init_array+0xc>
 80084ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f2:	4798      	blx	r3
 80084f4:	3601      	adds	r6, #1
 80084f6:	e7f2      	b.n	80084de <__libc_init_array+0x1e>
 80084f8:	0800b8c0 	.word	0x0800b8c0
 80084fc:	0800b8c0 	.word	0x0800b8c0
 8008500:	0800b8c0 	.word	0x0800b8c0
 8008504:	0800b8c4 	.word	0x0800b8c4

08008508 <__retarget_lock_init_recursive>:
 8008508:	4770      	bx	lr

0800850a <__retarget_lock_acquire_recursive>:
 800850a:	4770      	bx	lr

0800850c <__retarget_lock_release_recursive>:
 800850c:	4770      	bx	lr

0800850e <quorem>:
 800850e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008512:	6903      	ldr	r3, [r0, #16]
 8008514:	690c      	ldr	r4, [r1, #16]
 8008516:	42a3      	cmp	r3, r4
 8008518:	4607      	mov	r7, r0
 800851a:	db7e      	blt.n	800861a <quorem+0x10c>
 800851c:	3c01      	subs	r4, #1
 800851e:	f101 0814 	add.w	r8, r1, #20
 8008522:	00a3      	lsls	r3, r4, #2
 8008524:	f100 0514 	add.w	r5, r0, #20
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800852e:	9301      	str	r3, [sp, #4]
 8008530:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008534:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008538:	3301      	adds	r3, #1
 800853a:	429a      	cmp	r2, r3
 800853c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008540:	fbb2 f6f3 	udiv	r6, r2, r3
 8008544:	d32e      	bcc.n	80085a4 <quorem+0x96>
 8008546:	f04f 0a00 	mov.w	sl, #0
 800854a:	46c4      	mov	ip, r8
 800854c:	46ae      	mov	lr, r5
 800854e:	46d3      	mov	fp, sl
 8008550:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008554:	b298      	uxth	r0, r3
 8008556:	fb06 a000 	mla	r0, r6, r0, sl
 800855a:	0c02      	lsrs	r2, r0, #16
 800855c:	0c1b      	lsrs	r3, r3, #16
 800855e:	fb06 2303 	mla	r3, r6, r3, r2
 8008562:	f8de 2000 	ldr.w	r2, [lr]
 8008566:	b280      	uxth	r0, r0
 8008568:	b292      	uxth	r2, r2
 800856a:	1a12      	subs	r2, r2, r0
 800856c:	445a      	add	r2, fp
 800856e:	f8de 0000 	ldr.w	r0, [lr]
 8008572:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008576:	b29b      	uxth	r3, r3
 8008578:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800857c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008580:	b292      	uxth	r2, r2
 8008582:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008586:	45e1      	cmp	r9, ip
 8008588:	f84e 2b04 	str.w	r2, [lr], #4
 800858c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008590:	d2de      	bcs.n	8008550 <quorem+0x42>
 8008592:	9b00      	ldr	r3, [sp, #0]
 8008594:	58eb      	ldr	r3, [r5, r3]
 8008596:	b92b      	cbnz	r3, 80085a4 <quorem+0x96>
 8008598:	9b01      	ldr	r3, [sp, #4]
 800859a:	3b04      	subs	r3, #4
 800859c:	429d      	cmp	r5, r3
 800859e:	461a      	mov	r2, r3
 80085a0:	d32f      	bcc.n	8008602 <quorem+0xf4>
 80085a2:	613c      	str	r4, [r7, #16]
 80085a4:	4638      	mov	r0, r7
 80085a6:	f001 f979 	bl	800989c <__mcmp>
 80085aa:	2800      	cmp	r0, #0
 80085ac:	db25      	blt.n	80085fa <quorem+0xec>
 80085ae:	4629      	mov	r1, r5
 80085b0:	2000      	movs	r0, #0
 80085b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80085b6:	f8d1 c000 	ldr.w	ip, [r1]
 80085ba:	fa1f fe82 	uxth.w	lr, r2
 80085be:	fa1f f38c 	uxth.w	r3, ip
 80085c2:	eba3 030e 	sub.w	r3, r3, lr
 80085c6:	4403      	add	r3, r0
 80085c8:	0c12      	lsrs	r2, r2, #16
 80085ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80085ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085d8:	45c1      	cmp	r9, r8
 80085da:	f841 3b04 	str.w	r3, [r1], #4
 80085de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80085e2:	d2e6      	bcs.n	80085b2 <quorem+0xa4>
 80085e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085ec:	b922      	cbnz	r2, 80085f8 <quorem+0xea>
 80085ee:	3b04      	subs	r3, #4
 80085f0:	429d      	cmp	r5, r3
 80085f2:	461a      	mov	r2, r3
 80085f4:	d30b      	bcc.n	800860e <quorem+0x100>
 80085f6:	613c      	str	r4, [r7, #16]
 80085f8:	3601      	adds	r6, #1
 80085fa:	4630      	mov	r0, r6
 80085fc:	b003      	add	sp, #12
 80085fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008602:	6812      	ldr	r2, [r2, #0]
 8008604:	3b04      	subs	r3, #4
 8008606:	2a00      	cmp	r2, #0
 8008608:	d1cb      	bne.n	80085a2 <quorem+0x94>
 800860a:	3c01      	subs	r4, #1
 800860c:	e7c6      	b.n	800859c <quorem+0x8e>
 800860e:	6812      	ldr	r2, [r2, #0]
 8008610:	3b04      	subs	r3, #4
 8008612:	2a00      	cmp	r2, #0
 8008614:	d1ef      	bne.n	80085f6 <quorem+0xe8>
 8008616:	3c01      	subs	r4, #1
 8008618:	e7ea      	b.n	80085f0 <quorem+0xe2>
 800861a:	2000      	movs	r0, #0
 800861c:	e7ee      	b.n	80085fc <quorem+0xee>
	...

08008620 <_dtoa_r>:
 8008620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008624:	69c7      	ldr	r7, [r0, #28]
 8008626:	b099      	sub	sp, #100	@ 0x64
 8008628:	ed8d 0b02 	vstr	d0, [sp, #8]
 800862c:	ec55 4b10 	vmov	r4, r5, d0
 8008630:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008632:	9109      	str	r1, [sp, #36]	@ 0x24
 8008634:	4683      	mov	fp, r0
 8008636:	920e      	str	r2, [sp, #56]	@ 0x38
 8008638:	9313      	str	r3, [sp, #76]	@ 0x4c
 800863a:	b97f      	cbnz	r7, 800865c <_dtoa_r+0x3c>
 800863c:	2010      	movs	r0, #16
 800863e:	f000 fdfd 	bl	800923c <malloc>
 8008642:	4602      	mov	r2, r0
 8008644:	f8cb 001c 	str.w	r0, [fp, #28]
 8008648:	b920      	cbnz	r0, 8008654 <_dtoa_r+0x34>
 800864a:	4ba7      	ldr	r3, [pc, #668]	@ (80088e8 <_dtoa_r+0x2c8>)
 800864c:	21ef      	movs	r1, #239	@ 0xef
 800864e:	48a7      	ldr	r0, [pc, #668]	@ (80088ec <_dtoa_r+0x2cc>)
 8008650:	f001 fe2e 	bl	800a2b0 <__assert_func>
 8008654:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008658:	6007      	str	r7, [r0, #0]
 800865a:	60c7      	str	r7, [r0, #12]
 800865c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008660:	6819      	ldr	r1, [r3, #0]
 8008662:	b159      	cbz	r1, 800867c <_dtoa_r+0x5c>
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	604a      	str	r2, [r1, #4]
 8008668:	2301      	movs	r3, #1
 800866a:	4093      	lsls	r3, r2
 800866c:	608b      	str	r3, [r1, #8]
 800866e:	4658      	mov	r0, fp
 8008670:	f000 feda 	bl	8009428 <_Bfree>
 8008674:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	1e2b      	subs	r3, r5, #0
 800867e:	bfb9      	ittee	lt
 8008680:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008684:	9303      	strlt	r3, [sp, #12]
 8008686:	2300      	movge	r3, #0
 8008688:	6033      	strge	r3, [r6, #0]
 800868a:	9f03      	ldr	r7, [sp, #12]
 800868c:	4b98      	ldr	r3, [pc, #608]	@ (80088f0 <_dtoa_r+0x2d0>)
 800868e:	bfbc      	itt	lt
 8008690:	2201      	movlt	r2, #1
 8008692:	6032      	strlt	r2, [r6, #0]
 8008694:	43bb      	bics	r3, r7
 8008696:	d112      	bne.n	80086be <_dtoa_r+0x9e>
 8008698:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800869a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80086a4:	4323      	orrs	r3, r4
 80086a6:	f000 854d 	beq.w	8009144 <_dtoa_r+0xb24>
 80086aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008904 <_dtoa_r+0x2e4>
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 854f 	beq.w	8009154 <_dtoa_r+0xb34>
 80086b6:	f10a 0303 	add.w	r3, sl, #3
 80086ba:	f000 bd49 	b.w	8009150 <_dtoa_r+0xb30>
 80086be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086c2:	2200      	movs	r2, #0
 80086c4:	ec51 0b17 	vmov	r0, r1, d7
 80086c8:	2300      	movs	r3, #0
 80086ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80086ce:	f7f8 f9fb 	bl	8000ac8 <__aeabi_dcmpeq>
 80086d2:	4680      	mov	r8, r0
 80086d4:	b158      	cbz	r0, 80086ee <_dtoa_r+0xce>
 80086d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80086d8:	2301      	movs	r3, #1
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086de:	b113      	cbz	r3, 80086e6 <_dtoa_r+0xc6>
 80086e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80086e2:	4b84      	ldr	r3, [pc, #528]	@ (80088f4 <_dtoa_r+0x2d4>)
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008908 <_dtoa_r+0x2e8>
 80086ea:	f000 bd33 	b.w	8009154 <_dtoa_r+0xb34>
 80086ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80086f2:	aa16      	add	r2, sp, #88	@ 0x58
 80086f4:	a917      	add	r1, sp, #92	@ 0x5c
 80086f6:	4658      	mov	r0, fp
 80086f8:	f001 f980 	bl	80099fc <__d2b>
 80086fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008700:	4681      	mov	r9, r0
 8008702:	2e00      	cmp	r6, #0
 8008704:	d077      	beq.n	80087f6 <_dtoa_r+0x1d6>
 8008706:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008708:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800870c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008710:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008714:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008718:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800871c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008720:	4619      	mov	r1, r3
 8008722:	2200      	movs	r2, #0
 8008724:	4b74      	ldr	r3, [pc, #464]	@ (80088f8 <_dtoa_r+0x2d8>)
 8008726:	f7f7 fdaf 	bl	8000288 <__aeabi_dsub>
 800872a:	a369      	add	r3, pc, #420	@ (adr r3, 80088d0 <_dtoa_r+0x2b0>)
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	f7f7 ff62 	bl	80005f8 <__aeabi_dmul>
 8008734:	a368      	add	r3, pc, #416	@ (adr r3, 80088d8 <_dtoa_r+0x2b8>)
 8008736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800873a:	f7f7 fda7 	bl	800028c <__adddf3>
 800873e:	4604      	mov	r4, r0
 8008740:	4630      	mov	r0, r6
 8008742:	460d      	mov	r5, r1
 8008744:	f7f7 feee 	bl	8000524 <__aeabi_i2d>
 8008748:	a365      	add	r3, pc, #404	@ (adr r3, 80088e0 <_dtoa_r+0x2c0>)
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	f7f7 ff53 	bl	80005f8 <__aeabi_dmul>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	4620      	mov	r0, r4
 8008758:	4629      	mov	r1, r5
 800875a:	f7f7 fd97 	bl	800028c <__adddf3>
 800875e:	4604      	mov	r4, r0
 8008760:	460d      	mov	r5, r1
 8008762:	f7f8 f9f9 	bl	8000b58 <__aeabi_d2iz>
 8008766:	2200      	movs	r2, #0
 8008768:	4607      	mov	r7, r0
 800876a:	2300      	movs	r3, #0
 800876c:	4620      	mov	r0, r4
 800876e:	4629      	mov	r1, r5
 8008770:	f7f8 f9b4 	bl	8000adc <__aeabi_dcmplt>
 8008774:	b140      	cbz	r0, 8008788 <_dtoa_r+0x168>
 8008776:	4638      	mov	r0, r7
 8008778:	f7f7 fed4 	bl	8000524 <__aeabi_i2d>
 800877c:	4622      	mov	r2, r4
 800877e:	462b      	mov	r3, r5
 8008780:	f7f8 f9a2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008784:	b900      	cbnz	r0, 8008788 <_dtoa_r+0x168>
 8008786:	3f01      	subs	r7, #1
 8008788:	2f16      	cmp	r7, #22
 800878a:	d851      	bhi.n	8008830 <_dtoa_r+0x210>
 800878c:	4b5b      	ldr	r3, [pc, #364]	@ (80088fc <_dtoa_r+0x2dc>)
 800878e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008796:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800879a:	f7f8 f99f 	bl	8000adc <__aeabi_dcmplt>
 800879e:	2800      	cmp	r0, #0
 80087a0:	d048      	beq.n	8008834 <_dtoa_r+0x214>
 80087a2:	3f01      	subs	r7, #1
 80087a4:	2300      	movs	r3, #0
 80087a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80087a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80087aa:	1b9b      	subs	r3, r3, r6
 80087ac:	1e5a      	subs	r2, r3, #1
 80087ae:	bf44      	itt	mi
 80087b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80087b4:	2300      	movmi	r3, #0
 80087b6:	9208      	str	r2, [sp, #32]
 80087b8:	bf54      	ite	pl
 80087ba:	f04f 0800 	movpl.w	r8, #0
 80087be:	9308      	strmi	r3, [sp, #32]
 80087c0:	2f00      	cmp	r7, #0
 80087c2:	db39      	blt.n	8008838 <_dtoa_r+0x218>
 80087c4:	9b08      	ldr	r3, [sp, #32]
 80087c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80087c8:	443b      	add	r3, r7
 80087ca:	9308      	str	r3, [sp, #32]
 80087cc:	2300      	movs	r3, #0
 80087ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80087d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d2:	2b09      	cmp	r3, #9
 80087d4:	d864      	bhi.n	80088a0 <_dtoa_r+0x280>
 80087d6:	2b05      	cmp	r3, #5
 80087d8:	bfc4      	itt	gt
 80087da:	3b04      	subgt	r3, #4
 80087dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80087de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087e0:	f1a3 0302 	sub.w	r3, r3, #2
 80087e4:	bfcc      	ite	gt
 80087e6:	2400      	movgt	r4, #0
 80087e8:	2401      	movle	r4, #1
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d863      	bhi.n	80088b6 <_dtoa_r+0x296>
 80087ee:	e8df f003 	tbb	[pc, r3]
 80087f2:	372a      	.short	0x372a
 80087f4:	5535      	.short	0x5535
 80087f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80087fa:	441e      	add	r6, r3
 80087fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008800:	2b20      	cmp	r3, #32
 8008802:	bfc1      	itttt	gt
 8008804:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008808:	409f      	lslgt	r7, r3
 800880a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800880e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008812:	bfd6      	itet	le
 8008814:	f1c3 0320 	rsble	r3, r3, #32
 8008818:	ea47 0003 	orrgt.w	r0, r7, r3
 800881c:	fa04 f003 	lslle.w	r0, r4, r3
 8008820:	f7f7 fe70 	bl	8000504 <__aeabi_ui2d>
 8008824:	2201      	movs	r2, #1
 8008826:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800882a:	3e01      	subs	r6, #1
 800882c:	9214      	str	r2, [sp, #80]	@ 0x50
 800882e:	e777      	b.n	8008720 <_dtoa_r+0x100>
 8008830:	2301      	movs	r3, #1
 8008832:	e7b8      	b.n	80087a6 <_dtoa_r+0x186>
 8008834:	9012      	str	r0, [sp, #72]	@ 0x48
 8008836:	e7b7      	b.n	80087a8 <_dtoa_r+0x188>
 8008838:	427b      	negs	r3, r7
 800883a:	930a      	str	r3, [sp, #40]	@ 0x28
 800883c:	2300      	movs	r3, #0
 800883e:	eba8 0807 	sub.w	r8, r8, r7
 8008842:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008844:	e7c4      	b.n	80087d0 <_dtoa_r+0x1b0>
 8008846:	2300      	movs	r3, #0
 8008848:	930b      	str	r3, [sp, #44]	@ 0x2c
 800884a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800884c:	2b00      	cmp	r3, #0
 800884e:	dc35      	bgt.n	80088bc <_dtoa_r+0x29c>
 8008850:	2301      	movs	r3, #1
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	9307      	str	r3, [sp, #28]
 8008856:	461a      	mov	r2, r3
 8008858:	920e      	str	r2, [sp, #56]	@ 0x38
 800885a:	e00b      	b.n	8008874 <_dtoa_r+0x254>
 800885c:	2301      	movs	r3, #1
 800885e:	e7f3      	b.n	8008848 <_dtoa_r+0x228>
 8008860:	2300      	movs	r3, #0
 8008862:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008864:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008866:	18fb      	adds	r3, r7, r3
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	3301      	adds	r3, #1
 800886c:	2b01      	cmp	r3, #1
 800886e:	9307      	str	r3, [sp, #28]
 8008870:	bfb8      	it	lt
 8008872:	2301      	movlt	r3, #1
 8008874:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008878:	2100      	movs	r1, #0
 800887a:	2204      	movs	r2, #4
 800887c:	f102 0514 	add.w	r5, r2, #20
 8008880:	429d      	cmp	r5, r3
 8008882:	d91f      	bls.n	80088c4 <_dtoa_r+0x2a4>
 8008884:	6041      	str	r1, [r0, #4]
 8008886:	4658      	mov	r0, fp
 8008888:	f000 fd8e 	bl	80093a8 <_Balloc>
 800888c:	4682      	mov	sl, r0
 800888e:	2800      	cmp	r0, #0
 8008890:	d13c      	bne.n	800890c <_dtoa_r+0x2ec>
 8008892:	4b1b      	ldr	r3, [pc, #108]	@ (8008900 <_dtoa_r+0x2e0>)
 8008894:	4602      	mov	r2, r0
 8008896:	f240 11af 	movw	r1, #431	@ 0x1af
 800889a:	e6d8      	b.n	800864e <_dtoa_r+0x2e>
 800889c:	2301      	movs	r3, #1
 800889e:	e7e0      	b.n	8008862 <_dtoa_r+0x242>
 80088a0:	2401      	movs	r4, #1
 80088a2:	2300      	movs	r3, #0
 80088a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80088a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80088a8:	f04f 33ff 	mov.w	r3, #4294967295
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	9307      	str	r3, [sp, #28]
 80088b0:	2200      	movs	r2, #0
 80088b2:	2312      	movs	r3, #18
 80088b4:	e7d0      	b.n	8008858 <_dtoa_r+0x238>
 80088b6:	2301      	movs	r3, #1
 80088b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088ba:	e7f5      	b.n	80088a8 <_dtoa_r+0x288>
 80088bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	9307      	str	r3, [sp, #28]
 80088c2:	e7d7      	b.n	8008874 <_dtoa_r+0x254>
 80088c4:	3101      	adds	r1, #1
 80088c6:	0052      	lsls	r2, r2, #1
 80088c8:	e7d8      	b.n	800887c <_dtoa_r+0x25c>
 80088ca:	bf00      	nop
 80088cc:	f3af 8000 	nop.w
 80088d0:	636f4361 	.word	0x636f4361
 80088d4:	3fd287a7 	.word	0x3fd287a7
 80088d8:	8b60c8b3 	.word	0x8b60c8b3
 80088dc:	3fc68a28 	.word	0x3fc68a28
 80088e0:	509f79fb 	.word	0x509f79fb
 80088e4:	3fd34413 	.word	0x3fd34413
 80088e8:	0800b2ba 	.word	0x0800b2ba
 80088ec:	0800b2d1 	.word	0x0800b2d1
 80088f0:	7ff00000 	.word	0x7ff00000
 80088f4:	0800b28a 	.word	0x0800b28a
 80088f8:	3ff80000 	.word	0x3ff80000
 80088fc:	0800b3c8 	.word	0x0800b3c8
 8008900:	0800b329 	.word	0x0800b329
 8008904:	0800b2b6 	.word	0x0800b2b6
 8008908:	0800b289 	.word	0x0800b289
 800890c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008910:	6018      	str	r0, [r3, #0]
 8008912:	9b07      	ldr	r3, [sp, #28]
 8008914:	2b0e      	cmp	r3, #14
 8008916:	f200 80a4 	bhi.w	8008a62 <_dtoa_r+0x442>
 800891a:	2c00      	cmp	r4, #0
 800891c:	f000 80a1 	beq.w	8008a62 <_dtoa_r+0x442>
 8008920:	2f00      	cmp	r7, #0
 8008922:	dd33      	ble.n	800898c <_dtoa_r+0x36c>
 8008924:	4bad      	ldr	r3, [pc, #692]	@ (8008bdc <_dtoa_r+0x5bc>)
 8008926:	f007 020f 	and.w	r2, r7, #15
 800892a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800892e:	ed93 7b00 	vldr	d7, [r3]
 8008932:	05f8      	lsls	r0, r7, #23
 8008934:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008938:	ea4f 1427 	mov.w	r4, r7, asr #4
 800893c:	d516      	bpl.n	800896c <_dtoa_r+0x34c>
 800893e:	4ba8      	ldr	r3, [pc, #672]	@ (8008be0 <_dtoa_r+0x5c0>)
 8008940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008944:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008948:	f7f7 ff80 	bl	800084c <__aeabi_ddiv>
 800894c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008950:	f004 040f 	and.w	r4, r4, #15
 8008954:	2603      	movs	r6, #3
 8008956:	4da2      	ldr	r5, [pc, #648]	@ (8008be0 <_dtoa_r+0x5c0>)
 8008958:	b954      	cbnz	r4, 8008970 <_dtoa_r+0x350>
 800895a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800895e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008962:	f7f7 ff73 	bl	800084c <__aeabi_ddiv>
 8008966:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800896a:	e028      	b.n	80089be <_dtoa_r+0x39e>
 800896c:	2602      	movs	r6, #2
 800896e:	e7f2      	b.n	8008956 <_dtoa_r+0x336>
 8008970:	07e1      	lsls	r1, r4, #31
 8008972:	d508      	bpl.n	8008986 <_dtoa_r+0x366>
 8008974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008978:	e9d5 2300 	ldrd	r2, r3, [r5]
 800897c:	f7f7 fe3c 	bl	80005f8 <__aeabi_dmul>
 8008980:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008984:	3601      	adds	r6, #1
 8008986:	1064      	asrs	r4, r4, #1
 8008988:	3508      	adds	r5, #8
 800898a:	e7e5      	b.n	8008958 <_dtoa_r+0x338>
 800898c:	f000 80d2 	beq.w	8008b34 <_dtoa_r+0x514>
 8008990:	427c      	negs	r4, r7
 8008992:	4b92      	ldr	r3, [pc, #584]	@ (8008bdc <_dtoa_r+0x5bc>)
 8008994:	4d92      	ldr	r5, [pc, #584]	@ (8008be0 <_dtoa_r+0x5c0>)
 8008996:	f004 020f 	and.w	r2, r4, #15
 800899a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800899e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089a6:	f7f7 fe27 	bl	80005f8 <__aeabi_dmul>
 80089aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089ae:	1124      	asrs	r4, r4, #4
 80089b0:	2300      	movs	r3, #0
 80089b2:	2602      	movs	r6, #2
 80089b4:	2c00      	cmp	r4, #0
 80089b6:	f040 80b2 	bne.w	8008b1e <_dtoa_r+0x4fe>
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1d3      	bne.n	8008966 <_dtoa_r+0x346>
 80089be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80089c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 80b7 	beq.w	8008b38 <_dtoa_r+0x518>
 80089ca:	4b86      	ldr	r3, [pc, #536]	@ (8008be4 <_dtoa_r+0x5c4>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	4620      	mov	r0, r4
 80089d0:	4629      	mov	r1, r5
 80089d2:	f7f8 f883 	bl	8000adc <__aeabi_dcmplt>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	f000 80ae 	beq.w	8008b38 <_dtoa_r+0x518>
 80089dc:	9b07      	ldr	r3, [sp, #28]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f000 80aa 	beq.w	8008b38 <_dtoa_r+0x518>
 80089e4:	9b00      	ldr	r3, [sp, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	dd37      	ble.n	8008a5a <_dtoa_r+0x43a>
 80089ea:	1e7b      	subs	r3, r7, #1
 80089ec:	9304      	str	r3, [sp, #16]
 80089ee:	4620      	mov	r0, r4
 80089f0:	4b7d      	ldr	r3, [pc, #500]	@ (8008be8 <_dtoa_r+0x5c8>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	4629      	mov	r1, r5
 80089f6:	f7f7 fdff 	bl	80005f8 <__aeabi_dmul>
 80089fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089fe:	9c00      	ldr	r4, [sp, #0]
 8008a00:	3601      	adds	r6, #1
 8008a02:	4630      	mov	r0, r6
 8008a04:	f7f7 fd8e 	bl	8000524 <__aeabi_i2d>
 8008a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a0c:	f7f7 fdf4 	bl	80005f8 <__aeabi_dmul>
 8008a10:	4b76      	ldr	r3, [pc, #472]	@ (8008bec <_dtoa_r+0x5cc>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	f7f7 fc3a 	bl	800028c <__adddf3>
 8008a18:	4605      	mov	r5, r0
 8008a1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008a1e:	2c00      	cmp	r4, #0
 8008a20:	f040 808d 	bne.w	8008b3e <_dtoa_r+0x51e>
 8008a24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a28:	4b71      	ldr	r3, [pc, #452]	@ (8008bf0 <_dtoa_r+0x5d0>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f7f7 fc2c 	bl	8000288 <__aeabi_dsub>
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a38:	462a      	mov	r2, r5
 8008a3a:	4633      	mov	r3, r6
 8008a3c:	f7f8 f86c 	bl	8000b18 <__aeabi_dcmpgt>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	f040 828b 	bne.w	8008f5c <_dtoa_r+0x93c>
 8008a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a4a:	462a      	mov	r2, r5
 8008a4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008a50:	f7f8 f844 	bl	8000adc <__aeabi_dcmplt>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	f040 8128 	bne.w	8008caa <_dtoa_r+0x68a>
 8008a5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008a5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008a62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	f2c0 815a 	blt.w	8008d1e <_dtoa_r+0x6fe>
 8008a6a:	2f0e      	cmp	r7, #14
 8008a6c:	f300 8157 	bgt.w	8008d1e <_dtoa_r+0x6fe>
 8008a70:	4b5a      	ldr	r3, [pc, #360]	@ (8008bdc <_dtoa_r+0x5bc>)
 8008a72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a76:	ed93 7b00 	vldr	d7, [r3]
 8008a7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	ed8d 7b00 	vstr	d7, [sp]
 8008a82:	da03      	bge.n	8008a8c <_dtoa_r+0x46c>
 8008a84:	9b07      	ldr	r3, [sp, #28]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f340 8101 	ble.w	8008c8e <_dtoa_r+0x66e>
 8008a8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a90:	4656      	mov	r6, sl
 8008a92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a96:	4620      	mov	r0, r4
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f7f7 fed7 	bl	800084c <__aeabi_ddiv>
 8008a9e:	f7f8 f85b 	bl	8000b58 <__aeabi_d2iz>
 8008aa2:	4680      	mov	r8, r0
 8008aa4:	f7f7 fd3e 	bl	8000524 <__aeabi_i2d>
 8008aa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aac:	f7f7 fda4 	bl	80005f8 <__aeabi_dmul>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008abc:	f7f7 fbe4 	bl	8000288 <__aeabi_dsub>
 8008ac0:	f806 4b01 	strb.w	r4, [r6], #1
 8008ac4:	9d07      	ldr	r5, [sp, #28]
 8008ac6:	eba6 040a 	sub.w	r4, r6, sl
 8008aca:	42a5      	cmp	r5, r4
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	f040 8117 	bne.w	8008d02 <_dtoa_r+0x6e2>
 8008ad4:	f7f7 fbda 	bl	800028c <__adddf3>
 8008ad8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008adc:	4604      	mov	r4, r0
 8008ade:	460d      	mov	r5, r1
 8008ae0:	f7f8 f81a 	bl	8000b18 <__aeabi_dcmpgt>
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	f040 80f9 	bne.w	8008cdc <_dtoa_r+0x6bc>
 8008aea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aee:	4620      	mov	r0, r4
 8008af0:	4629      	mov	r1, r5
 8008af2:	f7f7 ffe9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008af6:	b118      	cbz	r0, 8008b00 <_dtoa_r+0x4e0>
 8008af8:	f018 0f01 	tst.w	r8, #1
 8008afc:	f040 80ee 	bne.w	8008cdc <_dtoa_r+0x6bc>
 8008b00:	4649      	mov	r1, r9
 8008b02:	4658      	mov	r0, fp
 8008b04:	f000 fc90 	bl	8009428 <_Bfree>
 8008b08:	2300      	movs	r3, #0
 8008b0a:	7033      	strb	r3, [r6, #0]
 8008b0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b0e:	3701      	adds	r7, #1
 8008b10:	601f      	str	r7, [r3, #0]
 8008b12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 831d 	beq.w	8009154 <_dtoa_r+0xb34>
 8008b1a:	601e      	str	r6, [r3, #0]
 8008b1c:	e31a      	b.n	8009154 <_dtoa_r+0xb34>
 8008b1e:	07e2      	lsls	r2, r4, #31
 8008b20:	d505      	bpl.n	8008b2e <_dtoa_r+0x50e>
 8008b22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b26:	f7f7 fd67 	bl	80005f8 <__aeabi_dmul>
 8008b2a:	3601      	adds	r6, #1
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	1064      	asrs	r4, r4, #1
 8008b30:	3508      	adds	r5, #8
 8008b32:	e73f      	b.n	80089b4 <_dtoa_r+0x394>
 8008b34:	2602      	movs	r6, #2
 8008b36:	e742      	b.n	80089be <_dtoa_r+0x39e>
 8008b38:	9c07      	ldr	r4, [sp, #28]
 8008b3a:	9704      	str	r7, [sp, #16]
 8008b3c:	e761      	b.n	8008a02 <_dtoa_r+0x3e2>
 8008b3e:	4b27      	ldr	r3, [pc, #156]	@ (8008bdc <_dtoa_r+0x5bc>)
 8008b40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b4a:	4454      	add	r4, sl
 8008b4c:	2900      	cmp	r1, #0
 8008b4e:	d053      	beq.n	8008bf8 <_dtoa_r+0x5d8>
 8008b50:	4928      	ldr	r1, [pc, #160]	@ (8008bf4 <_dtoa_r+0x5d4>)
 8008b52:	2000      	movs	r0, #0
 8008b54:	f7f7 fe7a 	bl	800084c <__aeabi_ddiv>
 8008b58:	4633      	mov	r3, r6
 8008b5a:	462a      	mov	r2, r5
 8008b5c:	f7f7 fb94 	bl	8000288 <__aeabi_dsub>
 8008b60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b64:	4656      	mov	r6, sl
 8008b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b6a:	f7f7 fff5 	bl	8000b58 <__aeabi_d2iz>
 8008b6e:	4605      	mov	r5, r0
 8008b70:	f7f7 fcd8 	bl	8000524 <__aeabi_i2d>
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b7c:	f7f7 fb84 	bl	8000288 <__aeabi_dsub>
 8008b80:	3530      	adds	r5, #48	@ 0x30
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b8a:	f806 5b01 	strb.w	r5, [r6], #1
 8008b8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b92:	f7f7 ffa3 	bl	8000adc <__aeabi_dcmplt>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d171      	bne.n	8008c7e <_dtoa_r+0x65e>
 8008b9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b9e:	4911      	ldr	r1, [pc, #68]	@ (8008be4 <_dtoa_r+0x5c4>)
 8008ba0:	2000      	movs	r0, #0
 8008ba2:	f7f7 fb71 	bl	8000288 <__aeabi_dsub>
 8008ba6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008baa:	f7f7 ff97 	bl	8000adc <__aeabi_dcmplt>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	f040 8095 	bne.w	8008cde <_dtoa_r+0x6be>
 8008bb4:	42a6      	cmp	r6, r4
 8008bb6:	f43f af50 	beq.w	8008a5a <_dtoa_r+0x43a>
 8008bba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8008be8 <_dtoa_r+0x5c8>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f7f7 fd19 	bl	80005f8 <__aeabi_dmul>
 8008bc6:	4b08      	ldr	r3, [pc, #32]	@ (8008be8 <_dtoa_r+0x5c8>)
 8008bc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008bcc:	2200      	movs	r2, #0
 8008bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bd2:	f7f7 fd11 	bl	80005f8 <__aeabi_dmul>
 8008bd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bda:	e7c4      	b.n	8008b66 <_dtoa_r+0x546>
 8008bdc:	0800b3c8 	.word	0x0800b3c8
 8008be0:	0800b3a0 	.word	0x0800b3a0
 8008be4:	3ff00000 	.word	0x3ff00000
 8008be8:	40240000 	.word	0x40240000
 8008bec:	401c0000 	.word	0x401c0000
 8008bf0:	40140000 	.word	0x40140000
 8008bf4:	3fe00000 	.word	0x3fe00000
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f7f7 fcfc 	bl	80005f8 <__aeabi_dmul>
 8008c00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c04:	9415      	str	r4, [sp, #84]	@ 0x54
 8008c06:	4656      	mov	r6, sl
 8008c08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c0c:	f7f7 ffa4 	bl	8000b58 <__aeabi_d2iz>
 8008c10:	4605      	mov	r5, r0
 8008c12:	f7f7 fc87 	bl	8000524 <__aeabi_i2d>
 8008c16:	4602      	mov	r2, r0
 8008c18:	460b      	mov	r3, r1
 8008c1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c1e:	f7f7 fb33 	bl	8000288 <__aeabi_dsub>
 8008c22:	3530      	adds	r5, #48	@ 0x30
 8008c24:	f806 5b01 	strb.w	r5, [r6], #1
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	42a6      	cmp	r6, r4
 8008c2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c32:	f04f 0200 	mov.w	r2, #0
 8008c36:	d124      	bne.n	8008c82 <_dtoa_r+0x662>
 8008c38:	4bac      	ldr	r3, [pc, #688]	@ (8008eec <_dtoa_r+0x8cc>)
 8008c3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c3e:	f7f7 fb25 	bl	800028c <__adddf3>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c4a:	f7f7 ff65 	bl	8000b18 <__aeabi_dcmpgt>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d145      	bne.n	8008cde <_dtoa_r+0x6be>
 8008c52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c56:	49a5      	ldr	r1, [pc, #660]	@ (8008eec <_dtoa_r+0x8cc>)
 8008c58:	2000      	movs	r0, #0
 8008c5a:	f7f7 fb15 	bl	8000288 <__aeabi_dsub>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c66:	f7f7 ff39 	bl	8000adc <__aeabi_dcmplt>
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	f43f aef5 	beq.w	8008a5a <_dtoa_r+0x43a>
 8008c70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008c72:	1e73      	subs	r3, r6, #1
 8008c74:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c7a:	2b30      	cmp	r3, #48	@ 0x30
 8008c7c:	d0f8      	beq.n	8008c70 <_dtoa_r+0x650>
 8008c7e:	9f04      	ldr	r7, [sp, #16]
 8008c80:	e73e      	b.n	8008b00 <_dtoa_r+0x4e0>
 8008c82:	4b9b      	ldr	r3, [pc, #620]	@ (8008ef0 <_dtoa_r+0x8d0>)
 8008c84:	f7f7 fcb8 	bl	80005f8 <__aeabi_dmul>
 8008c88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c8c:	e7bc      	b.n	8008c08 <_dtoa_r+0x5e8>
 8008c8e:	d10c      	bne.n	8008caa <_dtoa_r+0x68a>
 8008c90:	4b98      	ldr	r3, [pc, #608]	@ (8008ef4 <_dtoa_r+0x8d4>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c98:	f7f7 fcae 	bl	80005f8 <__aeabi_dmul>
 8008c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ca0:	f7f7 ff30 	bl	8000b04 <__aeabi_dcmpge>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	f000 8157 	beq.w	8008f58 <_dtoa_r+0x938>
 8008caa:	2400      	movs	r4, #0
 8008cac:	4625      	mov	r5, r4
 8008cae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008cb0:	43db      	mvns	r3, r3
 8008cb2:	9304      	str	r3, [sp, #16]
 8008cb4:	4656      	mov	r6, sl
 8008cb6:	2700      	movs	r7, #0
 8008cb8:	4621      	mov	r1, r4
 8008cba:	4658      	mov	r0, fp
 8008cbc:	f000 fbb4 	bl	8009428 <_Bfree>
 8008cc0:	2d00      	cmp	r5, #0
 8008cc2:	d0dc      	beq.n	8008c7e <_dtoa_r+0x65e>
 8008cc4:	b12f      	cbz	r7, 8008cd2 <_dtoa_r+0x6b2>
 8008cc6:	42af      	cmp	r7, r5
 8008cc8:	d003      	beq.n	8008cd2 <_dtoa_r+0x6b2>
 8008cca:	4639      	mov	r1, r7
 8008ccc:	4658      	mov	r0, fp
 8008cce:	f000 fbab 	bl	8009428 <_Bfree>
 8008cd2:	4629      	mov	r1, r5
 8008cd4:	4658      	mov	r0, fp
 8008cd6:	f000 fba7 	bl	8009428 <_Bfree>
 8008cda:	e7d0      	b.n	8008c7e <_dtoa_r+0x65e>
 8008cdc:	9704      	str	r7, [sp, #16]
 8008cde:	4633      	mov	r3, r6
 8008ce0:	461e      	mov	r6, r3
 8008ce2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ce6:	2a39      	cmp	r2, #57	@ 0x39
 8008ce8:	d107      	bne.n	8008cfa <_dtoa_r+0x6da>
 8008cea:	459a      	cmp	sl, r3
 8008cec:	d1f8      	bne.n	8008ce0 <_dtoa_r+0x6c0>
 8008cee:	9a04      	ldr	r2, [sp, #16]
 8008cf0:	3201      	adds	r2, #1
 8008cf2:	9204      	str	r2, [sp, #16]
 8008cf4:	2230      	movs	r2, #48	@ 0x30
 8008cf6:	f88a 2000 	strb.w	r2, [sl]
 8008cfa:	781a      	ldrb	r2, [r3, #0]
 8008cfc:	3201      	adds	r2, #1
 8008cfe:	701a      	strb	r2, [r3, #0]
 8008d00:	e7bd      	b.n	8008c7e <_dtoa_r+0x65e>
 8008d02:	4b7b      	ldr	r3, [pc, #492]	@ (8008ef0 <_dtoa_r+0x8d0>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	f7f7 fc77 	bl	80005f8 <__aeabi_dmul>
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	4604      	mov	r4, r0
 8008d10:	460d      	mov	r5, r1
 8008d12:	f7f7 fed9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	f43f aebb 	beq.w	8008a92 <_dtoa_r+0x472>
 8008d1c:	e6f0      	b.n	8008b00 <_dtoa_r+0x4e0>
 8008d1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008d20:	2a00      	cmp	r2, #0
 8008d22:	f000 80db 	beq.w	8008edc <_dtoa_r+0x8bc>
 8008d26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d28:	2a01      	cmp	r2, #1
 8008d2a:	f300 80bf 	bgt.w	8008eac <_dtoa_r+0x88c>
 8008d2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008d30:	2a00      	cmp	r2, #0
 8008d32:	f000 80b7 	beq.w	8008ea4 <_dtoa_r+0x884>
 8008d36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008d3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008d3c:	4646      	mov	r6, r8
 8008d3e:	9a08      	ldr	r2, [sp, #32]
 8008d40:	2101      	movs	r1, #1
 8008d42:	441a      	add	r2, r3
 8008d44:	4658      	mov	r0, fp
 8008d46:	4498      	add	r8, r3
 8008d48:	9208      	str	r2, [sp, #32]
 8008d4a:	f000 fc21 	bl	8009590 <__i2b>
 8008d4e:	4605      	mov	r5, r0
 8008d50:	b15e      	cbz	r6, 8008d6a <_dtoa_r+0x74a>
 8008d52:	9b08      	ldr	r3, [sp, #32]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	dd08      	ble.n	8008d6a <_dtoa_r+0x74a>
 8008d58:	42b3      	cmp	r3, r6
 8008d5a:	9a08      	ldr	r2, [sp, #32]
 8008d5c:	bfa8      	it	ge
 8008d5e:	4633      	movge	r3, r6
 8008d60:	eba8 0803 	sub.w	r8, r8, r3
 8008d64:	1af6      	subs	r6, r6, r3
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	9308      	str	r3, [sp, #32]
 8008d6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d6c:	b1f3      	cbz	r3, 8008dac <_dtoa_r+0x78c>
 8008d6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f000 80b7 	beq.w	8008ee4 <_dtoa_r+0x8c4>
 8008d76:	b18c      	cbz	r4, 8008d9c <_dtoa_r+0x77c>
 8008d78:	4629      	mov	r1, r5
 8008d7a:	4622      	mov	r2, r4
 8008d7c:	4658      	mov	r0, fp
 8008d7e:	f000 fcc7 	bl	8009710 <__pow5mult>
 8008d82:	464a      	mov	r2, r9
 8008d84:	4601      	mov	r1, r0
 8008d86:	4605      	mov	r5, r0
 8008d88:	4658      	mov	r0, fp
 8008d8a:	f000 fc17 	bl	80095bc <__multiply>
 8008d8e:	4649      	mov	r1, r9
 8008d90:	9004      	str	r0, [sp, #16]
 8008d92:	4658      	mov	r0, fp
 8008d94:	f000 fb48 	bl	8009428 <_Bfree>
 8008d98:	9b04      	ldr	r3, [sp, #16]
 8008d9a:	4699      	mov	r9, r3
 8008d9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d9e:	1b1a      	subs	r2, r3, r4
 8008da0:	d004      	beq.n	8008dac <_dtoa_r+0x78c>
 8008da2:	4649      	mov	r1, r9
 8008da4:	4658      	mov	r0, fp
 8008da6:	f000 fcb3 	bl	8009710 <__pow5mult>
 8008daa:	4681      	mov	r9, r0
 8008dac:	2101      	movs	r1, #1
 8008dae:	4658      	mov	r0, fp
 8008db0:	f000 fbee 	bl	8009590 <__i2b>
 8008db4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008db6:	4604      	mov	r4, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f000 81cf 	beq.w	800915c <_dtoa_r+0xb3c>
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	4601      	mov	r1, r0
 8008dc2:	4658      	mov	r0, fp
 8008dc4:	f000 fca4 	bl	8009710 <__pow5mult>
 8008dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	4604      	mov	r4, r0
 8008dce:	f300 8095 	bgt.w	8008efc <_dtoa_r+0x8dc>
 8008dd2:	9b02      	ldr	r3, [sp, #8]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f040 8087 	bne.w	8008ee8 <_dtoa_r+0x8c8>
 8008dda:	9b03      	ldr	r3, [sp, #12]
 8008ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f040 8089 	bne.w	8008ef8 <_dtoa_r+0x8d8>
 8008de6:	9b03      	ldr	r3, [sp, #12]
 8008de8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008dec:	0d1b      	lsrs	r3, r3, #20
 8008dee:	051b      	lsls	r3, r3, #20
 8008df0:	b12b      	cbz	r3, 8008dfe <_dtoa_r+0x7de>
 8008df2:	9b08      	ldr	r3, [sp, #32]
 8008df4:	3301      	adds	r3, #1
 8008df6:	9308      	str	r3, [sp, #32]
 8008df8:	f108 0801 	add.w	r8, r8, #1
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f000 81b0 	beq.w	8009168 <_dtoa_r+0xb48>
 8008e08:	6923      	ldr	r3, [r4, #16]
 8008e0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e0e:	6918      	ldr	r0, [r3, #16]
 8008e10:	f000 fb72 	bl	80094f8 <__hi0bits>
 8008e14:	f1c0 0020 	rsb	r0, r0, #32
 8008e18:	9b08      	ldr	r3, [sp, #32]
 8008e1a:	4418      	add	r0, r3
 8008e1c:	f010 001f 	ands.w	r0, r0, #31
 8008e20:	d077      	beq.n	8008f12 <_dtoa_r+0x8f2>
 8008e22:	f1c0 0320 	rsb	r3, r0, #32
 8008e26:	2b04      	cmp	r3, #4
 8008e28:	dd6b      	ble.n	8008f02 <_dtoa_r+0x8e2>
 8008e2a:	9b08      	ldr	r3, [sp, #32]
 8008e2c:	f1c0 001c 	rsb	r0, r0, #28
 8008e30:	4403      	add	r3, r0
 8008e32:	4480      	add	r8, r0
 8008e34:	4406      	add	r6, r0
 8008e36:	9308      	str	r3, [sp, #32]
 8008e38:	f1b8 0f00 	cmp.w	r8, #0
 8008e3c:	dd05      	ble.n	8008e4a <_dtoa_r+0x82a>
 8008e3e:	4649      	mov	r1, r9
 8008e40:	4642      	mov	r2, r8
 8008e42:	4658      	mov	r0, fp
 8008e44:	f000 fcbe 	bl	80097c4 <__lshift>
 8008e48:	4681      	mov	r9, r0
 8008e4a:	9b08      	ldr	r3, [sp, #32]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	dd05      	ble.n	8008e5c <_dtoa_r+0x83c>
 8008e50:	4621      	mov	r1, r4
 8008e52:	461a      	mov	r2, r3
 8008e54:	4658      	mov	r0, fp
 8008e56:	f000 fcb5 	bl	80097c4 <__lshift>
 8008e5a:	4604      	mov	r4, r0
 8008e5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d059      	beq.n	8008f16 <_dtoa_r+0x8f6>
 8008e62:	4621      	mov	r1, r4
 8008e64:	4648      	mov	r0, r9
 8008e66:	f000 fd19 	bl	800989c <__mcmp>
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	da53      	bge.n	8008f16 <_dtoa_r+0x8f6>
 8008e6e:	1e7b      	subs	r3, r7, #1
 8008e70:	9304      	str	r3, [sp, #16]
 8008e72:	4649      	mov	r1, r9
 8008e74:	2300      	movs	r3, #0
 8008e76:	220a      	movs	r2, #10
 8008e78:	4658      	mov	r0, fp
 8008e7a:	f000 faf7 	bl	800946c <__multadd>
 8008e7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e80:	4681      	mov	r9, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f000 8172 	beq.w	800916c <_dtoa_r+0xb4c>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	220a      	movs	r2, #10
 8008e8e:	4658      	mov	r0, fp
 8008e90:	f000 faec 	bl	800946c <__multadd>
 8008e94:	9b00      	ldr	r3, [sp, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	4605      	mov	r5, r0
 8008e9a:	dc67      	bgt.n	8008f6c <_dtoa_r+0x94c>
 8008e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	dc41      	bgt.n	8008f26 <_dtoa_r+0x906>
 8008ea2:	e063      	b.n	8008f6c <_dtoa_r+0x94c>
 8008ea4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008ea6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008eaa:	e746      	b.n	8008d3a <_dtoa_r+0x71a>
 8008eac:	9b07      	ldr	r3, [sp, #28]
 8008eae:	1e5c      	subs	r4, r3, #1
 8008eb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eb2:	42a3      	cmp	r3, r4
 8008eb4:	bfbf      	itttt	lt
 8008eb6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008eb8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008eba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008ebc:	1ae3      	sublt	r3, r4, r3
 8008ebe:	bfb4      	ite	lt
 8008ec0:	18d2      	addlt	r2, r2, r3
 8008ec2:	1b1c      	subge	r4, r3, r4
 8008ec4:	9b07      	ldr	r3, [sp, #28]
 8008ec6:	bfbc      	itt	lt
 8008ec8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008eca:	2400      	movlt	r4, #0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	bfb5      	itete	lt
 8008ed0:	eba8 0603 	sublt.w	r6, r8, r3
 8008ed4:	9b07      	ldrge	r3, [sp, #28]
 8008ed6:	2300      	movlt	r3, #0
 8008ed8:	4646      	movge	r6, r8
 8008eda:	e730      	b.n	8008d3e <_dtoa_r+0x71e>
 8008edc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008ede:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008ee0:	4646      	mov	r6, r8
 8008ee2:	e735      	b.n	8008d50 <_dtoa_r+0x730>
 8008ee4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ee6:	e75c      	b.n	8008da2 <_dtoa_r+0x782>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	e788      	b.n	8008dfe <_dtoa_r+0x7de>
 8008eec:	3fe00000 	.word	0x3fe00000
 8008ef0:	40240000 	.word	0x40240000
 8008ef4:	40140000 	.word	0x40140000
 8008ef8:	9b02      	ldr	r3, [sp, #8]
 8008efa:	e780      	b.n	8008dfe <_dtoa_r+0x7de>
 8008efc:	2300      	movs	r3, #0
 8008efe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f00:	e782      	b.n	8008e08 <_dtoa_r+0x7e8>
 8008f02:	d099      	beq.n	8008e38 <_dtoa_r+0x818>
 8008f04:	9a08      	ldr	r2, [sp, #32]
 8008f06:	331c      	adds	r3, #28
 8008f08:	441a      	add	r2, r3
 8008f0a:	4498      	add	r8, r3
 8008f0c:	441e      	add	r6, r3
 8008f0e:	9208      	str	r2, [sp, #32]
 8008f10:	e792      	b.n	8008e38 <_dtoa_r+0x818>
 8008f12:	4603      	mov	r3, r0
 8008f14:	e7f6      	b.n	8008f04 <_dtoa_r+0x8e4>
 8008f16:	9b07      	ldr	r3, [sp, #28]
 8008f18:	9704      	str	r7, [sp, #16]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	dc20      	bgt.n	8008f60 <_dtoa_r+0x940>
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	dd1e      	ble.n	8008f64 <_dtoa_r+0x944>
 8008f26:	9b00      	ldr	r3, [sp, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f47f aec0 	bne.w	8008cae <_dtoa_r+0x68e>
 8008f2e:	4621      	mov	r1, r4
 8008f30:	2205      	movs	r2, #5
 8008f32:	4658      	mov	r0, fp
 8008f34:	f000 fa9a 	bl	800946c <__multadd>
 8008f38:	4601      	mov	r1, r0
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	4648      	mov	r0, r9
 8008f3e:	f000 fcad 	bl	800989c <__mcmp>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	f77f aeb3 	ble.w	8008cae <_dtoa_r+0x68e>
 8008f48:	4656      	mov	r6, sl
 8008f4a:	2331      	movs	r3, #49	@ 0x31
 8008f4c:	f806 3b01 	strb.w	r3, [r6], #1
 8008f50:	9b04      	ldr	r3, [sp, #16]
 8008f52:	3301      	adds	r3, #1
 8008f54:	9304      	str	r3, [sp, #16]
 8008f56:	e6ae      	b.n	8008cb6 <_dtoa_r+0x696>
 8008f58:	9c07      	ldr	r4, [sp, #28]
 8008f5a:	9704      	str	r7, [sp, #16]
 8008f5c:	4625      	mov	r5, r4
 8008f5e:	e7f3      	b.n	8008f48 <_dtoa_r+0x928>
 8008f60:	9b07      	ldr	r3, [sp, #28]
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 8104 	beq.w	8009174 <_dtoa_r+0xb54>
 8008f6c:	2e00      	cmp	r6, #0
 8008f6e:	dd05      	ble.n	8008f7c <_dtoa_r+0x95c>
 8008f70:	4629      	mov	r1, r5
 8008f72:	4632      	mov	r2, r6
 8008f74:	4658      	mov	r0, fp
 8008f76:	f000 fc25 	bl	80097c4 <__lshift>
 8008f7a:	4605      	mov	r5, r0
 8008f7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d05a      	beq.n	8009038 <_dtoa_r+0xa18>
 8008f82:	6869      	ldr	r1, [r5, #4]
 8008f84:	4658      	mov	r0, fp
 8008f86:	f000 fa0f 	bl	80093a8 <_Balloc>
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	b928      	cbnz	r0, 8008f9a <_dtoa_r+0x97a>
 8008f8e:	4b84      	ldr	r3, [pc, #528]	@ (80091a0 <_dtoa_r+0xb80>)
 8008f90:	4602      	mov	r2, r0
 8008f92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008f96:	f7ff bb5a 	b.w	800864e <_dtoa_r+0x2e>
 8008f9a:	692a      	ldr	r2, [r5, #16]
 8008f9c:	3202      	adds	r2, #2
 8008f9e:	0092      	lsls	r2, r2, #2
 8008fa0:	f105 010c 	add.w	r1, r5, #12
 8008fa4:	300c      	adds	r0, #12
 8008fa6:	f001 f975 	bl	800a294 <memcpy>
 8008faa:	2201      	movs	r2, #1
 8008fac:	4631      	mov	r1, r6
 8008fae:	4658      	mov	r0, fp
 8008fb0:	f000 fc08 	bl	80097c4 <__lshift>
 8008fb4:	f10a 0301 	add.w	r3, sl, #1
 8008fb8:	9307      	str	r3, [sp, #28]
 8008fba:	9b00      	ldr	r3, [sp, #0]
 8008fbc:	4453      	add	r3, sl
 8008fbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fc0:	9b02      	ldr	r3, [sp, #8]
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	462f      	mov	r7, r5
 8008fc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fca:	4605      	mov	r5, r0
 8008fcc:	9b07      	ldr	r3, [sp, #28]
 8008fce:	4621      	mov	r1, r4
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	4648      	mov	r0, r9
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	f7ff fa9a 	bl	800850e <quorem>
 8008fda:	4639      	mov	r1, r7
 8008fdc:	9002      	str	r0, [sp, #8]
 8008fde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008fe2:	4648      	mov	r0, r9
 8008fe4:	f000 fc5a 	bl	800989c <__mcmp>
 8008fe8:	462a      	mov	r2, r5
 8008fea:	9008      	str	r0, [sp, #32]
 8008fec:	4621      	mov	r1, r4
 8008fee:	4658      	mov	r0, fp
 8008ff0:	f000 fc70 	bl	80098d4 <__mdiff>
 8008ff4:	68c2      	ldr	r2, [r0, #12]
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	bb02      	cbnz	r2, 800903c <_dtoa_r+0xa1c>
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	4648      	mov	r0, r9
 8008ffe:	f000 fc4d 	bl	800989c <__mcmp>
 8009002:	4602      	mov	r2, r0
 8009004:	4631      	mov	r1, r6
 8009006:	4658      	mov	r0, fp
 8009008:	920e      	str	r2, [sp, #56]	@ 0x38
 800900a:	f000 fa0d 	bl	8009428 <_Bfree>
 800900e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009010:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009012:	9e07      	ldr	r6, [sp, #28]
 8009014:	ea43 0102 	orr.w	r1, r3, r2
 8009018:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800901a:	4319      	orrs	r1, r3
 800901c:	d110      	bne.n	8009040 <_dtoa_r+0xa20>
 800901e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009022:	d029      	beq.n	8009078 <_dtoa_r+0xa58>
 8009024:	9b08      	ldr	r3, [sp, #32]
 8009026:	2b00      	cmp	r3, #0
 8009028:	dd02      	ble.n	8009030 <_dtoa_r+0xa10>
 800902a:	9b02      	ldr	r3, [sp, #8]
 800902c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009030:	9b00      	ldr	r3, [sp, #0]
 8009032:	f883 8000 	strb.w	r8, [r3]
 8009036:	e63f      	b.n	8008cb8 <_dtoa_r+0x698>
 8009038:	4628      	mov	r0, r5
 800903a:	e7bb      	b.n	8008fb4 <_dtoa_r+0x994>
 800903c:	2201      	movs	r2, #1
 800903e:	e7e1      	b.n	8009004 <_dtoa_r+0x9e4>
 8009040:	9b08      	ldr	r3, [sp, #32]
 8009042:	2b00      	cmp	r3, #0
 8009044:	db04      	blt.n	8009050 <_dtoa_r+0xa30>
 8009046:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009048:	430b      	orrs	r3, r1
 800904a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800904c:	430b      	orrs	r3, r1
 800904e:	d120      	bne.n	8009092 <_dtoa_r+0xa72>
 8009050:	2a00      	cmp	r2, #0
 8009052:	dded      	ble.n	8009030 <_dtoa_r+0xa10>
 8009054:	4649      	mov	r1, r9
 8009056:	2201      	movs	r2, #1
 8009058:	4658      	mov	r0, fp
 800905a:	f000 fbb3 	bl	80097c4 <__lshift>
 800905e:	4621      	mov	r1, r4
 8009060:	4681      	mov	r9, r0
 8009062:	f000 fc1b 	bl	800989c <__mcmp>
 8009066:	2800      	cmp	r0, #0
 8009068:	dc03      	bgt.n	8009072 <_dtoa_r+0xa52>
 800906a:	d1e1      	bne.n	8009030 <_dtoa_r+0xa10>
 800906c:	f018 0f01 	tst.w	r8, #1
 8009070:	d0de      	beq.n	8009030 <_dtoa_r+0xa10>
 8009072:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009076:	d1d8      	bne.n	800902a <_dtoa_r+0xa0a>
 8009078:	9a00      	ldr	r2, [sp, #0]
 800907a:	2339      	movs	r3, #57	@ 0x39
 800907c:	7013      	strb	r3, [r2, #0]
 800907e:	4633      	mov	r3, r6
 8009080:	461e      	mov	r6, r3
 8009082:	3b01      	subs	r3, #1
 8009084:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009088:	2a39      	cmp	r2, #57	@ 0x39
 800908a:	d052      	beq.n	8009132 <_dtoa_r+0xb12>
 800908c:	3201      	adds	r2, #1
 800908e:	701a      	strb	r2, [r3, #0]
 8009090:	e612      	b.n	8008cb8 <_dtoa_r+0x698>
 8009092:	2a00      	cmp	r2, #0
 8009094:	dd07      	ble.n	80090a6 <_dtoa_r+0xa86>
 8009096:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800909a:	d0ed      	beq.n	8009078 <_dtoa_r+0xa58>
 800909c:	9a00      	ldr	r2, [sp, #0]
 800909e:	f108 0301 	add.w	r3, r8, #1
 80090a2:	7013      	strb	r3, [r2, #0]
 80090a4:	e608      	b.n	8008cb8 <_dtoa_r+0x698>
 80090a6:	9b07      	ldr	r3, [sp, #28]
 80090a8:	9a07      	ldr	r2, [sp, #28]
 80090aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80090ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d028      	beq.n	8009106 <_dtoa_r+0xae6>
 80090b4:	4649      	mov	r1, r9
 80090b6:	2300      	movs	r3, #0
 80090b8:	220a      	movs	r2, #10
 80090ba:	4658      	mov	r0, fp
 80090bc:	f000 f9d6 	bl	800946c <__multadd>
 80090c0:	42af      	cmp	r7, r5
 80090c2:	4681      	mov	r9, r0
 80090c4:	f04f 0300 	mov.w	r3, #0
 80090c8:	f04f 020a 	mov.w	r2, #10
 80090cc:	4639      	mov	r1, r7
 80090ce:	4658      	mov	r0, fp
 80090d0:	d107      	bne.n	80090e2 <_dtoa_r+0xac2>
 80090d2:	f000 f9cb 	bl	800946c <__multadd>
 80090d6:	4607      	mov	r7, r0
 80090d8:	4605      	mov	r5, r0
 80090da:	9b07      	ldr	r3, [sp, #28]
 80090dc:	3301      	adds	r3, #1
 80090de:	9307      	str	r3, [sp, #28]
 80090e0:	e774      	b.n	8008fcc <_dtoa_r+0x9ac>
 80090e2:	f000 f9c3 	bl	800946c <__multadd>
 80090e6:	4629      	mov	r1, r5
 80090e8:	4607      	mov	r7, r0
 80090ea:	2300      	movs	r3, #0
 80090ec:	220a      	movs	r2, #10
 80090ee:	4658      	mov	r0, fp
 80090f0:	f000 f9bc 	bl	800946c <__multadd>
 80090f4:	4605      	mov	r5, r0
 80090f6:	e7f0      	b.n	80090da <_dtoa_r+0xaba>
 80090f8:	9b00      	ldr	r3, [sp, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	bfcc      	ite	gt
 80090fe:	461e      	movgt	r6, r3
 8009100:	2601      	movle	r6, #1
 8009102:	4456      	add	r6, sl
 8009104:	2700      	movs	r7, #0
 8009106:	4649      	mov	r1, r9
 8009108:	2201      	movs	r2, #1
 800910a:	4658      	mov	r0, fp
 800910c:	f000 fb5a 	bl	80097c4 <__lshift>
 8009110:	4621      	mov	r1, r4
 8009112:	4681      	mov	r9, r0
 8009114:	f000 fbc2 	bl	800989c <__mcmp>
 8009118:	2800      	cmp	r0, #0
 800911a:	dcb0      	bgt.n	800907e <_dtoa_r+0xa5e>
 800911c:	d102      	bne.n	8009124 <_dtoa_r+0xb04>
 800911e:	f018 0f01 	tst.w	r8, #1
 8009122:	d1ac      	bne.n	800907e <_dtoa_r+0xa5e>
 8009124:	4633      	mov	r3, r6
 8009126:	461e      	mov	r6, r3
 8009128:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800912c:	2a30      	cmp	r2, #48	@ 0x30
 800912e:	d0fa      	beq.n	8009126 <_dtoa_r+0xb06>
 8009130:	e5c2      	b.n	8008cb8 <_dtoa_r+0x698>
 8009132:	459a      	cmp	sl, r3
 8009134:	d1a4      	bne.n	8009080 <_dtoa_r+0xa60>
 8009136:	9b04      	ldr	r3, [sp, #16]
 8009138:	3301      	adds	r3, #1
 800913a:	9304      	str	r3, [sp, #16]
 800913c:	2331      	movs	r3, #49	@ 0x31
 800913e:	f88a 3000 	strb.w	r3, [sl]
 8009142:	e5b9      	b.n	8008cb8 <_dtoa_r+0x698>
 8009144:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009146:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80091a4 <_dtoa_r+0xb84>
 800914a:	b11b      	cbz	r3, 8009154 <_dtoa_r+0xb34>
 800914c:	f10a 0308 	add.w	r3, sl, #8
 8009150:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	4650      	mov	r0, sl
 8009156:	b019      	add	sp, #100	@ 0x64
 8009158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800915c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800915e:	2b01      	cmp	r3, #1
 8009160:	f77f ae37 	ble.w	8008dd2 <_dtoa_r+0x7b2>
 8009164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009166:	930a      	str	r3, [sp, #40]	@ 0x28
 8009168:	2001      	movs	r0, #1
 800916a:	e655      	b.n	8008e18 <_dtoa_r+0x7f8>
 800916c:	9b00      	ldr	r3, [sp, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	f77f aed6 	ble.w	8008f20 <_dtoa_r+0x900>
 8009174:	4656      	mov	r6, sl
 8009176:	4621      	mov	r1, r4
 8009178:	4648      	mov	r0, r9
 800917a:	f7ff f9c8 	bl	800850e <quorem>
 800917e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009182:	f806 8b01 	strb.w	r8, [r6], #1
 8009186:	9b00      	ldr	r3, [sp, #0]
 8009188:	eba6 020a 	sub.w	r2, r6, sl
 800918c:	4293      	cmp	r3, r2
 800918e:	ddb3      	ble.n	80090f8 <_dtoa_r+0xad8>
 8009190:	4649      	mov	r1, r9
 8009192:	2300      	movs	r3, #0
 8009194:	220a      	movs	r2, #10
 8009196:	4658      	mov	r0, fp
 8009198:	f000 f968 	bl	800946c <__multadd>
 800919c:	4681      	mov	r9, r0
 800919e:	e7ea      	b.n	8009176 <_dtoa_r+0xb56>
 80091a0:	0800b329 	.word	0x0800b329
 80091a4:	0800b2ad 	.word	0x0800b2ad

080091a8 <_free_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	4605      	mov	r5, r0
 80091ac:	2900      	cmp	r1, #0
 80091ae:	d041      	beq.n	8009234 <_free_r+0x8c>
 80091b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b4:	1f0c      	subs	r4, r1, #4
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	bfb8      	it	lt
 80091ba:	18e4      	addlt	r4, r4, r3
 80091bc:	f000 f8e8 	bl	8009390 <__malloc_lock>
 80091c0:	4a1d      	ldr	r2, [pc, #116]	@ (8009238 <_free_r+0x90>)
 80091c2:	6813      	ldr	r3, [r2, #0]
 80091c4:	b933      	cbnz	r3, 80091d4 <_free_r+0x2c>
 80091c6:	6063      	str	r3, [r4, #4]
 80091c8:	6014      	str	r4, [r2, #0]
 80091ca:	4628      	mov	r0, r5
 80091cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091d0:	f000 b8e4 	b.w	800939c <__malloc_unlock>
 80091d4:	42a3      	cmp	r3, r4
 80091d6:	d908      	bls.n	80091ea <_free_r+0x42>
 80091d8:	6820      	ldr	r0, [r4, #0]
 80091da:	1821      	adds	r1, r4, r0
 80091dc:	428b      	cmp	r3, r1
 80091de:	bf01      	itttt	eq
 80091e0:	6819      	ldreq	r1, [r3, #0]
 80091e2:	685b      	ldreq	r3, [r3, #4]
 80091e4:	1809      	addeq	r1, r1, r0
 80091e6:	6021      	streq	r1, [r4, #0]
 80091e8:	e7ed      	b.n	80091c6 <_free_r+0x1e>
 80091ea:	461a      	mov	r2, r3
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	b10b      	cbz	r3, 80091f4 <_free_r+0x4c>
 80091f0:	42a3      	cmp	r3, r4
 80091f2:	d9fa      	bls.n	80091ea <_free_r+0x42>
 80091f4:	6811      	ldr	r1, [r2, #0]
 80091f6:	1850      	adds	r0, r2, r1
 80091f8:	42a0      	cmp	r0, r4
 80091fa:	d10b      	bne.n	8009214 <_free_r+0x6c>
 80091fc:	6820      	ldr	r0, [r4, #0]
 80091fe:	4401      	add	r1, r0
 8009200:	1850      	adds	r0, r2, r1
 8009202:	4283      	cmp	r3, r0
 8009204:	6011      	str	r1, [r2, #0]
 8009206:	d1e0      	bne.n	80091ca <_free_r+0x22>
 8009208:	6818      	ldr	r0, [r3, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	6053      	str	r3, [r2, #4]
 800920e:	4408      	add	r0, r1
 8009210:	6010      	str	r0, [r2, #0]
 8009212:	e7da      	b.n	80091ca <_free_r+0x22>
 8009214:	d902      	bls.n	800921c <_free_r+0x74>
 8009216:	230c      	movs	r3, #12
 8009218:	602b      	str	r3, [r5, #0]
 800921a:	e7d6      	b.n	80091ca <_free_r+0x22>
 800921c:	6820      	ldr	r0, [r4, #0]
 800921e:	1821      	adds	r1, r4, r0
 8009220:	428b      	cmp	r3, r1
 8009222:	bf04      	itt	eq
 8009224:	6819      	ldreq	r1, [r3, #0]
 8009226:	685b      	ldreq	r3, [r3, #4]
 8009228:	6063      	str	r3, [r4, #4]
 800922a:	bf04      	itt	eq
 800922c:	1809      	addeq	r1, r1, r0
 800922e:	6021      	streq	r1, [r4, #0]
 8009230:	6054      	str	r4, [r2, #4]
 8009232:	e7ca      	b.n	80091ca <_free_r+0x22>
 8009234:	bd38      	pop	{r3, r4, r5, pc}
 8009236:	bf00      	nop
 8009238:	200007c4 	.word	0x200007c4

0800923c <malloc>:
 800923c:	4b02      	ldr	r3, [pc, #8]	@ (8009248 <malloc+0xc>)
 800923e:	4601      	mov	r1, r0
 8009240:	6818      	ldr	r0, [r3, #0]
 8009242:	f000 b825 	b.w	8009290 <_malloc_r>
 8009246:	bf00      	nop
 8009248:	20000024 	.word	0x20000024

0800924c <sbrk_aligned>:
 800924c:	b570      	push	{r4, r5, r6, lr}
 800924e:	4e0f      	ldr	r6, [pc, #60]	@ (800928c <sbrk_aligned+0x40>)
 8009250:	460c      	mov	r4, r1
 8009252:	6831      	ldr	r1, [r6, #0]
 8009254:	4605      	mov	r5, r0
 8009256:	b911      	cbnz	r1, 800925e <sbrk_aligned+0x12>
 8009258:	f001 f80c 	bl	800a274 <_sbrk_r>
 800925c:	6030      	str	r0, [r6, #0]
 800925e:	4621      	mov	r1, r4
 8009260:	4628      	mov	r0, r5
 8009262:	f001 f807 	bl	800a274 <_sbrk_r>
 8009266:	1c43      	adds	r3, r0, #1
 8009268:	d103      	bne.n	8009272 <sbrk_aligned+0x26>
 800926a:	f04f 34ff 	mov.w	r4, #4294967295
 800926e:	4620      	mov	r0, r4
 8009270:	bd70      	pop	{r4, r5, r6, pc}
 8009272:	1cc4      	adds	r4, r0, #3
 8009274:	f024 0403 	bic.w	r4, r4, #3
 8009278:	42a0      	cmp	r0, r4
 800927a:	d0f8      	beq.n	800926e <sbrk_aligned+0x22>
 800927c:	1a21      	subs	r1, r4, r0
 800927e:	4628      	mov	r0, r5
 8009280:	f000 fff8 	bl	800a274 <_sbrk_r>
 8009284:	3001      	adds	r0, #1
 8009286:	d1f2      	bne.n	800926e <sbrk_aligned+0x22>
 8009288:	e7ef      	b.n	800926a <sbrk_aligned+0x1e>
 800928a:	bf00      	nop
 800928c:	200007c0 	.word	0x200007c0

08009290 <_malloc_r>:
 8009290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009294:	1ccd      	adds	r5, r1, #3
 8009296:	f025 0503 	bic.w	r5, r5, #3
 800929a:	3508      	adds	r5, #8
 800929c:	2d0c      	cmp	r5, #12
 800929e:	bf38      	it	cc
 80092a0:	250c      	movcc	r5, #12
 80092a2:	2d00      	cmp	r5, #0
 80092a4:	4606      	mov	r6, r0
 80092a6:	db01      	blt.n	80092ac <_malloc_r+0x1c>
 80092a8:	42a9      	cmp	r1, r5
 80092aa:	d904      	bls.n	80092b6 <_malloc_r+0x26>
 80092ac:	230c      	movs	r3, #12
 80092ae:	6033      	str	r3, [r6, #0]
 80092b0:	2000      	movs	r0, #0
 80092b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800938c <_malloc_r+0xfc>
 80092ba:	f000 f869 	bl	8009390 <__malloc_lock>
 80092be:	f8d8 3000 	ldr.w	r3, [r8]
 80092c2:	461c      	mov	r4, r3
 80092c4:	bb44      	cbnz	r4, 8009318 <_malloc_r+0x88>
 80092c6:	4629      	mov	r1, r5
 80092c8:	4630      	mov	r0, r6
 80092ca:	f7ff ffbf 	bl	800924c <sbrk_aligned>
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	4604      	mov	r4, r0
 80092d2:	d158      	bne.n	8009386 <_malloc_r+0xf6>
 80092d4:	f8d8 4000 	ldr.w	r4, [r8]
 80092d8:	4627      	mov	r7, r4
 80092da:	2f00      	cmp	r7, #0
 80092dc:	d143      	bne.n	8009366 <_malloc_r+0xd6>
 80092de:	2c00      	cmp	r4, #0
 80092e0:	d04b      	beq.n	800937a <_malloc_r+0xea>
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	4639      	mov	r1, r7
 80092e6:	4630      	mov	r0, r6
 80092e8:	eb04 0903 	add.w	r9, r4, r3
 80092ec:	f000 ffc2 	bl	800a274 <_sbrk_r>
 80092f0:	4581      	cmp	r9, r0
 80092f2:	d142      	bne.n	800937a <_malloc_r+0xea>
 80092f4:	6821      	ldr	r1, [r4, #0]
 80092f6:	1a6d      	subs	r5, r5, r1
 80092f8:	4629      	mov	r1, r5
 80092fa:	4630      	mov	r0, r6
 80092fc:	f7ff ffa6 	bl	800924c <sbrk_aligned>
 8009300:	3001      	adds	r0, #1
 8009302:	d03a      	beq.n	800937a <_malloc_r+0xea>
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	442b      	add	r3, r5
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	f8d8 3000 	ldr.w	r3, [r8]
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	bb62      	cbnz	r2, 800936c <_malloc_r+0xdc>
 8009312:	f8c8 7000 	str.w	r7, [r8]
 8009316:	e00f      	b.n	8009338 <_malloc_r+0xa8>
 8009318:	6822      	ldr	r2, [r4, #0]
 800931a:	1b52      	subs	r2, r2, r5
 800931c:	d420      	bmi.n	8009360 <_malloc_r+0xd0>
 800931e:	2a0b      	cmp	r2, #11
 8009320:	d917      	bls.n	8009352 <_malloc_r+0xc2>
 8009322:	1961      	adds	r1, r4, r5
 8009324:	42a3      	cmp	r3, r4
 8009326:	6025      	str	r5, [r4, #0]
 8009328:	bf18      	it	ne
 800932a:	6059      	strne	r1, [r3, #4]
 800932c:	6863      	ldr	r3, [r4, #4]
 800932e:	bf08      	it	eq
 8009330:	f8c8 1000 	streq.w	r1, [r8]
 8009334:	5162      	str	r2, [r4, r5]
 8009336:	604b      	str	r3, [r1, #4]
 8009338:	4630      	mov	r0, r6
 800933a:	f000 f82f 	bl	800939c <__malloc_unlock>
 800933e:	f104 000b 	add.w	r0, r4, #11
 8009342:	1d23      	adds	r3, r4, #4
 8009344:	f020 0007 	bic.w	r0, r0, #7
 8009348:	1ac2      	subs	r2, r0, r3
 800934a:	bf1c      	itt	ne
 800934c:	1a1b      	subne	r3, r3, r0
 800934e:	50a3      	strne	r3, [r4, r2]
 8009350:	e7af      	b.n	80092b2 <_malloc_r+0x22>
 8009352:	6862      	ldr	r2, [r4, #4]
 8009354:	42a3      	cmp	r3, r4
 8009356:	bf0c      	ite	eq
 8009358:	f8c8 2000 	streq.w	r2, [r8]
 800935c:	605a      	strne	r2, [r3, #4]
 800935e:	e7eb      	b.n	8009338 <_malloc_r+0xa8>
 8009360:	4623      	mov	r3, r4
 8009362:	6864      	ldr	r4, [r4, #4]
 8009364:	e7ae      	b.n	80092c4 <_malloc_r+0x34>
 8009366:	463c      	mov	r4, r7
 8009368:	687f      	ldr	r7, [r7, #4]
 800936a:	e7b6      	b.n	80092da <_malloc_r+0x4a>
 800936c:	461a      	mov	r2, r3
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	42a3      	cmp	r3, r4
 8009372:	d1fb      	bne.n	800936c <_malloc_r+0xdc>
 8009374:	2300      	movs	r3, #0
 8009376:	6053      	str	r3, [r2, #4]
 8009378:	e7de      	b.n	8009338 <_malloc_r+0xa8>
 800937a:	230c      	movs	r3, #12
 800937c:	6033      	str	r3, [r6, #0]
 800937e:	4630      	mov	r0, r6
 8009380:	f000 f80c 	bl	800939c <__malloc_unlock>
 8009384:	e794      	b.n	80092b0 <_malloc_r+0x20>
 8009386:	6005      	str	r5, [r0, #0]
 8009388:	e7d6      	b.n	8009338 <_malloc_r+0xa8>
 800938a:	bf00      	nop
 800938c:	200007c4 	.word	0x200007c4

08009390 <__malloc_lock>:
 8009390:	4801      	ldr	r0, [pc, #4]	@ (8009398 <__malloc_lock+0x8>)
 8009392:	f7ff b8ba 	b.w	800850a <__retarget_lock_acquire_recursive>
 8009396:	bf00      	nop
 8009398:	200007bc 	.word	0x200007bc

0800939c <__malloc_unlock>:
 800939c:	4801      	ldr	r0, [pc, #4]	@ (80093a4 <__malloc_unlock+0x8>)
 800939e:	f7ff b8b5 	b.w	800850c <__retarget_lock_release_recursive>
 80093a2:	bf00      	nop
 80093a4:	200007bc 	.word	0x200007bc

080093a8 <_Balloc>:
 80093a8:	b570      	push	{r4, r5, r6, lr}
 80093aa:	69c6      	ldr	r6, [r0, #28]
 80093ac:	4604      	mov	r4, r0
 80093ae:	460d      	mov	r5, r1
 80093b0:	b976      	cbnz	r6, 80093d0 <_Balloc+0x28>
 80093b2:	2010      	movs	r0, #16
 80093b4:	f7ff ff42 	bl	800923c <malloc>
 80093b8:	4602      	mov	r2, r0
 80093ba:	61e0      	str	r0, [r4, #28]
 80093bc:	b920      	cbnz	r0, 80093c8 <_Balloc+0x20>
 80093be:	4b18      	ldr	r3, [pc, #96]	@ (8009420 <_Balloc+0x78>)
 80093c0:	4818      	ldr	r0, [pc, #96]	@ (8009424 <_Balloc+0x7c>)
 80093c2:	216b      	movs	r1, #107	@ 0x6b
 80093c4:	f000 ff74 	bl	800a2b0 <__assert_func>
 80093c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093cc:	6006      	str	r6, [r0, #0]
 80093ce:	60c6      	str	r6, [r0, #12]
 80093d0:	69e6      	ldr	r6, [r4, #28]
 80093d2:	68f3      	ldr	r3, [r6, #12]
 80093d4:	b183      	cbz	r3, 80093f8 <_Balloc+0x50>
 80093d6:	69e3      	ldr	r3, [r4, #28]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093de:	b9b8      	cbnz	r0, 8009410 <_Balloc+0x68>
 80093e0:	2101      	movs	r1, #1
 80093e2:	fa01 f605 	lsl.w	r6, r1, r5
 80093e6:	1d72      	adds	r2, r6, #5
 80093e8:	0092      	lsls	r2, r2, #2
 80093ea:	4620      	mov	r0, r4
 80093ec:	f000 ff7e 	bl	800a2ec <_calloc_r>
 80093f0:	b160      	cbz	r0, 800940c <_Balloc+0x64>
 80093f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093f6:	e00e      	b.n	8009416 <_Balloc+0x6e>
 80093f8:	2221      	movs	r2, #33	@ 0x21
 80093fa:	2104      	movs	r1, #4
 80093fc:	4620      	mov	r0, r4
 80093fe:	f000 ff75 	bl	800a2ec <_calloc_r>
 8009402:	69e3      	ldr	r3, [r4, #28]
 8009404:	60f0      	str	r0, [r6, #12]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1e4      	bne.n	80093d6 <_Balloc+0x2e>
 800940c:	2000      	movs	r0, #0
 800940e:	bd70      	pop	{r4, r5, r6, pc}
 8009410:	6802      	ldr	r2, [r0, #0]
 8009412:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009416:	2300      	movs	r3, #0
 8009418:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800941c:	e7f7      	b.n	800940e <_Balloc+0x66>
 800941e:	bf00      	nop
 8009420:	0800b2ba 	.word	0x0800b2ba
 8009424:	0800b33a 	.word	0x0800b33a

08009428 <_Bfree>:
 8009428:	b570      	push	{r4, r5, r6, lr}
 800942a:	69c6      	ldr	r6, [r0, #28]
 800942c:	4605      	mov	r5, r0
 800942e:	460c      	mov	r4, r1
 8009430:	b976      	cbnz	r6, 8009450 <_Bfree+0x28>
 8009432:	2010      	movs	r0, #16
 8009434:	f7ff ff02 	bl	800923c <malloc>
 8009438:	4602      	mov	r2, r0
 800943a:	61e8      	str	r0, [r5, #28]
 800943c:	b920      	cbnz	r0, 8009448 <_Bfree+0x20>
 800943e:	4b09      	ldr	r3, [pc, #36]	@ (8009464 <_Bfree+0x3c>)
 8009440:	4809      	ldr	r0, [pc, #36]	@ (8009468 <_Bfree+0x40>)
 8009442:	218f      	movs	r1, #143	@ 0x8f
 8009444:	f000 ff34 	bl	800a2b0 <__assert_func>
 8009448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800944c:	6006      	str	r6, [r0, #0]
 800944e:	60c6      	str	r6, [r0, #12]
 8009450:	b13c      	cbz	r4, 8009462 <_Bfree+0x3a>
 8009452:	69eb      	ldr	r3, [r5, #28]
 8009454:	6862      	ldr	r2, [r4, #4]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800945c:	6021      	str	r1, [r4, #0]
 800945e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009462:	bd70      	pop	{r4, r5, r6, pc}
 8009464:	0800b2ba 	.word	0x0800b2ba
 8009468:	0800b33a 	.word	0x0800b33a

0800946c <__multadd>:
 800946c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009470:	690d      	ldr	r5, [r1, #16]
 8009472:	4607      	mov	r7, r0
 8009474:	460c      	mov	r4, r1
 8009476:	461e      	mov	r6, r3
 8009478:	f101 0c14 	add.w	ip, r1, #20
 800947c:	2000      	movs	r0, #0
 800947e:	f8dc 3000 	ldr.w	r3, [ip]
 8009482:	b299      	uxth	r1, r3
 8009484:	fb02 6101 	mla	r1, r2, r1, r6
 8009488:	0c1e      	lsrs	r6, r3, #16
 800948a:	0c0b      	lsrs	r3, r1, #16
 800948c:	fb02 3306 	mla	r3, r2, r6, r3
 8009490:	b289      	uxth	r1, r1
 8009492:	3001      	adds	r0, #1
 8009494:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009498:	4285      	cmp	r5, r0
 800949a:	f84c 1b04 	str.w	r1, [ip], #4
 800949e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094a2:	dcec      	bgt.n	800947e <__multadd+0x12>
 80094a4:	b30e      	cbz	r6, 80094ea <__multadd+0x7e>
 80094a6:	68a3      	ldr	r3, [r4, #8]
 80094a8:	42ab      	cmp	r3, r5
 80094aa:	dc19      	bgt.n	80094e0 <__multadd+0x74>
 80094ac:	6861      	ldr	r1, [r4, #4]
 80094ae:	4638      	mov	r0, r7
 80094b0:	3101      	adds	r1, #1
 80094b2:	f7ff ff79 	bl	80093a8 <_Balloc>
 80094b6:	4680      	mov	r8, r0
 80094b8:	b928      	cbnz	r0, 80094c6 <__multadd+0x5a>
 80094ba:	4602      	mov	r2, r0
 80094bc:	4b0c      	ldr	r3, [pc, #48]	@ (80094f0 <__multadd+0x84>)
 80094be:	480d      	ldr	r0, [pc, #52]	@ (80094f4 <__multadd+0x88>)
 80094c0:	21ba      	movs	r1, #186	@ 0xba
 80094c2:	f000 fef5 	bl	800a2b0 <__assert_func>
 80094c6:	6922      	ldr	r2, [r4, #16]
 80094c8:	3202      	adds	r2, #2
 80094ca:	f104 010c 	add.w	r1, r4, #12
 80094ce:	0092      	lsls	r2, r2, #2
 80094d0:	300c      	adds	r0, #12
 80094d2:	f000 fedf 	bl	800a294 <memcpy>
 80094d6:	4621      	mov	r1, r4
 80094d8:	4638      	mov	r0, r7
 80094da:	f7ff ffa5 	bl	8009428 <_Bfree>
 80094de:	4644      	mov	r4, r8
 80094e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094e4:	3501      	adds	r5, #1
 80094e6:	615e      	str	r6, [r3, #20]
 80094e8:	6125      	str	r5, [r4, #16]
 80094ea:	4620      	mov	r0, r4
 80094ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094f0:	0800b329 	.word	0x0800b329
 80094f4:	0800b33a 	.word	0x0800b33a

080094f8 <__hi0bits>:
 80094f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80094fc:	4603      	mov	r3, r0
 80094fe:	bf36      	itet	cc
 8009500:	0403      	lslcc	r3, r0, #16
 8009502:	2000      	movcs	r0, #0
 8009504:	2010      	movcc	r0, #16
 8009506:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800950a:	bf3c      	itt	cc
 800950c:	021b      	lslcc	r3, r3, #8
 800950e:	3008      	addcc	r0, #8
 8009510:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009514:	bf3c      	itt	cc
 8009516:	011b      	lslcc	r3, r3, #4
 8009518:	3004      	addcc	r0, #4
 800951a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800951e:	bf3c      	itt	cc
 8009520:	009b      	lslcc	r3, r3, #2
 8009522:	3002      	addcc	r0, #2
 8009524:	2b00      	cmp	r3, #0
 8009526:	db05      	blt.n	8009534 <__hi0bits+0x3c>
 8009528:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800952c:	f100 0001 	add.w	r0, r0, #1
 8009530:	bf08      	it	eq
 8009532:	2020      	moveq	r0, #32
 8009534:	4770      	bx	lr

08009536 <__lo0bits>:
 8009536:	6803      	ldr	r3, [r0, #0]
 8009538:	4602      	mov	r2, r0
 800953a:	f013 0007 	ands.w	r0, r3, #7
 800953e:	d00b      	beq.n	8009558 <__lo0bits+0x22>
 8009540:	07d9      	lsls	r1, r3, #31
 8009542:	d421      	bmi.n	8009588 <__lo0bits+0x52>
 8009544:	0798      	lsls	r0, r3, #30
 8009546:	bf49      	itett	mi
 8009548:	085b      	lsrmi	r3, r3, #1
 800954a:	089b      	lsrpl	r3, r3, #2
 800954c:	2001      	movmi	r0, #1
 800954e:	6013      	strmi	r3, [r2, #0]
 8009550:	bf5c      	itt	pl
 8009552:	6013      	strpl	r3, [r2, #0]
 8009554:	2002      	movpl	r0, #2
 8009556:	4770      	bx	lr
 8009558:	b299      	uxth	r1, r3
 800955a:	b909      	cbnz	r1, 8009560 <__lo0bits+0x2a>
 800955c:	0c1b      	lsrs	r3, r3, #16
 800955e:	2010      	movs	r0, #16
 8009560:	b2d9      	uxtb	r1, r3
 8009562:	b909      	cbnz	r1, 8009568 <__lo0bits+0x32>
 8009564:	3008      	adds	r0, #8
 8009566:	0a1b      	lsrs	r3, r3, #8
 8009568:	0719      	lsls	r1, r3, #28
 800956a:	bf04      	itt	eq
 800956c:	091b      	lsreq	r3, r3, #4
 800956e:	3004      	addeq	r0, #4
 8009570:	0799      	lsls	r1, r3, #30
 8009572:	bf04      	itt	eq
 8009574:	089b      	lsreq	r3, r3, #2
 8009576:	3002      	addeq	r0, #2
 8009578:	07d9      	lsls	r1, r3, #31
 800957a:	d403      	bmi.n	8009584 <__lo0bits+0x4e>
 800957c:	085b      	lsrs	r3, r3, #1
 800957e:	f100 0001 	add.w	r0, r0, #1
 8009582:	d003      	beq.n	800958c <__lo0bits+0x56>
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	4770      	bx	lr
 8009588:	2000      	movs	r0, #0
 800958a:	4770      	bx	lr
 800958c:	2020      	movs	r0, #32
 800958e:	4770      	bx	lr

08009590 <__i2b>:
 8009590:	b510      	push	{r4, lr}
 8009592:	460c      	mov	r4, r1
 8009594:	2101      	movs	r1, #1
 8009596:	f7ff ff07 	bl	80093a8 <_Balloc>
 800959a:	4602      	mov	r2, r0
 800959c:	b928      	cbnz	r0, 80095aa <__i2b+0x1a>
 800959e:	4b05      	ldr	r3, [pc, #20]	@ (80095b4 <__i2b+0x24>)
 80095a0:	4805      	ldr	r0, [pc, #20]	@ (80095b8 <__i2b+0x28>)
 80095a2:	f240 1145 	movw	r1, #325	@ 0x145
 80095a6:	f000 fe83 	bl	800a2b0 <__assert_func>
 80095aa:	2301      	movs	r3, #1
 80095ac:	6144      	str	r4, [r0, #20]
 80095ae:	6103      	str	r3, [r0, #16]
 80095b0:	bd10      	pop	{r4, pc}
 80095b2:	bf00      	nop
 80095b4:	0800b329 	.word	0x0800b329
 80095b8:	0800b33a 	.word	0x0800b33a

080095bc <__multiply>:
 80095bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c0:	4614      	mov	r4, r2
 80095c2:	690a      	ldr	r2, [r1, #16]
 80095c4:	6923      	ldr	r3, [r4, #16]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	bfa8      	it	ge
 80095ca:	4623      	movge	r3, r4
 80095cc:	460f      	mov	r7, r1
 80095ce:	bfa4      	itt	ge
 80095d0:	460c      	movge	r4, r1
 80095d2:	461f      	movge	r7, r3
 80095d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80095d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80095dc:	68a3      	ldr	r3, [r4, #8]
 80095de:	6861      	ldr	r1, [r4, #4]
 80095e0:	eb0a 0609 	add.w	r6, sl, r9
 80095e4:	42b3      	cmp	r3, r6
 80095e6:	b085      	sub	sp, #20
 80095e8:	bfb8      	it	lt
 80095ea:	3101      	addlt	r1, #1
 80095ec:	f7ff fedc 	bl	80093a8 <_Balloc>
 80095f0:	b930      	cbnz	r0, 8009600 <__multiply+0x44>
 80095f2:	4602      	mov	r2, r0
 80095f4:	4b44      	ldr	r3, [pc, #272]	@ (8009708 <__multiply+0x14c>)
 80095f6:	4845      	ldr	r0, [pc, #276]	@ (800970c <__multiply+0x150>)
 80095f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80095fc:	f000 fe58 	bl	800a2b0 <__assert_func>
 8009600:	f100 0514 	add.w	r5, r0, #20
 8009604:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009608:	462b      	mov	r3, r5
 800960a:	2200      	movs	r2, #0
 800960c:	4543      	cmp	r3, r8
 800960e:	d321      	bcc.n	8009654 <__multiply+0x98>
 8009610:	f107 0114 	add.w	r1, r7, #20
 8009614:	f104 0214 	add.w	r2, r4, #20
 8009618:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800961c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009620:	9302      	str	r3, [sp, #8]
 8009622:	1b13      	subs	r3, r2, r4
 8009624:	3b15      	subs	r3, #21
 8009626:	f023 0303 	bic.w	r3, r3, #3
 800962a:	3304      	adds	r3, #4
 800962c:	f104 0715 	add.w	r7, r4, #21
 8009630:	42ba      	cmp	r2, r7
 8009632:	bf38      	it	cc
 8009634:	2304      	movcc	r3, #4
 8009636:	9301      	str	r3, [sp, #4]
 8009638:	9b02      	ldr	r3, [sp, #8]
 800963a:	9103      	str	r1, [sp, #12]
 800963c:	428b      	cmp	r3, r1
 800963e:	d80c      	bhi.n	800965a <__multiply+0x9e>
 8009640:	2e00      	cmp	r6, #0
 8009642:	dd03      	ble.n	800964c <__multiply+0x90>
 8009644:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009648:	2b00      	cmp	r3, #0
 800964a:	d05b      	beq.n	8009704 <__multiply+0x148>
 800964c:	6106      	str	r6, [r0, #16]
 800964e:	b005      	add	sp, #20
 8009650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009654:	f843 2b04 	str.w	r2, [r3], #4
 8009658:	e7d8      	b.n	800960c <__multiply+0x50>
 800965a:	f8b1 a000 	ldrh.w	sl, [r1]
 800965e:	f1ba 0f00 	cmp.w	sl, #0
 8009662:	d024      	beq.n	80096ae <__multiply+0xf2>
 8009664:	f104 0e14 	add.w	lr, r4, #20
 8009668:	46a9      	mov	r9, r5
 800966a:	f04f 0c00 	mov.w	ip, #0
 800966e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009672:	f8d9 3000 	ldr.w	r3, [r9]
 8009676:	fa1f fb87 	uxth.w	fp, r7
 800967a:	b29b      	uxth	r3, r3
 800967c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009680:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009684:	f8d9 7000 	ldr.w	r7, [r9]
 8009688:	4463      	add	r3, ip
 800968a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800968e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009692:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009696:	b29b      	uxth	r3, r3
 8009698:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800969c:	4572      	cmp	r2, lr
 800969e:	f849 3b04 	str.w	r3, [r9], #4
 80096a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80096a6:	d8e2      	bhi.n	800966e <__multiply+0xb2>
 80096a8:	9b01      	ldr	r3, [sp, #4]
 80096aa:	f845 c003 	str.w	ip, [r5, r3]
 80096ae:	9b03      	ldr	r3, [sp, #12]
 80096b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80096b4:	3104      	adds	r1, #4
 80096b6:	f1b9 0f00 	cmp.w	r9, #0
 80096ba:	d021      	beq.n	8009700 <__multiply+0x144>
 80096bc:	682b      	ldr	r3, [r5, #0]
 80096be:	f104 0c14 	add.w	ip, r4, #20
 80096c2:	46ae      	mov	lr, r5
 80096c4:	f04f 0a00 	mov.w	sl, #0
 80096c8:	f8bc b000 	ldrh.w	fp, [ip]
 80096cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80096d0:	fb09 770b 	mla	r7, r9, fp, r7
 80096d4:	4457      	add	r7, sl
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80096dc:	f84e 3b04 	str.w	r3, [lr], #4
 80096e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80096e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096e8:	f8be 3000 	ldrh.w	r3, [lr]
 80096ec:	fb09 330a 	mla	r3, r9, sl, r3
 80096f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80096f4:	4562      	cmp	r2, ip
 80096f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096fa:	d8e5      	bhi.n	80096c8 <__multiply+0x10c>
 80096fc:	9f01      	ldr	r7, [sp, #4]
 80096fe:	51eb      	str	r3, [r5, r7]
 8009700:	3504      	adds	r5, #4
 8009702:	e799      	b.n	8009638 <__multiply+0x7c>
 8009704:	3e01      	subs	r6, #1
 8009706:	e79b      	b.n	8009640 <__multiply+0x84>
 8009708:	0800b329 	.word	0x0800b329
 800970c:	0800b33a 	.word	0x0800b33a

08009710 <__pow5mult>:
 8009710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009714:	4615      	mov	r5, r2
 8009716:	f012 0203 	ands.w	r2, r2, #3
 800971a:	4607      	mov	r7, r0
 800971c:	460e      	mov	r6, r1
 800971e:	d007      	beq.n	8009730 <__pow5mult+0x20>
 8009720:	4c25      	ldr	r4, [pc, #148]	@ (80097b8 <__pow5mult+0xa8>)
 8009722:	3a01      	subs	r2, #1
 8009724:	2300      	movs	r3, #0
 8009726:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800972a:	f7ff fe9f 	bl	800946c <__multadd>
 800972e:	4606      	mov	r6, r0
 8009730:	10ad      	asrs	r5, r5, #2
 8009732:	d03d      	beq.n	80097b0 <__pow5mult+0xa0>
 8009734:	69fc      	ldr	r4, [r7, #28]
 8009736:	b97c      	cbnz	r4, 8009758 <__pow5mult+0x48>
 8009738:	2010      	movs	r0, #16
 800973a:	f7ff fd7f 	bl	800923c <malloc>
 800973e:	4602      	mov	r2, r0
 8009740:	61f8      	str	r0, [r7, #28]
 8009742:	b928      	cbnz	r0, 8009750 <__pow5mult+0x40>
 8009744:	4b1d      	ldr	r3, [pc, #116]	@ (80097bc <__pow5mult+0xac>)
 8009746:	481e      	ldr	r0, [pc, #120]	@ (80097c0 <__pow5mult+0xb0>)
 8009748:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800974c:	f000 fdb0 	bl	800a2b0 <__assert_func>
 8009750:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009754:	6004      	str	r4, [r0, #0]
 8009756:	60c4      	str	r4, [r0, #12]
 8009758:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800975c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009760:	b94c      	cbnz	r4, 8009776 <__pow5mult+0x66>
 8009762:	f240 2171 	movw	r1, #625	@ 0x271
 8009766:	4638      	mov	r0, r7
 8009768:	f7ff ff12 	bl	8009590 <__i2b>
 800976c:	2300      	movs	r3, #0
 800976e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009772:	4604      	mov	r4, r0
 8009774:	6003      	str	r3, [r0, #0]
 8009776:	f04f 0900 	mov.w	r9, #0
 800977a:	07eb      	lsls	r3, r5, #31
 800977c:	d50a      	bpl.n	8009794 <__pow5mult+0x84>
 800977e:	4631      	mov	r1, r6
 8009780:	4622      	mov	r2, r4
 8009782:	4638      	mov	r0, r7
 8009784:	f7ff ff1a 	bl	80095bc <__multiply>
 8009788:	4631      	mov	r1, r6
 800978a:	4680      	mov	r8, r0
 800978c:	4638      	mov	r0, r7
 800978e:	f7ff fe4b 	bl	8009428 <_Bfree>
 8009792:	4646      	mov	r6, r8
 8009794:	106d      	asrs	r5, r5, #1
 8009796:	d00b      	beq.n	80097b0 <__pow5mult+0xa0>
 8009798:	6820      	ldr	r0, [r4, #0]
 800979a:	b938      	cbnz	r0, 80097ac <__pow5mult+0x9c>
 800979c:	4622      	mov	r2, r4
 800979e:	4621      	mov	r1, r4
 80097a0:	4638      	mov	r0, r7
 80097a2:	f7ff ff0b 	bl	80095bc <__multiply>
 80097a6:	6020      	str	r0, [r4, #0]
 80097a8:	f8c0 9000 	str.w	r9, [r0]
 80097ac:	4604      	mov	r4, r0
 80097ae:	e7e4      	b.n	800977a <__pow5mult+0x6a>
 80097b0:	4630      	mov	r0, r6
 80097b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097b6:	bf00      	nop
 80097b8:	0800b394 	.word	0x0800b394
 80097bc:	0800b2ba 	.word	0x0800b2ba
 80097c0:	0800b33a 	.word	0x0800b33a

080097c4 <__lshift>:
 80097c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c8:	460c      	mov	r4, r1
 80097ca:	6849      	ldr	r1, [r1, #4]
 80097cc:	6923      	ldr	r3, [r4, #16]
 80097ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097d2:	68a3      	ldr	r3, [r4, #8]
 80097d4:	4607      	mov	r7, r0
 80097d6:	4691      	mov	r9, r2
 80097d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097dc:	f108 0601 	add.w	r6, r8, #1
 80097e0:	42b3      	cmp	r3, r6
 80097e2:	db0b      	blt.n	80097fc <__lshift+0x38>
 80097e4:	4638      	mov	r0, r7
 80097e6:	f7ff fddf 	bl	80093a8 <_Balloc>
 80097ea:	4605      	mov	r5, r0
 80097ec:	b948      	cbnz	r0, 8009802 <__lshift+0x3e>
 80097ee:	4602      	mov	r2, r0
 80097f0:	4b28      	ldr	r3, [pc, #160]	@ (8009894 <__lshift+0xd0>)
 80097f2:	4829      	ldr	r0, [pc, #164]	@ (8009898 <__lshift+0xd4>)
 80097f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80097f8:	f000 fd5a 	bl	800a2b0 <__assert_func>
 80097fc:	3101      	adds	r1, #1
 80097fe:	005b      	lsls	r3, r3, #1
 8009800:	e7ee      	b.n	80097e0 <__lshift+0x1c>
 8009802:	2300      	movs	r3, #0
 8009804:	f100 0114 	add.w	r1, r0, #20
 8009808:	f100 0210 	add.w	r2, r0, #16
 800980c:	4618      	mov	r0, r3
 800980e:	4553      	cmp	r3, sl
 8009810:	db33      	blt.n	800987a <__lshift+0xb6>
 8009812:	6920      	ldr	r0, [r4, #16]
 8009814:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009818:	f104 0314 	add.w	r3, r4, #20
 800981c:	f019 091f 	ands.w	r9, r9, #31
 8009820:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009824:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009828:	d02b      	beq.n	8009882 <__lshift+0xbe>
 800982a:	f1c9 0e20 	rsb	lr, r9, #32
 800982e:	468a      	mov	sl, r1
 8009830:	2200      	movs	r2, #0
 8009832:	6818      	ldr	r0, [r3, #0]
 8009834:	fa00 f009 	lsl.w	r0, r0, r9
 8009838:	4310      	orrs	r0, r2
 800983a:	f84a 0b04 	str.w	r0, [sl], #4
 800983e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009842:	459c      	cmp	ip, r3
 8009844:	fa22 f20e 	lsr.w	r2, r2, lr
 8009848:	d8f3      	bhi.n	8009832 <__lshift+0x6e>
 800984a:	ebac 0304 	sub.w	r3, ip, r4
 800984e:	3b15      	subs	r3, #21
 8009850:	f023 0303 	bic.w	r3, r3, #3
 8009854:	3304      	adds	r3, #4
 8009856:	f104 0015 	add.w	r0, r4, #21
 800985a:	4584      	cmp	ip, r0
 800985c:	bf38      	it	cc
 800985e:	2304      	movcc	r3, #4
 8009860:	50ca      	str	r2, [r1, r3]
 8009862:	b10a      	cbz	r2, 8009868 <__lshift+0xa4>
 8009864:	f108 0602 	add.w	r6, r8, #2
 8009868:	3e01      	subs	r6, #1
 800986a:	4638      	mov	r0, r7
 800986c:	612e      	str	r6, [r5, #16]
 800986e:	4621      	mov	r1, r4
 8009870:	f7ff fdda 	bl	8009428 <_Bfree>
 8009874:	4628      	mov	r0, r5
 8009876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800987a:	f842 0f04 	str.w	r0, [r2, #4]!
 800987e:	3301      	adds	r3, #1
 8009880:	e7c5      	b.n	800980e <__lshift+0x4a>
 8009882:	3904      	subs	r1, #4
 8009884:	f853 2b04 	ldr.w	r2, [r3], #4
 8009888:	f841 2f04 	str.w	r2, [r1, #4]!
 800988c:	459c      	cmp	ip, r3
 800988e:	d8f9      	bhi.n	8009884 <__lshift+0xc0>
 8009890:	e7ea      	b.n	8009868 <__lshift+0xa4>
 8009892:	bf00      	nop
 8009894:	0800b329 	.word	0x0800b329
 8009898:	0800b33a 	.word	0x0800b33a

0800989c <__mcmp>:
 800989c:	690a      	ldr	r2, [r1, #16]
 800989e:	4603      	mov	r3, r0
 80098a0:	6900      	ldr	r0, [r0, #16]
 80098a2:	1a80      	subs	r0, r0, r2
 80098a4:	b530      	push	{r4, r5, lr}
 80098a6:	d10e      	bne.n	80098c6 <__mcmp+0x2a>
 80098a8:	3314      	adds	r3, #20
 80098aa:	3114      	adds	r1, #20
 80098ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80098b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80098b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80098b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80098bc:	4295      	cmp	r5, r2
 80098be:	d003      	beq.n	80098c8 <__mcmp+0x2c>
 80098c0:	d205      	bcs.n	80098ce <__mcmp+0x32>
 80098c2:	f04f 30ff 	mov.w	r0, #4294967295
 80098c6:	bd30      	pop	{r4, r5, pc}
 80098c8:	42a3      	cmp	r3, r4
 80098ca:	d3f3      	bcc.n	80098b4 <__mcmp+0x18>
 80098cc:	e7fb      	b.n	80098c6 <__mcmp+0x2a>
 80098ce:	2001      	movs	r0, #1
 80098d0:	e7f9      	b.n	80098c6 <__mcmp+0x2a>
	...

080098d4 <__mdiff>:
 80098d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d8:	4689      	mov	r9, r1
 80098da:	4606      	mov	r6, r0
 80098dc:	4611      	mov	r1, r2
 80098de:	4648      	mov	r0, r9
 80098e0:	4614      	mov	r4, r2
 80098e2:	f7ff ffdb 	bl	800989c <__mcmp>
 80098e6:	1e05      	subs	r5, r0, #0
 80098e8:	d112      	bne.n	8009910 <__mdiff+0x3c>
 80098ea:	4629      	mov	r1, r5
 80098ec:	4630      	mov	r0, r6
 80098ee:	f7ff fd5b 	bl	80093a8 <_Balloc>
 80098f2:	4602      	mov	r2, r0
 80098f4:	b928      	cbnz	r0, 8009902 <__mdiff+0x2e>
 80098f6:	4b3f      	ldr	r3, [pc, #252]	@ (80099f4 <__mdiff+0x120>)
 80098f8:	f240 2137 	movw	r1, #567	@ 0x237
 80098fc:	483e      	ldr	r0, [pc, #248]	@ (80099f8 <__mdiff+0x124>)
 80098fe:	f000 fcd7 	bl	800a2b0 <__assert_func>
 8009902:	2301      	movs	r3, #1
 8009904:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009908:	4610      	mov	r0, r2
 800990a:	b003      	add	sp, #12
 800990c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009910:	bfbc      	itt	lt
 8009912:	464b      	movlt	r3, r9
 8009914:	46a1      	movlt	r9, r4
 8009916:	4630      	mov	r0, r6
 8009918:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800991c:	bfba      	itte	lt
 800991e:	461c      	movlt	r4, r3
 8009920:	2501      	movlt	r5, #1
 8009922:	2500      	movge	r5, #0
 8009924:	f7ff fd40 	bl	80093a8 <_Balloc>
 8009928:	4602      	mov	r2, r0
 800992a:	b918      	cbnz	r0, 8009934 <__mdiff+0x60>
 800992c:	4b31      	ldr	r3, [pc, #196]	@ (80099f4 <__mdiff+0x120>)
 800992e:	f240 2145 	movw	r1, #581	@ 0x245
 8009932:	e7e3      	b.n	80098fc <__mdiff+0x28>
 8009934:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009938:	6926      	ldr	r6, [r4, #16]
 800993a:	60c5      	str	r5, [r0, #12]
 800993c:	f109 0310 	add.w	r3, r9, #16
 8009940:	f109 0514 	add.w	r5, r9, #20
 8009944:	f104 0e14 	add.w	lr, r4, #20
 8009948:	f100 0b14 	add.w	fp, r0, #20
 800994c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009950:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009954:	9301      	str	r3, [sp, #4]
 8009956:	46d9      	mov	r9, fp
 8009958:	f04f 0c00 	mov.w	ip, #0
 800995c:	9b01      	ldr	r3, [sp, #4]
 800995e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009962:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009966:	9301      	str	r3, [sp, #4]
 8009968:	fa1f f38a 	uxth.w	r3, sl
 800996c:	4619      	mov	r1, r3
 800996e:	b283      	uxth	r3, r0
 8009970:	1acb      	subs	r3, r1, r3
 8009972:	0c00      	lsrs	r0, r0, #16
 8009974:	4463      	add	r3, ip
 8009976:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800997a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800997e:	b29b      	uxth	r3, r3
 8009980:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009984:	4576      	cmp	r6, lr
 8009986:	f849 3b04 	str.w	r3, [r9], #4
 800998a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800998e:	d8e5      	bhi.n	800995c <__mdiff+0x88>
 8009990:	1b33      	subs	r3, r6, r4
 8009992:	3b15      	subs	r3, #21
 8009994:	f023 0303 	bic.w	r3, r3, #3
 8009998:	3415      	adds	r4, #21
 800999a:	3304      	adds	r3, #4
 800999c:	42a6      	cmp	r6, r4
 800999e:	bf38      	it	cc
 80099a0:	2304      	movcc	r3, #4
 80099a2:	441d      	add	r5, r3
 80099a4:	445b      	add	r3, fp
 80099a6:	461e      	mov	r6, r3
 80099a8:	462c      	mov	r4, r5
 80099aa:	4544      	cmp	r4, r8
 80099ac:	d30e      	bcc.n	80099cc <__mdiff+0xf8>
 80099ae:	f108 0103 	add.w	r1, r8, #3
 80099b2:	1b49      	subs	r1, r1, r5
 80099b4:	f021 0103 	bic.w	r1, r1, #3
 80099b8:	3d03      	subs	r5, #3
 80099ba:	45a8      	cmp	r8, r5
 80099bc:	bf38      	it	cc
 80099be:	2100      	movcc	r1, #0
 80099c0:	440b      	add	r3, r1
 80099c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099c6:	b191      	cbz	r1, 80099ee <__mdiff+0x11a>
 80099c8:	6117      	str	r7, [r2, #16]
 80099ca:	e79d      	b.n	8009908 <__mdiff+0x34>
 80099cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80099d0:	46e6      	mov	lr, ip
 80099d2:	0c08      	lsrs	r0, r1, #16
 80099d4:	fa1c fc81 	uxtah	ip, ip, r1
 80099d8:	4471      	add	r1, lr
 80099da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80099de:	b289      	uxth	r1, r1
 80099e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80099e4:	f846 1b04 	str.w	r1, [r6], #4
 80099e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099ec:	e7dd      	b.n	80099aa <__mdiff+0xd6>
 80099ee:	3f01      	subs	r7, #1
 80099f0:	e7e7      	b.n	80099c2 <__mdiff+0xee>
 80099f2:	bf00      	nop
 80099f4:	0800b329 	.word	0x0800b329
 80099f8:	0800b33a 	.word	0x0800b33a

080099fc <__d2b>:
 80099fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a00:	460f      	mov	r7, r1
 8009a02:	2101      	movs	r1, #1
 8009a04:	ec59 8b10 	vmov	r8, r9, d0
 8009a08:	4616      	mov	r6, r2
 8009a0a:	f7ff fccd 	bl	80093a8 <_Balloc>
 8009a0e:	4604      	mov	r4, r0
 8009a10:	b930      	cbnz	r0, 8009a20 <__d2b+0x24>
 8009a12:	4602      	mov	r2, r0
 8009a14:	4b23      	ldr	r3, [pc, #140]	@ (8009aa4 <__d2b+0xa8>)
 8009a16:	4824      	ldr	r0, [pc, #144]	@ (8009aa8 <__d2b+0xac>)
 8009a18:	f240 310f 	movw	r1, #783	@ 0x30f
 8009a1c:	f000 fc48 	bl	800a2b0 <__assert_func>
 8009a20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a28:	b10d      	cbz	r5, 8009a2e <__d2b+0x32>
 8009a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a2e:	9301      	str	r3, [sp, #4]
 8009a30:	f1b8 0300 	subs.w	r3, r8, #0
 8009a34:	d023      	beq.n	8009a7e <__d2b+0x82>
 8009a36:	4668      	mov	r0, sp
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	f7ff fd7c 	bl	8009536 <__lo0bits>
 8009a3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a42:	b1d0      	cbz	r0, 8009a7a <__d2b+0x7e>
 8009a44:	f1c0 0320 	rsb	r3, r0, #32
 8009a48:	fa02 f303 	lsl.w	r3, r2, r3
 8009a4c:	430b      	orrs	r3, r1
 8009a4e:	40c2      	lsrs	r2, r0
 8009a50:	6163      	str	r3, [r4, #20]
 8009a52:	9201      	str	r2, [sp, #4]
 8009a54:	9b01      	ldr	r3, [sp, #4]
 8009a56:	61a3      	str	r3, [r4, #24]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	bf0c      	ite	eq
 8009a5c:	2201      	moveq	r2, #1
 8009a5e:	2202      	movne	r2, #2
 8009a60:	6122      	str	r2, [r4, #16]
 8009a62:	b1a5      	cbz	r5, 8009a8e <__d2b+0x92>
 8009a64:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009a68:	4405      	add	r5, r0
 8009a6a:	603d      	str	r5, [r7, #0]
 8009a6c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009a70:	6030      	str	r0, [r6, #0]
 8009a72:	4620      	mov	r0, r4
 8009a74:	b003      	add	sp, #12
 8009a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a7a:	6161      	str	r1, [r4, #20]
 8009a7c:	e7ea      	b.n	8009a54 <__d2b+0x58>
 8009a7e:	a801      	add	r0, sp, #4
 8009a80:	f7ff fd59 	bl	8009536 <__lo0bits>
 8009a84:	9b01      	ldr	r3, [sp, #4]
 8009a86:	6163      	str	r3, [r4, #20]
 8009a88:	3020      	adds	r0, #32
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	e7e8      	b.n	8009a60 <__d2b+0x64>
 8009a8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009a96:	6038      	str	r0, [r7, #0]
 8009a98:	6918      	ldr	r0, [r3, #16]
 8009a9a:	f7ff fd2d 	bl	80094f8 <__hi0bits>
 8009a9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009aa2:	e7e5      	b.n	8009a70 <__d2b+0x74>
 8009aa4:	0800b329 	.word	0x0800b329
 8009aa8:	0800b33a 	.word	0x0800b33a

08009aac <__ssputs_r>:
 8009aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ab0:	688e      	ldr	r6, [r1, #8]
 8009ab2:	461f      	mov	r7, r3
 8009ab4:	42be      	cmp	r6, r7
 8009ab6:	680b      	ldr	r3, [r1, #0]
 8009ab8:	4682      	mov	sl, r0
 8009aba:	460c      	mov	r4, r1
 8009abc:	4690      	mov	r8, r2
 8009abe:	d82d      	bhi.n	8009b1c <__ssputs_r+0x70>
 8009ac0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ac4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ac8:	d026      	beq.n	8009b18 <__ssputs_r+0x6c>
 8009aca:	6965      	ldr	r5, [r4, #20]
 8009acc:	6909      	ldr	r1, [r1, #16]
 8009ace:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ad2:	eba3 0901 	sub.w	r9, r3, r1
 8009ad6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ada:	1c7b      	adds	r3, r7, #1
 8009adc:	444b      	add	r3, r9
 8009ade:	106d      	asrs	r5, r5, #1
 8009ae0:	429d      	cmp	r5, r3
 8009ae2:	bf38      	it	cc
 8009ae4:	461d      	movcc	r5, r3
 8009ae6:	0553      	lsls	r3, r2, #21
 8009ae8:	d527      	bpl.n	8009b3a <__ssputs_r+0x8e>
 8009aea:	4629      	mov	r1, r5
 8009aec:	f7ff fbd0 	bl	8009290 <_malloc_r>
 8009af0:	4606      	mov	r6, r0
 8009af2:	b360      	cbz	r0, 8009b4e <__ssputs_r+0xa2>
 8009af4:	6921      	ldr	r1, [r4, #16]
 8009af6:	464a      	mov	r2, r9
 8009af8:	f000 fbcc 	bl	800a294 <memcpy>
 8009afc:	89a3      	ldrh	r3, [r4, #12]
 8009afe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b06:	81a3      	strh	r3, [r4, #12]
 8009b08:	6126      	str	r6, [r4, #16]
 8009b0a:	6165      	str	r5, [r4, #20]
 8009b0c:	444e      	add	r6, r9
 8009b0e:	eba5 0509 	sub.w	r5, r5, r9
 8009b12:	6026      	str	r6, [r4, #0]
 8009b14:	60a5      	str	r5, [r4, #8]
 8009b16:	463e      	mov	r6, r7
 8009b18:	42be      	cmp	r6, r7
 8009b1a:	d900      	bls.n	8009b1e <__ssputs_r+0x72>
 8009b1c:	463e      	mov	r6, r7
 8009b1e:	6820      	ldr	r0, [r4, #0]
 8009b20:	4632      	mov	r2, r6
 8009b22:	4641      	mov	r1, r8
 8009b24:	f000 fb6a 	bl	800a1fc <memmove>
 8009b28:	68a3      	ldr	r3, [r4, #8]
 8009b2a:	1b9b      	subs	r3, r3, r6
 8009b2c:	60a3      	str	r3, [r4, #8]
 8009b2e:	6823      	ldr	r3, [r4, #0]
 8009b30:	4433      	add	r3, r6
 8009b32:	6023      	str	r3, [r4, #0]
 8009b34:	2000      	movs	r0, #0
 8009b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b3a:	462a      	mov	r2, r5
 8009b3c:	f000 fbfc 	bl	800a338 <_realloc_r>
 8009b40:	4606      	mov	r6, r0
 8009b42:	2800      	cmp	r0, #0
 8009b44:	d1e0      	bne.n	8009b08 <__ssputs_r+0x5c>
 8009b46:	6921      	ldr	r1, [r4, #16]
 8009b48:	4650      	mov	r0, sl
 8009b4a:	f7ff fb2d 	bl	80091a8 <_free_r>
 8009b4e:	230c      	movs	r3, #12
 8009b50:	f8ca 3000 	str.w	r3, [sl]
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b5a:	81a3      	strh	r3, [r4, #12]
 8009b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b60:	e7e9      	b.n	8009b36 <__ssputs_r+0x8a>
	...

08009b64 <_svfiprintf_r>:
 8009b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b68:	4698      	mov	r8, r3
 8009b6a:	898b      	ldrh	r3, [r1, #12]
 8009b6c:	061b      	lsls	r3, r3, #24
 8009b6e:	b09d      	sub	sp, #116	@ 0x74
 8009b70:	4607      	mov	r7, r0
 8009b72:	460d      	mov	r5, r1
 8009b74:	4614      	mov	r4, r2
 8009b76:	d510      	bpl.n	8009b9a <_svfiprintf_r+0x36>
 8009b78:	690b      	ldr	r3, [r1, #16]
 8009b7a:	b973      	cbnz	r3, 8009b9a <_svfiprintf_r+0x36>
 8009b7c:	2140      	movs	r1, #64	@ 0x40
 8009b7e:	f7ff fb87 	bl	8009290 <_malloc_r>
 8009b82:	6028      	str	r0, [r5, #0]
 8009b84:	6128      	str	r0, [r5, #16]
 8009b86:	b930      	cbnz	r0, 8009b96 <_svfiprintf_r+0x32>
 8009b88:	230c      	movs	r3, #12
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b90:	b01d      	add	sp, #116	@ 0x74
 8009b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b96:	2340      	movs	r3, #64	@ 0x40
 8009b98:	616b      	str	r3, [r5, #20]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b9e:	2320      	movs	r3, #32
 8009ba0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ba4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ba8:	2330      	movs	r3, #48	@ 0x30
 8009baa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009d48 <_svfiprintf_r+0x1e4>
 8009bae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bb2:	f04f 0901 	mov.w	r9, #1
 8009bb6:	4623      	mov	r3, r4
 8009bb8:	469a      	mov	sl, r3
 8009bba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bbe:	b10a      	cbz	r2, 8009bc4 <_svfiprintf_r+0x60>
 8009bc0:	2a25      	cmp	r2, #37	@ 0x25
 8009bc2:	d1f9      	bne.n	8009bb8 <_svfiprintf_r+0x54>
 8009bc4:	ebba 0b04 	subs.w	fp, sl, r4
 8009bc8:	d00b      	beq.n	8009be2 <_svfiprintf_r+0x7e>
 8009bca:	465b      	mov	r3, fp
 8009bcc:	4622      	mov	r2, r4
 8009bce:	4629      	mov	r1, r5
 8009bd0:	4638      	mov	r0, r7
 8009bd2:	f7ff ff6b 	bl	8009aac <__ssputs_r>
 8009bd6:	3001      	adds	r0, #1
 8009bd8:	f000 80a7 	beq.w	8009d2a <_svfiprintf_r+0x1c6>
 8009bdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bde:	445a      	add	r2, fp
 8009be0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009be2:	f89a 3000 	ldrb.w	r3, [sl]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f000 809f 	beq.w	8009d2a <_svfiprintf_r+0x1c6>
 8009bec:	2300      	movs	r3, #0
 8009bee:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bf6:	f10a 0a01 	add.w	sl, sl, #1
 8009bfa:	9304      	str	r3, [sp, #16]
 8009bfc:	9307      	str	r3, [sp, #28]
 8009bfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c02:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c04:	4654      	mov	r4, sl
 8009c06:	2205      	movs	r2, #5
 8009c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c0c:	484e      	ldr	r0, [pc, #312]	@ (8009d48 <_svfiprintf_r+0x1e4>)
 8009c0e:	f7f6 fadf 	bl	80001d0 <memchr>
 8009c12:	9a04      	ldr	r2, [sp, #16]
 8009c14:	b9d8      	cbnz	r0, 8009c4e <_svfiprintf_r+0xea>
 8009c16:	06d0      	lsls	r0, r2, #27
 8009c18:	bf44      	itt	mi
 8009c1a:	2320      	movmi	r3, #32
 8009c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c20:	0711      	lsls	r1, r2, #28
 8009c22:	bf44      	itt	mi
 8009c24:	232b      	movmi	r3, #43	@ 0x2b
 8009c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c30:	d015      	beq.n	8009c5e <_svfiprintf_r+0xfa>
 8009c32:	9a07      	ldr	r2, [sp, #28]
 8009c34:	4654      	mov	r4, sl
 8009c36:	2000      	movs	r0, #0
 8009c38:	f04f 0c0a 	mov.w	ip, #10
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c42:	3b30      	subs	r3, #48	@ 0x30
 8009c44:	2b09      	cmp	r3, #9
 8009c46:	d94b      	bls.n	8009ce0 <_svfiprintf_r+0x17c>
 8009c48:	b1b0      	cbz	r0, 8009c78 <_svfiprintf_r+0x114>
 8009c4a:	9207      	str	r2, [sp, #28]
 8009c4c:	e014      	b.n	8009c78 <_svfiprintf_r+0x114>
 8009c4e:	eba0 0308 	sub.w	r3, r0, r8
 8009c52:	fa09 f303 	lsl.w	r3, r9, r3
 8009c56:	4313      	orrs	r3, r2
 8009c58:	9304      	str	r3, [sp, #16]
 8009c5a:	46a2      	mov	sl, r4
 8009c5c:	e7d2      	b.n	8009c04 <_svfiprintf_r+0xa0>
 8009c5e:	9b03      	ldr	r3, [sp, #12]
 8009c60:	1d19      	adds	r1, r3, #4
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	9103      	str	r1, [sp, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	bfbb      	ittet	lt
 8009c6a:	425b      	neglt	r3, r3
 8009c6c:	f042 0202 	orrlt.w	r2, r2, #2
 8009c70:	9307      	strge	r3, [sp, #28]
 8009c72:	9307      	strlt	r3, [sp, #28]
 8009c74:	bfb8      	it	lt
 8009c76:	9204      	strlt	r2, [sp, #16]
 8009c78:	7823      	ldrb	r3, [r4, #0]
 8009c7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c7c:	d10a      	bne.n	8009c94 <_svfiprintf_r+0x130>
 8009c7e:	7863      	ldrb	r3, [r4, #1]
 8009c80:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c82:	d132      	bne.n	8009cea <_svfiprintf_r+0x186>
 8009c84:	9b03      	ldr	r3, [sp, #12]
 8009c86:	1d1a      	adds	r2, r3, #4
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	9203      	str	r2, [sp, #12]
 8009c8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c90:	3402      	adds	r4, #2
 8009c92:	9305      	str	r3, [sp, #20]
 8009c94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009d58 <_svfiprintf_r+0x1f4>
 8009c98:	7821      	ldrb	r1, [r4, #0]
 8009c9a:	2203      	movs	r2, #3
 8009c9c:	4650      	mov	r0, sl
 8009c9e:	f7f6 fa97 	bl	80001d0 <memchr>
 8009ca2:	b138      	cbz	r0, 8009cb4 <_svfiprintf_r+0x150>
 8009ca4:	9b04      	ldr	r3, [sp, #16]
 8009ca6:	eba0 000a 	sub.w	r0, r0, sl
 8009caa:	2240      	movs	r2, #64	@ 0x40
 8009cac:	4082      	lsls	r2, r0
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	3401      	adds	r4, #1
 8009cb2:	9304      	str	r3, [sp, #16]
 8009cb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb8:	4824      	ldr	r0, [pc, #144]	@ (8009d4c <_svfiprintf_r+0x1e8>)
 8009cba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cbe:	2206      	movs	r2, #6
 8009cc0:	f7f6 fa86 	bl	80001d0 <memchr>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d036      	beq.n	8009d36 <_svfiprintf_r+0x1d2>
 8009cc8:	4b21      	ldr	r3, [pc, #132]	@ (8009d50 <_svfiprintf_r+0x1ec>)
 8009cca:	bb1b      	cbnz	r3, 8009d14 <_svfiprintf_r+0x1b0>
 8009ccc:	9b03      	ldr	r3, [sp, #12]
 8009cce:	3307      	adds	r3, #7
 8009cd0:	f023 0307 	bic.w	r3, r3, #7
 8009cd4:	3308      	adds	r3, #8
 8009cd6:	9303      	str	r3, [sp, #12]
 8009cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cda:	4433      	add	r3, r6
 8009cdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cde:	e76a      	b.n	8009bb6 <_svfiprintf_r+0x52>
 8009ce0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ce4:	460c      	mov	r4, r1
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	e7a8      	b.n	8009c3c <_svfiprintf_r+0xd8>
 8009cea:	2300      	movs	r3, #0
 8009cec:	3401      	adds	r4, #1
 8009cee:	9305      	str	r3, [sp, #20]
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	f04f 0c0a 	mov.w	ip, #10
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cfc:	3a30      	subs	r2, #48	@ 0x30
 8009cfe:	2a09      	cmp	r2, #9
 8009d00:	d903      	bls.n	8009d0a <_svfiprintf_r+0x1a6>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d0c6      	beq.n	8009c94 <_svfiprintf_r+0x130>
 8009d06:	9105      	str	r1, [sp, #20]
 8009d08:	e7c4      	b.n	8009c94 <_svfiprintf_r+0x130>
 8009d0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d0e:	4604      	mov	r4, r0
 8009d10:	2301      	movs	r3, #1
 8009d12:	e7f0      	b.n	8009cf6 <_svfiprintf_r+0x192>
 8009d14:	ab03      	add	r3, sp, #12
 8009d16:	9300      	str	r3, [sp, #0]
 8009d18:	462a      	mov	r2, r5
 8009d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8009d54 <_svfiprintf_r+0x1f0>)
 8009d1c:	a904      	add	r1, sp, #16
 8009d1e:	4638      	mov	r0, r7
 8009d20:	f7fd fd80 	bl	8007824 <_printf_float>
 8009d24:	1c42      	adds	r2, r0, #1
 8009d26:	4606      	mov	r6, r0
 8009d28:	d1d6      	bne.n	8009cd8 <_svfiprintf_r+0x174>
 8009d2a:	89ab      	ldrh	r3, [r5, #12]
 8009d2c:	065b      	lsls	r3, r3, #25
 8009d2e:	f53f af2d 	bmi.w	8009b8c <_svfiprintf_r+0x28>
 8009d32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d34:	e72c      	b.n	8009b90 <_svfiprintf_r+0x2c>
 8009d36:	ab03      	add	r3, sp, #12
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	462a      	mov	r2, r5
 8009d3c:	4b05      	ldr	r3, [pc, #20]	@ (8009d54 <_svfiprintf_r+0x1f0>)
 8009d3e:	a904      	add	r1, sp, #16
 8009d40:	4638      	mov	r0, r7
 8009d42:	f7fe f807 	bl	8007d54 <_printf_i>
 8009d46:	e7ed      	b.n	8009d24 <_svfiprintf_r+0x1c0>
 8009d48:	0800b490 	.word	0x0800b490
 8009d4c:	0800b49a 	.word	0x0800b49a
 8009d50:	08007825 	.word	0x08007825
 8009d54:	08009aad 	.word	0x08009aad
 8009d58:	0800b496 	.word	0x0800b496

08009d5c <__sfputc_r>:
 8009d5c:	6893      	ldr	r3, [r2, #8]
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	b410      	push	{r4}
 8009d64:	6093      	str	r3, [r2, #8]
 8009d66:	da08      	bge.n	8009d7a <__sfputc_r+0x1e>
 8009d68:	6994      	ldr	r4, [r2, #24]
 8009d6a:	42a3      	cmp	r3, r4
 8009d6c:	db01      	blt.n	8009d72 <__sfputc_r+0x16>
 8009d6e:	290a      	cmp	r1, #10
 8009d70:	d103      	bne.n	8009d7a <__sfputc_r+0x1e>
 8009d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d76:	f7fe bab6 	b.w	80082e6 <__swbuf_r>
 8009d7a:	6813      	ldr	r3, [r2, #0]
 8009d7c:	1c58      	adds	r0, r3, #1
 8009d7e:	6010      	str	r0, [r2, #0]
 8009d80:	7019      	strb	r1, [r3, #0]
 8009d82:	4608      	mov	r0, r1
 8009d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <__sfputs_r>:
 8009d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	460f      	mov	r7, r1
 8009d90:	4614      	mov	r4, r2
 8009d92:	18d5      	adds	r5, r2, r3
 8009d94:	42ac      	cmp	r4, r5
 8009d96:	d101      	bne.n	8009d9c <__sfputs_r+0x12>
 8009d98:	2000      	movs	r0, #0
 8009d9a:	e007      	b.n	8009dac <__sfputs_r+0x22>
 8009d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da0:	463a      	mov	r2, r7
 8009da2:	4630      	mov	r0, r6
 8009da4:	f7ff ffda 	bl	8009d5c <__sfputc_r>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d1f3      	bne.n	8009d94 <__sfputs_r+0xa>
 8009dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009db0 <_vfiprintf_r>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	460d      	mov	r5, r1
 8009db6:	b09d      	sub	sp, #116	@ 0x74
 8009db8:	4614      	mov	r4, r2
 8009dba:	4698      	mov	r8, r3
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	b118      	cbz	r0, 8009dc8 <_vfiprintf_r+0x18>
 8009dc0:	6a03      	ldr	r3, [r0, #32]
 8009dc2:	b90b      	cbnz	r3, 8009dc8 <_vfiprintf_r+0x18>
 8009dc4:	f7fe f972 	bl	80080ac <__sinit>
 8009dc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dca:	07d9      	lsls	r1, r3, #31
 8009dcc:	d405      	bmi.n	8009dda <_vfiprintf_r+0x2a>
 8009dce:	89ab      	ldrh	r3, [r5, #12]
 8009dd0:	059a      	lsls	r2, r3, #22
 8009dd2:	d402      	bmi.n	8009dda <_vfiprintf_r+0x2a>
 8009dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dd6:	f7fe fb98 	bl	800850a <__retarget_lock_acquire_recursive>
 8009dda:	89ab      	ldrh	r3, [r5, #12]
 8009ddc:	071b      	lsls	r3, r3, #28
 8009dde:	d501      	bpl.n	8009de4 <_vfiprintf_r+0x34>
 8009de0:	692b      	ldr	r3, [r5, #16]
 8009de2:	b99b      	cbnz	r3, 8009e0c <_vfiprintf_r+0x5c>
 8009de4:	4629      	mov	r1, r5
 8009de6:	4630      	mov	r0, r6
 8009de8:	f7fe fabc 	bl	8008364 <__swsetup_r>
 8009dec:	b170      	cbz	r0, 8009e0c <_vfiprintf_r+0x5c>
 8009dee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009df0:	07dc      	lsls	r4, r3, #31
 8009df2:	d504      	bpl.n	8009dfe <_vfiprintf_r+0x4e>
 8009df4:	f04f 30ff 	mov.w	r0, #4294967295
 8009df8:	b01d      	add	sp, #116	@ 0x74
 8009dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dfe:	89ab      	ldrh	r3, [r5, #12]
 8009e00:	0598      	lsls	r0, r3, #22
 8009e02:	d4f7      	bmi.n	8009df4 <_vfiprintf_r+0x44>
 8009e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e06:	f7fe fb81 	bl	800850c <__retarget_lock_release_recursive>
 8009e0a:	e7f3      	b.n	8009df4 <_vfiprintf_r+0x44>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e10:	2320      	movs	r3, #32
 8009e12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e16:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e1a:	2330      	movs	r3, #48	@ 0x30
 8009e1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009fcc <_vfiprintf_r+0x21c>
 8009e20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e24:	f04f 0901 	mov.w	r9, #1
 8009e28:	4623      	mov	r3, r4
 8009e2a:	469a      	mov	sl, r3
 8009e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e30:	b10a      	cbz	r2, 8009e36 <_vfiprintf_r+0x86>
 8009e32:	2a25      	cmp	r2, #37	@ 0x25
 8009e34:	d1f9      	bne.n	8009e2a <_vfiprintf_r+0x7a>
 8009e36:	ebba 0b04 	subs.w	fp, sl, r4
 8009e3a:	d00b      	beq.n	8009e54 <_vfiprintf_r+0xa4>
 8009e3c:	465b      	mov	r3, fp
 8009e3e:	4622      	mov	r2, r4
 8009e40:	4629      	mov	r1, r5
 8009e42:	4630      	mov	r0, r6
 8009e44:	f7ff ffa1 	bl	8009d8a <__sfputs_r>
 8009e48:	3001      	adds	r0, #1
 8009e4a:	f000 80a7 	beq.w	8009f9c <_vfiprintf_r+0x1ec>
 8009e4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e50:	445a      	add	r2, fp
 8009e52:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e54:	f89a 3000 	ldrb.w	r3, [sl]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f000 809f 	beq.w	8009f9c <_vfiprintf_r+0x1ec>
 8009e5e:	2300      	movs	r3, #0
 8009e60:	f04f 32ff 	mov.w	r2, #4294967295
 8009e64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e68:	f10a 0a01 	add.w	sl, sl, #1
 8009e6c:	9304      	str	r3, [sp, #16]
 8009e6e:	9307      	str	r3, [sp, #28]
 8009e70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e74:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e76:	4654      	mov	r4, sl
 8009e78:	2205      	movs	r2, #5
 8009e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e7e:	4853      	ldr	r0, [pc, #332]	@ (8009fcc <_vfiprintf_r+0x21c>)
 8009e80:	f7f6 f9a6 	bl	80001d0 <memchr>
 8009e84:	9a04      	ldr	r2, [sp, #16]
 8009e86:	b9d8      	cbnz	r0, 8009ec0 <_vfiprintf_r+0x110>
 8009e88:	06d1      	lsls	r1, r2, #27
 8009e8a:	bf44      	itt	mi
 8009e8c:	2320      	movmi	r3, #32
 8009e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e92:	0713      	lsls	r3, r2, #28
 8009e94:	bf44      	itt	mi
 8009e96:	232b      	movmi	r3, #43	@ 0x2b
 8009e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8009ea0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ea2:	d015      	beq.n	8009ed0 <_vfiprintf_r+0x120>
 8009ea4:	9a07      	ldr	r2, [sp, #28]
 8009ea6:	4654      	mov	r4, sl
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	f04f 0c0a 	mov.w	ip, #10
 8009eae:	4621      	mov	r1, r4
 8009eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eb4:	3b30      	subs	r3, #48	@ 0x30
 8009eb6:	2b09      	cmp	r3, #9
 8009eb8:	d94b      	bls.n	8009f52 <_vfiprintf_r+0x1a2>
 8009eba:	b1b0      	cbz	r0, 8009eea <_vfiprintf_r+0x13a>
 8009ebc:	9207      	str	r2, [sp, #28]
 8009ebe:	e014      	b.n	8009eea <_vfiprintf_r+0x13a>
 8009ec0:	eba0 0308 	sub.w	r3, r0, r8
 8009ec4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	9304      	str	r3, [sp, #16]
 8009ecc:	46a2      	mov	sl, r4
 8009ece:	e7d2      	b.n	8009e76 <_vfiprintf_r+0xc6>
 8009ed0:	9b03      	ldr	r3, [sp, #12]
 8009ed2:	1d19      	adds	r1, r3, #4
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	9103      	str	r1, [sp, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	bfbb      	ittet	lt
 8009edc:	425b      	neglt	r3, r3
 8009ede:	f042 0202 	orrlt.w	r2, r2, #2
 8009ee2:	9307      	strge	r3, [sp, #28]
 8009ee4:	9307      	strlt	r3, [sp, #28]
 8009ee6:	bfb8      	it	lt
 8009ee8:	9204      	strlt	r2, [sp, #16]
 8009eea:	7823      	ldrb	r3, [r4, #0]
 8009eec:	2b2e      	cmp	r3, #46	@ 0x2e
 8009eee:	d10a      	bne.n	8009f06 <_vfiprintf_r+0x156>
 8009ef0:	7863      	ldrb	r3, [r4, #1]
 8009ef2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ef4:	d132      	bne.n	8009f5c <_vfiprintf_r+0x1ac>
 8009ef6:	9b03      	ldr	r3, [sp, #12]
 8009ef8:	1d1a      	adds	r2, r3, #4
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	9203      	str	r2, [sp, #12]
 8009efe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f02:	3402      	adds	r4, #2
 8009f04:	9305      	str	r3, [sp, #20]
 8009f06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009fdc <_vfiprintf_r+0x22c>
 8009f0a:	7821      	ldrb	r1, [r4, #0]
 8009f0c:	2203      	movs	r2, #3
 8009f0e:	4650      	mov	r0, sl
 8009f10:	f7f6 f95e 	bl	80001d0 <memchr>
 8009f14:	b138      	cbz	r0, 8009f26 <_vfiprintf_r+0x176>
 8009f16:	9b04      	ldr	r3, [sp, #16]
 8009f18:	eba0 000a 	sub.w	r0, r0, sl
 8009f1c:	2240      	movs	r2, #64	@ 0x40
 8009f1e:	4082      	lsls	r2, r0
 8009f20:	4313      	orrs	r3, r2
 8009f22:	3401      	adds	r4, #1
 8009f24:	9304      	str	r3, [sp, #16]
 8009f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f2a:	4829      	ldr	r0, [pc, #164]	@ (8009fd0 <_vfiprintf_r+0x220>)
 8009f2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f30:	2206      	movs	r2, #6
 8009f32:	f7f6 f94d 	bl	80001d0 <memchr>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d03f      	beq.n	8009fba <_vfiprintf_r+0x20a>
 8009f3a:	4b26      	ldr	r3, [pc, #152]	@ (8009fd4 <_vfiprintf_r+0x224>)
 8009f3c:	bb1b      	cbnz	r3, 8009f86 <_vfiprintf_r+0x1d6>
 8009f3e:	9b03      	ldr	r3, [sp, #12]
 8009f40:	3307      	adds	r3, #7
 8009f42:	f023 0307 	bic.w	r3, r3, #7
 8009f46:	3308      	adds	r3, #8
 8009f48:	9303      	str	r3, [sp, #12]
 8009f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f4c:	443b      	add	r3, r7
 8009f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f50:	e76a      	b.n	8009e28 <_vfiprintf_r+0x78>
 8009f52:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f56:	460c      	mov	r4, r1
 8009f58:	2001      	movs	r0, #1
 8009f5a:	e7a8      	b.n	8009eae <_vfiprintf_r+0xfe>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	3401      	adds	r4, #1
 8009f60:	9305      	str	r3, [sp, #20]
 8009f62:	4619      	mov	r1, r3
 8009f64:	f04f 0c0a 	mov.w	ip, #10
 8009f68:	4620      	mov	r0, r4
 8009f6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f6e:	3a30      	subs	r2, #48	@ 0x30
 8009f70:	2a09      	cmp	r2, #9
 8009f72:	d903      	bls.n	8009f7c <_vfiprintf_r+0x1cc>
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d0c6      	beq.n	8009f06 <_vfiprintf_r+0x156>
 8009f78:	9105      	str	r1, [sp, #20]
 8009f7a:	e7c4      	b.n	8009f06 <_vfiprintf_r+0x156>
 8009f7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f80:	4604      	mov	r4, r0
 8009f82:	2301      	movs	r3, #1
 8009f84:	e7f0      	b.n	8009f68 <_vfiprintf_r+0x1b8>
 8009f86:	ab03      	add	r3, sp, #12
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	462a      	mov	r2, r5
 8009f8c:	4b12      	ldr	r3, [pc, #72]	@ (8009fd8 <_vfiprintf_r+0x228>)
 8009f8e:	a904      	add	r1, sp, #16
 8009f90:	4630      	mov	r0, r6
 8009f92:	f7fd fc47 	bl	8007824 <_printf_float>
 8009f96:	4607      	mov	r7, r0
 8009f98:	1c78      	adds	r0, r7, #1
 8009f9a:	d1d6      	bne.n	8009f4a <_vfiprintf_r+0x19a>
 8009f9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f9e:	07d9      	lsls	r1, r3, #31
 8009fa0:	d405      	bmi.n	8009fae <_vfiprintf_r+0x1fe>
 8009fa2:	89ab      	ldrh	r3, [r5, #12]
 8009fa4:	059a      	lsls	r2, r3, #22
 8009fa6:	d402      	bmi.n	8009fae <_vfiprintf_r+0x1fe>
 8009fa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009faa:	f7fe faaf 	bl	800850c <__retarget_lock_release_recursive>
 8009fae:	89ab      	ldrh	r3, [r5, #12]
 8009fb0:	065b      	lsls	r3, r3, #25
 8009fb2:	f53f af1f 	bmi.w	8009df4 <_vfiprintf_r+0x44>
 8009fb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fb8:	e71e      	b.n	8009df8 <_vfiprintf_r+0x48>
 8009fba:	ab03      	add	r3, sp, #12
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	462a      	mov	r2, r5
 8009fc0:	4b05      	ldr	r3, [pc, #20]	@ (8009fd8 <_vfiprintf_r+0x228>)
 8009fc2:	a904      	add	r1, sp, #16
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	f7fd fec5 	bl	8007d54 <_printf_i>
 8009fca:	e7e4      	b.n	8009f96 <_vfiprintf_r+0x1e6>
 8009fcc:	0800b490 	.word	0x0800b490
 8009fd0:	0800b49a 	.word	0x0800b49a
 8009fd4:	08007825 	.word	0x08007825
 8009fd8:	08009d8b 	.word	0x08009d8b
 8009fdc:	0800b496 	.word	0x0800b496

08009fe0 <__sflush_r>:
 8009fe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe8:	0716      	lsls	r6, r2, #28
 8009fea:	4605      	mov	r5, r0
 8009fec:	460c      	mov	r4, r1
 8009fee:	d454      	bmi.n	800a09a <__sflush_r+0xba>
 8009ff0:	684b      	ldr	r3, [r1, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	dc02      	bgt.n	8009ffc <__sflush_r+0x1c>
 8009ff6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	dd48      	ble.n	800a08e <__sflush_r+0xae>
 8009ffc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ffe:	2e00      	cmp	r6, #0
 800a000:	d045      	beq.n	800a08e <__sflush_r+0xae>
 800a002:	2300      	movs	r3, #0
 800a004:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a008:	682f      	ldr	r7, [r5, #0]
 800a00a:	6a21      	ldr	r1, [r4, #32]
 800a00c:	602b      	str	r3, [r5, #0]
 800a00e:	d030      	beq.n	800a072 <__sflush_r+0x92>
 800a010:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a012:	89a3      	ldrh	r3, [r4, #12]
 800a014:	0759      	lsls	r1, r3, #29
 800a016:	d505      	bpl.n	800a024 <__sflush_r+0x44>
 800a018:	6863      	ldr	r3, [r4, #4]
 800a01a:	1ad2      	subs	r2, r2, r3
 800a01c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a01e:	b10b      	cbz	r3, 800a024 <__sflush_r+0x44>
 800a020:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a022:	1ad2      	subs	r2, r2, r3
 800a024:	2300      	movs	r3, #0
 800a026:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a028:	6a21      	ldr	r1, [r4, #32]
 800a02a:	4628      	mov	r0, r5
 800a02c:	47b0      	blx	r6
 800a02e:	1c43      	adds	r3, r0, #1
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	d106      	bne.n	800a042 <__sflush_r+0x62>
 800a034:	6829      	ldr	r1, [r5, #0]
 800a036:	291d      	cmp	r1, #29
 800a038:	d82b      	bhi.n	800a092 <__sflush_r+0xb2>
 800a03a:	4a2a      	ldr	r2, [pc, #168]	@ (800a0e4 <__sflush_r+0x104>)
 800a03c:	410a      	asrs	r2, r1
 800a03e:	07d6      	lsls	r6, r2, #31
 800a040:	d427      	bmi.n	800a092 <__sflush_r+0xb2>
 800a042:	2200      	movs	r2, #0
 800a044:	6062      	str	r2, [r4, #4]
 800a046:	04d9      	lsls	r1, r3, #19
 800a048:	6922      	ldr	r2, [r4, #16]
 800a04a:	6022      	str	r2, [r4, #0]
 800a04c:	d504      	bpl.n	800a058 <__sflush_r+0x78>
 800a04e:	1c42      	adds	r2, r0, #1
 800a050:	d101      	bne.n	800a056 <__sflush_r+0x76>
 800a052:	682b      	ldr	r3, [r5, #0]
 800a054:	b903      	cbnz	r3, 800a058 <__sflush_r+0x78>
 800a056:	6560      	str	r0, [r4, #84]	@ 0x54
 800a058:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a05a:	602f      	str	r7, [r5, #0]
 800a05c:	b1b9      	cbz	r1, 800a08e <__sflush_r+0xae>
 800a05e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a062:	4299      	cmp	r1, r3
 800a064:	d002      	beq.n	800a06c <__sflush_r+0x8c>
 800a066:	4628      	mov	r0, r5
 800a068:	f7ff f89e 	bl	80091a8 <_free_r>
 800a06c:	2300      	movs	r3, #0
 800a06e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a070:	e00d      	b.n	800a08e <__sflush_r+0xae>
 800a072:	2301      	movs	r3, #1
 800a074:	4628      	mov	r0, r5
 800a076:	47b0      	blx	r6
 800a078:	4602      	mov	r2, r0
 800a07a:	1c50      	adds	r0, r2, #1
 800a07c:	d1c9      	bne.n	800a012 <__sflush_r+0x32>
 800a07e:	682b      	ldr	r3, [r5, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d0c6      	beq.n	800a012 <__sflush_r+0x32>
 800a084:	2b1d      	cmp	r3, #29
 800a086:	d001      	beq.n	800a08c <__sflush_r+0xac>
 800a088:	2b16      	cmp	r3, #22
 800a08a:	d11e      	bne.n	800a0ca <__sflush_r+0xea>
 800a08c:	602f      	str	r7, [r5, #0]
 800a08e:	2000      	movs	r0, #0
 800a090:	e022      	b.n	800a0d8 <__sflush_r+0xf8>
 800a092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a096:	b21b      	sxth	r3, r3
 800a098:	e01b      	b.n	800a0d2 <__sflush_r+0xf2>
 800a09a:	690f      	ldr	r7, [r1, #16]
 800a09c:	2f00      	cmp	r7, #0
 800a09e:	d0f6      	beq.n	800a08e <__sflush_r+0xae>
 800a0a0:	0793      	lsls	r3, r2, #30
 800a0a2:	680e      	ldr	r6, [r1, #0]
 800a0a4:	bf08      	it	eq
 800a0a6:	694b      	ldreq	r3, [r1, #20]
 800a0a8:	600f      	str	r7, [r1, #0]
 800a0aa:	bf18      	it	ne
 800a0ac:	2300      	movne	r3, #0
 800a0ae:	eba6 0807 	sub.w	r8, r6, r7
 800a0b2:	608b      	str	r3, [r1, #8]
 800a0b4:	f1b8 0f00 	cmp.w	r8, #0
 800a0b8:	dde9      	ble.n	800a08e <__sflush_r+0xae>
 800a0ba:	6a21      	ldr	r1, [r4, #32]
 800a0bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a0be:	4643      	mov	r3, r8
 800a0c0:	463a      	mov	r2, r7
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	47b0      	blx	r6
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	dc08      	bgt.n	800a0dc <__sflush_r+0xfc>
 800a0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0d2:	81a3      	strh	r3, [r4, #12]
 800a0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0dc:	4407      	add	r7, r0
 800a0de:	eba8 0800 	sub.w	r8, r8, r0
 800a0e2:	e7e7      	b.n	800a0b4 <__sflush_r+0xd4>
 800a0e4:	dfbffffe 	.word	0xdfbffffe

0800a0e8 <_fflush_r>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	690b      	ldr	r3, [r1, #16]
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	b913      	cbnz	r3, 800a0f8 <_fflush_r+0x10>
 800a0f2:	2500      	movs	r5, #0
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	bd38      	pop	{r3, r4, r5, pc}
 800a0f8:	b118      	cbz	r0, 800a102 <_fflush_r+0x1a>
 800a0fa:	6a03      	ldr	r3, [r0, #32]
 800a0fc:	b90b      	cbnz	r3, 800a102 <_fflush_r+0x1a>
 800a0fe:	f7fd ffd5 	bl	80080ac <__sinit>
 800a102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d0f3      	beq.n	800a0f2 <_fflush_r+0xa>
 800a10a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a10c:	07d0      	lsls	r0, r2, #31
 800a10e:	d404      	bmi.n	800a11a <_fflush_r+0x32>
 800a110:	0599      	lsls	r1, r3, #22
 800a112:	d402      	bmi.n	800a11a <_fflush_r+0x32>
 800a114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a116:	f7fe f9f8 	bl	800850a <__retarget_lock_acquire_recursive>
 800a11a:	4628      	mov	r0, r5
 800a11c:	4621      	mov	r1, r4
 800a11e:	f7ff ff5f 	bl	8009fe0 <__sflush_r>
 800a122:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a124:	07da      	lsls	r2, r3, #31
 800a126:	4605      	mov	r5, r0
 800a128:	d4e4      	bmi.n	800a0f4 <_fflush_r+0xc>
 800a12a:	89a3      	ldrh	r3, [r4, #12]
 800a12c:	059b      	lsls	r3, r3, #22
 800a12e:	d4e1      	bmi.n	800a0f4 <_fflush_r+0xc>
 800a130:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a132:	f7fe f9eb 	bl	800850c <__retarget_lock_release_recursive>
 800a136:	e7dd      	b.n	800a0f4 <_fflush_r+0xc>

0800a138 <__swhatbuf_r>:
 800a138:	b570      	push	{r4, r5, r6, lr}
 800a13a:	460c      	mov	r4, r1
 800a13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a140:	2900      	cmp	r1, #0
 800a142:	b096      	sub	sp, #88	@ 0x58
 800a144:	4615      	mov	r5, r2
 800a146:	461e      	mov	r6, r3
 800a148:	da0d      	bge.n	800a166 <__swhatbuf_r+0x2e>
 800a14a:	89a3      	ldrh	r3, [r4, #12]
 800a14c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a150:	f04f 0100 	mov.w	r1, #0
 800a154:	bf14      	ite	ne
 800a156:	2340      	movne	r3, #64	@ 0x40
 800a158:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a15c:	2000      	movs	r0, #0
 800a15e:	6031      	str	r1, [r6, #0]
 800a160:	602b      	str	r3, [r5, #0]
 800a162:	b016      	add	sp, #88	@ 0x58
 800a164:	bd70      	pop	{r4, r5, r6, pc}
 800a166:	466a      	mov	r2, sp
 800a168:	f000 f862 	bl	800a230 <_fstat_r>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	dbec      	blt.n	800a14a <__swhatbuf_r+0x12>
 800a170:	9901      	ldr	r1, [sp, #4]
 800a172:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a176:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a17a:	4259      	negs	r1, r3
 800a17c:	4159      	adcs	r1, r3
 800a17e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a182:	e7eb      	b.n	800a15c <__swhatbuf_r+0x24>

0800a184 <__smakebuf_r>:
 800a184:	898b      	ldrh	r3, [r1, #12]
 800a186:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a188:	079d      	lsls	r5, r3, #30
 800a18a:	4606      	mov	r6, r0
 800a18c:	460c      	mov	r4, r1
 800a18e:	d507      	bpl.n	800a1a0 <__smakebuf_r+0x1c>
 800a190:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a194:	6023      	str	r3, [r4, #0]
 800a196:	6123      	str	r3, [r4, #16]
 800a198:	2301      	movs	r3, #1
 800a19a:	6163      	str	r3, [r4, #20]
 800a19c:	b003      	add	sp, #12
 800a19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1a0:	ab01      	add	r3, sp, #4
 800a1a2:	466a      	mov	r2, sp
 800a1a4:	f7ff ffc8 	bl	800a138 <__swhatbuf_r>
 800a1a8:	9f00      	ldr	r7, [sp, #0]
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	4639      	mov	r1, r7
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f7ff f86e 	bl	8009290 <_malloc_r>
 800a1b4:	b948      	cbnz	r0, 800a1ca <__smakebuf_r+0x46>
 800a1b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ba:	059a      	lsls	r2, r3, #22
 800a1bc:	d4ee      	bmi.n	800a19c <__smakebuf_r+0x18>
 800a1be:	f023 0303 	bic.w	r3, r3, #3
 800a1c2:	f043 0302 	orr.w	r3, r3, #2
 800a1c6:	81a3      	strh	r3, [r4, #12]
 800a1c8:	e7e2      	b.n	800a190 <__smakebuf_r+0xc>
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	6020      	str	r0, [r4, #0]
 800a1ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1d2:	81a3      	strh	r3, [r4, #12]
 800a1d4:	9b01      	ldr	r3, [sp, #4]
 800a1d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a1da:	b15b      	cbz	r3, 800a1f4 <__smakebuf_r+0x70>
 800a1dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f000 f837 	bl	800a254 <_isatty_r>
 800a1e6:	b128      	cbz	r0, 800a1f4 <__smakebuf_r+0x70>
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	f023 0303 	bic.w	r3, r3, #3
 800a1ee:	f043 0301 	orr.w	r3, r3, #1
 800a1f2:	81a3      	strh	r3, [r4, #12]
 800a1f4:	89a3      	ldrh	r3, [r4, #12]
 800a1f6:	431d      	orrs	r5, r3
 800a1f8:	81a5      	strh	r5, [r4, #12]
 800a1fa:	e7cf      	b.n	800a19c <__smakebuf_r+0x18>

0800a1fc <memmove>:
 800a1fc:	4288      	cmp	r0, r1
 800a1fe:	b510      	push	{r4, lr}
 800a200:	eb01 0402 	add.w	r4, r1, r2
 800a204:	d902      	bls.n	800a20c <memmove+0x10>
 800a206:	4284      	cmp	r4, r0
 800a208:	4623      	mov	r3, r4
 800a20a:	d807      	bhi.n	800a21c <memmove+0x20>
 800a20c:	1e43      	subs	r3, r0, #1
 800a20e:	42a1      	cmp	r1, r4
 800a210:	d008      	beq.n	800a224 <memmove+0x28>
 800a212:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a21a:	e7f8      	b.n	800a20e <memmove+0x12>
 800a21c:	4402      	add	r2, r0
 800a21e:	4601      	mov	r1, r0
 800a220:	428a      	cmp	r2, r1
 800a222:	d100      	bne.n	800a226 <memmove+0x2a>
 800a224:	bd10      	pop	{r4, pc}
 800a226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a22a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a22e:	e7f7      	b.n	800a220 <memmove+0x24>

0800a230 <_fstat_r>:
 800a230:	b538      	push	{r3, r4, r5, lr}
 800a232:	4d07      	ldr	r5, [pc, #28]	@ (800a250 <_fstat_r+0x20>)
 800a234:	2300      	movs	r3, #0
 800a236:	4604      	mov	r4, r0
 800a238:	4608      	mov	r0, r1
 800a23a:	4611      	mov	r1, r2
 800a23c:	602b      	str	r3, [r5, #0]
 800a23e:	f7f8 fcc3 	bl	8002bc8 <_fstat>
 800a242:	1c43      	adds	r3, r0, #1
 800a244:	d102      	bne.n	800a24c <_fstat_r+0x1c>
 800a246:	682b      	ldr	r3, [r5, #0]
 800a248:	b103      	cbz	r3, 800a24c <_fstat_r+0x1c>
 800a24a:	6023      	str	r3, [r4, #0]
 800a24c:	bd38      	pop	{r3, r4, r5, pc}
 800a24e:	bf00      	nop
 800a250:	200007b8 	.word	0x200007b8

0800a254 <_isatty_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	4d06      	ldr	r5, [pc, #24]	@ (800a270 <_isatty_r+0x1c>)
 800a258:	2300      	movs	r3, #0
 800a25a:	4604      	mov	r4, r0
 800a25c:	4608      	mov	r0, r1
 800a25e:	602b      	str	r3, [r5, #0]
 800a260:	f7f8 fcc2 	bl	8002be8 <_isatty>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	d102      	bne.n	800a26e <_isatty_r+0x1a>
 800a268:	682b      	ldr	r3, [r5, #0]
 800a26a:	b103      	cbz	r3, 800a26e <_isatty_r+0x1a>
 800a26c:	6023      	str	r3, [r4, #0]
 800a26e:	bd38      	pop	{r3, r4, r5, pc}
 800a270:	200007b8 	.word	0x200007b8

0800a274 <_sbrk_r>:
 800a274:	b538      	push	{r3, r4, r5, lr}
 800a276:	4d06      	ldr	r5, [pc, #24]	@ (800a290 <_sbrk_r+0x1c>)
 800a278:	2300      	movs	r3, #0
 800a27a:	4604      	mov	r4, r0
 800a27c:	4608      	mov	r0, r1
 800a27e:	602b      	str	r3, [r5, #0]
 800a280:	f7f8 fcca 	bl	8002c18 <_sbrk>
 800a284:	1c43      	adds	r3, r0, #1
 800a286:	d102      	bne.n	800a28e <_sbrk_r+0x1a>
 800a288:	682b      	ldr	r3, [r5, #0]
 800a28a:	b103      	cbz	r3, 800a28e <_sbrk_r+0x1a>
 800a28c:	6023      	str	r3, [r4, #0]
 800a28e:	bd38      	pop	{r3, r4, r5, pc}
 800a290:	200007b8 	.word	0x200007b8

0800a294 <memcpy>:
 800a294:	440a      	add	r2, r1
 800a296:	4291      	cmp	r1, r2
 800a298:	f100 33ff 	add.w	r3, r0, #4294967295
 800a29c:	d100      	bne.n	800a2a0 <memcpy+0xc>
 800a29e:	4770      	bx	lr
 800a2a0:	b510      	push	{r4, lr}
 800a2a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2aa:	4291      	cmp	r1, r2
 800a2ac:	d1f9      	bne.n	800a2a2 <memcpy+0xe>
 800a2ae:	bd10      	pop	{r4, pc}

0800a2b0 <__assert_func>:
 800a2b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2b2:	4614      	mov	r4, r2
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	4b09      	ldr	r3, [pc, #36]	@ (800a2dc <__assert_func+0x2c>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4605      	mov	r5, r0
 800a2bc:	68d8      	ldr	r0, [r3, #12]
 800a2be:	b954      	cbnz	r4, 800a2d6 <__assert_func+0x26>
 800a2c0:	4b07      	ldr	r3, [pc, #28]	@ (800a2e0 <__assert_func+0x30>)
 800a2c2:	461c      	mov	r4, r3
 800a2c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2c8:	9100      	str	r1, [sp, #0]
 800a2ca:	462b      	mov	r3, r5
 800a2cc:	4905      	ldr	r1, [pc, #20]	@ (800a2e4 <__assert_func+0x34>)
 800a2ce:	f000 f86f 	bl	800a3b0 <fiprintf>
 800a2d2:	f000 f87f 	bl	800a3d4 <abort>
 800a2d6:	4b04      	ldr	r3, [pc, #16]	@ (800a2e8 <__assert_func+0x38>)
 800a2d8:	e7f4      	b.n	800a2c4 <__assert_func+0x14>
 800a2da:	bf00      	nop
 800a2dc:	20000024 	.word	0x20000024
 800a2e0:	0800b4e6 	.word	0x0800b4e6
 800a2e4:	0800b4b8 	.word	0x0800b4b8
 800a2e8:	0800b4ab 	.word	0x0800b4ab

0800a2ec <_calloc_r>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	fba1 5402 	umull	r5, r4, r1, r2
 800a2f2:	b93c      	cbnz	r4, 800a304 <_calloc_r+0x18>
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	f7fe ffcb 	bl	8009290 <_malloc_r>
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	b928      	cbnz	r0, 800a30a <_calloc_r+0x1e>
 800a2fe:	2600      	movs	r6, #0
 800a300:	4630      	mov	r0, r6
 800a302:	bd70      	pop	{r4, r5, r6, pc}
 800a304:	220c      	movs	r2, #12
 800a306:	6002      	str	r2, [r0, #0]
 800a308:	e7f9      	b.n	800a2fe <_calloc_r+0x12>
 800a30a:	462a      	mov	r2, r5
 800a30c:	4621      	mov	r1, r4
 800a30e:	f7fe f87f 	bl	8008410 <memset>
 800a312:	e7f5      	b.n	800a300 <_calloc_r+0x14>

0800a314 <__ascii_mbtowc>:
 800a314:	b082      	sub	sp, #8
 800a316:	b901      	cbnz	r1, 800a31a <__ascii_mbtowc+0x6>
 800a318:	a901      	add	r1, sp, #4
 800a31a:	b142      	cbz	r2, 800a32e <__ascii_mbtowc+0x1a>
 800a31c:	b14b      	cbz	r3, 800a332 <__ascii_mbtowc+0x1e>
 800a31e:	7813      	ldrb	r3, [r2, #0]
 800a320:	600b      	str	r3, [r1, #0]
 800a322:	7812      	ldrb	r2, [r2, #0]
 800a324:	1e10      	subs	r0, r2, #0
 800a326:	bf18      	it	ne
 800a328:	2001      	movne	r0, #1
 800a32a:	b002      	add	sp, #8
 800a32c:	4770      	bx	lr
 800a32e:	4610      	mov	r0, r2
 800a330:	e7fb      	b.n	800a32a <__ascii_mbtowc+0x16>
 800a332:	f06f 0001 	mvn.w	r0, #1
 800a336:	e7f8      	b.n	800a32a <__ascii_mbtowc+0x16>

0800a338 <_realloc_r>:
 800a338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a33c:	4680      	mov	r8, r0
 800a33e:	4615      	mov	r5, r2
 800a340:	460c      	mov	r4, r1
 800a342:	b921      	cbnz	r1, 800a34e <_realloc_r+0x16>
 800a344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a348:	4611      	mov	r1, r2
 800a34a:	f7fe bfa1 	b.w	8009290 <_malloc_r>
 800a34e:	b92a      	cbnz	r2, 800a35c <_realloc_r+0x24>
 800a350:	f7fe ff2a 	bl	80091a8 <_free_r>
 800a354:	2400      	movs	r4, #0
 800a356:	4620      	mov	r0, r4
 800a358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a35c:	f000 f841 	bl	800a3e2 <_malloc_usable_size_r>
 800a360:	4285      	cmp	r5, r0
 800a362:	4606      	mov	r6, r0
 800a364:	d802      	bhi.n	800a36c <_realloc_r+0x34>
 800a366:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a36a:	d8f4      	bhi.n	800a356 <_realloc_r+0x1e>
 800a36c:	4629      	mov	r1, r5
 800a36e:	4640      	mov	r0, r8
 800a370:	f7fe ff8e 	bl	8009290 <_malloc_r>
 800a374:	4607      	mov	r7, r0
 800a376:	2800      	cmp	r0, #0
 800a378:	d0ec      	beq.n	800a354 <_realloc_r+0x1c>
 800a37a:	42b5      	cmp	r5, r6
 800a37c:	462a      	mov	r2, r5
 800a37e:	4621      	mov	r1, r4
 800a380:	bf28      	it	cs
 800a382:	4632      	movcs	r2, r6
 800a384:	f7ff ff86 	bl	800a294 <memcpy>
 800a388:	4621      	mov	r1, r4
 800a38a:	4640      	mov	r0, r8
 800a38c:	f7fe ff0c 	bl	80091a8 <_free_r>
 800a390:	463c      	mov	r4, r7
 800a392:	e7e0      	b.n	800a356 <_realloc_r+0x1e>

0800a394 <__ascii_wctomb>:
 800a394:	4603      	mov	r3, r0
 800a396:	4608      	mov	r0, r1
 800a398:	b141      	cbz	r1, 800a3ac <__ascii_wctomb+0x18>
 800a39a:	2aff      	cmp	r2, #255	@ 0xff
 800a39c:	d904      	bls.n	800a3a8 <__ascii_wctomb+0x14>
 800a39e:	228a      	movs	r2, #138	@ 0x8a
 800a3a0:	601a      	str	r2, [r3, #0]
 800a3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a6:	4770      	bx	lr
 800a3a8:	700a      	strb	r2, [r1, #0]
 800a3aa:	2001      	movs	r0, #1
 800a3ac:	4770      	bx	lr
	...

0800a3b0 <fiprintf>:
 800a3b0:	b40e      	push	{r1, r2, r3}
 800a3b2:	b503      	push	{r0, r1, lr}
 800a3b4:	4601      	mov	r1, r0
 800a3b6:	ab03      	add	r3, sp, #12
 800a3b8:	4805      	ldr	r0, [pc, #20]	@ (800a3d0 <fiprintf+0x20>)
 800a3ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3be:	6800      	ldr	r0, [r0, #0]
 800a3c0:	9301      	str	r3, [sp, #4]
 800a3c2:	f7ff fcf5 	bl	8009db0 <_vfiprintf_r>
 800a3c6:	b002      	add	sp, #8
 800a3c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3cc:	b003      	add	sp, #12
 800a3ce:	4770      	bx	lr
 800a3d0:	20000024 	.word	0x20000024

0800a3d4 <abort>:
 800a3d4:	b508      	push	{r3, lr}
 800a3d6:	2006      	movs	r0, #6
 800a3d8:	f000 f834 	bl	800a444 <raise>
 800a3dc:	2001      	movs	r0, #1
 800a3de:	f7f8 fba3 	bl	8002b28 <_exit>

0800a3e2 <_malloc_usable_size_r>:
 800a3e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3e6:	1f18      	subs	r0, r3, #4
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	bfbc      	itt	lt
 800a3ec:	580b      	ldrlt	r3, [r1, r0]
 800a3ee:	18c0      	addlt	r0, r0, r3
 800a3f0:	4770      	bx	lr

0800a3f2 <_raise_r>:
 800a3f2:	291f      	cmp	r1, #31
 800a3f4:	b538      	push	{r3, r4, r5, lr}
 800a3f6:	4605      	mov	r5, r0
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	d904      	bls.n	800a406 <_raise_r+0x14>
 800a3fc:	2316      	movs	r3, #22
 800a3fe:	6003      	str	r3, [r0, #0]
 800a400:	f04f 30ff 	mov.w	r0, #4294967295
 800a404:	bd38      	pop	{r3, r4, r5, pc}
 800a406:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a408:	b112      	cbz	r2, 800a410 <_raise_r+0x1e>
 800a40a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a40e:	b94b      	cbnz	r3, 800a424 <_raise_r+0x32>
 800a410:	4628      	mov	r0, r5
 800a412:	f000 f831 	bl	800a478 <_getpid_r>
 800a416:	4622      	mov	r2, r4
 800a418:	4601      	mov	r1, r0
 800a41a:	4628      	mov	r0, r5
 800a41c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a420:	f000 b818 	b.w	800a454 <_kill_r>
 800a424:	2b01      	cmp	r3, #1
 800a426:	d00a      	beq.n	800a43e <_raise_r+0x4c>
 800a428:	1c59      	adds	r1, r3, #1
 800a42a:	d103      	bne.n	800a434 <_raise_r+0x42>
 800a42c:	2316      	movs	r3, #22
 800a42e:	6003      	str	r3, [r0, #0]
 800a430:	2001      	movs	r0, #1
 800a432:	e7e7      	b.n	800a404 <_raise_r+0x12>
 800a434:	2100      	movs	r1, #0
 800a436:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a43a:	4620      	mov	r0, r4
 800a43c:	4798      	blx	r3
 800a43e:	2000      	movs	r0, #0
 800a440:	e7e0      	b.n	800a404 <_raise_r+0x12>
	...

0800a444 <raise>:
 800a444:	4b02      	ldr	r3, [pc, #8]	@ (800a450 <raise+0xc>)
 800a446:	4601      	mov	r1, r0
 800a448:	6818      	ldr	r0, [r3, #0]
 800a44a:	f7ff bfd2 	b.w	800a3f2 <_raise_r>
 800a44e:	bf00      	nop
 800a450:	20000024 	.word	0x20000024

0800a454 <_kill_r>:
 800a454:	b538      	push	{r3, r4, r5, lr}
 800a456:	4d07      	ldr	r5, [pc, #28]	@ (800a474 <_kill_r+0x20>)
 800a458:	2300      	movs	r3, #0
 800a45a:	4604      	mov	r4, r0
 800a45c:	4608      	mov	r0, r1
 800a45e:	4611      	mov	r1, r2
 800a460:	602b      	str	r3, [r5, #0]
 800a462:	f7f8 fb51 	bl	8002b08 <_kill>
 800a466:	1c43      	adds	r3, r0, #1
 800a468:	d102      	bne.n	800a470 <_kill_r+0x1c>
 800a46a:	682b      	ldr	r3, [r5, #0]
 800a46c:	b103      	cbz	r3, 800a470 <_kill_r+0x1c>
 800a46e:	6023      	str	r3, [r4, #0]
 800a470:	bd38      	pop	{r3, r4, r5, pc}
 800a472:	bf00      	nop
 800a474:	200007b8 	.word	0x200007b8

0800a478 <_getpid_r>:
 800a478:	f7f8 bb3e 	b.w	8002af8 <_getpid>

0800a47c <cosf>:
 800a47c:	ee10 3a10 	vmov	r3, s0
 800a480:	b507      	push	{r0, r1, r2, lr}
 800a482:	4a1e      	ldr	r2, [pc, #120]	@ (800a4fc <cosf+0x80>)
 800a484:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a488:	4293      	cmp	r3, r2
 800a48a:	d806      	bhi.n	800a49a <cosf+0x1e>
 800a48c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800a500 <cosf+0x84>
 800a490:	b003      	add	sp, #12
 800a492:	f85d eb04 	ldr.w	lr, [sp], #4
 800a496:	f000 b87b 	b.w	800a590 <__kernel_cosf>
 800a49a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a49e:	d304      	bcc.n	800a4aa <cosf+0x2e>
 800a4a0:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a4a4:	b003      	add	sp, #12
 800a4a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4aa:	4668      	mov	r0, sp
 800a4ac:	f000 f910 	bl	800a6d0 <__ieee754_rem_pio2f>
 800a4b0:	f000 0003 	and.w	r0, r0, #3
 800a4b4:	2801      	cmp	r0, #1
 800a4b6:	d009      	beq.n	800a4cc <cosf+0x50>
 800a4b8:	2802      	cmp	r0, #2
 800a4ba:	d010      	beq.n	800a4de <cosf+0x62>
 800a4bc:	b9b0      	cbnz	r0, 800a4ec <cosf+0x70>
 800a4be:	eddd 0a01 	vldr	s1, [sp, #4]
 800a4c2:	ed9d 0a00 	vldr	s0, [sp]
 800a4c6:	f000 f863 	bl	800a590 <__kernel_cosf>
 800a4ca:	e7eb      	b.n	800a4a4 <cosf+0x28>
 800a4cc:	eddd 0a01 	vldr	s1, [sp, #4]
 800a4d0:	ed9d 0a00 	vldr	s0, [sp]
 800a4d4:	f000 f8b4 	bl	800a640 <__kernel_sinf>
 800a4d8:	eeb1 0a40 	vneg.f32	s0, s0
 800a4dc:	e7e2      	b.n	800a4a4 <cosf+0x28>
 800a4de:	eddd 0a01 	vldr	s1, [sp, #4]
 800a4e2:	ed9d 0a00 	vldr	s0, [sp]
 800a4e6:	f000 f853 	bl	800a590 <__kernel_cosf>
 800a4ea:	e7f5      	b.n	800a4d8 <cosf+0x5c>
 800a4ec:	eddd 0a01 	vldr	s1, [sp, #4]
 800a4f0:	ed9d 0a00 	vldr	s0, [sp]
 800a4f4:	2001      	movs	r0, #1
 800a4f6:	f000 f8a3 	bl	800a640 <__kernel_sinf>
 800a4fa:	e7d3      	b.n	800a4a4 <cosf+0x28>
 800a4fc:	3f490fd8 	.word	0x3f490fd8
 800a500:	00000000 	.word	0x00000000

0800a504 <sinf>:
 800a504:	ee10 3a10 	vmov	r3, s0
 800a508:	b507      	push	{r0, r1, r2, lr}
 800a50a:	4a1f      	ldr	r2, [pc, #124]	@ (800a588 <sinf+0x84>)
 800a50c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a510:	4293      	cmp	r3, r2
 800a512:	d807      	bhi.n	800a524 <sinf+0x20>
 800a514:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800a58c <sinf+0x88>
 800a518:	2000      	movs	r0, #0
 800a51a:	b003      	add	sp, #12
 800a51c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a520:	f000 b88e 	b.w	800a640 <__kernel_sinf>
 800a524:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a528:	d304      	bcc.n	800a534 <sinf+0x30>
 800a52a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a52e:	b003      	add	sp, #12
 800a530:	f85d fb04 	ldr.w	pc, [sp], #4
 800a534:	4668      	mov	r0, sp
 800a536:	f000 f8cb 	bl	800a6d0 <__ieee754_rem_pio2f>
 800a53a:	f000 0003 	and.w	r0, r0, #3
 800a53e:	2801      	cmp	r0, #1
 800a540:	d00a      	beq.n	800a558 <sinf+0x54>
 800a542:	2802      	cmp	r0, #2
 800a544:	d00f      	beq.n	800a566 <sinf+0x62>
 800a546:	b9c0      	cbnz	r0, 800a57a <sinf+0x76>
 800a548:	eddd 0a01 	vldr	s1, [sp, #4]
 800a54c:	ed9d 0a00 	vldr	s0, [sp]
 800a550:	2001      	movs	r0, #1
 800a552:	f000 f875 	bl	800a640 <__kernel_sinf>
 800a556:	e7ea      	b.n	800a52e <sinf+0x2a>
 800a558:	eddd 0a01 	vldr	s1, [sp, #4]
 800a55c:	ed9d 0a00 	vldr	s0, [sp]
 800a560:	f000 f816 	bl	800a590 <__kernel_cosf>
 800a564:	e7e3      	b.n	800a52e <sinf+0x2a>
 800a566:	eddd 0a01 	vldr	s1, [sp, #4]
 800a56a:	ed9d 0a00 	vldr	s0, [sp]
 800a56e:	2001      	movs	r0, #1
 800a570:	f000 f866 	bl	800a640 <__kernel_sinf>
 800a574:	eeb1 0a40 	vneg.f32	s0, s0
 800a578:	e7d9      	b.n	800a52e <sinf+0x2a>
 800a57a:	eddd 0a01 	vldr	s1, [sp, #4]
 800a57e:	ed9d 0a00 	vldr	s0, [sp]
 800a582:	f000 f805 	bl	800a590 <__kernel_cosf>
 800a586:	e7f5      	b.n	800a574 <sinf+0x70>
 800a588:	3f490fd8 	.word	0x3f490fd8
 800a58c:	00000000 	.word	0x00000000

0800a590 <__kernel_cosf>:
 800a590:	ee10 3a10 	vmov	r3, s0
 800a594:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a598:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800a59c:	eef0 6a40 	vmov.f32	s13, s0
 800a5a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a5a4:	d204      	bcs.n	800a5b0 <__kernel_cosf+0x20>
 800a5a6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800a5aa:	ee17 2a90 	vmov	r2, s15
 800a5ae:	b342      	cbz	r2, 800a602 <__kernel_cosf+0x72>
 800a5b0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800a5b4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800a620 <__kernel_cosf+0x90>
 800a5b8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800a624 <__kernel_cosf+0x94>
 800a5bc:	4a1a      	ldr	r2, [pc, #104]	@ (800a628 <__kernel_cosf+0x98>)
 800a5be:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a62c <__kernel_cosf+0x9c>
 800a5c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a5cc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800a630 <__kernel_cosf+0xa0>
 800a5d0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a5d4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800a634 <__kernel_cosf+0xa4>
 800a5d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a5dc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800a638 <__kernel_cosf+0xa8>
 800a5e0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a5e4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800a5e8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800a5ec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a5f0:	eee7 0a06 	vfma.f32	s1, s14, s12
 800a5f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5f8:	d804      	bhi.n	800a604 <__kernel_cosf+0x74>
 800a5fa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a5fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a602:	4770      	bx	lr
 800a604:	4a0d      	ldr	r2, [pc, #52]	@ (800a63c <__kernel_cosf+0xac>)
 800a606:	4293      	cmp	r3, r2
 800a608:	bf9a      	itte	ls
 800a60a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800a60e:	ee07 3a10 	vmovls	s14, r3
 800a612:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800a616:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a61a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a61e:	e7ec      	b.n	800a5fa <__kernel_cosf+0x6a>
 800a620:	ad47d74e 	.word	0xad47d74e
 800a624:	310f74f6 	.word	0x310f74f6
 800a628:	3e999999 	.word	0x3e999999
 800a62c:	b493f27c 	.word	0xb493f27c
 800a630:	37d00d01 	.word	0x37d00d01
 800a634:	bab60b61 	.word	0xbab60b61
 800a638:	3d2aaaab 	.word	0x3d2aaaab
 800a63c:	3f480000 	.word	0x3f480000

0800a640 <__kernel_sinf>:
 800a640:	ee10 3a10 	vmov	r3, s0
 800a644:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a648:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800a64c:	d204      	bcs.n	800a658 <__kernel_sinf+0x18>
 800a64e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a652:	ee17 3a90 	vmov	r3, s15
 800a656:	b35b      	cbz	r3, 800a6b0 <__kernel_sinf+0x70>
 800a658:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a65c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800a6b4 <__kernel_sinf+0x74>
 800a660:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800a6b8 <__kernel_sinf+0x78>
 800a664:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a668:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800a6bc <__kernel_sinf+0x7c>
 800a66c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a670:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800a6c0 <__kernel_sinf+0x80>
 800a674:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a678:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800a6c4 <__kernel_sinf+0x84>
 800a67c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800a680:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a684:	b930      	cbnz	r0, 800a694 <__kernel_sinf+0x54>
 800a686:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800a6c8 <__kernel_sinf+0x88>
 800a68a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a68e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800a692:	4770      	bx	lr
 800a694:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a698:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800a69c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800a6a0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800a6a4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800a6cc <__kernel_sinf+0x8c>
 800a6a8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800a6ac:	ee30 0a60 	vsub.f32	s0, s0, s1
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	2f2ec9d3 	.word	0x2f2ec9d3
 800a6b8:	b2d72f34 	.word	0xb2d72f34
 800a6bc:	3638ef1b 	.word	0x3638ef1b
 800a6c0:	b9500d01 	.word	0xb9500d01
 800a6c4:	3c088889 	.word	0x3c088889
 800a6c8:	be2aaaab 	.word	0xbe2aaaab
 800a6cc:	3e2aaaab 	.word	0x3e2aaaab

0800a6d0 <__ieee754_rem_pio2f>:
 800a6d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6d2:	ee10 6a10 	vmov	r6, s0
 800a6d6:	4b88      	ldr	r3, [pc, #544]	@ (800a8f8 <__ieee754_rem_pio2f+0x228>)
 800a6d8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800a6dc:	429d      	cmp	r5, r3
 800a6de:	b087      	sub	sp, #28
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	d805      	bhi.n	800a6f0 <__ieee754_rem_pio2f+0x20>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	ed80 0a00 	vstr	s0, [r0]
 800a6ea:	6043      	str	r3, [r0, #4]
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	e022      	b.n	800a736 <__ieee754_rem_pio2f+0x66>
 800a6f0:	4b82      	ldr	r3, [pc, #520]	@ (800a8fc <__ieee754_rem_pio2f+0x22c>)
 800a6f2:	429d      	cmp	r5, r3
 800a6f4:	d83a      	bhi.n	800a76c <__ieee754_rem_pio2f+0x9c>
 800a6f6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800a6fa:	2e00      	cmp	r6, #0
 800a6fc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800a900 <__ieee754_rem_pio2f+0x230>
 800a700:	4a80      	ldr	r2, [pc, #512]	@ (800a904 <__ieee754_rem_pio2f+0x234>)
 800a702:	f023 030f 	bic.w	r3, r3, #15
 800a706:	dd18      	ble.n	800a73a <__ieee754_rem_pio2f+0x6a>
 800a708:	4293      	cmp	r3, r2
 800a70a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800a70e:	bf09      	itett	eq
 800a710:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800a908 <__ieee754_rem_pio2f+0x238>
 800a714:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800a90c <__ieee754_rem_pio2f+0x23c>
 800a718:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800a910 <__ieee754_rem_pio2f+0x240>
 800a71c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800a720:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800a724:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a728:	ed80 7a00 	vstr	s14, [r0]
 800a72c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a730:	edc0 7a01 	vstr	s15, [r0, #4]
 800a734:	2001      	movs	r0, #1
 800a736:	b007      	add	sp, #28
 800a738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a73a:	4293      	cmp	r3, r2
 800a73c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a740:	bf09      	itett	eq
 800a742:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800a908 <__ieee754_rem_pio2f+0x238>
 800a746:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800a90c <__ieee754_rem_pio2f+0x23c>
 800a74a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800a910 <__ieee754_rem_pio2f+0x240>
 800a74e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800a752:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a756:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a75a:	ed80 7a00 	vstr	s14, [r0]
 800a75e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a762:	edc0 7a01 	vstr	s15, [r0, #4]
 800a766:	f04f 30ff 	mov.w	r0, #4294967295
 800a76a:	e7e4      	b.n	800a736 <__ieee754_rem_pio2f+0x66>
 800a76c:	4b69      	ldr	r3, [pc, #420]	@ (800a914 <__ieee754_rem_pio2f+0x244>)
 800a76e:	429d      	cmp	r5, r3
 800a770:	d873      	bhi.n	800a85a <__ieee754_rem_pio2f+0x18a>
 800a772:	f000 f8dd 	bl	800a930 <fabsf>
 800a776:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800a918 <__ieee754_rem_pio2f+0x248>
 800a77a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a77e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a786:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a78a:	ee17 0a90 	vmov	r0, s15
 800a78e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800a900 <__ieee754_rem_pio2f+0x230>
 800a792:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a796:	281f      	cmp	r0, #31
 800a798:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800a90c <__ieee754_rem_pio2f+0x23c>
 800a79c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7a0:	eeb1 6a47 	vneg.f32	s12, s14
 800a7a4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a7a8:	ee16 1a90 	vmov	r1, s13
 800a7ac:	dc09      	bgt.n	800a7c2 <__ieee754_rem_pio2f+0xf2>
 800a7ae:	4a5b      	ldr	r2, [pc, #364]	@ (800a91c <__ieee754_rem_pio2f+0x24c>)
 800a7b0:	1e47      	subs	r7, r0, #1
 800a7b2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800a7b6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800a7ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d107      	bne.n	800a7d2 <__ieee754_rem_pio2f+0x102>
 800a7c2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800a7c6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800a7ca:	2a08      	cmp	r2, #8
 800a7cc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800a7d0:	dc14      	bgt.n	800a7fc <__ieee754_rem_pio2f+0x12c>
 800a7d2:	6021      	str	r1, [r4, #0]
 800a7d4:	ed94 7a00 	vldr	s14, [r4]
 800a7d8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a7dc:	2e00      	cmp	r6, #0
 800a7de:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a7e2:	ed84 0a01 	vstr	s0, [r4, #4]
 800a7e6:	daa6      	bge.n	800a736 <__ieee754_rem_pio2f+0x66>
 800a7e8:	eeb1 7a47 	vneg.f32	s14, s14
 800a7ec:	eeb1 0a40 	vneg.f32	s0, s0
 800a7f0:	ed84 7a00 	vstr	s14, [r4]
 800a7f4:	ed84 0a01 	vstr	s0, [r4, #4]
 800a7f8:	4240      	negs	r0, r0
 800a7fa:	e79c      	b.n	800a736 <__ieee754_rem_pio2f+0x66>
 800a7fc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800a908 <__ieee754_rem_pio2f+0x238>
 800a800:	eef0 6a40 	vmov.f32	s13, s0
 800a804:	eee6 6a25 	vfma.f32	s13, s12, s11
 800a808:	ee70 7a66 	vsub.f32	s15, s0, s13
 800a80c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a810:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a910 <__ieee754_rem_pio2f+0x240>
 800a814:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a818:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a81c:	ee15 2a90 	vmov	r2, s11
 800a820:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a824:	1a5b      	subs	r3, r3, r1
 800a826:	2b19      	cmp	r3, #25
 800a828:	dc04      	bgt.n	800a834 <__ieee754_rem_pio2f+0x164>
 800a82a:	edc4 5a00 	vstr	s11, [r4]
 800a82e:	eeb0 0a66 	vmov.f32	s0, s13
 800a832:	e7cf      	b.n	800a7d4 <__ieee754_rem_pio2f+0x104>
 800a834:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800a920 <__ieee754_rem_pio2f+0x250>
 800a838:	eeb0 0a66 	vmov.f32	s0, s13
 800a83c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a840:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a844:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800a924 <__ieee754_rem_pio2f+0x254>
 800a848:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a84c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a850:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a854:	ed84 7a00 	vstr	s14, [r4]
 800a858:	e7bc      	b.n	800a7d4 <__ieee754_rem_pio2f+0x104>
 800a85a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800a85e:	d306      	bcc.n	800a86e <__ieee754_rem_pio2f+0x19e>
 800a860:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a864:	edc0 7a01 	vstr	s15, [r0, #4]
 800a868:	edc0 7a00 	vstr	s15, [r0]
 800a86c:	e73e      	b.n	800a6ec <__ieee754_rem_pio2f+0x1c>
 800a86e:	15ea      	asrs	r2, r5, #23
 800a870:	3a86      	subs	r2, #134	@ 0x86
 800a872:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a876:	ee07 3a90 	vmov	s15, r3
 800a87a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a87e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800a928 <__ieee754_rem_pio2f+0x258>
 800a882:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a886:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a88a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a88e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a892:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a896:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a89a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a89e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a8a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a8a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ae:	edcd 7a05 	vstr	s15, [sp, #20]
 800a8b2:	d11e      	bne.n	800a8f2 <__ieee754_rem_pio2f+0x222>
 800a8b4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a8b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8bc:	bf0c      	ite	eq
 800a8be:	2301      	moveq	r3, #1
 800a8c0:	2302      	movne	r3, #2
 800a8c2:	491a      	ldr	r1, [pc, #104]	@ (800a92c <__ieee754_rem_pio2f+0x25c>)
 800a8c4:	9101      	str	r1, [sp, #4]
 800a8c6:	2102      	movs	r1, #2
 800a8c8:	9100      	str	r1, [sp, #0]
 800a8ca:	a803      	add	r0, sp, #12
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	f000 f837 	bl	800a940 <__kernel_rem_pio2f>
 800a8d2:	2e00      	cmp	r6, #0
 800a8d4:	f6bf af2f 	bge.w	800a736 <__ieee754_rem_pio2f+0x66>
 800a8d8:	edd4 7a00 	vldr	s15, [r4]
 800a8dc:	eef1 7a67 	vneg.f32	s15, s15
 800a8e0:	edc4 7a00 	vstr	s15, [r4]
 800a8e4:	edd4 7a01 	vldr	s15, [r4, #4]
 800a8e8:	eef1 7a67 	vneg.f32	s15, s15
 800a8ec:	edc4 7a01 	vstr	s15, [r4, #4]
 800a8f0:	e782      	b.n	800a7f8 <__ieee754_rem_pio2f+0x128>
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e7e5      	b.n	800a8c2 <__ieee754_rem_pio2f+0x1f2>
 800a8f6:	bf00      	nop
 800a8f8:	3f490fd8 	.word	0x3f490fd8
 800a8fc:	4016cbe3 	.word	0x4016cbe3
 800a900:	3fc90f80 	.word	0x3fc90f80
 800a904:	3fc90fd0 	.word	0x3fc90fd0
 800a908:	37354400 	.word	0x37354400
 800a90c:	37354443 	.word	0x37354443
 800a910:	2e85a308 	.word	0x2e85a308
 800a914:	43490f80 	.word	0x43490f80
 800a918:	3f22f984 	.word	0x3f22f984
 800a91c:	0800b4e8 	.word	0x0800b4e8
 800a920:	2e85a300 	.word	0x2e85a300
 800a924:	248d3132 	.word	0x248d3132
 800a928:	43800000 	.word	0x43800000
 800a92c:	0800b568 	.word	0x0800b568

0800a930 <fabsf>:
 800a930:	ee10 3a10 	vmov	r3, s0
 800a934:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a938:	ee00 3a10 	vmov	s0, r3
 800a93c:	4770      	bx	lr
	...

0800a940 <__kernel_rem_pio2f>:
 800a940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a944:	ed2d 8b04 	vpush	{d8-d9}
 800a948:	b0d9      	sub	sp, #356	@ 0x164
 800a94a:	4690      	mov	r8, r2
 800a94c:	9001      	str	r0, [sp, #4]
 800a94e:	4ab9      	ldr	r2, [pc, #740]	@ (800ac34 <__kernel_rem_pio2f+0x2f4>)
 800a950:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800a952:	f118 0f04 	cmn.w	r8, #4
 800a956:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800a95a:	460f      	mov	r7, r1
 800a95c:	f103 3bff 	add.w	fp, r3, #4294967295
 800a960:	db27      	blt.n	800a9b2 <__kernel_rem_pio2f+0x72>
 800a962:	f1b8 0203 	subs.w	r2, r8, #3
 800a966:	bf48      	it	mi
 800a968:	f108 0204 	addmi.w	r2, r8, #4
 800a96c:	10d2      	asrs	r2, r2, #3
 800a96e:	1c55      	adds	r5, r2, #1
 800a970:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800a972:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800ac44 <__kernel_rem_pio2f+0x304>
 800a976:	00e8      	lsls	r0, r5, #3
 800a978:	eba2 060b 	sub.w	r6, r2, fp
 800a97c:	9002      	str	r0, [sp, #8]
 800a97e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800a982:	eb0a 0c0b 	add.w	ip, sl, fp
 800a986:	ac1c      	add	r4, sp, #112	@ 0x70
 800a988:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800a98c:	2000      	movs	r0, #0
 800a98e:	4560      	cmp	r0, ip
 800a990:	dd11      	ble.n	800a9b6 <__kernel_rem_pio2f+0x76>
 800a992:	a91c      	add	r1, sp, #112	@ 0x70
 800a994:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800a998:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800a99c:	f04f 0c00 	mov.w	ip, #0
 800a9a0:	45d4      	cmp	ip, sl
 800a9a2:	dc27      	bgt.n	800a9f4 <__kernel_rem_pio2f+0xb4>
 800a9a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a9a8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800ac44 <__kernel_rem_pio2f+0x304>
 800a9ac:	4606      	mov	r6, r0
 800a9ae:	2400      	movs	r4, #0
 800a9b0:	e016      	b.n	800a9e0 <__kernel_rem_pio2f+0xa0>
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	e7db      	b.n	800a96e <__kernel_rem_pio2f+0x2e>
 800a9b6:	42c6      	cmn	r6, r0
 800a9b8:	bf5d      	ittte	pl
 800a9ba:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800a9be:	ee07 1a90 	vmovpl	s15, r1
 800a9c2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a9c6:	eef0 7a47 	vmovmi.f32	s15, s14
 800a9ca:	ece4 7a01 	vstmia	r4!, {s15}
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	e7dd      	b.n	800a98e <__kernel_rem_pio2f+0x4e>
 800a9d2:	ecfe 6a01 	vldmia	lr!, {s13}
 800a9d6:	ed96 7a00 	vldr	s14, [r6]
 800a9da:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a9de:	3401      	adds	r4, #1
 800a9e0:	455c      	cmp	r4, fp
 800a9e2:	f1a6 0604 	sub.w	r6, r6, #4
 800a9e6:	ddf4      	ble.n	800a9d2 <__kernel_rem_pio2f+0x92>
 800a9e8:	ece9 7a01 	vstmia	r9!, {s15}
 800a9ec:	f10c 0c01 	add.w	ip, ip, #1
 800a9f0:	3004      	adds	r0, #4
 800a9f2:	e7d5      	b.n	800a9a0 <__kernel_rem_pio2f+0x60>
 800a9f4:	a908      	add	r1, sp, #32
 800a9f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9fa:	9104      	str	r1, [sp, #16]
 800a9fc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800a9fe:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800ac40 <__kernel_rem_pio2f+0x300>
 800aa02:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800ac3c <__kernel_rem_pio2f+0x2fc>
 800aa06:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800aa0a:	9203      	str	r2, [sp, #12]
 800aa0c:	4654      	mov	r4, sl
 800aa0e:	00a2      	lsls	r2, r4, #2
 800aa10:	9205      	str	r2, [sp, #20]
 800aa12:	aa58      	add	r2, sp, #352	@ 0x160
 800aa14:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800aa18:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800aa1c:	a944      	add	r1, sp, #272	@ 0x110
 800aa1e:	aa08      	add	r2, sp, #32
 800aa20:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800aa24:	4694      	mov	ip, r2
 800aa26:	4626      	mov	r6, r4
 800aa28:	2e00      	cmp	r6, #0
 800aa2a:	f1a0 0004 	sub.w	r0, r0, #4
 800aa2e:	dc4c      	bgt.n	800aaca <__kernel_rem_pio2f+0x18a>
 800aa30:	4628      	mov	r0, r5
 800aa32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa36:	f000 f9f5 	bl	800ae24 <scalbnf>
 800aa3a:	eeb0 8a40 	vmov.f32	s16, s0
 800aa3e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800aa42:	ee28 0a00 	vmul.f32	s0, s16, s0
 800aa46:	f000 fa53 	bl	800aef0 <floorf>
 800aa4a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800aa4e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800aa52:	2d00      	cmp	r5, #0
 800aa54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa58:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800aa5c:	ee17 9a90 	vmov	r9, s15
 800aa60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa64:	ee38 8a67 	vsub.f32	s16, s16, s15
 800aa68:	dd41      	ble.n	800aaee <__kernel_rem_pio2f+0x1ae>
 800aa6a:	f104 3cff 	add.w	ip, r4, #4294967295
 800aa6e:	a908      	add	r1, sp, #32
 800aa70:	f1c5 0e08 	rsb	lr, r5, #8
 800aa74:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800aa78:	fa46 f00e 	asr.w	r0, r6, lr
 800aa7c:	4481      	add	r9, r0
 800aa7e:	fa00 f00e 	lsl.w	r0, r0, lr
 800aa82:	1a36      	subs	r6, r6, r0
 800aa84:	f1c5 0007 	rsb	r0, r5, #7
 800aa88:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800aa8c:	4106      	asrs	r6, r0
 800aa8e:	2e00      	cmp	r6, #0
 800aa90:	dd3c      	ble.n	800ab0c <__kernel_rem_pio2f+0x1cc>
 800aa92:	f04f 0e00 	mov.w	lr, #0
 800aa96:	f109 0901 	add.w	r9, r9, #1
 800aa9a:	4670      	mov	r0, lr
 800aa9c:	4574      	cmp	r4, lr
 800aa9e:	dc68      	bgt.n	800ab72 <__kernel_rem_pio2f+0x232>
 800aaa0:	2d00      	cmp	r5, #0
 800aaa2:	dd03      	ble.n	800aaac <__kernel_rem_pio2f+0x16c>
 800aaa4:	2d01      	cmp	r5, #1
 800aaa6:	d074      	beq.n	800ab92 <__kernel_rem_pio2f+0x252>
 800aaa8:	2d02      	cmp	r5, #2
 800aaaa:	d07d      	beq.n	800aba8 <__kernel_rem_pio2f+0x268>
 800aaac:	2e02      	cmp	r6, #2
 800aaae:	d12d      	bne.n	800ab0c <__kernel_rem_pio2f+0x1cc>
 800aab0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800aab4:	ee30 8a48 	vsub.f32	s16, s0, s16
 800aab8:	b340      	cbz	r0, 800ab0c <__kernel_rem_pio2f+0x1cc>
 800aaba:	4628      	mov	r0, r5
 800aabc:	9306      	str	r3, [sp, #24]
 800aabe:	f000 f9b1 	bl	800ae24 <scalbnf>
 800aac2:	9b06      	ldr	r3, [sp, #24]
 800aac4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800aac8:	e020      	b.n	800ab0c <__kernel_rem_pio2f+0x1cc>
 800aaca:	ee60 7a28 	vmul.f32	s15, s0, s17
 800aace:	3e01      	subs	r6, #1
 800aad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aad8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800aadc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800aae0:	ecac 0a01 	vstmia	ip!, {s0}
 800aae4:	ed90 0a00 	vldr	s0, [r0]
 800aae8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800aaec:	e79c      	b.n	800aa28 <__kernel_rem_pio2f+0xe8>
 800aaee:	d105      	bne.n	800aafc <__kernel_rem_pio2f+0x1bc>
 800aaf0:	1e60      	subs	r0, r4, #1
 800aaf2:	a908      	add	r1, sp, #32
 800aaf4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800aaf8:	11f6      	asrs	r6, r6, #7
 800aafa:	e7c8      	b.n	800aa8e <__kernel_rem_pio2f+0x14e>
 800aafc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ab00:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ab04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab08:	da31      	bge.n	800ab6e <__kernel_rem_pio2f+0x22e>
 800ab0a:	2600      	movs	r6, #0
 800ab0c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ab10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab14:	f040 8098 	bne.w	800ac48 <__kernel_rem_pio2f+0x308>
 800ab18:	1e60      	subs	r0, r4, #1
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	4550      	cmp	r0, sl
 800ab1e:	da4b      	bge.n	800abb8 <__kernel_rem_pio2f+0x278>
 800ab20:	2a00      	cmp	r2, #0
 800ab22:	d065      	beq.n	800abf0 <__kernel_rem_pio2f+0x2b0>
 800ab24:	3c01      	subs	r4, #1
 800ab26:	ab08      	add	r3, sp, #32
 800ab28:	3d08      	subs	r5, #8
 800ab2a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d0f8      	beq.n	800ab24 <__kernel_rem_pio2f+0x1e4>
 800ab32:	4628      	mov	r0, r5
 800ab34:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ab38:	f000 f974 	bl	800ae24 <scalbnf>
 800ab3c:	1c63      	adds	r3, r4, #1
 800ab3e:	aa44      	add	r2, sp, #272	@ 0x110
 800ab40:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800ac40 <__kernel_rem_pio2f+0x300>
 800ab44:	0099      	lsls	r1, r3, #2
 800ab46:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ab4a:	4623      	mov	r3, r4
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f280 80a9 	bge.w	800aca4 <__kernel_rem_pio2f+0x364>
 800ab52:	4623      	mov	r3, r4
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f2c0 80c7 	blt.w	800ace8 <__kernel_rem_pio2f+0x3a8>
 800ab5a:	aa44      	add	r2, sp, #272	@ 0x110
 800ab5c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ab60:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800ac38 <__kernel_rem_pio2f+0x2f8>
 800ab64:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800ac44 <__kernel_rem_pio2f+0x304>
 800ab68:	2000      	movs	r0, #0
 800ab6a:	1ae2      	subs	r2, r4, r3
 800ab6c:	e0b1      	b.n	800acd2 <__kernel_rem_pio2f+0x392>
 800ab6e:	2602      	movs	r6, #2
 800ab70:	e78f      	b.n	800aa92 <__kernel_rem_pio2f+0x152>
 800ab72:	f852 1b04 	ldr.w	r1, [r2], #4
 800ab76:	b948      	cbnz	r0, 800ab8c <__kernel_rem_pio2f+0x24c>
 800ab78:	b121      	cbz	r1, 800ab84 <__kernel_rem_pio2f+0x244>
 800ab7a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800ab7e:	f842 1c04 	str.w	r1, [r2, #-4]
 800ab82:	2101      	movs	r1, #1
 800ab84:	f10e 0e01 	add.w	lr, lr, #1
 800ab88:	4608      	mov	r0, r1
 800ab8a:	e787      	b.n	800aa9c <__kernel_rem_pio2f+0x15c>
 800ab8c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800ab90:	e7f5      	b.n	800ab7e <__kernel_rem_pio2f+0x23e>
 800ab92:	f104 3cff 	add.w	ip, r4, #4294967295
 800ab96:	aa08      	add	r2, sp, #32
 800ab98:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ab9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800aba0:	a908      	add	r1, sp, #32
 800aba2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800aba6:	e781      	b.n	800aaac <__kernel_rem_pio2f+0x16c>
 800aba8:	f104 3cff 	add.w	ip, r4, #4294967295
 800abac:	aa08      	add	r2, sp, #32
 800abae:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800abb2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800abb6:	e7f3      	b.n	800aba0 <__kernel_rem_pio2f+0x260>
 800abb8:	a908      	add	r1, sp, #32
 800abba:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800abbe:	3801      	subs	r0, #1
 800abc0:	430a      	orrs	r2, r1
 800abc2:	e7ab      	b.n	800ab1c <__kernel_rem_pio2f+0x1dc>
 800abc4:	3201      	adds	r2, #1
 800abc6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800abca:	2e00      	cmp	r6, #0
 800abcc:	d0fa      	beq.n	800abc4 <__kernel_rem_pio2f+0x284>
 800abce:	9905      	ldr	r1, [sp, #20]
 800abd0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800abd4:	eb0d 0001 	add.w	r0, sp, r1
 800abd8:	18e6      	adds	r6, r4, r3
 800abda:	a91c      	add	r1, sp, #112	@ 0x70
 800abdc:	f104 0c01 	add.w	ip, r4, #1
 800abe0:	384c      	subs	r0, #76	@ 0x4c
 800abe2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800abe6:	4422      	add	r2, r4
 800abe8:	4562      	cmp	r2, ip
 800abea:	da04      	bge.n	800abf6 <__kernel_rem_pio2f+0x2b6>
 800abec:	4614      	mov	r4, r2
 800abee:	e70e      	b.n	800aa0e <__kernel_rem_pio2f+0xce>
 800abf0:	9804      	ldr	r0, [sp, #16]
 800abf2:	2201      	movs	r2, #1
 800abf4:	e7e7      	b.n	800abc6 <__kernel_rem_pio2f+0x286>
 800abf6:	9903      	ldr	r1, [sp, #12]
 800abf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800abfc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800ac00:	9105      	str	r1, [sp, #20]
 800ac02:	ee07 1a90 	vmov	s15, r1
 800ac06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac0a:	2400      	movs	r4, #0
 800ac0c:	ece6 7a01 	vstmia	r6!, {s15}
 800ac10:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800ac44 <__kernel_rem_pio2f+0x304>
 800ac14:	46b1      	mov	r9, r6
 800ac16:	455c      	cmp	r4, fp
 800ac18:	dd04      	ble.n	800ac24 <__kernel_rem_pio2f+0x2e4>
 800ac1a:	ece0 7a01 	vstmia	r0!, {s15}
 800ac1e:	f10c 0c01 	add.w	ip, ip, #1
 800ac22:	e7e1      	b.n	800abe8 <__kernel_rem_pio2f+0x2a8>
 800ac24:	ecfe 6a01 	vldmia	lr!, {s13}
 800ac28:	ed39 7a01 	vldmdb	r9!, {s14}
 800ac2c:	3401      	adds	r4, #1
 800ac2e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ac32:	e7f0      	b.n	800ac16 <__kernel_rem_pio2f+0x2d6>
 800ac34:	0800b8ac 	.word	0x0800b8ac
 800ac38:	0800b880 	.word	0x0800b880
 800ac3c:	43800000 	.word	0x43800000
 800ac40:	3b800000 	.word	0x3b800000
 800ac44:	00000000 	.word	0x00000000
 800ac48:	9b02      	ldr	r3, [sp, #8]
 800ac4a:	eeb0 0a48 	vmov.f32	s0, s16
 800ac4e:	eba3 0008 	sub.w	r0, r3, r8
 800ac52:	f000 f8e7 	bl	800ae24 <scalbnf>
 800ac56:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800ac3c <__kernel_rem_pio2f+0x2fc>
 800ac5a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ac5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac62:	db19      	blt.n	800ac98 <__kernel_rem_pio2f+0x358>
 800ac64:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800ac40 <__kernel_rem_pio2f+0x300>
 800ac68:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ac6c:	aa08      	add	r2, sp, #32
 800ac6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac72:	3508      	adds	r5, #8
 800ac74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac78:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ac7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac80:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ac84:	ee10 3a10 	vmov	r3, s0
 800ac88:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ac8c:	ee17 3a90 	vmov	r3, s15
 800ac90:	3401      	adds	r4, #1
 800ac92:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ac96:	e74c      	b.n	800ab32 <__kernel_rem_pio2f+0x1f2>
 800ac98:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ac9c:	aa08      	add	r2, sp, #32
 800ac9e:	ee10 3a10 	vmov	r3, s0
 800aca2:	e7f6      	b.n	800ac92 <__kernel_rem_pio2f+0x352>
 800aca4:	a808      	add	r0, sp, #32
 800aca6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800acaa:	9001      	str	r0, [sp, #4]
 800acac:	ee07 0a90 	vmov	s15, r0
 800acb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acb4:	3b01      	subs	r3, #1
 800acb6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800acba:	ee20 0a07 	vmul.f32	s0, s0, s14
 800acbe:	ed62 7a01 	vstmdb	r2!, {s15}
 800acc2:	e743      	b.n	800ab4c <__kernel_rem_pio2f+0x20c>
 800acc4:	ecfc 6a01 	vldmia	ip!, {s13}
 800acc8:	ecb5 7a01 	vldmia	r5!, {s14}
 800accc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800acd0:	3001      	adds	r0, #1
 800acd2:	4550      	cmp	r0, sl
 800acd4:	dc01      	bgt.n	800acda <__kernel_rem_pio2f+0x39a>
 800acd6:	4282      	cmp	r2, r0
 800acd8:	daf4      	bge.n	800acc4 <__kernel_rem_pio2f+0x384>
 800acda:	a858      	add	r0, sp, #352	@ 0x160
 800acdc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ace0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800ace4:	3b01      	subs	r3, #1
 800ace6:	e735      	b.n	800ab54 <__kernel_rem_pio2f+0x214>
 800ace8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800acea:	2b02      	cmp	r3, #2
 800acec:	dc09      	bgt.n	800ad02 <__kernel_rem_pio2f+0x3c2>
 800acee:	2b00      	cmp	r3, #0
 800acf0:	dc2b      	bgt.n	800ad4a <__kernel_rem_pio2f+0x40a>
 800acf2:	d044      	beq.n	800ad7e <__kernel_rem_pio2f+0x43e>
 800acf4:	f009 0007 	and.w	r0, r9, #7
 800acf8:	b059      	add	sp, #356	@ 0x164
 800acfa:	ecbd 8b04 	vpop	{d8-d9}
 800acfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad02:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ad04:	2b03      	cmp	r3, #3
 800ad06:	d1f5      	bne.n	800acf4 <__kernel_rem_pio2f+0x3b4>
 800ad08:	aa30      	add	r2, sp, #192	@ 0xc0
 800ad0a:	1f0b      	subs	r3, r1, #4
 800ad0c:	4413      	add	r3, r2
 800ad0e:	461a      	mov	r2, r3
 800ad10:	4620      	mov	r0, r4
 800ad12:	2800      	cmp	r0, #0
 800ad14:	f1a2 0204 	sub.w	r2, r2, #4
 800ad18:	dc52      	bgt.n	800adc0 <__kernel_rem_pio2f+0x480>
 800ad1a:	4622      	mov	r2, r4
 800ad1c:	2a01      	cmp	r2, #1
 800ad1e:	f1a3 0304 	sub.w	r3, r3, #4
 800ad22:	dc5d      	bgt.n	800ade0 <__kernel_rem_pio2f+0x4a0>
 800ad24:	ab30      	add	r3, sp, #192	@ 0xc0
 800ad26:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800ac44 <__kernel_rem_pio2f+0x304>
 800ad2a:	440b      	add	r3, r1
 800ad2c:	2c01      	cmp	r4, #1
 800ad2e:	dc67      	bgt.n	800ae00 <__kernel_rem_pio2f+0x4c0>
 800ad30:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800ad34:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800ad38:	2e00      	cmp	r6, #0
 800ad3a:	d167      	bne.n	800ae0c <__kernel_rem_pio2f+0x4cc>
 800ad3c:	edc7 6a00 	vstr	s13, [r7]
 800ad40:	ed87 7a01 	vstr	s14, [r7, #4]
 800ad44:	edc7 7a02 	vstr	s15, [r7, #8]
 800ad48:	e7d4      	b.n	800acf4 <__kernel_rem_pio2f+0x3b4>
 800ad4a:	ab30      	add	r3, sp, #192	@ 0xc0
 800ad4c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800ac44 <__kernel_rem_pio2f+0x304>
 800ad50:	440b      	add	r3, r1
 800ad52:	4622      	mov	r2, r4
 800ad54:	2a00      	cmp	r2, #0
 800ad56:	da24      	bge.n	800ada2 <__kernel_rem_pio2f+0x462>
 800ad58:	b34e      	cbz	r6, 800adae <__kernel_rem_pio2f+0x46e>
 800ad5a:	eef1 7a47 	vneg.f32	s15, s14
 800ad5e:	edc7 7a00 	vstr	s15, [r7]
 800ad62:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800ad66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad6a:	aa31      	add	r2, sp, #196	@ 0xc4
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	429c      	cmp	r4, r3
 800ad70:	da20      	bge.n	800adb4 <__kernel_rem_pio2f+0x474>
 800ad72:	b10e      	cbz	r6, 800ad78 <__kernel_rem_pio2f+0x438>
 800ad74:	eef1 7a67 	vneg.f32	s15, s15
 800ad78:	edc7 7a01 	vstr	s15, [r7, #4]
 800ad7c:	e7ba      	b.n	800acf4 <__kernel_rem_pio2f+0x3b4>
 800ad7e:	ab30      	add	r3, sp, #192	@ 0xc0
 800ad80:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800ac44 <__kernel_rem_pio2f+0x304>
 800ad84:	440b      	add	r3, r1
 800ad86:	2c00      	cmp	r4, #0
 800ad88:	da05      	bge.n	800ad96 <__kernel_rem_pio2f+0x456>
 800ad8a:	b10e      	cbz	r6, 800ad90 <__kernel_rem_pio2f+0x450>
 800ad8c:	eef1 7a67 	vneg.f32	s15, s15
 800ad90:	edc7 7a00 	vstr	s15, [r7]
 800ad94:	e7ae      	b.n	800acf4 <__kernel_rem_pio2f+0x3b4>
 800ad96:	ed33 7a01 	vldmdb	r3!, {s14}
 800ad9a:	3c01      	subs	r4, #1
 800ad9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ada0:	e7f1      	b.n	800ad86 <__kernel_rem_pio2f+0x446>
 800ada2:	ed73 7a01 	vldmdb	r3!, {s15}
 800ada6:	3a01      	subs	r2, #1
 800ada8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800adac:	e7d2      	b.n	800ad54 <__kernel_rem_pio2f+0x414>
 800adae:	eef0 7a47 	vmov.f32	s15, s14
 800adb2:	e7d4      	b.n	800ad5e <__kernel_rem_pio2f+0x41e>
 800adb4:	ecb2 7a01 	vldmia	r2!, {s14}
 800adb8:	3301      	adds	r3, #1
 800adba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800adbe:	e7d6      	b.n	800ad6e <__kernel_rem_pio2f+0x42e>
 800adc0:	edd2 7a00 	vldr	s15, [r2]
 800adc4:	edd2 6a01 	vldr	s13, [r2, #4]
 800adc8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800adcc:	3801      	subs	r0, #1
 800adce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800add2:	ed82 7a00 	vstr	s14, [r2]
 800add6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adda:	edc2 7a01 	vstr	s15, [r2, #4]
 800adde:	e798      	b.n	800ad12 <__kernel_rem_pio2f+0x3d2>
 800ade0:	edd3 7a00 	vldr	s15, [r3]
 800ade4:	edd3 6a01 	vldr	s13, [r3, #4]
 800ade8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800adec:	3a01      	subs	r2, #1
 800adee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800adf2:	ed83 7a00 	vstr	s14, [r3]
 800adf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adfa:	edc3 7a01 	vstr	s15, [r3, #4]
 800adfe:	e78d      	b.n	800ad1c <__kernel_rem_pio2f+0x3dc>
 800ae00:	ed33 7a01 	vldmdb	r3!, {s14}
 800ae04:	3c01      	subs	r4, #1
 800ae06:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ae0a:	e78f      	b.n	800ad2c <__kernel_rem_pio2f+0x3ec>
 800ae0c:	eef1 6a66 	vneg.f32	s13, s13
 800ae10:	eeb1 7a47 	vneg.f32	s14, s14
 800ae14:	edc7 6a00 	vstr	s13, [r7]
 800ae18:	ed87 7a01 	vstr	s14, [r7, #4]
 800ae1c:	eef1 7a67 	vneg.f32	s15, s15
 800ae20:	e790      	b.n	800ad44 <__kernel_rem_pio2f+0x404>
 800ae22:	bf00      	nop

0800ae24 <scalbnf>:
 800ae24:	ee10 3a10 	vmov	r3, s0
 800ae28:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800ae2c:	d02b      	beq.n	800ae86 <scalbnf+0x62>
 800ae2e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ae32:	d302      	bcc.n	800ae3a <scalbnf+0x16>
 800ae34:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ae38:	4770      	bx	lr
 800ae3a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800ae3e:	d123      	bne.n	800ae88 <scalbnf+0x64>
 800ae40:	4b24      	ldr	r3, [pc, #144]	@ (800aed4 <scalbnf+0xb0>)
 800ae42:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800aed8 <scalbnf+0xb4>
 800ae46:	4298      	cmp	r0, r3
 800ae48:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ae4c:	db17      	blt.n	800ae7e <scalbnf+0x5a>
 800ae4e:	ee10 3a10 	vmov	r3, s0
 800ae52:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ae56:	3a19      	subs	r2, #25
 800ae58:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ae5c:	4288      	cmp	r0, r1
 800ae5e:	dd15      	ble.n	800ae8c <scalbnf+0x68>
 800ae60:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800aedc <scalbnf+0xb8>
 800ae64:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800aee0 <scalbnf+0xbc>
 800ae68:	ee10 3a10 	vmov	r3, s0
 800ae6c:	eeb0 7a67 	vmov.f32	s14, s15
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	bfb8      	it	lt
 800ae74:	eef0 7a66 	vmovlt.f32	s15, s13
 800ae78:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ae7c:	4770      	bx	lr
 800ae7e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800aee4 <scalbnf+0xc0>
 800ae82:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ae86:	4770      	bx	lr
 800ae88:	0dd2      	lsrs	r2, r2, #23
 800ae8a:	e7e5      	b.n	800ae58 <scalbnf+0x34>
 800ae8c:	4410      	add	r0, r2
 800ae8e:	28fe      	cmp	r0, #254	@ 0xfe
 800ae90:	dce6      	bgt.n	800ae60 <scalbnf+0x3c>
 800ae92:	2800      	cmp	r0, #0
 800ae94:	dd06      	ble.n	800aea4 <scalbnf+0x80>
 800ae96:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ae9a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ae9e:	ee00 3a10 	vmov	s0, r3
 800aea2:	4770      	bx	lr
 800aea4:	f110 0f16 	cmn.w	r0, #22
 800aea8:	da09      	bge.n	800aebe <scalbnf+0x9a>
 800aeaa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800aee4 <scalbnf+0xc0>
 800aeae:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800aee8 <scalbnf+0xc4>
 800aeb2:	ee10 3a10 	vmov	r3, s0
 800aeb6:	eeb0 7a67 	vmov.f32	s14, s15
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	e7d9      	b.n	800ae72 <scalbnf+0x4e>
 800aebe:	3019      	adds	r0, #25
 800aec0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800aec4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800aec8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800aeec <scalbnf+0xc8>
 800aecc:	ee07 3a90 	vmov	s15, r3
 800aed0:	e7d7      	b.n	800ae82 <scalbnf+0x5e>
 800aed2:	bf00      	nop
 800aed4:	ffff3cb0 	.word	0xffff3cb0
 800aed8:	4c000000 	.word	0x4c000000
 800aedc:	7149f2ca 	.word	0x7149f2ca
 800aee0:	f149f2ca 	.word	0xf149f2ca
 800aee4:	0da24260 	.word	0x0da24260
 800aee8:	8da24260 	.word	0x8da24260
 800aeec:	33000000 	.word	0x33000000

0800aef0 <floorf>:
 800aef0:	ee10 3a10 	vmov	r3, s0
 800aef4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800aef8:	3a7f      	subs	r2, #127	@ 0x7f
 800aefa:	2a16      	cmp	r2, #22
 800aefc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800af00:	dc2b      	bgt.n	800af5a <floorf+0x6a>
 800af02:	2a00      	cmp	r2, #0
 800af04:	da12      	bge.n	800af2c <floorf+0x3c>
 800af06:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800af6c <floorf+0x7c>
 800af0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800af0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800af12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af16:	dd06      	ble.n	800af26 <floorf+0x36>
 800af18:	2b00      	cmp	r3, #0
 800af1a:	da24      	bge.n	800af66 <floorf+0x76>
 800af1c:	2900      	cmp	r1, #0
 800af1e:	4b14      	ldr	r3, [pc, #80]	@ (800af70 <floorf+0x80>)
 800af20:	bf08      	it	eq
 800af22:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800af26:	ee00 3a10 	vmov	s0, r3
 800af2a:	4770      	bx	lr
 800af2c:	4911      	ldr	r1, [pc, #68]	@ (800af74 <floorf+0x84>)
 800af2e:	4111      	asrs	r1, r2
 800af30:	420b      	tst	r3, r1
 800af32:	d0fa      	beq.n	800af2a <floorf+0x3a>
 800af34:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800af6c <floorf+0x7c>
 800af38:	ee30 0a27 	vadd.f32	s0, s0, s15
 800af3c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800af40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af44:	ddef      	ble.n	800af26 <floorf+0x36>
 800af46:	2b00      	cmp	r3, #0
 800af48:	bfbe      	ittt	lt
 800af4a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800af4e:	fa40 f202 	asrlt.w	r2, r0, r2
 800af52:	189b      	addlt	r3, r3, r2
 800af54:	ea23 0301 	bic.w	r3, r3, r1
 800af58:	e7e5      	b.n	800af26 <floorf+0x36>
 800af5a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800af5e:	d3e4      	bcc.n	800af2a <floorf+0x3a>
 800af60:	ee30 0a00 	vadd.f32	s0, s0, s0
 800af64:	4770      	bx	lr
 800af66:	2300      	movs	r3, #0
 800af68:	e7dd      	b.n	800af26 <floorf+0x36>
 800af6a:	bf00      	nop
 800af6c:	7149f2ca 	.word	0x7149f2ca
 800af70:	bf800000 	.word	0xbf800000
 800af74:	007fffff 	.word	0x007fffff

0800af78 <_init>:
 800af78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7a:	bf00      	nop
 800af7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af7e:	bc08      	pop	{r3}
 800af80:	469e      	mov	lr, r3
 800af82:	4770      	bx	lr

0800af84 <_fini>:
 800af84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af86:	bf00      	nop
 800af88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af8a:	bc08      	pop	{r3}
 800af8c:	469e      	mov	lr, r3
 800af8e:	4770      	bx	lr
