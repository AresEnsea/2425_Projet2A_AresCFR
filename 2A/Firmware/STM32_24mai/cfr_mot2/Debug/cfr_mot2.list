
cfr_mot2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adc8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000940  0800af58  0800af58  0000bf58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b898  0800b898  0000d1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b898  0800b898  0000c898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8a0  0800b8a0  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8a0  0800b8a0  0000c8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b8a4  0800b8a4  0000c8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800b8a8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  200001e0  0800ba88  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  0800ba88  0000d7c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001252c  00000000  00000000  0000d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e6  00000000  00000000  0001f73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001078  00000000  00000000  00021e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cd1  00000000  00000000  00022ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028095  00000000  00000000  00023b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001418d  00000000  00000000  0004bc06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f510f  00000000  00000000  0005fd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00154ea2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005938  00000000  00000000  00154ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0015a820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800af40 	.word	0x0800af40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800af40 	.word	0x0800af40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f40:	1d39      	adds	r1, r7, #4
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	2201      	movs	r2, #1
 8000f48:	4803      	ldr	r0, [pc, #12]	@ (8000f58 <__io_putchar+0x20>)
 8000f4a:	f004 ff8b 	bl	8005e64 <HAL_UART_Transmit>
    return ch;
 8000f4e:	687b      	ldr	r3, [r7, #4]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	2000041c 	.word	0x2000041c
 8000f5c:	00000000 	.word	0x00000000

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f64:	b0d9      	sub	sp, #356	@ 0x164
 8000f66:	af10      	add	r7, sp, #64	@ 0x40
  HAL_Init();
 8000f68:	f001 feac 	bl	8002cc4 <HAL_Init>
  SystemClock_Config();
 8000f6c:	f000 ff08 	bl	8001d80 <SystemClock_Config>
  MX_GPIO_Init();
 8000f70:	f001 f9a6 	bl	80022c0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f74:	f001 f8cc 	bl	8002110 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 8000f78:	f000 ff54 	bl	8001e24 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000f7c:	f001 f86e 	bl	800205c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000f80:	f001 f80c 	bl	8001f9c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f84:	f001 f83a 	bl	8001ffc <MX_USART3_UART_Init>
  MX_UART4_Init();
 8000f88:	f000 ff78 	bl	8001e7c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000f8c:	f000 ffd6 	bl	8001f3c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000f90:	f001 f940 	bl	8002214 <MX_TIM3_Init>
  MX_UART5_Init();
 8000f94:	f000 ffa2 	bl	8001edc <MX_UART5_Init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000f98:	2108      	movs	r1, #8
 8000f9a:	48c7      	ldr	r0, [pc, #796]	@ (80012b8 <main+0x358>)
 8000f9c:	f003 fe38 	bl	8004c10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000fa0:	210c      	movs	r1, #12
 8000fa2:	48c5      	ldr	r0, [pc, #788]	@ (80012b8 <main+0x358>)
 8000fa4:	f003 fe34 	bl	8004c10 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)rx_data, sizeof(rx_data));
 8000fa8:	221b      	movs	r2, #27
 8000faa:	49c4      	ldr	r1, [pc, #784]	@ (80012bc <main+0x35c>)
 8000fac:	48c4      	ldr	r0, [pc, #784]	@ (80012c0 <main+0x360>)
 8000fae:	f004 ffe3 	bl	8005f78 <HAL_UART_Receive_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000fb2:	213c      	movs	r1, #60	@ 0x3c
 8000fb4:	48c3      	ldr	r0, [pc, #780]	@ (80012c4 <main+0x364>)
 8000fb6:	f003 ffd7 	bl	8004f68 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000fba:	213c      	movs	r1, #60	@ 0x3c
 8000fbc:	48c2      	ldr	r0, [pc, #776]	@ (80012c8 <main+0x368>)
 8000fbe:	f003 ffd3 	bl	8004f68 <HAL_TIM_Encoder_Start>
  prev_left = (int16_t)__HAL_TIM_GET_COUNTER(&htim3);
 8000fc2:	4bc0      	ldr	r3, [pc, #768]	@ (80012c4 <main+0x364>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc8:	b21a      	sxth	r2, r3
 8000fca:	4bc0      	ldr	r3, [pc, #768]	@ (80012cc <main+0x36c>)
 8000fcc:	801a      	strh	r2, [r3, #0]
  prev_right = (int16_t)__HAL_TIM_GET_COUNTER(&htim1);
 8000fce:	4bbe      	ldr	r3, [pc, #760]	@ (80012c8 <main+0x368>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	4bbe      	ldr	r3, [pc, #760]	@ (80012d0 <main+0x370>)
 8000fd8:	801a      	strh	r2, [r3, #0]
  origin_left = prev_left;
 8000fda:	4bbc      	ldr	r3, [pc, #752]	@ (80012cc <main+0x36c>)
 8000fdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4bbc      	ldr	r3, [pc, #752]	@ (80012d4 <main+0x374>)
 8000fe4:	601a      	str	r2, [r3, #0]
  origin_right = prev_right;
 8000fe6:	4bba      	ldr	r3, [pc, #744]	@ (80012d0 <main+0x370>)
 8000fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4bba      	ldr	r3, [pc, #744]	@ (80012d8 <main+0x378>)
 8000ff0:	601a      	str	r2, [r3, #0]

  while (1)
  {
    int offset = -1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    for (int j = 0; j < sizeof(rx_data); j++) {
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001000:	e010      	b.n	8001024 <main+0xc4>
      if (rx_data[j] == '>') {
 8001002:	4aae      	ldr	r2, [pc, #696]	@ (80012bc <main+0x35c>)
 8001004:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b3e      	cmp	r3, #62	@ 0x3e
 800100e:	d104      	bne.n	800101a <main+0xba>
        offset = j;
 8001010:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001014:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        break;
 8001018:	e008      	b.n	800102c <main+0xcc>
    for (int j = 0; j < sizeof(rx_data); j++) {
 800101a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800101e:	3301      	adds	r3, #1
 8001020:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001024:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001028:	2b1a      	cmp	r3, #26
 800102a:	d9ea      	bls.n	8001002 <main+0xa2>
      }
    }

    if (offset >= 0) {
 800102c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001030:	2b00      	cmp	r3, #0
 8001032:	f2c0 82ca 	blt.w	80015ca <main+0x66a>
      char console_data[29];
      for (int i = 0; i < 27; i++) {
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800103c:	e01e      	b.n	800107c <main+0x11c>
        console_data[i] = rx_data[(offset + i) % 27];
 800103e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001046:	18d1      	adds	r1, r2, r3
 8001048:	4ba4      	ldr	r3, [pc, #656]	@ (80012dc <main+0x37c>)
 800104a:	fb83 2301 	smull	r2, r3, r3, r1
 800104e:	10da      	asrs	r2, r3, #3
 8001050:	17cb      	asrs	r3, r1, #31
 8001052:	1ad2      	subs	r2, r2, r3
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	00da      	lsls	r2, r3, #3
 800105c:	4413      	add	r3, r2
 800105e:	1aca      	subs	r2, r1, r3
 8001060:	4b96      	ldr	r3, [pc, #600]	@ (80012bc <main+0x35c>)
 8001062:	5c99      	ldrb	r1, [r3, r2]
 8001064:	f107 028c 	add.w	r2, r7, #140	@ 0x8c
 8001068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800106c:	4413      	add	r3, r2
 800106e:	460a      	mov	r2, r1
 8001070:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < 27; i++) {
 8001072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001076:	3301      	adds	r3, #1
 8001078:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800107c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001080:	2b1a      	cmp	r3, #26
 8001082:	dddc      	ble.n	800103e <main+0xde>
      }
      console_data[27] = '\r';
 8001084:	230d      	movs	r3, #13
 8001086:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
      console_data[28] = '\n';
 800108a:	230a      	movs	r3, #10
 800108c:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
      HAL_UART_Transmit(&huart2, (uint8_t *)console_data, 29, HAL_MAX_DELAY);
 8001090:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8001094:	f04f 33ff 	mov.w	r3, #4294967295
 8001098:	221d      	movs	r2, #29
 800109a:	4891      	ldr	r0, [pc, #580]	@ (80012e0 <main+0x380>)
 800109c:	f004 fee2 	bl	8005e64 <HAL_UART_Transmit>

      char mot_maxon_dataD[5], mot_maxon_dataG[5];
      for (int i = 0; i < 4; i++) {
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80010a6:	e01f      	b.n	80010e8 <main+0x188>
        mot_maxon_dataD[i] = rx_data[(offset + 2 + i) % 27];
 80010a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80010ac:	1c9a      	adds	r2, r3, #2
 80010ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80010b2:	18d1      	adds	r1, r2, r3
 80010b4:	4b89      	ldr	r3, [pc, #548]	@ (80012dc <main+0x37c>)
 80010b6:	fb83 2301 	smull	r2, r3, r3, r1
 80010ba:	10da      	asrs	r2, r3, #3
 80010bc:	17cb      	asrs	r3, r1, #31
 80010be:	1ad2      	subs	r2, r2, r3
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	00da      	lsls	r2, r3, #3
 80010c8:	4413      	add	r3, r2
 80010ca:	1aca      	subs	r2, r1, r3
 80010cc:	4b7b      	ldr	r3, [pc, #492]	@ (80012bc <main+0x35c>)
 80010ce:	5c99      	ldrb	r1, [r3, r2]
 80010d0:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 80010d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80010d8:	4413      	add	r3, r2
 80010da:	460a      	mov	r2, r1
 80010dc:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < 4; i++) {
 80010de:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80010e2:	3301      	adds	r3, #1
 80010e4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80010e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	dddb      	ble.n	80010a8 <main+0x148>
      }
      mot_maxon_dataD[4] = '\0';
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
      int target_mm_D = atoi(mot_maxon_dataD);
 80010f6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80010fa:	4618      	mov	r0, r3
 80010fc:	f006 fa4e 	bl	800759c <atoi>
 8001100:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
      if (target_mm_D < 0) target_mm_D = 0;
 8001104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001108:	2b00      	cmp	r3, #0
 800110a:	da02      	bge.n	8001112 <main+0x1b2>
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      int inv_d = rx_data[(offset + 1) % 27] - '0';
 8001112:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001116:	1c59      	adds	r1, r3, #1
 8001118:	4b70      	ldr	r3, [pc, #448]	@ (80012dc <main+0x37c>)
 800111a:	fb83 2301 	smull	r2, r3, r3, r1
 800111e:	10da      	asrs	r2, r3, #3
 8001120:	17cb      	asrs	r3, r1, #31
 8001122:	1ad2      	subs	r2, r2, r3
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	00da      	lsls	r2, r3, #3
 800112c:	4413      	add	r3, r2
 800112e:	1aca      	subs	r2, r1, r3
 8001130:	4b62      	ldr	r3, [pc, #392]	@ (80012bc <main+0x35c>)
 8001132:	5c9b      	ldrb	r3, [r3, r2]
 8001134:	3b30      	subs	r3, #48	@ 0x30
 8001136:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
      if (inv_d != 0 && inv_d != 1) inv_d = 0;
 800113a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <main+0x1f0>
 8001142:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001146:	2b01      	cmp	r3, #1
 8001148:	d002      	beq.n	8001150 <main+0x1f0>
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108

      for (int i = 0; i < 4; i++) {
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001156:	e01f      	b.n	8001198 <main+0x238>
        mot_maxon_dataG[i] = rx_data[(offset + 7 + i) % 27];
 8001158:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800115c:	1dda      	adds	r2, r3, #7
 800115e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001162:	18d1      	adds	r1, r2, r3
 8001164:	4b5d      	ldr	r3, [pc, #372]	@ (80012dc <main+0x37c>)
 8001166:	fb83 2301 	smull	r2, r3, r3, r1
 800116a:	10da      	asrs	r2, r3, #3
 800116c:	17cb      	asrs	r3, r1, #31
 800116e:	1ad2      	subs	r2, r2, r3
 8001170:	4613      	mov	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	4413      	add	r3, r2
 8001176:	00da      	lsls	r2, r3, #3
 8001178:	4413      	add	r3, r2
 800117a:	1aca      	subs	r2, r1, r3
 800117c:	4b4f      	ldr	r3, [pc, #316]	@ (80012bc <main+0x35c>)
 800117e:	5c99      	ldrb	r1, [r3, r2]
 8001180:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8001184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001188:	4413      	add	r3, r2
 800118a:	460a      	mov	r2, r1
 800118c:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < 4; i++) {
 800118e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001192:	3301      	adds	r3, #1
 8001194:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800119c:	2b03      	cmp	r3, #3
 800119e:	dddb      	ble.n	8001158 <main+0x1f8>
      }
      mot_maxon_dataG[4] = '\0';
 80011a0:	2300      	movs	r3, #0
 80011a2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
      int target_mm_G = atoi(mot_maxon_dataG);
 80011a6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011aa:	4618      	mov	r0, r3
 80011ac:	f006 f9f6 	bl	800759c <atoi>
 80011b0:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
      if (target_mm_G < 0) target_mm_G = 0;
 80011b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	da02      	bge.n	80011c2 <main+0x262>
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100

      int inv_g = rx_data[(offset + 6) % 27] - '0';
 80011c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80011c6:	1d99      	adds	r1, r3, #6
 80011c8:	4b44      	ldr	r3, [pc, #272]	@ (80012dc <main+0x37c>)
 80011ca:	fb83 2301 	smull	r2, r3, r3, r1
 80011ce:	10da      	asrs	r2, r3, #3
 80011d0:	17cb      	asrs	r3, r1, #31
 80011d2:	1ad2      	subs	r2, r2, r3
 80011d4:	4613      	mov	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	4413      	add	r3, r2
 80011da:	00da      	lsls	r2, r3, #3
 80011dc:	4413      	add	r3, r2
 80011de:	1aca      	subs	r2, r1, r3
 80011e0:	4b36      	ldr	r3, [pc, #216]	@ (80012bc <main+0x35c>)
 80011e2:	5c9b      	ldrb	r3, [r3, r2]
 80011e4:	3b30      	subs	r3, #48	@ 0x30
 80011e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
      if (inv_g != 0 && inv_g != 1) inv_g = 0;
 80011ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d006      	beq.n	8001200 <main+0x2a0>
 80011f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d002      	beq.n	8001200 <main+0x2a0>
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

      float distance_per_count = WHEEL_CIRCUMFERENCE / ENCODER_COUNTS_PER_REV;
 8001200:	4b38      	ldr	r3, [pc, #224]	@ (80012e4 <main+0x384>)
 8001202:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
      int32_t counts_D = (int32_t)((float)target_mm_D / 1000.0f / distance_per_count);
 8001206:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001212:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80012e8 <main+0x388>
 8001216:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800121a:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800121e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001226:	ee17 3a90 	vmov	r3, s15
 800122a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      int32_t counts_G = (int32_t)((float)target_mm_G / 1000.0f / distance_per_count);
 800122e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80012e8 <main+0x388>
 800123e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001242:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8001246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800124a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800124e:	ee17 3a90 	vmov	r3, s15
 8001252:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      target_left = origin_left + (inv_g == 0 ? counts_G : -counts_G);
 8001256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <main+0x306>
 800125e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001262:	425b      	negs	r3, r3
 8001264:	e001      	b.n	800126a <main+0x30a>
 8001266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800126a:	4a1a      	ldr	r2, [pc, #104]	@ (80012d4 <main+0x374>)
 800126c:	6812      	ldr	r2, [r2, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a1e      	ldr	r2, [pc, #120]	@ (80012ec <main+0x38c>)
 8001272:	6013      	str	r3, [r2, #0]
      target_right = origin_right + (inv_d == 0 ? counts_D : -counts_D);
 8001274:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <main+0x324>
 800127c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001280:	425b      	negs	r3, r3
 8001282:	e001      	b.n	8001288 <main+0x328>
 8001284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001288:	4a13      	ldr	r2, [pc, #76]	@ (80012d8 <main+0x378>)
 800128a:	6812      	ldr	r2, [r2, #0]
 800128c:	4413      	add	r3, r2
 800128e:	4a18      	ldr	r2, [pc, #96]	@ (80012f0 <main+0x390>)
 8001290:	6013      	str	r3, [r2, #0]

      // Activer le contrôle uniquement si non verrouillé
      if (!control_locked) {
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <main+0x394>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	f083 0301 	eor.w	r3, r3, #1
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 808a 	beq.w	80013b6 <main+0x456>
        position_control_active = (target_mm_D > 0 || target_mm_G > 0);
 80012a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	dc03      	bgt.n	80012b2 <main+0x352>
 80012aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	dd22      	ble.n	80012f8 <main+0x398>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e021      	b.n	80012fa <main+0x39a>
 80012b6:	bf00      	nop
 80012b8:	20000578 	.word	0x20000578
 80012bc:	20000610 	.word	0x20000610
 80012c0:	200001fc 	.word	0x200001fc
 80012c4:	200005c4 	.word	0x200005c4
 80012c8:	2000052c 	.word	0x2000052c
 80012cc:	20000638 	.word	0x20000638
 80012d0:	2000063a 	.word	0x2000063a
 80012d4:	2000065c 	.word	0x2000065c
 80012d8:	20000660 	.word	0x20000660
 80012dc:	4bda12f7 	.word	0x4bda12f7
 80012e0:	2000041c 	.word	0x2000041c
 80012e4:	38752546 	.word	0x38752546
 80012e8:	447a0000 	.word	0x447a0000
 80012ec:	20000654 	.word	0x20000654
 80012f0:	20000658 	.word	0x20000658
 80012f4:	20000650 	.word	0x20000650
 80012f8:	2300      	movs	r3, #0
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b63      	ldr	r3, [pc, #396]	@ (8001490 <main+0x530>)
 8001302:	701a      	strb	r2, [r3, #0]
        v_L_base = position_control_active ? low_speed : 0;
 8001304:	4b62      	ldr	r3, [pc, #392]	@ (8001490 <main+0x530>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <main+0x3b0>
 800130c:	23c8      	movs	r3, #200	@ 0xc8
 800130e:	e000      	b.n	8001312 <main+0x3b2>
 8001310:	2300      	movs	r3, #0
 8001312:	4a60      	ldr	r2, [pc, #384]	@ (8001494 <main+0x534>)
 8001314:	6013      	str	r3, [r2, #0]
        v_R_base = position_control_active ? (int)(low_speed * right_motor_compensation) : 0;
 8001316:	4b5e      	ldr	r3, [pc, #376]	@ (8001490 <main+0x530>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00c      	beq.n	8001338 <main+0x3d8>
 800131e:	eddf 7a5e 	vldr	s15, [pc, #376]	@ 8001498 <main+0x538>
 8001322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001326:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 800149c <main+0x53c>
 800132a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800132e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001332:	ee17 2a90 	vmov	r2, s15
 8001336:	e000      	b.n	800133a <main+0x3da>
 8001338:	2200      	movs	r2, #0
 800133a:	4b59      	ldr	r3, [pc, #356]	@ (80014a0 <main+0x540>)
 800133c:	601a      	str	r2, [r3, #0]
        inv_L = inv_g;
 800133e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001342:	b2da      	uxtb	r2, r3
 8001344:	4b57      	ldr	r3, [pc, #348]	@ (80014a4 <main+0x544>)
 8001346:	701a      	strb	r2, [r3, #0]
        inv_R = inv_d;
 8001348:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b56      	ldr	r3, [pc, #344]	@ (80014a8 <main+0x548>)
 8001350:	701a      	strb	r2, [r3, #0]
        is_straight = (target_mm_G == target_mm_D) && (inv_L == inv_R);
 8001352:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8001356:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800135a:	429a      	cmp	r2, r3
 800135c:	d107      	bne.n	800136e <main+0x40e>
 800135e:	4b51      	ldr	r3, [pc, #324]	@ (80014a4 <main+0x544>)
 8001360:	781a      	ldrb	r2, [r3, #0]
 8001362:	4b51      	ldr	r3, [pc, #324]	@ (80014a8 <main+0x548>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d101      	bne.n	800136e <main+0x40e>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <main+0x410>
 800136e:	2300      	movs	r3, #0
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b4d      	ldr	r3, [pc, #308]	@ (80014ac <main+0x54c>)
 8001378:	701a      	strb	r2, [r3, #0]
        if (is_straight) {
 800137a:	4b4c      	ldr	r3, [pc, #304]	@ (80014ac <main+0x54c>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00a      	beq.n	8001398 <main+0x438>
          s = (inv_L == 0) ? 1 : -1;
 8001382:	4b48      	ldr	r3, [pc, #288]	@ (80014a4 <main+0x544>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <main+0x42e>
 800138a:	2301      	movs	r3, #1
 800138c:	e001      	b.n	8001392 <main+0x432>
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	4a47      	ldr	r2, [pc, #284]	@ (80014b0 <main+0x550>)
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e003      	b.n	80013a0 <main+0x440>
        } else {
          e_sum = 0.0f;
 8001398:	4b46      	ldr	r3, [pc, #280]	@ (80014b4 <main+0x554>)
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
        }
        mot_maxon_both(v_R_base, inv_R, v_L_base, inv_L);
 80013a0:	4b3f      	ldr	r3, [pc, #252]	@ (80014a0 <main+0x540>)
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	4b40      	ldr	r3, [pc, #256]	@ (80014a8 <main+0x548>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001494 <main+0x534>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b3d      	ldr	r3, [pc, #244]	@ (80014a4 <main+0x544>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	f001 f82b 	bl	800240c <mot_maxon_both>
      }

      char servo_goal_data[13];
      servo_goal_data[0] = '<';
 80013b6:	233c      	movs	r3, #60	@ 0x3c
 80013b8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
      for (int i = 0; i < 12; i++) {
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80013c2:	e023      	b.n	800140c <main+0x4ac>
        servo_goal_data[i + 1] = rx_data[(offset + 11 + i) % 27];
 80013c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80013c8:	f103 020b 	add.w	r2, r3, #11
 80013cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80013d0:	18d1      	adds	r1, r2, r3
 80013d2:	4b39      	ldr	r3, [pc, #228]	@ (80014b8 <main+0x558>)
 80013d4:	fb83 2301 	smull	r2, r3, r3, r1
 80013d8:	10da      	asrs	r2, r3, #3
 80013da:	17cb      	asrs	r3, r1, #31
 80013dc:	1ad2      	subs	r2, r2, r3
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	00da      	lsls	r2, r3, #3
 80013e6:	4413      	add	r3, r2
 80013e8:	1aca      	subs	r2, r1, r3
 80013ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80013ee:	3301      	adds	r3, #1
 80013f0:	4932      	ldr	r1, [pc, #200]	@ (80014bc <main+0x55c>)
 80013f2:	5c8a      	ldrb	r2, [r1, r2]
 80013f4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80013f8:	f107 0120 	add.w	r1, r7, #32
 80013fc:	440b      	add	r3, r1
 80013fe:	f803 2cb4 	strb.w	r2, [r3, #-180]
      for (int i = 0; i < 12; i++) {
 8001402:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001406:	3301      	adds	r3, #1
 8001408:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800140c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001410:	2b0b      	cmp	r3, #11
 8001412:	ddd7      	ble.n	80013c4 <main+0x464>
      }
      HAL_UART_Transmit(&huart4, (uint8_t *)servo_goal_data, 13, HAL_MAX_DELAY);
 8001414:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
 800141c:	220d      	movs	r2, #13
 800141e:	4828      	ldr	r0, [pc, #160]	@ (80014c0 <main+0x560>)
 8001420:	f004 fd20 	bl	8005e64 <HAL_UART_Transmit>

      char stepper_data1[2];
      for (int i = 0; i < 2; i++) {
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800142a:	e020      	b.n	800146e <main+0x50e>
        stepper_data1[i] = rx_data[(offset + 23 + i) % 27];
 800142c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001430:	f103 0217 	add.w	r2, r3, #23
 8001434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001438:	18d1      	adds	r1, r2, r3
 800143a:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <main+0x558>)
 800143c:	fb83 2301 	smull	r2, r3, r3, r1
 8001440:	10da      	asrs	r2, r3, #3
 8001442:	17cb      	asrs	r3, r1, #31
 8001444:	1ad2      	subs	r2, r2, r3
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	00da      	lsls	r2, r3, #3
 800144e:	4413      	add	r3, r2
 8001450:	1aca      	subs	r2, r1, r3
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <main+0x55c>)
 8001454:	5c99      	ldrb	r1, [r3, r2]
 8001456:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800145a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800145e:	4413      	add	r3, r2
 8001460:	460a      	mov	r2, r1
 8001462:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < 2; i++) {
 8001464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001468:	3301      	adds	r3, #1
 800146a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800146e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001472:	2b01      	cmp	r3, #1
 8001474:	ddda      	ble.n	800142c <main+0x4cc>
      }
      HAL_UART_Transmit(&huart3, (uint8_t *)stepper_data1, 2, HAL_MAX_DELAY);
 8001476:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	2202      	movs	r2, #2
 8001480:	4810      	ldr	r0, [pc, #64]	@ (80014c4 <main+0x564>)
 8001482:	f004 fcef 	bl	8005e64 <HAL_UART_Transmit>

      char stepper_data2[2];
      for (int i = 0; i < 2; i++) {
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800148c:	e03d      	b.n	800150a <main+0x5aa>
 800148e:	bf00      	nop
 8001490:	2000064f 	.word	0x2000064f
 8001494:	20000644 	.word	0x20000644
 8001498:	000000c8 	.word	0x000000c8
 800149c:	3f733333 	.word	0x3f733333
 80014a0:	20000648 	.word	0x20000648
 80014a4:	2000064c 	.word	0x2000064c
 80014a8:	2000064d 	.word	0x2000064d
 80014ac:	2000064e 	.word	0x2000064e
 80014b0:	20000008 	.word	0x20000008
 80014b4:	20000640 	.word	0x20000640
 80014b8:	4bda12f7 	.word	0x4bda12f7
 80014bc:	20000610 	.word	0x20000610
 80014c0:	20000284 	.word	0x20000284
 80014c4:	200004a4 	.word	0x200004a4
        stepper_data2[i] = rx_data[(offset + 25 + i) % 27];
 80014c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80014cc:	f103 0219 	add.w	r2, r3, #25
 80014d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80014d4:	18d1      	adds	r1, r2, r3
 80014d6:	4bbb      	ldr	r3, [pc, #748]	@ (80017c4 <main+0x864>)
 80014d8:	fb83 2301 	smull	r2, r3, r3, r1
 80014dc:	10da      	asrs	r2, r3, #3
 80014de:	17cb      	asrs	r3, r1, #31
 80014e0:	1ad2      	subs	r2, r2, r3
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	00da      	lsls	r2, r3, #3
 80014ea:	4413      	add	r3, r2
 80014ec:	1aca      	subs	r2, r1, r3
 80014ee:	4bb6      	ldr	r3, [pc, #728]	@ (80017c8 <main+0x868>)
 80014f0:	5c99      	ldrb	r1, [r3, r2]
 80014f2:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80014f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80014fa:	4413      	add	r3, r2
 80014fc:	460a      	mov	r2, r1
 80014fe:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < 2; i++) {
 8001500:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001504:	3301      	adds	r3, #1
 8001506:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800150a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800150e:	2b01      	cmp	r3, #1
 8001510:	ddda      	ble.n	80014c8 <main+0x568>
      }
      HAL_UART_Transmit(&huart1, (uint8_t *)stepper_data2, 2, HAL_MAX_DELAY);
 8001512:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001516:	f04f 33ff 	mov.w	r3, #4294967295
 800151a:	2202      	movs	r2, #2
 800151c:	48ab      	ldr	r0, [pc, #684]	@ (80017cc <main+0x86c>)
 800151e:	f004 fca1 	bl	8005e64 <HAL_UART_Transmit>

      if (rx_data[(offset + 26) % 27] == '1') {
 8001522:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001526:	f103 011a 	add.w	r1, r3, #26
 800152a:	4ba6      	ldr	r3, [pc, #664]	@ (80017c4 <main+0x864>)
 800152c:	fb83 2301 	smull	r2, r3, r3, r1
 8001530:	10da      	asrs	r2, r3, #3
 8001532:	17cb      	asrs	r3, r1, #31
 8001534:	1ad2      	subs	r2, r2, r3
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	00da      	lsls	r2, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	1aca      	subs	r2, r1, r3
 8001542:	4ba1      	ldr	r3, [pc, #644]	@ (80017c8 <main+0x868>)
 8001544:	5c9b      	ldrb	r3, [r3, r2]
 8001546:	2b31      	cmp	r3, #49	@ 0x31
 8001548:	d13a      	bne.n	80015c0 <main+0x660>
        x = 0.0f;
 800154a:	4ba1      	ldr	r3, [pc, #644]	@ (80017d0 <main+0x870>)
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
        y = 0.0f;
 8001552:	4ba0      	ldr	r3, [pc, #640]	@ (80017d4 <main+0x874>)
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
        theta = 0.0f;
 800155a:	4b9f      	ldr	r3, [pc, #636]	@ (80017d8 <main+0x878>)
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim3, 0);
 8001562:	4b9e      	ldr	r3, [pc, #632]	@ (80017dc <main+0x87c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	@ 0x24
        __HAL_TIM_SET_COUNTER(&htim1, 0);
 800156a:	4b9d      	ldr	r3, [pc, #628]	@ (80017e0 <main+0x880>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	@ 0x24
        prev_left = 0;
 8001572:	4b9c      	ldr	r3, [pc, #624]	@ (80017e4 <main+0x884>)
 8001574:	2200      	movs	r2, #0
 8001576:	801a      	strh	r2, [r3, #0]
        prev_right = 0;
 8001578:	4b9b      	ldr	r3, [pc, #620]	@ (80017e8 <main+0x888>)
 800157a:	2200      	movs	r2, #0
 800157c:	801a      	strh	r2, [r3, #0]
        origin_left = 0;
 800157e:	4b9b      	ldr	r3, [pc, #620]	@ (80017ec <main+0x88c>)
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
        origin_right = 0;
 8001584:	4b9a      	ldr	r3, [pc, #616]	@ (80017f0 <main+0x890>)
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
        total_dist_left = 0.0f;
 800158a:	4b9a      	ldr	r3, [pc, #616]	@ (80017f4 <main+0x894>)
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
        total_dist_right = 0.0f;
 8001592:	4b99      	ldr	r3, [pc, #612]	@ (80017f8 <main+0x898>)
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
        e_sum = 0.0f;
 800159a:	4b98      	ldr	r3, [pc, #608]	@ (80017fc <main+0x89c>)
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
        position_control_active = false;
 80015a2:	4b97      	ldr	r3, [pc, #604]	@ (8001800 <main+0x8a0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
        control_locked = false;  // Déverrouiller lors de la réinitialisation
 80015a8:	4b96      	ldr	r3, [pc, #600]	@ (8001804 <main+0x8a4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
        mot_maxon_both(0, 0, 0, 0);
 80015ae:	2300      	movs	r3, #0
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	2000      	movs	r0, #0
 80015b6:	f000 ff29 	bl	800240c <mot_maxon_both>
        printf("Odométrie, compteurs d'encodeurs et distances totales réinitialisés à 0\r\n");
 80015ba:	4893      	ldr	r0, [pc, #588]	@ (8001808 <main+0x8a8>)
 80015bc:	f006 fdf8 	bl	80081b0 <puts>
      }

      // Vider le tampon rx_data après traitement
      memset(rx_data, 0, sizeof(rx_data));
 80015c0:	221b      	movs	r2, #27
 80015c2:	2100      	movs	r1, #0
 80015c4:	4880      	ldr	r0, [pc, #512]	@ (80017c8 <main+0x868>)
 80015c6:	f006 ff07 	bl	80083d8 <memset>
    }

    HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)rx_data, sizeof(rx_data));
 80015ca:	221b      	movs	r2, #27
 80015cc:	497e      	ldr	r1, [pc, #504]	@ (80017c8 <main+0x868>)
 80015ce:	488f      	ldr	r0, [pc, #572]	@ (800180c <main+0x8ac>)
 80015d0:	f004 fcd2 	bl	8005f78 <HAL_UART_Receive_IT>

    uint32_t current_time = HAL_GetTick();
 80015d4:	f001 fbe6 	bl	8002da4 <HAL_GetTick>
 80015d8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if (current_time - last_update_time >= 10) {
 80015dc:	4b8c      	ldr	r3, [pc, #560]	@ (8001810 <main+0x8b0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b09      	cmp	r3, #9
 80015e8:	f67f ad03 	bls.w	8000ff2 <main+0x92>
      last_update_time = current_time;
 80015ec:	4a88      	ldr	r2, [pc, #544]	@ (8001810 <main+0x8b0>)
 80015ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80015f2:	6013      	str	r3, [r2, #0]

      int16_t curr_left = (int16_t)__HAL_TIM_GET_COUNTER(&htim3);
 80015f4:	4b79      	ldr	r3, [pc, #484]	@ (80017dc <main+0x87c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      int16_t curr_right = (int16_t)__HAL_TIM_GET_COUNTER(&htim1);
 80015fe:	4b78      	ldr	r3, [pc, #480]	@ (80017e0 <main+0x880>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001604:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc

      int32_t delta_left = (int32_t)curr_left - (int32_t)prev_left;
 8001608:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
 800160c:	4a75      	ldr	r2, [pc, #468]	@ (80017e4 <main+0x884>)
 800160e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      int32_t delta_right = (int32_t)curr_right - (int32_t)prev_right;
 8001618:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	@ 0xcc
 800161c:	4a72      	ldr	r2, [pc, #456]	@ (80017e8 <main+0x888>)
 800161e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

      if (delta_left < -10000 || delta_left > 10000) {
 8001628:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800162c:	4a79      	ldr	r2, [pc, #484]	@ (8001814 <main+0x8b4>)
 800162e:	4293      	cmp	r3, r2
 8001630:	db05      	blt.n	800163e <main+0x6de>
 8001632:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001636:	f242 7210 	movw	r2, #10000	@ 0x2710
 800163a:	4293      	cmp	r3, r2
 800163c:	dd17      	ble.n	800166e <main+0x70e>
        delta_left = (curr_left < prev_left) ? (65536 + curr_left - prev_left) : (curr_left - prev_left);
 800163e:	4b69      	ldr	r3, [pc, #420]	@ (80017e4 <main+0x884>)
 8001640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001644:	f9b7 20ce 	ldrsh.w	r2, [r7, #206]	@ 0xce
 8001648:	429a      	cmp	r2, r3
 800164a:	da08      	bge.n	800165e <main+0x6fe>
 800164c:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
 8001650:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001654:	4a63      	ldr	r2, [pc, #396]	@ (80017e4 <main+0x884>)
 8001656:	f9b2 2000 	ldrsh.w	r2, [r2]
 800165a:	1a9b      	subs	r3, r3, r2
 800165c:	e005      	b.n	800166a <main+0x70a>
 800165e:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
 8001662:	4a60      	ldr	r2, [pc, #384]	@ (80017e4 <main+0x884>)
 8001664:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      }
      if (delta_right < -10000 || delta_right > 10000) {
 800166e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001672:	4a68      	ldr	r2, [pc, #416]	@ (8001814 <main+0x8b4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	db05      	blt.n	8001684 <main+0x724>
 8001678:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800167c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001680:	4293      	cmp	r3, r2
 8001682:	dd17      	ble.n	80016b4 <main+0x754>
        delta_right = (curr_right < prev_right) ? (65536 + curr_right - prev_right) : (curr_right - prev_right);
 8001684:	4b58      	ldr	r3, [pc, #352]	@ (80017e8 <main+0x888>)
 8001686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168a:	f9b7 20cc 	ldrsh.w	r2, [r7, #204]	@ 0xcc
 800168e:	429a      	cmp	r2, r3
 8001690:	da08      	bge.n	80016a4 <main+0x744>
 8001692:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	@ 0xcc
 8001696:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800169a:	4a53      	ldr	r2, [pc, #332]	@ (80017e8 <main+0x888>)
 800169c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016a0:	1a9b      	subs	r3, r3, r2
 80016a2:	e005      	b.n	80016b0 <main+0x750>
 80016a4:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	@ 0xcc
 80016a8:	4a4f      	ldr	r2, [pc, #316]	@ (80017e8 <main+0x888>)
 80016aa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80016ae:	1a9b      	subs	r3, r3, r2
 80016b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      }

      prev_left = curr_left;
 80016b4:	4a4b      	ldr	r2, [pc, #300]	@ (80017e4 <main+0x884>)
 80016b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80016ba:	8013      	strh	r3, [r2, #0]
      prev_right = curr_right;
 80016bc:	4a4a      	ldr	r2, [pc, #296]	@ (80017e8 <main+0x888>)
 80016be:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 80016c2:	8013      	strh	r3, [r2, #0]

      float dist_left = (float)delta_left / ENCODER_COUNTS_PER_REV * WHEEL_CIRCUMFERENCE;
 80016c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80016c8:	ee07 3a90 	vmov	s15, r3
 80016cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d0:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001818 <main+0x8b8>
 80016d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016d8:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 800181c <main+0x8bc>
 80016dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e0:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8
      float dist_right = (float)delta_right / ENCODER_COUNTS_PER_REV * WHEEL_CIRCUMFERENCE;
 80016e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f0:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8001818 <main+0x8b8>
 80016f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016f8:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800181c <main+0x8bc>
 80016fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001700:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4

      total_dist_left += fabs(dist_left);
 8001704:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8001708:	eeb0 7ae7 	vabs.f32	s14, s15
 800170c:	4b39      	ldr	r3, [pc, #228]	@ (80017f4 <main+0x894>)
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001716:	4b37      	ldr	r3, [pc, #220]	@ (80017f4 <main+0x894>)
 8001718:	edc3 7a00 	vstr	s15, [r3]
      total_dist_right += fabs(dist_right);
 800171c:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001720:	eeb0 7ae7 	vabs.f32	s14, s15
 8001724:	4b34      	ldr	r3, [pc, #208]	@ (80017f8 <main+0x898>)
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800172e:	4b32      	ldr	r3, [pc, #200]	@ (80017f8 <main+0x898>)
 8001730:	edc3 7a00 	vstr	s15, [r3]

      if (position_control_active && !control_locked) {
 8001734:	4b32      	ldr	r3, [pc, #200]	@ (8001800 <main+0x8a0>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 819d 	beq.w	8001a78 <main+0xb18>
 800173e:	4b31      	ldr	r3, [pc, #196]	@ (8001804 <main+0x8a4>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	f083 0301 	eor.w	r3, r3, #1
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 8195 	beq.w	8001a78 <main+0xb18>
        // Ajouter une tolérance pour éviter les oscillations autour de la cible
        bool left_reached = (s == 1 && curr_left >= target_left - ENCODER_TOLERANCE) ||
 800174e:	4b34      	ldr	r3, [pc, #208]	@ (8001820 <main+0x8c0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d106      	bne.n	8001764 <main+0x804>
 8001756:	f9b7 20ce 	ldrsh.w	r2, [r7, #206]	@ 0xce
 800175a:	4b32      	ldr	r3, [pc, #200]	@ (8001824 <main+0x8c4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3b05      	subs	r3, #5
 8001760:	429a      	cmp	r2, r3
 8001762:	da0b      	bge.n	800177c <main+0x81c>
                            (s == -1 && curr_left <= target_left + ENCODER_TOLERANCE);
 8001764:	4b2e      	ldr	r3, [pc, #184]	@ (8001820 <main+0x8c0>)
 8001766:	681b      	ldr	r3, [r3, #0]
        bool left_reached = (s == 1 && curr_left >= target_left - ENCODER_TOLERANCE) ||
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d108      	bne.n	8001780 <main+0x820>
                            (s == -1 && curr_left <= target_left + ENCODER_TOLERANCE);
 800176e:	f9b7 20ce 	ldrsh.w	r2, [r7, #206]	@ 0xce
 8001772:	4b2c      	ldr	r3, [pc, #176]	@ (8001824 <main+0x8c4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	3305      	adds	r3, #5
 8001778:	429a      	cmp	r2, r3
 800177a:	dc01      	bgt.n	8001780 <main+0x820>
        bool left_reached = (s == 1 && curr_left >= target_left - ENCODER_TOLERANCE) ||
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <main+0x822>
 8001780:	2300      	movs	r3, #0
 8001782:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 8001786:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
        bool right_reached = (s == 1 && curr_right >= target_right - ENCODER_TOLERANCE) ||
 8001792:	4b23      	ldr	r3, [pc, #140]	@ (8001820 <main+0x8c0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d106      	bne.n	80017a8 <main+0x848>
 800179a:	f9b7 20cc 	ldrsh.w	r2, [r7, #204]	@ 0xcc
 800179e:	4b22      	ldr	r3, [pc, #136]	@ (8001828 <main+0x8c8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	3b05      	subs	r3, #5
 80017a4:	429a      	cmp	r2, r3
 80017a6:	da0b      	bge.n	80017c0 <main+0x860>
                             (s == -1 && curr_right <= target_right + ENCODER_TOLERANCE);
 80017a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <main+0x8c0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
        bool right_reached = (s == 1 && curr_right >= target_right - ENCODER_TOLERANCE) ||
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b0:	d13c      	bne.n	800182c <main+0x8cc>
                             (s == -1 && curr_right <= target_right + ENCODER_TOLERANCE);
 80017b2:	f9b7 20cc 	ldrsh.w	r2, [r7, #204]	@ 0xcc
 80017b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <main+0x8c8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	3305      	adds	r3, #5
 80017bc:	429a      	cmp	r2, r3
 80017be:	dc35      	bgt.n	800182c <main+0x8cc>
        bool right_reached = (s == 1 && curr_right >= target_right - ENCODER_TOLERANCE) ||
 80017c0:	2301      	movs	r3, #1
 80017c2:	e034      	b.n	800182e <main+0x8ce>
 80017c4:	4bda12f7 	.word	0x4bda12f7
 80017c8:	20000610 	.word	0x20000610
 80017cc:	20000394 	.word	0x20000394
 80017d0:	2000062c 	.word	0x2000062c
 80017d4:	20000630 	.word	0x20000630
 80017d8:	20000634 	.word	0x20000634
 80017dc:	200005c4 	.word	0x200005c4
 80017e0:	2000052c 	.word	0x2000052c
 80017e4:	20000638 	.word	0x20000638
 80017e8:	2000063a 	.word	0x2000063a
 80017ec:	2000065c 	.word	0x2000065c
 80017f0:	20000660 	.word	0x20000660
 80017f4:	20000664 	.word	0x20000664
 80017f8:	20000668 	.word	0x20000668
 80017fc:	20000640 	.word	0x20000640
 8001800:	2000064f 	.word	0x2000064f
 8001804:	20000650 	.word	0x20000650
 8001808:	0800af58 	.word	0x0800af58
 800180c:	200001fc 	.word	0x200001fc
 8001810:	2000063c 	.word	0x2000063c
 8001814:	ffffd8f0 	.word	0xffffd8f0
 8001818:	45800000 	.word	0x45800000
 800181c:	3e752546 	.word	0x3e752546
 8001820:	20000008 	.word	0x20000008
 8001824:	20000654 	.word	0x20000654
 8001828:	20000658 	.word	0x20000658
 800182c:	2300      	movs	r3, #0
 800182e:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
 8001832:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2

        int v_L_applied = v_L_base;
 800183e:	4bb5      	ldr	r3, [pc, #724]	@ (8001b14 <main+0xbb4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
        int v_R_applied = v_R_base;
 8001846:	4bb4      	ldr	r3, [pc, #720]	@ (8001b18 <main+0xbb8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

        // Appliquer le contrôleur PI uniquement si les deux roues sont actives et en mouvement droit
        if (is_straight && !left_reached && !right_reached && (v_L_base > 0 || v_R_base > 0)) {
 800184e:	4bb3      	ldr	r3, [pc, #716]	@ (8001b1c <main+0xbbc>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 809b 	beq.w	800198e <main+0xa2e>
 8001858:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800185c:	f083 0301 	eor.w	r3, r3, #1
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8093 	beq.w	800198e <main+0xa2e>
 8001868:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 800186c:	f083 0301 	eor.w	r3, r3, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 808b 	beq.w	800198e <main+0xa2e>
 8001878:	4ba6      	ldr	r3, [pc, #664]	@ (8001b14 <main+0xbb4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	dc04      	bgt.n	800188a <main+0x92a>
 8001880:	4ba5      	ldr	r3, [pc, #660]	@ (8001b18 <main+0xbb8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	f340 8082 	ble.w	800198e <main+0xa2e>
          float e = s * (dist_right - dist_left);
 800188a:	4ba5      	ldr	r3, [pc, #660]	@ (8001b20 <main+0xbc0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001896:	edd7 6a31 	vldr	s13, [r7, #196]	@ 0xc4
 800189a:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 800189e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a6:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
          e_sum += e * 0.01f;
 80018aa:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80018ae:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8001b24 <main+0xbc4>
 80018b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018b6:	4b9c      	ldr	r3, [pc, #624]	@ (8001b28 <main+0xbc8>)
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c0:	4b99      	ldr	r3, [pc, #612]	@ (8001b28 <main+0xbc8>)
 80018c2:	edc3 7a00 	vstr	s15, [r3]
          if (e_sum > 0.1f) e_sum = 0.1f;
 80018c6:	4b98      	ldr	r3, [pc, #608]	@ (8001b28 <main+0xbc8>)
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8001b2c <main+0xbcc>
 80018d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d8:	dd02      	ble.n	80018e0 <main+0x980>
 80018da:	4b93      	ldr	r3, [pc, #588]	@ (8001b28 <main+0xbc8>)
 80018dc:	4a94      	ldr	r2, [pc, #592]	@ (8001b30 <main+0xbd0>)
 80018de:	601a      	str	r2, [r3, #0]
          if (e_sum < -0.1f) e_sum = -0.1f;
 80018e0:	4b91      	ldr	r3, [pc, #580]	@ (8001b28 <main+0xbc8>)
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8001b34 <main+0xbd4>
 80018ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f2:	d502      	bpl.n	80018fa <main+0x99a>
 80018f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001b28 <main+0xbc8>)
 80018f6:	4a90      	ldr	r2, [pc, #576]	@ (8001b38 <main+0xbd8>)
 80018f8:	601a      	str	r2, [r3, #0]
          int Delta_v_L = (int)(K_p * e + K_i * e_sum);
 80018fa:	4b90      	ldr	r3, [pc, #576]	@ (8001b3c <main+0xbdc>)
 80018fc:	ed93 7a00 	vldr	s14, [r3]
 8001900:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001908:	4b8d      	ldr	r3, [pc, #564]	@ (8001b40 <main+0xbe0>)
 800190a:	edd3 6a00 	vldr	s13, [r3]
 800190e:	4b86      	ldr	r3, [pc, #536]	@ (8001b28 <main+0xbc8>)
 8001910:	edd3 7a00 	vldr	s15, [r3]
 8001914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001920:	ee17 3a90 	vmov	r3, s15
 8001924:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
          int Delta_v_R = -Delta_v_L;
 8001928:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800192c:	425b      	negs	r3, r3
 800192e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
          v_L_applied = v_L_base + Delta_v_L;
 8001932:	4b78      	ldr	r3, [pc, #480]	@ (8001b14 <main+0xbb4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800193a:	4413      	add	r3, r2
 800193c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          v_R_applied = v_R_base + Delta_v_R;
 8001940:	4b75      	ldr	r3, [pc, #468]	@ (8001b18 <main+0xbb8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001948:	4413      	add	r3, r2
 800194a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
          if (v_L_applied > 1999) v_L_applied = 1999;
 800194e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001952:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001956:	db03      	blt.n	8001960 <main+0xa00>
 8001958:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 800195c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          if (v_L_applied < 0) v_L_applied = 0;
 8001960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001964:	2b00      	cmp	r3, #0
 8001966:	da02      	bge.n	800196e <main+0xa0e>
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          if (v_R_applied > 1999) v_R_applied = 1999;
 800196e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001972:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001976:	db03      	blt.n	8001980 <main+0xa20>
 8001978:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 800197c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
          if (v_R_applied < 0) v_R_applied = 0;
 8001980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001984:	2b00      	cmp	r3, #0
 8001986:	da02      	bge.n	800198e <main+0xa2e>
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        }

        // Arrêter la roue si elle a atteint sa cible et afficher le message une seule fois
        static uint8_t left_reached_count = 0;
        if (left_reached) {
 800198e:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d010      	beq.n	80019b8 <main+0xa58>
          v_L_applied = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          if (left_reached_count == 0) {
 800199c:	4b69      	ldr	r3, [pc, #420]	@ (8001b44 <main+0xbe4>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10c      	bne.n	80019be <main+0xa5e>
            printf("Roue gauche atteinte: left=%d\r\n", curr_left);
 80019a4:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
 80019a8:	4619      	mov	r1, r3
 80019aa:	4867      	ldr	r0, [pc, #412]	@ (8001b48 <main+0xbe8>)
 80019ac:	f006 fb98 	bl	80080e0 <iprintf>
            left_reached_count = 1;
 80019b0:	4b64      	ldr	r3, [pc, #400]	@ (8001b44 <main+0xbe4>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
 80019b6:	e002      	b.n	80019be <main+0xa5e>
          }
        } else {
          left_reached_count = 0;
 80019b8:	4b62      	ldr	r3, [pc, #392]	@ (8001b44 <main+0xbe4>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
        }

        static uint8_t right_reached_count = 0;
        if (right_reached) {
 80019be:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d010      	beq.n	80019e8 <main+0xa88>
          v_R_applied = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
          if (right_reached_count == 0) {
 80019cc:	4b5f      	ldr	r3, [pc, #380]	@ (8001b4c <main+0xbec>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10c      	bne.n	80019ee <main+0xa8e>
            printf("Roue droite atteinte: right=%d\r\n", curr_right);
 80019d4:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	@ 0xcc
 80019d8:	4619      	mov	r1, r3
 80019da:	485d      	ldr	r0, [pc, #372]	@ (8001b50 <main+0xbf0>)
 80019dc:	f006 fb80 	bl	80080e0 <iprintf>
            right_reached_count = 1;
 80019e0:	4b5a      	ldr	r3, [pc, #360]	@ (8001b4c <main+0xbec>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e002      	b.n	80019ee <main+0xa8e>
          }
        } else {
          right_reached_count = 0;
 80019e8:	4b58      	ldr	r3, [pc, #352]	@ (8001b4c <main+0xbec>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
        }

        // Appliquer les vitesses ajustées
        mot_maxon_both(v_R_applied, inv_R, v_L_applied, inv_L);
 80019ee:	4b59      	ldr	r3, [pc, #356]	@ (8001b54 <main+0xbf4>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4619      	mov	r1, r3
 80019f4:	4b58      	ldr	r3, [pc, #352]	@ (8001b58 <main+0xbf8>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80019fc:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8001a00:	f000 fd04 	bl	800240c <mot_maxon_both>

        // Débogage : afficher les vitesses appliquées
        static uint8_t speed_print_counter = 0;
        speed_print_counter++;
 8001a04:	4b55      	ldr	r3, [pc, #340]	@ (8001b5c <main+0xbfc>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	4b53      	ldr	r3, [pc, #332]	@ (8001b5c <main+0xbfc>)
 8001a0e:	701a      	strb	r2, [r3, #0]
        if (speed_print_counter >= 10) {
 8001a10:	4b52      	ldr	r3, [pc, #328]	@ (8001b5c <main+0xbfc>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b09      	cmp	r3, #9
 8001a16:	d909      	bls.n	8001a2c <main+0xacc>
          speed_print_counter = 0;
 8001a18:	4b50      	ldr	r3, [pc, #320]	@ (8001b5c <main+0xbfc>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
          printf("Vitesses: v_L_applied=%d, v_R_applied=%d\r\n", v_L_applied, v_R_applied);
 8001a1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8001a22:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8001a26:	484e      	ldr	r0, [pc, #312]	@ (8001b60 <main+0xc00>)
 8001a28:	f006 fb5a 	bl	80080e0 <iprintf>
        }

        // Arrêter le contrôle de position si les deux roues ont atteint leurs cibles
        if (left_reached && right_reached) {
 8001a2c:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d021      	beq.n	8001a78 <main+0xb18>
 8001a34:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d01d      	beq.n	8001a78 <main+0xb18>
          position_control_active = false;
 8001a3c:	4b49      	ldr	r3, [pc, #292]	@ (8001b64 <main+0xc04>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
          control_locked = true;  // Verrouiller le contrôle
 8001a42:	4b49      	ldr	r3, [pc, #292]	@ (8001b68 <main+0xc08>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	701a      	strb	r2, [r3, #0]
          v_L_base = 0;
 8001a48:	4b32      	ldr	r3, [pc, #200]	@ (8001b14 <main+0xbb4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
          v_R_base = 0;
 8001a4e:	4b32      	ldr	r3, [pc, #200]	@ (8001b18 <main+0xbb8>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
          e_sum = 0.0f;
 8001a54:	4b34      	ldr	r3, [pc, #208]	@ (8001b28 <main+0xbc8>)
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
          mot_maxon_both(0, 0, 0, 0);  // Forcer l'arrêt des moteurs
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	2000      	movs	r0, #0
 8001a64:	f000 fcd2 	bl	800240c <mot_maxon_both>
          printf("Position cible atteinte: left=%d, right=%d\r\n", curr_left, curr_right);
 8001a68:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
 8001a6c:	f9b7 20cc 	ldrsh.w	r2, [r7, #204]	@ 0xcc
 8001a70:	4619      	mov	r1, r3
 8001a72:	483e      	ldr	r0, [pc, #248]	@ (8001b6c <main+0xc0c>)
 8001a74:	f006 fb34 	bl	80080e0 <iprintf>
        }
      }

      float delta_dist = (dist_left + dist_right) / 2.0f;
 8001a78:	ed97 7a32 	vldr	s14, [r7, #200]	@ 0xc8
 8001a7c:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8001a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a84:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001a88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a8c:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
      float delta_theta = (dist_right - dist_left) / WHEEL_BASE;
 8001a90:	ed97 7a31 	vldr	s14, [r7, #196]	@ 0xc4
 8001a94:	edd7 7a32 	vldr	s15, [r7, #200]	@ 0xc8
 8001a98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a9c:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8001b70 <main+0xc10>
 8001aa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa4:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
      x += delta_dist * cosf(theta);
 8001aa8:	4b32      	ldr	r3, [pc, #200]	@ (8001b74 <main+0xc14>)
 8001aaa:	edd3 7a00 	vldr	s15, [r3]
 8001aae:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab2:	f008 fcc7 	bl	800a444 <cosf>
 8001ab6:	eeb0 7a40 	vmov.f32	s14, s0
 8001aba:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001abe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b78 <main+0xc18>)
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001acc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b78 <main+0xc18>)
 8001ace:	edc3 7a00 	vstr	s15, [r3]
      y += delta_dist * sinf(theta);
 8001ad2:	4b28      	ldr	r3, [pc, #160]	@ (8001b74 <main+0xc14>)
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8001adc:	f008 fcf6 	bl	800a4cc <sinf>
 8001ae0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ae4:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8001ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aec:	4b23      	ldr	r3, [pc, #140]	@ (8001b7c <main+0xc1c>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af6:	4b21      	ldr	r3, [pc, #132]	@ (8001b7c <main+0xc1c>)
 8001af8:	edc3 7a00 	vstr	s15, [r3]
      theta += delta_theta;
 8001afc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b74 <main+0xc14>)
 8001afe:	ed93 7a00 	vldr	s14, [r3]
 8001b02:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b74 <main+0xc14>)
 8001b0c:	edc3 7a00 	vstr	s15, [r3]
      while (theta > M_PI) theta -= 2 * M_PI;
 8001b10:	e049      	b.n	8001ba6 <main+0xc46>
 8001b12:	bf00      	nop
 8001b14:	20000644 	.word	0x20000644
 8001b18:	20000648 	.word	0x20000648
 8001b1c:	2000064e 	.word	0x2000064e
 8001b20:	20000008 	.word	0x20000008
 8001b24:	3c23d70a 	.word	0x3c23d70a
 8001b28:	20000640 	.word	0x20000640
 8001b2c:	3dcccccd 	.word	0x3dcccccd
 8001b30:	3dcccccd 	.word	0x3dcccccd
 8001b34:	bdcccccd 	.word	0xbdcccccd
 8001b38:	bdcccccd 	.word	0xbdcccccd
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000004 	.word	0x20000004
 8001b44:	2000066c 	.word	0x2000066c
 8001b48:	0800afa8 	.word	0x0800afa8
 8001b4c:	2000066d 	.word	0x2000066d
 8001b50:	0800afc8 	.word	0x0800afc8
 8001b54:	2000064d 	.word	0x2000064d
 8001b58:	2000064c 	.word	0x2000064c
 8001b5c:	2000066e 	.word	0x2000066e
 8001b60:	0800afec 	.word	0x0800afec
 8001b64:	2000064f 	.word	0x2000064f
 8001b68:	20000650 	.word	0x20000650
 8001b6c:	0800b018 	.word	0x0800b018
 8001b70:	3e75c28f 	.word	0x3e75c28f
 8001b74:	20000634 	.word	0x20000634
 8001b78:	2000062c 	.word	0x2000062c
 8001b7c:	20000630 	.word	0x20000630
 8001b80:	4b75      	ldr	r3, [pc, #468]	@ (8001d58 <main+0xdf8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe fcdf 	bl	8000548 <__aeabi_f2d>
 8001b8a:	a36d      	add	r3, pc, #436	@ (adr r3, 8001d40 <main+0xde0>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f7fe fb7a 	bl	8000288 <__aeabi_dsub>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f7ff f804 	bl	8000ba8 <__aeabi_d2f>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4a6d      	ldr	r2, [pc, #436]	@ (8001d58 <main+0xdf8>)
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b6c      	ldr	r3, [pc, #432]	@ (8001d58 <main+0xdf8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fccc 	bl	8000548 <__aeabi_f2d>
 8001bb0:	a365      	add	r3, pc, #404	@ (adr r3, 8001d48 <main+0xde8>)
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	f7fe ffaf 	bl	8000b18 <__aeabi_dcmpgt>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1df      	bne.n	8001b80 <main+0xc20>
      while (theta < -M_PI) theta += 2 * M_PI;
 8001bc0:	e012      	b.n	8001be8 <main+0xc88>
 8001bc2:	4b65      	ldr	r3, [pc, #404]	@ (8001d58 <main+0xdf8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fcbe 	bl	8000548 <__aeabi_f2d>
 8001bcc:	a35c      	add	r3, pc, #368	@ (adr r3, 8001d40 <main+0xde0>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	f7fe fb5b 	bl	800028c <__adddf3>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f7fe ffe3 	bl	8000ba8 <__aeabi_d2f>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4a5c      	ldr	r2, [pc, #368]	@ (8001d58 <main+0xdf8>)
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b5b      	ldr	r3, [pc, #364]	@ (8001d58 <main+0xdf8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fcab 	bl	8000548 <__aeabi_f2d>
 8001bf2:	a357      	add	r3, pc, #348	@ (adr r3, 8001d50 <main+0xdf0>)
 8001bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf8:	f7fe ff70 	bl	8000adc <__aeabi_dcmplt>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1df      	bne.n	8001bc2 <main+0xc62>

      static uint8_t odom_send_counter = 0;
      odom_send_counter++;
 8001c02:	4b56      	ldr	r3, [pc, #344]	@ (8001d5c <main+0xdfc>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	3301      	adds	r3, #1
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b54      	ldr	r3, [pc, #336]	@ (8001d5c <main+0xdfc>)
 8001c0c:	701a      	strb	r2, [r3, #0]
      if (odom_send_counter >= 10) {
 8001c0e:	4b53      	ldr	r3, [pc, #332]	@ (8001d5c <main+0xdfc>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b09      	cmp	r3, #9
 8001c14:	d931      	bls.n	8001c7a <main+0xd1a>
        odom_send_counter = 0;
 8001c16:	4b51      	ldr	r3, [pc, #324]	@ (8001d5c <main+0xdfc>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
        char odom_str[64];
        snprintf(odom_str, sizeof(odom_str), "x:%.3f,y:%.3f,theta:%.3f\r\n", x, y, theta);
 8001c1c:	4b50      	ldr	r3, [pc, #320]	@ (8001d60 <main+0xe00>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fc91 	bl	8000548 <__aeabi_f2d>
 8001c26:	4604      	mov	r4, r0
 8001c28:	460d      	mov	r5, r1
 8001c2a:	4b4e      	ldr	r3, [pc, #312]	@ (8001d64 <main+0xe04>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc8a 	bl	8000548 <__aeabi_f2d>
 8001c34:	4680      	mov	r8, r0
 8001c36:	4689      	mov	r9, r1
 8001c38:	4b47      	ldr	r3, [pc, #284]	@ (8001d58 <main+0xdf8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fc83 	bl	8000548 <__aeabi_f2d>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001c4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001c4e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001c52:	e9cd 4500 	strd	r4, r5, [sp]
 8001c56:	4a44      	ldr	r2, [pc, #272]	@ (8001d68 <main+0xe08>)
 8001c58:	2140      	movs	r1, #64	@ 0x40
 8001c5a:	f006 fab1 	bl	80081c0 <sniprintf>
        HAL_UART_Transmit(&huart5, (uint8_t *)odom_str, strlen(odom_str), HAL_MAX_DELAY);
 8001c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fb04 	bl	8000270 <strlen>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295
 8001c74:	483d      	ldr	r0, [pc, #244]	@ (8001d6c <main+0xe0c>)
 8001c76:	f004 f8f5 	bl	8005e64 <HAL_UART_Transmit>
      }

      static uint8_t print_counter = 0;
      print_counter++;
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d70 <main+0xe10>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b3b      	ldr	r3, [pc, #236]	@ (8001d70 <main+0xe10>)
 8001c84:	701a      	strb	r2, [r3, #0]
      if (print_counter >= 10) {
 8001c86:	4b3a      	ldr	r3, [pc, #232]	@ (8001d70 <main+0xe10>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b09      	cmp	r3, #9
 8001c8c:	f67f a9b1 	bls.w	8000ff2 <main+0x92>
        print_counter = 0;
 8001c90:	4b37      	ldr	r3, [pc, #220]	@ (8001d70 <main+0xe10>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]
        printf("Pose: x=%.3f m, y=%.3f m, theta=%.3f rad, left=%d, delta_left=%ld, dist_left=%.3f m, right=%d, delta_right=%ld, dist_right=%.3f m, total_left=%.3f m, total_right=%.3f m\r\n",
 8001c96:	4b32      	ldr	r3, [pc, #200]	@ (8001d60 <main+0xe00>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7fe fc54 	bl	8000548 <__aeabi_f2d>
 8001ca0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d64 <main+0xe04>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fc4d 	bl	8000548 <__aeabi_f2d>
 8001cae:	4682      	mov	sl, r0
 8001cb0:	468b      	mov	fp, r1
 8001cb2:	4b29      	ldr	r3, [pc, #164]	@ (8001d58 <main+0xdf8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc46 	bl	8000548 <__aeabi_f2d>
 8001cbc:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001cc0:	f9b7 60ce 	ldrsh.w	r6, [r7, #206]	@ 0xce
 8001cc4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8001cc8:	f7fe fc3e 	bl	8000548 <__aeabi_f2d>
 8001ccc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001cd0:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	@ 0xcc
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 8001cda:	f7fe fc35 	bl	8000548 <__aeabi_f2d>
 8001cde:	4680      	mov	r8, r0
 8001ce0:	4689      	mov	r9, r1
 8001ce2:	4b24      	ldr	r3, [pc, #144]	@ (8001d74 <main+0xe14>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fc2e 	bl	8000548 <__aeabi_f2d>
 8001cec:	4604      	mov	r4, r0
 8001cee:	460d      	mov	r5, r1
 8001cf0:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <main+0xe18>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fc27 	bl	8000548 <__aeabi_f2d>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8001d02:	e9cd 450c 	strd	r4, r5, [sp, #48]	@ 0x30
 8001d06:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8001d0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001d0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	9308      	str	r3, [sp, #32]
 8001d14:	ed97 7b02 	vldr	d7, [r7, #8]
 8001d18:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001d1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001d20:	9305      	str	r3, [sp, #20]
 8001d22:	9604      	str	r6, [sp, #16]
 8001d24:	ed97 7b04 	vldr	d7, [r7, #16]
 8001d28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001d2c:	e9cd ab00 	strd	sl, fp, [sp]
 8001d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d34:	4811      	ldr	r0, [pc, #68]	@ (8001d7c <main+0xe1c>)
 8001d36:	f006 f9d3 	bl	80080e0 <iprintf>
  {
 8001d3a:	f7ff b95a 	b.w	8000ff2 <main+0x92>
 8001d3e:	bf00      	nop
 8001d40:	54442d18 	.word	0x54442d18
 8001d44:	401921fb 	.word	0x401921fb
 8001d48:	54442d18 	.word	0x54442d18
 8001d4c:	400921fb 	.word	0x400921fb
 8001d50:	54442d18 	.word	0x54442d18
 8001d54:	c00921fb 	.word	0xc00921fb
 8001d58:	20000634 	.word	0x20000634
 8001d5c:	2000066f 	.word	0x2000066f
 8001d60:	2000062c 	.word	0x2000062c
 8001d64:	20000630 	.word	0x20000630
 8001d68:	0800b048 	.word	0x0800b048
 8001d6c:	2000030c 	.word	0x2000030c
 8001d70:	20000670 	.word	0x20000670
 8001d74:	20000664 	.word	0x20000664
 8001d78:	20000668 	.word	0x20000668
 8001d7c:	0800b064 	.word	0x0800b064

08001d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b096      	sub	sp, #88	@ 0x58
 8001d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d86:	f107 0314 	add.w	r3, r7, #20
 8001d8a:	2244      	movs	r2, #68	@ 0x44
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f006 fb22 	bl	80083d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d94:	463b      	mov	r3, r7
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]

  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001da2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001da6:	f001 fb69 	bl	800347c <HAL_PWREx_ControlVoltageScaling>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001db0:	f000 fb26 	bl	8002400 <Error_Handler>
  }

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001db4:	2302      	movs	r3, #2
 8001db6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001db8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dbc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dbe:	2310      	movs	r3, #16
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001dce:	230a      	movs	r3, #10
 8001dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001dd2:	2307      	movs	r3, #7
 8001dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4618      	mov	r0, r3
 8001de4:	f001 fba0 	bl	8003528 <HAL_RCC_OscConfig>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001dee:	f000 fb07 	bl	8002400 <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df2:	230f      	movs	r3, #15
 8001df4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df6:	2303      	movs	r3, #3
 8001df8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e04:	2300      	movs	r3, #0
 8001e06:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e08:	463b      	mov	r3, r7
 8001e0a:	2104      	movs	r1, #4
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f001 ff67 	bl	8003ce0 <HAL_RCC_ClockConfig>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001e18:	f000 faf2 	bl	8002400 <Error_Handler>
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	3758      	adds	r7, #88	@ 0x58
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  hlpuart1.Instance = LPUART1;
 8001e28:	4b12      	ldr	r3, [pc, #72]	@ (8001e74 <MX_LPUART1_UART_Init+0x50>)
 8001e2a:	4a13      	ldr	r2, [pc, #76]	@ (8001e78 <MX_LPUART1_UART_Init+0x54>)
 8001e2c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <MX_LPUART1_UART_Init+0x50>)
 8001e30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e34:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e36:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <MX_LPUART1_UART_Init+0x50>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e74 <MX_LPUART1_UART_Init+0x50>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001e42:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <MX_LPUART1_UART_Init+0x50>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001e48:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <MX_LPUART1_UART_Init+0x50>)
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4e:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <MX_LPUART1_UART_Init+0x50>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e54:	4b07      	ldr	r3, [pc, #28]	@ (8001e74 <MX_LPUART1_UART_Init+0x50>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e5a:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <MX_LPUART1_UART_Init+0x50>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001e60:	4804      	ldr	r0, [pc, #16]	@ (8001e74 <MX_LPUART1_UART_Init+0x50>)
 8001e62:	f003 ffb1 	bl	8005dc8 <HAL_UART_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001e6c:	f000 fac8 	bl	8002400 <Error_Handler>
  }
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	200001fc 	.word	0x200001fc
 8001e78:	40008000 	.word	0x40008000

08001e7c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  huart4.Instance = UART4;
 8001e80:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <MX_UART4_Init+0x58>)
 8001e82:	4a15      	ldr	r2, [pc, #84]	@ (8001ed8 <MX_UART4_Init+0x5c>)
 8001e84:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e86:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <MX_UART4_Init+0x58>)
 8001e88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e8c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <MX_UART4_Init+0x58>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed4 <MX_UART4_Init+0x58>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed4 <MX_UART4_Init+0x58>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <MX_UART4_Init+0x58>)
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <MX_UART4_Init+0x58>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eac:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <MX_UART4_Init+0x58>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eb2:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <MX_UART4_Init+0x58>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <MX_UART4_Init+0x58>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ebe:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <MX_UART4_Init+0x58>)
 8001ec0:	f003 ff82 	bl	8005dc8 <HAL_UART_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001eca:	f000 fa99 	bl	8002400 <Error_Handler>
  }
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000284 	.word	0x20000284
 8001ed8:	40004c00 	.word	0x40004c00

08001edc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  huart5.Instance = UART5;
 8001ee0:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <MX_UART5_Init+0x58>)
 8001ee2:	4a15      	ldr	r2, [pc, #84]	@ (8001f38 <MX_UART5_Init+0x5c>)
 8001ee4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001ee6:	4b13      	ldr	r3, [pc, #76]	@ (8001f34 <MX_UART5_Init+0x58>)
 8001ee8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001eec:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <MX_UART5_Init+0x58>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <MX_UART5_Init+0x58>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	@ (8001f34 <MX_UART5_Init+0x58>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	@ (8001f34 <MX_UART5_Init+0x58>)
 8001f02:	220c      	movs	r2, #12
 8001f04:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f06:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <MX_UART5_Init+0x58>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f0c:	4b09      	ldr	r3, [pc, #36]	@ (8001f34 <MX_UART5_Init+0x58>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f12:	4b08      	ldr	r3, [pc, #32]	@ (8001f34 <MX_UART5_Init+0x58>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f18:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <MX_UART5_Init+0x58>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f1e:	4805      	ldr	r0, [pc, #20]	@ (8001f34 <MX_UART5_Init+0x58>)
 8001f20:	f003 ff52 	bl	8005dc8 <HAL_UART_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001f2a:	f000 fa69 	bl	8002400 <Error_Handler>
  }
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2000030c 	.word	0x2000030c
 8001f38:	40005000 	.word	0x40005000

08001f3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001f40:	4b14      	ldr	r3, [pc, #80]	@ (8001f94 <MX_USART1_UART_Init+0x58>)
 8001f42:	4a15      	ldr	r2, [pc, #84]	@ (8001f98 <MX_USART1_UART_Init+0x5c>)
 8001f44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f46:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <MX_USART1_UART_Init+0x58>)
 8001f48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4e:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <MX_USART1_UART_Init+0x58>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f54:	4b0f      	ldr	r3, [pc, #60]	@ (8001f94 <MX_USART1_UART_Init+0x58>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <MX_USART1_UART_Init+0x58>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <MX_USART1_UART_Init+0x58>)
 8001f62:	220c      	movs	r2, #12
 8001f64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	@ (8001f94 <MX_USART1_UART_Init+0x58>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <MX_USART1_UART_Init+0x58>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f72:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <MX_USART1_UART_Init+0x58>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f78:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <MX_USART1_UART_Init+0x58>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f7e:	4805      	ldr	r0, [pc, #20]	@ (8001f94 <MX_USART1_UART_Init+0x58>)
 8001f80:	f003 ff22 	bl	8005dc8 <HAL_UART_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f8a:	f000 fa39 	bl	8002400 <Error_Handler>
  }
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000394 	.word	0x20000394
 8001f98:	40013800 	.word	0x40013800

08001f9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001fa0:	4b14      	ldr	r3, [pc, #80]	@ (8001ff4 <MX_USART2_UART_Init+0x58>)
 8001fa2:	4a15      	ldr	r2, [pc, #84]	@ (8001ff8 <MX_USART2_UART_Init+0x5c>)
 8001fa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fa6:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <MX_USART2_UART_Init+0x58>)
 8001fa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fae:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <MX_USART2_UART_Init+0x58>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <MX_USART2_UART_Init+0x58>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <MX_USART2_UART_Init+0x58>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <MX_USART2_UART_Init+0x58>)
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <MX_USART2_UART_Init+0x58>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fcc:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <MX_USART2_UART_Init+0x58>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fd2:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <MX_USART2_UART_Init+0x58>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <MX_USART2_UART_Init+0x58>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fde:	4805      	ldr	r0, [pc, #20]	@ (8001ff4 <MX_USART2_UART_Init+0x58>)
 8001fe0:	f003 fef2 	bl	8005dc8 <HAL_UART_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fea:	f000 fa09 	bl	8002400 <Error_Handler>
  }
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000041c 	.word	0x2000041c
 8001ff8:	40004400 	.word	0x40004400

08001ffc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8002000:	4b14      	ldr	r3, [pc, #80]	@ (8002054 <MX_USART3_UART_Init+0x58>)
 8002002:	4a15      	ldr	r2, [pc, #84]	@ (8002058 <MX_USART3_UART_Init+0x5c>)
 8002004:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002006:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <MX_USART3_UART_Init+0x58>)
 8002008:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800200c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800200e:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <MX_USART3_UART_Init+0x58>)
 8002010:	2200      	movs	r2, #0
 8002012:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002014:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <MX_USART3_UART_Init+0x58>)
 8002016:	2200      	movs	r2, #0
 8002018:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800201a:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <MX_USART3_UART_Init+0x58>)
 800201c:	2200      	movs	r2, #0
 800201e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <MX_USART3_UART_Init+0x58>)
 8002022:	220c      	movs	r2, #12
 8002024:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002026:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <MX_USART3_UART_Init+0x58>)
 8002028:	2200      	movs	r2, #0
 800202a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800202c:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <MX_USART3_UART_Init+0x58>)
 800202e:	2200      	movs	r2, #0
 8002030:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002032:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <MX_USART3_UART_Init+0x58>)
 8002034:	2200      	movs	r2, #0
 8002036:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <MX_USART3_UART_Init+0x58>)
 800203a:	2200      	movs	r2, #0
 800203c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800203e:	4805      	ldr	r0, [pc, #20]	@ (8002054 <MX_USART3_UART_Init+0x58>)
 8002040:	f003 fec2 	bl	8005dc8 <HAL_UART_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800204a:	f000 f9d9 	bl	8002400 <Error_Handler>
  }
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	200004a4 	.word	0x200004a4
 8002058:	40004800 	.word	0x40004800

0800205c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function (Encodeur roue droite: PA8, PA9)
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	@ 0x30
 8002060:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	2224      	movs	r2, #36	@ 0x24
 8002068:	2100      	movs	r1, #0
 800206a:	4618      	mov	r0, r3
 800206c:	f006 f9b4 	bl	80083d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002070:	463b      	mov	r3, r7
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 800207a:	4b23      	ldr	r3, [pc, #140]	@ (8002108 <MX_TIM1_Init+0xac>)
 800207c:	4a23      	ldr	r2, [pc, #140]	@ (800210c <MX_TIM1_Init+0xb0>)
 800207e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002080:	4b21      	ldr	r3, [pc, #132]	@ (8002108 <MX_TIM1_Init+0xac>)
 8002082:	2200      	movs	r2, #0
 8002084:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002086:	4b20      	ldr	r3, [pc, #128]	@ (8002108 <MX_TIM1_Init+0xac>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800208c:	4b1e      	ldr	r3, [pc, #120]	@ (8002108 <MX_TIM1_Init+0xac>)
 800208e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002092:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002094:	4b1c      	ldr	r3, [pc, #112]	@ (8002108 <MX_TIM1_Init+0xac>)
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800209a:	4b1b      	ldr	r3, [pc, #108]	@ (8002108 <MX_TIM1_Init+0xac>)
 800209c:	2200      	movs	r2, #0
 800209e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a0:	4b19      	ldr	r3, [pc, #100]	@ (8002108 <MX_TIM1_Init+0xac>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020a6:	2303      	movs	r3, #3
 80020a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020ae:	2301      	movs	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;  // Différent pour détecter la direction
 80020ba:	2302      	movs	r3, #2
 80020bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020be:	2301      	movs	r3, #1
 80020c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	4619      	mov	r1, r3
 80020d0:	480d      	ldr	r0, [pc, #52]	@ (8002108 <MX_TIM1_Init+0xac>)
 80020d2:	f002 fea3 	bl	8004e1c <HAL_TIM_Encoder_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80020dc:	f000 f990 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e0:	2300      	movs	r3, #0
 80020e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020e4:	2300      	movs	r3, #0
 80020e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020ec:	463b      	mov	r3, r7
 80020ee:	4619      	mov	r1, r3
 80020f0:	4805      	ldr	r0, [pc, #20]	@ (8002108 <MX_TIM1_Init+0xac>)
 80020f2:	f003 fde1 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80020fc:	f000 f980 	bl	8002400 <Error_Handler>
  }
}
 8002100:	bf00      	nop
 8002102:	3730      	adds	r7, #48	@ 0x30
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	2000052c 	.word	0x2000052c
 800210c:	40012c00 	.word	0x40012c00

08002110 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08e      	sub	sp, #56	@ 0x38
 8002114:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002116:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002124:	f107 031c 	add.w	r3, r7, #28
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002130:	463b      	mov	r3, r7
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	611a      	str	r2, [r3, #16]
 800213e:	615a      	str	r2, [r3, #20]
 8002140:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8002142:	4b33      	ldr	r3, [pc, #204]	@ (8002210 <MX_TIM2_Init+0x100>)
 8002144:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002148:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800214a:	4b31      	ldr	r3, [pc, #196]	@ (8002210 <MX_TIM2_Init+0x100>)
 800214c:	224f      	movs	r2, #79	@ 0x4f
 800214e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002150:	4b2f      	ldr	r3, [pc, #188]	@ (8002210 <MX_TIM2_Init+0x100>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8002156:	4b2e      	ldr	r3, [pc, #184]	@ (8002210 <MX_TIM2_Init+0x100>)
 8002158:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800215c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800215e:	4b2c      	ldr	r3, [pc, #176]	@ (8002210 <MX_TIM2_Init+0x100>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002164:	4b2a      	ldr	r3, [pc, #168]	@ (8002210 <MX_TIM2_Init+0x100>)
 8002166:	2200      	movs	r2, #0
 8002168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800216a:	4829      	ldr	r0, [pc, #164]	@ (8002210 <MX_TIM2_Init+0x100>)
 800216c:	f002 fc98 	bl	8004aa0 <HAL_TIM_Base_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002176:	f000 f943 	bl	8002400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800217a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800217e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002180:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002184:	4619      	mov	r1, r3
 8002186:	4822      	ldr	r0, [pc, #136]	@ (8002210 <MX_TIM2_Init+0x100>)
 8002188:	f003 f890 	bl	80052ac <HAL_TIM_ConfigClockSource>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002192:	f000 f935 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002196:	481e      	ldr	r0, [pc, #120]	@ (8002210 <MX_TIM2_Init+0x100>)
 8002198:	f002 fcd9 	bl	8004b4e <HAL_TIM_PWM_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80021a2:	f000 f92d 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021ae:	f107 031c 	add.w	r3, r7, #28
 80021b2:	4619      	mov	r1, r3
 80021b4:	4816      	ldr	r0, [pc, #88]	@ (8002210 <MX_TIM2_Init+0x100>)
 80021b6:	f003 fd7f 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80021c0:	f000 f91e 	bl	8002400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021c4:	2360      	movs	r3, #96	@ 0x60
 80021c6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021d0:	2300      	movs	r3, #0
 80021d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021d4:	463b      	mov	r3, r7
 80021d6:	2208      	movs	r2, #8
 80021d8:	4619      	mov	r1, r3
 80021da:	480d      	ldr	r0, [pc, #52]	@ (8002210 <MX_TIM2_Init+0x100>)
 80021dc:	f002 ff52 	bl	8005084 <HAL_TIM_PWM_ConfigChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80021e6:	f000 f90b 	bl	8002400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021ea:	463b      	mov	r3, r7
 80021ec:	220c      	movs	r2, #12
 80021ee:	4619      	mov	r1, r3
 80021f0:	4807      	ldr	r0, [pc, #28]	@ (8002210 <MX_TIM2_Init+0x100>)
 80021f2:	f002 ff47 	bl	8005084 <HAL_TIM_PWM_ConfigChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80021fc:	f000 f900 	bl	8002400 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8002200:	4803      	ldr	r0, [pc, #12]	@ (8002210 <MX_TIM2_Init+0x100>)
 8002202:	f000 fbe3 	bl	80029cc <HAL_TIM_MspPostInit>
}
 8002206:	bf00      	nop
 8002208:	3738      	adds	r7, #56	@ 0x38
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000578 	.word	0x20000578

08002214 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function (Encodeur roue gauche: PA6, PA7)
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08c      	sub	sp, #48	@ 0x30
 8002218:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800221a:	f107 030c 	add.w	r3, r7, #12
 800221e:	2224      	movs	r2, #36	@ 0x24
 8002220:	2100      	movs	r1, #0
 8002222:	4618      	mov	r0, r3
 8002224:	f006 f8d8 	bl	80083d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002228:	463b      	mov	r3, r7
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8002232:	4b21      	ldr	r3, [pc, #132]	@ (80022b8 <MX_TIM3_Init+0xa4>)
 8002234:	4a21      	ldr	r2, [pc, #132]	@ (80022bc <MX_TIM3_Init+0xa8>)
 8002236:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002238:	4b1f      	ldr	r3, [pc, #124]	@ (80022b8 <MX_TIM3_Init+0xa4>)
 800223a:	2200      	movs	r2, #0
 800223c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223e:	4b1e      	ldr	r3, [pc, #120]	@ (80022b8 <MX_TIM3_Init+0xa4>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002244:	4b1c      	ldr	r3, [pc, #112]	@ (80022b8 <MX_TIM3_Init+0xa4>)
 8002246:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800224a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224c:	4b1a      	ldr	r3, [pc, #104]	@ (80022b8 <MX_TIM3_Init+0xa4>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002252:	4b19      	ldr	r3, [pc, #100]	@ (80022b8 <MX_TIM3_Init+0xa4>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002258:	2303      	movs	r3, #3
 800225a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002260:	2301      	movs	r3, #1
 8002262:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;  // Différent pour détecter la direction
 800226c:	2302      	movs	r3, #2
 800226e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002270:	2301      	movs	r3, #1
 8002272:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002274:	2300      	movs	r3, #0
 8002276:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	4619      	mov	r1, r3
 8002282:	480d      	ldr	r0, [pc, #52]	@ (80022b8 <MX_TIM3_Init+0xa4>)
 8002284:	f002 fdca 	bl	8004e1c <HAL_TIM_Encoder_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800228e:	f000 f8b7 	bl	8002400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800229a:	463b      	mov	r3, r7
 800229c:	4619      	mov	r1, r3
 800229e:	4806      	ldr	r0, [pc, #24]	@ (80022b8 <MX_TIM3_Init+0xa4>)
 80022a0:	f003 fd0a 	bl	8005cb8 <HAL_TIMEx_MasterConfigSynchronization>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80022aa:	f000 f8a9 	bl	8002400 <Error_Handler>
  }
}
 80022ae:	bf00      	nop
 80022b0:	3730      	adds	r7, #48	@ 0x30
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200005c4 	.word	0x200005c4
 80022bc:	40000400 	.word	0x40000400

080022c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	@ 0x28
 80022c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
 80022d4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022d6:	4b3c      	ldr	r3, [pc, #240]	@ (80023c8 <MX_GPIO_Init+0x108>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022da:	4a3b      	ldr	r2, [pc, #236]	@ (80023c8 <MX_GPIO_Init+0x108>)
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022e2:	4b39      	ldr	r3, [pc, #228]	@ (80023c8 <MX_GPIO_Init+0x108>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022ee:	4b36      	ldr	r3, [pc, #216]	@ (80023c8 <MX_GPIO_Init+0x108>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f2:	4a35      	ldr	r2, [pc, #212]	@ (80023c8 <MX_GPIO_Init+0x108>)
 80022f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022fa:	4b33      	ldr	r3, [pc, #204]	@ (80023c8 <MX_GPIO_Init+0x108>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	4b30      	ldr	r3, [pc, #192]	@ (80023c8 <MX_GPIO_Init+0x108>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230a:	4a2f      	ldr	r2, [pc, #188]	@ (80023c8 <MX_GPIO_Init+0x108>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002312:	4b2d      	ldr	r3, [pc, #180]	@ (80023c8 <MX_GPIO_Init+0x108>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231e:	4b2a      	ldr	r3, [pc, #168]	@ (80023c8 <MX_GPIO_Init+0x108>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002322:	4a29      	ldr	r2, [pc, #164]	@ (80023c8 <MX_GPIO_Init+0x108>)
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800232a:	4b27      	ldr	r3, [pc, #156]	@ (80023c8 <MX_GPIO_Init+0x108>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002336:	4b24      	ldr	r3, [pc, #144]	@ (80023c8 <MX_GPIO_Init+0x108>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233a:	4a23      	ldr	r2, [pc, #140]	@ (80023c8 <MX_GPIO_Init+0x108>)
 800233c:	f043 0308 	orr.w	r3, r3, #8
 8002340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002342:	4b21      	ldr	r3, [pc, #132]	@ (80023c8 <MX_GPIO_Init+0x108>)
 8002344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	2120      	movs	r1, #32
 8002352:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002356:	f001 f86b 	bl	8003430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800235a:	2200      	movs	r2, #0
 800235c:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8002360:	481a      	ldr	r0, [pc, #104]	@ (80023cc <MX_GPIO_Init+0x10c>)
 8002362:	f001 f865 	bl	8003430 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = B1_Pin;
 8002366:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800236a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800236c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002376:	f107 0314 	add.w	r3, r7, #20
 800237a:	4619      	mov	r1, r3
 800237c:	4814      	ldr	r0, [pc, #80]	@ (80023d0 <MX_GPIO_Init+0x110>)
 800237e:	f000 fead 	bl	80030dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LD2_Pin;
 8002382:	2320      	movs	r3, #32
 8002384:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002386:	2301      	movs	r3, #1
 8002388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800239c:	f000 fe9e 	bl	80030dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 80023a0:	f44f 734c 	mov.w	r3, #816	@ 0x330
 80023a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a6:	2301      	movs	r3, #1
 80023a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	4804      	ldr	r0, [pc, #16]	@ (80023cc <MX_GPIO_Init+0x10c>)
 80023ba:	f000 fe8f 	bl	80030dc <HAL_GPIO_Init>
}
 80023be:	bf00      	nop
 80023c0:	3728      	adds	r7, #40	@ 0x28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	48000400 	.word	0x48000400
 80023d0:	48000800 	.word	0x48000800

080023d4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if (huart == &hlpuart1) {
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a06      	ldr	r2, [pc, #24]	@ (80023f8 <HAL_UART_RxCpltCallback+0x24>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d104      	bne.n	80023ee <HAL_UART_RxCpltCallback+0x1a>
    HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)rx_data, sizeof(rx_data));
 80023e4:	221b      	movs	r2, #27
 80023e6:	4905      	ldr	r1, [pc, #20]	@ (80023fc <HAL_UART_RxCpltCallback+0x28>)
 80023e8:	4803      	ldr	r0, [pc, #12]	@ (80023f8 <HAL_UART_RxCpltCallback+0x24>)
 80023ea:	f003 fdc5 	bl	8005f78 <HAL_UART_Receive_IT>
  }
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200001fc 	.word	0x200001fc
 80023fc:	20000610 	.word	0x20000610

08002400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002404:	b672      	cpsid	i
}
 8002406:	bf00      	nop
  __disable_irq();
  while (1)
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <Error_Handler+0x8>

0800240c <mot_maxon_both>:
#include "main.h"

extern TIM_HandleTypeDef htim2;


void mot_maxon_both(int result_D, int inv_D, int result_G, int inv_G) {
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	603b      	str	r3, [r7, #0]
    // Appliquer la direction immédiatement
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, inv_D);      // Droit A
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	2110      	movs	r1, #16
 8002422:	4817      	ldr	r0, [pc, #92]	@ (8002480 <mot_maxon_both+0x74>)
 8002424:	f001 f804 	bl	8003430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, !inv_D);     // Droit B
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	bf0c      	ite	eq
 800242e:	2301      	moveq	r3, #1
 8002430:	2300      	movne	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800243a:	4811      	ldr	r0, [pc, #68]	@ (8002480 <mot_maxon_both+0x74>)
 800243c:	f000 fff8 	bl	8003430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, inv_G);      // Gauche A
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	2120      	movs	r1, #32
 8002448:	480d      	ldr	r0, [pc, #52]	@ (8002480 <mot_maxon_both+0x74>)
 800244a:	f000 fff1 	bl	8003430 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, !inv_G);     // Gauche B
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002460:	4807      	ldr	r0, [pc, #28]	@ (8002480 <mot_maxon_both+0x74>)
 8002462:	f000 ffe5 	bl	8003430 <HAL_GPIO_WritePin>

    // Appliquer immédiatement la PWM (tout ou rien)
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result_D);  // Moteur Droit
 8002466:	4b07      	ldr	r3, [pc, #28]	@ (8002484 <mot_maxon_both+0x78>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result_G);  // Moteur Gauche
 800246e:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <mot_maxon_both+0x78>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	48000400 	.word	0x48000400
 8002484:	20000578 	.word	0x20000578

08002488 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	4b0f      	ldr	r3, [pc, #60]	@ (80024cc <HAL_MspInit+0x44>)
 8002490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002492:	4a0e      	ldr	r2, [pc, #56]	@ (80024cc <HAL_MspInit+0x44>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6613      	str	r3, [r2, #96]	@ 0x60
 800249a:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <HAL_MspInit+0x44>)
 800249c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <HAL_MspInit+0x44>)
 80024a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024aa:	4a08      	ldr	r2, [pc, #32]	@ (80024cc <HAL_MspInit+0x44>)
 80024ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_MspInit+0x44>)
 80024b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000

080024d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b0b6      	sub	sp, #216	@ 0xd8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024ec:	2288      	movs	r2, #136	@ 0x88
 80024ee:	2100      	movs	r1, #0
 80024f0:	4618      	mov	r0, r3
 80024f2:	f005 ff71 	bl	80083d8 <memset>
  if(huart->Instance==LPUART1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a9c      	ldr	r2, [pc, #624]	@ (800276c <HAL_UART_MspInit+0x29c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d144      	bne.n	800258a <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002500:	2320      	movs	r3, #32
 8002502:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800250a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800250e:	4618      	mov	r0, r3
 8002510:	f001 fe0a 	bl	8004128 <HAL_RCCEx_PeriphCLKConfig>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800251a:	f7ff ff71 	bl	8002400 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800251e:	4b94      	ldr	r3, [pc, #592]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 8002520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002522:	4a93      	ldr	r2, [pc, #588]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800252a:	4b91      	ldr	r3, [pc, #580]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 800252c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002536:	4b8e      	ldr	r3, [pc, #568]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 8002538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800253a:	4a8d      	ldr	r2, [pc, #564]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 800253c:	f043 0304 	orr.w	r3, r3, #4
 8002540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002542:	4b8b      	ldr	r3, [pc, #556]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 8002544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	637b      	str	r3, [r7, #52]	@ 0x34
 800254c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800254e:	2303      	movs	r3, #3
 8002550:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002560:	2303      	movs	r3, #3
 8002562:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002566:	2308      	movs	r3, #8
 8002568:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800256c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002570:	4619      	mov	r1, r3
 8002572:	4880      	ldr	r0, [pc, #512]	@ (8002774 <HAL_UART_MspInit+0x2a4>)
 8002574:	f000 fdb2 	bl	80030dc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002578:	2200      	movs	r2, #0
 800257a:	2100      	movs	r1, #0
 800257c:	2046      	movs	r0, #70	@ 0x46
 800257e:	f000 fcf8 	bl	8002f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002582:	2046      	movs	r0, #70	@ 0x46
 8002584:	f000 fd11 	bl	8002faa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002588:	e182      	b.n	8002890 <HAL_UART_MspInit+0x3c0>
  else if(huart->Instance==UART4)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a7a      	ldr	r2, [pc, #488]	@ (8002778 <HAL_UART_MspInit+0x2a8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d145      	bne.n	8002620 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002594:	2308      	movs	r3, #8
 8002596:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800259e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80025a2:	4618      	mov	r0, r3
 80025a4:	f001 fdc0 	bl	8004128 <HAL_RCCEx_PeriphCLKConfig>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 80025ae:	f7ff ff27 	bl	8002400 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80025b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 80025b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b6:	4a6e      	ldr	r2, [pc, #440]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 80025b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80025bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80025be:	4b6c      	ldr	r3, [pc, #432]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 80025c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80025c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ca:	4b69      	ldr	r3, [pc, #420]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 80025cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ce:	4a68      	ldr	r2, [pc, #416]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025d6:	4b66      	ldr	r3, [pc, #408]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 80025d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025e2:	2303      	movs	r3, #3
 80025e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f4:	2303      	movs	r3, #3
 80025f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80025fa:	2308      	movs	r3, #8
 80025fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002600:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002604:	4619      	mov	r1, r3
 8002606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800260a:	f000 fd67 	bl	80030dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800260e:	2200      	movs	r2, #0
 8002610:	2100      	movs	r1, #0
 8002612:	2034      	movs	r0, #52	@ 0x34
 8002614:	f000 fcad 	bl	8002f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002618:	2034      	movs	r0, #52	@ 0x34
 800261a:	f000 fcc6 	bl	8002faa <HAL_NVIC_EnableIRQ>
}
 800261e:	e137      	b.n	8002890 <HAL_UART_MspInit+0x3c0>
  else if(huart->Instance==UART5)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a55      	ldr	r2, [pc, #340]	@ (800277c <HAL_UART_MspInit+0x2ac>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d15e      	bne.n	80026e8 <HAL_UART_MspInit+0x218>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800262a:	2310      	movs	r3, #16
 800262c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800262e:	2300      	movs	r3, #0
 8002630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002634:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002638:	4618      	mov	r0, r3
 800263a:	f001 fd75 	bl	8004128 <HAL_RCCEx_PeriphCLKConfig>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_UART_MspInit+0x178>
      Error_Handler();
 8002644:	f7ff fedc 	bl	8002400 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002648:	4b49      	ldr	r3, [pc, #292]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 800264a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264c:	4a48      	ldr	r2, [pc, #288]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 800264e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002652:	6593      	str	r3, [r2, #88]	@ 0x58
 8002654:	4b46      	ldr	r3, [pc, #280]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002658:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800265c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800265e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002660:	4b43      	ldr	r3, [pc, #268]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 8002662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002664:	4a42      	ldr	r2, [pc, #264]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 8002666:	f043 0304 	orr.w	r3, r3, #4
 800266a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800266c:	4b40      	ldr	r3, [pc, #256]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 800266e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	627b      	str	r3, [r7, #36]	@ 0x24
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002678:	4b3d      	ldr	r3, [pc, #244]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 800267a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267c:	4a3c      	ldr	r2, [pc, #240]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 800267e:	f043 0308 	orr.w	r3, r3, #8
 8002682:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002684:	4b3a      	ldr	r3, [pc, #232]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 8002686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	623b      	str	r3, [r7, #32]
 800268e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002694:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80026aa:	2308      	movs	r3, #8
 80026ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80026b4:	4619      	mov	r1, r3
 80026b6:	482f      	ldr	r0, [pc, #188]	@ (8002774 <HAL_UART_MspInit+0x2a4>)
 80026b8:	f000 fd10 	bl	80030dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026bc:	2304      	movs	r3, #4
 80026be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ce:	2303      	movs	r3, #3
 80026d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80026d4:	2308      	movs	r3, #8
 80026d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026da:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80026de:	4619      	mov	r1, r3
 80026e0:	4827      	ldr	r0, [pc, #156]	@ (8002780 <HAL_UART_MspInit+0x2b0>)
 80026e2:	f000 fcfb 	bl	80030dc <HAL_GPIO_Init>
}
 80026e6:	e0d3      	b.n	8002890 <HAL_UART_MspInit+0x3c0>
  else if(huart->Instance==USART1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a25      	ldr	r2, [pc, #148]	@ (8002784 <HAL_UART_MspInit+0x2b4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d14c      	bne.n	800278c <HAL_UART_MspInit+0x2bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026f2:	2301      	movs	r3, #1
 80026f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026f6:	2300      	movs	r3, #0
 80026f8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80026fe:	4618      	mov	r0, r3
 8002700:	f001 fd12 	bl	8004128 <HAL_RCCEx_PeriphCLKConfig>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_UART_MspInit+0x23e>
      Error_Handler();
 800270a:	f7ff fe79 	bl	8002400 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800270e:	4b18      	ldr	r3, [pc, #96]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 8002710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002712:	4a17      	ldr	r2, [pc, #92]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 8002714:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002718:	6613      	str	r3, [r2, #96]	@ 0x60
 800271a:	4b15      	ldr	r3, [pc, #84]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 800271c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800271e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002726:	4b12      	ldr	r3, [pc, #72]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272a:	4a11      	ldr	r2, [pc, #68]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 800272c:	f043 0302 	orr.w	r3, r3, #2
 8002730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002732:	4b0f      	ldr	r3, [pc, #60]	@ (8002770 <HAL_UART_MspInit+0x2a0>)
 8002734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	61bb      	str	r3, [r7, #24]
 800273c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800273e:	23c0      	movs	r3, #192	@ 0xc0
 8002740:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002750:	2303      	movs	r3, #3
 8002752:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002756:	2307      	movs	r3, #7
 8002758:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002760:	4619      	mov	r1, r3
 8002762:	4809      	ldr	r0, [pc, #36]	@ (8002788 <HAL_UART_MspInit+0x2b8>)
 8002764:	f000 fcba 	bl	80030dc <HAL_GPIO_Init>
}
 8002768:	e092      	b.n	8002890 <HAL_UART_MspInit+0x3c0>
 800276a:	bf00      	nop
 800276c:	40008000 	.word	0x40008000
 8002770:	40021000 	.word	0x40021000
 8002774:	48000800 	.word	0x48000800
 8002778:	40004c00 	.word	0x40004c00
 800277c:	40005000 	.word	0x40005000
 8002780:	48000c00 	.word	0x48000c00
 8002784:	40013800 	.word	0x40013800
 8002788:	48000400 	.word	0x48000400
  else if(huart->Instance==USART2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a41      	ldr	r2, [pc, #260]	@ (8002898 <HAL_UART_MspInit+0x3c8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d13c      	bne.n	8002810 <HAL_UART_MspInit+0x340>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002796:	2302      	movs	r3, #2
 8002798:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800279a:	2300      	movs	r3, #0
 800279c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800279e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80027a2:	4618      	mov	r0, r3
 80027a4:	f001 fcc0 	bl	8004128 <HAL_RCCEx_PeriphCLKConfig>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_UART_MspInit+0x2e2>
      Error_Handler();
 80027ae:	f7ff fe27 	bl	8002400 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027b2:	4b3a      	ldr	r3, [pc, #232]	@ (800289c <HAL_UART_MspInit+0x3cc>)
 80027b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b6:	4a39      	ldr	r2, [pc, #228]	@ (800289c <HAL_UART_MspInit+0x3cc>)
 80027b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80027be:	4b37      	ldr	r3, [pc, #220]	@ (800289c <HAL_UART_MspInit+0x3cc>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ca:	4b34      	ldr	r3, [pc, #208]	@ (800289c <HAL_UART_MspInit+0x3cc>)
 80027cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ce:	4a33      	ldr	r2, [pc, #204]	@ (800289c <HAL_UART_MspInit+0x3cc>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027d6:	4b31      	ldr	r3, [pc, #196]	@ (800289c <HAL_UART_MspInit+0x3cc>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 80027e2:	230c      	movs	r3, #12
 80027e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e8:	2302      	movs	r3, #2
 80027ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f4:	2303      	movs	r3, #3
 80027f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027fa:	2307      	movs	r3, #7
 80027fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002800:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002804:	4619      	mov	r1, r3
 8002806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800280a:	f000 fc67 	bl	80030dc <HAL_GPIO_Init>
}
 800280e:	e03f      	b.n	8002890 <HAL_UART_MspInit+0x3c0>
  else if(huart->Instance==USART3)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a22      	ldr	r2, [pc, #136]	@ (80028a0 <HAL_UART_MspInit+0x3d0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d13a      	bne.n	8002890 <HAL_UART_MspInit+0x3c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800281a:	2304      	movs	r3, #4
 800281c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800281e:	2300      	movs	r3, #0
 8002820:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002822:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002826:	4618      	mov	r0, r3
 8002828:	f001 fc7e 	bl	8004128 <HAL_RCCEx_PeriphCLKConfig>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_UART_MspInit+0x366>
      Error_Handler();
 8002832:	f7ff fde5 	bl	8002400 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002836:	4b19      	ldr	r3, [pc, #100]	@ (800289c <HAL_UART_MspInit+0x3cc>)
 8002838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283a:	4a18      	ldr	r2, [pc, #96]	@ (800289c <HAL_UART_MspInit+0x3cc>)
 800283c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002840:	6593      	str	r3, [r2, #88]	@ 0x58
 8002842:	4b16      	ldr	r3, [pc, #88]	@ (800289c <HAL_UART_MspInit+0x3cc>)
 8002844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002846:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800284e:	4b13      	ldr	r3, [pc, #76]	@ (800289c <HAL_UART_MspInit+0x3cc>)
 8002850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002852:	4a12      	ldr	r2, [pc, #72]	@ (800289c <HAL_UART_MspInit+0x3cc>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800285a:	4b10      	ldr	r3, [pc, #64]	@ (800289c <HAL_UART_MspInit+0x3cc>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002866:	2330      	movs	r3, #48	@ 0x30
 8002868:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002878:	2303      	movs	r3, #3
 800287a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800287e:	2307      	movs	r3, #7
 8002880:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002884:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002888:	4619      	mov	r1, r3
 800288a:	4806      	ldr	r0, [pc, #24]	@ (80028a4 <HAL_UART_MspInit+0x3d4>)
 800288c:	f000 fc26 	bl	80030dc <HAL_GPIO_Init>
}
 8002890:	bf00      	nop
 8002892:	37d8      	adds	r7, #216	@ 0xd8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40004400 	.word	0x40004400
 800289c:	40021000 	.word	0x40021000
 80028a0:	40004800 	.word	0x40004800
 80028a4:	48000800 	.word	0x48000800

080028a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08c      	sub	sp, #48	@ 0x30
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 031c 	add.w	r3, r7, #28
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002984 <HAL_TIM_Encoder_MspInit+0xdc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d12a      	bne.n	8002920 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002988 <HAL_TIM_Encoder_MspInit+0xe0>)
 80028cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ce:	4a2e      	ldr	r2, [pc, #184]	@ (8002988 <HAL_TIM_Encoder_MspInit+0xe0>)
 80028d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80028d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002988 <HAL_TIM_Encoder_MspInit+0xe0>)
 80028d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028de:	61bb      	str	r3, [r7, #24]
 80028e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e2:	4b29      	ldr	r3, [pc, #164]	@ (8002988 <HAL_TIM_Encoder_MspInit+0xe0>)
 80028e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028e6:	4a28      	ldr	r2, [pc, #160]	@ (8002988 <HAL_TIM_Encoder_MspInit+0xe0>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028ee:	4b26      	ldr	r3, [pc, #152]	@ (8002988 <HAL_TIM_Encoder_MspInit+0xe0>)
 80028f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	617b      	str	r3, [r7, #20]
 80028f8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2300      	movs	r3, #0
 8002906:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800290c:	2301      	movs	r3, #1
 800290e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	4619      	mov	r1, r3
 8002916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800291a:	f000 fbdf 	bl	80030dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800291e:	e02d      	b.n	800297c <HAL_TIM_Encoder_MspInit+0xd4>
  else if(htim_encoder->Instance==TIM3)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a19      	ldr	r2, [pc, #100]	@ (800298c <HAL_TIM_Encoder_MspInit+0xe4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d128      	bne.n	800297c <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800292a:	4b17      	ldr	r3, [pc, #92]	@ (8002988 <HAL_TIM_Encoder_MspInit+0xe0>)
 800292c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292e:	4a16      	ldr	r2, [pc, #88]	@ (8002988 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002930:	f043 0302 	orr.w	r3, r3, #2
 8002934:	6593      	str	r3, [r2, #88]	@ 0x58
 8002936:	4b14      	ldr	r3, [pc, #80]	@ (8002988 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002942:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002946:	4a10      	ldr	r2, [pc, #64]	@ (8002988 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002948:	f043 0301 	orr.w	r3, r3, #1
 800294c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800294e:	4b0e      	ldr	r3, [pc, #56]	@ (8002988 <HAL_TIM_Encoder_MspInit+0xe0>)
 8002950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800295a:	23c0      	movs	r3, #192	@ 0xc0
 800295c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002962:	2300      	movs	r3, #0
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002966:	2300      	movs	r3, #0
 8002968:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800296a:	2302      	movs	r3, #2
 800296c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296e:	f107 031c 	add.w	r3, r7, #28
 8002972:	4619      	mov	r1, r3
 8002974:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002978:	f000 fbb0 	bl	80030dc <HAL_GPIO_Init>
}
 800297c:	bf00      	nop
 800297e:	3730      	adds	r7, #48	@ 0x30
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40012c00 	.word	0x40012c00
 8002988:	40021000 	.word	0x40021000
 800298c:	40000400 	.word	0x40000400

08002990 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a0:	d10b      	bne.n	80029ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029a2:	4b09      	ldr	r3, [pc, #36]	@ (80029c8 <HAL_TIM_Base_MspInit+0x38>)
 80029a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a6:	4a08      	ldr	r2, [pc, #32]	@ (80029c8 <HAL_TIM_Base_MspInit+0x38>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80029ae:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <HAL_TIM_Base_MspInit+0x38>)
 80029b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000

080029cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 030c 	add.w	r3, r7, #12
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029ec:	d11c      	bne.n	8002a28 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ee:	4b10      	ldr	r3, [pc, #64]	@ (8002a30 <HAL_TIM_MspPostInit+0x64>)
 80029f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f2:	4a0f      	ldr	r2, [pc, #60]	@ (8002a30 <HAL_TIM_MspPostInit+0x64>)
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002a30 <HAL_TIM_MspPostInit+0x64>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a06:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	4619      	mov	r1, r3
 8002a22:	4804      	ldr	r0, [pc, #16]	@ (8002a34 <HAL_TIM_MspPostInit+0x68>)
 8002a24:	f000 fb5a 	bl	80030dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002a28:	bf00      	nop
 8002a2a:	3720      	adds	r7, #32
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40021000 	.word	0x40021000
 8002a34:	48000400 	.word	0x48000400

08002a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <NMI_Handler+0x4>

08002a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <HardFault_Handler+0x4>

08002a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a4c:	bf00      	nop
 8002a4e:	e7fd      	b.n	8002a4c <MemManage_Handler+0x4>

08002a50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <BusFault_Handler+0x4>

08002a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a5c:	bf00      	nop
 8002a5e:	e7fd      	b.n	8002a5c <UsageFault_Handler+0x4>

08002a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a8e:	f000 f975 	bl	8002d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
	...

08002a98 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002a9c:	4802      	ldr	r0, [pc, #8]	@ (8002aa8 <UART4_IRQHandler+0x10>)
 8002a9e:	f003 fab7 	bl	8006010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000284 	.word	0x20000284

08002aac <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002ab0:	4802      	ldr	r0, [pc, #8]	@ (8002abc <LPUART1_IRQHandler+0x10>)
 8002ab2:	f003 faad 	bl	8006010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002ab6:	bf00      	nop
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	200001fc 	.word	0x200001fc

08002ac0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return 1;
 8002ac4:	2301      	movs	r3, #1
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <_kill>:

int _kill(int pid, int sig)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ada:	f005 fccf 	bl	800847c <__errno>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2216      	movs	r2, #22
 8002ae2:	601a      	str	r2, [r3, #0]
  return -1;
 8002ae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_exit>:

void _exit (int status)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002af8:	f04f 31ff 	mov.w	r1, #4294967295
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff ffe7 	bl	8002ad0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b02:	bf00      	nop
 8002b04:	e7fd      	b.n	8002b02 <_exit+0x12>

08002b06 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	60f8      	str	r0, [r7, #12]
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	e00a      	b.n	8002b2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b18:	f3af 8000 	nop.w
 8002b1c:	4601      	mov	r1, r0
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	60ba      	str	r2, [r7, #8]
 8002b24:	b2ca      	uxtb	r2, r1
 8002b26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	dbf0      	blt.n	8002b18 <_read+0x12>
  }

  return len;
 8002b36:	687b      	ldr	r3, [r7, #4]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e009      	b.n	8002b66 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	60ba      	str	r2, [r7, #8]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe f9ec 	bl	8000f38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	3301      	adds	r3, #1
 8002b64:	617b      	str	r3, [r7, #20]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	dbf1      	blt.n	8002b52 <_write+0x12>
  }
  return len;
 8002b6e:	687b      	ldr	r3, [r7, #4]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <_close>:

int _close(int file)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ba0:	605a      	str	r2, [r3, #4]
  return 0;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <_isatty>:

int _isatty(int file)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bb8:	2301      	movs	r3, #1
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b085      	sub	sp, #20
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002be8:	4a14      	ldr	r2, [pc, #80]	@ (8002c3c <_sbrk+0x5c>)
 8002bea:	4b15      	ldr	r3, [pc, #84]	@ (8002c40 <_sbrk+0x60>)
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bf4:	4b13      	ldr	r3, [pc, #76]	@ (8002c44 <_sbrk+0x64>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d102      	bne.n	8002c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bfc:	4b11      	ldr	r3, [pc, #68]	@ (8002c44 <_sbrk+0x64>)
 8002bfe:	4a12      	ldr	r2, [pc, #72]	@ (8002c48 <_sbrk+0x68>)
 8002c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c02:	4b10      	ldr	r3, [pc, #64]	@ (8002c44 <_sbrk+0x64>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4413      	add	r3, r2
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d207      	bcs.n	8002c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c10:	f005 fc34 	bl	800847c <__errno>
 8002c14:	4603      	mov	r3, r0
 8002c16:	220c      	movs	r2, #12
 8002c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1e:	e009      	b.n	8002c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c20:	4b08      	ldr	r3, [pc, #32]	@ (8002c44 <_sbrk+0x64>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c26:	4b07      	ldr	r3, [pc, #28]	@ (8002c44 <_sbrk+0x64>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	4a05      	ldr	r2, [pc, #20]	@ (8002c44 <_sbrk+0x64>)
 8002c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c32:	68fb      	ldr	r3, [r7, #12]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20018000 	.word	0x20018000
 8002c40:	00000400 	.word	0x00000400
 8002c44:	20000674 	.word	0x20000674
 8002c48:	200007c8 	.word	0x200007c8

08002c4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c50:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <SystemInit+0x20>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c56:	4a05      	ldr	r2, [pc, #20]	@ (8002c6c <SystemInit+0x20>)
 8002c58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ca8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c74:	f7ff ffea 	bl	8002c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c78:	480c      	ldr	r0, [pc, #48]	@ (8002cac <LoopForever+0x6>)
  ldr r1, =_edata
 8002c7a:	490d      	ldr	r1, [pc, #52]	@ (8002cb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb4 <LoopForever+0xe>)
  movs r3, #0
 8002c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c80:	e002      	b.n	8002c88 <LoopCopyDataInit>

08002c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c86:	3304      	adds	r3, #4

08002c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c8c:	d3f9      	bcc.n	8002c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c90:	4c0a      	ldr	r4, [pc, #40]	@ (8002cbc <LoopForever+0x16>)
  movs r3, #0
 8002c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c94:	e001      	b.n	8002c9a <LoopFillZerobss>

08002c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c98:	3204      	adds	r2, #4

08002c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c9c:	d3fb      	bcc.n	8002c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c9e:	f005 fbf3 	bl	8008488 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ca2:	f7fe f95d 	bl	8000f60 <main>

08002ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ca6:	e7fe      	b.n	8002ca6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ca8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cb0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002cb4:	0800b8a8 	.word	0x0800b8a8
  ldr r2, =_sbss
 8002cb8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002cbc:	200007c8 	.word	0x200007c8

08002cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cc0:	e7fe      	b.n	8002cc0 <ADC1_2_IRQHandler>
	...

08002cc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cce:	4b0c      	ldr	r3, [pc, #48]	@ (8002d00 <HAL_Init+0x3c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a0b      	ldr	r2, [pc, #44]	@ (8002d00 <HAL_Init+0x3c>)
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cd8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cda:	2003      	movs	r0, #3
 8002cdc:	f000 f93e 	bl	8002f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f000 f80f 	bl	8002d04 <HAL_InitTick>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	71fb      	strb	r3, [r7, #7]
 8002cf0:	e001      	b.n	8002cf6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cf2:	f7ff fbc9 	bl	8002488 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40022000 	.word	0x40022000

08002d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002d10:	4b17      	ldr	r3, [pc, #92]	@ (8002d70 <HAL_InitTick+0x6c>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d023      	beq.n	8002d60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002d18:	4b16      	ldr	r3, [pc, #88]	@ (8002d74 <HAL_InitTick+0x70>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b14      	ldr	r3, [pc, #80]	@ (8002d70 <HAL_InitTick+0x6c>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	4619      	mov	r1, r3
 8002d22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f949 	bl	8002fc6 <HAL_SYSTICK_Config>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10f      	bne.n	8002d5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b0f      	cmp	r3, #15
 8002d3e:	d809      	bhi.n	8002d54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d40:	2200      	movs	r2, #0
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295
 8002d48:	f000 f913 	bl	8002f72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d78 <HAL_InitTick+0x74>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e007      	b.n	8002d64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	e004      	b.n	8002d64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
 8002d5e:	e001      	b.n	8002d64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000014 	.word	0x20000014
 8002d74:	2000000c 	.word	0x2000000c
 8002d78:	20000010 	.word	0x20000010

08002d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d80:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <HAL_IncTick+0x20>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_IncTick+0x24>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	4a04      	ldr	r2, [pc, #16]	@ (8002da0 <HAL_IncTick+0x24>)
 8002d8e:	6013      	str	r3, [r2, #0]
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20000014 	.word	0x20000014
 8002da0:	20000678 	.word	0x20000678

08002da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  return uwTick;
 8002da8:	4b03      	ldr	r3, [pc, #12]	@ (8002db8 <HAL_GetTick+0x14>)
 8002daa:	681b      	ldr	r3, [r3, #0]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	20000678 	.word	0x20000678

08002dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e00 <__NVIC_SetPriorityGrouping+0x44>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dee:	4a04      	ldr	r2, [pc, #16]	@ (8002e00 <__NVIC_SetPriorityGrouping+0x44>)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	60d3      	str	r3, [r2, #12]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e08:	4b04      	ldr	r3, [pc, #16]	@ (8002e1c <__NVIC_GetPriorityGrouping+0x18>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	0a1b      	lsrs	r3, r3, #8
 8002e0e:	f003 0307 	and.w	r3, r3, #7
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	db0b      	blt.n	8002e4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	f003 021f 	and.w	r2, r3, #31
 8002e38:	4907      	ldr	r1, [pc, #28]	@ (8002e58 <__NVIC_EnableIRQ+0x38>)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	2001      	movs	r0, #1
 8002e42:	fa00 f202 	lsl.w	r2, r0, r2
 8002e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	e000e100 	.word	0xe000e100

08002e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	6039      	str	r1, [r7, #0]
 8002e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	db0a      	blt.n	8002e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	490c      	ldr	r1, [pc, #48]	@ (8002ea8 <__NVIC_SetPriority+0x4c>)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	0112      	lsls	r2, r2, #4
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	440b      	add	r3, r1
 8002e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e84:	e00a      	b.n	8002e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4908      	ldr	r1, [pc, #32]	@ (8002eac <__NVIC_SetPriority+0x50>)
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	3b04      	subs	r3, #4
 8002e94:	0112      	lsls	r2, r2, #4
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	440b      	add	r3, r1
 8002e9a:	761a      	strb	r2, [r3, #24]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000e100 	.word	0xe000e100
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b089      	sub	sp, #36	@ 0x24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f1c3 0307 	rsb	r3, r3, #7
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	bf28      	it	cs
 8002ece:	2304      	movcs	r3, #4
 8002ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	2b06      	cmp	r3, #6
 8002ed8:	d902      	bls.n	8002ee0 <NVIC_EncodePriority+0x30>
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3b03      	subs	r3, #3
 8002ede:	e000      	b.n	8002ee2 <NVIC_EncodePriority+0x32>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	43d9      	mvns	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f08:	4313      	orrs	r3, r2
         );
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3724      	adds	r7, #36	@ 0x24
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f28:	d301      	bcc.n	8002f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e00f      	b.n	8002f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f58 <SysTick_Config+0x40>)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f36:	210f      	movs	r1, #15
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	f7ff ff8e 	bl	8002e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f40:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <SysTick_Config+0x40>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f46:	4b04      	ldr	r3, [pc, #16]	@ (8002f58 <SysTick_Config+0x40>)
 8002f48:	2207      	movs	r2, #7
 8002f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	e000e010 	.word	0xe000e010

08002f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff ff29 	bl	8002dbc <__NVIC_SetPriorityGrouping>
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b086      	sub	sp, #24
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	4603      	mov	r3, r0
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f84:	f7ff ff3e 	bl	8002e04 <__NVIC_GetPriorityGrouping>
 8002f88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	6978      	ldr	r0, [r7, #20]
 8002f90:	f7ff ff8e 	bl	8002eb0 <NVIC_EncodePriority>
 8002f94:	4602      	mov	r2, r0
 8002f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff5d 	bl	8002e5c <__NVIC_SetPriority>
}
 8002fa2:	bf00      	nop
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff ff31 	bl	8002e20 <__NVIC_EnableIRQ>
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ffa2 	bl	8002f18 <SysTick_Config>
 8002fd4:	4603      	mov	r3, r0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b085      	sub	sp, #20
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d008      	beq.n	8003008 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e022      	b.n	800304e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 020e 	bic.w	r2, r2, #14
 8003016:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302c:	f003 021c 	and.w	r2, r3, #28
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	2101      	movs	r1, #1
 8003036:	fa01 f202 	lsl.w	r2, r1, r2
 800303a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800304c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d005      	beq.n	800307e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2204      	movs	r2, #4
 8003076:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
 800307c:	e029      	b.n	80030d2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 020e 	bic.w	r2, r2, #14
 800308c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0201 	bic.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a2:	f003 021c 	and.w	r2, r3, #28
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	2101      	movs	r1, #1
 80030ac:	fa01 f202 	lsl.w	r2, r1, r2
 80030b0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4798      	blx	r3
    }
  }
  return status;
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ea:	e17f      	b.n	80033ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	2101      	movs	r1, #1
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	fa01 f303 	lsl.w	r3, r1, r3
 80030f8:	4013      	ands	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8171 	beq.w	80033e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0303 	and.w	r3, r3, #3
 800310c:	2b01      	cmp	r3, #1
 800310e:	d005      	beq.n	800311c <HAL_GPIO_Init+0x40>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d130      	bne.n	800317e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	2203      	movs	r2, #3
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003152:	2201      	movs	r2, #1
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4013      	ands	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	f003 0201 	and.w	r2, r3, #1
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b03      	cmp	r3, #3
 8003188:	d118      	bne.n	80031bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003190:	2201      	movs	r2, #1
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	08db      	lsrs	r3, r3, #3
 80031a6:	f003 0201 	and.w	r2, r3, #1
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d017      	beq.n	80031f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	2203      	movs	r2, #3
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0303 	and.w	r3, r3, #3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d123      	bne.n	800324c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	08da      	lsrs	r2, r3, #3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3208      	adds	r2, #8
 800320c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003210:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	220f      	movs	r2, #15
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	08da      	lsrs	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3208      	adds	r2, #8
 8003246:	6939      	ldr	r1, [r7, #16]
 8003248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	2203      	movs	r2, #3
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4013      	ands	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0203 	and.w	r2, r3, #3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80ac 	beq.w	80033e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800328e:	4b5f      	ldr	r3, [pc, #380]	@ (800340c <HAL_GPIO_Init+0x330>)
 8003290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003292:	4a5e      	ldr	r2, [pc, #376]	@ (800340c <HAL_GPIO_Init+0x330>)
 8003294:	f043 0301 	orr.w	r3, r3, #1
 8003298:	6613      	str	r3, [r2, #96]	@ 0x60
 800329a:	4b5c      	ldr	r3, [pc, #368]	@ (800340c <HAL_GPIO_Init+0x330>)
 800329c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032a6:	4a5a      	ldr	r2, [pc, #360]	@ (8003410 <HAL_GPIO_Init+0x334>)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	089b      	lsrs	r3, r3, #2
 80032ac:	3302      	adds	r3, #2
 80032ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	220f      	movs	r2, #15
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80032d0:	d025      	beq.n	800331e <HAL_GPIO_Init+0x242>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4f      	ldr	r2, [pc, #316]	@ (8003414 <HAL_GPIO_Init+0x338>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01f      	beq.n	800331a <HAL_GPIO_Init+0x23e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4e      	ldr	r2, [pc, #312]	@ (8003418 <HAL_GPIO_Init+0x33c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d019      	beq.n	8003316 <HAL_GPIO_Init+0x23a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4d      	ldr	r2, [pc, #308]	@ (800341c <HAL_GPIO_Init+0x340>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <HAL_GPIO_Init+0x236>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a4c      	ldr	r2, [pc, #304]	@ (8003420 <HAL_GPIO_Init+0x344>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00d      	beq.n	800330e <HAL_GPIO_Init+0x232>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a4b      	ldr	r2, [pc, #300]	@ (8003424 <HAL_GPIO_Init+0x348>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <HAL_GPIO_Init+0x22e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a4a      	ldr	r2, [pc, #296]	@ (8003428 <HAL_GPIO_Init+0x34c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d101      	bne.n	8003306 <HAL_GPIO_Init+0x22a>
 8003302:	2306      	movs	r3, #6
 8003304:	e00c      	b.n	8003320 <HAL_GPIO_Init+0x244>
 8003306:	2307      	movs	r3, #7
 8003308:	e00a      	b.n	8003320 <HAL_GPIO_Init+0x244>
 800330a:	2305      	movs	r3, #5
 800330c:	e008      	b.n	8003320 <HAL_GPIO_Init+0x244>
 800330e:	2304      	movs	r3, #4
 8003310:	e006      	b.n	8003320 <HAL_GPIO_Init+0x244>
 8003312:	2303      	movs	r3, #3
 8003314:	e004      	b.n	8003320 <HAL_GPIO_Init+0x244>
 8003316:	2302      	movs	r3, #2
 8003318:	e002      	b.n	8003320 <HAL_GPIO_Init+0x244>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_GPIO_Init+0x244>
 800331e:	2300      	movs	r3, #0
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	f002 0203 	and.w	r2, r2, #3
 8003326:	0092      	lsls	r2, r2, #2
 8003328:	4093      	lsls	r3, r2
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4313      	orrs	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003330:	4937      	ldr	r1, [pc, #220]	@ (8003410 <HAL_GPIO_Init+0x334>)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	3302      	adds	r3, #2
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800333e:	4b3b      	ldr	r3, [pc, #236]	@ (800342c <HAL_GPIO_Init+0x350>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	43db      	mvns	r3, r3
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4013      	ands	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003362:	4a32      	ldr	r2, [pc, #200]	@ (800342c <HAL_GPIO_Init+0x350>)
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003368:	4b30      	ldr	r3, [pc, #192]	@ (800342c <HAL_GPIO_Init+0x350>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	43db      	mvns	r3, r3
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800338c:	4a27      	ldr	r2, [pc, #156]	@ (800342c <HAL_GPIO_Init+0x350>)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003392:	4b26      	ldr	r3, [pc, #152]	@ (800342c <HAL_GPIO_Init+0x350>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	43db      	mvns	r3, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4013      	ands	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033b6:	4a1d      	ldr	r2, [pc, #116]	@ (800342c <HAL_GPIO_Init+0x350>)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033bc:	4b1b      	ldr	r3, [pc, #108]	@ (800342c <HAL_GPIO_Init+0x350>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033e0:	4a12      	ldr	r2, [pc, #72]	@ (800342c <HAL_GPIO_Init+0x350>)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	3301      	adds	r3, #1
 80033ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fa22 f303 	lsr.w	r3, r2, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f47f ae78 	bne.w	80030ec <HAL_GPIO_Init+0x10>
  }
}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	40010000 	.word	0x40010000
 8003414:	48000400 	.word	0x48000400
 8003418:	48000800 	.word	0x48000800
 800341c:	48000c00 	.word	0x48000c00
 8003420:	48001000 	.word	0x48001000
 8003424:	48001400 	.word	0x48001400
 8003428:	48001800 	.word	0x48001800
 800342c:	40010400 	.word	0x40010400

08003430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	807b      	strh	r3, [r7, #2]
 800343c:	4613      	mov	r3, r2
 800343e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003440:	787b      	ldrb	r3, [r7, #1]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003446:	887a      	ldrh	r2, [r7, #2]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800344c:	e002      	b.n	8003454 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800344e:	887a      	ldrh	r2, [r7, #2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003464:	4b04      	ldr	r3, [pc, #16]	@ (8003478 <HAL_PWREx_GetVoltageRange+0x18>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40007000 	.word	0x40007000

0800347c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800348a:	d130      	bne.n	80034ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800348c:	4b23      	ldr	r3, [pc, #140]	@ (800351c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003498:	d038      	beq.n	800350c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800349a:	4b20      	ldr	r3, [pc, #128]	@ (800351c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034a2:	4a1e      	ldr	r2, [pc, #120]	@ (800351c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003520 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2232      	movs	r2, #50	@ 0x32
 80034b0:	fb02 f303 	mul.w	r3, r2, r3
 80034b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003524 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	0c9b      	lsrs	r3, r3, #18
 80034bc:	3301      	adds	r3, #1
 80034be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034c0:	e002      	b.n	80034c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034c8:	4b14      	ldr	r3, [pc, #80]	@ (800351c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034d4:	d102      	bne.n	80034dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1f2      	bne.n	80034c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034dc:	4b0f      	ldr	r3, [pc, #60]	@ (800351c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034e8:	d110      	bne.n	800350c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e00f      	b.n	800350e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034ee:	4b0b      	ldr	r3, [pc, #44]	@ (800351c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034fa:	d007      	beq.n	800350c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034fc:	4b07      	ldr	r3, [pc, #28]	@ (800351c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003504:	4a05      	ldr	r2, [pc, #20]	@ (800351c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003506:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800350a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40007000 	.word	0x40007000
 8003520:	2000000c 	.word	0x2000000c
 8003524:	431bde83 	.word	0x431bde83

08003528 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e3ca      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800353a:	4b97      	ldr	r3, [pc, #604]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003544:	4b94      	ldr	r3, [pc, #592]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	2b00      	cmp	r3, #0
 8003558:	f000 80e4 	beq.w	8003724 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d007      	beq.n	8003572 <HAL_RCC_OscConfig+0x4a>
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b0c      	cmp	r3, #12
 8003566:	f040 808b 	bne.w	8003680 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b01      	cmp	r3, #1
 800356e:	f040 8087 	bne.w	8003680 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003572:	4b89      	ldr	r3, [pc, #548]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_RCC_OscConfig+0x62>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e3a2      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1a      	ldr	r2, [r3, #32]
 800358e:	4b82      	ldr	r3, [pc, #520]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d004      	beq.n	80035a4 <HAL_RCC_OscConfig+0x7c>
 800359a:	4b7f      	ldr	r3, [pc, #508]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035a2:	e005      	b.n	80035b0 <HAL_RCC_OscConfig+0x88>
 80035a4:	4b7c      	ldr	r3, [pc, #496]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80035a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035aa:	091b      	lsrs	r3, r3, #4
 80035ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d223      	bcs.n	80035fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fd55 	bl	8004068 <RCC_SetFlashLatencyFromMSIRange>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e383      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035c8:	4b73      	ldr	r3, [pc, #460]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a72      	ldr	r2, [pc, #456]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80035ce:	f043 0308 	orr.w	r3, r3, #8
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	4b70      	ldr	r3, [pc, #448]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	496d      	ldr	r1, [pc, #436]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035e6:	4b6c      	ldr	r3, [pc, #432]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	4968      	ldr	r1, [pc, #416]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	604b      	str	r3, [r1, #4]
 80035fa:	e025      	b.n	8003648 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035fc:	4b66      	ldr	r3, [pc, #408]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a65      	ldr	r2, [pc, #404]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 8003602:	f043 0308 	orr.w	r3, r3, #8
 8003606:	6013      	str	r3, [r2, #0]
 8003608:	4b63      	ldr	r3, [pc, #396]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	4960      	ldr	r1, [pc, #384]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 8003616:	4313      	orrs	r3, r2
 8003618:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800361a:	4b5f      	ldr	r3, [pc, #380]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	495b      	ldr	r1, [pc, #364]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 800362a:	4313      	orrs	r3, r2
 800362c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d109      	bne.n	8003648 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fd15 	bl	8004068 <RCC_SetFlashLatencyFromMSIRange>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e343      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003648:	f000 fc4a 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 800364c:	4602      	mov	r2, r0
 800364e:	4b52      	ldr	r3, [pc, #328]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	4950      	ldr	r1, [pc, #320]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 800365a:	5ccb      	ldrb	r3, [r1, r3]
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
 8003664:	4a4e      	ldr	r2, [pc, #312]	@ (80037a0 <HAL_RCC_OscConfig+0x278>)
 8003666:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003668:	4b4e      	ldr	r3, [pc, #312]	@ (80037a4 <HAL_RCC_OscConfig+0x27c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff fb49 	bl	8002d04 <HAL_InitTick>
 8003672:	4603      	mov	r3, r0
 8003674:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003676:	7bfb      	ldrb	r3, [r7, #15]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d052      	beq.n	8003722 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	e327      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d032      	beq.n	80036ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003688:	4b43      	ldr	r3, [pc, #268]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a42      	ldr	r2, [pc, #264]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003694:	f7ff fb86 	bl	8002da4 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800369c:	f7ff fb82 	bl	8002da4 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e310      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036ba:	4b37      	ldr	r3, [pc, #220]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a36      	ldr	r2, [pc, #216]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80036c0:	f043 0308 	orr.w	r3, r3, #8
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	4b34      	ldr	r3, [pc, #208]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	4931      	ldr	r1, [pc, #196]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036d8:	4b2f      	ldr	r3, [pc, #188]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	021b      	lsls	r3, r3, #8
 80036e6:	492c      	ldr	r1, [pc, #176]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
 80036ec:	e01a      	b.n	8003724 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a29      	ldr	r2, [pc, #164]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036fa:	f7ff fb53 	bl	8002da4 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003702:	f7ff fb4f 	bl	8002da4 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e2dd      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003714:	4b20      	ldr	r3, [pc, #128]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f0      	bne.n	8003702 <HAL_RCC_OscConfig+0x1da>
 8003720:	e000      	b.n	8003724 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003722:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d074      	beq.n	800381a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b08      	cmp	r3, #8
 8003734:	d005      	beq.n	8003742 <HAL_RCC_OscConfig+0x21a>
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	2b0c      	cmp	r3, #12
 800373a:	d10e      	bne.n	800375a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2b03      	cmp	r3, #3
 8003740:	d10b      	bne.n	800375a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003742:	4b15      	ldr	r3, [pc, #84]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d064      	beq.n	8003818 <HAL_RCC_OscConfig+0x2f0>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d160      	bne.n	8003818 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e2ba      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003762:	d106      	bne.n	8003772 <HAL_RCC_OscConfig+0x24a>
 8003764:	4b0c      	ldr	r3, [pc, #48]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a0b      	ldr	r2, [pc, #44]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 800376a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800376e:	6013      	str	r3, [r2, #0]
 8003770:	e026      	b.n	80037c0 <HAL_RCC_OscConfig+0x298>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800377a:	d115      	bne.n	80037a8 <HAL_RCC_OscConfig+0x280>
 800377c:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a05      	ldr	r2, [pc, #20]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 8003782:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	4b03      	ldr	r3, [pc, #12]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a02      	ldr	r2, [pc, #8]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 800378e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	e014      	b.n	80037c0 <HAL_RCC_OscConfig+0x298>
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000
 800379c:	0800b110 	.word	0x0800b110
 80037a0:	2000000c 	.word	0x2000000c
 80037a4:	20000010 	.word	0x20000010
 80037a8:	4ba0      	ldr	r3, [pc, #640]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a9f      	ldr	r2, [pc, #636]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 80037ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	4b9d      	ldr	r3, [pc, #628]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a9c      	ldr	r2, [pc, #624]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 80037ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d013      	beq.n	80037f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c8:	f7ff faec 	bl	8002da4 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d0:	f7ff fae8 	bl	8002da4 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	@ 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e276      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037e2:	4b92      	ldr	r3, [pc, #584]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x2a8>
 80037ee:	e014      	b.n	800381a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f0:	f7ff fad8 	bl	8002da4 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037f8:	f7ff fad4 	bl	8002da4 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	@ 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e262      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800380a:	4b88      	ldr	r3, [pc, #544]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x2d0>
 8003816:	e000      	b.n	800381a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003818:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d060      	beq.n	80038e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	2b04      	cmp	r3, #4
 800382a:	d005      	beq.n	8003838 <HAL_RCC_OscConfig+0x310>
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	2b0c      	cmp	r3, #12
 8003830:	d119      	bne.n	8003866 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d116      	bne.n	8003866 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003838:	4b7c      	ldr	r3, [pc, #496]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_RCC_OscConfig+0x328>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e23f      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003850:	4b76      	ldr	r3, [pc, #472]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	061b      	lsls	r3, r3, #24
 800385e:	4973      	ldr	r1, [pc, #460]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 8003860:	4313      	orrs	r3, r2
 8003862:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003864:	e040      	b.n	80038e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d023      	beq.n	80038b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800386e:	4b6f      	ldr	r3, [pc, #444]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a6e      	ldr	r2, [pc, #440]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 8003874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387a:	f7ff fa93 	bl	8002da4 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003882:	f7ff fa8f 	bl	8002da4 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e21d      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003894:	4b65      	ldr	r3, [pc, #404]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a0:	4b62      	ldr	r3, [pc, #392]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	061b      	lsls	r3, r3, #24
 80038ae:	495f      	ldr	r1, [pc, #380]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	604b      	str	r3, [r1, #4]
 80038b4:	e018      	b.n	80038e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b6:	4b5d      	ldr	r3, [pc, #372]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a5c      	ldr	r2, [pc, #368]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 80038bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7ff fa6f 	bl	8002da4 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ca:	f7ff fa6b 	bl	8002da4 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e1f9      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038dc:	4b53      	ldr	r3, [pc, #332]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f0      	bne.n	80038ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d03c      	beq.n	800396e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01c      	beq.n	8003936 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038fc:	4b4b      	ldr	r3, [pc, #300]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 80038fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003902:	4a4a      	ldr	r2, [pc, #296]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7ff fa4a 	bl	8002da4 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003914:	f7ff fa46 	bl	8002da4 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e1d4      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003926:	4b41      	ldr	r3, [pc, #260]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 8003928:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0ef      	beq.n	8003914 <HAL_RCC_OscConfig+0x3ec>
 8003934:	e01b      	b.n	800396e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003936:	4b3d      	ldr	r3, [pc, #244]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 8003938:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800393c:	4a3b      	ldr	r2, [pc, #236]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 800393e:	f023 0301 	bic.w	r3, r3, #1
 8003942:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003946:	f7ff fa2d 	bl	8002da4 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800394e:	f7ff fa29 	bl	8002da4 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e1b7      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003960:	4b32      	ldr	r3, [pc, #200]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 8003962:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1ef      	bne.n	800394e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 80a6 	beq.w	8003ac8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397c:	2300      	movs	r3, #0
 800397e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003980:	4b2a      	ldr	r3, [pc, #168]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 8003982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10d      	bne.n	80039a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800398c:	4b27      	ldr	r3, [pc, #156]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 800398e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003990:	4a26      	ldr	r2, [pc, #152]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 8003992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003996:	6593      	str	r3, [r2, #88]	@ 0x58
 8003998:	4b24      	ldr	r3, [pc, #144]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 800399a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a4:	2301      	movs	r3, #1
 80039a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a8:	4b21      	ldr	r3, [pc, #132]	@ (8003a30 <HAL_RCC_OscConfig+0x508>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d118      	bne.n	80039e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003a30 <HAL_RCC_OscConfig+0x508>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a30 <HAL_RCC_OscConfig+0x508>)
 80039ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c0:	f7ff f9f0 	bl	8002da4 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c8:	f7ff f9ec 	bl	8002da4 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e17a      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039da:	4b15      	ldr	r3, [pc, #84]	@ (8003a30 <HAL_RCC_OscConfig+0x508>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d108      	bne.n	8003a00 <HAL_RCC_OscConfig+0x4d8>
 80039ee:	4b0f      	ldr	r3, [pc, #60]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 80039f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f4:	4a0d      	ldr	r2, [pc, #52]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 80039f6:	f043 0301 	orr.w	r3, r3, #1
 80039fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039fe:	e029      	b.n	8003a54 <HAL_RCC_OscConfig+0x52c>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	2b05      	cmp	r3, #5
 8003a06:	d115      	bne.n	8003a34 <HAL_RCC_OscConfig+0x50c>
 8003a08:	4b08      	ldr	r3, [pc, #32]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a0e:	4a07      	ldr	r2, [pc, #28]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 8003a10:	f043 0304 	orr.w	r3, r3, #4
 8003a14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a18:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a1e:	4a03      	ldr	r2, [pc, #12]	@ (8003a2c <HAL_RCC_OscConfig+0x504>)
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a28:	e014      	b.n	8003a54 <HAL_RCC_OscConfig+0x52c>
 8003a2a:	bf00      	nop
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40007000 	.word	0x40007000
 8003a34:	4b9c      	ldr	r3, [pc, #624]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a3a:	4a9b      	ldr	r2, [pc, #620]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a44:	4b98      	ldr	r3, [pc, #608]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4a:	4a97      	ldr	r2, [pc, #604]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003a4c:	f023 0304 	bic.w	r3, r3, #4
 8003a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d016      	beq.n	8003a8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5c:	f7ff f9a2 	bl	8002da4 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a62:	e00a      	b.n	8003a7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a64:	f7ff f99e 	bl	8002da4 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e12a      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a7a:	4b8b      	ldr	r3, [pc, #556]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0ed      	beq.n	8003a64 <HAL_RCC_OscConfig+0x53c>
 8003a88:	e015      	b.n	8003ab6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8a:	f7ff f98b 	bl	8002da4 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a90:	e00a      	b.n	8003aa8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a92:	f7ff f987 	bl	8002da4 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e113      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aa8:	4b7f      	ldr	r3, [pc, #508]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1ed      	bne.n	8003a92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ab6:	7ffb      	ldrb	r3, [r7, #31]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d105      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003abc:	4b7a      	ldr	r3, [pc, #488]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac0:	4a79      	ldr	r2, [pc, #484]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003ac2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ac6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80fe 	beq.w	8003cce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	f040 80d0 	bne.w	8003c7c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003adc:	4b72      	ldr	r3, [pc, #456]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f003 0203 	and.w	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d130      	bne.n	8003b52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afa:	3b01      	subs	r3, #1
 8003afc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d127      	bne.n	8003b52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d11f      	bne.n	8003b52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b1c:	2a07      	cmp	r2, #7
 8003b1e:	bf14      	ite	ne
 8003b20:	2201      	movne	r2, #1
 8003b22:	2200      	moveq	r2, #0
 8003b24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d113      	bne.n	8003b52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b34:	085b      	lsrs	r3, r3, #1
 8003b36:	3b01      	subs	r3, #1
 8003b38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d109      	bne.n	8003b52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b48:	085b      	lsrs	r3, r3, #1
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d06e      	beq.n	8003c30 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b0c      	cmp	r3, #12
 8003b56:	d069      	beq.n	8003c2c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b58:	4b53      	ldr	r3, [pc, #332]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d105      	bne.n	8003b70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003b64:	4b50      	ldr	r3, [pc, #320]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e0ad      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b74:	4b4c      	ldr	r3, [pc, #304]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a4b      	ldr	r2, [pc, #300]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003b7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b80:	f7ff f910 	bl	8002da4 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b88:	f7ff f90c 	bl	8002da4 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e09a      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b9a:	4b43      	ldr	r3, [pc, #268]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ba6:	4b40      	ldr	r3, [pc, #256]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	4b40      	ldr	r3, [pc, #256]	@ (8003cac <HAL_RCC_OscConfig+0x784>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003bb6:	3a01      	subs	r2, #1
 8003bb8:	0112      	lsls	r2, r2, #4
 8003bba:	4311      	orrs	r1, r2
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003bc0:	0212      	lsls	r2, r2, #8
 8003bc2:	4311      	orrs	r1, r2
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bc8:	0852      	lsrs	r2, r2, #1
 8003bca:	3a01      	subs	r2, #1
 8003bcc:	0552      	lsls	r2, r2, #21
 8003bce:	4311      	orrs	r1, r2
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003bd4:	0852      	lsrs	r2, r2, #1
 8003bd6:	3a01      	subs	r2, #1
 8003bd8:	0652      	lsls	r2, r2, #25
 8003bda:	4311      	orrs	r1, r2
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003be0:	0912      	lsrs	r2, r2, #4
 8003be2:	0452      	lsls	r2, r2, #17
 8003be4:	430a      	orrs	r2, r1
 8003be6:	4930      	ldr	r1, [pc, #192]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bec:	4b2e      	ldr	r3, [pc, #184]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a2d      	ldr	r2, [pc, #180]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003bf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bf6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003bfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c04:	f7ff f8ce 	bl	8002da4 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0c:	f7ff f8ca 	bl	8002da4 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e058      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1e:	4b22      	ldr	r3, [pc, #136]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c2a:	e050      	b.n	8003cce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e04f      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c30:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d148      	bne.n	8003cce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a19      	ldr	r2, [pc, #100]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003c42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c48:	4b17      	ldr	r3, [pc, #92]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4a16      	ldr	r2, [pc, #88]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003c4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c54:	f7ff f8a6 	bl	8002da4 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5c:	f7ff f8a2 	bl	8002da4 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e030      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0x734>
 8003c7a:	e028      	b.n	8003cce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	2b0c      	cmp	r3, #12
 8003c80:	d023      	beq.n	8003cca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c82:	4b09      	ldr	r3, [pc, #36]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a08      	ldr	r2, [pc, #32]	@ (8003ca8 <HAL_RCC_OscConfig+0x780>)
 8003c88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7ff f889 	bl	8002da4 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c94:	e00c      	b.n	8003cb0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c96:	f7ff f885 	bl	8002da4 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d905      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e013      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cb0:	4b09      	ldr	r3, [pc, #36]	@ (8003cd8 <HAL_RCC_OscConfig+0x7b0>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1ec      	bne.n	8003c96 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003cbc:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <HAL_RCC_OscConfig+0x7b0>)
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	4905      	ldr	r1, [pc, #20]	@ (8003cd8 <HAL_RCC_OscConfig+0x7b0>)
 8003cc2:	4b06      	ldr	r3, [pc, #24]	@ (8003cdc <HAL_RCC_OscConfig+0x7b4>)
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	60cb      	str	r3, [r1, #12]
 8003cc8:	e001      	b.n	8003cce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e000      	b.n	8003cd0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3720      	adds	r7, #32
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	feeefffc 	.word	0xfeeefffc

08003ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0e7      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cf4:	4b75      	ldr	r3, [pc, #468]	@ (8003ecc <HAL_RCC_ClockConfig+0x1ec>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d910      	bls.n	8003d24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4b72      	ldr	r3, [pc, #456]	@ (8003ecc <HAL_RCC_ClockConfig+0x1ec>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 0207 	bic.w	r2, r3, #7
 8003d0a:	4970      	ldr	r1, [pc, #448]	@ (8003ecc <HAL_RCC_ClockConfig+0x1ec>)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d12:	4b6e      	ldr	r3, [pc, #440]	@ (8003ecc <HAL_RCC_ClockConfig+0x1ec>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e0cf      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d010      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	4b66      	ldr	r3, [pc, #408]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d908      	bls.n	8003d52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d40:	4b63      	ldr	r3, [pc, #396]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	4960      	ldr	r1, [pc, #384]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d04c      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d66:	4b5a      	ldr	r3, [pc, #360]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d121      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e0a6      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d107      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d7e:	4b54      	ldr	r3, [pc, #336]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d115      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e09a      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d107      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d96:	4b4e      	ldr	r3, [pc, #312]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e08e      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003da6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e086      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003db6:	4b46      	ldr	r3, [pc, #280]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f023 0203 	bic.w	r2, r3, #3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	4943      	ldr	r1, [pc, #268]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dc8:	f7fe ffec 	bl	8002da4 <HAL_GetTick>
 8003dcc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dce:	e00a      	b.n	8003de6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd0:	f7fe ffe8 	bl	8002da4 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e06e      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 020c 	and.w	r2, r3, #12
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d1eb      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d010      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	4b31      	ldr	r3, [pc, #196]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d208      	bcs.n	8003e26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e14:	4b2e      	ldr	r3, [pc, #184]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	492b      	ldr	r1, [pc, #172]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e26:	4b29      	ldr	r3, [pc, #164]	@ (8003ecc <HAL_RCC_ClockConfig+0x1ec>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d210      	bcs.n	8003e56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e34:	4b25      	ldr	r3, [pc, #148]	@ (8003ecc <HAL_RCC_ClockConfig+0x1ec>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f023 0207 	bic.w	r2, r3, #7
 8003e3c:	4923      	ldr	r1, [pc, #140]	@ (8003ecc <HAL_RCC_ClockConfig+0x1ec>)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e44:	4b21      	ldr	r3, [pc, #132]	@ (8003ecc <HAL_RCC_ClockConfig+0x1ec>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d001      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e036      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e62:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	4918      	ldr	r1, [pc, #96]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e80:	4b13      	ldr	r3, [pc, #76]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4910      	ldr	r1, [pc, #64]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e94:	f000 f824 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	490b      	ldr	r1, [pc, #44]	@ (8003ed4 <HAL_RCC_ClockConfig+0x1f4>)
 8003ea6:	5ccb      	ldrb	r3, [r1, r3]
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb0:	4a09      	ldr	r2, [pc, #36]	@ (8003ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8003eb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003eb4:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <HAL_RCC_ClockConfig+0x1fc>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fe ff23 	bl	8002d04 <HAL_InitTick>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ec2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40022000 	.word	0x40022000
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	0800b110 	.word	0x0800b110
 8003ed8:	2000000c 	.word	0x2000000c
 8003edc:	20000010 	.word	0x20000010

08003ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b089      	sub	sp, #36	@ 0x24
 8003ee4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
 8003eea:	2300      	movs	r3, #0
 8003eec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eee:	4b3e      	ldr	r3, [pc, #248]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f003 030c 	and.w	r3, r3, #12
 8003ef6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d005      	beq.n	8003f14 <HAL_RCC_GetSysClockFreq+0x34>
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b0c      	cmp	r3, #12
 8003f0c:	d121      	bne.n	8003f52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d11e      	bne.n	8003f52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f14:	4b34      	ldr	r3, [pc, #208]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f20:	4b31      	ldr	r3, [pc, #196]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f26:	0a1b      	lsrs	r3, r3, #8
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	61fb      	str	r3, [r7, #28]
 8003f2e:	e005      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f30:	4b2d      	ldr	r3, [pc, #180]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fec <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10d      	bne.n	8003f68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d102      	bne.n	8003f5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f58:	4b25      	ldr	r3, [pc, #148]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f5a:	61bb      	str	r3, [r7, #24]
 8003f5c:	e004      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d101      	bne.n	8003f68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f64:	4b23      	ldr	r3, [pc, #140]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	d134      	bne.n	8003fd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d003      	beq.n	8003f86 <HAL_RCC_GetSysClockFreq+0xa6>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d003      	beq.n	8003f8c <HAL_RCC_GetSysClockFreq+0xac>
 8003f84:	e005      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003f86:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f88:	617b      	str	r3, [r7, #20]
      break;
 8003f8a:	e005      	b.n	8003f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003f8c:	4b19      	ldr	r3, [pc, #100]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f8e:	617b      	str	r3, [r7, #20]
      break;
 8003f90:	e002      	b.n	8003f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	617b      	str	r3, [r7, #20]
      break;
 8003f96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f98:	4b13      	ldr	r3, [pc, #76]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fa6:	4b10      	ldr	r3, [pc, #64]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	0a1b      	lsrs	r3, r3, #8
 8003fac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	fb03 f202 	mul.w	r2, r3, r2
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	0e5b      	lsrs	r3, r3, #25
 8003fc4:	f003 0303 	and.w	r3, r3, #3
 8003fc8:	3301      	adds	r3, #1
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003fd8:	69bb      	ldr	r3, [r7, #24]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3724      	adds	r7, #36	@ 0x24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	0800b128 	.word	0x0800b128
 8003ff0:	00f42400 	.word	0x00f42400
 8003ff4:	007a1200 	.word	0x007a1200

08003ff8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ffc:	4b03      	ldr	r3, [pc, #12]	@ (800400c <HAL_RCC_GetHCLKFreq+0x14>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
}
 8004000:	4618      	mov	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	2000000c 	.word	0x2000000c

08004010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004014:	f7ff fff0 	bl	8003ff8 <HAL_RCC_GetHCLKFreq>
 8004018:	4602      	mov	r2, r0
 800401a:	4b06      	ldr	r3, [pc, #24]	@ (8004034 <HAL_RCC_GetPCLK1Freq+0x24>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	0a1b      	lsrs	r3, r3, #8
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	4904      	ldr	r1, [pc, #16]	@ (8004038 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004026:	5ccb      	ldrb	r3, [r1, r3]
 8004028:	f003 031f 	and.w	r3, r3, #31
 800402c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004030:	4618      	mov	r0, r3
 8004032:	bd80      	pop	{r7, pc}
 8004034:	40021000 	.word	0x40021000
 8004038:	0800b120 	.word	0x0800b120

0800403c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004040:	f7ff ffda 	bl	8003ff8 <HAL_RCC_GetHCLKFreq>
 8004044:	4602      	mov	r2, r0
 8004046:	4b06      	ldr	r3, [pc, #24]	@ (8004060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	0adb      	lsrs	r3, r3, #11
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	4904      	ldr	r1, [pc, #16]	@ (8004064 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004052:	5ccb      	ldrb	r3, [r1, r3]
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800405c:	4618      	mov	r0, r3
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40021000 	.word	0x40021000
 8004064:	0800b120 	.word	0x0800b120

08004068 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004074:	4b2a      	ldr	r3, [pc, #168]	@ (8004120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004080:	f7ff f9ee 	bl	8003460 <HAL_PWREx_GetVoltageRange>
 8004084:	6178      	str	r0, [r7, #20]
 8004086:	e014      	b.n	80040b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004088:	4b25      	ldr	r3, [pc, #148]	@ (8004120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800408a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408c:	4a24      	ldr	r2, [pc, #144]	@ (8004120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800408e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004092:	6593      	str	r3, [r2, #88]	@ 0x58
 8004094:	4b22      	ldr	r3, [pc, #136]	@ (8004120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040a0:	f7ff f9de 	bl	8003460 <HAL_PWREx_GetVoltageRange>
 80040a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040b8:	d10b      	bne.n	80040d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b80      	cmp	r3, #128	@ 0x80
 80040be:	d919      	bls.n	80040f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80040c4:	d902      	bls.n	80040cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040c6:	2302      	movs	r3, #2
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	e013      	b.n	80040f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040cc:	2301      	movs	r3, #1
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	e010      	b.n	80040f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b80      	cmp	r3, #128	@ 0x80
 80040d6:	d902      	bls.n	80040de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040d8:	2303      	movs	r3, #3
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	e00a      	b.n	80040f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b80      	cmp	r3, #128	@ 0x80
 80040e2:	d102      	bne.n	80040ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040e4:	2302      	movs	r3, #2
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	e004      	b.n	80040f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b70      	cmp	r3, #112	@ 0x70
 80040ee:	d101      	bne.n	80040f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040f0:	2301      	movs	r3, #1
 80040f2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f023 0207 	bic.w	r2, r3, #7
 80040fc:	4909      	ldr	r1, [pc, #36]	@ (8004124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004104:	4b07      	ldr	r3, [pc, #28]	@ (8004124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	429a      	cmp	r2, r3
 8004110:	d001      	beq.n	8004116 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000
 8004124:	40022000 	.word	0x40022000

08004128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004130:	2300      	movs	r3, #0
 8004132:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004134:	2300      	movs	r3, #0
 8004136:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004140:	2b00      	cmp	r3, #0
 8004142:	d041      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004148:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800414c:	d02a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800414e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004152:	d824      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004154:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004158:	d008      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800415a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800415e:	d81e      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004164:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004168:	d010      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800416a:	e018      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800416c:	4b86      	ldr	r3, [pc, #536]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4a85      	ldr	r2, [pc, #532]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004172:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004176:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004178:	e015      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3304      	adds	r3, #4
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fabb 	bl	80046fc <RCCEx_PLLSAI1_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800418a:	e00c      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3320      	adds	r3, #32
 8004190:	2100      	movs	r1, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fba6 	bl	80048e4 <RCCEx_PLLSAI2_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800419c:	e003      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	74fb      	strb	r3, [r7, #19]
      break;
 80041a2:	e000      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80041a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10b      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041ac:	4b76      	ldr	r3, [pc, #472]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041ba:	4973      	ldr	r1, [pc, #460]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041c2:	e001      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d041      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041dc:	d02a      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80041de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041e2:	d824      	bhi.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041e8:	d008      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041ee:	d81e      	bhi.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80041f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041f8:	d010      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041fa:	e018      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041fc:	4b62      	ldr	r3, [pc, #392]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4a61      	ldr	r2, [pc, #388]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004206:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004208:	e015      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3304      	adds	r3, #4
 800420e:	2100      	movs	r1, #0
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fa73 	bl	80046fc <RCCEx_PLLSAI1_Config>
 8004216:	4603      	mov	r3, r0
 8004218:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800421a:	e00c      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3320      	adds	r3, #32
 8004220:	2100      	movs	r1, #0
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fb5e 	bl	80048e4 <RCCEx_PLLSAI2_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800422c:	e003      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	74fb      	strb	r3, [r7, #19]
      break;
 8004232:	e000      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004236:	7cfb      	ldrb	r3, [r7, #19]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800423c:	4b52      	ldr	r3, [pc, #328]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004242:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800424a:	494f      	ldr	r1, [pc, #316]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004252:	e001      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004254:	7cfb      	ldrb	r3, [r7, #19]
 8004256:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80a0 	beq.w	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004266:	2300      	movs	r3, #0
 8004268:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800426a:	4b47      	ldr	r3, [pc, #284]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800427a:	2300      	movs	r3, #0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00d      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004280:	4b41      	ldr	r3, [pc, #260]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004284:	4a40      	ldr	r2, [pc, #256]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800428a:	6593      	str	r3, [r2, #88]	@ 0x58
 800428c:	4b3e      	ldr	r3, [pc, #248]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004298:	2301      	movs	r3, #1
 800429a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800429c:	4b3b      	ldr	r3, [pc, #236]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a3a      	ldr	r2, [pc, #232]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042a8:	f7fe fd7c 	bl	8002da4 <HAL_GetTick>
 80042ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042ae:	e009      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b0:	f7fe fd78 	bl	8002da4 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d902      	bls.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	74fb      	strb	r3, [r7, #19]
        break;
 80042c2:	e005      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042c4:	4b31      	ldr	r3, [pc, #196]	@ (800438c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0ef      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d15c      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d01f      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d019      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042f4:	4b24      	ldr	r3, [pc, #144]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004300:	4b21      	ldr	r3, [pc, #132]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004306:	4a20      	ldr	r2, [pc, #128]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800430c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004310:	4b1d      	ldr	r3, [pc, #116]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004316:	4a1c      	ldr	r2, [pc, #112]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004318:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800431c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004320:	4a19      	ldr	r2, [pc, #100]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fe fd37 	bl	8002da4 <HAL_GetTick>
 8004336:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004338:	e00b      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433a:	f7fe fd33 	bl	8002da4 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d902      	bls.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	74fb      	strb	r3, [r7, #19]
            break;
 8004350:	e006      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004352:	4b0d      	ldr	r3, [pc, #52]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0ec      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10c      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004366:	4b08      	ldr	r3, [pc, #32]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800436c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004376:	4904      	ldr	r1, [pc, #16]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800437e:	e009      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004380:	7cfb      	ldrb	r3, [r7, #19]
 8004382:	74bb      	strb	r3, [r7, #18]
 8004384:	e006      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004386:	bf00      	nop
 8004388:	40021000 	.word	0x40021000
 800438c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004390:	7cfb      	ldrb	r3, [r7, #19]
 8004392:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004394:	7c7b      	ldrb	r3, [r7, #17]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d105      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439a:	4b9e      	ldr	r3, [pc, #632]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439e:	4a9d      	ldr	r2, [pc, #628]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043b2:	4b98      	ldr	r3, [pc, #608]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b8:	f023 0203 	bic.w	r2, r3, #3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c0:	4994      	ldr	r1, [pc, #592]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043d4:	4b8f      	ldr	r3, [pc, #572]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043da:	f023 020c 	bic.w	r2, r3, #12
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e2:	498c      	ldr	r1, [pc, #560]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043f6:	4b87      	ldr	r3, [pc, #540]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004404:	4983      	ldr	r1, [pc, #524]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004418:	4b7e      	ldr	r3, [pc, #504]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004426:	497b      	ldr	r1, [pc, #492]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800443a:	4b76      	ldr	r3, [pc, #472]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004440:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004448:	4972      	ldr	r1, [pc, #456]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800445c:	4b6d      	ldr	r3, [pc, #436]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004462:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800446a:	496a      	ldr	r1, [pc, #424]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800447e:	4b65      	ldr	r3, [pc, #404]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004484:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800448c:	4961      	ldr	r1, [pc, #388]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044a0:	4b5c      	ldr	r3, [pc, #368]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ae:	4959      	ldr	r1, [pc, #356]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044c2:	4b54      	ldr	r3, [pc, #336]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d0:	4950      	ldr	r1, [pc, #320]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044e4:	4b4b      	ldr	r3, [pc, #300]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f2:	4948      	ldr	r1, [pc, #288]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004506:	4b43      	ldr	r3, [pc, #268]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004514:	493f      	ldr	r1, [pc, #252]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d028      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004528:	4b3a      	ldr	r3, [pc, #232]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004536:	4937      	ldr	r1, [pc, #220]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004542:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004546:	d106      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004548:	4b32      	ldr	r3, [pc, #200]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4a31      	ldr	r2, [pc, #196]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004552:	60d3      	str	r3, [r2, #12]
 8004554:	e011      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800455a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800455e:	d10c      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	2101      	movs	r1, #1
 8004566:	4618      	mov	r0, r3
 8004568:	f000 f8c8 	bl	80046fc <RCCEx_PLLSAI1_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004576:	7cfb      	ldrb	r3, [r7, #19]
 8004578:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d028      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004586:	4b23      	ldr	r3, [pc, #140]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004594:	491f      	ldr	r1, [pc, #124]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045a4:	d106      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045b0:	60d3      	str	r3, [r2, #12]
 80045b2:	e011      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045bc:	d10c      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3304      	adds	r3, #4
 80045c2:	2101      	movs	r1, #1
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 f899 	bl	80046fc <RCCEx_PLLSAI1_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ce:	7cfb      	ldrb	r3, [r7, #19]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80045d4:	7cfb      	ldrb	r3, [r7, #19]
 80045d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d02b      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f2:	4908      	ldr	r1, [pc, #32]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004602:	d109      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004604:	4b03      	ldr	r3, [pc, #12]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4a02      	ldr	r2, [pc, #8]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800460e:	60d3      	str	r3, [r2, #12]
 8004610:	e014      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004612:	bf00      	nop
 8004614:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800461c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004620:	d10c      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3304      	adds	r3, #4
 8004626:	2101      	movs	r1, #1
 8004628:	4618      	mov	r0, r3
 800462a:	f000 f867 	bl	80046fc <RCCEx_PLLSAI1_Config>
 800462e:	4603      	mov	r3, r0
 8004630:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004632:	7cfb      	ldrb	r3, [r7, #19]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004638:	7cfb      	ldrb	r3, [r7, #19]
 800463a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d02f      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004648:	4b2b      	ldr	r3, [pc, #172]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004656:	4928      	ldr	r1, [pc, #160]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004662:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004666:	d10d      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3304      	adds	r3, #4
 800466c:	2102      	movs	r1, #2
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f844 	bl	80046fc <RCCEx_PLLSAI1_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004678:	7cfb      	ldrb	r3, [r7, #19]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d014      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800467e:	7cfb      	ldrb	r3, [r7, #19]
 8004680:	74bb      	strb	r3, [r7, #18]
 8004682:	e011      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004688:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800468c:	d10c      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3320      	adds	r3, #32
 8004692:	2102      	movs	r1, #2
 8004694:	4618      	mov	r0, r3
 8004696:	f000 f925 	bl	80048e4 <RCCEx_PLLSAI2_Config>
 800469a:	4603      	mov	r3, r0
 800469c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800469e:	7cfb      	ldrb	r3, [r7, #19]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046b4:	4b10      	ldr	r3, [pc, #64]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046c2:	490d      	ldr	r1, [pc, #52]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00b      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046d6:	4b08      	ldr	r3, [pc, #32]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046e6:	4904      	ldr	r1, [pc, #16]	@ (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40021000 	.word	0x40021000

080046fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800470a:	4b75      	ldr	r3, [pc, #468]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d018      	beq.n	8004748 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004716:	4b72      	ldr	r3, [pc, #456]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f003 0203 	and.w	r2, r3, #3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d10d      	bne.n	8004742 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
       ||
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800472e:	4b6c      	ldr	r3, [pc, #432]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	091b      	lsrs	r3, r3, #4
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
       ||
 800473e:	429a      	cmp	r2, r3
 8004740:	d047      	beq.n	80047d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	73fb      	strb	r3, [r7, #15]
 8004746:	e044      	b.n	80047d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d018      	beq.n	8004782 <RCCEx_PLLSAI1_Config+0x86>
 8004750:	2b03      	cmp	r3, #3
 8004752:	d825      	bhi.n	80047a0 <RCCEx_PLLSAI1_Config+0xa4>
 8004754:	2b01      	cmp	r3, #1
 8004756:	d002      	beq.n	800475e <RCCEx_PLLSAI1_Config+0x62>
 8004758:	2b02      	cmp	r3, #2
 800475a:	d009      	beq.n	8004770 <RCCEx_PLLSAI1_Config+0x74>
 800475c:	e020      	b.n	80047a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800475e:	4b60      	ldr	r3, [pc, #384]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d11d      	bne.n	80047a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800476e:	e01a      	b.n	80047a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004770:	4b5b      	ldr	r3, [pc, #364]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004778:	2b00      	cmp	r3, #0
 800477a:	d116      	bne.n	80047aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004780:	e013      	b.n	80047aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004782:	4b57      	ldr	r3, [pc, #348]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10f      	bne.n	80047ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800478e:	4b54      	ldr	r3, [pc, #336]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800479e:	e006      	b.n	80047ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
      break;
 80047a4:	e004      	b.n	80047b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047a6:	bf00      	nop
 80047a8:	e002      	b.n	80047b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047aa:	bf00      	nop
 80047ac:	e000      	b.n	80047b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10d      	bne.n	80047d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047b6:	4b4a      	ldr	r3, [pc, #296]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6819      	ldr	r1, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	430b      	orrs	r3, r1
 80047cc:	4944      	ldr	r1, [pc, #272]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d17d      	bne.n	80048d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047d8:	4b41      	ldr	r3, [pc, #260]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a40      	ldr	r2, [pc, #256]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e4:	f7fe fade 	bl	8002da4 <HAL_GetTick>
 80047e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047ea:	e009      	b.n	8004800 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047ec:	f7fe fada 	bl	8002da4 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d902      	bls.n	8004800 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	73fb      	strb	r3, [r7, #15]
        break;
 80047fe:	e005      	b.n	800480c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004800:	4b37      	ldr	r3, [pc, #220]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1ef      	bne.n	80047ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d160      	bne.n	80048d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d111      	bne.n	800483c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004818:	4b31      	ldr	r3, [pc, #196]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6892      	ldr	r2, [r2, #8]
 8004828:	0211      	lsls	r1, r2, #8
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68d2      	ldr	r2, [r2, #12]
 800482e:	0912      	lsrs	r2, r2, #4
 8004830:	0452      	lsls	r2, r2, #17
 8004832:	430a      	orrs	r2, r1
 8004834:	492a      	ldr	r1, [pc, #168]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004836:	4313      	orrs	r3, r2
 8004838:	610b      	str	r3, [r1, #16]
 800483a:	e027      	b.n	800488c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d112      	bne.n	8004868 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004842:	4b27      	ldr	r3, [pc, #156]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800484a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6892      	ldr	r2, [r2, #8]
 8004852:	0211      	lsls	r1, r2, #8
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6912      	ldr	r2, [r2, #16]
 8004858:	0852      	lsrs	r2, r2, #1
 800485a:	3a01      	subs	r2, #1
 800485c:	0552      	lsls	r2, r2, #21
 800485e:	430a      	orrs	r2, r1
 8004860:	491f      	ldr	r1, [pc, #124]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004862:	4313      	orrs	r3, r2
 8004864:	610b      	str	r3, [r1, #16]
 8004866:	e011      	b.n	800488c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004868:	4b1d      	ldr	r3, [pc, #116]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004870:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6892      	ldr	r2, [r2, #8]
 8004878:	0211      	lsls	r1, r2, #8
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6952      	ldr	r2, [r2, #20]
 800487e:	0852      	lsrs	r2, r2, #1
 8004880:	3a01      	subs	r2, #1
 8004882:	0652      	lsls	r2, r2, #25
 8004884:	430a      	orrs	r2, r1
 8004886:	4916      	ldr	r1, [pc, #88]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004888:	4313      	orrs	r3, r2
 800488a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800488c:	4b14      	ldr	r3, [pc, #80]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a13      	ldr	r2, [pc, #76]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004892:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004898:	f7fe fa84 	bl	8002da4 <HAL_GetTick>
 800489c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800489e:	e009      	b.n	80048b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048a0:	f7fe fa80 	bl	8002da4 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d902      	bls.n	80048b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	73fb      	strb	r3, [r7, #15]
          break;
 80048b2:	e005      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048b4:	4b0a      	ldr	r3, [pc, #40]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0ef      	beq.n	80048a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048c6:	4b06      	ldr	r3, [pc, #24]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	4904      	ldr	r1, [pc, #16]	@ (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40021000 	.word	0x40021000

080048e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048f2:	4b6a      	ldr	r3, [pc, #424]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d018      	beq.n	8004930 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048fe:	4b67      	ldr	r3, [pc, #412]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f003 0203 	and.w	r2, r3, #3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d10d      	bne.n	800492a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
       ||
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004916:	4b61      	ldr	r3, [pc, #388]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	091b      	lsrs	r3, r3, #4
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
       ||
 8004926:	429a      	cmp	r2, r3
 8004928:	d047      	beq.n	80049ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	73fb      	strb	r3, [r7, #15]
 800492e:	e044      	b.n	80049ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b03      	cmp	r3, #3
 8004936:	d018      	beq.n	800496a <RCCEx_PLLSAI2_Config+0x86>
 8004938:	2b03      	cmp	r3, #3
 800493a:	d825      	bhi.n	8004988 <RCCEx_PLLSAI2_Config+0xa4>
 800493c:	2b01      	cmp	r3, #1
 800493e:	d002      	beq.n	8004946 <RCCEx_PLLSAI2_Config+0x62>
 8004940:	2b02      	cmp	r3, #2
 8004942:	d009      	beq.n	8004958 <RCCEx_PLLSAI2_Config+0x74>
 8004944:	e020      	b.n	8004988 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004946:	4b55      	ldr	r3, [pc, #340]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d11d      	bne.n	800498e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004956:	e01a      	b.n	800498e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004958:	4b50      	ldr	r3, [pc, #320]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004960:	2b00      	cmp	r3, #0
 8004962:	d116      	bne.n	8004992 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004968:	e013      	b.n	8004992 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800496a:	4b4c      	ldr	r3, [pc, #304]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10f      	bne.n	8004996 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004976:	4b49      	ldr	r3, [pc, #292]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004986:	e006      	b.n	8004996 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	73fb      	strb	r3, [r7, #15]
      break;
 800498c:	e004      	b.n	8004998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800498e:	bf00      	nop
 8004990:	e002      	b.n	8004998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004992:	bf00      	nop
 8004994:	e000      	b.n	8004998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004996:	bf00      	nop
    }

    if(status == HAL_OK)
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10d      	bne.n	80049ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800499e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6819      	ldr	r1, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	430b      	orrs	r3, r1
 80049b4:	4939      	ldr	r1, [pc, #228]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d167      	bne.n	8004a90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049c0:	4b36      	ldr	r3, [pc, #216]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a35      	ldr	r2, [pc, #212]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049cc:	f7fe f9ea 	bl	8002da4 <HAL_GetTick>
 80049d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049d2:	e009      	b.n	80049e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049d4:	f7fe f9e6 	bl	8002da4 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d902      	bls.n	80049e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	73fb      	strb	r3, [r7, #15]
        break;
 80049e6:	e005      	b.n	80049f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049e8:	4b2c      	ldr	r3, [pc, #176]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1ef      	bne.n	80049d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d14a      	bne.n	8004a90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d111      	bne.n	8004a24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a00:	4b26      	ldr	r3, [pc, #152]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6892      	ldr	r2, [r2, #8]
 8004a10:	0211      	lsls	r1, r2, #8
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68d2      	ldr	r2, [r2, #12]
 8004a16:	0912      	lsrs	r2, r2, #4
 8004a18:	0452      	lsls	r2, r2, #17
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	491f      	ldr	r1, [pc, #124]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	614b      	str	r3, [r1, #20]
 8004a22:	e011      	b.n	8004a48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a24:	4b1d      	ldr	r3, [pc, #116]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6892      	ldr	r2, [r2, #8]
 8004a34:	0211      	lsls	r1, r2, #8
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6912      	ldr	r2, [r2, #16]
 8004a3a:	0852      	lsrs	r2, r2, #1
 8004a3c:	3a01      	subs	r2, #1
 8004a3e:	0652      	lsls	r2, r2, #25
 8004a40:	430a      	orrs	r2, r1
 8004a42:	4916      	ldr	r1, [pc, #88]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a48:	4b14      	ldr	r3, [pc, #80]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a13      	ldr	r2, [pc, #76]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a54:	f7fe f9a6 	bl	8002da4 <HAL_GetTick>
 8004a58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a5a:	e009      	b.n	8004a70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a5c:	f7fe f9a2 	bl	8002da4 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d902      	bls.n	8004a70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a6e:	e005      	b.n	8004a7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a70:	4b0a      	ldr	r3, [pc, #40]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0ef      	beq.n	8004a5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a82:	4b06      	ldr	r3, [pc, #24]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a84:	695a      	ldr	r2, [r3, #20]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	4904      	ldr	r1, [pc, #16]	@ (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000

08004aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e049      	b.n	8004b46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fd ff62 	bl	8002990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3304      	adds	r3, #4
 8004adc:	4619      	mov	r1, r3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	f000 fcae 	bl	8005440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e049      	b.n	8004bf4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f841 	bl	8004bfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	f000 fc57 	bl	8005440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d109      	bne.n	8004c34 <HAL_TIM_PWM_Start+0x24>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	bf14      	ite	ne
 8004c2c:	2301      	movne	r3, #1
 8004c2e:	2300      	moveq	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	e03c      	b.n	8004cae <HAL_TIM_PWM_Start+0x9e>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d109      	bne.n	8004c4e <HAL_TIM_PWM_Start+0x3e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	bf14      	ite	ne
 8004c46:	2301      	movne	r3, #1
 8004c48:	2300      	moveq	r3, #0
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	e02f      	b.n	8004cae <HAL_TIM_PWM_Start+0x9e>
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d109      	bne.n	8004c68 <HAL_TIM_PWM_Start+0x58>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	bf14      	ite	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	2300      	moveq	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	e022      	b.n	8004cae <HAL_TIM_PWM_Start+0x9e>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2b0c      	cmp	r3, #12
 8004c6c:	d109      	bne.n	8004c82 <HAL_TIM_PWM_Start+0x72>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	bf14      	ite	ne
 8004c7a:	2301      	movne	r3, #1
 8004c7c:	2300      	moveq	r3, #0
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	e015      	b.n	8004cae <HAL_TIM_PWM_Start+0x9e>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b10      	cmp	r3, #16
 8004c86:	d109      	bne.n	8004c9c <HAL_TIM_PWM_Start+0x8c>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	bf14      	ite	ne
 8004c94:	2301      	movne	r3, #1
 8004c96:	2300      	moveq	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	e008      	b.n	8004cae <HAL_TIM_PWM_Start+0x9e>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	bf14      	ite	ne
 8004ca8:	2301      	movne	r3, #1
 8004caa:	2300      	moveq	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e09c      	b.n	8004df0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d104      	bne.n	8004cc6 <HAL_TIM_PWM_Start+0xb6>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cc4:	e023      	b.n	8004d0e <HAL_TIM_PWM_Start+0xfe>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b04      	cmp	r3, #4
 8004cca:	d104      	bne.n	8004cd6 <HAL_TIM_PWM_Start+0xc6>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cd4:	e01b      	b.n	8004d0e <HAL_TIM_PWM_Start+0xfe>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d104      	bne.n	8004ce6 <HAL_TIM_PWM_Start+0xd6>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ce4:	e013      	b.n	8004d0e <HAL_TIM_PWM_Start+0xfe>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b0c      	cmp	r3, #12
 8004cea:	d104      	bne.n	8004cf6 <HAL_TIM_PWM_Start+0xe6>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cf4:	e00b      	b.n	8004d0e <HAL_TIM_PWM_Start+0xfe>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b10      	cmp	r3, #16
 8004cfa:	d104      	bne.n	8004d06 <HAL_TIM_PWM_Start+0xf6>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d04:	e003      	b.n	8004d0e <HAL_TIM_PWM_Start+0xfe>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2201      	movs	r2, #1
 8004d14:	6839      	ldr	r1, [r7, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 ffa8 	bl	8005c6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a35      	ldr	r2, [pc, #212]	@ (8004df8 <HAL_TIM_PWM_Start+0x1e8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d013      	beq.n	8004d4e <HAL_TIM_PWM_Start+0x13e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a34      	ldr	r2, [pc, #208]	@ (8004dfc <HAL_TIM_PWM_Start+0x1ec>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00e      	beq.n	8004d4e <HAL_TIM_PWM_Start+0x13e>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a32      	ldr	r2, [pc, #200]	@ (8004e00 <HAL_TIM_PWM_Start+0x1f0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d009      	beq.n	8004d4e <HAL_TIM_PWM_Start+0x13e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a31      	ldr	r2, [pc, #196]	@ (8004e04 <HAL_TIM_PWM_Start+0x1f4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d004      	beq.n	8004d4e <HAL_TIM_PWM_Start+0x13e>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a2f      	ldr	r2, [pc, #188]	@ (8004e08 <HAL_TIM_PWM_Start+0x1f8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d101      	bne.n	8004d52 <HAL_TIM_PWM_Start+0x142>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <HAL_TIM_PWM_Start+0x144>
 8004d52:	2300      	movs	r3, #0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d007      	beq.n	8004d68 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d66:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a22      	ldr	r2, [pc, #136]	@ (8004df8 <HAL_TIM_PWM_Start+0x1e8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d01d      	beq.n	8004dae <HAL_TIM_PWM_Start+0x19e>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d7a:	d018      	beq.n	8004dae <HAL_TIM_PWM_Start+0x19e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a22      	ldr	r2, [pc, #136]	@ (8004e0c <HAL_TIM_PWM_Start+0x1fc>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d013      	beq.n	8004dae <HAL_TIM_PWM_Start+0x19e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a21      	ldr	r2, [pc, #132]	@ (8004e10 <HAL_TIM_PWM_Start+0x200>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00e      	beq.n	8004dae <HAL_TIM_PWM_Start+0x19e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a1f      	ldr	r2, [pc, #124]	@ (8004e14 <HAL_TIM_PWM_Start+0x204>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d009      	beq.n	8004dae <HAL_TIM_PWM_Start+0x19e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a17      	ldr	r2, [pc, #92]	@ (8004dfc <HAL_TIM_PWM_Start+0x1ec>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d004      	beq.n	8004dae <HAL_TIM_PWM_Start+0x19e>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a15      	ldr	r2, [pc, #84]	@ (8004e00 <HAL_TIM_PWM_Start+0x1f0>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d115      	bne.n	8004dda <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	4b18      	ldr	r3, [pc, #96]	@ (8004e18 <HAL_TIM_PWM_Start+0x208>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2b06      	cmp	r3, #6
 8004dbe:	d015      	beq.n	8004dec <HAL_TIM_PWM_Start+0x1dc>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dc6:	d011      	beq.n	8004dec <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd8:	e008      	b.n	8004dec <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0201 	orr.w	r2, r2, #1
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	e000      	b.n	8004dee <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40013400 	.word	0x40013400
 8004e00:	40014000 	.word	0x40014000
 8004e04:	40014400 	.word	0x40014400
 8004e08:	40014800 	.word	0x40014800
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40000c00 	.word	0x40000c00
 8004e18:	00010007 	.word	0x00010007

08004e1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e097      	b.n	8004f60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d106      	bne.n	8004e4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7fd fd2f 	bl	80028a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004e60:	f023 0307 	bic.w	r3, r3, #7
 8004e64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4610      	mov	r0, r2
 8004e72:	f000 fae5 	bl	8005440 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e9e:	f023 0303 	bic.w	r3, r3, #3
 8004ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	021b      	lsls	r3, r3, #8
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004ebc:	f023 030c 	bic.w	r3, r3, #12
 8004ec0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ec8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ecc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	021b      	lsls	r3, r3, #8
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	011a      	lsls	r2, r3, #4
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	031b      	lsls	r3, r3, #12
 8004eec:	4313      	orrs	r3, r2
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004efa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004f02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d110      	bne.n	8004fba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d102      	bne.n	8004fa4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f9e:	7b7b      	ldrb	r3, [r7, #13]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d001      	beq.n	8004fa8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e069      	b.n	800507c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fb8:	e031      	b.n	800501e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d110      	bne.n	8004fe2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fc0:	7bbb      	ldrb	r3, [r7, #14]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d102      	bne.n	8004fcc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fc6:	7b3b      	ldrb	r3, [r7, #12]
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d001      	beq.n	8004fd0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e055      	b.n	800507c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fe0:	e01d      	b.n	800501e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d108      	bne.n	8004ffa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fe8:	7bbb      	ldrb	r3, [r7, #14]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d105      	bne.n	8004ffa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fee:	7b7b      	ldrb	r3, [r7, #13]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d102      	bne.n	8004ffa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ff4:	7b3b      	ldrb	r3, [r7, #12]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d001      	beq.n	8004ffe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e03e      	b.n	800507c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2202      	movs	r2, #2
 8005002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2202      	movs	r2, #2
 800500a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2202      	movs	r2, #2
 8005012:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2202      	movs	r2, #2
 800501a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_TIM_Encoder_Start+0xc4>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2b04      	cmp	r3, #4
 8005028:	d008      	beq.n	800503c <HAL_TIM_Encoder_Start+0xd4>
 800502a:	e00f      	b.n	800504c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2201      	movs	r2, #1
 8005032:	2100      	movs	r1, #0
 8005034:	4618      	mov	r0, r3
 8005036:	f000 fe19 	bl	8005c6c <TIM_CCxChannelCmd>
      break;
 800503a:	e016      	b.n	800506a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2201      	movs	r2, #1
 8005042:	2104      	movs	r1, #4
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fe11 	bl	8005c6c <TIM_CCxChannelCmd>
      break;
 800504a:	e00e      	b.n	800506a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2201      	movs	r2, #1
 8005052:	2100      	movs	r1, #0
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fe09 	bl	8005c6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2201      	movs	r2, #1
 8005060:	2104      	movs	r1, #4
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fe02 	bl	8005c6c <TIM_CCxChannelCmd>
      break;
 8005068:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0201 	orr.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800509e:	2302      	movs	r3, #2
 80050a0:	e0ff      	b.n	80052a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b14      	cmp	r3, #20
 80050ae:	f200 80f0 	bhi.w	8005292 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80050b2:	a201      	add	r2, pc, #4	@ (adr r2, 80050b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	0800510d 	.word	0x0800510d
 80050bc:	08005293 	.word	0x08005293
 80050c0:	08005293 	.word	0x08005293
 80050c4:	08005293 	.word	0x08005293
 80050c8:	0800514d 	.word	0x0800514d
 80050cc:	08005293 	.word	0x08005293
 80050d0:	08005293 	.word	0x08005293
 80050d4:	08005293 	.word	0x08005293
 80050d8:	0800518f 	.word	0x0800518f
 80050dc:	08005293 	.word	0x08005293
 80050e0:	08005293 	.word	0x08005293
 80050e4:	08005293 	.word	0x08005293
 80050e8:	080051cf 	.word	0x080051cf
 80050ec:	08005293 	.word	0x08005293
 80050f0:	08005293 	.word	0x08005293
 80050f4:	08005293 	.word	0x08005293
 80050f8:	08005211 	.word	0x08005211
 80050fc:	08005293 	.word	0x08005293
 8005100:	08005293 	.word	0x08005293
 8005104:	08005293 	.word	0x08005293
 8005108:	08005251 	.word	0x08005251
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fa3a 	bl	800558c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0208 	orr.w	r2, r2, #8
 8005126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0204 	bic.w	r2, r2, #4
 8005136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6999      	ldr	r1, [r3, #24]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	619a      	str	r2, [r3, #24]
      break;
 800514a:	e0a5      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	4618      	mov	r0, r3
 8005154:	f000 faaa 	bl	80056ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6999      	ldr	r1, [r3, #24]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	021a      	lsls	r2, r3, #8
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	619a      	str	r2, [r3, #24]
      break;
 800518c:	e084      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fb13 	bl	80057c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0208 	orr.w	r2, r2, #8
 80051a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0204 	bic.w	r2, r2, #4
 80051b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69d9      	ldr	r1, [r3, #28]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	61da      	str	r2, [r3, #28]
      break;
 80051cc:	e064      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68b9      	ldr	r1, [r7, #8]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fb7b 	bl	80058d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69da      	ldr	r2, [r3, #28]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69d9      	ldr	r1, [r3, #28]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	021a      	lsls	r2, r3, #8
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	61da      	str	r2, [r3, #28]
      break;
 800520e:	e043      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fbc4 	bl	80059a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0208 	orr.w	r2, r2, #8
 800522a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0204 	bic.w	r2, r2, #4
 800523a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800524e:	e023      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fc08 	bl	8005a6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800526a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800527a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	021a      	lsls	r2, r3, #8
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005290:	e002      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	75fb      	strb	r3, [r7, #23]
      break;
 8005296:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop

080052ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_TIM_ConfigClockSource+0x1c>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e0b6      	b.n	8005436 <HAL_TIM_ConfigClockSource+0x18a>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005304:	d03e      	beq.n	8005384 <HAL_TIM_ConfigClockSource+0xd8>
 8005306:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800530a:	f200 8087 	bhi.w	800541c <HAL_TIM_ConfigClockSource+0x170>
 800530e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005312:	f000 8086 	beq.w	8005422 <HAL_TIM_ConfigClockSource+0x176>
 8005316:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800531a:	d87f      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x170>
 800531c:	2b70      	cmp	r3, #112	@ 0x70
 800531e:	d01a      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0xaa>
 8005320:	2b70      	cmp	r3, #112	@ 0x70
 8005322:	d87b      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x170>
 8005324:	2b60      	cmp	r3, #96	@ 0x60
 8005326:	d050      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x11e>
 8005328:	2b60      	cmp	r3, #96	@ 0x60
 800532a:	d877      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x170>
 800532c:	2b50      	cmp	r3, #80	@ 0x50
 800532e:	d03c      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0xfe>
 8005330:	2b50      	cmp	r3, #80	@ 0x50
 8005332:	d873      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x170>
 8005334:	2b40      	cmp	r3, #64	@ 0x40
 8005336:	d058      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x13e>
 8005338:	2b40      	cmp	r3, #64	@ 0x40
 800533a:	d86f      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x170>
 800533c:	2b30      	cmp	r3, #48	@ 0x30
 800533e:	d064      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x15e>
 8005340:	2b30      	cmp	r3, #48	@ 0x30
 8005342:	d86b      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x170>
 8005344:	2b20      	cmp	r3, #32
 8005346:	d060      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x15e>
 8005348:	2b20      	cmp	r3, #32
 800534a:	d867      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x170>
 800534c:	2b00      	cmp	r3, #0
 800534e:	d05c      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x15e>
 8005350:	2b10      	cmp	r3, #16
 8005352:	d05a      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x15e>
 8005354:	e062      	b.n	800541c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005366:	f000 fc61 	bl	8005c2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	609a      	str	r2, [r3, #8]
      break;
 8005382:	e04f      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005394:	f000 fc4a 	bl	8005c2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053a6:	609a      	str	r2, [r3, #8]
      break;
 80053a8:	e03c      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053b6:	461a      	mov	r2, r3
 80053b8:	f000 fbbe 	bl	8005b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2150      	movs	r1, #80	@ 0x50
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fc17 	bl	8005bf6 <TIM_ITRx_SetConfig>
      break;
 80053c8:	e02c      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053d6:	461a      	mov	r2, r3
 80053d8:	f000 fbdd 	bl	8005b96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2160      	movs	r1, #96	@ 0x60
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fc07 	bl	8005bf6 <TIM_ITRx_SetConfig>
      break;
 80053e8:	e01c      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f6:	461a      	mov	r2, r3
 80053f8:	f000 fb9e 	bl	8005b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2140      	movs	r1, #64	@ 0x40
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fbf7 	bl	8005bf6 <TIM_ITRx_SetConfig>
      break;
 8005408:	e00c      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4619      	mov	r1, r3
 8005414:	4610      	mov	r0, r2
 8005416:	f000 fbee 	bl	8005bf6 <TIM_ITRx_SetConfig>
      break;
 800541a:	e003      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	73fb      	strb	r3, [r7, #15]
      break;
 8005420:	e000      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005434:	7bfb      	ldrb	r3, [r7, #15]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
	...

08005440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a46      	ldr	r2, [pc, #280]	@ (800556c <TIM_Base_SetConfig+0x12c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d013      	beq.n	8005480 <TIM_Base_SetConfig+0x40>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800545e:	d00f      	beq.n	8005480 <TIM_Base_SetConfig+0x40>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a43      	ldr	r2, [pc, #268]	@ (8005570 <TIM_Base_SetConfig+0x130>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d00b      	beq.n	8005480 <TIM_Base_SetConfig+0x40>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a42      	ldr	r2, [pc, #264]	@ (8005574 <TIM_Base_SetConfig+0x134>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d007      	beq.n	8005480 <TIM_Base_SetConfig+0x40>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a41      	ldr	r2, [pc, #260]	@ (8005578 <TIM_Base_SetConfig+0x138>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d003      	beq.n	8005480 <TIM_Base_SetConfig+0x40>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a40      	ldr	r2, [pc, #256]	@ (800557c <TIM_Base_SetConfig+0x13c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d108      	bne.n	8005492 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a35      	ldr	r2, [pc, #212]	@ (800556c <TIM_Base_SetConfig+0x12c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d01f      	beq.n	80054da <TIM_Base_SetConfig+0x9a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a0:	d01b      	beq.n	80054da <TIM_Base_SetConfig+0x9a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a32      	ldr	r2, [pc, #200]	@ (8005570 <TIM_Base_SetConfig+0x130>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d017      	beq.n	80054da <TIM_Base_SetConfig+0x9a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a31      	ldr	r2, [pc, #196]	@ (8005574 <TIM_Base_SetConfig+0x134>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d013      	beq.n	80054da <TIM_Base_SetConfig+0x9a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a30      	ldr	r2, [pc, #192]	@ (8005578 <TIM_Base_SetConfig+0x138>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00f      	beq.n	80054da <TIM_Base_SetConfig+0x9a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a2f      	ldr	r2, [pc, #188]	@ (800557c <TIM_Base_SetConfig+0x13c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00b      	beq.n	80054da <TIM_Base_SetConfig+0x9a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a2e      	ldr	r2, [pc, #184]	@ (8005580 <TIM_Base_SetConfig+0x140>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d007      	beq.n	80054da <TIM_Base_SetConfig+0x9a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a2d      	ldr	r2, [pc, #180]	@ (8005584 <TIM_Base_SetConfig+0x144>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d003      	beq.n	80054da <TIM_Base_SetConfig+0x9a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a2c      	ldr	r2, [pc, #176]	@ (8005588 <TIM_Base_SetConfig+0x148>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d108      	bne.n	80054ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a16      	ldr	r2, [pc, #88]	@ (800556c <TIM_Base_SetConfig+0x12c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00f      	beq.n	8005538 <TIM_Base_SetConfig+0xf8>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a18      	ldr	r2, [pc, #96]	@ (800557c <TIM_Base_SetConfig+0x13c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00b      	beq.n	8005538 <TIM_Base_SetConfig+0xf8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a17      	ldr	r2, [pc, #92]	@ (8005580 <TIM_Base_SetConfig+0x140>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d007      	beq.n	8005538 <TIM_Base_SetConfig+0xf8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a16      	ldr	r2, [pc, #88]	@ (8005584 <TIM_Base_SetConfig+0x144>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d003      	beq.n	8005538 <TIM_Base_SetConfig+0xf8>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a15      	ldr	r2, [pc, #84]	@ (8005588 <TIM_Base_SetConfig+0x148>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d103      	bne.n	8005540 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b01      	cmp	r3, #1
 8005550:	d105      	bne.n	800555e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f023 0201 	bic.w	r2, r3, #1
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	611a      	str	r2, [r3, #16]
  }
}
 800555e:	bf00      	nop
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40012c00 	.word	0x40012c00
 8005570:	40000400 	.word	0x40000400
 8005574:	40000800 	.word	0x40000800
 8005578:	40000c00 	.word	0x40000c00
 800557c:	40013400 	.word	0x40013400
 8005580:	40014000 	.word	0x40014000
 8005584:	40014400 	.word	0x40014400
 8005588:	40014800 	.word	0x40014800

0800558c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	f023 0201 	bic.w	r2, r3, #1
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f023 0303 	bic.w	r3, r3, #3
 80055c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f023 0302 	bic.w	r3, r3, #2
 80055d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005698 <TIM_OC1_SetConfig+0x10c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00f      	beq.n	800560c <TIM_OC1_SetConfig+0x80>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a2b      	ldr	r2, [pc, #172]	@ (800569c <TIM_OC1_SetConfig+0x110>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00b      	beq.n	800560c <TIM_OC1_SetConfig+0x80>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a2a      	ldr	r2, [pc, #168]	@ (80056a0 <TIM_OC1_SetConfig+0x114>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_OC1_SetConfig+0x80>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a29      	ldr	r2, [pc, #164]	@ (80056a4 <TIM_OC1_SetConfig+0x118>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_OC1_SetConfig+0x80>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a28      	ldr	r2, [pc, #160]	@ (80056a8 <TIM_OC1_SetConfig+0x11c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d10c      	bne.n	8005626 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f023 0308 	bic.w	r3, r3, #8
 8005612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f023 0304 	bic.w	r3, r3, #4
 8005624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a1b      	ldr	r2, [pc, #108]	@ (8005698 <TIM_OC1_SetConfig+0x10c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00f      	beq.n	800564e <TIM_OC1_SetConfig+0xc2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a1a      	ldr	r2, [pc, #104]	@ (800569c <TIM_OC1_SetConfig+0x110>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00b      	beq.n	800564e <TIM_OC1_SetConfig+0xc2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a19      	ldr	r2, [pc, #100]	@ (80056a0 <TIM_OC1_SetConfig+0x114>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d007      	beq.n	800564e <TIM_OC1_SetConfig+0xc2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a18      	ldr	r2, [pc, #96]	@ (80056a4 <TIM_OC1_SetConfig+0x118>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d003      	beq.n	800564e <TIM_OC1_SetConfig+0xc2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a17      	ldr	r2, [pc, #92]	@ (80056a8 <TIM_OC1_SetConfig+0x11c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d111      	bne.n	8005672 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800565c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	4313      	orrs	r3, r2
 8005666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	621a      	str	r2, [r3, #32]
}
 800568c:	bf00      	nop
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	40012c00 	.word	0x40012c00
 800569c:	40013400 	.word	0x40013400
 80056a0:	40014000 	.word	0x40014000
 80056a4:	40014400 	.word	0x40014400
 80056a8:	40014800 	.word	0x40014800

080056ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	f023 0210 	bic.w	r2, r3, #16
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	021b      	lsls	r3, r3, #8
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f023 0320 	bic.w	r3, r3, #32
 80056fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a28      	ldr	r2, [pc, #160]	@ (80057ac <TIM_OC2_SetConfig+0x100>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d003      	beq.n	8005718 <TIM_OC2_SetConfig+0x6c>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a27      	ldr	r2, [pc, #156]	@ (80057b0 <TIM_OC2_SetConfig+0x104>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d10d      	bne.n	8005734 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800571e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005732:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a1d      	ldr	r2, [pc, #116]	@ (80057ac <TIM_OC2_SetConfig+0x100>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00f      	beq.n	800575c <TIM_OC2_SetConfig+0xb0>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a1c      	ldr	r2, [pc, #112]	@ (80057b0 <TIM_OC2_SetConfig+0x104>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00b      	beq.n	800575c <TIM_OC2_SetConfig+0xb0>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a1b      	ldr	r2, [pc, #108]	@ (80057b4 <TIM_OC2_SetConfig+0x108>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d007      	beq.n	800575c <TIM_OC2_SetConfig+0xb0>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a1a      	ldr	r2, [pc, #104]	@ (80057b8 <TIM_OC2_SetConfig+0x10c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d003      	beq.n	800575c <TIM_OC2_SetConfig+0xb0>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a19      	ldr	r2, [pc, #100]	@ (80057bc <TIM_OC2_SetConfig+0x110>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d113      	bne.n	8005784 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005762:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800576a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4313      	orrs	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	621a      	str	r2, [r3, #32]
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40013400 	.word	0x40013400
 80057b4:	40014000 	.word	0x40014000
 80057b8:	40014400 	.word	0x40014400
 80057bc:	40014800 	.word	0x40014800

080057c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0303 	bic.w	r3, r3, #3
 80057fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800580c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	021b      	lsls	r3, r3, #8
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a27      	ldr	r2, [pc, #156]	@ (80058bc <TIM_OC3_SetConfig+0xfc>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d003      	beq.n	800582a <TIM_OC3_SetConfig+0x6a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a26      	ldr	r2, [pc, #152]	@ (80058c0 <TIM_OC3_SetConfig+0x100>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d10d      	bne.n	8005846 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a1c      	ldr	r2, [pc, #112]	@ (80058bc <TIM_OC3_SetConfig+0xfc>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00f      	beq.n	800586e <TIM_OC3_SetConfig+0xae>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a1b      	ldr	r2, [pc, #108]	@ (80058c0 <TIM_OC3_SetConfig+0x100>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00b      	beq.n	800586e <TIM_OC3_SetConfig+0xae>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a1a      	ldr	r2, [pc, #104]	@ (80058c4 <TIM_OC3_SetConfig+0x104>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d007      	beq.n	800586e <TIM_OC3_SetConfig+0xae>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a19      	ldr	r2, [pc, #100]	@ (80058c8 <TIM_OC3_SetConfig+0x108>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d003      	beq.n	800586e <TIM_OC3_SetConfig+0xae>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a18      	ldr	r2, [pc, #96]	@ (80058cc <TIM_OC3_SetConfig+0x10c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d113      	bne.n	8005896 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800587c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	011b      	lsls	r3, r3, #4
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	4313      	orrs	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	621a      	str	r2, [r3, #32]
}
 80058b0:	bf00      	nop
 80058b2:	371c      	adds	r7, #28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	40012c00 	.word	0x40012c00
 80058c0:	40013400 	.word	0x40013400
 80058c4:	40014000 	.word	0x40014000
 80058c8:	40014400 	.word	0x40014400
 80058cc:	40014800 	.word	0x40014800

080058d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800590a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800591e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	031b      	lsls	r3, r3, #12
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a18      	ldr	r2, [pc, #96]	@ (8005990 <TIM_OC4_SetConfig+0xc0>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00f      	beq.n	8005954 <TIM_OC4_SetConfig+0x84>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a17      	ldr	r2, [pc, #92]	@ (8005994 <TIM_OC4_SetConfig+0xc4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d00b      	beq.n	8005954 <TIM_OC4_SetConfig+0x84>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a16      	ldr	r2, [pc, #88]	@ (8005998 <TIM_OC4_SetConfig+0xc8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d007      	beq.n	8005954 <TIM_OC4_SetConfig+0x84>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a15      	ldr	r2, [pc, #84]	@ (800599c <TIM_OC4_SetConfig+0xcc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d003      	beq.n	8005954 <TIM_OC4_SetConfig+0x84>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a14      	ldr	r2, [pc, #80]	@ (80059a0 <TIM_OC4_SetConfig+0xd0>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d109      	bne.n	8005968 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800595a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	019b      	lsls	r3, r3, #6
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	4313      	orrs	r3, r2
 8005966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	621a      	str	r2, [r3, #32]
}
 8005982:	bf00      	nop
 8005984:	371c      	adds	r7, #28
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	40012c00 	.word	0x40012c00
 8005994:	40013400 	.word	0x40013400
 8005998:	40014000 	.word	0x40014000
 800599c:	40014400 	.word	0x40014400
 80059a0:	40014800 	.word	0x40014800

080059a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80059e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	041b      	lsls	r3, r3, #16
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a17      	ldr	r2, [pc, #92]	@ (8005a58 <TIM_OC5_SetConfig+0xb4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00f      	beq.n	8005a1e <TIM_OC5_SetConfig+0x7a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a16      	ldr	r2, [pc, #88]	@ (8005a5c <TIM_OC5_SetConfig+0xb8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00b      	beq.n	8005a1e <TIM_OC5_SetConfig+0x7a>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a15      	ldr	r2, [pc, #84]	@ (8005a60 <TIM_OC5_SetConfig+0xbc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d007      	beq.n	8005a1e <TIM_OC5_SetConfig+0x7a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a14      	ldr	r2, [pc, #80]	@ (8005a64 <TIM_OC5_SetConfig+0xc0>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d003      	beq.n	8005a1e <TIM_OC5_SetConfig+0x7a>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a13      	ldr	r2, [pc, #76]	@ (8005a68 <TIM_OC5_SetConfig+0xc4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d109      	bne.n	8005a32 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	621a      	str	r2, [r3, #32]
}
 8005a4c:	bf00      	nop
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40012c00 	.word	0x40012c00
 8005a5c:	40013400 	.word	0x40013400
 8005a60:	40014000 	.word	0x40014000
 8005a64:	40014400 	.word	0x40014400
 8005a68:	40014800 	.word	0x40014800

08005a6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	021b      	lsls	r3, r3, #8
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	051b      	lsls	r3, r3, #20
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a18      	ldr	r2, [pc, #96]	@ (8005b24 <TIM_OC6_SetConfig+0xb8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00f      	beq.n	8005ae8 <TIM_OC6_SetConfig+0x7c>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a17      	ldr	r2, [pc, #92]	@ (8005b28 <TIM_OC6_SetConfig+0xbc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00b      	beq.n	8005ae8 <TIM_OC6_SetConfig+0x7c>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a16      	ldr	r2, [pc, #88]	@ (8005b2c <TIM_OC6_SetConfig+0xc0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d007      	beq.n	8005ae8 <TIM_OC6_SetConfig+0x7c>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a15      	ldr	r2, [pc, #84]	@ (8005b30 <TIM_OC6_SetConfig+0xc4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_OC6_SetConfig+0x7c>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a14      	ldr	r2, [pc, #80]	@ (8005b34 <TIM_OC6_SetConfig+0xc8>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d109      	bne.n	8005afc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005aee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	029b      	lsls	r3, r3, #10
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	621a      	str	r2, [r3, #32]
}
 8005b16:	bf00      	nop
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	40012c00 	.word	0x40012c00
 8005b28:	40013400 	.word	0x40013400
 8005b2c:	40014000 	.word	0x40014000
 8005b30:	40014400 	.word	0x40014400
 8005b34:	40014800 	.word	0x40014800

08005b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f023 0201 	bic.w	r2, r3, #1
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f023 030a 	bic.w	r3, r3, #10
 8005b74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b087      	sub	sp, #28
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	f023 0210 	bic.w	r2, r3, #16
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	031b      	lsls	r3, r3, #12
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bd2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	621a      	str	r2, [r3, #32]
}
 8005bea:	bf00      	nop
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b085      	sub	sp, #20
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f043 0307 	orr.w	r3, r3, #7
 8005c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	609a      	str	r2, [r3, #8]
}
 8005c20:	bf00      	nop
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	021a      	lsls	r2, r3, #8
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	609a      	str	r2, [r3, #8]
}
 8005c60:	bf00      	nop
 8005c62:	371c      	adds	r7, #28
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f003 031f 	and.w	r3, r3, #31
 8005c7e:	2201      	movs	r2, #1
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a1a      	ldr	r2, [r3, #32]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	401a      	ands	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a1a      	ldr	r2, [r3, #32]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 031f 	and.w	r3, r3, #31
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	621a      	str	r2, [r3, #32]
}
 8005caa:	bf00      	nop
 8005cac:	371c      	adds	r7, #28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
	...

08005cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d101      	bne.n	8005cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e068      	b.n	8005da2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d004      	beq.n	8005d04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a2d      	ldr	r2, [pc, #180]	@ (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d108      	bne.n	8005d16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1e      	ldr	r2, [pc, #120]	@ (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d01d      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d42:	d018      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a1b      	ldr	r2, [pc, #108]	@ (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d013      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a1a      	ldr	r2, [pc, #104]	@ (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00e      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a18      	ldr	r2, [pc, #96]	@ (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d009      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a13      	ldr	r2, [pc, #76]	@ (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d004      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a14      	ldr	r2, [pc, #80]	@ (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d10c      	bne.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40012c00 	.word	0x40012c00
 8005db4:	40013400 	.word	0x40013400
 8005db8:	40000400 	.word	0x40000400
 8005dbc:	40000800 	.word	0x40000800
 8005dc0:	40000c00 	.word	0x40000c00
 8005dc4:	40014000 	.word	0x40014000

08005dc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e040      	b.n	8005e5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fc fb70 	bl	80024d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2224      	movs	r2, #36	@ 0x24
 8005df4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0201 	bic.w	r2, r2, #1
 8005e04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fedc 	bl	8006bcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fc21 	bl	800665c <UART_SetConfig>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e01b      	b.n	8005e5c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0201 	orr.w	r2, r2, #1
 8005e52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 ff5b 	bl	8006d10 <UART_CheckIdleState>
 8005e5a:	4603      	mov	r3, r0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08a      	sub	sp, #40	@ 0x28
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	603b      	str	r3, [r7, #0]
 8005e70:	4613      	mov	r3, r2
 8005e72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	d177      	bne.n	8005f6c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <HAL_UART_Transmit+0x24>
 8005e82:	88fb      	ldrh	r3, [r7, #6]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e070      	b.n	8005f6e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2221      	movs	r2, #33	@ 0x21
 8005e98:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e9a:	f7fc ff83 	bl	8002da4 <HAL_GetTick>
 8005e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	88fa      	ldrh	r2, [r7, #6]
 8005ea4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	88fa      	ldrh	r2, [r7, #6]
 8005eac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eb8:	d108      	bne.n	8005ecc <HAL_UART_Transmit+0x68>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d104      	bne.n	8005ecc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	e003      	b.n	8005ed4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ed4:	e02f      	b.n	8005f36 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2200      	movs	r2, #0
 8005ede:	2180      	movs	r1, #128	@ 0x80
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 ffbd 	bl	8006e60 <UART_WaitOnFlagUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d004      	beq.n	8005ef6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e03b      	b.n	8005f6e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10b      	bne.n	8005f14 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	881a      	ldrh	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f08:	b292      	uxth	r2, r2
 8005f0a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	3302      	adds	r3, #2
 8005f10:	61bb      	str	r3, [r7, #24]
 8005f12:	e007      	b.n	8005f24 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	781a      	ldrb	r2, [r3, #0]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	3301      	adds	r3, #1
 8005f22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1c9      	bne.n	8005ed6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2140      	movs	r1, #64	@ 0x40
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 ff87 	bl	8006e60 <UART_WaitOnFlagUntilTimeout>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d004      	beq.n	8005f62 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e005      	b.n	8005f6e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2220      	movs	r2, #32
 8005f66:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e000      	b.n	8005f6e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005f6c:	2302      	movs	r3, #2
  }
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3720      	adds	r7, #32
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	@ 0x28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	d137      	bne.n	8006000 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d002      	beq.n	8005f9c <HAL_UART_Receive_IT+0x24>
 8005f96:	88fb      	ldrh	r3, [r7, #6]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e030      	b.n	8006002 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a18      	ldr	r2, [pc, #96]	@ (800600c <HAL_UART_Receive_IT+0x94>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d01f      	beq.n	8005ff0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d018      	beq.n	8005ff0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	613b      	str	r3, [r7, #16]
   return(result);
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	623b      	str	r3, [r7, #32]
 8005fde:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	69f9      	ldr	r1, [r7, #28]
 8005fe2:	6a3a      	ldr	r2, [r7, #32]
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e6      	bne.n	8005fbe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ff0:	88fb      	ldrh	r3, [r7, #6]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f000 ffa0 	bl	8006f3c <UART_Start_Receive_IT>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	e000      	b.n	8006002 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006000:	2302      	movs	r3, #2
  }
}
 8006002:	4618      	mov	r0, r3
 8006004:	3728      	adds	r7, #40	@ 0x28
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40008000 	.word	0x40008000

08006010 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b0ba      	sub	sp, #232	@ 0xe8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006036:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800603a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800603e:	4013      	ands	r3, r2
 8006040:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006044:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006048:	2b00      	cmp	r3, #0
 800604a:	d115      	bne.n	8006078 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800604c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00f      	beq.n	8006078 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800605c:	f003 0320 	and.w	r3, r3, #32
 8006060:	2b00      	cmp	r3, #0
 8006062:	d009      	beq.n	8006078 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 82ca 	beq.w	8006602 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4798      	blx	r3
      }
      return;
 8006076:	e2c4      	b.n	8006602 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8117 	beq.w	80062b0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800608e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006092:	4b85      	ldr	r3, [pc, #532]	@ (80062a8 <HAL_UART_IRQHandler+0x298>)
 8006094:	4013      	ands	r3, r2
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 810a 	beq.w	80062b0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800609c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d011      	beq.n	80060cc <HAL_UART_IRQHandler+0xbc>
 80060a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00b      	beq.n	80060cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2201      	movs	r2, #1
 80060ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060c2:	f043 0201 	orr.w	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d011      	beq.n	80060fc <HAL_UART_IRQHandler+0xec>
 80060d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00b      	beq.n	80060fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2202      	movs	r2, #2
 80060ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060f2:	f043 0204 	orr.w	r2, r3, #4
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80060fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d011      	beq.n	800612c <HAL_UART_IRQHandler+0x11c>
 8006108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00b      	beq.n	800612c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2204      	movs	r2, #4
 800611a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006122:	f043 0202 	orr.w	r2, r3, #2
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800612c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d017      	beq.n	8006168 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800613c:	f003 0320 	and.w	r3, r3, #32
 8006140:	2b00      	cmp	r3, #0
 8006142:	d105      	bne.n	8006150 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006148:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00b      	beq.n	8006168 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2208      	movs	r2, #8
 8006156:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800615e:	f043 0208 	orr.w	r2, r3, #8
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800616c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006170:	2b00      	cmp	r3, #0
 8006172:	d012      	beq.n	800619a <HAL_UART_IRQHandler+0x18a>
 8006174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006178:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00c      	beq.n	800619a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006188:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006190:	f043 0220 	orr.w	r2, r3, #32
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 8230 	beq.w	8006606 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80061a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00d      	beq.n	80061ce <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80061b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80061d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e2:	2b40      	cmp	r3, #64	@ 0x40
 80061e4:	d005      	beq.n	80061f2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80061e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d04f      	beq.n	8006292 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 ff68 	bl	80070c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006202:	2b40      	cmp	r3, #64	@ 0x40
 8006204:	d141      	bne.n	800628a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3308      	adds	r3, #8
 800620c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006210:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800621c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006224:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3308      	adds	r3, #8
 800622e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006232:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006236:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800623e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800624a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1d9      	bne.n	8006206 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006256:	2b00      	cmp	r3, #0
 8006258:	d013      	beq.n	8006282 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800625e:	4a13      	ldr	r2, [pc, #76]	@ (80062ac <HAL_UART_IRQHandler+0x29c>)
 8006260:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006266:	4618      	mov	r0, r3
 8006268:	f7fc fef7 	bl	800305a <HAL_DMA_Abort_IT>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d017      	beq.n	80062a2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800627c:	4610      	mov	r0, r2
 800627e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006280:	e00f      	b.n	80062a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f9d4 	bl	8006630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006288:	e00b      	b.n	80062a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f9d0 	bl	8006630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006290:	e007      	b.n	80062a2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f9cc 	bl	8006630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80062a0:	e1b1      	b.n	8006606 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062a2:	bf00      	nop
    return;
 80062a4:	e1af      	b.n	8006606 <HAL_UART_IRQHandler+0x5f6>
 80062a6:	bf00      	nop
 80062a8:	04000120 	.word	0x04000120
 80062ac:	08007191 	.word	0x08007191

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	f040 816a 	bne.w	800658e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80062ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062be:	f003 0310 	and.w	r3, r3, #16
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 8163 	beq.w	800658e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80062c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062cc:	f003 0310 	and.w	r3, r3, #16
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 815c 	beq.w	800658e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2210      	movs	r2, #16
 80062dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e8:	2b40      	cmp	r3, #64	@ 0x40
 80062ea:	f040 80d4 	bne.w	8006496 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062fa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 80ad 	beq.w	800645e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800630a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800630e:	429a      	cmp	r2, r3
 8006310:	f080 80a5 	bcs.w	800645e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800631a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0320 	and.w	r3, r3, #32
 800632a:	2b00      	cmp	r3, #0
 800632c:	f040 8086 	bne.w	800643c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006338:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800633c:	e853 3f00 	ldrex	r3, [r3]
 8006340:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006344:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800634c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800635a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800635e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006366:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800636a:	e841 2300 	strex	r3, r2, [r1]
 800636e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006372:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1da      	bne.n	8006330 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3308      	adds	r3, #8
 8006380:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006382:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006384:	e853 3f00 	ldrex	r3, [r3]
 8006388:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800638a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800638c:	f023 0301 	bic.w	r3, r3, #1
 8006390:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3308      	adds	r3, #8
 800639a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800639e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80063a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80063a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80063aa:	e841 2300 	strex	r3, r2, [r1]
 80063ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80063b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1e1      	bne.n	800637a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3308      	adds	r3, #8
 80063bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80063c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3308      	adds	r3, #8
 80063d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80063da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80063dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80063e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80063e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e3      	bne.n	80063b6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006404:	e853 3f00 	ldrex	r3, [r3]
 8006408:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800640a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800640c:	f023 0310 	bic.w	r3, r3, #16
 8006410:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800641e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006420:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006422:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006424:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800642c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e4      	bne.n	80063fc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006436:	4618      	mov	r0, r3
 8006438:	f7fc fdd1 	bl	8002fde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800644e:	b29b      	uxth	r3, r3
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	b29b      	uxth	r3, r3
 8006454:	4619      	mov	r1, r3
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f8f4 	bl	8006644 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800645c:	e0d5      	b.n	800660a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006464:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006468:	429a      	cmp	r2, r3
 800646a:	f040 80ce 	bne.w	800660a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b20      	cmp	r3, #32
 800647c:	f040 80c5 	bne.w	800660a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2202      	movs	r2, #2
 8006484:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f8d8 	bl	8006644 <HAL_UARTEx_RxEventCallback>
      return;
 8006494:	e0b9      	b.n	800660a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 80ab 	beq.w	800660e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80064b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 80a6 	beq.w	800660e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ca:	e853 3f00 	ldrex	r3, [r3]
 80064ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064e6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e4      	bne.n	80064c2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3308      	adds	r3, #8
 80064fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	623b      	str	r3, [r7, #32]
   return(result);
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	f023 0301 	bic.w	r3, r3, #1
 800650e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3308      	adds	r3, #8
 8006518:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800651c:	633a      	str	r2, [r7, #48]	@ 0x30
 800651e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006524:	e841 2300 	strex	r3, r2, [r1]
 8006528:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800652a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e3      	bne.n	80064f8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2220      	movs	r2, #32
 8006534:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	e853 3f00 	ldrex	r3, [r3]
 8006550:	60fb      	str	r3, [r7, #12]
   return(result);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f023 0310 	bic.w	r3, r3, #16
 8006558:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	461a      	mov	r2, r3
 8006562:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006566:	61fb      	str	r3, [r7, #28]
 8006568:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656a:	69b9      	ldr	r1, [r7, #24]
 800656c:	69fa      	ldr	r2, [r7, #28]
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	617b      	str	r3, [r7, #20]
   return(result);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e4      	bne.n	8006544 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2202      	movs	r2, #2
 800657e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f85c 	bl	8006644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800658c:	e03f      	b.n	800660e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800658e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00e      	beq.n	80065b8 <HAL_UART_IRQHandler+0x5a8>
 800659a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800659e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d008      	beq.n	80065b8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80065ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 ffe9 	bl	8007588 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065b6:	e02d      	b.n	8006614 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80065b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00e      	beq.n	80065e2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80065c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d008      	beq.n	80065e2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01c      	beq.n	8006612 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	4798      	blx	r3
    }
    return;
 80065e0:	e017      	b.n	8006612 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80065e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d012      	beq.n	8006614 <HAL_UART_IRQHandler+0x604>
 80065ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00c      	beq.n	8006614 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 fdde 	bl	80071bc <UART_EndTransmit_IT>
    return;
 8006600:	e008      	b.n	8006614 <HAL_UART_IRQHandler+0x604>
      return;
 8006602:	bf00      	nop
 8006604:	e006      	b.n	8006614 <HAL_UART_IRQHandler+0x604>
    return;
 8006606:	bf00      	nop
 8006608:	e004      	b.n	8006614 <HAL_UART_IRQHandler+0x604>
      return;
 800660a:	bf00      	nop
 800660c:	e002      	b.n	8006614 <HAL_UART_IRQHandler+0x604>
      return;
 800660e:	bf00      	nop
 8006610:	e000      	b.n	8006614 <HAL_UART_IRQHandler+0x604>
    return;
 8006612:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006614:	37e8      	adds	r7, #232	@ 0xe8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop

0800661c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800665c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006660:	b08a      	sub	sp, #40	@ 0x28
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	431a      	orrs	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	431a      	orrs	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	4313      	orrs	r3, r2
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	4ba4      	ldr	r3, [pc, #656]	@ (800691c <UART_SetConfig+0x2c0>)
 800668c:	4013      	ands	r3, r2
 800668e:	68fa      	ldr	r2, [r7, #12]
 8006690:	6812      	ldr	r2, [r2, #0]
 8006692:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006694:	430b      	orrs	r3, r1
 8006696:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	68da      	ldr	r2, [r3, #12]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a99      	ldr	r2, [pc, #612]	@ (8006920 <UART_SetConfig+0x2c4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d004      	beq.n	80066c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066c4:	4313      	orrs	r3, r2
 80066c6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066d8:	430a      	orrs	r2, r1
 80066da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a90      	ldr	r2, [pc, #576]	@ (8006924 <UART_SetConfig+0x2c8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d126      	bne.n	8006734 <UART_SetConfig+0xd8>
 80066e6:	4b90      	ldr	r3, [pc, #576]	@ (8006928 <UART_SetConfig+0x2cc>)
 80066e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ec:	f003 0303 	and.w	r3, r3, #3
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d81b      	bhi.n	800672c <UART_SetConfig+0xd0>
 80066f4:	a201      	add	r2, pc, #4	@ (adr r2, 80066fc <UART_SetConfig+0xa0>)
 80066f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fa:	bf00      	nop
 80066fc:	0800670d 	.word	0x0800670d
 8006700:	0800671d 	.word	0x0800671d
 8006704:	08006715 	.word	0x08006715
 8006708:	08006725 	.word	0x08006725
 800670c:	2301      	movs	r3, #1
 800670e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006712:	e116      	b.n	8006942 <UART_SetConfig+0x2e6>
 8006714:	2302      	movs	r3, #2
 8006716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800671a:	e112      	b.n	8006942 <UART_SetConfig+0x2e6>
 800671c:	2304      	movs	r3, #4
 800671e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006722:	e10e      	b.n	8006942 <UART_SetConfig+0x2e6>
 8006724:	2308      	movs	r3, #8
 8006726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800672a:	e10a      	b.n	8006942 <UART_SetConfig+0x2e6>
 800672c:	2310      	movs	r3, #16
 800672e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006732:	e106      	b.n	8006942 <UART_SetConfig+0x2e6>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a7c      	ldr	r2, [pc, #496]	@ (800692c <UART_SetConfig+0x2d0>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d138      	bne.n	80067b0 <UART_SetConfig+0x154>
 800673e:	4b7a      	ldr	r3, [pc, #488]	@ (8006928 <UART_SetConfig+0x2cc>)
 8006740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006744:	f003 030c 	and.w	r3, r3, #12
 8006748:	2b0c      	cmp	r3, #12
 800674a:	d82d      	bhi.n	80067a8 <UART_SetConfig+0x14c>
 800674c:	a201      	add	r2, pc, #4	@ (adr r2, 8006754 <UART_SetConfig+0xf8>)
 800674e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006752:	bf00      	nop
 8006754:	08006789 	.word	0x08006789
 8006758:	080067a9 	.word	0x080067a9
 800675c:	080067a9 	.word	0x080067a9
 8006760:	080067a9 	.word	0x080067a9
 8006764:	08006799 	.word	0x08006799
 8006768:	080067a9 	.word	0x080067a9
 800676c:	080067a9 	.word	0x080067a9
 8006770:	080067a9 	.word	0x080067a9
 8006774:	08006791 	.word	0x08006791
 8006778:	080067a9 	.word	0x080067a9
 800677c:	080067a9 	.word	0x080067a9
 8006780:	080067a9 	.word	0x080067a9
 8006784:	080067a1 	.word	0x080067a1
 8006788:	2300      	movs	r3, #0
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800678e:	e0d8      	b.n	8006942 <UART_SetConfig+0x2e6>
 8006790:	2302      	movs	r3, #2
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006796:	e0d4      	b.n	8006942 <UART_SetConfig+0x2e6>
 8006798:	2304      	movs	r3, #4
 800679a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800679e:	e0d0      	b.n	8006942 <UART_SetConfig+0x2e6>
 80067a0:	2308      	movs	r3, #8
 80067a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067a6:	e0cc      	b.n	8006942 <UART_SetConfig+0x2e6>
 80067a8:	2310      	movs	r3, #16
 80067aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ae:	e0c8      	b.n	8006942 <UART_SetConfig+0x2e6>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a5e      	ldr	r2, [pc, #376]	@ (8006930 <UART_SetConfig+0x2d4>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d125      	bne.n	8006806 <UART_SetConfig+0x1aa>
 80067ba:	4b5b      	ldr	r3, [pc, #364]	@ (8006928 <UART_SetConfig+0x2cc>)
 80067bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067c0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80067c4:	2b30      	cmp	r3, #48	@ 0x30
 80067c6:	d016      	beq.n	80067f6 <UART_SetConfig+0x19a>
 80067c8:	2b30      	cmp	r3, #48	@ 0x30
 80067ca:	d818      	bhi.n	80067fe <UART_SetConfig+0x1a2>
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d00a      	beq.n	80067e6 <UART_SetConfig+0x18a>
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	d814      	bhi.n	80067fe <UART_SetConfig+0x1a2>
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <UART_SetConfig+0x182>
 80067d8:	2b10      	cmp	r3, #16
 80067da:	d008      	beq.n	80067ee <UART_SetConfig+0x192>
 80067dc:	e00f      	b.n	80067fe <UART_SetConfig+0x1a2>
 80067de:	2300      	movs	r3, #0
 80067e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067e4:	e0ad      	b.n	8006942 <UART_SetConfig+0x2e6>
 80067e6:	2302      	movs	r3, #2
 80067e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ec:	e0a9      	b.n	8006942 <UART_SetConfig+0x2e6>
 80067ee:	2304      	movs	r3, #4
 80067f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067f4:	e0a5      	b.n	8006942 <UART_SetConfig+0x2e6>
 80067f6:	2308      	movs	r3, #8
 80067f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067fc:	e0a1      	b.n	8006942 <UART_SetConfig+0x2e6>
 80067fe:	2310      	movs	r3, #16
 8006800:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006804:	e09d      	b.n	8006942 <UART_SetConfig+0x2e6>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a4a      	ldr	r2, [pc, #296]	@ (8006934 <UART_SetConfig+0x2d8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d125      	bne.n	800685c <UART_SetConfig+0x200>
 8006810:	4b45      	ldr	r3, [pc, #276]	@ (8006928 <UART_SetConfig+0x2cc>)
 8006812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006816:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800681a:	2bc0      	cmp	r3, #192	@ 0xc0
 800681c:	d016      	beq.n	800684c <UART_SetConfig+0x1f0>
 800681e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006820:	d818      	bhi.n	8006854 <UART_SetConfig+0x1f8>
 8006822:	2b80      	cmp	r3, #128	@ 0x80
 8006824:	d00a      	beq.n	800683c <UART_SetConfig+0x1e0>
 8006826:	2b80      	cmp	r3, #128	@ 0x80
 8006828:	d814      	bhi.n	8006854 <UART_SetConfig+0x1f8>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d002      	beq.n	8006834 <UART_SetConfig+0x1d8>
 800682e:	2b40      	cmp	r3, #64	@ 0x40
 8006830:	d008      	beq.n	8006844 <UART_SetConfig+0x1e8>
 8006832:	e00f      	b.n	8006854 <UART_SetConfig+0x1f8>
 8006834:	2300      	movs	r3, #0
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800683a:	e082      	b.n	8006942 <UART_SetConfig+0x2e6>
 800683c:	2302      	movs	r3, #2
 800683e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006842:	e07e      	b.n	8006942 <UART_SetConfig+0x2e6>
 8006844:	2304      	movs	r3, #4
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800684a:	e07a      	b.n	8006942 <UART_SetConfig+0x2e6>
 800684c:	2308      	movs	r3, #8
 800684e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006852:	e076      	b.n	8006942 <UART_SetConfig+0x2e6>
 8006854:	2310      	movs	r3, #16
 8006856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800685a:	e072      	b.n	8006942 <UART_SetConfig+0x2e6>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a35      	ldr	r2, [pc, #212]	@ (8006938 <UART_SetConfig+0x2dc>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d12a      	bne.n	80068bc <UART_SetConfig+0x260>
 8006866:	4b30      	ldr	r3, [pc, #192]	@ (8006928 <UART_SetConfig+0x2cc>)
 8006868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800686c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006870:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006874:	d01a      	beq.n	80068ac <UART_SetConfig+0x250>
 8006876:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800687a:	d81b      	bhi.n	80068b4 <UART_SetConfig+0x258>
 800687c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006880:	d00c      	beq.n	800689c <UART_SetConfig+0x240>
 8006882:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006886:	d815      	bhi.n	80068b4 <UART_SetConfig+0x258>
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <UART_SetConfig+0x238>
 800688c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006890:	d008      	beq.n	80068a4 <UART_SetConfig+0x248>
 8006892:	e00f      	b.n	80068b4 <UART_SetConfig+0x258>
 8006894:	2300      	movs	r3, #0
 8006896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800689a:	e052      	b.n	8006942 <UART_SetConfig+0x2e6>
 800689c:	2302      	movs	r3, #2
 800689e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068a2:	e04e      	b.n	8006942 <UART_SetConfig+0x2e6>
 80068a4:	2304      	movs	r3, #4
 80068a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068aa:	e04a      	b.n	8006942 <UART_SetConfig+0x2e6>
 80068ac:	2308      	movs	r3, #8
 80068ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068b2:	e046      	b.n	8006942 <UART_SetConfig+0x2e6>
 80068b4:	2310      	movs	r3, #16
 80068b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ba:	e042      	b.n	8006942 <UART_SetConfig+0x2e6>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a17      	ldr	r2, [pc, #92]	@ (8006920 <UART_SetConfig+0x2c4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d13a      	bne.n	800693c <UART_SetConfig+0x2e0>
 80068c6:	4b18      	ldr	r3, [pc, #96]	@ (8006928 <UART_SetConfig+0x2cc>)
 80068c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80068d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068d4:	d01a      	beq.n	800690c <UART_SetConfig+0x2b0>
 80068d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068da:	d81b      	bhi.n	8006914 <UART_SetConfig+0x2b8>
 80068dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068e0:	d00c      	beq.n	80068fc <UART_SetConfig+0x2a0>
 80068e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068e6:	d815      	bhi.n	8006914 <UART_SetConfig+0x2b8>
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <UART_SetConfig+0x298>
 80068ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068f0:	d008      	beq.n	8006904 <UART_SetConfig+0x2a8>
 80068f2:	e00f      	b.n	8006914 <UART_SetConfig+0x2b8>
 80068f4:	2300      	movs	r3, #0
 80068f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068fa:	e022      	b.n	8006942 <UART_SetConfig+0x2e6>
 80068fc:	2302      	movs	r3, #2
 80068fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006902:	e01e      	b.n	8006942 <UART_SetConfig+0x2e6>
 8006904:	2304      	movs	r3, #4
 8006906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800690a:	e01a      	b.n	8006942 <UART_SetConfig+0x2e6>
 800690c:	2308      	movs	r3, #8
 800690e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006912:	e016      	b.n	8006942 <UART_SetConfig+0x2e6>
 8006914:	2310      	movs	r3, #16
 8006916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800691a:	e012      	b.n	8006942 <UART_SetConfig+0x2e6>
 800691c:	efff69f3 	.word	0xefff69f3
 8006920:	40008000 	.word	0x40008000
 8006924:	40013800 	.word	0x40013800
 8006928:	40021000 	.word	0x40021000
 800692c:	40004400 	.word	0x40004400
 8006930:	40004800 	.word	0x40004800
 8006934:	40004c00 	.word	0x40004c00
 8006938:	40005000 	.word	0x40005000
 800693c:	2310      	movs	r3, #16
 800693e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a9f      	ldr	r2, [pc, #636]	@ (8006bc4 <UART_SetConfig+0x568>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d17a      	bne.n	8006a42 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800694c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006950:	2b08      	cmp	r3, #8
 8006952:	d824      	bhi.n	800699e <UART_SetConfig+0x342>
 8006954:	a201      	add	r2, pc, #4	@ (adr r2, 800695c <UART_SetConfig+0x300>)
 8006956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695a:	bf00      	nop
 800695c:	08006981 	.word	0x08006981
 8006960:	0800699f 	.word	0x0800699f
 8006964:	08006989 	.word	0x08006989
 8006968:	0800699f 	.word	0x0800699f
 800696c:	0800698f 	.word	0x0800698f
 8006970:	0800699f 	.word	0x0800699f
 8006974:	0800699f 	.word	0x0800699f
 8006978:	0800699f 	.word	0x0800699f
 800697c:	08006997 	.word	0x08006997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006980:	f7fd fb46 	bl	8004010 <HAL_RCC_GetPCLK1Freq>
 8006984:	61f8      	str	r0, [r7, #28]
        break;
 8006986:	e010      	b.n	80069aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006988:	4b8f      	ldr	r3, [pc, #572]	@ (8006bc8 <UART_SetConfig+0x56c>)
 800698a:	61fb      	str	r3, [r7, #28]
        break;
 800698c:	e00d      	b.n	80069aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800698e:	f7fd faa7 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 8006992:	61f8      	str	r0, [r7, #28]
        break;
 8006994:	e009      	b.n	80069aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800699a:	61fb      	str	r3, [r7, #28]
        break;
 800699c:	e005      	b.n	80069aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80069a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 80fb 	beq.w	8006ba8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	4413      	add	r3, r2
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d305      	bcc.n	80069ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d903      	bls.n	80069d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80069d4:	e0e8      	b.n	8006ba8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	2200      	movs	r2, #0
 80069da:	461c      	mov	r4, r3
 80069dc:	4615      	mov	r5, r2
 80069de:	f04f 0200 	mov.w	r2, #0
 80069e2:	f04f 0300 	mov.w	r3, #0
 80069e6:	022b      	lsls	r3, r5, #8
 80069e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80069ec:	0222      	lsls	r2, r4, #8
 80069ee:	68f9      	ldr	r1, [r7, #12]
 80069f0:	6849      	ldr	r1, [r1, #4]
 80069f2:	0849      	lsrs	r1, r1, #1
 80069f4:	2000      	movs	r0, #0
 80069f6:	4688      	mov	r8, r1
 80069f8:	4681      	mov	r9, r0
 80069fa:	eb12 0a08 	adds.w	sl, r2, r8
 80069fe:	eb43 0b09 	adc.w	fp, r3, r9
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	603b      	str	r3, [r7, #0]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a10:	4650      	mov	r0, sl
 8006a12:	4659      	mov	r1, fp
 8006a14:	f7fa f918 	bl	8000c48 <__aeabi_uldivmod>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a26:	d308      	bcc.n	8006a3a <UART_SetConfig+0x3de>
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a2e:	d204      	bcs.n	8006a3a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	69ba      	ldr	r2, [r7, #24]
 8006a36:	60da      	str	r2, [r3, #12]
 8006a38:	e0b6      	b.n	8006ba8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a40:	e0b2      	b.n	8006ba8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a4a:	d15e      	bne.n	8006b0a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a50:	2b08      	cmp	r3, #8
 8006a52:	d828      	bhi.n	8006aa6 <UART_SetConfig+0x44a>
 8006a54:	a201      	add	r2, pc, #4	@ (adr r2, 8006a5c <UART_SetConfig+0x400>)
 8006a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5a:	bf00      	nop
 8006a5c:	08006a81 	.word	0x08006a81
 8006a60:	08006a89 	.word	0x08006a89
 8006a64:	08006a91 	.word	0x08006a91
 8006a68:	08006aa7 	.word	0x08006aa7
 8006a6c:	08006a97 	.word	0x08006a97
 8006a70:	08006aa7 	.word	0x08006aa7
 8006a74:	08006aa7 	.word	0x08006aa7
 8006a78:	08006aa7 	.word	0x08006aa7
 8006a7c:	08006a9f 	.word	0x08006a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a80:	f7fd fac6 	bl	8004010 <HAL_RCC_GetPCLK1Freq>
 8006a84:	61f8      	str	r0, [r7, #28]
        break;
 8006a86:	e014      	b.n	8006ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a88:	f7fd fad8 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 8006a8c:	61f8      	str	r0, [r7, #28]
        break;
 8006a8e:	e010      	b.n	8006ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a90:	4b4d      	ldr	r3, [pc, #308]	@ (8006bc8 <UART_SetConfig+0x56c>)
 8006a92:	61fb      	str	r3, [r7, #28]
        break;
 8006a94:	e00d      	b.n	8006ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a96:	f7fd fa23 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 8006a9a:	61f8      	str	r0, [r7, #28]
        break;
 8006a9c:	e009      	b.n	8006ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aa2:	61fb      	str	r3, [r7, #28]
        break;
 8006aa4:	e005      	b.n	8006ab2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ab0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d077      	beq.n	8006ba8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	005a      	lsls	r2, r3, #1
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	085b      	lsrs	r3, r3, #1
 8006ac2:	441a      	add	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006acc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b0f      	cmp	r3, #15
 8006ad2:	d916      	bls.n	8006b02 <UART_SetConfig+0x4a6>
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ada:	d212      	bcs.n	8006b02 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	f023 030f 	bic.w	r3, r3, #15
 8006ae4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	085b      	lsrs	r3, r3, #1
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	f003 0307 	and.w	r3, r3, #7
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	8afb      	ldrh	r3, [r7, #22]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	8afa      	ldrh	r2, [r7, #22]
 8006afe:	60da      	str	r2, [r3, #12]
 8006b00:	e052      	b.n	8006ba8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b08:	e04e      	b.n	8006ba8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b0a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b0e:	2b08      	cmp	r3, #8
 8006b10:	d827      	bhi.n	8006b62 <UART_SetConfig+0x506>
 8006b12:	a201      	add	r2, pc, #4	@ (adr r2, 8006b18 <UART_SetConfig+0x4bc>)
 8006b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b18:	08006b3d 	.word	0x08006b3d
 8006b1c:	08006b45 	.word	0x08006b45
 8006b20:	08006b4d 	.word	0x08006b4d
 8006b24:	08006b63 	.word	0x08006b63
 8006b28:	08006b53 	.word	0x08006b53
 8006b2c:	08006b63 	.word	0x08006b63
 8006b30:	08006b63 	.word	0x08006b63
 8006b34:	08006b63 	.word	0x08006b63
 8006b38:	08006b5b 	.word	0x08006b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b3c:	f7fd fa68 	bl	8004010 <HAL_RCC_GetPCLK1Freq>
 8006b40:	61f8      	str	r0, [r7, #28]
        break;
 8006b42:	e014      	b.n	8006b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b44:	f7fd fa7a 	bl	800403c <HAL_RCC_GetPCLK2Freq>
 8006b48:	61f8      	str	r0, [r7, #28]
        break;
 8006b4a:	e010      	b.n	8006b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8006bc8 <UART_SetConfig+0x56c>)
 8006b4e:	61fb      	str	r3, [r7, #28]
        break;
 8006b50:	e00d      	b.n	8006b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b52:	f7fd f9c5 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 8006b56:	61f8      	str	r0, [r7, #28]
        break;
 8006b58:	e009      	b.n	8006b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b5e:	61fb      	str	r3, [r7, #28]
        break;
 8006b60:	e005      	b.n	8006b6e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006b6c:	bf00      	nop
    }

    if (pclk != 0U)
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d019      	beq.n	8006ba8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	085a      	lsrs	r2, r3, #1
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	441a      	add	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	2b0f      	cmp	r3, #15
 8006b8c:	d909      	bls.n	8006ba2 <UART_SetConfig+0x546>
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b94:	d205      	bcs.n	8006ba2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60da      	str	r2, [r3, #12]
 8006ba0:	e002      	b.n	8006ba8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006bb4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3728      	adds	r7, #40	@ 0x28
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bc2:	bf00      	nop
 8006bc4:	40008000 	.word	0x40008000
 8006bc8:	00f42400 	.word	0x00f42400

08006bcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00a      	beq.n	8006bf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00a      	beq.n	8006c3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c3e:	f003 0304 	and.w	r3, r3, #4
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c60:	f003 0310 	and.w	r3, r3, #16
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d01a      	beq.n	8006ce2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cca:	d10a      	bne.n	8006ce2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00a      	beq.n	8006d04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	605a      	str	r2, [r3, #4]
  }
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b098      	sub	sp, #96	@ 0x60
 8006d14:	af02      	add	r7, sp, #8
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d20:	f7fc f840 	bl	8002da4 <HAL_GetTick>
 8006d24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0308 	and.w	r3, r3, #8
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d12e      	bne.n	8006d92 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f88c 	bl	8006e60 <UART_WaitOnFlagUntilTimeout>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d021      	beq.n	8006d92 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d56:	e853 3f00 	ldrex	r3, [r3]
 8006d5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d62:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d74:	e841 2300 	strex	r3, r2, [r1]
 8006d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1e6      	bne.n	8006d4e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2220      	movs	r2, #32
 8006d84:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e062      	b.n	8006e58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d149      	bne.n	8006e34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006da0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006da4:	9300      	str	r3, [sp, #0]
 8006da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006da8:	2200      	movs	r2, #0
 8006daa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 f856 	bl	8006e60 <UART_WaitOnFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d03c      	beq.n	8006e34 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc2:	e853 3f00 	ldrex	r3, [r3]
 8006dc6:	623b      	str	r3, [r7, #32]
   return(result);
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006dda:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ddc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006de0:	e841 2300 	strex	r3, r2, [r1]
 8006de4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e6      	bne.n	8006dba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3308      	adds	r3, #8
 8006df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0301 	bic.w	r3, r3, #1
 8006e02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e0c:	61fa      	str	r2, [r7, #28]
 8006e0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e10:	69b9      	ldr	r1, [r7, #24]
 8006e12:	69fa      	ldr	r2, [r7, #28]
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	617b      	str	r3, [r7, #20]
   return(result);
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e5      	bne.n	8006dec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e011      	b.n	8006e58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2220      	movs	r2, #32
 8006e38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3758      	adds	r7, #88	@ 0x58
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	603b      	str	r3, [r7, #0]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e70:	e04f      	b.n	8006f12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e78:	d04b      	beq.n	8006f12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e7a:	f7fb ff93 	bl	8002da4 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d302      	bcc.n	8006e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e04e      	b.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0304 	and.w	r3, r3, #4
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d037      	beq.n	8006f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b80      	cmp	r3, #128	@ 0x80
 8006ea6:	d034      	beq.n	8006f12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b40      	cmp	r3, #64	@ 0x40
 8006eac:	d031      	beq.n	8006f12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	f003 0308 	and.w	r3, r3, #8
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	d110      	bne.n	8006ede <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2208      	movs	r2, #8
 8006ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 f8ff 	bl	80070c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2208      	movs	r2, #8
 8006ece:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e029      	b.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006eec:	d111      	bne.n	8006f12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ef6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 f8e5 	bl	80070c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e00f      	b.n	8006f32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	69da      	ldr	r2, [r3, #28]
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	bf0c      	ite	eq
 8006f22:	2301      	moveq	r3, #1
 8006f24:	2300      	movne	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	461a      	mov	r2, r3
 8006f2a:	79fb      	ldrb	r3, [r7, #7]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d0a0      	beq.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b097      	sub	sp, #92	@ 0x5c
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	4613      	mov	r3, r2
 8006f48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	88fa      	ldrh	r2, [r7, #6]
 8006f54:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	88fa      	ldrh	r2, [r7, #6]
 8006f5c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f6e:	d10e      	bne.n	8006f8e <UART_Start_Receive_IT+0x52>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d105      	bne.n	8006f84 <UART_Start_Receive_IT+0x48>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006f7e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f82:	e02d      	b.n	8006fe0 <UART_Start_Receive_IT+0xa4>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	22ff      	movs	r2, #255	@ 0xff
 8006f88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006f8c:	e028      	b.n	8006fe0 <UART_Start_Receive_IT+0xa4>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10d      	bne.n	8006fb2 <UART_Start_Receive_IT+0x76>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d104      	bne.n	8006fa8 <UART_Start_Receive_IT+0x6c>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	22ff      	movs	r2, #255	@ 0xff
 8006fa2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006fa6:	e01b      	b.n	8006fe0 <UART_Start_Receive_IT+0xa4>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	227f      	movs	r2, #127	@ 0x7f
 8006fac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006fb0:	e016      	b.n	8006fe0 <UART_Start_Receive_IT+0xa4>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fba:	d10d      	bne.n	8006fd8 <UART_Start_Receive_IT+0x9c>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d104      	bne.n	8006fce <UART_Start_Receive_IT+0x92>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	227f      	movs	r2, #127	@ 0x7f
 8006fc8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006fcc:	e008      	b.n	8006fe0 <UART_Start_Receive_IT+0xa4>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	223f      	movs	r2, #63	@ 0x3f
 8006fd2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006fd6:	e003      	b.n	8006fe0 <UART_Start_Receive_IT+0xa4>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2222      	movs	r2, #34	@ 0x22
 8006fec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	3308      	adds	r3, #8
 8006ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ffa:	e853 3f00 	ldrex	r3, [r3]
 8006ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007002:	f043 0301 	orr.w	r3, r3, #1
 8007006:	657b      	str	r3, [r7, #84]	@ 0x54
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3308      	adds	r3, #8
 800700e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007010:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007012:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007014:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007016:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007018:	e841 2300 	strex	r3, r2, [r1]
 800701c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800701e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e5      	bne.n	8006ff0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800702c:	d107      	bne.n	800703e <UART_Start_Receive_IT+0x102>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d103      	bne.n	800703e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4a21      	ldr	r2, [pc, #132]	@ (80070c0 <UART_Start_Receive_IT+0x184>)
 800703a:	669a      	str	r2, [r3, #104]	@ 0x68
 800703c:	e002      	b.n	8007044 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	4a20      	ldr	r2, [pc, #128]	@ (80070c4 <UART_Start_Receive_IT+0x188>)
 8007042:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d019      	beq.n	8007080 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007060:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	461a      	mov	r2, r3
 8007068:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800706a:	637b      	str	r3, [r7, #52]	@ 0x34
 800706c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007070:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e6      	bne.n	800704c <UART_Start_Receive_IT+0x110>
 800707e:	e018      	b.n	80070b2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	613b      	str	r3, [r7, #16]
   return(result);
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	f043 0320 	orr.w	r3, r3, #32
 8007094:	653b      	str	r3, [r7, #80]	@ 0x50
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800709e:	623b      	str	r3, [r7, #32]
 80070a0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a2:	69f9      	ldr	r1, [r7, #28]
 80070a4:	6a3a      	ldr	r2, [r7, #32]
 80070a6:	e841 2300 	strex	r3, r2, [r1]
 80070aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1e6      	bne.n	8007080 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	375c      	adds	r7, #92	@ 0x5c
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	080073cd 	.word	0x080073cd
 80070c4:	08007211 	.word	0x08007211

080070c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b095      	sub	sp, #84	@ 0x54
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d8:	e853 3f00 	ldrex	r3, [r3]
 80070dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80070f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e6      	bne.n	80070d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3308      	adds	r3, #8
 8007108:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	61fb      	str	r3, [r7, #28]
   return(result);
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	f023 0301 	bic.w	r3, r3, #1
 8007118:	64bb      	str	r3, [r7, #72]	@ 0x48
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3308      	adds	r3, #8
 8007120:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007122:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007124:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007128:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e5      	bne.n	8007102 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800713a:	2b01      	cmp	r3, #1
 800713c:	d118      	bne.n	8007170 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	e853 3f00 	ldrex	r3, [r3]
 800714a:	60bb      	str	r3, [r7, #8]
   return(result);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f023 0310 	bic.w	r3, r3, #16
 8007152:	647b      	str	r3, [r7, #68]	@ 0x44
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	461a      	mov	r2, r3
 800715a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800715c:	61bb      	str	r3, [r7, #24]
 800715e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007160:	6979      	ldr	r1, [r7, #20]
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	e841 2300 	strex	r3, r2, [r1]
 8007168:	613b      	str	r3, [r7, #16]
   return(result);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e6      	bne.n	800713e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2220      	movs	r2, #32
 8007174:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007184:	bf00      	nop
 8007186:	3754      	adds	r7, #84	@ 0x54
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7ff fa3e 	bl	8006630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071b4:	bf00      	nop
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b088      	sub	sp, #32
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	e853 3f00 	ldrex	r3, [r3]
 80071d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071d8:	61fb      	str	r3, [r7, #28]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	61bb      	str	r3, [r7, #24]
 80071e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e6:	6979      	ldr	r1, [r7, #20]
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	e841 2300 	strex	r3, r2, [r1]
 80071ee:	613b      	str	r3, [r7, #16]
   return(result);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1e6      	bne.n	80071c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2220      	movs	r2, #32
 80071fa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7ff fa0a 	bl	800661c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007208:	bf00      	nop
 800720a:	3720      	adds	r7, #32
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b09c      	sub	sp, #112	@ 0x70
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800721e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007228:	2b22      	cmp	r3, #34	@ 0x22
 800722a:	f040 80be 	bne.w	80073aa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007234:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007238:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800723c:	b2d9      	uxtb	r1, r3
 800723e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007242:	b2da      	uxtb	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007248:	400a      	ands	r2, r1
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007252:	1c5a      	adds	r2, r3, #1
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800725e:	b29b      	uxth	r3, r3
 8007260:	3b01      	subs	r3, #1
 8007262:	b29a      	uxth	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007270:	b29b      	uxth	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	f040 80a3 	bne.w	80073be <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007288:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800728c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	461a      	mov	r2, r3
 8007294:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007296:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007298:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800729c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80072a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e6      	bne.n	8007278 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072bc:	f023 0301 	bic.w	r3, r3, #1
 80072c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3308      	adds	r3, #8
 80072c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80072ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80072cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072d2:	e841 2300 	strex	r3, r2, [r1]
 80072d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1e5      	bne.n	80072aa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a34      	ldr	r2, [pc, #208]	@ (80073c8 <UART_RxISR_8BIT+0x1b8>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d01f      	beq.n	800733c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d018      	beq.n	800733c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007312:	e853 3f00 	ldrex	r3, [r3]
 8007316:	623b      	str	r3, [r7, #32]
   return(result);
 8007318:	6a3b      	ldr	r3, [r7, #32]
 800731a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800731e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007328:	633b      	str	r3, [r7, #48]	@ 0x30
 800732a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800732e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007330:	e841 2300 	strex	r3, r2, [r1]
 8007334:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1e6      	bne.n	800730a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007340:	2b01      	cmp	r3, #1
 8007342:	d12e      	bne.n	80073a2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	e853 3f00 	ldrex	r3, [r3]
 8007356:	60fb      	str	r3, [r7, #12]
   return(result);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 0310 	bic.w	r3, r3, #16
 800735e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	461a      	mov	r2, r3
 8007366:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007368:	61fb      	str	r3, [r7, #28]
 800736a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736c:	69b9      	ldr	r1, [r7, #24]
 800736e:	69fa      	ldr	r2, [r7, #28]
 8007370:	e841 2300 	strex	r3, r2, [r1]
 8007374:	617b      	str	r3, [r7, #20]
   return(result);
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e6      	bne.n	800734a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	f003 0310 	and.w	r3, r3, #16
 8007386:	2b10      	cmp	r3, #16
 8007388:	d103      	bne.n	8007392 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2210      	movs	r2, #16
 8007390:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff f952 	bl	8006644 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073a0:	e00d      	b.n	80073be <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7fb f816 	bl	80023d4 <HAL_UART_RxCpltCallback>
}
 80073a8:	e009      	b.n	80073be <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	8b1b      	ldrh	r3, [r3, #24]
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f042 0208 	orr.w	r2, r2, #8
 80073ba:	b292      	uxth	r2, r2
 80073bc:	831a      	strh	r2, [r3, #24]
}
 80073be:	bf00      	nop
 80073c0:	3770      	adds	r7, #112	@ 0x70
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	40008000 	.word	0x40008000

080073cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b09c      	sub	sp, #112	@ 0x70
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80073da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073e4:	2b22      	cmp	r3, #34	@ 0x22
 80073e6:	f040 80be 	bne.w	8007566 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80073f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80073fa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80073fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007402:	4013      	ands	r3, r2
 8007404:	b29a      	uxth	r2, r3
 8007406:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007408:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800740e:	1c9a      	adds	r2, r3, #2
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800741a:	b29b      	uxth	r3, r3
 800741c:	3b01      	subs	r3, #1
 800741e:	b29a      	uxth	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800742c:	b29b      	uxth	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	f040 80a3 	bne.w	800757a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007444:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007448:	667b      	str	r3, [r7, #100]	@ 0x64
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007452:	657b      	str	r3, [r7, #84]	@ 0x54
 8007454:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007458:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e6      	bne.n	8007434 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3308      	adds	r3, #8
 800746c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007478:	f023 0301 	bic.w	r3, r3, #1
 800747c:	663b      	str	r3, [r7, #96]	@ 0x60
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3308      	adds	r3, #8
 8007484:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007486:	643a      	str	r2, [r7, #64]	@ 0x40
 8007488:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800748c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e5      	bne.n	8007466 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2220      	movs	r2, #32
 800749e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a34      	ldr	r2, [pc, #208]	@ (8007584 <UART_RxISR_16BIT+0x1b8>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d01f      	beq.n	80074f8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d018      	beq.n	80074f8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	e853 3f00 	ldrex	r3, [r3]
 80074d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	461a      	mov	r2, r3
 80074e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074e6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074ec:	e841 2300 	strex	r3, r2, [r1]
 80074f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1e6      	bne.n	80074c6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d12e      	bne.n	800755e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	e853 3f00 	ldrex	r3, [r3]
 8007512:	60bb      	str	r3, [r7, #8]
   return(result);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	f023 0310 	bic.w	r3, r3, #16
 800751a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	461a      	mov	r2, r3
 8007522:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007524:	61bb      	str	r3, [r7, #24]
 8007526:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	6979      	ldr	r1, [r7, #20]
 800752a:	69ba      	ldr	r2, [r7, #24]
 800752c:	e841 2300 	strex	r3, r2, [r1]
 8007530:	613b      	str	r3, [r7, #16]
   return(result);
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e6      	bne.n	8007506 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	f003 0310 	and.w	r3, r3, #16
 8007542:	2b10      	cmp	r3, #16
 8007544:	d103      	bne.n	800754e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2210      	movs	r2, #16
 800754c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007554:	4619      	mov	r1, r3
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7ff f874 	bl	8006644 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800755c:	e00d      	b.n	800757a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7fa ff38 	bl	80023d4 <HAL_UART_RxCpltCallback>
}
 8007564:	e009      	b.n	800757a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	8b1b      	ldrh	r3, [r3, #24]
 800756c:	b29a      	uxth	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0208 	orr.w	r2, r2, #8
 8007576:	b292      	uxth	r2, r2
 8007578:	831a      	strh	r2, [r3, #24]
}
 800757a:	bf00      	nop
 800757c:	3770      	adds	r7, #112	@ 0x70
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	40008000 	.word	0x40008000

08007588 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <atoi>:
 800759c:	220a      	movs	r2, #10
 800759e:	2100      	movs	r1, #0
 80075a0:	f000 b87a 	b.w	8007698 <strtol>

080075a4 <_strtol_l.constprop.0>:
 80075a4:	2b24      	cmp	r3, #36	@ 0x24
 80075a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075aa:	4686      	mov	lr, r0
 80075ac:	4690      	mov	r8, r2
 80075ae:	d801      	bhi.n	80075b4 <_strtol_l.constprop.0+0x10>
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d106      	bne.n	80075c2 <_strtol_l.constprop.0+0x1e>
 80075b4:	f000 ff62 	bl	800847c <__errno>
 80075b8:	2316      	movs	r3, #22
 80075ba:	6003      	str	r3, [r0, #0]
 80075bc:	2000      	movs	r0, #0
 80075be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c2:	4834      	ldr	r0, [pc, #208]	@ (8007694 <_strtol_l.constprop.0+0xf0>)
 80075c4:	460d      	mov	r5, r1
 80075c6:	462a      	mov	r2, r5
 80075c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075cc:	5d06      	ldrb	r6, [r0, r4]
 80075ce:	f016 0608 	ands.w	r6, r6, #8
 80075d2:	d1f8      	bne.n	80075c6 <_strtol_l.constprop.0+0x22>
 80075d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80075d6:	d12d      	bne.n	8007634 <_strtol_l.constprop.0+0x90>
 80075d8:	782c      	ldrb	r4, [r5, #0]
 80075da:	2601      	movs	r6, #1
 80075dc:	1c95      	adds	r5, r2, #2
 80075de:	f033 0210 	bics.w	r2, r3, #16
 80075e2:	d109      	bne.n	80075f8 <_strtol_l.constprop.0+0x54>
 80075e4:	2c30      	cmp	r4, #48	@ 0x30
 80075e6:	d12a      	bne.n	800763e <_strtol_l.constprop.0+0x9a>
 80075e8:	782a      	ldrb	r2, [r5, #0]
 80075ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80075ee:	2a58      	cmp	r2, #88	@ 0x58
 80075f0:	d125      	bne.n	800763e <_strtol_l.constprop.0+0x9a>
 80075f2:	786c      	ldrb	r4, [r5, #1]
 80075f4:	2310      	movs	r3, #16
 80075f6:	3502      	adds	r5, #2
 80075f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80075fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007600:	2200      	movs	r2, #0
 8007602:	fbbc f9f3 	udiv	r9, ip, r3
 8007606:	4610      	mov	r0, r2
 8007608:	fb03 ca19 	mls	sl, r3, r9, ip
 800760c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007610:	2f09      	cmp	r7, #9
 8007612:	d81b      	bhi.n	800764c <_strtol_l.constprop.0+0xa8>
 8007614:	463c      	mov	r4, r7
 8007616:	42a3      	cmp	r3, r4
 8007618:	dd27      	ble.n	800766a <_strtol_l.constprop.0+0xc6>
 800761a:	1c57      	adds	r7, r2, #1
 800761c:	d007      	beq.n	800762e <_strtol_l.constprop.0+0x8a>
 800761e:	4581      	cmp	r9, r0
 8007620:	d320      	bcc.n	8007664 <_strtol_l.constprop.0+0xc0>
 8007622:	d101      	bne.n	8007628 <_strtol_l.constprop.0+0x84>
 8007624:	45a2      	cmp	sl, r4
 8007626:	db1d      	blt.n	8007664 <_strtol_l.constprop.0+0xc0>
 8007628:	fb00 4003 	mla	r0, r0, r3, r4
 800762c:	2201      	movs	r2, #1
 800762e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007632:	e7eb      	b.n	800760c <_strtol_l.constprop.0+0x68>
 8007634:	2c2b      	cmp	r4, #43	@ 0x2b
 8007636:	bf04      	itt	eq
 8007638:	782c      	ldrbeq	r4, [r5, #0]
 800763a:	1c95      	addeq	r5, r2, #2
 800763c:	e7cf      	b.n	80075de <_strtol_l.constprop.0+0x3a>
 800763e:	2b00      	cmp	r3, #0
 8007640:	d1da      	bne.n	80075f8 <_strtol_l.constprop.0+0x54>
 8007642:	2c30      	cmp	r4, #48	@ 0x30
 8007644:	bf0c      	ite	eq
 8007646:	2308      	moveq	r3, #8
 8007648:	230a      	movne	r3, #10
 800764a:	e7d5      	b.n	80075f8 <_strtol_l.constprop.0+0x54>
 800764c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007650:	2f19      	cmp	r7, #25
 8007652:	d801      	bhi.n	8007658 <_strtol_l.constprop.0+0xb4>
 8007654:	3c37      	subs	r4, #55	@ 0x37
 8007656:	e7de      	b.n	8007616 <_strtol_l.constprop.0+0x72>
 8007658:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800765c:	2f19      	cmp	r7, #25
 800765e:	d804      	bhi.n	800766a <_strtol_l.constprop.0+0xc6>
 8007660:	3c57      	subs	r4, #87	@ 0x57
 8007662:	e7d8      	b.n	8007616 <_strtol_l.constprop.0+0x72>
 8007664:	f04f 32ff 	mov.w	r2, #4294967295
 8007668:	e7e1      	b.n	800762e <_strtol_l.constprop.0+0x8a>
 800766a:	1c53      	adds	r3, r2, #1
 800766c:	d108      	bne.n	8007680 <_strtol_l.constprop.0+0xdc>
 800766e:	2322      	movs	r3, #34	@ 0x22
 8007670:	f8ce 3000 	str.w	r3, [lr]
 8007674:	4660      	mov	r0, ip
 8007676:	f1b8 0f00 	cmp.w	r8, #0
 800767a:	d0a0      	beq.n	80075be <_strtol_l.constprop.0+0x1a>
 800767c:	1e69      	subs	r1, r5, #1
 800767e:	e006      	b.n	800768e <_strtol_l.constprop.0+0xea>
 8007680:	b106      	cbz	r6, 8007684 <_strtol_l.constprop.0+0xe0>
 8007682:	4240      	negs	r0, r0
 8007684:	f1b8 0f00 	cmp.w	r8, #0
 8007688:	d099      	beq.n	80075be <_strtol_l.constprop.0+0x1a>
 800768a:	2a00      	cmp	r2, #0
 800768c:	d1f6      	bne.n	800767c <_strtol_l.constprop.0+0xd8>
 800768e:	f8c8 1000 	str.w	r1, [r8]
 8007692:	e794      	b.n	80075be <_strtol_l.constprop.0+0x1a>
 8007694:	0800b159 	.word	0x0800b159

08007698 <strtol>:
 8007698:	4613      	mov	r3, r2
 800769a:	460a      	mov	r2, r1
 800769c:	4601      	mov	r1, r0
 800769e:	4802      	ldr	r0, [pc, #8]	@ (80076a8 <strtol+0x10>)
 80076a0:	6800      	ldr	r0, [r0, #0]
 80076a2:	f7ff bf7f 	b.w	80075a4 <_strtol_l.constprop.0>
 80076a6:	bf00      	nop
 80076a8:	20000024 	.word	0x20000024

080076ac <__cvt>:
 80076ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076b0:	ec57 6b10 	vmov	r6, r7, d0
 80076b4:	2f00      	cmp	r7, #0
 80076b6:	460c      	mov	r4, r1
 80076b8:	4619      	mov	r1, r3
 80076ba:	463b      	mov	r3, r7
 80076bc:	bfbb      	ittet	lt
 80076be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80076c2:	461f      	movlt	r7, r3
 80076c4:	2300      	movge	r3, #0
 80076c6:	232d      	movlt	r3, #45	@ 0x2d
 80076c8:	700b      	strb	r3, [r1, #0]
 80076ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80076d0:	4691      	mov	r9, r2
 80076d2:	f023 0820 	bic.w	r8, r3, #32
 80076d6:	bfbc      	itt	lt
 80076d8:	4632      	movlt	r2, r6
 80076da:	4616      	movlt	r6, r2
 80076dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80076e0:	d005      	beq.n	80076ee <__cvt+0x42>
 80076e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80076e6:	d100      	bne.n	80076ea <__cvt+0x3e>
 80076e8:	3401      	adds	r4, #1
 80076ea:	2102      	movs	r1, #2
 80076ec:	e000      	b.n	80076f0 <__cvt+0x44>
 80076ee:	2103      	movs	r1, #3
 80076f0:	ab03      	add	r3, sp, #12
 80076f2:	9301      	str	r3, [sp, #4]
 80076f4:	ab02      	add	r3, sp, #8
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	ec47 6b10 	vmov	d0, r6, r7
 80076fc:	4653      	mov	r3, sl
 80076fe:	4622      	mov	r2, r4
 8007700:	f000 ff72 	bl	80085e8 <_dtoa_r>
 8007704:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007708:	4605      	mov	r5, r0
 800770a:	d119      	bne.n	8007740 <__cvt+0x94>
 800770c:	f019 0f01 	tst.w	r9, #1
 8007710:	d00e      	beq.n	8007730 <__cvt+0x84>
 8007712:	eb00 0904 	add.w	r9, r0, r4
 8007716:	2200      	movs	r2, #0
 8007718:	2300      	movs	r3, #0
 800771a:	4630      	mov	r0, r6
 800771c:	4639      	mov	r1, r7
 800771e:	f7f9 f9d3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007722:	b108      	cbz	r0, 8007728 <__cvt+0x7c>
 8007724:	f8cd 900c 	str.w	r9, [sp, #12]
 8007728:	2230      	movs	r2, #48	@ 0x30
 800772a:	9b03      	ldr	r3, [sp, #12]
 800772c:	454b      	cmp	r3, r9
 800772e:	d31e      	bcc.n	800776e <__cvt+0xc2>
 8007730:	9b03      	ldr	r3, [sp, #12]
 8007732:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007734:	1b5b      	subs	r3, r3, r5
 8007736:	4628      	mov	r0, r5
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	b004      	add	sp, #16
 800773c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007740:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007744:	eb00 0904 	add.w	r9, r0, r4
 8007748:	d1e5      	bne.n	8007716 <__cvt+0x6a>
 800774a:	7803      	ldrb	r3, [r0, #0]
 800774c:	2b30      	cmp	r3, #48	@ 0x30
 800774e:	d10a      	bne.n	8007766 <__cvt+0xba>
 8007750:	2200      	movs	r2, #0
 8007752:	2300      	movs	r3, #0
 8007754:	4630      	mov	r0, r6
 8007756:	4639      	mov	r1, r7
 8007758:	f7f9 f9b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800775c:	b918      	cbnz	r0, 8007766 <__cvt+0xba>
 800775e:	f1c4 0401 	rsb	r4, r4, #1
 8007762:	f8ca 4000 	str.w	r4, [sl]
 8007766:	f8da 3000 	ldr.w	r3, [sl]
 800776a:	4499      	add	r9, r3
 800776c:	e7d3      	b.n	8007716 <__cvt+0x6a>
 800776e:	1c59      	adds	r1, r3, #1
 8007770:	9103      	str	r1, [sp, #12]
 8007772:	701a      	strb	r2, [r3, #0]
 8007774:	e7d9      	b.n	800772a <__cvt+0x7e>

08007776 <__exponent>:
 8007776:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007778:	2900      	cmp	r1, #0
 800777a:	bfba      	itte	lt
 800777c:	4249      	neglt	r1, r1
 800777e:	232d      	movlt	r3, #45	@ 0x2d
 8007780:	232b      	movge	r3, #43	@ 0x2b
 8007782:	2909      	cmp	r1, #9
 8007784:	7002      	strb	r2, [r0, #0]
 8007786:	7043      	strb	r3, [r0, #1]
 8007788:	dd29      	ble.n	80077de <__exponent+0x68>
 800778a:	f10d 0307 	add.w	r3, sp, #7
 800778e:	461d      	mov	r5, r3
 8007790:	270a      	movs	r7, #10
 8007792:	461a      	mov	r2, r3
 8007794:	fbb1 f6f7 	udiv	r6, r1, r7
 8007798:	fb07 1416 	mls	r4, r7, r6, r1
 800779c:	3430      	adds	r4, #48	@ 0x30
 800779e:	f802 4c01 	strb.w	r4, [r2, #-1]
 80077a2:	460c      	mov	r4, r1
 80077a4:	2c63      	cmp	r4, #99	@ 0x63
 80077a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80077aa:	4631      	mov	r1, r6
 80077ac:	dcf1      	bgt.n	8007792 <__exponent+0x1c>
 80077ae:	3130      	adds	r1, #48	@ 0x30
 80077b0:	1e94      	subs	r4, r2, #2
 80077b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077b6:	1c41      	adds	r1, r0, #1
 80077b8:	4623      	mov	r3, r4
 80077ba:	42ab      	cmp	r3, r5
 80077bc:	d30a      	bcc.n	80077d4 <__exponent+0x5e>
 80077be:	f10d 0309 	add.w	r3, sp, #9
 80077c2:	1a9b      	subs	r3, r3, r2
 80077c4:	42ac      	cmp	r4, r5
 80077c6:	bf88      	it	hi
 80077c8:	2300      	movhi	r3, #0
 80077ca:	3302      	adds	r3, #2
 80077cc:	4403      	add	r3, r0
 80077ce:	1a18      	subs	r0, r3, r0
 80077d0:	b003      	add	sp, #12
 80077d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80077d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80077dc:	e7ed      	b.n	80077ba <__exponent+0x44>
 80077de:	2330      	movs	r3, #48	@ 0x30
 80077e0:	3130      	adds	r1, #48	@ 0x30
 80077e2:	7083      	strb	r3, [r0, #2]
 80077e4:	70c1      	strb	r1, [r0, #3]
 80077e6:	1d03      	adds	r3, r0, #4
 80077e8:	e7f1      	b.n	80077ce <__exponent+0x58>
	...

080077ec <_printf_float>:
 80077ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f0:	b08d      	sub	sp, #52	@ 0x34
 80077f2:	460c      	mov	r4, r1
 80077f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80077f8:	4616      	mov	r6, r2
 80077fa:	461f      	mov	r7, r3
 80077fc:	4605      	mov	r5, r0
 80077fe:	f000 fdf3 	bl	80083e8 <_localeconv_r>
 8007802:	6803      	ldr	r3, [r0, #0]
 8007804:	9304      	str	r3, [sp, #16]
 8007806:	4618      	mov	r0, r3
 8007808:	f7f8 fd32 	bl	8000270 <strlen>
 800780c:	2300      	movs	r3, #0
 800780e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007810:	f8d8 3000 	ldr.w	r3, [r8]
 8007814:	9005      	str	r0, [sp, #20]
 8007816:	3307      	adds	r3, #7
 8007818:	f023 0307 	bic.w	r3, r3, #7
 800781c:	f103 0208 	add.w	r2, r3, #8
 8007820:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007824:	f8d4 b000 	ldr.w	fp, [r4]
 8007828:	f8c8 2000 	str.w	r2, [r8]
 800782c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007830:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007834:	9307      	str	r3, [sp, #28]
 8007836:	f8cd 8018 	str.w	r8, [sp, #24]
 800783a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800783e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007842:	4b9c      	ldr	r3, [pc, #624]	@ (8007ab4 <_printf_float+0x2c8>)
 8007844:	f04f 32ff 	mov.w	r2, #4294967295
 8007848:	f7f9 f970 	bl	8000b2c <__aeabi_dcmpun>
 800784c:	bb70      	cbnz	r0, 80078ac <_printf_float+0xc0>
 800784e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007852:	4b98      	ldr	r3, [pc, #608]	@ (8007ab4 <_printf_float+0x2c8>)
 8007854:	f04f 32ff 	mov.w	r2, #4294967295
 8007858:	f7f9 f94a 	bl	8000af0 <__aeabi_dcmple>
 800785c:	bb30      	cbnz	r0, 80078ac <_printf_float+0xc0>
 800785e:	2200      	movs	r2, #0
 8007860:	2300      	movs	r3, #0
 8007862:	4640      	mov	r0, r8
 8007864:	4649      	mov	r1, r9
 8007866:	f7f9 f939 	bl	8000adc <__aeabi_dcmplt>
 800786a:	b110      	cbz	r0, 8007872 <_printf_float+0x86>
 800786c:	232d      	movs	r3, #45	@ 0x2d
 800786e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007872:	4a91      	ldr	r2, [pc, #580]	@ (8007ab8 <_printf_float+0x2cc>)
 8007874:	4b91      	ldr	r3, [pc, #580]	@ (8007abc <_printf_float+0x2d0>)
 8007876:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800787a:	bf94      	ite	ls
 800787c:	4690      	movls	r8, r2
 800787e:	4698      	movhi	r8, r3
 8007880:	2303      	movs	r3, #3
 8007882:	6123      	str	r3, [r4, #16]
 8007884:	f02b 0304 	bic.w	r3, fp, #4
 8007888:	6023      	str	r3, [r4, #0]
 800788a:	f04f 0900 	mov.w	r9, #0
 800788e:	9700      	str	r7, [sp, #0]
 8007890:	4633      	mov	r3, r6
 8007892:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007894:	4621      	mov	r1, r4
 8007896:	4628      	mov	r0, r5
 8007898:	f000 f9d2 	bl	8007c40 <_printf_common>
 800789c:	3001      	adds	r0, #1
 800789e:	f040 808d 	bne.w	80079bc <_printf_float+0x1d0>
 80078a2:	f04f 30ff 	mov.w	r0, #4294967295
 80078a6:	b00d      	add	sp, #52	@ 0x34
 80078a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ac:	4642      	mov	r2, r8
 80078ae:	464b      	mov	r3, r9
 80078b0:	4640      	mov	r0, r8
 80078b2:	4649      	mov	r1, r9
 80078b4:	f7f9 f93a 	bl	8000b2c <__aeabi_dcmpun>
 80078b8:	b140      	cbz	r0, 80078cc <_printf_float+0xe0>
 80078ba:	464b      	mov	r3, r9
 80078bc:	2b00      	cmp	r3, #0
 80078be:	bfbc      	itt	lt
 80078c0:	232d      	movlt	r3, #45	@ 0x2d
 80078c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80078c6:	4a7e      	ldr	r2, [pc, #504]	@ (8007ac0 <_printf_float+0x2d4>)
 80078c8:	4b7e      	ldr	r3, [pc, #504]	@ (8007ac4 <_printf_float+0x2d8>)
 80078ca:	e7d4      	b.n	8007876 <_printf_float+0x8a>
 80078cc:	6863      	ldr	r3, [r4, #4]
 80078ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80078d2:	9206      	str	r2, [sp, #24]
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	d13b      	bne.n	8007950 <_printf_float+0x164>
 80078d8:	2306      	movs	r3, #6
 80078da:	6063      	str	r3, [r4, #4]
 80078dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80078e0:	2300      	movs	r3, #0
 80078e2:	6022      	str	r2, [r4, #0]
 80078e4:	9303      	str	r3, [sp, #12]
 80078e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80078e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80078ec:	ab09      	add	r3, sp, #36	@ 0x24
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	6861      	ldr	r1, [r4, #4]
 80078f2:	ec49 8b10 	vmov	d0, r8, r9
 80078f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80078fa:	4628      	mov	r0, r5
 80078fc:	f7ff fed6 	bl	80076ac <__cvt>
 8007900:	9b06      	ldr	r3, [sp, #24]
 8007902:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007904:	2b47      	cmp	r3, #71	@ 0x47
 8007906:	4680      	mov	r8, r0
 8007908:	d129      	bne.n	800795e <_printf_float+0x172>
 800790a:	1cc8      	adds	r0, r1, #3
 800790c:	db02      	blt.n	8007914 <_printf_float+0x128>
 800790e:	6863      	ldr	r3, [r4, #4]
 8007910:	4299      	cmp	r1, r3
 8007912:	dd41      	ble.n	8007998 <_printf_float+0x1ac>
 8007914:	f1aa 0a02 	sub.w	sl, sl, #2
 8007918:	fa5f fa8a 	uxtb.w	sl, sl
 800791c:	3901      	subs	r1, #1
 800791e:	4652      	mov	r2, sl
 8007920:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007924:	9109      	str	r1, [sp, #36]	@ 0x24
 8007926:	f7ff ff26 	bl	8007776 <__exponent>
 800792a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800792c:	1813      	adds	r3, r2, r0
 800792e:	2a01      	cmp	r2, #1
 8007930:	4681      	mov	r9, r0
 8007932:	6123      	str	r3, [r4, #16]
 8007934:	dc02      	bgt.n	800793c <_printf_float+0x150>
 8007936:	6822      	ldr	r2, [r4, #0]
 8007938:	07d2      	lsls	r2, r2, #31
 800793a:	d501      	bpl.n	8007940 <_printf_float+0x154>
 800793c:	3301      	adds	r3, #1
 800793e:	6123      	str	r3, [r4, #16]
 8007940:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0a2      	beq.n	800788e <_printf_float+0xa2>
 8007948:	232d      	movs	r3, #45	@ 0x2d
 800794a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800794e:	e79e      	b.n	800788e <_printf_float+0xa2>
 8007950:	9a06      	ldr	r2, [sp, #24]
 8007952:	2a47      	cmp	r2, #71	@ 0x47
 8007954:	d1c2      	bne.n	80078dc <_printf_float+0xf0>
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1c0      	bne.n	80078dc <_printf_float+0xf0>
 800795a:	2301      	movs	r3, #1
 800795c:	e7bd      	b.n	80078da <_printf_float+0xee>
 800795e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007962:	d9db      	bls.n	800791c <_printf_float+0x130>
 8007964:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007968:	d118      	bne.n	800799c <_printf_float+0x1b0>
 800796a:	2900      	cmp	r1, #0
 800796c:	6863      	ldr	r3, [r4, #4]
 800796e:	dd0b      	ble.n	8007988 <_printf_float+0x19c>
 8007970:	6121      	str	r1, [r4, #16]
 8007972:	b913      	cbnz	r3, 800797a <_printf_float+0x18e>
 8007974:	6822      	ldr	r2, [r4, #0]
 8007976:	07d0      	lsls	r0, r2, #31
 8007978:	d502      	bpl.n	8007980 <_printf_float+0x194>
 800797a:	3301      	adds	r3, #1
 800797c:	440b      	add	r3, r1
 800797e:	6123      	str	r3, [r4, #16]
 8007980:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007982:	f04f 0900 	mov.w	r9, #0
 8007986:	e7db      	b.n	8007940 <_printf_float+0x154>
 8007988:	b913      	cbnz	r3, 8007990 <_printf_float+0x1a4>
 800798a:	6822      	ldr	r2, [r4, #0]
 800798c:	07d2      	lsls	r2, r2, #31
 800798e:	d501      	bpl.n	8007994 <_printf_float+0x1a8>
 8007990:	3302      	adds	r3, #2
 8007992:	e7f4      	b.n	800797e <_printf_float+0x192>
 8007994:	2301      	movs	r3, #1
 8007996:	e7f2      	b.n	800797e <_printf_float+0x192>
 8007998:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800799c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800799e:	4299      	cmp	r1, r3
 80079a0:	db05      	blt.n	80079ae <_printf_float+0x1c2>
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	6121      	str	r1, [r4, #16]
 80079a6:	07d8      	lsls	r0, r3, #31
 80079a8:	d5ea      	bpl.n	8007980 <_printf_float+0x194>
 80079aa:	1c4b      	adds	r3, r1, #1
 80079ac:	e7e7      	b.n	800797e <_printf_float+0x192>
 80079ae:	2900      	cmp	r1, #0
 80079b0:	bfd4      	ite	le
 80079b2:	f1c1 0202 	rsble	r2, r1, #2
 80079b6:	2201      	movgt	r2, #1
 80079b8:	4413      	add	r3, r2
 80079ba:	e7e0      	b.n	800797e <_printf_float+0x192>
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	055a      	lsls	r2, r3, #21
 80079c0:	d407      	bmi.n	80079d2 <_printf_float+0x1e6>
 80079c2:	6923      	ldr	r3, [r4, #16]
 80079c4:	4642      	mov	r2, r8
 80079c6:	4631      	mov	r1, r6
 80079c8:	4628      	mov	r0, r5
 80079ca:	47b8      	blx	r7
 80079cc:	3001      	adds	r0, #1
 80079ce:	d12b      	bne.n	8007a28 <_printf_float+0x23c>
 80079d0:	e767      	b.n	80078a2 <_printf_float+0xb6>
 80079d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079d6:	f240 80dd 	bls.w	8007b94 <_printf_float+0x3a8>
 80079da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079de:	2200      	movs	r2, #0
 80079e0:	2300      	movs	r3, #0
 80079e2:	f7f9 f871 	bl	8000ac8 <__aeabi_dcmpeq>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d033      	beq.n	8007a52 <_printf_float+0x266>
 80079ea:	4a37      	ldr	r2, [pc, #220]	@ (8007ac8 <_printf_float+0x2dc>)
 80079ec:	2301      	movs	r3, #1
 80079ee:	4631      	mov	r1, r6
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b8      	blx	r7
 80079f4:	3001      	adds	r0, #1
 80079f6:	f43f af54 	beq.w	80078a2 <_printf_float+0xb6>
 80079fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80079fe:	4543      	cmp	r3, r8
 8007a00:	db02      	blt.n	8007a08 <_printf_float+0x21c>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	07d8      	lsls	r0, r3, #31
 8007a06:	d50f      	bpl.n	8007a28 <_printf_float+0x23c>
 8007a08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a0c:	4631      	mov	r1, r6
 8007a0e:	4628      	mov	r0, r5
 8007a10:	47b8      	blx	r7
 8007a12:	3001      	adds	r0, #1
 8007a14:	f43f af45 	beq.w	80078a2 <_printf_float+0xb6>
 8007a18:	f04f 0900 	mov.w	r9, #0
 8007a1c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a20:	f104 0a1a 	add.w	sl, r4, #26
 8007a24:	45c8      	cmp	r8, r9
 8007a26:	dc09      	bgt.n	8007a3c <_printf_float+0x250>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	079b      	lsls	r3, r3, #30
 8007a2c:	f100 8103 	bmi.w	8007c36 <_printf_float+0x44a>
 8007a30:	68e0      	ldr	r0, [r4, #12]
 8007a32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a34:	4298      	cmp	r0, r3
 8007a36:	bfb8      	it	lt
 8007a38:	4618      	movlt	r0, r3
 8007a3a:	e734      	b.n	80078a6 <_printf_float+0xba>
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	4652      	mov	r2, sl
 8007a40:	4631      	mov	r1, r6
 8007a42:	4628      	mov	r0, r5
 8007a44:	47b8      	blx	r7
 8007a46:	3001      	adds	r0, #1
 8007a48:	f43f af2b 	beq.w	80078a2 <_printf_float+0xb6>
 8007a4c:	f109 0901 	add.w	r9, r9, #1
 8007a50:	e7e8      	b.n	8007a24 <_printf_float+0x238>
 8007a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	dc39      	bgt.n	8007acc <_printf_float+0x2e0>
 8007a58:	4a1b      	ldr	r2, [pc, #108]	@ (8007ac8 <_printf_float+0x2dc>)
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	4628      	mov	r0, r5
 8007a60:	47b8      	blx	r7
 8007a62:	3001      	adds	r0, #1
 8007a64:	f43f af1d 	beq.w	80078a2 <_printf_float+0xb6>
 8007a68:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007a6c:	ea59 0303 	orrs.w	r3, r9, r3
 8007a70:	d102      	bne.n	8007a78 <_printf_float+0x28c>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	07d9      	lsls	r1, r3, #31
 8007a76:	d5d7      	bpl.n	8007a28 <_printf_float+0x23c>
 8007a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	4628      	mov	r0, r5
 8007a80:	47b8      	blx	r7
 8007a82:	3001      	adds	r0, #1
 8007a84:	f43f af0d 	beq.w	80078a2 <_printf_float+0xb6>
 8007a88:	f04f 0a00 	mov.w	sl, #0
 8007a8c:	f104 0b1a 	add.w	fp, r4, #26
 8007a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a92:	425b      	negs	r3, r3
 8007a94:	4553      	cmp	r3, sl
 8007a96:	dc01      	bgt.n	8007a9c <_printf_float+0x2b0>
 8007a98:	464b      	mov	r3, r9
 8007a9a:	e793      	b.n	80079c4 <_printf_float+0x1d8>
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	465a      	mov	r2, fp
 8007aa0:	4631      	mov	r1, r6
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	47b8      	blx	r7
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	f43f aefb 	beq.w	80078a2 <_printf_float+0xb6>
 8007aac:	f10a 0a01 	add.w	sl, sl, #1
 8007ab0:	e7ee      	b.n	8007a90 <_printf_float+0x2a4>
 8007ab2:	bf00      	nop
 8007ab4:	7fefffff 	.word	0x7fefffff
 8007ab8:	0800b259 	.word	0x0800b259
 8007abc:	0800b25d 	.word	0x0800b25d
 8007ac0:	0800b261 	.word	0x0800b261
 8007ac4:	0800b265 	.word	0x0800b265
 8007ac8:	0800b269 	.word	0x0800b269
 8007acc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007ace:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007ad2:	4553      	cmp	r3, sl
 8007ad4:	bfa8      	it	ge
 8007ad6:	4653      	movge	r3, sl
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	4699      	mov	r9, r3
 8007adc:	dc36      	bgt.n	8007b4c <_printf_float+0x360>
 8007ade:	f04f 0b00 	mov.w	fp, #0
 8007ae2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ae6:	f104 021a 	add.w	r2, r4, #26
 8007aea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007aec:	9306      	str	r3, [sp, #24]
 8007aee:	eba3 0309 	sub.w	r3, r3, r9
 8007af2:	455b      	cmp	r3, fp
 8007af4:	dc31      	bgt.n	8007b5a <_printf_float+0x36e>
 8007af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af8:	459a      	cmp	sl, r3
 8007afa:	dc3a      	bgt.n	8007b72 <_printf_float+0x386>
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	07da      	lsls	r2, r3, #31
 8007b00:	d437      	bmi.n	8007b72 <_printf_float+0x386>
 8007b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b04:	ebaa 0903 	sub.w	r9, sl, r3
 8007b08:	9b06      	ldr	r3, [sp, #24]
 8007b0a:	ebaa 0303 	sub.w	r3, sl, r3
 8007b0e:	4599      	cmp	r9, r3
 8007b10:	bfa8      	it	ge
 8007b12:	4699      	movge	r9, r3
 8007b14:	f1b9 0f00 	cmp.w	r9, #0
 8007b18:	dc33      	bgt.n	8007b82 <_printf_float+0x396>
 8007b1a:	f04f 0800 	mov.w	r8, #0
 8007b1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b22:	f104 0b1a 	add.w	fp, r4, #26
 8007b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b28:	ebaa 0303 	sub.w	r3, sl, r3
 8007b2c:	eba3 0309 	sub.w	r3, r3, r9
 8007b30:	4543      	cmp	r3, r8
 8007b32:	f77f af79 	ble.w	8007a28 <_printf_float+0x23c>
 8007b36:	2301      	movs	r3, #1
 8007b38:	465a      	mov	r2, fp
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	47b8      	blx	r7
 8007b40:	3001      	adds	r0, #1
 8007b42:	f43f aeae 	beq.w	80078a2 <_printf_float+0xb6>
 8007b46:	f108 0801 	add.w	r8, r8, #1
 8007b4a:	e7ec      	b.n	8007b26 <_printf_float+0x33a>
 8007b4c:	4642      	mov	r2, r8
 8007b4e:	4631      	mov	r1, r6
 8007b50:	4628      	mov	r0, r5
 8007b52:	47b8      	blx	r7
 8007b54:	3001      	adds	r0, #1
 8007b56:	d1c2      	bne.n	8007ade <_printf_float+0x2f2>
 8007b58:	e6a3      	b.n	80078a2 <_printf_float+0xb6>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	4628      	mov	r0, r5
 8007b60:	9206      	str	r2, [sp, #24]
 8007b62:	47b8      	blx	r7
 8007b64:	3001      	adds	r0, #1
 8007b66:	f43f ae9c 	beq.w	80078a2 <_printf_float+0xb6>
 8007b6a:	9a06      	ldr	r2, [sp, #24]
 8007b6c:	f10b 0b01 	add.w	fp, fp, #1
 8007b70:	e7bb      	b.n	8007aea <_printf_float+0x2fe>
 8007b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b76:	4631      	mov	r1, r6
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b8      	blx	r7
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d1c0      	bne.n	8007b02 <_printf_float+0x316>
 8007b80:	e68f      	b.n	80078a2 <_printf_float+0xb6>
 8007b82:	9a06      	ldr	r2, [sp, #24]
 8007b84:	464b      	mov	r3, r9
 8007b86:	4442      	add	r2, r8
 8007b88:	4631      	mov	r1, r6
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	47b8      	blx	r7
 8007b8e:	3001      	adds	r0, #1
 8007b90:	d1c3      	bne.n	8007b1a <_printf_float+0x32e>
 8007b92:	e686      	b.n	80078a2 <_printf_float+0xb6>
 8007b94:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b98:	f1ba 0f01 	cmp.w	sl, #1
 8007b9c:	dc01      	bgt.n	8007ba2 <_printf_float+0x3b6>
 8007b9e:	07db      	lsls	r3, r3, #31
 8007ba0:	d536      	bpl.n	8007c10 <_printf_float+0x424>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	4642      	mov	r2, r8
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	4628      	mov	r0, r5
 8007baa:	47b8      	blx	r7
 8007bac:	3001      	adds	r0, #1
 8007bae:	f43f ae78 	beq.w	80078a2 <_printf_float+0xb6>
 8007bb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	4628      	mov	r0, r5
 8007bba:	47b8      	blx	r7
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	f43f ae70 	beq.w	80078a2 <_printf_float+0xb6>
 8007bc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bce:	f7f8 ff7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bd2:	b9c0      	cbnz	r0, 8007c06 <_printf_float+0x41a>
 8007bd4:	4653      	mov	r3, sl
 8007bd6:	f108 0201 	add.w	r2, r8, #1
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b8      	blx	r7
 8007be0:	3001      	adds	r0, #1
 8007be2:	d10c      	bne.n	8007bfe <_printf_float+0x412>
 8007be4:	e65d      	b.n	80078a2 <_printf_float+0xb6>
 8007be6:	2301      	movs	r3, #1
 8007be8:	465a      	mov	r2, fp
 8007bea:	4631      	mov	r1, r6
 8007bec:	4628      	mov	r0, r5
 8007bee:	47b8      	blx	r7
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	f43f ae56 	beq.w	80078a2 <_printf_float+0xb6>
 8007bf6:	f108 0801 	add.w	r8, r8, #1
 8007bfa:	45d0      	cmp	r8, sl
 8007bfc:	dbf3      	blt.n	8007be6 <_printf_float+0x3fa>
 8007bfe:	464b      	mov	r3, r9
 8007c00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c04:	e6df      	b.n	80079c6 <_printf_float+0x1da>
 8007c06:	f04f 0800 	mov.w	r8, #0
 8007c0a:	f104 0b1a 	add.w	fp, r4, #26
 8007c0e:	e7f4      	b.n	8007bfa <_printf_float+0x40e>
 8007c10:	2301      	movs	r3, #1
 8007c12:	4642      	mov	r2, r8
 8007c14:	e7e1      	b.n	8007bda <_printf_float+0x3ee>
 8007c16:	2301      	movs	r3, #1
 8007c18:	464a      	mov	r2, r9
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	47b8      	blx	r7
 8007c20:	3001      	adds	r0, #1
 8007c22:	f43f ae3e 	beq.w	80078a2 <_printf_float+0xb6>
 8007c26:	f108 0801 	add.w	r8, r8, #1
 8007c2a:	68e3      	ldr	r3, [r4, #12]
 8007c2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c2e:	1a5b      	subs	r3, r3, r1
 8007c30:	4543      	cmp	r3, r8
 8007c32:	dcf0      	bgt.n	8007c16 <_printf_float+0x42a>
 8007c34:	e6fc      	b.n	8007a30 <_printf_float+0x244>
 8007c36:	f04f 0800 	mov.w	r8, #0
 8007c3a:	f104 0919 	add.w	r9, r4, #25
 8007c3e:	e7f4      	b.n	8007c2a <_printf_float+0x43e>

08007c40 <_printf_common>:
 8007c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c44:	4616      	mov	r6, r2
 8007c46:	4698      	mov	r8, r3
 8007c48:	688a      	ldr	r2, [r1, #8]
 8007c4a:	690b      	ldr	r3, [r1, #16]
 8007c4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c50:	4293      	cmp	r3, r2
 8007c52:	bfb8      	it	lt
 8007c54:	4613      	movlt	r3, r2
 8007c56:	6033      	str	r3, [r6, #0]
 8007c58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c5c:	4607      	mov	r7, r0
 8007c5e:	460c      	mov	r4, r1
 8007c60:	b10a      	cbz	r2, 8007c66 <_printf_common+0x26>
 8007c62:	3301      	adds	r3, #1
 8007c64:	6033      	str	r3, [r6, #0]
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	0699      	lsls	r1, r3, #26
 8007c6a:	bf42      	ittt	mi
 8007c6c:	6833      	ldrmi	r3, [r6, #0]
 8007c6e:	3302      	addmi	r3, #2
 8007c70:	6033      	strmi	r3, [r6, #0]
 8007c72:	6825      	ldr	r5, [r4, #0]
 8007c74:	f015 0506 	ands.w	r5, r5, #6
 8007c78:	d106      	bne.n	8007c88 <_printf_common+0x48>
 8007c7a:	f104 0a19 	add.w	sl, r4, #25
 8007c7e:	68e3      	ldr	r3, [r4, #12]
 8007c80:	6832      	ldr	r2, [r6, #0]
 8007c82:	1a9b      	subs	r3, r3, r2
 8007c84:	42ab      	cmp	r3, r5
 8007c86:	dc26      	bgt.n	8007cd6 <_printf_common+0x96>
 8007c88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c8c:	6822      	ldr	r2, [r4, #0]
 8007c8e:	3b00      	subs	r3, #0
 8007c90:	bf18      	it	ne
 8007c92:	2301      	movne	r3, #1
 8007c94:	0692      	lsls	r2, r2, #26
 8007c96:	d42b      	bmi.n	8007cf0 <_printf_common+0xb0>
 8007c98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c9c:	4641      	mov	r1, r8
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	47c8      	blx	r9
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	d01e      	beq.n	8007ce4 <_printf_common+0xa4>
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	6922      	ldr	r2, [r4, #16]
 8007caa:	f003 0306 	and.w	r3, r3, #6
 8007cae:	2b04      	cmp	r3, #4
 8007cb0:	bf02      	ittt	eq
 8007cb2:	68e5      	ldreq	r5, [r4, #12]
 8007cb4:	6833      	ldreq	r3, [r6, #0]
 8007cb6:	1aed      	subeq	r5, r5, r3
 8007cb8:	68a3      	ldr	r3, [r4, #8]
 8007cba:	bf0c      	ite	eq
 8007cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cc0:	2500      	movne	r5, #0
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	bfc4      	itt	gt
 8007cc6:	1a9b      	subgt	r3, r3, r2
 8007cc8:	18ed      	addgt	r5, r5, r3
 8007cca:	2600      	movs	r6, #0
 8007ccc:	341a      	adds	r4, #26
 8007cce:	42b5      	cmp	r5, r6
 8007cd0:	d11a      	bne.n	8007d08 <_printf_common+0xc8>
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	e008      	b.n	8007ce8 <_printf_common+0xa8>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	4652      	mov	r2, sl
 8007cda:	4641      	mov	r1, r8
 8007cdc:	4638      	mov	r0, r7
 8007cde:	47c8      	blx	r9
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d103      	bne.n	8007cec <_printf_common+0xac>
 8007ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cec:	3501      	adds	r5, #1
 8007cee:	e7c6      	b.n	8007c7e <_printf_common+0x3e>
 8007cf0:	18e1      	adds	r1, r4, r3
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	2030      	movs	r0, #48	@ 0x30
 8007cf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007cfa:	4422      	add	r2, r4
 8007cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d04:	3302      	adds	r3, #2
 8007d06:	e7c7      	b.n	8007c98 <_printf_common+0x58>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	4622      	mov	r2, r4
 8007d0c:	4641      	mov	r1, r8
 8007d0e:	4638      	mov	r0, r7
 8007d10:	47c8      	blx	r9
 8007d12:	3001      	adds	r0, #1
 8007d14:	d0e6      	beq.n	8007ce4 <_printf_common+0xa4>
 8007d16:	3601      	adds	r6, #1
 8007d18:	e7d9      	b.n	8007cce <_printf_common+0x8e>
	...

08007d1c <_printf_i>:
 8007d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d20:	7e0f      	ldrb	r7, [r1, #24]
 8007d22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d24:	2f78      	cmp	r7, #120	@ 0x78
 8007d26:	4691      	mov	r9, r2
 8007d28:	4680      	mov	r8, r0
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	469a      	mov	sl, r3
 8007d2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d32:	d807      	bhi.n	8007d44 <_printf_i+0x28>
 8007d34:	2f62      	cmp	r7, #98	@ 0x62
 8007d36:	d80a      	bhi.n	8007d4e <_printf_i+0x32>
 8007d38:	2f00      	cmp	r7, #0
 8007d3a:	f000 80d2 	beq.w	8007ee2 <_printf_i+0x1c6>
 8007d3e:	2f58      	cmp	r7, #88	@ 0x58
 8007d40:	f000 80b9 	beq.w	8007eb6 <_printf_i+0x19a>
 8007d44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d4c:	e03a      	b.n	8007dc4 <_printf_i+0xa8>
 8007d4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d52:	2b15      	cmp	r3, #21
 8007d54:	d8f6      	bhi.n	8007d44 <_printf_i+0x28>
 8007d56:	a101      	add	r1, pc, #4	@ (adr r1, 8007d5c <_printf_i+0x40>)
 8007d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d5c:	08007db5 	.word	0x08007db5
 8007d60:	08007dc9 	.word	0x08007dc9
 8007d64:	08007d45 	.word	0x08007d45
 8007d68:	08007d45 	.word	0x08007d45
 8007d6c:	08007d45 	.word	0x08007d45
 8007d70:	08007d45 	.word	0x08007d45
 8007d74:	08007dc9 	.word	0x08007dc9
 8007d78:	08007d45 	.word	0x08007d45
 8007d7c:	08007d45 	.word	0x08007d45
 8007d80:	08007d45 	.word	0x08007d45
 8007d84:	08007d45 	.word	0x08007d45
 8007d88:	08007ec9 	.word	0x08007ec9
 8007d8c:	08007df3 	.word	0x08007df3
 8007d90:	08007e83 	.word	0x08007e83
 8007d94:	08007d45 	.word	0x08007d45
 8007d98:	08007d45 	.word	0x08007d45
 8007d9c:	08007eeb 	.word	0x08007eeb
 8007da0:	08007d45 	.word	0x08007d45
 8007da4:	08007df3 	.word	0x08007df3
 8007da8:	08007d45 	.word	0x08007d45
 8007dac:	08007d45 	.word	0x08007d45
 8007db0:	08007e8b 	.word	0x08007e8b
 8007db4:	6833      	ldr	r3, [r6, #0]
 8007db6:	1d1a      	adds	r2, r3, #4
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	6032      	str	r2, [r6, #0]
 8007dbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e09d      	b.n	8007f04 <_printf_i+0x1e8>
 8007dc8:	6833      	ldr	r3, [r6, #0]
 8007dca:	6820      	ldr	r0, [r4, #0]
 8007dcc:	1d19      	adds	r1, r3, #4
 8007dce:	6031      	str	r1, [r6, #0]
 8007dd0:	0606      	lsls	r6, r0, #24
 8007dd2:	d501      	bpl.n	8007dd8 <_printf_i+0xbc>
 8007dd4:	681d      	ldr	r5, [r3, #0]
 8007dd6:	e003      	b.n	8007de0 <_printf_i+0xc4>
 8007dd8:	0645      	lsls	r5, r0, #25
 8007dda:	d5fb      	bpl.n	8007dd4 <_printf_i+0xb8>
 8007ddc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007de0:	2d00      	cmp	r5, #0
 8007de2:	da03      	bge.n	8007dec <_printf_i+0xd0>
 8007de4:	232d      	movs	r3, #45	@ 0x2d
 8007de6:	426d      	negs	r5, r5
 8007de8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dec:	4859      	ldr	r0, [pc, #356]	@ (8007f54 <_printf_i+0x238>)
 8007dee:	230a      	movs	r3, #10
 8007df0:	e011      	b.n	8007e16 <_printf_i+0xfa>
 8007df2:	6821      	ldr	r1, [r4, #0]
 8007df4:	6833      	ldr	r3, [r6, #0]
 8007df6:	0608      	lsls	r0, r1, #24
 8007df8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007dfc:	d402      	bmi.n	8007e04 <_printf_i+0xe8>
 8007dfe:	0649      	lsls	r1, r1, #25
 8007e00:	bf48      	it	mi
 8007e02:	b2ad      	uxthmi	r5, r5
 8007e04:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e06:	4853      	ldr	r0, [pc, #332]	@ (8007f54 <_printf_i+0x238>)
 8007e08:	6033      	str	r3, [r6, #0]
 8007e0a:	bf14      	ite	ne
 8007e0c:	230a      	movne	r3, #10
 8007e0e:	2308      	moveq	r3, #8
 8007e10:	2100      	movs	r1, #0
 8007e12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e16:	6866      	ldr	r6, [r4, #4]
 8007e18:	60a6      	str	r6, [r4, #8]
 8007e1a:	2e00      	cmp	r6, #0
 8007e1c:	bfa2      	ittt	ge
 8007e1e:	6821      	ldrge	r1, [r4, #0]
 8007e20:	f021 0104 	bicge.w	r1, r1, #4
 8007e24:	6021      	strge	r1, [r4, #0]
 8007e26:	b90d      	cbnz	r5, 8007e2c <_printf_i+0x110>
 8007e28:	2e00      	cmp	r6, #0
 8007e2a:	d04b      	beq.n	8007ec4 <_printf_i+0x1a8>
 8007e2c:	4616      	mov	r6, r2
 8007e2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e32:	fb03 5711 	mls	r7, r3, r1, r5
 8007e36:	5dc7      	ldrb	r7, [r0, r7]
 8007e38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e3c:	462f      	mov	r7, r5
 8007e3e:	42bb      	cmp	r3, r7
 8007e40:	460d      	mov	r5, r1
 8007e42:	d9f4      	bls.n	8007e2e <_printf_i+0x112>
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d10b      	bne.n	8007e60 <_printf_i+0x144>
 8007e48:	6823      	ldr	r3, [r4, #0]
 8007e4a:	07df      	lsls	r7, r3, #31
 8007e4c:	d508      	bpl.n	8007e60 <_printf_i+0x144>
 8007e4e:	6923      	ldr	r3, [r4, #16]
 8007e50:	6861      	ldr	r1, [r4, #4]
 8007e52:	4299      	cmp	r1, r3
 8007e54:	bfde      	ittt	le
 8007e56:	2330      	movle	r3, #48	@ 0x30
 8007e58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e60:	1b92      	subs	r2, r2, r6
 8007e62:	6122      	str	r2, [r4, #16]
 8007e64:	f8cd a000 	str.w	sl, [sp]
 8007e68:	464b      	mov	r3, r9
 8007e6a:	aa03      	add	r2, sp, #12
 8007e6c:	4621      	mov	r1, r4
 8007e6e:	4640      	mov	r0, r8
 8007e70:	f7ff fee6 	bl	8007c40 <_printf_common>
 8007e74:	3001      	adds	r0, #1
 8007e76:	d14a      	bne.n	8007f0e <_printf_i+0x1f2>
 8007e78:	f04f 30ff 	mov.w	r0, #4294967295
 8007e7c:	b004      	add	sp, #16
 8007e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	f043 0320 	orr.w	r3, r3, #32
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	4833      	ldr	r0, [pc, #204]	@ (8007f58 <_printf_i+0x23c>)
 8007e8c:	2778      	movs	r7, #120	@ 0x78
 8007e8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e92:	6823      	ldr	r3, [r4, #0]
 8007e94:	6831      	ldr	r1, [r6, #0]
 8007e96:	061f      	lsls	r7, r3, #24
 8007e98:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e9c:	d402      	bmi.n	8007ea4 <_printf_i+0x188>
 8007e9e:	065f      	lsls	r7, r3, #25
 8007ea0:	bf48      	it	mi
 8007ea2:	b2ad      	uxthmi	r5, r5
 8007ea4:	6031      	str	r1, [r6, #0]
 8007ea6:	07d9      	lsls	r1, r3, #31
 8007ea8:	bf44      	itt	mi
 8007eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8007eae:	6023      	strmi	r3, [r4, #0]
 8007eb0:	b11d      	cbz	r5, 8007eba <_printf_i+0x19e>
 8007eb2:	2310      	movs	r3, #16
 8007eb4:	e7ac      	b.n	8007e10 <_printf_i+0xf4>
 8007eb6:	4827      	ldr	r0, [pc, #156]	@ (8007f54 <_printf_i+0x238>)
 8007eb8:	e7e9      	b.n	8007e8e <_printf_i+0x172>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	f023 0320 	bic.w	r3, r3, #32
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	e7f6      	b.n	8007eb2 <_printf_i+0x196>
 8007ec4:	4616      	mov	r6, r2
 8007ec6:	e7bd      	b.n	8007e44 <_printf_i+0x128>
 8007ec8:	6833      	ldr	r3, [r6, #0]
 8007eca:	6825      	ldr	r5, [r4, #0]
 8007ecc:	6961      	ldr	r1, [r4, #20]
 8007ece:	1d18      	adds	r0, r3, #4
 8007ed0:	6030      	str	r0, [r6, #0]
 8007ed2:	062e      	lsls	r6, r5, #24
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	d501      	bpl.n	8007edc <_printf_i+0x1c0>
 8007ed8:	6019      	str	r1, [r3, #0]
 8007eda:	e002      	b.n	8007ee2 <_printf_i+0x1c6>
 8007edc:	0668      	lsls	r0, r5, #25
 8007ede:	d5fb      	bpl.n	8007ed8 <_printf_i+0x1bc>
 8007ee0:	8019      	strh	r1, [r3, #0]
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	6123      	str	r3, [r4, #16]
 8007ee6:	4616      	mov	r6, r2
 8007ee8:	e7bc      	b.n	8007e64 <_printf_i+0x148>
 8007eea:	6833      	ldr	r3, [r6, #0]
 8007eec:	1d1a      	adds	r2, r3, #4
 8007eee:	6032      	str	r2, [r6, #0]
 8007ef0:	681e      	ldr	r6, [r3, #0]
 8007ef2:	6862      	ldr	r2, [r4, #4]
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	4630      	mov	r0, r6
 8007ef8:	f7f8 f96a 	bl	80001d0 <memchr>
 8007efc:	b108      	cbz	r0, 8007f02 <_printf_i+0x1e6>
 8007efe:	1b80      	subs	r0, r0, r6
 8007f00:	6060      	str	r0, [r4, #4]
 8007f02:	6863      	ldr	r3, [r4, #4]
 8007f04:	6123      	str	r3, [r4, #16]
 8007f06:	2300      	movs	r3, #0
 8007f08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f0c:	e7aa      	b.n	8007e64 <_printf_i+0x148>
 8007f0e:	6923      	ldr	r3, [r4, #16]
 8007f10:	4632      	mov	r2, r6
 8007f12:	4649      	mov	r1, r9
 8007f14:	4640      	mov	r0, r8
 8007f16:	47d0      	blx	sl
 8007f18:	3001      	adds	r0, #1
 8007f1a:	d0ad      	beq.n	8007e78 <_printf_i+0x15c>
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	079b      	lsls	r3, r3, #30
 8007f20:	d413      	bmi.n	8007f4a <_printf_i+0x22e>
 8007f22:	68e0      	ldr	r0, [r4, #12]
 8007f24:	9b03      	ldr	r3, [sp, #12]
 8007f26:	4298      	cmp	r0, r3
 8007f28:	bfb8      	it	lt
 8007f2a:	4618      	movlt	r0, r3
 8007f2c:	e7a6      	b.n	8007e7c <_printf_i+0x160>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	4632      	mov	r2, r6
 8007f32:	4649      	mov	r1, r9
 8007f34:	4640      	mov	r0, r8
 8007f36:	47d0      	blx	sl
 8007f38:	3001      	adds	r0, #1
 8007f3a:	d09d      	beq.n	8007e78 <_printf_i+0x15c>
 8007f3c:	3501      	adds	r5, #1
 8007f3e:	68e3      	ldr	r3, [r4, #12]
 8007f40:	9903      	ldr	r1, [sp, #12]
 8007f42:	1a5b      	subs	r3, r3, r1
 8007f44:	42ab      	cmp	r3, r5
 8007f46:	dcf2      	bgt.n	8007f2e <_printf_i+0x212>
 8007f48:	e7eb      	b.n	8007f22 <_printf_i+0x206>
 8007f4a:	2500      	movs	r5, #0
 8007f4c:	f104 0619 	add.w	r6, r4, #25
 8007f50:	e7f5      	b.n	8007f3e <_printf_i+0x222>
 8007f52:	bf00      	nop
 8007f54:	0800b26b 	.word	0x0800b26b
 8007f58:	0800b27c 	.word	0x0800b27c

08007f5c <std>:
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	b510      	push	{r4, lr}
 8007f60:	4604      	mov	r4, r0
 8007f62:	e9c0 3300 	strd	r3, r3, [r0]
 8007f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f6a:	6083      	str	r3, [r0, #8]
 8007f6c:	8181      	strh	r1, [r0, #12]
 8007f6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f70:	81c2      	strh	r2, [r0, #14]
 8007f72:	6183      	str	r3, [r0, #24]
 8007f74:	4619      	mov	r1, r3
 8007f76:	2208      	movs	r2, #8
 8007f78:	305c      	adds	r0, #92	@ 0x5c
 8007f7a:	f000 fa2d 	bl	80083d8 <memset>
 8007f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb4 <std+0x58>)
 8007f80:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f82:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb8 <std+0x5c>)
 8007f84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f86:	4b0d      	ldr	r3, [pc, #52]	@ (8007fbc <std+0x60>)
 8007f88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc0 <std+0x64>)
 8007f8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc4 <std+0x68>)
 8007f90:	6224      	str	r4, [r4, #32]
 8007f92:	429c      	cmp	r4, r3
 8007f94:	d006      	beq.n	8007fa4 <std+0x48>
 8007f96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f9a:	4294      	cmp	r4, r2
 8007f9c:	d002      	beq.n	8007fa4 <std+0x48>
 8007f9e:	33d0      	adds	r3, #208	@ 0xd0
 8007fa0:	429c      	cmp	r4, r3
 8007fa2:	d105      	bne.n	8007fb0 <std+0x54>
 8007fa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fac:	f000 ba90 	b.w	80084d0 <__retarget_lock_init_recursive>
 8007fb0:	bd10      	pop	{r4, pc}
 8007fb2:	bf00      	nop
 8007fb4:	08008229 	.word	0x08008229
 8007fb8:	0800824b 	.word	0x0800824b
 8007fbc:	08008283 	.word	0x08008283
 8007fc0:	080082a7 	.word	0x080082a7
 8007fc4:	2000067c 	.word	0x2000067c

08007fc8 <stdio_exit_handler>:
 8007fc8:	4a02      	ldr	r2, [pc, #8]	@ (8007fd4 <stdio_exit_handler+0xc>)
 8007fca:	4903      	ldr	r1, [pc, #12]	@ (8007fd8 <stdio_exit_handler+0x10>)
 8007fcc:	4803      	ldr	r0, [pc, #12]	@ (8007fdc <stdio_exit_handler+0x14>)
 8007fce:	f000 b869 	b.w	80080a4 <_fwalk_sglue>
 8007fd2:	bf00      	nop
 8007fd4:	20000018 	.word	0x20000018
 8007fd8:	0800a0b1 	.word	0x0800a0b1
 8007fdc:	20000028 	.word	0x20000028

08007fe0 <cleanup_stdio>:
 8007fe0:	6841      	ldr	r1, [r0, #4]
 8007fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8008014 <cleanup_stdio+0x34>)
 8007fe4:	4299      	cmp	r1, r3
 8007fe6:	b510      	push	{r4, lr}
 8007fe8:	4604      	mov	r4, r0
 8007fea:	d001      	beq.n	8007ff0 <cleanup_stdio+0x10>
 8007fec:	f002 f860 	bl	800a0b0 <_fflush_r>
 8007ff0:	68a1      	ldr	r1, [r4, #8]
 8007ff2:	4b09      	ldr	r3, [pc, #36]	@ (8008018 <cleanup_stdio+0x38>)
 8007ff4:	4299      	cmp	r1, r3
 8007ff6:	d002      	beq.n	8007ffe <cleanup_stdio+0x1e>
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f002 f859 	bl	800a0b0 <_fflush_r>
 8007ffe:	68e1      	ldr	r1, [r4, #12]
 8008000:	4b06      	ldr	r3, [pc, #24]	@ (800801c <cleanup_stdio+0x3c>)
 8008002:	4299      	cmp	r1, r3
 8008004:	d004      	beq.n	8008010 <cleanup_stdio+0x30>
 8008006:	4620      	mov	r0, r4
 8008008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800800c:	f002 b850 	b.w	800a0b0 <_fflush_r>
 8008010:	bd10      	pop	{r4, pc}
 8008012:	bf00      	nop
 8008014:	2000067c 	.word	0x2000067c
 8008018:	200006e4 	.word	0x200006e4
 800801c:	2000074c 	.word	0x2000074c

08008020 <global_stdio_init.part.0>:
 8008020:	b510      	push	{r4, lr}
 8008022:	4b0b      	ldr	r3, [pc, #44]	@ (8008050 <global_stdio_init.part.0+0x30>)
 8008024:	4c0b      	ldr	r4, [pc, #44]	@ (8008054 <global_stdio_init.part.0+0x34>)
 8008026:	4a0c      	ldr	r2, [pc, #48]	@ (8008058 <global_stdio_init.part.0+0x38>)
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	4620      	mov	r0, r4
 800802c:	2200      	movs	r2, #0
 800802e:	2104      	movs	r1, #4
 8008030:	f7ff ff94 	bl	8007f5c <std>
 8008034:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008038:	2201      	movs	r2, #1
 800803a:	2109      	movs	r1, #9
 800803c:	f7ff ff8e 	bl	8007f5c <std>
 8008040:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008044:	2202      	movs	r2, #2
 8008046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800804a:	2112      	movs	r1, #18
 800804c:	f7ff bf86 	b.w	8007f5c <std>
 8008050:	200007b4 	.word	0x200007b4
 8008054:	2000067c 	.word	0x2000067c
 8008058:	08007fc9 	.word	0x08007fc9

0800805c <__sfp_lock_acquire>:
 800805c:	4801      	ldr	r0, [pc, #4]	@ (8008064 <__sfp_lock_acquire+0x8>)
 800805e:	f000 ba38 	b.w	80084d2 <__retarget_lock_acquire_recursive>
 8008062:	bf00      	nop
 8008064:	200007bd 	.word	0x200007bd

08008068 <__sfp_lock_release>:
 8008068:	4801      	ldr	r0, [pc, #4]	@ (8008070 <__sfp_lock_release+0x8>)
 800806a:	f000 ba33 	b.w	80084d4 <__retarget_lock_release_recursive>
 800806e:	bf00      	nop
 8008070:	200007bd 	.word	0x200007bd

08008074 <__sinit>:
 8008074:	b510      	push	{r4, lr}
 8008076:	4604      	mov	r4, r0
 8008078:	f7ff fff0 	bl	800805c <__sfp_lock_acquire>
 800807c:	6a23      	ldr	r3, [r4, #32]
 800807e:	b11b      	cbz	r3, 8008088 <__sinit+0x14>
 8008080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008084:	f7ff bff0 	b.w	8008068 <__sfp_lock_release>
 8008088:	4b04      	ldr	r3, [pc, #16]	@ (800809c <__sinit+0x28>)
 800808a:	6223      	str	r3, [r4, #32]
 800808c:	4b04      	ldr	r3, [pc, #16]	@ (80080a0 <__sinit+0x2c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1f5      	bne.n	8008080 <__sinit+0xc>
 8008094:	f7ff ffc4 	bl	8008020 <global_stdio_init.part.0>
 8008098:	e7f2      	b.n	8008080 <__sinit+0xc>
 800809a:	bf00      	nop
 800809c:	08007fe1 	.word	0x08007fe1
 80080a0:	200007b4 	.word	0x200007b4

080080a4 <_fwalk_sglue>:
 80080a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080a8:	4607      	mov	r7, r0
 80080aa:	4688      	mov	r8, r1
 80080ac:	4614      	mov	r4, r2
 80080ae:	2600      	movs	r6, #0
 80080b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080b4:	f1b9 0901 	subs.w	r9, r9, #1
 80080b8:	d505      	bpl.n	80080c6 <_fwalk_sglue+0x22>
 80080ba:	6824      	ldr	r4, [r4, #0]
 80080bc:	2c00      	cmp	r4, #0
 80080be:	d1f7      	bne.n	80080b0 <_fwalk_sglue+0xc>
 80080c0:	4630      	mov	r0, r6
 80080c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080c6:	89ab      	ldrh	r3, [r5, #12]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d907      	bls.n	80080dc <_fwalk_sglue+0x38>
 80080cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080d0:	3301      	adds	r3, #1
 80080d2:	d003      	beq.n	80080dc <_fwalk_sglue+0x38>
 80080d4:	4629      	mov	r1, r5
 80080d6:	4638      	mov	r0, r7
 80080d8:	47c0      	blx	r8
 80080da:	4306      	orrs	r6, r0
 80080dc:	3568      	adds	r5, #104	@ 0x68
 80080de:	e7e9      	b.n	80080b4 <_fwalk_sglue+0x10>

080080e0 <iprintf>:
 80080e0:	b40f      	push	{r0, r1, r2, r3}
 80080e2:	b507      	push	{r0, r1, r2, lr}
 80080e4:	4906      	ldr	r1, [pc, #24]	@ (8008100 <iprintf+0x20>)
 80080e6:	ab04      	add	r3, sp, #16
 80080e8:	6808      	ldr	r0, [r1, #0]
 80080ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ee:	6881      	ldr	r1, [r0, #8]
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	f001 fe41 	bl	8009d78 <_vfiprintf_r>
 80080f6:	b003      	add	sp, #12
 80080f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080fc:	b004      	add	sp, #16
 80080fe:	4770      	bx	lr
 8008100:	20000024 	.word	0x20000024

08008104 <_puts_r>:
 8008104:	6a03      	ldr	r3, [r0, #32]
 8008106:	b570      	push	{r4, r5, r6, lr}
 8008108:	6884      	ldr	r4, [r0, #8]
 800810a:	4605      	mov	r5, r0
 800810c:	460e      	mov	r6, r1
 800810e:	b90b      	cbnz	r3, 8008114 <_puts_r+0x10>
 8008110:	f7ff ffb0 	bl	8008074 <__sinit>
 8008114:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008116:	07db      	lsls	r3, r3, #31
 8008118:	d405      	bmi.n	8008126 <_puts_r+0x22>
 800811a:	89a3      	ldrh	r3, [r4, #12]
 800811c:	0598      	lsls	r0, r3, #22
 800811e:	d402      	bmi.n	8008126 <_puts_r+0x22>
 8008120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008122:	f000 f9d6 	bl	80084d2 <__retarget_lock_acquire_recursive>
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	0719      	lsls	r1, r3, #28
 800812a:	d502      	bpl.n	8008132 <_puts_r+0x2e>
 800812c:	6923      	ldr	r3, [r4, #16]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d135      	bne.n	800819e <_puts_r+0x9a>
 8008132:	4621      	mov	r1, r4
 8008134:	4628      	mov	r0, r5
 8008136:	f000 f8f9 	bl	800832c <__swsetup_r>
 800813a:	b380      	cbz	r0, 800819e <_puts_r+0x9a>
 800813c:	f04f 35ff 	mov.w	r5, #4294967295
 8008140:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008142:	07da      	lsls	r2, r3, #31
 8008144:	d405      	bmi.n	8008152 <_puts_r+0x4e>
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	059b      	lsls	r3, r3, #22
 800814a:	d402      	bmi.n	8008152 <_puts_r+0x4e>
 800814c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800814e:	f000 f9c1 	bl	80084d4 <__retarget_lock_release_recursive>
 8008152:	4628      	mov	r0, r5
 8008154:	bd70      	pop	{r4, r5, r6, pc}
 8008156:	2b00      	cmp	r3, #0
 8008158:	da04      	bge.n	8008164 <_puts_r+0x60>
 800815a:	69a2      	ldr	r2, [r4, #24]
 800815c:	429a      	cmp	r2, r3
 800815e:	dc17      	bgt.n	8008190 <_puts_r+0x8c>
 8008160:	290a      	cmp	r1, #10
 8008162:	d015      	beq.n	8008190 <_puts_r+0x8c>
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	1c5a      	adds	r2, r3, #1
 8008168:	6022      	str	r2, [r4, #0]
 800816a:	7019      	strb	r1, [r3, #0]
 800816c:	68a3      	ldr	r3, [r4, #8]
 800816e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008172:	3b01      	subs	r3, #1
 8008174:	60a3      	str	r3, [r4, #8]
 8008176:	2900      	cmp	r1, #0
 8008178:	d1ed      	bne.n	8008156 <_puts_r+0x52>
 800817a:	2b00      	cmp	r3, #0
 800817c:	da11      	bge.n	80081a2 <_puts_r+0x9e>
 800817e:	4622      	mov	r2, r4
 8008180:	210a      	movs	r1, #10
 8008182:	4628      	mov	r0, r5
 8008184:	f000 f893 	bl	80082ae <__swbuf_r>
 8008188:	3001      	adds	r0, #1
 800818a:	d0d7      	beq.n	800813c <_puts_r+0x38>
 800818c:	250a      	movs	r5, #10
 800818e:	e7d7      	b.n	8008140 <_puts_r+0x3c>
 8008190:	4622      	mov	r2, r4
 8008192:	4628      	mov	r0, r5
 8008194:	f000 f88b 	bl	80082ae <__swbuf_r>
 8008198:	3001      	adds	r0, #1
 800819a:	d1e7      	bne.n	800816c <_puts_r+0x68>
 800819c:	e7ce      	b.n	800813c <_puts_r+0x38>
 800819e:	3e01      	subs	r6, #1
 80081a0:	e7e4      	b.n	800816c <_puts_r+0x68>
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	1c5a      	adds	r2, r3, #1
 80081a6:	6022      	str	r2, [r4, #0]
 80081a8:	220a      	movs	r2, #10
 80081aa:	701a      	strb	r2, [r3, #0]
 80081ac:	e7ee      	b.n	800818c <_puts_r+0x88>
	...

080081b0 <puts>:
 80081b0:	4b02      	ldr	r3, [pc, #8]	@ (80081bc <puts+0xc>)
 80081b2:	4601      	mov	r1, r0
 80081b4:	6818      	ldr	r0, [r3, #0]
 80081b6:	f7ff bfa5 	b.w	8008104 <_puts_r>
 80081ba:	bf00      	nop
 80081bc:	20000024 	.word	0x20000024

080081c0 <sniprintf>:
 80081c0:	b40c      	push	{r2, r3}
 80081c2:	b530      	push	{r4, r5, lr}
 80081c4:	4b17      	ldr	r3, [pc, #92]	@ (8008224 <sniprintf+0x64>)
 80081c6:	1e0c      	subs	r4, r1, #0
 80081c8:	681d      	ldr	r5, [r3, #0]
 80081ca:	b09d      	sub	sp, #116	@ 0x74
 80081cc:	da08      	bge.n	80081e0 <sniprintf+0x20>
 80081ce:	238b      	movs	r3, #139	@ 0x8b
 80081d0:	602b      	str	r3, [r5, #0]
 80081d2:	f04f 30ff 	mov.w	r0, #4294967295
 80081d6:	b01d      	add	sp, #116	@ 0x74
 80081d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081dc:	b002      	add	sp, #8
 80081de:	4770      	bx	lr
 80081e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80081e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80081e8:	bf14      	ite	ne
 80081ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80081ee:	4623      	moveq	r3, r4
 80081f0:	9304      	str	r3, [sp, #16]
 80081f2:	9307      	str	r3, [sp, #28]
 80081f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80081f8:	9002      	str	r0, [sp, #8]
 80081fa:	9006      	str	r0, [sp, #24]
 80081fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008200:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008202:	ab21      	add	r3, sp, #132	@ 0x84
 8008204:	a902      	add	r1, sp, #8
 8008206:	4628      	mov	r0, r5
 8008208:	9301      	str	r3, [sp, #4]
 800820a:	f001 fc8f 	bl	8009b2c <_svfiprintf_r>
 800820e:	1c43      	adds	r3, r0, #1
 8008210:	bfbc      	itt	lt
 8008212:	238b      	movlt	r3, #139	@ 0x8b
 8008214:	602b      	strlt	r3, [r5, #0]
 8008216:	2c00      	cmp	r4, #0
 8008218:	d0dd      	beq.n	80081d6 <sniprintf+0x16>
 800821a:	9b02      	ldr	r3, [sp, #8]
 800821c:	2200      	movs	r2, #0
 800821e:	701a      	strb	r2, [r3, #0]
 8008220:	e7d9      	b.n	80081d6 <sniprintf+0x16>
 8008222:	bf00      	nop
 8008224:	20000024 	.word	0x20000024

08008228 <__sread>:
 8008228:	b510      	push	{r4, lr}
 800822a:	460c      	mov	r4, r1
 800822c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008230:	f000 f900 	bl	8008434 <_read_r>
 8008234:	2800      	cmp	r0, #0
 8008236:	bfab      	itete	ge
 8008238:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800823a:	89a3      	ldrhlt	r3, [r4, #12]
 800823c:	181b      	addge	r3, r3, r0
 800823e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008242:	bfac      	ite	ge
 8008244:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008246:	81a3      	strhlt	r3, [r4, #12]
 8008248:	bd10      	pop	{r4, pc}

0800824a <__swrite>:
 800824a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800824e:	461f      	mov	r7, r3
 8008250:	898b      	ldrh	r3, [r1, #12]
 8008252:	05db      	lsls	r3, r3, #23
 8008254:	4605      	mov	r5, r0
 8008256:	460c      	mov	r4, r1
 8008258:	4616      	mov	r6, r2
 800825a:	d505      	bpl.n	8008268 <__swrite+0x1e>
 800825c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008260:	2302      	movs	r3, #2
 8008262:	2200      	movs	r2, #0
 8008264:	f000 f8d4 	bl	8008410 <_lseek_r>
 8008268:	89a3      	ldrh	r3, [r4, #12]
 800826a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800826e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008272:	81a3      	strh	r3, [r4, #12]
 8008274:	4632      	mov	r2, r6
 8008276:	463b      	mov	r3, r7
 8008278:	4628      	mov	r0, r5
 800827a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800827e:	f000 b8eb 	b.w	8008458 <_write_r>

08008282 <__sseek>:
 8008282:	b510      	push	{r4, lr}
 8008284:	460c      	mov	r4, r1
 8008286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800828a:	f000 f8c1 	bl	8008410 <_lseek_r>
 800828e:	1c43      	adds	r3, r0, #1
 8008290:	89a3      	ldrh	r3, [r4, #12]
 8008292:	bf15      	itete	ne
 8008294:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008296:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800829a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800829e:	81a3      	strheq	r3, [r4, #12]
 80082a0:	bf18      	it	ne
 80082a2:	81a3      	strhne	r3, [r4, #12]
 80082a4:	bd10      	pop	{r4, pc}

080082a6 <__sclose>:
 80082a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082aa:	f000 b8a1 	b.w	80083f0 <_close_r>

080082ae <__swbuf_r>:
 80082ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b0:	460e      	mov	r6, r1
 80082b2:	4614      	mov	r4, r2
 80082b4:	4605      	mov	r5, r0
 80082b6:	b118      	cbz	r0, 80082c0 <__swbuf_r+0x12>
 80082b8:	6a03      	ldr	r3, [r0, #32]
 80082ba:	b90b      	cbnz	r3, 80082c0 <__swbuf_r+0x12>
 80082bc:	f7ff feda 	bl	8008074 <__sinit>
 80082c0:	69a3      	ldr	r3, [r4, #24]
 80082c2:	60a3      	str	r3, [r4, #8]
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	071a      	lsls	r2, r3, #28
 80082c8:	d501      	bpl.n	80082ce <__swbuf_r+0x20>
 80082ca:	6923      	ldr	r3, [r4, #16]
 80082cc:	b943      	cbnz	r3, 80082e0 <__swbuf_r+0x32>
 80082ce:	4621      	mov	r1, r4
 80082d0:	4628      	mov	r0, r5
 80082d2:	f000 f82b 	bl	800832c <__swsetup_r>
 80082d6:	b118      	cbz	r0, 80082e0 <__swbuf_r+0x32>
 80082d8:	f04f 37ff 	mov.w	r7, #4294967295
 80082dc:	4638      	mov	r0, r7
 80082de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	6922      	ldr	r2, [r4, #16]
 80082e4:	1a98      	subs	r0, r3, r2
 80082e6:	6963      	ldr	r3, [r4, #20]
 80082e8:	b2f6      	uxtb	r6, r6
 80082ea:	4283      	cmp	r3, r0
 80082ec:	4637      	mov	r7, r6
 80082ee:	dc05      	bgt.n	80082fc <__swbuf_r+0x4e>
 80082f0:	4621      	mov	r1, r4
 80082f2:	4628      	mov	r0, r5
 80082f4:	f001 fedc 	bl	800a0b0 <_fflush_r>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d1ed      	bne.n	80082d8 <__swbuf_r+0x2a>
 80082fc:	68a3      	ldr	r3, [r4, #8]
 80082fe:	3b01      	subs	r3, #1
 8008300:	60a3      	str	r3, [r4, #8]
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	6022      	str	r2, [r4, #0]
 8008308:	701e      	strb	r6, [r3, #0]
 800830a:	6962      	ldr	r2, [r4, #20]
 800830c:	1c43      	adds	r3, r0, #1
 800830e:	429a      	cmp	r2, r3
 8008310:	d004      	beq.n	800831c <__swbuf_r+0x6e>
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	07db      	lsls	r3, r3, #31
 8008316:	d5e1      	bpl.n	80082dc <__swbuf_r+0x2e>
 8008318:	2e0a      	cmp	r6, #10
 800831a:	d1df      	bne.n	80082dc <__swbuf_r+0x2e>
 800831c:	4621      	mov	r1, r4
 800831e:	4628      	mov	r0, r5
 8008320:	f001 fec6 	bl	800a0b0 <_fflush_r>
 8008324:	2800      	cmp	r0, #0
 8008326:	d0d9      	beq.n	80082dc <__swbuf_r+0x2e>
 8008328:	e7d6      	b.n	80082d8 <__swbuf_r+0x2a>
	...

0800832c <__swsetup_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4b29      	ldr	r3, [pc, #164]	@ (80083d4 <__swsetup_r+0xa8>)
 8008330:	4605      	mov	r5, r0
 8008332:	6818      	ldr	r0, [r3, #0]
 8008334:	460c      	mov	r4, r1
 8008336:	b118      	cbz	r0, 8008340 <__swsetup_r+0x14>
 8008338:	6a03      	ldr	r3, [r0, #32]
 800833a:	b90b      	cbnz	r3, 8008340 <__swsetup_r+0x14>
 800833c:	f7ff fe9a 	bl	8008074 <__sinit>
 8008340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008344:	0719      	lsls	r1, r3, #28
 8008346:	d422      	bmi.n	800838e <__swsetup_r+0x62>
 8008348:	06da      	lsls	r2, r3, #27
 800834a:	d407      	bmi.n	800835c <__swsetup_r+0x30>
 800834c:	2209      	movs	r2, #9
 800834e:	602a      	str	r2, [r5, #0]
 8008350:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008354:	81a3      	strh	r3, [r4, #12]
 8008356:	f04f 30ff 	mov.w	r0, #4294967295
 800835a:	e033      	b.n	80083c4 <__swsetup_r+0x98>
 800835c:	0758      	lsls	r0, r3, #29
 800835e:	d512      	bpl.n	8008386 <__swsetup_r+0x5a>
 8008360:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008362:	b141      	cbz	r1, 8008376 <__swsetup_r+0x4a>
 8008364:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008368:	4299      	cmp	r1, r3
 800836a:	d002      	beq.n	8008372 <__swsetup_r+0x46>
 800836c:	4628      	mov	r0, r5
 800836e:	f000 feff 	bl	8009170 <_free_r>
 8008372:	2300      	movs	r3, #0
 8008374:	6363      	str	r3, [r4, #52]	@ 0x34
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800837c:	81a3      	strh	r3, [r4, #12]
 800837e:	2300      	movs	r3, #0
 8008380:	6063      	str	r3, [r4, #4]
 8008382:	6923      	ldr	r3, [r4, #16]
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	89a3      	ldrh	r3, [r4, #12]
 8008388:	f043 0308 	orr.w	r3, r3, #8
 800838c:	81a3      	strh	r3, [r4, #12]
 800838e:	6923      	ldr	r3, [r4, #16]
 8008390:	b94b      	cbnz	r3, 80083a6 <__swsetup_r+0x7a>
 8008392:	89a3      	ldrh	r3, [r4, #12]
 8008394:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800839c:	d003      	beq.n	80083a6 <__swsetup_r+0x7a>
 800839e:	4621      	mov	r1, r4
 80083a0:	4628      	mov	r0, r5
 80083a2:	f001 fed3 	bl	800a14c <__smakebuf_r>
 80083a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083aa:	f013 0201 	ands.w	r2, r3, #1
 80083ae:	d00a      	beq.n	80083c6 <__swsetup_r+0x9a>
 80083b0:	2200      	movs	r2, #0
 80083b2:	60a2      	str	r2, [r4, #8]
 80083b4:	6962      	ldr	r2, [r4, #20]
 80083b6:	4252      	negs	r2, r2
 80083b8:	61a2      	str	r2, [r4, #24]
 80083ba:	6922      	ldr	r2, [r4, #16]
 80083bc:	b942      	cbnz	r2, 80083d0 <__swsetup_r+0xa4>
 80083be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083c2:	d1c5      	bne.n	8008350 <__swsetup_r+0x24>
 80083c4:	bd38      	pop	{r3, r4, r5, pc}
 80083c6:	0799      	lsls	r1, r3, #30
 80083c8:	bf58      	it	pl
 80083ca:	6962      	ldrpl	r2, [r4, #20]
 80083cc:	60a2      	str	r2, [r4, #8]
 80083ce:	e7f4      	b.n	80083ba <__swsetup_r+0x8e>
 80083d0:	2000      	movs	r0, #0
 80083d2:	e7f7      	b.n	80083c4 <__swsetup_r+0x98>
 80083d4:	20000024 	.word	0x20000024

080083d8 <memset>:
 80083d8:	4402      	add	r2, r0
 80083da:	4603      	mov	r3, r0
 80083dc:	4293      	cmp	r3, r2
 80083de:	d100      	bne.n	80083e2 <memset+0xa>
 80083e0:	4770      	bx	lr
 80083e2:	f803 1b01 	strb.w	r1, [r3], #1
 80083e6:	e7f9      	b.n	80083dc <memset+0x4>

080083e8 <_localeconv_r>:
 80083e8:	4800      	ldr	r0, [pc, #0]	@ (80083ec <_localeconv_r+0x4>)
 80083ea:	4770      	bx	lr
 80083ec:	20000164 	.word	0x20000164

080083f0 <_close_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4d06      	ldr	r5, [pc, #24]	@ (800840c <_close_r+0x1c>)
 80083f4:	2300      	movs	r3, #0
 80083f6:	4604      	mov	r4, r0
 80083f8:	4608      	mov	r0, r1
 80083fa:	602b      	str	r3, [r5, #0]
 80083fc:	f7fa fbbc 	bl	8002b78 <_close>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	d102      	bne.n	800840a <_close_r+0x1a>
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	b103      	cbz	r3, 800840a <_close_r+0x1a>
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	bd38      	pop	{r3, r4, r5, pc}
 800840c:	200007b8 	.word	0x200007b8

08008410 <_lseek_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d07      	ldr	r5, [pc, #28]	@ (8008430 <_lseek_r+0x20>)
 8008414:	4604      	mov	r4, r0
 8008416:	4608      	mov	r0, r1
 8008418:	4611      	mov	r1, r2
 800841a:	2200      	movs	r2, #0
 800841c:	602a      	str	r2, [r5, #0]
 800841e:	461a      	mov	r2, r3
 8008420:	f7fa fbd1 	bl	8002bc6 <_lseek>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_lseek_r+0x1e>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	b103      	cbz	r3, 800842e <_lseek_r+0x1e>
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	200007b8 	.word	0x200007b8

08008434 <_read_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4d07      	ldr	r5, [pc, #28]	@ (8008454 <_read_r+0x20>)
 8008438:	4604      	mov	r4, r0
 800843a:	4608      	mov	r0, r1
 800843c:	4611      	mov	r1, r2
 800843e:	2200      	movs	r2, #0
 8008440:	602a      	str	r2, [r5, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	f7fa fb5f 	bl	8002b06 <_read>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	d102      	bne.n	8008452 <_read_r+0x1e>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	b103      	cbz	r3, 8008452 <_read_r+0x1e>
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	200007b8 	.word	0x200007b8

08008458 <_write_r>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	4d07      	ldr	r5, [pc, #28]	@ (8008478 <_write_r+0x20>)
 800845c:	4604      	mov	r4, r0
 800845e:	4608      	mov	r0, r1
 8008460:	4611      	mov	r1, r2
 8008462:	2200      	movs	r2, #0
 8008464:	602a      	str	r2, [r5, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	f7fa fb6a 	bl	8002b40 <_write>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d102      	bne.n	8008476 <_write_r+0x1e>
 8008470:	682b      	ldr	r3, [r5, #0]
 8008472:	b103      	cbz	r3, 8008476 <_write_r+0x1e>
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	200007b8 	.word	0x200007b8

0800847c <__errno>:
 800847c:	4b01      	ldr	r3, [pc, #4]	@ (8008484 <__errno+0x8>)
 800847e:	6818      	ldr	r0, [r3, #0]
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	20000024 	.word	0x20000024

08008488 <__libc_init_array>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	4d0d      	ldr	r5, [pc, #52]	@ (80084c0 <__libc_init_array+0x38>)
 800848c:	4c0d      	ldr	r4, [pc, #52]	@ (80084c4 <__libc_init_array+0x3c>)
 800848e:	1b64      	subs	r4, r4, r5
 8008490:	10a4      	asrs	r4, r4, #2
 8008492:	2600      	movs	r6, #0
 8008494:	42a6      	cmp	r6, r4
 8008496:	d109      	bne.n	80084ac <__libc_init_array+0x24>
 8008498:	4d0b      	ldr	r5, [pc, #44]	@ (80084c8 <__libc_init_array+0x40>)
 800849a:	4c0c      	ldr	r4, [pc, #48]	@ (80084cc <__libc_init_array+0x44>)
 800849c:	f002 fd50 	bl	800af40 <_init>
 80084a0:	1b64      	subs	r4, r4, r5
 80084a2:	10a4      	asrs	r4, r4, #2
 80084a4:	2600      	movs	r6, #0
 80084a6:	42a6      	cmp	r6, r4
 80084a8:	d105      	bne.n	80084b6 <__libc_init_array+0x2e>
 80084aa:	bd70      	pop	{r4, r5, r6, pc}
 80084ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b0:	4798      	blx	r3
 80084b2:	3601      	adds	r6, #1
 80084b4:	e7ee      	b.n	8008494 <__libc_init_array+0xc>
 80084b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ba:	4798      	blx	r3
 80084bc:	3601      	adds	r6, #1
 80084be:	e7f2      	b.n	80084a6 <__libc_init_array+0x1e>
 80084c0:	0800b8a0 	.word	0x0800b8a0
 80084c4:	0800b8a0 	.word	0x0800b8a0
 80084c8:	0800b8a0 	.word	0x0800b8a0
 80084cc:	0800b8a4 	.word	0x0800b8a4

080084d0 <__retarget_lock_init_recursive>:
 80084d0:	4770      	bx	lr

080084d2 <__retarget_lock_acquire_recursive>:
 80084d2:	4770      	bx	lr

080084d4 <__retarget_lock_release_recursive>:
 80084d4:	4770      	bx	lr

080084d6 <quorem>:
 80084d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084da:	6903      	ldr	r3, [r0, #16]
 80084dc:	690c      	ldr	r4, [r1, #16]
 80084de:	42a3      	cmp	r3, r4
 80084e0:	4607      	mov	r7, r0
 80084e2:	db7e      	blt.n	80085e2 <quorem+0x10c>
 80084e4:	3c01      	subs	r4, #1
 80084e6:	f101 0814 	add.w	r8, r1, #20
 80084ea:	00a3      	lsls	r3, r4, #2
 80084ec:	f100 0514 	add.w	r5, r0, #20
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084f6:	9301      	str	r3, [sp, #4]
 80084f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008500:	3301      	adds	r3, #1
 8008502:	429a      	cmp	r2, r3
 8008504:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008508:	fbb2 f6f3 	udiv	r6, r2, r3
 800850c:	d32e      	bcc.n	800856c <quorem+0x96>
 800850e:	f04f 0a00 	mov.w	sl, #0
 8008512:	46c4      	mov	ip, r8
 8008514:	46ae      	mov	lr, r5
 8008516:	46d3      	mov	fp, sl
 8008518:	f85c 3b04 	ldr.w	r3, [ip], #4
 800851c:	b298      	uxth	r0, r3
 800851e:	fb06 a000 	mla	r0, r6, r0, sl
 8008522:	0c02      	lsrs	r2, r0, #16
 8008524:	0c1b      	lsrs	r3, r3, #16
 8008526:	fb06 2303 	mla	r3, r6, r3, r2
 800852a:	f8de 2000 	ldr.w	r2, [lr]
 800852e:	b280      	uxth	r0, r0
 8008530:	b292      	uxth	r2, r2
 8008532:	1a12      	subs	r2, r2, r0
 8008534:	445a      	add	r2, fp
 8008536:	f8de 0000 	ldr.w	r0, [lr]
 800853a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800853e:	b29b      	uxth	r3, r3
 8008540:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008544:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008548:	b292      	uxth	r2, r2
 800854a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800854e:	45e1      	cmp	r9, ip
 8008550:	f84e 2b04 	str.w	r2, [lr], #4
 8008554:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008558:	d2de      	bcs.n	8008518 <quorem+0x42>
 800855a:	9b00      	ldr	r3, [sp, #0]
 800855c:	58eb      	ldr	r3, [r5, r3]
 800855e:	b92b      	cbnz	r3, 800856c <quorem+0x96>
 8008560:	9b01      	ldr	r3, [sp, #4]
 8008562:	3b04      	subs	r3, #4
 8008564:	429d      	cmp	r5, r3
 8008566:	461a      	mov	r2, r3
 8008568:	d32f      	bcc.n	80085ca <quorem+0xf4>
 800856a:	613c      	str	r4, [r7, #16]
 800856c:	4638      	mov	r0, r7
 800856e:	f001 f979 	bl	8009864 <__mcmp>
 8008572:	2800      	cmp	r0, #0
 8008574:	db25      	blt.n	80085c2 <quorem+0xec>
 8008576:	4629      	mov	r1, r5
 8008578:	2000      	movs	r0, #0
 800857a:	f858 2b04 	ldr.w	r2, [r8], #4
 800857e:	f8d1 c000 	ldr.w	ip, [r1]
 8008582:	fa1f fe82 	uxth.w	lr, r2
 8008586:	fa1f f38c 	uxth.w	r3, ip
 800858a:	eba3 030e 	sub.w	r3, r3, lr
 800858e:	4403      	add	r3, r0
 8008590:	0c12      	lsrs	r2, r2, #16
 8008592:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008596:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800859a:	b29b      	uxth	r3, r3
 800859c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085a0:	45c1      	cmp	r9, r8
 80085a2:	f841 3b04 	str.w	r3, [r1], #4
 80085a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80085aa:	d2e6      	bcs.n	800857a <quorem+0xa4>
 80085ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085b4:	b922      	cbnz	r2, 80085c0 <quorem+0xea>
 80085b6:	3b04      	subs	r3, #4
 80085b8:	429d      	cmp	r5, r3
 80085ba:	461a      	mov	r2, r3
 80085bc:	d30b      	bcc.n	80085d6 <quorem+0x100>
 80085be:	613c      	str	r4, [r7, #16]
 80085c0:	3601      	adds	r6, #1
 80085c2:	4630      	mov	r0, r6
 80085c4:	b003      	add	sp, #12
 80085c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ca:	6812      	ldr	r2, [r2, #0]
 80085cc:	3b04      	subs	r3, #4
 80085ce:	2a00      	cmp	r2, #0
 80085d0:	d1cb      	bne.n	800856a <quorem+0x94>
 80085d2:	3c01      	subs	r4, #1
 80085d4:	e7c6      	b.n	8008564 <quorem+0x8e>
 80085d6:	6812      	ldr	r2, [r2, #0]
 80085d8:	3b04      	subs	r3, #4
 80085da:	2a00      	cmp	r2, #0
 80085dc:	d1ef      	bne.n	80085be <quorem+0xe8>
 80085de:	3c01      	subs	r4, #1
 80085e0:	e7ea      	b.n	80085b8 <quorem+0xe2>
 80085e2:	2000      	movs	r0, #0
 80085e4:	e7ee      	b.n	80085c4 <quorem+0xee>
	...

080085e8 <_dtoa_r>:
 80085e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ec:	69c7      	ldr	r7, [r0, #28]
 80085ee:	b099      	sub	sp, #100	@ 0x64
 80085f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80085f4:	ec55 4b10 	vmov	r4, r5, d0
 80085f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80085fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80085fc:	4683      	mov	fp, r0
 80085fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8008600:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008602:	b97f      	cbnz	r7, 8008624 <_dtoa_r+0x3c>
 8008604:	2010      	movs	r0, #16
 8008606:	f000 fdfd 	bl	8009204 <malloc>
 800860a:	4602      	mov	r2, r0
 800860c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008610:	b920      	cbnz	r0, 800861c <_dtoa_r+0x34>
 8008612:	4ba7      	ldr	r3, [pc, #668]	@ (80088b0 <_dtoa_r+0x2c8>)
 8008614:	21ef      	movs	r1, #239	@ 0xef
 8008616:	48a7      	ldr	r0, [pc, #668]	@ (80088b4 <_dtoa_r+0x2cc>)
 8008618:	f001 fe2e 	bl	800a278 <__assert_func>
 800861c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008620:	6007      	str	r7, [r0, #0]
 8008622:	60c7      	str	r7, [r0, #12]
 8008624:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008628:	6819      	ldr	r1, [r3, #0]
 800862a:	b159      	cbz	r1, 8008644 <_dtoa_r+0x5c>
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	604a      	str	r2, [r1, #4]
 8008630:	2301      	movs	r3, #1
 8008632:	4093      	lsls	r3, r2
 8008634:	608b      	str	r3, [r1, #8]
 8008636:	4658      	mov	r0, fp
 8008638:	f000 feda 	bl	80093f0 <_Bfree>
 800863c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008640:	2200      	movs	r2, #0
 8008642:	601a      	str	r2, [r3, #0]
 8008644:	1e2b      	subs	r3, r5, #0
 8008646:	bfb9      	ittee	lt
 8008648:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800864c:	9303      	strlt	r3, [sp, #12]
 800864e:	2300      	movge	r3, #0
 8008650:	6033      	strge	r3, [r6, #0]
 8008652:	9f03      	ldr	r7, [sp, #12]
 8008654:	4b98      	ldr	r3, [pc, #608]	@ (80088b8 <_dtoa_r+0x2d0>)
 8008656:	bfbc      	itt	lt
 8008658:	2201      	movlt	r2, #1
 800865a:	6032      	strlt	r2, [r6, #0]
 800865c:	43bb      	bics	r3, r7
 800865e:	d112      	bne.n	8008686 <_dtoa_r+0x9e>
 8008660:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008662:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008666:	6013      	str	r3, [r2, #0]
 8008668:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800866c:	4323      	orrs	r3, r4
 800866e:	f000 854d 	beq.w	800910c <_dtoa_r+0xb24>
 8008672:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008674:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80088cc <_dtoa_r+0x2e4>
 8008678:	2b00      	cmp	r3, #0
 800867a:	f000 854f 	beq.w	800911c <_dtoa_r+0xb34>
 800867e:	f10a 0303 	add.w	r3, sl, #3
 8008682:	f000 bd49 	b.w	8009118 <_dtoa_r+0xb30>
 8008686:	ed9d 7b02 	vldr	d7, [sp, #8]
 800868a:	2200      	movs	r2, #0
 800868c:	ec51 0b17 	vmov	r0, r1, d7
 8008690:	2300      	movs	r3, #0
 8008692:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008696:	f7f8 fa17 	bl	8000ac8 <__aeabi_dcmpeq>
 800869a:	4680      	mov	r8, r0
 800869c:	b158      	cbz	r0, 80086b6 <_dtoa_r+0xce>
 800869e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80086a0:	2301      	movs	r3, #1
 80086a2:	6013      	str	r3, [r2, #0]
 80086a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086a6:	b113      	cbz	r3, 80086ae <_dtoa_r+0xc6>
 80086a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80086aa:	4b84      	ldr	r3, [pc, #528]	@ (80088bc <_dtoa_r+0x2d4>)
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80088d0 <_dtoa_r+0x2e8>
 80086b2:	f000 bd33 	b.w	800911c <_dtoa_r+0xb34>
 80086b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80086ba:	aa16      	add	r2, sp, #88	@ 0x58
 80086bc:	a917      	add	r1, sp, #92	@ 0x5c
 80086be:	4658      	mov	r0, fp
 80086c0:	f001 f980 	bl	80099c4 <__d2b>
 80086c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80086c8:	4681      	mov	r9, r0
 80086ca:	2e00      	cmp	r6, #0
 80086cc:	d077      	beq.n	80087be <_dtoa_r+0x1d6>
 80086ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80086d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80086e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80086e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80086e8:	4619      	mov	r1, r3
 80086ea:	2200      	movs	r2, #0
 80086ec:	4b74      	ldr	r3, [pc, #464]	@ (80088c0 <_dtoa_r+0x2d8>)
 80086ee:	f7f7 fdcb 	bl	8000288 <__aeabi_dsub>
 80086f2:	a369      	add	r3, pc, #420	@ (adr r3, 8008898 <_dtoa_r+0x2b0>)
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	f7f7 ff7e 	bl	80005f8 <__aeabi_dmul>
 80086fc:	a368      	add	r3, pc, #416	@ (adr r3, 80088a0 <_dtoa_r+0x2b8>)
 80086fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008702:	f7f7 fdc3 	bl	800028c <__adddf3>
 8008706:	4604      	mov	r4, r0
 8008708:	4630      	mov	r0, r6
 800870a:	460d      	mov	r5, r1
 800870c:	f7f7 ff0a 	bl	8000524 <__aeabi_i2d>
 8008710:	a365      	add	r3, pc, #404	@ (adr r3, 80088a8 <_dtoa_r+0x2c0>)
 8008712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008716:	f7f7 ff6f 	bl	80005f8 <__aeabi_dmul>
 800871a:	4602      	mov	r2, r0
 800871c:	460b      	mov	r3, r1
 800871e:	4620      	mov	r0, r4
 8008720:	4629      	mov	r1, r5
 8008722:	f7f7 fdb3 	bl	800028c <__adddf3>
 8008726:	4604      	mov	r4, r0
 8008728:	460d      	mov	r5, r1
 800872a:	f7f8 fa15 	bl	8000b58 <__aeabi_d2iz>
 800872e:	2200      	movs	r2, #0
 8008730:	4607      	mov	r7, r0
 8008732:	2300      	movs	r3, #0
 8008734:	4620      	mov	r0, r4
 8008736:	4629      	mov	r1, r5
 8008738:	f7f8 f9d0 	bl	8000adc <__aeabi_dcmplt>
 800873c:	b140      	cbz	r0, 8008750 <_dtoa_r+0x168>
 800873e:	4638      	mov	r0, r7
 8008740:	f7f7 fef0 	bl	8000524 <__aeabi_i2d>
 8008744:	4622      	mov	r2, r4
 8008746:	462b      	mov	r3, r5
 8008748:	f7f8 f9be 	bl	8000ac8 <__aeabi_dcmpeq>
 800874c:	b900      	cbnz	r0, 8008750 <_dtoa_r+0x168>
 800874e:	3f01      	subs	r7, #1
 8008750:	2f16      	cmp	r7, #22
 8008752:	d851      	bhi.n	80087f8 <_dtoa_r+0x210>
 8008754:	4b5b      	ldr	r3, [pc, #364]	@ (80088c4 <_dtoa_r+0x2dc>)
 8008756:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800875a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008762:	f7f8 f9bb 	bl	8000adc <__aeabi_dcmplt>
 8008766:	2800      	cmp	r0, #0
 8008768:	d048      	beq.n	80087fc <_dtoa_r+0x214>
 800876a:	3f01      	subs	r7, #1
 800876c:	2300      	movs	r3, #0
 800876e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008770:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008772:	1b9b      	subs	r3, r3, r6
 8008774:	1e5a      	subs	r2, r3, #1
 8008776:	bf44      	itt	mi
 8008778:	f1c3 0801 	rsbmi	r8, r3, #1
 800877c:	2300      	movmi	r3, #0
 800877e:	9208      	str	r2, [sp, #32]
 8008780:	bf54      	ite	pl
 8008782:	f04f 0800 	movpl.w	r8, #0
 8008786:	9308      	strmi	r3, [sp, #32]
 8008788:	2f00      	cmp	r7, #0
 800878a:	db39      	blt.n	8008800 <_dtoa_r+0x218>
 800878c:	9b08      	ldr	r3, [sp, #32]
 800878e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008790:	443b      	add	r3, r7
 8008792:	9308      	str	r3, [sp, #32]
 8008794:	2300      	movs	r3, #0
 8008796:	930a      	str	r3, [sp, #40]	@ 0x28
 8008798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800879a:	2b09      	cmp	r3, #9
 800879c:	d864      	bhi.n	8008868 <_dtoa_r+0x280>
 800879e:	2b05      	cmp	r3, #5
 80087a0:	bfc4      	itt	gt
 80087a2:	3b04      	subgt	r3, #4
 80087a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80087a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087a8:	f1a3 0302 	sub.w	r3, r3, #2
 80087ac:	bfcc      	ite	gt
 80087ae:	2400      	movgt	r4, #0
 80087b0:	2401      	movle	r4, #1
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d863      	bhi.n	800887e <_dtoa_r+0x296>
 80087b6:	e8df f003 	tbb	[pc, r3]
 80087ba:	372a      	.short	0x372a
 80087bc:	5535      	.short	0x5535
 80087be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80087c2:	441e      	add	r6, r3
 80087c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80087c8:	2b20      	cmp	r3, #32
 80087ca:	bfc1      	itttt	gt
 80087cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80087d0:	409f      	lslgt	r7, r3
 80087d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80087d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80087da:	bfd6      	itet	le
 80087dc:	f1c3 0320 	rsble	r3, r3, #32
 80087e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80087e4:	fa04 f003 	lslle.w	r0, r4, r3
 80087e8:	f7f7 fe8c 	bl	8000504 <__aeabi_ui2d>
 80087ec:	2201      	movs	r2, #1
 80087ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80087f2:	3e01      	subs	r6, #1
 80087f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80087f6:	e777      	b.n	80086e8 <_dtoa_r+0x100>
 80087f8:	2301      	movs	r3, #1
 80087fa:	e7b8      	b.n	800876e <_dtoa_r+0x186>
 80087fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80087fe:	e7b7      	b.n	8008770 <_dtoa_r+0x188>
 8008800:	427b      	negs	r3, r7
 8008802:	930a      	str	r3, [sp, #40]	@ 0x28
 8008804:	2300      	movs	r3, #0
 8008806:	eba8 0807 	sub.w	r8, r8, r7
 800880a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800880c:	e7c4      	b.n	8008798 <_dtoa_r+0x1b0>
 800880e:	2300      	movs	r3, #0
 8008810:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008814:	2b00      	cmp	r3, #0
 8008816:	dc35      	bgt.n	8008884 <_dtoa_r+0x29c>
 8008818:	2301      	movs	r3, #1
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	9307      	str	r3, [sp, #28]
 800881e:	461a      	mov	r2, r3
 8008820:	920e      	str	r2, [sp, #56]	@ 0x38
 8008822:	e00b      	b.n	800883c <_dtoa_r+0x254>
 8008824:	2301      	movs	r3, #1
 8008826:	e7f3      	b.n	8008810 <_dtoa_r+0x228>
 8008828:	2300      	movs	r3, #0
 800882a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800882c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800882e:	18fb      	adds	r3, r7, r3
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	3301      	adds	r3, #1
 8008834:	2b01      	cmp	r3, #1
 8008836:	9307      	str	r3, [sp, #28]
 8008838:	bfb8      	it	lt
 800883a:	2301      	movlt	r3, #1
 800883c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008840:	2100      	movs	r1, #0
 8008842:	2204      	movs	r2, #4
 8008844:	f102 0514 	add.w	r5, r2, #20
 8008848:	429d      	cmp	r5, r3
 800884a:	d91f      	bls.n	800888c <_dtoa_r+0x2a4>
 800884c:	6041      	str	r1, [r0, #4]
 800884e:	4658      	mov	r0, fp
 8008850:	f000 fd8e 	bl	8009370 <_Balloc>
 8008854:	4682      	mov	sl, r0
 8008856:	2800      	cmp	r0, #0
 8008858:	d13c      	bne.n	80088d4 <_dtoa_r+0x2ec>
 800885a:	4b1b      	ldr	r3, [pc, #108]	@ (80088c8 <_dtoa_r+0x2e0>)
 800885c:	4602      	mov	r2, r0
 800885e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008862:	e6d8      	b.n	8008616 <_dtoa_r+0x2e>
 8008864:	2301      	movs	r3, #1
 8008866:	e7e0      	b.n	800882a <_dtoa_r+0x242>
 8008868:	2401      	movs	r4, #1
 800886a:	2300      	movs	r3, #0
 800886c:	9309      	str	r3, [sp, #36]	@ 0x24
 800886e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008870:	f04f 33ff 	mov.w	r3, #4294967295
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	9307      	str	r3, [sp, #28]
 8008878:	2200      	movs	r2, #0
 800887a:	2312      	movs	r3, #18
 800887c:	e7d0      	b.n	8008820 <_dtoa_r+0x238>
 800887e:	2301      	movs	r3, #1
 8008880:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008882:	e7f5      	b.n	8008870 <_dtoa_r+0x288>
 8008884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	9307      	str	r3, [sp, #28]
 800888a:	e7d7      	b.n	800883c <_dtoa_r+0x254>
 800888c:	3101      	adds	r1, #1
 800888e:	0052      	lsls	r2, r2, #1
 8008890:	e7d8      	b.n	8008844 <_dtoa_r+0x25c>
 8008892:	bf00      	nop
 8008894:	f3af 8000 	nop.w
 8008898:	636f4361 	.word	0x636f4361
 800889c:	3fd287a7 	.word	0x3fd287a7
 80088a0:	8b60c8b3 	.word	0x8b60c8b3
 80088a4:	3fc68a28 	.word	0x3fc68a28
 80088a8:	509f79fb 	.word	0x509f79fb
 80088ac:	3fd34413 	.word	0x3fd34413
 80088b0:	0800b29a 	.word	0x0800b29a
 80088b4:	0800b2b1 	.word	0x0800b2b1
 80088b8:	7ff00000 	.word	0x7ff00000
 80088bc:	0800b26a 	.word	0x0800b26a
 80088c0:	3ff80000 	.word	0x3ff80000
 80088c4:	0800b3a8 	.word	0x0800b3a8
 80088c8:	0800b309 	.word	0x0800b309
 80088cc:	0800b296 	.word	0x0800b296
 80088d0:	0800b269 	.word	0x0800b269
 80088d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80088d8:	6018      	str	r0, [r3, #0]
 80088da:	9b07      	ldr	r3, [sp, #28]
 80088dc:	2b0e      	cmp	r3, #14
 80088de:	f200 80a4 	bhi.w	8008a2a <_dtoa_r+0x442>
 80088e2:	2c00      	cmp	r4, #0
 80088e4:	f000 80a1 	beq.w	8008a2a <_dtoa_r+0x442>
 80088e8:	2f00      	cmp	r7, #0
 80088ea:	dd33      	ble.n	8008954 <_dtoa_r+0x36c>
 80088ec:	4bad      	ldr	r3, [pc, #692]	@ (8008ba4 <_dtoa_r+0x5bc>)
 80088ee:	f007 020f 	and.w	r2, r7, #15
 80088f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088f6:	ed93 7b00 	vldr	d7, [r3]
 80088fa:	05f8      	lsls	r0, r7, #23
 80088fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008900:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008904:	d516      	bpl.n	8008934 <_dtoa_r+0x34c>
 8008906:	4ba8      	ldr	r3, [pc, #672]	@ (8008ba8 <_dtoa_r+0x5c0>)
 8008908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800890c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008910:	f7f7 ff9c 	bl	800084c <__aeabi_ddiv>
 8008914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008918:	f004 040f 	and.w	r4, r4, #15
 800891c:	2603      	movs	r6, #3
 800891e:	4da2      	ldr	r5, [pc, #648]	@ (8008ba8 <_dtoa_r+0x5c0>)
 8008920:	b954      	cbnz	r4, 8008938 <_dtoa_r+0x350>
 8008922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800892a:	f7f7 ff8f 	bl	800084c <__aeabi_ddiv>
 800892e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008932:	e028      	b.n	8008986 <_dtoa_r+0x39e>
 8008934:	2602      	movs	r6, #2
 8008936:	e7f2      	b.n	800891e <_dtoa_r+0x336>
 8008938:	07e1      	lsls	r1, r4, #31
 800893a:	d508      	bpl.n	800894e <_dtoa_r+0x366>
 800893c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008940:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008944:	f7f7 fe58 	bl	80005f8 <__aeabi_dmul>
 8008948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800894c:	3601      	adds	r6, #1
 800894e:	1064      	asrs	r4, r4, #1
 8008950:	3508      	adds	r5, #8
 8008952:	e7e5      	b.n	8008920 <_dtoa_r+0x338>
 8008954:	f000 80d2 	beq.w	8008afc <_dtoa_r+0x514>
 8008958:	427c      	negs	r4, r7
 800895a:	4b92      	ldr	r3, [pc, #584]	@ (8008ba4 <_dtoa_r+0x5bc>)
 800895c:	4d92      	ldr	r5, [pc, #584]	@ (8008ba8 <_dtoa_r+0x5c0>)
 800895e:	f004 020f 	and.w	r2, r4, #15
 8008962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800896e:	f7f7 fe43 	bl	80005f8 <__aeabi_dmul>
 8008972:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008976:	1124      	asrs	r4, r4, #4
 8008978:	2300      	movs	r3, #0
 800897a:	2602      	movs	r6, #2
 800897c:	2c00      	cmp	r4, #0
 800897e:	f040 80b2 	bne.w	8008ae6 <_dtoa_r+0x4fe>
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1d3      	bne.n	800892e <_dtoa_r+0x346>
 8008986:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008988:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 80b7 	beq.w	8008b00 <_dtoa_r+0x518>
 8008992:	4b86      	ldr	r3, [pc, #536]	@ (8008bac <_dtoa_r+0x5c4>)
 8008994:	2200      	movs	r2, #0
 8008996:	4620      	mov	r0, r4
 8008998:	4629      	mov	r1, r5
 800899a:	f7f8 f89f 	bl	8000adc <__aeabi_dcmplt>
 800899e:	2800      	cmp	r0, #0
 80089a0:	f000 80ae 	beq.w	8008b00 <_dtoa_r+0x518>
 80089a4:	9b07      	ldr	r3, [sp, #28]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 80aa 	beq.w	8008b00 <_dtoa_r+0x518>
 80089ac:	9b00      	ldr	r3, [sp, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	dd37      	ble.n	8008a22 <_dtoa_r+0x43a>
 80089b2:	1e7b      	subs	r3, r7, #1
 80089b4:	9304      	str	r3, [sp, #16]
 80089b6:	4620      	mov	r0, r4
 80089b8:	4b7d      	ldr	r3, [pc, #500]	@ (8008bb0 <_dtoa_r+0x5c8>)
 80089ba:	2200      	movs	r2, #0
 80089bc:	4629      	mov	r1, r5
 80089be:	f7f7 fe1b 	bl	80005f8 <__aeabi_dmul>
 80089c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089c6:	9c00      	ldr	r4, [sp, #0]
 80089c8:	3601      	adds	r6, #1
 80089ca:	4630      	mov	r0, r6
 80089cc:	f7f7 fdaa 	bl	8000524 <__aeabi_i2d>
 80089d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089d4:	f7f7 fe10 	bl	80005f8 <__aeabi_dmul>
 80089d8:	4b76      	ldr	r3, [pc, #472]	@ (8008bb4 <_dtoa_r+0x5cc>)
 80089da:	2200      	movs	r2, #0
 80089dc:	f7f7 fc56 	bl	800028c <__adddf3>
 80089e0:	4605      	mov	r5, r0
 80089e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80089e6:	2c00      	cmp	r4, #0
 80089e8:	f040 808d 	bne.w	8008b06 <_dtoa_r+0x51e>
 80089ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089f0:	4b71      	ldr	r3, [pc, #452]	@ (8008bb8 <_dtoa_r+0x5d0>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	f7f7 fc48 	bl	8000288 <__aeabi_dsub>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a00:	462a      	mov	r2, r5
 8008a02:	4633      	mov	r3, r6
 8008a04:	f7f8 f888 	bl	8000b18 <__aeabi_dcmpgt>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	f040 828b 	bne.w	8008f24 <_dtoa_r+0x93c>
 8008a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a12:	462a      	mov	r2, r5
 8008a14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008a18:	f7f8 f860 	bl	8000adc <__aeabi_dcmplt>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	f040 8128 	bne.w	8008c72 <_dtoa_r+0x68a>
 8008a22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008a26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008a2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f2c0 815a 	blt.w	8008ce6 <_dtoa_r+0x6fe>
 8008a32:	2f0e      	cmp	r7, #14
 8008a34:	f300 8157 	bgt.w	8008ce6 <_dtoa_r+0x6fe>
 8008a38:	4b5a      	ldr	r3, [pc, #360]	@ (8008ba4 <_dtoa_r+0x5bc>)
 8008a3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a3e:	ed93 7b00 	vldr	d7, [r3]
 8008a42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	ed8d 7b00 	vstr	d7, [sp]
 8008a4a:	da03      	bge.n	8008a54 <_dtoa_r+0x46c>
 8008a4c:	9b07      	ldr	r3, [sp, #28]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f340 8101 	ble.w	8008c56 <_dtoa_r+0x66e>
 8008a54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a58:	4656      	mov	r6, sl
 8008a5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a5e:	4620      	mov	r0, r4
 8008a60:	4629      	mov	r1, r5
 8008a62:	f7f7 fef3 	bl	800084c <__aeabi_ddiv>
 8008a66:	f7f8 f877 	bl	8000b58 <__aeabi_d2iz>
 8008a6a:	4680      	mov	r8, r0
 8008a6c:	f7f7 fd5a 	bl	8000524 <__aeabi_i2d>
 8008a70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a74:	f7f7 fdc0 	bl	80005f8 <__aeabi_dmul>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	4629      	mov	r1, r5
 8008a80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008a84:	f7f7 fc00 	bl	8000288 <__aeabi_dsub>
 8008a88:	f806 4b01 	strb.w	r4, [r6], #1
 8008a8c:	9d07      	ldr	r5, [sp, #28]
 8008a8e:	eba6 040a 	sub.w	r4, r6, sl
 8008a92:	42a5      	cmp	r5, r4
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	f040 8117 	bne.w	8008cca <_dtoa_r+0x6e2>
 8008a9c:	f7f7 fbf6 	bl	800028c <__adddf3>
 8008aa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aa4:	4604      	mov	r4, r0
 8008aa6:	460d      	mov	r5, r1
 8008aa8:	f7f8 f836 	bl	8000b18 <__aeabi_dcmpgt>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	f040 80f9 	bne.w	8008ca4 <_dtoa_r+0x6bc>
 8008ab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	4629      	mov	r1, r5
 8008aba:	f7f8 f805 	bl	8000ac8 <__aeabi_dcmpeq>
 8008abe:	b118      	cbz	r0, 8008ac8 <_dtoa_r+0x4e0>
 8008ac0:	f018 0f01 	tst.w	r8, #1
 8008ac4:	f040 80ee 	bne.w	8008ca4 <_dtoa_r+0x6bc>
 8008ac8:	4649      	mov	r1, r9
 8008aca:	4658      	mov	r0, fp
 8008acc:	f000 fc90 	bl	80093f0 <_Bfree>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	7033      	strb	r3, [r6, #0]
 8008ad4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ad6:	3701      	adds	r7, #1
 8008ad8:	601f      	str	r7, [r3, #0]
 8008ada:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f000 831d 	beq.w	800911c <_dtoa_r+0xb34>
 8008ae2:	601e      	str	r6, [r3, #0]
 8008ae4:	e31a      	b.n	800911c <_dtoa_r+0xb34>
 8008ae6:	07e2      	lsls	r2, r4, #31
 8008ae8:	d505      	bpl.n	8008af6 <_dtoa_r+0x50e>
 8008aea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008aee:	f7f7 fd83 	bl	80005f8 <__aeabi_dmul>
 8008af2:	3601      	adds	r6, #1
 8008af4:	2301      	movs	r3, #1
 8008af6:	1064      	asrs	r4, r4, #1
 8008af8:	3508      	adds	r5, #8
 8008afa:	e73f      	b.n	800897c <_dtoa_r+0x394>
 8008afc:	2602      	movs	r6, #2
 8008afe:	e742      	b.n	8008986 <_dtoa_r+0x39e>
 8008b00:	9c07      	ldr	r4, [sp, #28]
 8008b02:	9704      	str	r7, [sp, #16]
 8008b04:	e761      	b.n	80089ca <_dtoa_r+0x3e2>
 8008b06:	4b27      	ldr	r3, [pc, #156]	@ (8008ba4 <_dtoa_r+0x5bc>)
 8008b08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b12:	4454      	add	r4, sl
 8008b14:	2900      	cmp	r1, #0
 8008b16:	d053      	beq.n	8008bc0 <_dtoa_r+0x5d8>
 8008b18:	4928      	ldr	r1, [pc, #160]	@ (8008bbc <_dtoa_r+0x5d4>)
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	f7f7 fe96 	bl	800084c <__aeabi_ddiv>
 8008b20:	4633      	mov	r3, r6
 8008b22:	462a      	mov	r2, r5
 8008b24:	f7f7 fbb0 	bl	8000288 <__aeabi_dsub>
 8008b28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b2c:	4656      	mov	r6, sl
 8008b2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b32:	f7f8 f811 	bl	8000b58 <__aeabi_d2iz>
 8008b36:	4605      	mov	r5, r0
 8008b38:	f7f7 fcf4 	bl	8000524 <__aeabi_i2d>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	460b      	mov	r3, r1
 8008b40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b44:	f7f7 fba0 	bl	8000288 <__aeabi_dsub>
 8008b48:	3530      	adds	r5, #48	@ 0x30
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b52:	f806 5b01 	strb.w	r5, [r6], #1
 8008b56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b5a:	f7f7 ffbf 	bl	8000adc <__aeabi_dcmplt>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	d171      	bne.n	8008c46 <_dtoa_r+0x65e>
 8008b62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b66:	4911      	ldr	r1, [pc, #68]	@ (8008bac <_dtoa_r+0x5c4>)
 8008b68:	2000      	movs	r0, #0
 8008b6a:	f7f7 fb8d 	bl	8000288 <__aeabi_dsub>
 8008b6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b72:	f7f7 ffb3 	bl	8000adc <__aeabi_dcmplt>
 8008b76:	2800      	cmp	r0, #0
 8008b78:	f040 8095 	bne.w	8008ca6 <_dtoa_r+0x6be>
 8008b7c:	42a6      	cmp	r6, r4
 8008b7e:	f43f af50 	beq.w	8008a22 <_dtoa_r+0x43a>
 8008b82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b86:	4b0a      	ldr	r3, [pc, #40]	@ (8008bb0 <_dtoa_r+0x5c8>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f7f7 fd35 	bl	80005f8 <__aeabi_dmul>
 8008b8e:	4b08      	ldr	r3, [pc, #32]	@ (8008bb0 <_dtoa_r+0x5c8>)
 8008b90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b94:	2200      	movs	r2, #0
 8008b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b9a:	f7f7 fd2d 	bl	80005f8 <__aeabi_dmul>
 8008b9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ba2:	e7c4      	b.n	8008b2e <_dtoa_r+0x546>
 8008ba4:	0800b3a8 	.word	0x0800b3a8
 8008ba8:	0800b380 	.word	0x0800b380
 8008bac:	3ff00000 	.word	0x3ff00000
 8008bb0:	40240000 	.word	0x40240000
 8008bb4:	401c0000 	.word	0x401c0000
 8008bb8:	40140000 	.word	0x40140000
 8008bbc:	3fe00000 	.word	0x3fe00000
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	f7f7 fd18 	bl	80005f8 <__aeabi_dmul>
 8008bc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008bcc:	9415      	str	r4, [sp, #84]	@ 0x54
 8008bce:	4656      	mov	r6, sl
 8008bd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bd4:	f7f7 ffc0 	bl	8000b58 <__aeabi_d2iz>
 8008bd8:	4605      	mov	r5, r0
 8008bda:	f7f7 fca3 	bl	8000524 <__aeabi_i2d>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008be6:	f7f7 fb4f 	bl	8000288 <__aeabi_dsub>
 8008bea:	3530      	adds	r5, #48	@ 0x30
 8008bec:	f806 5b01 	strb.w	r5, [r6], #1
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	42a6      	cmp	r6, r4
 8008bf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bfa:	f04f 0200 	mov.w	r2, #0
 8008bfe:	d124      	bne.n	8008c4a <_dtoa_r+0x662>
 8008c00:	4bac      	ldr	r3, [pc, #688]	@ (8008eb4 <_dtoa_r+0x8cc>)
 8008c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c06:	f7f7 fb41 	bl	800028c <__adddf3>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c12:	f7f7 ff81 	bl	8000b18 <__aeabi_dcmpgt>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d145      	bne.n	8008ca6 <_dtoa_r+0x6be>
 8008c1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c1e:	49a5      	ldr	r1, [pc, #660]	@ (8008eb4 <_dtoa_r+0x8cc>)
 8008c20:	2000      	movs	r0, #0
 8008c22:	f7f7 fb31 	bl	8000288 <__aeabi_dsub>
 8008c26:	4602      	mov	r2, r0
 8008c28:	460b      	mov	r3, r1
 8008c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c2e:	f7f7 ff55 	bl	8000adc <__aeabi_dcmplt>
 8008c32:	2800      	cmp	r0, #0
 8008c34:	f43f aef5 	beq.w	8008a22 <_dtoa_r+0x43a>
 8008c38:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008c3a:	1e73      	subs	r3, r6, #1
 8008c3c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c42:	2b30      	cmp	r3, #48	@ 0x30
 8008c44:	d0f8      	beq.n	8008c38 <_dtoa_r+0x650>
 8008c46:	9f04      	ldr	r7, [sp, #16]
 8008c48:	e73e      	b.n	8008ac8 <_dtoa_r+0x4e0>
 8008c4a:	4b9b      	ldr	r3, [pc, #620]	@ (8008eb8 <_dtoa_r+0x8d0>)
 8008c4c:	f7f7 fcd4 	bl	80005f8 <__aeabi_dmul>
 8008c50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c54:	e7bc      	b.n	8008bd0 <_dtoa_r+0x5e8>
 8008c56:	d10c      	bne.n	8008c72 <_dtoa_r+0x68a>
 8008c58:	4b98      	ldr	r3, [pc, #608]	@ (8008ebc <_dtoa_r+0x8d4>)
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c60:	f7f7 fcca 	bl	80005f8 <__aeabi_dmul>
 8008c64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c68:	f7f7 ff4c 	bl	8000b04 <__aeabi_dcmpge>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	f000 8157 	beq.w	8008f20 <_dtoa_r+0x938>
 8008c72:	2400      	movs	r4, #0
 8008c74:	4625      	mov	r5, r4
 8008c76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c78:	43db      	mvns	r3, r3
 8008c7a:	9304      	str	r3, [sp, #16]
 8008c7c:	4656      	mov	r6, sl
 8008c7e:	2700      	movs	r7, #0
 8008c80:	4621      	mov	r1, r4
 8008c82:	4658      	mov	r0, fp
 8008c84:	f000 fbb4 	bl	80093f0 <_Bfree>
 8008c88:	2d00      	cmp	r5, #0
 8008c8a:	d0dc      	beq.n	8008c46 <_dtoa_r+0x65e>
 8008c8c:	b12f      	cbz	r7, 8008c9a <_dtoa_r+0x6b2>
 8008c8e:	42af      	cmp	r7, r5
 8008c90:	d003      	beq.n	8008c9a <_dtoa_r+0x6b2>
 8008c92:	4639      	mov	r1, r7
 8008c94:	4658      	mov	r0, fp
 8008c96:	f000 fbab 	bl	80093f0 <_Bfree>
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	4658      	mov	r0, fp
 8008c9e:	f000 fba7 	bl	80093f0 <_Bfree>
 8008ca2:	e7d0      	b.n	8008c46 <_dtoa_r+0x65e>
 8008ca4:	9704      	str	r7, [sp, #16]
 8008ca6:	4633      	mov	r3, r6
 8008ca8:	461e      	mov	r6, r3
 8008caa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cae:	2a39      	cmp	r2, #57	@ 0x39
 8008cb0:	d107      	bne.n	8008cc2 <_dtoa_r+0x6da>
 8008cb2:	459a      	cmp	sl, r3
 8008cb4:	d1f8      	bne.n	8008ca8 <_dtoa_r+0x6c0>
 8008cb6:	9a04      	ldr	r2, [sp, #16]
 8008cb8:	3201      	adds	r2, #1
 8008cba:	9204      	str	r2, [sp, #16]
 8008cbc:	2230      	movs	r2, #48	@ 0x30
 8008cbe:	f88a 2000 	strb.w	r2, [sl]
 8008cc2:	781a      	ldrb	r2, [r3, #0]
 8008cc4:	3201      	adds	r2, #1
 8008cc6:	701a      	strb	r2, [r3, #0]
 8008cc8:	e7bd      	b.n	8008c46 <_dtoa_r+0x65e>
 8008cca:	4b7b      	ldr	r3, [pc, #492]	@ (8008eb8 <_dtoa_r+0x8d0>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f7f7 fc93 	bl	80005f8 <__aeabi_dmul>
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	4604      	mov	r4, r0
 8008cd8:	460d      	mov	r5, r1
 8008cda:	f7f7 fef5 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	f43f aebb 	beq.w	8008a5a <_dtoa_r+0x472>
 8008ce4:	e6f0      	b.n	8008ac8 <_dtoa_r+0x4e0>
 8008ce6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ce8:	2a00      	cmp	r2, #0
 8008cea:	f000 80db 	beq.w	8008ea4 <_dtoa_r+0x8bc>
 8008cee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cf0:	2a01      	cmp	r2, #1
 8008cf2:	f300 80bf 	bgt.w	8008e74 <_dtoa_r+0x88c>
 8008cf6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008cf8:	2a00      	cmp	r2, #0
 8008cfa:	f000 80b7 	beq.w	8008e6c <_dtoa_r+0x884>
 8008cfe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008d02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008d04:	4646      	mov	r6, r8
 8008d06:	9a08      	ldr	r2, [sp, #32]
 8008d08:	2101      	movs	r1, #1
 8008d0a:	441a      	add	r2, r3
 8008d0c:	4658      	mov	r0, fp
 8008d0e:	4498      	add	r8, r3
 8008d10:	9208      	str	r2, [sp, #32]
 8008d12:	f000 fc21 	bl	8009558 <__i2b>
 8008d16:	4605      	mov	r5, r0
 8008d18:	b15e      	cbz	r6, 8008d32 <_dtoa_r+0x74a>
 8008d1a:	9b08      	ldr	r3, [sp, #32]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	dd08      	ble.n	8008d32 <_dtoa_r+0x74a>
 8008d20:	42b3      	cmp	r3, r6
 8008d22:	9a08      	ldr	r2, [sp, #32]
 8008d24:	bfa8      	it	ge
 8008d26:	4633      	movge	r3, r6
 8008d28:	eba8 0803 	sub.w	r8, r8, r3
 8008d2c:	1af6      	subs	r6, r6, r3
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	9308      	str	r3, [sp, #32]
 8008d32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d34:	b1f3      	cbz	r3, 8008d74 <_dtoa_r+0x78c>
 8008d36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 80b7 	beq.w	8008eac <_dtoa_r+0x8c4>
 8008d3e:	b18c      	cbz	r4, 8008d64 <_dtoa_r+0x77c>
 8008d40:	4629      	mov	r1, r5
 8008d42:	4622      	mov	r2, r4
 8008d44:	4658      	mov	r0, fp
 8008d46:	f000 fcc7 	bl	80096d8 <__pow5mult>
 8008d4a:	464a      	mov	r2, r9
 8008d4c:	4601      	mov	r1, r0
 8008d4e:	4605      	mov	r5, r0
 8008d50:	4658      	mov	r0, fp
 8008d52:	f000 fc17 	bl	8009584 <__multiply>
 8008d56:	4649      	mov	r1, r9
 8008d58:	9004      	str	r0, [sp, #16]
 8008d5a:	4658      	mov	r0, fp
 8008d5c:	f000 fb48 	bl	80093f0 <_Bfree>
 8008d60:	9b04      	ldr	r3, [sp, #16]
 8008d62:	4699      	mov	r9, r3
 8008d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d66:	1b1a      	subs	r2, r3, r4
 8008d68:	d004      	beq.n	8008d74 <_dtoa_r+0x78c>
 8008d6a:	4649      	mov	r1, r9
 8008d6c:	4658      	mov	r0, fp
 8008d6e:	f000 fcb3 	bl	80096d8 <__pow5mult>
 8008d72:	4681      	mov	r9, r0
 8008d74:	2101      	movs	r1, #1
 8008d76:	4658      	mov	r0, fp
 8008d78:	f000 fbee 	bl	8009558 <__i2b>
 8008d7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d7e:	4604      	mov	r4, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f000 81cf 	beq.w	8009124 <_dtoa_r+0xb3c>
 8008d86:	461a      	mov	r2, r3
 8008d88:	4601      	mov	r1, r0
 8008d8a:	4658      	mov	r0, fp
 8008d8c:	f000 fca4 	bl	80096d8 <__pow5mult>
 8008d90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	4604      	mov	r4, r0
 8008d96:	f300 8095 	bgt.w	8008ec4 <_dtoa_r+0x8dc>
 8008d9a:	9b02      	ldr	r3, [sp, #8]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f040 8087 	bne.w	8008eb0 <_dtoa_r+0x8c8>
 8008da2:	9b03      	ldr	r3, [sp, #12]
 8008da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f040 8089 	bne.w	8008ec0 <_dtoa_r+0x8d8>
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008db4:	0d1b      	lsrs	r3, r3, #20
 8008db6:	051b      	lsls	r3, r3, #20
 8008db8:	b12b      	cbz	r3, 8008dc6 <_dtoa_r+0x7de>
 8008dba:	9b08      	ldr	r3, [sp, #32]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	9308      	str	r3, [sp, #32]
 8008dc0:	f108 0801 	add.w	r8, r8, #1
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f000 81b0 	beq.w	8009130 <_dtoa_r+0xb48>
 8008dd0:	6923      	ldr	r3, [r4, #16]
 8008dd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008dd6:	6918      	ldr	r0, [r3, #16]
 8008dd8:	f000 fb72 	bl	80094c0 <__hi0bits>
 8008ddc:	f1c0 0020 	rsb	r0, r0, #32
 8008de0:	9b08      	ldr	r3, [sp, #32]
 8008de2:	4418      	add	r0, r3
 8008de4:	f010 001f 	ands.w	r0, r0, #31
 8008de8:	d077      	beq.n	8008eda <_dtoa_r+0x8f2>
 8008dea:	f1c0 0320 	rsb	r3, r0, #32
 8008dee:	2b04      	cmp	r3, #4
 8008df0:	dd6b      	ble.n	8008eca <_dtoa_r+0x8e2>
 8008df2:	9b08      	ldr	r3, [sp, #32]
 8008df4:	f1c0 001c 	rsb	r0, r0, #28
 8008df8:	4403      	add	r3, r0
 8008dfa:	4480      	add	r8, r0
 8008dfc:	4406      	add	r6, r0
 8008dfe:	9308      	str	r3, [sp, #32]
 8008e00:	f1b8 0f00 	cmp.w	r8, #0
 8008e04:	dd05      	ble.n	8008e12 <_dtoa_r+0x82a>
 8008e06:	4649      	mov	r1, r9
 8008e08:	4642      	mov	r2, r8
 8008e0a:	4658      	mov	r0, fp
 8008e0c:	f000 fcbe 	bl	800978c <__lshift>
 8008e10:	4681      	mov	r9, r0
 8008e12:	9b08      	ldr	r3, [sp, #32]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	dd05      	ble.n	8008e24 <_dtoa_r+0x83c>
 8008e18:	4621      	mov	r1, r4
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	4658      	mov	r0, fp
 8008e1e:	f000 fcb5 	bl	800978c <__lshift>
 8008e22:	4604      	mov	r4, r0
 8008e24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d059      	beq.n	8008ede <_dtoa_r+0x8f6>
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	4648      	mov	r0, r9
 8008e2e:	f000 fd19 	bl	8009864 <__mcmp>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	da53      	bge.n	8008ede <_dtoa_r+0x8f6>
 8008e36:	1e7b      	subs	r3, r7, #1
 8008e38:	9304      	str	r3, [sp, #16]
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	220a      	movs	r2, #10
 8008e40:	4658      	mov	r0, fp
 8008e42:	f000 faf7 	bl	8009434 <__multadd>
 8008e46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e48:	4681      	mov	r9, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 8172 	beq.w	8009134 <_dtoa_r+0xb4c>
 8008e50:	2300      	movs	r3, #0
 8008e52:	4629      	mov	r1, r5
 8008e54:	220a      	movs	r2, #10
 8008e56:	4658      	mov	r0, fp
 8008e58:	f000 faec 	bl	8009434 <__multadd>
 8008e5c:	9b00      	ldr	r3, [sp, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	4605      	mov	r5, r0
 8008e62:	dc67      	bgt.n	8008f34 <_dtoa_r+0x94c>
 8008e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	dc41      	bgt.n	8008eee <_dtoa_r+0x906>
 8008e6a:	e063      	b.n	8008f34 <_dtoa_r+0x94c>
 8008e6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008e6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008e72:	e746      	b.n	8008d02 <_dtoa_r+0x71a>
 8008e74:	9b07      	ldr	r3, [sp, #28]
 8008e76:	1e5c      	subs	r4, r3, #1
 8008e78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e7a:	42a3      	cmp	r3, r4
 8008e7c:	bfbf      	itttt	lt
 8008e7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008e80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008e82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008e84:	1ae3      	sublt	r3, r4, r3
 8008e86:	bfb4      	ite	lt
 8008e88:	18d2      	addlt	r2, r2, r3
 8008e8a:	1b1c      	subge	r4, r3, r4
 8008e8c:	9b07      	ldr	r3, [sp, #28]
 8008e8e:	bfbc      	itt	lt
 8008e90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008e92:	2400      	movlt	r4, #0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	bfb5      	itete	lt
 8008e98:	eba8 0603 	sublt.w	r6, r8, r3
 8008e9c:	9b07      	ldrge	r3, [sp, #28]
 8008e9e:	2300      	movlt	r3, #0
 8008ea0:	4646      	movge	r6, r8
 8008ea2:	e730      	b.n	8008d06 <_dtoa_r+0x71e>
 8008ea4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008ea6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008ea8:	4646      	mov	r6, r8
 8008eaa:	e735      	b.n	8008d18 <_dtoa_r+0x730>
 8008eac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008eae:	e75c      	b.n	8008d6a <_dtoa_r+0x782>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	e788      	b.n	8008dc6 <_dtoa_r+0x7de>
 8008eb4:	3fe00000 	.word	0x3fe00000
 8008eb8:	40240000 	.word	0x40240000
 8008ebc:	40140000 	.word	0x40140000
 8008ec0:	9b02      	ldr	r3, [sp, #8]
 8008ec2:	e780      	b.n	8008dc6 <_dtoa_r+0x7de>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ec8:	e782      	b.n	8008dd0 <_dtoa_r+0x7e8>
 8008eca:	d099      	beq.n	8008e00 <_dtoa_r+0x818>
 8008ecc:	9a08      	ldr	r2, [sp, #32]
 8008ece:	331c      	adds	r3, #28
 8008ed0:	441a      	add	r2, r3
 8008ed2:	4498      	add	r8, r3
 8008ed4:	441e      	add	r6, r3
 8008ed6:	9208      	str	r2, [sp, #32]
 8008ed8:	e792      	b.n	8008e00 <_dtoa_r+0x818>
 8008eda:	4603      	mov	r3, r0
 8008edc:	e7f6      	b.n	8008ecc <_dtoa_r+0x8e4>
 8008ede:	9b07      	ldr	r3, [sp, #28]
 8008ee0:	9704      	str	r7, [sp, #16]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	dc20      	bgt.n	8008f28 <_dtoa_r+0x940>
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	dd1e      	ble.n	8008f2c <_dtoa_r+0x944>
 8008eee:	9b00      	ldr	r3, [sp, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f47f aec0 	bne.w	8008c76 <_dtoa_r+0x68e>
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	2205      	movs	r2, #5
 8008efa:	4658      	mov	r0, fp
 8008efc:	f000 fa9a 	bl	8009434 <__multadd>
 8008f00:	4601      	mov	r1, r0
 8008f02:	4604      	mov	r4, r0
 8008f04:	4648      	mov	r0, r9
 8008f06:	f000 fcad 	bl	8009864 <__mcmp>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	f77f aeb3 	ble.w	8008c76 <_dtoa_r+0x68e>
 8008f10:	4656      	mov	r6, sl
 8008f12:	2331      	movs	r3, #49	@ 0x31
 8008f14:	f806 3b01 	strb.w	r3, [r6], #1
 8008f18:	9b04      	ldr	r3, [sp, #16]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	9304      	str	r3, [sp, #16]
 8008f1e:	e6ae      	b.n	8008c7e <_dtoa_r+0x696>
 8008f20:	9c07      	ldr	r4, [sp, #28]
 8008f22:	9704      	str	r7, [sp, #16]
 8008f24:	4625      	mov	r5, r4
 8008f26:	e7f3      	b.n	8008f10 <_dtoa_r+0x928>
 8008f28:	9b07      	ldr	r3, [sp, #28]
 8008f2a:	9300      	str	r3, [sp, #0]
 8008f2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f000 8104 	beq.w	800913c <_dtoa_r+0xb54>
 8008f34:	2e00      	cmp	r6, #0
 8008f36:	dd05      	ble.n	8008f44 <_dtoa_r+0x95c>
 8008f38:	4629      	mov	r1, r5
 8008f3a:	4632      	mov	r2, r6
 8008f3c:	4658      	mov	r0, fp
 8008f3e:	f000 fc25 	bl	800978c <__lshift>
 8008f42:	4605      	mov	r5, r0
 8008f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d05a      	beq.n	8009000 <_dtoa_r+0xa18>
 8008f4a:	6869      	ldr	r1, [r5, #4]
 8008f4c:	4658      	mov	r0, fp
 8008f4e:	f000 fa0f 	bl	8009370 <_Balloc>
 8008f52:	4606      	mov	r6, r0
 8008f54:	b928      	cbnz	r0, 8008f62 <_dtoa_r+0x97a>
 8008f56:	4b84      	ldr	r3, [pc, #528]	@ (8009168 <_dtoa_r+0xb80>)
 8008f58:	4602      	mov	r2, r0
 8008f5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008f5e:	f7ff bb5a 	b.w	8008616 <_dtoa_r+0x2e>
 8008f62:	692a      	ldr	r2, [r5, #16]
 8008f64:	3202      	adds	r2, #2
 8008f66:	0092      	lsls	r2, r2, #2
 8008f68:	f105 010c 	add.w	r1, r5, #12
 8008f6c:	300c      	adds	r0, #12
 8008f6e:	f001 f975 	bl	800a25c <memcpy>
 8008f72:	2201      	movs	r2, #1
 8008f74:	4631      	mov	r1, r6
 8008f76:	4658      	mov	r0, fp
 8008f78:	f000 fc08 	bl	800978c <__lshift>
 8008f7c:	f10a 0301 	add.w	r3, sl, #1
 8008f80:	9307      	str	r3, [sp, #28]
 8008f82:	9b00      	ldr	r3, [sp, #0]
 8008f84:	4453      	add	r3, sl
 8008f86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f88:	9b02      	ldr	r3, [sp, #8]
 8008f8a:	f003 0301 	and.w	r3, r3, #1
 8008f8e:	462f      	mov	r7, r5
 8008f90:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f92:	4605      	mov	r5, r0
 8008f94:	9b07      	ldr	r3, [sp, #28]
 8008f96:	4621      	mov	r1, r4
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	4648      	mov	r0, r9
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	f7ff fa9a 	bl	80084d6 <quorem>
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	9002      	str	r0, [sp, #8]
 8008fa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008faa:	4648      	mov	r0, r9
 8008fac:	f000 fc5a 	bl	8009864 <__mcmp>
 8008fb0:	462a      	mov	r2, r5
 8008fb2:	9008      	str	r0, [sp, #32]
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	4658      	mov	r0, fp
 8008fb8:	f000 fc70 	bl	800989c <__mdiff>
 8008fbc:	68c2      	ldr	r2, [r0, #12]
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	bb02      	cbnz	r2, 8009004 <_dtoa_r+0xa1c>
 8008fc2:	4601      	mov	r1, r0
 8008fc4:	4648      	mov	r0, r9
 8008fc6:	f000 fc4d 	bl	8009864 <__mcmp>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	4631      	mov	r1, r6
 8008fce:	4658      	mov	r0, fp
 8008fd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fd2:	f000 fa0d 	bl	80093f0 <_Bfree>
 8008fd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fda:	9e07      	ldr	r6, [sp, #28]
 8008fdc:	ea43 0102 	orr.w	r1, r3, r2
 8008fe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fe2:	4319      	orrs	r1, r3
 8008fe4:	d110      	bne.n	8009008 <_dtoa_r+0xa20>
 8008fe6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008fea:	d029      	beq.n	8009040 <_dtoa_r+0xa58>
 8008fec:	9b08      	ldr	r3, [sp, #32]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	dd02      	ble.n	8008ff8 <_dtoa_r+0xa10>
 8008ff2:	9b02      	ldr	r3, [sp, #8]
 8008ff4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008ff8:	9b00      	ldr	r3, [sp, #0]
 8008ffa:	f883 8000 	strb.w	r8, [r3]
 8008ffe:	e63f      	b.n	8008c80 <_dtoa_r+0x698>
 8009000:	4628      	mov	r0, r5
 8009002:	e7bb      	b.n	8008f7c <_dtoa_r+0x994>
 8009004:	2201      	movs	r2, #1
 8009006:	e7e1      	b.n	8008fcc <_dtoa_r+0x9e4>
 8009008:	9b08      	ldr	r3, [sp, #32]
 800900a:	2b00      	cmp	r3, #0
 800900c:	db04      	blt.n	8009018 <_dtoa_r+0xa30>
 800900e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009010:	430b      	orrs	r3, r1
 8009012:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009014:	430b      	orrs	r3, r1
 8009016:	d120      	bne.n	800905a <_dtoa_r+0xa72>
 8009018:	2a00      	cmp	r2, #0
 800901a:	dded      	ble.n	8008ff8 <_dtoa_r+0xa10>
 800901c:	4649      	mov	r1, r9
 800901e:	2201      	movs	r2, #1
 8009020:	4658      	mov	r0, fp
 8009022:	f000 fbb3 	bl	800978c <__lshift>
 8009026:	4621      	mov	r1, r4
 8009028:	4681      	mov	r9, r0
 800902a:	f000 fc1b 	bl	8009864 <__mcmp>
 800902e:	2800      	cmp	r0, #0
 8009030:	dc03      	bgt.n	800903a <_dtoa_r+0xa52>
 8009032:	d1e1      	bne.n	8008ff8 <_dtoa_r+0xa10>
 8009034:	f018 0f01 	tst.w	r8, #1
 8009038:	d0de      	beq.n	8008ff8 <_dtoa_r+0xa10>
 800903a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800903e:	d1d8      	bne.n	8008ff2 <_dtoa_r+0xa0a>
 8009040:	9a00      	ldr	r2, [sp, #0]
 8009042:	2339      	movs	r3, #57	@ 0x39
 8009044:	7013      	strb	r3, [r2, #0]
 8009046:	4633      	mov	r3, r6
 8009048:	461e      	mov	r6, r3
 800904a:	3b01      	subs	r3, #1
 800904c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009050:	2a39      	cmp	r2, #57	@ 0x39
 8009052:	d052      	beq.n	80090fa <_dtoa_r+0xb12>
 8009054:	3201      	adds	r2, #1
 8009056:	701a      	strb	r2, [r3, #0]
 8009058:	e612      	b.n	8008c80 <_dtoa_r+0x698>
 800905a:	2a00      	cmp	r2, #0
 800905c:	dd07      	ble.n	800906e <_dtoa_r+0xa86>
 800905e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009062:	d0ed      	beq.n	8009040 <_dtoa_r+0xa58>
 8009064:	9a00      	ldr	r2, [sp, #0]
 8009066:	f108 0301 	add.w	r3, r8, #1
 800906a:	7013      	strb	r3, [r2, #0]
 800906c:	e608      	b.n	8008c80 <_dtoa_r+0x698>
 800906e:	9b07      	ldr	r3, [sp, #28]
 8009070:	9a07      	ldr	r2, [sp, #28]
 8009072:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009078:	4293      	cmp	r3, r2
 800907a:	d028      	beq.n	80090ce <_dtoa_r+0xae6>
 800907c:	4649      	mov	r1, r9
 800907e:	2300      	movs	r3, #0
 8009080:	220a      	movs	r2, #10
 8009082:	4658      	mov	r0, fp
 8009084:	f000 f9d6 	bl	8009434 <__multadd>
 8009088:	42af      	cmp	r7, r5
 800908a:	4681      	mov	r9, r0
 800908c:	f04f 0300 	mov.w	r3, #0
 8009090:	f04f 020a 	mov.w	r2, #10
 8009094:	4639      	mov	r1, r7
 8009096:	4658      	mov	r0, fp
 8009098:	d107      	bne.n	80090aa <_dtoa_r+0xac2>
 800909a:	f000 f9cb 	bl	8009434 <__multadd>
 800909e:	4607      	mov	r7, r0
 80090a0:	4605      	mov	r5, r0
 80090a2:	9b07      	ldr	r3, [sp, #28]
 80090a4:	3301      	adds	r3, #1
 80090a6:	9307      	str	r3, [sp, #28]
 80090a8:	e774      	b.n	8008f94 <_dtoa_r+0x9ac>
 80090aa:	f000 f9c3 	bl	8009434 <__multadd>
 80090ae:	4629      	mov	r1, r5
 80090b0:	4607      	mov	r7, r0
 80090b2:	2300      	movs	r3, #0
 80090b4:	220a      	movs	r2, #10
 80090b6:	4658      	mov	r0, fp
 80090b8:	f000 f9bc 	bl	8009434 <__multadd>
 80090bc:	4605      	mov	r5, r0
 80090be:	e7f0      	b.n	80090a2 <_dtoa_r+0xaba>
 80090c0:	9b00      	ldr	r3, [sp, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	bfcc      	ite	gt
 80090c6:	461e      	movgt	r6, r3
 80090c8:	2601      	movle	r6, #1
 80090ca:	4456      	add	r6, sl
 80090cc:	2700      	movs	r7, #0
 80090ce:	4649      	mov	r1, r9
 80090d0:	2201      	movs	r2, #1
 80090d2:	4658      	mov	r0, fp
 80090d4:	f000 fb5a 	bl	800978c <__lshift>
 80090d8:	4621      	mov	r1, r4
 80090da:	4681      	mov	r9, r0
 80090dc:	f000 fbc2 	bl	8009864 <__mcmp>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	dcb0      	bgt.n	8009046 <_dtoa_r+0xa5e>
 80090e4:	d102      	bne.n	80090ec <_dtoa_r+0xb04>
 80090e6:	f018 0f01 	tst.w	r8, #1
 80090ea:	d1ac      	bne.n	8009046 <_dtoa_r+0xa5e>
 80090ec:	4633      	mov	r3, r6
 80090ee:	461e      	mov	r6, r3
 80090f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090f4:	2a30      	cmp	r2, #48	@ 0x30
 80090f6:	d0fa      	beq.n	80090ee <_dtoa_r+0xb06>
 80090f8:	e5c2      	b.n	8008c80 <_dtoa_r+0x698>
 80090fa:	459a      	cmp	sl, r3
 80090fc:	d1a4      	bne.n	8009048 <_dtoa_r+0xa60>
 80090fe:	9b04      	ldr	r3, [sp, #16]
 8009100:	3301      	adds	r3, #1
 8009102:	9304      	str	r3, [sp, #16]
 8009104:	2331      	movs	r3, #49	@ 0x31
 8009106:	f88a 3000 	strb.w	r3, [sl]
 800910a:	e5b9      	b.n	8008c80 <_dtoa_r+0x698>
 800910c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800910e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800916c <_dtoa_r+0xb84>
 8009112:	b11b      	cbz	r3, 800911c <_dtoa_r+0xb34>
 8009114:	f10a 0308 	add.w	r3, sl, #8
 8009118:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800911a:	6013      	str	r3, [r2, #0]
 800911c:	4650      	mov	r0, sl
 800911e:	b019      	add	sp, #100	@ 0x64
 8009120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009126:	2b01      	cmp	r3, #1
 8009128:	f77f ae37 	ble.w	8008d9a <_dtoa_r+0x7b2>
 800912c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800912e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009130:	2001      	movs	r0, #1
 8009132:	e655      	b.n	8008de0 <_dtoa_r+0x7f8>
 8009134:	9b00      	ldr	r3, [sp, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	f77f aed6 	ble.w	8008ee8 <_dtoa_r+0x900>
 800913c:	4656      	mov	r6, sl
 800913e:	4621      	mov	r1, r4
 8009140:	4648      	mov	r0, r9
 8009142:	f7ff f9c8 	bl	80084d6 <quorem>
 8009146:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800914a:	f806 8b01 	strb.w	r8, [r6], #1
 800914e:	9b00      	ldr	r3, [sp, #0]
 8009150:	eba6 020a 	sub.w	r2, r6, sl
 8009154:	4293      	cmp	r3, r2
 8009156:	ddb3      	ble.n	80090c0 <_dtoa_r+0xad8>
 8009158:	4649      	mov	r1, r9
 800915a:	2300      	movs	r3, #0
 800915c:	220a      	movs	r2, #10
 800915e:	4658      	mov	r0, fp
 8009160:	f000 f968 	bl	8009434 <__multadd>
 8009164:	4681      	mov	r9, r0
 8009166:	e7ea      	b.n	800913e <_dtoa_r+0xb56>
 8009168:	0800b309 	.word	0x0800b309
 800916c:	0800b28d 	.word	0x0800b28d

08009170 <_free_r>:
 8009170:	b538      	push	{r3, r4, r5, lr}
 8009172:	4605      	mov	r5, r0
 8009174:	2900      	cmp	r1, #0
 8009176:	d041      	beq.n	80091fc <_free_r+0x8c>
 8009178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800917c:	1f0c      	subs	r4, r1, #4
 800917e:	2b00      	cmp	r3, #0
 8009180:	bfb8      	it	lt
 8009182:	18e4      	addlt	r4, r4, r3
 8009184:	f000 f8e8 	bl	8009358 <__malloc_lock>
 8009188:	4a1d      	ldr	r2, [pc, #116]	@ (8009200 <_free_r+0x90>)
 800918a:	6813      	ldr	r3, [r2, #0]
 800918c:	b933      	cbnz	r3, 800919c <_free_r+0x2c>
 800918e:	6063      	str	r3, [r4, #4]
 8009190:	6014      	str	r4, [r2, #0]
 8009192:	4628      	mov	r0, r5
 8009194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009198:	f000 b8e4 	b.w	8009364 <__malloc_unlock>
 800919c:	42a3      	cmp	r3, r4
 800919e:	d908      	bls.n	80091b2 <_free_r+0x42>
 80091a0:	6820      	ldr	r0, [r4, #0]
 80091a2:	1821      	adds	r1, r4, r0
 80091a4:	428b      	cmp	r3, r1
 80091a6:	bf01      	itttt	eq
 80091a8:	6819      	ldreq	r1, [r3, #0]
 80091aa:	685b      	ldreq	r3, [r3, #4]
 80091ac:	1809      	addeq	r1, r1, r0
 80091ae:	6021      	streq	r1, [r4, #0]
 80091b0:	e7ed      	b.n	800918e <_free_r+0x1e>
 80091b2:	461a      	mov	r2, r3
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	b10b      	cbz	r3, 80091bc <_free_r+0x4c>
 80091b8:	42a3      	cmp	r3, r4
 80091ba:	d9fa      	bls.n	80091b2 <_free_r+0x42>
 80091bc:	6811      	ldr	r1, [r2, #0]
 80091be:	1850      	adds	r0, r2, r1
 80091c0:	42a0      	cmp	r0, r4
 80091c2:	d10b      	bne.n	80091dc <_free_r+0x6c>
 80091c4:	6820      	ldr	r0, [r4, #0]
 80091c6:	4401      	add	r1, r0
 80091c8:	1850      	adds	r0, r2, r1
 80091ca:	4283      	cmp	r3, r0
 80091cc:	6011      	str	r1, [r2, #0]
 80091ce:	d1e0      	bne.n	8009192 <_free_r+0x22>
 80091d0:	6818      	ldr	r0, [r3, #0]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	6053      	str	r3, [r2, #4]
 80091d6:	4408      	add	r0, r1
 80091d8:	6010      	str	r0, [r2, #0]
 80091da:	e7da      	b.n	8009192 <_free_r+0x22>
 80091dc:	d902      	bls.n	80091e4 <_free_r+0x74>
 80091de:	230c      	movs	r3, #12
 80091e0:	602b      	str	r3, [r5, #0]
 80091e2:	e7d6      	b.n	8009192 <_free_r+0x22>
 80091e4:	6820      	ldr	r0, [r4, #0]
 80091e6:	1821      	adds	r1, r4, r0
 80091e8:	428b      	cmp	r3, r1
 80091ea:	bf04      	itt	eq
 80091ec:	6819      	ldreq	r1, [r3, #0]
 80091ee:	685b      	ldreq	r3, [r3, #4]
 80091f0:	6063      	str	r3, [r4, #4]
 80091f2:	bf04      	itt	eq
 80091f4:	1809      	addeq	r1, r1, r0
 80091f6:	6021      	streq	r1, [r4, #0]
 80091f8:	6054      	str	r4, [r2, #4]
 80091fa:	e7ca      	b.n	8009192 <_free_r+0x22>
 80091fc:	bd38      	pop	{r3, r4, r5, pc}
 80091fe:	bf00      	nop
 8009200:	200007c4 	.word	0x200007c4

08009204 <malloc>:
 8009204:	4b02      	ldr	r3, [pc, #8]	@ (8009210 <malloc+0xc>)
 8009206:	4601      	mov	r1, r0
 8009208:	6818      	ldr	r0, [r3, #0]
 800920a:	f000 b825 	b.w	8009258 <_malloc_r>
 800920e:	bf00      	nop
 8009210:	20000024 	.word	0x20000024

08009214 <sbrk_aligned>:
 8009214:	b570      	push	{r4, r5, r6, lr}
 8009216:	4e0f      	ldr	r6, [pc, #60]	@ (8009254 <sbrk_aligned+0x40>)
 8009218:	460c      	mov	r4, r1
 800921a:	6831      	ldr	r1, [r6, #0]
 800921c:	4605      	mov	r5, r0
 800921e:	b911      	cbnz	r1, 8009226 <sbrk_aligned+0x12>
 8009220:	f001 f80c 	bl	800a23c <_sbrk_r>
 8009224:	6030      	str	r0, [r6, #0]
 8009226:	4621      	mov	r1, r4
 8009228:	4628      	mov	r0, r5
 800922a:	f001 f807 	bl	800a23c <_sbrk_r>
 800922e:	1c43      	adds	r3, r0, #1
 8009230:	d103      	bne.n	800923a <sbrk_aligned+0x26>
 8009232:	f04f 34ff 	mov.w	r4, #4294967295
 8009236:	4620      	mov	r0, r4
 8009238:	bd70      	pop	{r4, r5, r6, pc}
 800923a:	1cc4      	adds	r4, r0, #3
 800923c:	f024 0403 	bic.w	r4, r4, #3
 8009240:	42a0      	cmp	r0, r4
 8009242:	d0f8      	beq.n	8009236 <sbrk_aligned+0x22>
 8009244:	1a21      	subs	r1, r4, r0
 8009246:	4628      	mov	r0, r5
 8009248:	f000 fff8 	bl	800a23c <_sbrk_r>
 800924c:	3001      	adds	r0, #1
 800924e:	d1f2      	bne.n	8009236 <sbrk_aligned+0x22>
 8009250:	e7ef      	b.n	8009232 <sbrk_aligned+0x1e>
 8009252:	bf00      	nop
 8009254:	200007c0 	.word	0x200007c0

08009258 <_malloc_r>:
 8009258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800925c:	1ccd      	adds	r5, r1, #3
 800925e:	f025 0503 	bic.w	r5, r5, #3
 8009262:	3508      	adds	r5, #8
 8009264:	2d0c      	cmp	r5, #12
 8009266:	bf38      	it	cc
 8009268:	250c      	movcc	r5, #12
 800926a:	2d00      	cmp	r5, #0
 800926c:	4606      	mov	r6, r0
 800926e:	db01      	blt.n	8009274 <_malloc_r+0x1c>
 8009270:	42a9      	cmp	r1, r5
 8009272:	d904      	bls.n	800927e <_malloc_r+0x26>
 8009274:	230c      	movs	r3, #12
 8009276:	6033      	str	r3, [r6, #0]
 8009278:	2000      	movs	r0, #0
 800927a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800927e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009354 <_malloc_r+0xfc>
 8009282:	f000 f869 	bl	8009358 <__malloc_lock>
 8009286:	f8d8 3000 	ldr.w	r3, [r8]
 800928a:	461c      	mov	r4, r3
 800928c:	bb44      	cbnz	r4, 80092e0 <_malloc_r+0x88>
 800928e:	4629      	mov	r1, r5
 8009290:	4630      	mov	r0, r6
 8009292:	f7ff ffbf 	bl	8009214 <sbrk_aligned>
 8009296:	1c43      	adds	r3, r0, #1
 8009298:	4604      	mov	r4, r0
 800929a:	d158      	bne.n	800934e <_malloc_r+0xf6>
 800929c:	f8d8 4000 	ldr.w	r4, [r8]
 80092a0:	4627      	mov	r7, r4
 80092a2:	2f00      	cmp	r7, #0
 80092a4:	d143      	bne.n	800932e <_malloc_r+0xd6>
 80092a6:	2c00      	cmp	r4, #0
 80092a8:	d04b      	beq.n	8009342 <_malloc_r+0xea>
 80092aa:	6823      	ldr	r3, [r4, #0]
 80092ac:	4639      	mov	r1, r7
 80092ae:	4630      	mov	r0, r6
 80092b0:	eb04 0903 	add.w	r9, r4, r3
 80092b4:	f000 ffc2 	bl	800a23c <_sbrk_r>
 80092b8:	4581      	cmp	r9, r0
 80092ba:	d142      	bne.n	8009342 <_malloc_r+0xea>
 80092bc:	6821      	ldr	r1, [r4, #0]
 80092be:	1a6d      	subs	r5, r5, r1
 80092c0:	4629      	mov	r1, r5
 80092c2:	4630      	mov	r0, r6
 80092c4:	f7ff ffa6 	bl	8009214 <sbrk_aligned>
 80092c8:	3001      	adds	r0, #1
 80092ca:	d03a      	beq.n	8009342 <_malloc_r+0xea>
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	442b      	add	r3, r5
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	f8d8 3000 	ldr.w	r3, [r8]
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	bb62      	cbnz	r2, 8009334 <_malloc_r+0xdc>
 80092da:	f8c8 7000 	str.w	r7, [r8]
 80092de:	e00f      	b.n	8009300 <_malloc_r+0xa8>
 80092e0:	6822      	ldr	r2, [r4, #0]
 80092e2:	1b52      	subs	r2, r2, r5
 80092e4:	d420      	bmi.n	8009328 <_malloc_r+0xd0>
 80092e6:	2a0b      	cmp	r2, #11
 80092e8:	d917      	bls.n	800931a <_malloc_r+0xc2>
 80092ea:	1961      	adds	r1, r4, r5
 80092ec:	42a3      	cmp	r3, r4
 80092ee:	6025      	str	r5, [r4, #0]
 80092f0:	bf18      	it	ne
 80092f2:	6059      	strne	r1, [r3, #4]
 80092f4:	6863      	ldr	r3, [r4, #4]
 80092f6:	bf08      	it	eq
 80092f8:	f8c8 1000 	streq.w	r1, [r8]
 80092fc:	5162      	str	r2, [r4, r5]
 80092fe:	604b      	str	r3, [r1, #4]
 8009300:	4630      	mov	r0, r6
 8009302:	f000 f82f 	bl	8009364 <__malloc_unlock>
 8009306:	f104 000b 	add.w	r0, r4, #11
 800930a:	1d23      	adds	r3, r4, #4
 800930c:	f020 0007 	bic.w	r0, r0, #7
 8009310:	1ac2      	subs	r2, r0, r3
 8009312:	bf1c      	itt	ne
 8009314:	1a1b      	subne	r3, r3, r0
 8009316:	50a3      	strne	r3, [r4, r2]
 8009318:	e7af      	b.n	800927a <_malloc_r+0x22>
 800931a:	6862      	ldr	r2, [r4, #4]
 800931c:	42a3      	cmp	r3, r4
 800931e:	bf0c      	ite	eq
 8009320:	f8c8 2000 	streq.w	r2, [r8]
 8009324:	605a      	strne	r2, [r3, #4]
 8009326:	e7eb      	b.n	8009300 <_malloc_r+0xa8>
 8009328:	4623      	mov	r3, r4
 800932a:	6864      	ldr	r4, [r4, #4]
 800932c:	e7ae      	b.n	800928c <_malloc_r+0x34>
 800932e:	463c      	mov	r4, r7
 8009330:	687f      	ldr	r7, [r7, #4]
 8009332:	e7b6      	b.n	80092a2 <_malloc_r+0x4a>
 8009334:	461a      	mov	r2, r3
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	42a3      	cmp	r3, r4
 800933a:	d1fb      	bne.n	8009334 <_malloc_r+0xdc>
 800933c:	2300      	movs	r3, #0
 800933e:	6053      	str	r3, [r2, #4]
 8009340:	e7de      	b.n	8009300 <_malloc_r+0xa8>
 8009342:	230c      	movs	r3, #12
 8009344:	6033      	str	r3, [r6, #0]
 8009346:	4630      	mov	r0, r6
 8009348:	f000 f80c 	bl	8009364 <__malloc_unlock>
 800934c:	e794      	b.n	8009278 <_malloc_r+0x20>
 800934e:	6005      	str	r5, [r0, #0]
 8009350:	e7d6      	b.n	8009300 <_malloc_r+0xa8>
 8009352:	bf00      	nop
 8009354:	200007c4 	.word	0x200007c4

08009358 <__malloc_lock>:
 8009358:	4801      	ldr	r0, [pc, #4]	@ (8009360 <__malloc_lock+0x8>)
 800935a:	f7ff b8ba 	b.w	80084d2 <__retarget_lock_acquire_recursive>
 800935e:	bf00      	nop
 8009360:	200007bc 	.word	0x200007bc

08009364 <__malloc_unlock>:
 8009364:	4801      	ldr	r0, [pc, #4]	@ (800936c <__malloc_unlock+0x8>)
 8009366:	f7ff b8b5 	b.w	80084d4 <__retarget_lock_release_recursive>
 800936a:	bf00      	nop
 800936c:	200007bc 	.word	0x200007bc

08009370 <_Balloc>:
 8009370:	b570      	push	{r4, r5, r6, lr}
 8009372:	69c6      	ldr	r6, [r0, #28]
 8009374:	4604      	mov	r4, r0
 8009376:	460d      	mov	r5, r1
 8009378:	b976      	cbnz	r6, 8009398 <_Balloc+0x28>
 800937a:	2010      	movs	r0, #16
 800937c:	f7ff ff42 	bl	8009204 <malloc>
 8009380:	4602      	mov	r2, r0
 8009382:	61e0      	str	r0, [r4, #28]
 8009384:	b920      	cbnz	r0, 8009390 <_Balloc+0x20>
 8009386:	4b18      	ldr	r3, [pc, #96]	@ (80093e8 <_Balloc+0x78>)
 8009388:	4818      	ldr	r0, [pc, #96]	@ (80093ec <_Balloc+0x7c>)
 800938a:	216b      	movs	r1, #107	@ 0x6b
 800938c:	f000 ff74 	bl	800a278 <__assert_func>
 8009390:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009394:	6006      	str	r6, [r0, #0]
 8009396:	60c6      	str	r6, [r0, #12]
 8009398:	69e6      	ldr	r6, [r4, #28]
 800939a:	68f3      	ldr	r3, [r6, #12]
 800939c:	b183      	cbz	r3, 80093c0 <_Balloc+0x50>
 800939e:	69e3      	ldr	r3, [r4, #28]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093a6:	b9b8      	cbnz	r0, 80093d8 <_Balloc+0x68>
 80093a8:	2101      	movs	r1, #1
 80093aa:	fa01 f605 	lsl.w	r6, r1, r5
 80093ae:	1d72      	adds	r2, r6, #5
 80093b0:	0092      	lsls	r2, r2, #2
 80093b2:	4620      	mov	r0, r4
 80093b4:	f000 ff7e 	bl	800a2b4 <_calloc_r>
 80093b8:	b160      	cbz	r0, 80093d4 <_Balloc+0x64>
 80093ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093be:	e00e      	b.n	80093de <_Balloc+0x6e>
 80093c0:	2221      	movs	r2, #33	@ 0x21
 80093c2:	2104      	movs	r1, #4
 80093c4:	4620      	mov	r0, r4
 80093c6:	f000 ff75 	bl	800a2b4 <_calloc_r>
 80093ca:	69e3      	ldr	r3, [r4, #28]
 80093cc:	60f0      	str	r0, [r6, #12]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1e4      	bne.n	800939e <_Balloc+0x2e>
 80093d4:	2000      	movs	r0, #0
 80093d6:	bd70      	pop	{r4, r5, r6, pc}
 80093d8:	6802      	ldr	r2, [r0, #0]
 80093da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093de:	2300      	movs	r3, #0
 80093e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093e4:	e7f7      	b.n	80093d6 <_Balloc+0x66>
 80093e6:	bf00      	nop
 80093e8:	0800b29a 	.word	0x0800b29a
 80093ec:	0800b31a 	.word	0x0800b31a

080093f0 <_Bfree>:
 80093f0:	b570      	push	{r4, r5, r6, lr}
 80093f2:	69c6      	ldr	r6, [r0, #28]
 80093f4:	4605      	mov	r5, r0
 80093f6:	460c      	mov	r4, r1
 80093f8:	b976      	cbnz	r6, 8009418 <_Bfree+0x28>
 80093fa:	2010      	movs	r0, #16
 80093fc:	f7ff ff02 	bl	8009204 <malloc>
 8009400:	4602      	mov	r2, r0
 8009402:	61e8      	str	r0, [r5, #28]
 8009404:	b920      	cbnz	r0, 8009410 <_Bfree+0x20>
 8009406:	4b09      	ldr	r3, [pc, #36]	@ (800942c <_Bfree+0x3c>)
 8009408:	4809      	ldr	r0, [pc, #36]	@ (8009430 <_Bfree+0x40>)
 800940a:	218f      	movs	r1, #143	@ 0x8f
 800940c:	f000 ff34 	bl	800a278 <__assert_func>
 8009410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009414:	6006      	str	r6, [r0, #0]
 8009416:	60c6      	str	r6, [r0, #12]
 8009418:	b13c      	cbz	r4, 800942a <_Bfree+0x3a>
 800941a:	69eb      	ldr	r3, [r5, #28]
 800941c:	6862      	ldr	r2, [r4, #4]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009424:	6021      	str	r1, [r4, #0]
 8009426:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	0800b29a 	.word	0x0800b29a
 8009430:	0800b31a 	.word	0x0800b31a

08009434 <__multadd>:
 8009434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009438:	690d      	ldr	r5, [r1, #16]
 800943a:	4607      	mov	r7, r0
 800943c:	460c      	mov	r4, r1
 800943e:	461e      	mov	r6, r3
 8009440:	f101 0c14 	add.w	ip, r1, #20
 8009444:	2000      	movs	r0, #0
 8009446:	f8dc 3000 	ldr.w	r3, [ip]
 800944a:	b299      	uxth	r1, r3
 800944c:	fb02 6101 	mla	r1, r2, r1, r6
 8009450:	0c1e      	lsrs	r6, r3, #16
 8009452:	0c0b      	lsrs	r3, r1, #16
 8009454:	fb02 3306 	mla	r3, r2, r6, r3
 8009458:	b289      	uxth	r1, r1
 800945a:	3001      	adds	r0, #1
 800945c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009460:	4285      	cmp	r5, r0
 8009462:	f84c 1b04 	str.w	r1, [ip], #4
 8009466:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800946a:	dcec      	bgt.n	8009446 <__multadd+0x12>
 800946c:	b30e      	cbz	r6, 80094b2 <__multadd+0x7e>
 800946e:	68a3      	ldr	r3, [r4, #8]
 8009470:	42ab      	cmp	r3, r5
 8009472:	dc19      	bgt.n	80094a8 <__multadd+0x74>
 8009474:	6861      	ldr	r1, [r4, #4]
 8009476:	4638      	mov	r0, r7
 8009478:	3101      	adds	r1, #1
 800947a:	f7ff ff79 	bl	8009370 <_Balloc>
 800947e:	4680      	mov	r8, r0
 8009480:	b928      	cbnz	r0, 800948e <__multadd+0x5a>
 8009482:	4602      	mov	r2, r0
 8009484:	4b0c      	ldr	r3, [pc, #48]	@ (80094b8 <__multadd+0x84>)
 8009486:	480d      	ldr	r0, [pc, #52]	@ (80094bc <__multadd+0x88>)
 8009488:	21ba      	movs	r1, #186	@ 0xba
 800948a:	f000 fef5 	bl	800a278 <__assert_func>
 800948e:	6922      	ldr	r2, [r4, #16]
 8009490:	3202      	adds	r2, #2
 8009492:	f104 010c 	add.w	r1, r4, #12
 8009496:	0092      	lsls	r2, r2, #2
 8009498:	300c      	adds	r0, #12
 800949a:	f000 fedf 	bl	800a25c <memcpy>
 800949e:	4621      	mov	r1, r4
 80094a0:	4638      	mov	r0, r7
 80094a2:	f7ff ffa5 	bl	80093f0 <_Bfree>
 80094a6:	4644      	mov	r4, r8
 80094a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094ac:	3501      	adds	r5, #1
 80094ae:	615e      	str	r6, [r3, #20]
 80094b0:	6125      	str	r5, [r4, #16]
 80094b2:	4620      	mov	r0, r4
 80094b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b8:	0800b309 	.word	0x0800b309
 80094bc:	0800b31a 	.word	0x0800b31a

080094c0 <__hi0bits>:
 80094c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80094c4:	4603      	mov	r3, r0
 80094c6:	bf36      	itet	cc
 80094c8:	0403      	lslcc	r3, r0, #16
 80094ca:	2000      	movcs	r0, #0
 80094cc:	2010      	movcc	r0, #16
 80094ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094d2:	bf3c      	itt	cc
 80094d4:	021b      	lslcc	r3, r3, #8
 80094d6:	3008      	addcc	r0, #8
 80094d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094dc:	bf3c      	itt	cc
 80094de:	011b      	lslcc	r3, r3, #4
 80094e0:	3004      	addcc	r0, #4
 80094e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094e6:	bf3c      	itt	cc
 80094e8:	009b      	lslcc	r3, r3, #2
 80094ea:	3002      	addcc	r0, #2
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	db05      	blt.n	80094fc <__hi0bits+0x3c>
 80094f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80094f4:	f100 0001 	add.w	r0, r0, #1
 80094f8:	bf08      	it	eq
 80094fa:	2020      	moveq	r0, #32
 80094fc:	4770      	bx	lr

080094fe <__lo0bits>:
 80094fe:	6803      	ldr	r3, [r0, #0]
 8009500:	4602      	mov	r2, r0
 8009502:	f013 0007 	ands.w	r0, r3, #7
 8009506:	d00b      	beq.n	8009520 <__lo0bits+0x22>
 8009508:	07d9      	lsls	r1, r3, #31
 800950a:	d421      	bmi.n	8009550 <__lo0bits+0x52>
 800950c:	0798      	lsls	r0, r3, #30
 800950e:	bf49      	itett	mi
 8009510:	085b      	lsrmi	r3, r3, #1
 8009512:	089b      	lsrpl	r3, r3, #2
 8009514:	2001      	movmi	r0, #1
 8009516:	6013      	strmi	r3, [r2, #0]
 8009518:	bf5c      	itt	pl
 800951a:	6013      	strpl	r3, [r2, #0]
 800951c:	2002      	movpl	r0, #2
 800951e:	4770      	bx	lr
 8009520:	b299      	uxth	r1, r3
 8009522:	b909      	cbnz	r1, 8009528 <__lo0bits+0x2a>
 8009524:	0c1b      	lsrs	r3, r3, #16
 8009526:	2010      	movs	r0, #16
 8009528:	b2d9      	uxtb	r1, r3
 800952a:	b909      	cbnz	r1, 8009530 <__lo0bits+0x32>
 800952c:	3008      	adds	r0, #8
 800952e:	0a1b      	lsrs	r3, r3, #8
 8009530:	0719      	lsls	r1, r3, #28
 8009532:	bf04      	itt	eq
 8009534:	091b      	lsreq	r3, r3, #4
 8009536:	3004      	addeq	r0, #4
 8009538:	0799      	lsls	r1, r3, #30
 800953a:	bf04      	itt	eq
 800953c:	089b      	lsreq	r3, r3, #2
 800953e:	3002      	addeq	r0, #2
 8009540:	07d9      	lsls	r1, r3, #31
 8009542:	d403      	bmi.n	800954c <__lo0bits+0x4e>
 8009544:	085b      	lsrs	r3, r3, #1
 8009546:	f100 0001 	add.w	r0, r0, #1
 800954a:	d003      	beq.n	8009554 <__lo0bits+0x56>
 800954c:	6013      	str	r3, [r2, #0]
 800954e:	4770      	bx	lr
 8009550:	2000      	movs	r0, #0
 8009552:	4770      	bx	lr
 8009554:	2020      	movs	r0, #32
 8009556:	4770      	bx	lr

08009558 <__i2b>:
 8009558:	b510      	push	{r4, lr}
 800955a:	460c      	mov	r4, r1
 800955c:	2101      	movs	r1, #1
 800955e:	f7ff ff07 	bl	8009370 <_Balloc>
 8009562:	4602      	mov	r2, r0
 8009564:	b928      	cbnz	r0, 8009572 <__i2b+0x1a>
 8009566:	4b05      	ldr	r3, [pc, #20]	@ (800957c <__i2b+0x24>)
 8009568:	4805      	ldr	r0, [pc, #20]	@ (8009580 <__i2b+0x28>)
 800956a:	f240 1145 	movw	r1, #325	@ 0x145
 800956e:	f000 fe83 	bl	800a278 <__assert_func>
 8009572:	2301      	movs	r3, #1
 8009574:	6144      	str	r4, [r0, #20]
 8009576:	6103      	str	r3, [r0, #16]
 8009578:	bd10      	pop	{r4, pc}
 800957a:	bf00      	nop
 800957c:	0800b309 	.word	0x0800b309
 8009580:	0800b31a 	.word	0x0800b31a

08009584 <__multiply>:
 8009584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009588:	4614      	mov	r4, r2
 800958a:	690a      	ldr	r2, [r1, #16]
 800958c:	6923      	ldr	r3, [r4, #16]
 800958e:	429a      	cmp	r2, r3
 8009590:	bfa8      	it	ge
 8009592:	4623      	movge	r3, r4
 8009594:	460f      	mov	r7, r1
 8009596:	bfa4      	itt	ge
 8009598:	460c      	movge	r4, r1
 800959a:	461f      	movge	r7, r3
 800959c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80095a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80095a4:	68a3      	ldr	r3, [r4, #8]
 80095a6:	6861      	ldr	r1, [r4, #4]
 80095a8:	eb0a 0609 	add.w	r6, sl, r9
 80095ac:	42b3      	cmp	r3, r6
 80095ae:	b085      	sub	sp, #20
 80095b0:	bfb8      	it	lt
 80095b2:	3101      	addlt	r1, #1
 80095b4:	f7ff fedc 	bl	8009370 <_Balloc>
 80095b8:	b930      	cbnz	r0, 80095c8 <__multiply+0x44>
 80095ba:	4602      	mov	r2, r0
 80095bc:	4b44      	ldr	r3, [pc, #272]	@ (80096d0 <__multiply+0x14c>)
 80095be:	4845      	ldr	r0, [pc, #276]	@ (80096d4 <__multiply+0x150>)
 80095c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80095c4:	f000 fe58 	bl	800a278 <__assert_func>
 80095c8:	f100 0514 	add.w	r5, r0, #20
 80095cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095d0:	462b      	mov	r3, r5
 80095d2:	2200      	movs	r2, #0
 80095d4:	4543      	cmp	r3, r8
 80095d6:	d321      	bcc.n	800961c <__multiply+0x98>
 80095d8:	f107 0114 	add.w	r1, r7, #20
 80095dc:	f104 0214 	add.w	r2, r4, #20
 80095e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80095e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80095e8:	9302      	str	r3, [sp, #8]
 80095ea:	1b13      	subs	r3, r2, r4
 80095ec:	3b15      	subs	r3, #21
 80095ee:	f023 0303 	bic.w	r3, r3, #3
 80095f2:	3304      	adds	r3, #4
 80095f4:	f104 0715 	add.w	r7, r4, #21
 80095f8:	42ba      	cmp	r2, r7
 80095fa:	bf38      	it	cc
 80095fc:	2304      	movcc	r3, #4
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	9b02      	ldr	r3, [sp, #8]
 8009602:	9103      	str	r1, [sp, #12]
 8009604:	428b      	cmp	r3, r1
 8009606:	d80c      	bhi.n	8009622 <__multiply+0x9e>
 8009608:	2e00      	cmp	r6, #0
 800960a:	dd03      	ble.n	8009614 <__multiply+0x90>
 800960c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009610:	2b00      	cmp	r3, #0
 8009612:	d05b      	beq.n	80096cc <__multiply+0x148>
 8009614:	6106      	str	r6, [r0, #16]
 8009616:	b005      	add	sp, #20
 8009618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961c:	f843 2b04 	str.w	r2, [r3], #4
 8009620:	e7d8      	b.n	80095d4 <__multiply+0x50>
 8009622:	f8b1 a000 	ldrh.w	sl, [r1]
 8009626:	f1ba 0f00 	cmp.w	sl, #0
 800962a:	d024      	beq.n	8009676 <__multiply+0xf2>
 800962c:	f104 0e14 	add.w	lr, r4, #20
 8009630:	46a9      	mov	r9, r5
 8009632:	f04f 0c00 	mov.w	ip, #0
 8009636:	f85e 7b04 	ldr.w	r7, [lr], #4
 800963a:	f8d9 3000 	ldr.w	r3, [r9]
 800963e:	fa1f fb87 	uxth.w	fp, r7
 8009642:	b29b      	uxth	r3, r3
 8009644:	fb0a 330b 	mla	r3, sl, fp, r3
 8009648:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800964c:	f8d9 7000 	ldr.w	r7, [r9]
 8009650:	4463      	add	r3, ip
 8009652:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009656:	fb0a c70b 	mla	r7, sl, fp, ip
 800965a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800965e:	b29b      	uxth	r3, r3
 8009660:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009664:	4572      	cmp	r2, lr
 8009666:	f849 3b04 	str.w	r3, [r9], #4
 800966a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800966e:	d8e2      	bhi.n	8009636 <__multiply+0xb2>
 8009670:	9b01      	ldr	r3, [sp, #4]
 8009672:	f845 c003 	str.w	ip, [r5, r3]
 8009676:	9b03      	ldr	r3, [sp, #12]
 8009678:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800967c:	3104      	adds	r1, #4
 800967e:	f1b9 0f00 	cmp.w	r9, #0
 8009682:	d021      	beq.n	80096c8 <__multiply+0x144>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	f104 0c14 	add.w	ip, r4, #20
 800968a:	46ae      	mov	lr, r5
 800968c:	f04f 0a00 	mov.w	sl, #0
 8009690:	f8bc b000 	ldrh.w	fp, [ip]
 8009694:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009698:	fb09 770b 	mla	r7, r9, fp, r7
 800969c:	4457      	add	r7, sl
 800969e:	b29b      	uxth	r3, r3
 80096a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80096a4:	f84e 3b04 	str.w	r3, [lr], #4
 80096a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80096ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096b0:	f8be 3000 	ldrh.w	r3, [lr]
 80096b4:	fb09 330a 	mla	r3, r9, sl, r3
 80096b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80096bc:	4562      	cmp	r2, ip
 80096be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096c2:	d8e5      	bhi.n	8009690 <__multiply+0x10c>
 80096c4:	9f01      	ldr	r7, [sp, #4]
 80096c6:	51eb      	str	r3, [r5, r7]
 80096c8:	3504      	adds	r5, #4
 80096ca:	e799      	b.n	8009600 <__multiply+0x7c>
 80096cc:	3e01      	subs	r6, #1
 80096ce:	e79b      	b.n	8009608 <__multiply+0x84>
 80096d0:	0800b309 	.word	0x0800b309
 80096d4:	0800b31a 	.word	0x0800b31a

080096d8 <__pow5mult>:
 80096d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096dc:	4615      	mov	r5, r2
 80096de:	f012 0203 	ands.w	r2, r2, #3
 80096e2:	4607      	mov	r7, r0
 80096e4:	460e      	mov	r6, r1
 80096e6:	d007      	beq.n	80096f8 <__pow5mult+0x20>
 80096e8:	4c25      	ldr	r4, [pc, #148]	@ (8009780 <__pow5mult+0xa8>)
 80096ea:	3a01      	subs	r2, #1
 80096ec:	2300      	movs	r3, #0
 80096ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096f2:	f7ff fe9f 	bl	8009434 <__multadd>
 80096f6:	4606      	mov	r6, r0
 80096f8:	10ad      	asrs	r5, r5, #2
 80096fa:	d03d      	beq.n	8009778 <__pow5mult+0xa0>
 80096fc:	69fc      	ldr	r4, [r7, #28]
 80096fe:	b97c      	cbnz	r4, 8009720 <__pow5mult+0x48>
 8009700:	2010      	movs	r0, #16
 8009702:	f7ff fd7f 	bl	8009204 <malloc>
 8009706:	4602      	mov	r2, r0
 8009708:	61f8      	str	r0, [r7, #28]
 800970a:	b928      	cbnz	r0, 8009718 <__pow5mult+0x40>
 800970c:	4b1d      	ldr	r3, [pc, #116]	@ (8009784 <__pow5mult+0xac>)
 800970e:	481e      	ldr	r0, [pc, #120]	@ (8009788 <__pow5mult+0xb0>)
 8009710:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009714:	f000 fdb0 	bl	800a278 <__assert_func>
 8009718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800971c:	6004      	str	r4, [r0, #0]
 800971e:	60c4      	str	r4, [r0, #12]
 8009720:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009728:	b94c      	cbnz	r4, 800973e <__pow5mult+0x66>
 800972a:	f240 2171 	movw	r1, #625	@ 0x271
 800972e:	4638      	mov	r0, r7
 8009730:	f7ff ff12 	bl	8009558 <__i2b>
 8009734:	2300      	movs	r3, #0
 8009736:	f8c8 0008 	str.w	r0, [r8, #8]
 800973a:	4604      	mov	r4, r0
 800973c:	6003      	str	r3, [r0, #0]
 800973e:	f04f 0900 	mov.w	r9, #0
 8009742:	07eb      	lsls	r3, r5, #31
 8009744:	d50a      	bpl.n	800975c <__pow5mult+0x84>
 8009746:	4631      	mov	r1, r6
 8009748:	4622      	mov	r2, r4
 800974a:	4638      	mov	r0, r7
 800974c:	f7ff ff1a 	bl	8009584 <__multiply>
 8009750:	4631      	mov	r1, r6
 8009752:	4680      	mov	r8, r0
 8009754:	4638      	mov	r0, r7
 8009756:	f7ff fe4b 	bl	80093f0 <_Bfree>
 800975a:	4646      	mov	r6, r8
 800975c:	106d      	asrs	r5, r5, #1
 800975e:	d00b      	beq.n	8009778 <__pow5mult+0xa0>
 8009760:	6820      	ldr	r0, [r4, #0]
 8009762:	b938      	cbnz	r0, 8009774 <__pow5mult+0x9c>
 8009764:	4622      	mov	r2, r4
 8009766:	4621      	mov	r1, r4
 8009768:	4638      	mov	r0, r7
 800976a:	f7ff ff0b 	bl	8009584 <__multiply>
 800976e:	6020      	str	r0, [r4, #0]
 8009770:	f8c0 9000 	str.w	r9, [r0]
 8009774:	4604      	mov	r4, r0
 8009776:	e7e4      	b.n	8009742 <__pow5mult+0x6a>
 8009778:	4630      	mov	r0, r6
 800977a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800977e:	bf00      	nop
 8009780:	0800b374 	.word	0x0800b374
 8009784:	0800b29a 	.word	0x0800b29a
 8009788:	0800b31a 	.word	0x0800b31a

0800978c <__lshift>:
 800978c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009790:	460c      	mov	r4, r1
 8009792:	6849      	ldr	r1, [r1, #4]
 8009794:	6923      	ldr	r3, [r4, #16]
 8009796:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800979a:	68a3      	ldr	r3, [r4, #8]
 800979c:	4607      	mov	r7, r0
 800979e:	4691      	mov	r9, r2
 80097a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097a4:	f108 0601 	add.w	r6, r8, #1
 80097a8:	42b3      	cmp	r3, r6
 80097aa:	db0b      	blt.n	80097c4 <__lshift+0x38>
 80097ac:	4638      	mov	r0, r7
 80097ae:	f7ff fddf 	bl	8009370 <_Balloc>
 80097b2:	4605      	mov	r5, r0
 80097b4:	b948      	cbnz	r0, 80097ca <__lshift+0x3e>
 80097b6:	4602      	mov	r2, r0
 80097b8:	4b28      	ldr	r3, [pc, #160]	@ (800985c <__lshift+0xd0>)
 80097ba:	4829      	ldr	r0, [pc, #164]	@ (8009860 <__lshift+0xd4>)
 80097bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80097c0:	f000 fd5a 	bl	800a278 <__assert_func>
 80097c4:	3101      	adds	r1, #1
 80097c6:	005b      	lsls	r3, r3, #1
 80097c8:	e7ee      	b.n	80097a8 <__lshift+0x1c>
 80097ca:	2300      	movs	r3, #0
 80097cc:	f100 0114 	add.w	r1, r0, #20
 80097d0:	f100 0210 	add.w	r2, r0, #16
 80097d4:	4618      	mov	r0, r3
 80097d6:	4553      	cmp	r3, sl
 80097d8:	db33      	blt.n	8009842 <__lshift+0xb6>
 80097da:	6920      	ldr	r0, [r4, #16]
 80097dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097e0:	f104 0314 	add.w	r3, r4, #20
 80097e4:	f019 091f 	ands.w	r9, r9, #31
 80097e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097f0:	d02b      	beq.n	800984a <__lshift+0xbe>
 80097f2:	f1c9 0e20 	rsb	lr, r9, #32
 80097f6:	468a      	mov	sl, r1
 80097f8:	2200      	movs	r2, #0
 80097fa:	6818      	ldr	r0, [r3, #0]
 80097fc:	fa00 f009 	lsl.w	r0, r0, r9
 8009800:	4310      	orrs	r0, r2
 8009802:	f84a 0b04 	str.w	r0, [sl], #4
 8009806:	f853 2b04 	ldr.w	r2, [r3], #4
 800980a:	459c      	cmp	ip, r3
 800980c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009810:	d8f3      	bhi.n	80097fa <__lshift+0x6e>
 8009812:	ebac 0304 	sub.w	r3, ip, r4
 8009816:	3b15      	subs	r3, #21
 8009818:	f023 0303 	bic.w	r3, r3, #3
 800981c:	3304      	adds	r3, #4
 800981e:	f104 0015 	add.w	r0, r4, #21
 8009822:	4584      	cmp	ip, r0
 8009824:	bf38      	it	cc
 8009826:	2304      	movcc	r3, #4
 8009828:	50ca      	str	r2, [r1, r3]
 800982a:	b10a      	cbz	r2, 8009830 <__lshift+0xa4>
 800982c:	f108 0602 	add.w	r6, r8, #2
 8009830:	3e01      	subs	r6, #1
 8009832:	4638      	mov	r0, r7
 8009834:	612e      	str	r6, [r5, #16]
 8009836:	4621      	mov	r1, r4
 8009838:	f7ff fdda 	bl	80093f0 <_Bfree>
 800983c:	4628      	mov	r0, r5
 800983e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009842:	f842 0f04 	str.w	r0, [r2, #4]!
 8009846:	3301      	adds	r3, #1
 8009848:	e7c5      	b.n	80097d6 <__lshift+0x4a>
 800984a:	3904      	subs	r1, #4
 800984c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009850:	f841 2f04 	str.w	r2, [r1, #4]!
 8009854:	459c      	cmp	ip, r3
 8009856:	d8f9      	bhi.n	800984c <__lshift+0xc0>
 8009858:	e7ea      	b.n	8009830 <__lshift+0xa4>
 800985a:	bf00      	nop
 800985c:	0800b309 	.word	0x0800b309
 8009860:	0800b31a 	.word	0x0800b31a

08009864 <__mcmp>:
 8009864:	690a      	ldr	r2, [r1, #16]
 8009866:	4603      	mov	r3, r0
 8009868:	6900      	ldr	r0, [r0, #16]
 800986a:	1a80      	subs	r0, r0, r2
 800986c:	b530      	push	{r4, r5, lr}
 800986e:	d10e      	bne.n	800988e <__mcmp+0x2a>
 8009870:	3314      	adds	r3, #20
 8009872:	3114      	adds	r1, #20
 8009874:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009878:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800987c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009880:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009884:	4295      	cmp	r5, r2
 8009886:	d003      	beq.n	8009890 <__mcmp+0x2c>
 8009888:	d205      	bcs.n	8009896 <__mcmp+0x32>
 800988a:	f04f 30ff 	mov.w	r0, #4294967295
 800988e:	bd30      	pop	{r4, r5, pc}
 8009890:	42a3      	cmp	r3, r4
 8009892:	d3f3      	bcc.n	800987c <__mcmp+0x18>
 8009894:	e7fb      	b.n	800988e <__mcmp+0x2a>
 8009896:	2001      	movs	r0, #1
 8009898:	e7f9      	b.n	800988e <__mcmp+0x2a>
	...

0800989c <__mdiff>:
 800989c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a0:	4689      	mov	r9, r1
 80098a2:	4606      	mov	r6, r0
 80098a4:	4611      	mov	r1, r2
 80098a6:	4648      	mov	r0, r9
 80098a8:	4614      	mov	r4, r2
 80098aa:	f7ff ffdb 	bl	8009864 <__mcmp>
 80098ae:	1e05      	subs	r5, r0, #0
 80098b0:	d112      	bne.n	80098d8 <__mdiff+0x3c>
 80098b2:	4629      	mov	r1, r5
 80098b4:	4630      	mov	r0, r6
 80098b6:	f7ff fd5b 	bl	8009370 <_Balloc>
 80098ba:	4602      	mov	r2, r0
 80098bc:	b928      	cbnz	r0, 80098ca <__mdiff+0x2e>
 80098be:	4b3f      	ldr	r3, [pc, #252]	@ (80099bc <__mdiff+0x120>)
 80098c0:	f240 2137 	movw	r1, #567	@ 0x237
 80098c4:	483e      	ldr	r0, [pc, #248]	@ (80099c0 <__mdiff+0x124>)
 80098c6:	f000 fcd7 	bl	800a278 <__assert_func>
 80098ca:	2301      	movs	r3, #1
 80098cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098d0:	4610      	mov	r0, r2
 80098d2:	b003      	add	sp, #12
 80098d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d8:	bfbc      	itt	lt
 80098da:	464b      	movlt	r3, r9
 80098dc:	46a1      	movlt	r9, r4
 80098de:	4630      	mov	r0, r6
 80098e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80098e4:	bfba      	itte	lt
 80098e6:	461c      	movlt	r4, r3
 80098e8:	2501      	movlt	r5, #1
 80098ea:	2500      	movge	r5, #0
 80098ec:	f7ff fd40 	bl	8009370 <_Balloc>
 80098f0:	4602      	mov	r2, r0
 80098f2:	b918      	cbnz	r0, 80098fc <__mdiff+0x60>
 80098f4:	4b31      	ldr	r3, [pc, #196]	@ (80099bc <__mdiff+0x120>)
 80098f6:	f240 2145 	movw	r1, #581	@ 0x245
 80098fa:	e7e3      	b.n	80098c4 <__mdiff+0x28>
 80098fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009900:	6926      	ldr	r6, [r4, #16]
 8009902:	60c5      	str	r5, [r0, #12]
 8009904:	f109 0310 	add.w	r3, r9, #16
 8009908:	f109 0514 	add.w	r5, r9, #20
 800990c:	f104 0e14 	add.w	lr, r4, #20
 8009910:	f100 0b14 	add.w	fp, r0, #20
 8009914:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009918:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	46d9      	mov	r9, fp
 8009920:	f04f 0c00 	mov.w	ip, #0
 8009924:	9b01      	ldr	r3, [sp, #4]
 8009926:	f85e 0b04 	ldr.w	r0, [lr], #4
 800992a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800992e:	9301      	str	r3, [sp, #4]
 8009930:	fa1f f38a 	uxth.w	r3, sl
 8009934:	4619      	mov	r1, r3
 8009936:	b283      	uxth	r3, r0
 8009938:	1acb      	subs	r3, r1, r3
 800993a:	0c00      	lsrs	r0, r0, #16
 800993c:	4463      	add	r3, ip
 800993e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009942:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009946:	b29b      	uxth	r3, r3
 8009948:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800994c:	4576      	cmp	r6, lr
 800994e:	f849 3b04 	str.w	r3, [r9], #4
 8009952:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009956:	d8e5      	bhi.n	8009924 <__mdiff+0x88>
 8009958:	1b33      	subs	r3, r6, r4
 800995a:	3b15      	subs	r3, #21
 800995c:	f023 0303 	bic.w	r3, r3, #3
 8009960:	3415      	adds	r4, #21
 8009962:	3304      	adds	r3, #4
 8009964:	42a6      	cmp	r6, r4
 8009966:	bf38      	it	cc
 8009968:	2304      	movcc	r3, #4
 800996a:	441d      	add	r5, r3
 800996c:	445b      	add	r3, fp
 800996e:	461e      	mov	r6, r3
 8009970:	462c      	mov	r4, r5
 8009972:	4544      	cmp	r4, r8
 8009974:	d30e      	bcc.n	8009994 <__mdiff+0xf8>
 8009976:	f108 0103 	add.w	r1, r8, #3
 800997a:	1b49      	subs	r1, r1, r5
 800997c:	f021 0103 	bic.w	r1, r1, #3
 8009980:	3d03      	subs	r5, #3
 8009982:	45a8      	cmp	r8, r5
 8009984:	bf38      	it	cc
 8009986:	2100      	movcc	r1, #0
 8009988:	440b      	add	r3, r1
 800998a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800998e:	b191      	cbz	r1, 80099b6 <__mdiff+0x11a>
 8009990:	6117      	str	r7, [r2, #16]
 8009992:	e79d      	b.n	80098d0 <__mdiff+0x34>
 8009994:	f854 1b04 	ldr.w	r1, [r4], #4
 8009998:	46e6      	mov	lr, ip
 800999a:	0c08      	lsrs	r0, r1, #16
 800999c:	fa1c fc81 	uxtah	ip, ip, r1
 80099a0:	4471      	add	r1, lr
 80099a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80099a6:	b289      	uxth	r1, r1
 80099a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80099ac:	f846 1b04 	str.w	r1, [r6], #4
 80099b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099b4:	e7dd      	b.n	8009972 <__mdiff+0xd6>
 80099b6:	3f01      	subs	r7, #1
 80099b8:	e7e7      	b.n	800998a <__mdiff+0xee>
 80099ba:	bf00      	nop
 80099bc:	0800b309 	.word	0x0800b309
 80099c0:	0800b31a 	.word	0x0800b31a

080099c4 <__d2b>:
 80099c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099c8:	460f      	mov	r7, r1
 80099ca:	2101      	movs	r1, #1
 80099cc:	ec59 8b10 	vmov	r8, r9, d0
 80099d0:	4616      	mov	r6, r2
 80099d2:	f7ff fccd 	bl	8009370 <_Balloc>
 80099d6:	4604      	mov	r4, r0
 80099d8:	b930      	cbnz	r0, 80099e8 <__d2b+0x24>
 80099da:	4602      	mov	r2, r0
 80099dc:	4b23      	ldr	r3, [pc, #140]	@ (8009a6c <__d2b+0xa8>)
 80099de:	4824      	ldr	r0, [pc, #144]	@ (8009a70 <__d2b+0xac>)
 80099e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80099e4:	f000 fc48 	bl	800a278 <__assert_func>
 80099e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80099ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099f0:	b10d      	cbz	r5, 80099f6 <__d2b+0x32>
 80099f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099f6:	9301      	str	r3, [sp, #4]
 80099f8:	f1b8 0300 	subs.w	r3, r8, #0
 80099fc:	d023      	beq.n	8009a46 <__d2b+0x82>
 80099fe:	4668      	mov	r0, sp
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	f7ff fd7c 	bl	80094fe <__lo0bits>
 8009a06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a0a:	b1d0      	cbz	r0, 8009a42 <__d2b+0x7e>
 8009a0c:	f1c0 0320 	rsb	r3, r0, #32
 8009a10:	fa02 f303 	lsl.w	r3, r2, r3
 8009a14:	430b      	orrs	r3, r1
 8009a16:	40c2      	lsrs	r2, r0
 8009a18:	6163      	str	r3, [r4, #20]
 8009a1a:	9201      	str	r2, [sp, #4]
 8009a1c:	9b01      	ldr	r3, [sp, #4]
 8009a1e:	61a3      	str	r3, [r4, #24]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	bf0c      	ite	eq
 8009a24:	2201      	moveq	r2, #1
 8009a26:	2202      	movne	r2, #2
 8009a28:	6122      	str	r2, [r4, #16]
 8009a2a:	b1a5      	cbz	r5, 8009a56 <__d2b+0x92>
 8009a2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009a30:	4405      	add	r5, r0
 8009a32:	603d      	str	r5, [r7, #0]
 8009a34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009a38:	6030      	str	r0, [r6, #0]
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	b003      	add	sp, #12
 8009a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a42:	6161      	str	r1, [r4, #20]
 8009a44:	e7ea      	b.n	8009a1c <__d2b+0x58>
 8009a46:	a801      	add	r0, sp, #4
 8009a48:	f7ff fd59 	bl	80094fe <__lo0bits>
 8009a4c:	9b01      	ldr	r3, [sp, #4]
 8009a4e:	6163      	str	r3, [r4, #20]
 8009a50:	3020      	adds	r0, #32
 8009a52:	2201      	movs	r2, #1
 8009a54:	e7e8      	b.n	8009a28 <__d2b+0x64>
 8009a56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009a5e:	6038      	str	r0, [r7, #0]
 8009a60:	6918      	ldr	r0, [r3, #16]
 8009a62:	f7ff fd2d 	bl	80094c0 <__hi0bits>
 8009a66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a6a:	e7e5      	b.n	8009a38 <__d2b+0x74>
 8009a6c:	0800b309 	.word	0x0800b309
 8009a70:	0800b31a 	.word	0x0800b31a

08009a74 <__ssputs_r>:
 8009a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a78:	688e      	ldr	r6, [r1, #8]
 8009a7a:	461f      	mov	r7, r3
 8009a7c:	42be      	cmp	r6, r7
 8009a7e:	680b      	ldr	r3, [r1, #0]
 8009a80:	4682      	mov	sl, r0
 8009a82:	460c      	mov	r4, r1
 8009a84:	4690      	mov	r8, r2
 8009a86:	d82d      	bhi.n	8009ae4 <__ssputs_r+0x70>
 8009a88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a90:	d026      	beq.n	8009ae0 <__ssputs_r+0x6c>
 8009a92:	6965      	ldr	r5, [r4, #20]
 8009a94:	6909      	ldr	r1, [r1, #16]
 8009a96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a9a:	eba3 0901 	sub.w	r9, r3, r1
 8009a9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009aa2:	1c7b      	adds	r3, r7, #1
 8009aa4:	444b      	add	r3, r9
 8009aa6:	106d      	asrs	r5, r5, #1
 8009aa8:	429d      	cmp	r5, r3
 8009aaa:	bf38      	it	cc
 8009aac:	461d      	movcc	r5, r3
 8009aae:	0553      	lsls	r3, r2, #21
 8009ab0:	d527      	bpl.n	8009b02 <__ssputs_r+0x8e>
 8009ab2:	4629      	mov	r1, r5
 8009ab4:	f7ff fbd0 	bl	8009258 <_malloc_r>
 8009ab8:	4606      	mov	r6, r0
 8009aba:	b360      	cbz	r0, 8009b16 <__ssputs_r+0xa2>
 8009abc:	6921      	ldr	r1, [r4, #16]
 8009abe:	464a      	mov	r2, r9
 8009ac0:	f000 fbcc 	bl	800a25c <memcpy>
 8009ac4:	89a3      	ldrh	r3, [r4, #12]
 8009ac6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ace:	81a3      	strh	r3, [r4, #12]
 8009ad0:	6126      	str	r6, [r4, #16]
 8009ad2:	6165      	str	r5, [r4, #20]
 8009ad4:	444e      	add	r6, r9
 8009ad6:	eba5 0509 	sub.w	r5, r5, r9
 8009ada:	6026      	str	r6, [r4, #0]
 8009adc:	60a5      	str	r5, [r4, #8]
 8009ade:	463e      	mov	r6, r7
 8009ae0:	42be      	cmp	r6, r7
 8009ae2:	d900      	bls.n	8009ae6 <__ssputs_r+0x72>
 8009ae4:	463e      	mov	r6, r7
 8009ae6:	6820      	ldr	r0, [r4, #0]
 8009ae8:	4632      	mov	r2, r6
 8009aea:	4641      	mov	r1, r8
 8009aec:	f000 fb6a 	bl	800a1c4 <memmove>
 8009af0:	68a3      	ldr	r3, [r4, #8]
 8009af2:	1b9b      	subs	r3, r3, r6
 8009af4:	60a3      	str	r3, [r4, #8]
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	4433      	add	r3, r6
 8009afa:	6023      	str	r3, [r4, #0]
 8009afc:	2000      	movs	r0, #0
 8009afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b02:	462a      	mov	r2, r5
 8009b04:	f000 fbfc 	bl	800a300 <_realloc_r>
 8009b08:	4606      	mov	r6, r0
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	d1e0      	bne.n	8009ad0 <__ssputs_r+0x5c>
 8009b0e:	6921      	ldr	r1, [r4, #16]
 8009b10:	4650      	mov	r0, sl
 8009b12:	f7ff fb2d 	bl	8009170 <_free_r>
 8009b16:	230c      	movs	r3, #12
 8009b18:	f8ca 3000 	str.w	r3, [sl]
 8009b1c:	89a3      	ldrh	r3, [r4, #12]
 8009b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b22:	81a3      	strh	r3, [r4, #12]
 8009b24:	f04f 30ff 	mov.w	r0, #4294967295
 8009b28:	e7e9      	b.n	8009afe <__ssputs_r+0x8a>
	...

08009b2c <_svfiprintf_r>:
 8009b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b30:	4698      	mov	r8, r3
 8009b32:	898b      	ldrh	r3, [r1, #12]
 8009b34:	061b      	lsls	r3, r3, #24
 8009b36:	b09d      	sub	sp, #116	@ 0x74
 8009b38:	4607      	mov	r7, r0
 8009b3a:	460d      	mov	r5, r1
 8009b3c:	4614      	mov	r4, r2
 8009b3e:	d510      	bpl.n	8009b62 <_svfiprintf_r+0x36>
 8009b40:	690b      	ldr	r3, [r1, #16]
 8009b42:	b973      	cbnz	r3, 8009b62 <_svfiprintf_r+0x36>
 8009b44:	2140      	movs	r1, #64	@ 0x40
 8009b46:	f7ff fb87 	bl	8009258 <_malloc_r>
 8009b4a:	6028      	str	r0, [r5, #0]
 8009b4c:	6128      	str	r0, [r5, #16]
 8009b4e:	b930      	cbnz	r0, 8009b5e <_svfiprintf_r+0x32>
 8009b50:	230c      	movs	r3, #12
 8009b52:	603b      	str	r3, [r7, #0]
 8009b54:	f04f 30ff 	mov.w	r0, #4294967295
 8009b58:	b01d      	add	sp, #116	@ 0x74
 8009b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5e:	2340      	movs	r3, #64	@ 0x40
 8009b60:	616b      	str	r3, [r5, #20]
 8009b62:	2300      	movs	r3, #0
 8009b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b66:	2320      	movs	r3, #32
 8009b68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b70:	2330      	movs	r3, #48	@ 0x30
 8009b72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009d10 <_svfiprintf_r+0x1e4>
 8009b76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b7a:	f04f 0901 	mov.w	r9, #1
 8009b7e:	4623      	mov	r3, r4
 8009b80:	469a      	mov	sl, r3
 8009b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b86:	b10a      	cbz	r2, 8009b8c <_svfiprintf_r+0x60>
 8009b88:	2a25      	cmp	r2, #37	@ 0x25
 8009b8a:	d1f9      	bne.n	8009b80 <_svfiprintf_r+0x54>
 8009b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8009b90:	d00b      	beq.n	8009baa <_svfiprintf_r+0x7e>
 8009b92:	465b      	mov	r3, fp
 8009b94:	4622      	mov	r2, r4
 8009b96:	4629      	mov	r1, r5
 8009b98:	4638      	mov	r0, r7
 8009b9a:	f7ff ff6b 	bl	8009a74 <__ssputs_r>
 8009b9e:	3001      	adds	r0, #1
 8009ba0:	f000 80a7 	beq.w	8009cf2 <_svfiprintf_r+0x1c6>
 8009ba4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ba6:	445a      	add	r2, fp
 8009ba8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009baa:	f89a 3000 	ldrb.w	r3, [sl]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 809f 	beq.w	8009cf2 <_svfiprintf_r+0x1c6>
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bbe:	f10a 0a01 	add.w	sl, sl, #1
 8009bc2:	9304      	str	r3, [sp, #16]
 8009bc4:	9307      	str	r3, [sp, #28]
 8009bc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009bca:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bcc:	4654      	mov	r4, sl
 8009bce:	2205      	movs	r2, #5
 8009bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd4:	484e      	ldr	r0, [pc, #312]	@ (8009d10 <_svfiprintf_r+0x1e4>)
 8009bd6:	f7f6 fafb 	bl	80001d0 <memchr>
 8009bda:	9a04      	ldr	r2, [sp, #16]
 8009bdc:	b9d8      	cbnz	r0, 8009c16 <_svfiprintf_r+0xea>
 8009bde:	06d0      	lsls	r0, r2, #27
 8009be0:	bf44      	itt	mi
 8009be2:	2320      	movmi	r3, #32
 8009be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009be8:	0711      	lsls	r1, r2, #28
 8009bea:	bf44      	itt	mi
 8009bec:	232b      	movmi	r3, #43	@ 0x2b
 8009bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8009bf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bf8:	d015      	beq.n	8009c26 <_svfiprintf_r+0xfa>
 8009bfa:	9a07      	ldr	r2, [sp, #28]
 8009bfc:	4654      	mov	r4, sl
 8009bfe:	2000      	movs	r0, #0
 8009c00:	f04f 0c0a 	mov.w	ip, #10
 8009c04:	4621      	mov	r1, r4
 8009c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c0a:	3b30      	subs	r3, #48	@ 0x30
 8009c0c:	2b09      	cmp	r3, #9
 8009c0e:	d94b      	bls.n	8009ca8 <_svfiprintf_r+0x17c>
 8009c10:	b1b0      	cbz	r0, 8009c40 <_svfiprintf_r+0x114>
 8009c12:	9207      	str	r2, [sp, #28]
 8009c14:	e014      	b.n	8009c40 <_svfiprintf_r+0x114>
 8009c16:	eba0 0308 	sub.w	r3, r0, r8
 8009c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	9304      	str	r3, [sp, #16]
 8009c22:	46a2      	mov	sl, r4
 8009c24:	e7d2      	b.n	8009bcc <_svfiprintf_r+0xa0>
 8009c26:	9b03      	ldr	r3, [sp, #12]
 8009c28:	1d19      	adds	r1, r3, #4
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	9103      	str	r1, [sp, #12]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	bfbb      	ittet	lt
 8009c32:	425b      	neglt	r3, r3
 8009c34:	f042 0202 	orrlt.w	r2, r2, #2
 8009c38:	9307      	strge	r3, [sp, #28]
 8009c3a:	9307      	strlt	r3, [sp, #28]
 8009c3c:	bfb8      	it	lt
 8009c3e:	9204      	strlt	r2, [sp, #16]
 8009c40:	7823      	ldrb	r3, [r4, #0]
 8009c42:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c44:	d10a      	bne.n	8009c5c <_svfiprintf_r+0x130>
 8009c46:	7863      	ldrb	r3, [r4, #1]
 8009c48:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c4a:	d132      	bne.n	8009cb2 <_svfiprintf_r+0x186>
 8009c4c:	9b03      	ldr	r3, [sp, #12]
 8009c4e:	1d1a      	adds	r2, r3, #4
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	9203      	str	r2, [sp, #12]
 8009c54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c58:	3402      	adds	r4, #2
 8009c5a:	9305      	str	r3, [sp, #20]
 8009c5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009d20 <_svfiprintf_r+0x1f4>
 8009c60:	7821      	ldrb	r1, [r4, #0]
 8009c62:	2203      	movs	r2, #3
 8009c64:	4650      	mov	r0, sl
 8009c66:	f7f6 fab3 	bl	80001d0 <memchr>
 8009c6a:	b138      	cbz	r0, 8009c7c <_svfiprintf_r+0x150>
 8009c6c:	9b04      	ldr	r3, [sp, #16]
 8009c6e:	eba0 000a 	sub.w	r0, r0, sl
 8009c72:	2240      	movs	r2, #64	@ 0x40
 8009c74:	4082      	lsls	r2, r0
 8009c76:	4313      	orrs	r3, r2
 8009c78:	3401      	adds	r4, #1
 8009c7a:	9304      	str	r3, [sp, #16]
 8009c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c80:	4824      	ldr	r0, [pc, #144]	@ (8009d14 <_svfiprintf_r+0x1e8>)
 8009c82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c86:	2206      	movs	r2, #6
 8009c88:	f7f6 faa2 	bl	80001d0 <memchr>
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	d036      	beq.n	8009cfe <_svfiprintf_r+0x1d2>
 8009c90:	4b21      	ldr	r3, [pc, #132]	@ (8009d18 <_svfiprintf_r+0x1ec>)
 8009c92:	bb1b      	cbnz	r3, 8009cdc <_svfiprintf_r+0x1b0>
 8009c94:	9b03      	ldr	r3, [sp, #12]
 8009c96:	3307      	adds	r3, #7
 8009c98:	f023 0307 	bic.w	r3, r3, #7
 8009c9c:	3308      	adds	r3, #8
 8009c9e:	9303      	str	r3, [sp, #12]
 8009ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca2:	4433      	add	r3, r6
 8009ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ca6:	e76a      	b.n	8009b7e <_svfiprintf_r+0x52>
 8009ca8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cac:	460c      	mov	r4, r1
 8009cae:	2001      	movs	r0, #1
 8009cb0:	e7a8      	b.n	8009c04 <_svfiprintf_r+0xd8>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	3401      	adds	r4, #1
 8009cb6:	9305      	str	r3, [sp, #20]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	f04f 0c0a 	mov.w	ip, #10
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cc4:	3a30      	subs	r2, #48	@ 0x30
 8009cc6:	2a09      	cmp	r2, #9
 8009cc8:	d903      	bls.n	8009cd2 <_svfiprintf_r+0x1a6>
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d0c6      	beq.n	8009c5c <_svfiprintf_r+0x130>
 8009cce:	9105      	str	r1, [sp, #20]
 8009cd0:	e7c4      	b.n	8009c5c <_svfiprintf_r+0x130>
 8009cd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e7f0      	b.n	8009cbe <_svfiprintf_r+0x192>
 8009cdc:	ab03      	add	r3, sp, #12
 8009cde:	9300      	str	r3, [sp, #0]
 8009ce0:	462a      	mov	r2, r5
 8009ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8009d1c <_svfiprintf_r+0x1f0>)
 8009ce4:	a904      	add	r1, sp, #16
 8009ce6:	4638      	mov	r0, r7
 8009ce8:	f7fd fd80 	bl	80077ec <_printf_float>
 8009cec:	1c42      	adds	r2, r0, #1
 8009cee:	4606      	mov	r6, r0
 8009cf0:	d1d6      	bne.n	8009ca0 <_svfiprintf_r+0x174>
 8009cf2:	89ab      	ldrh	r3, [r5, #12]
 8009cf4:	065b      	lsls	r3, r3, #25
 8009cf6:	f53f af2d 	bmi.w	8009b54 <_svfiprintf_r+0x28>
 8009cfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cfc:	e72c      	b.n	8009b58 <_svfiprintf_r+0x2c>
 8009cfe:	ab03      	add	r3, sp, #12
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	462a      	mov	r2, r5
 8009d04:	4b05      	ldr	r3, [pc, #20]	@ (8009d1c <_svfiprintf_r+0x1f0>)
 8009d06:	a904      	add	r1, sp, #16
 8009d08:	4638      	mov	r0, r7
 8009d0a:	f7fe f807 	bl	8007d1c <_printf_i>
 8009d0e:	e7ed      	b.n	8009cec <_svfiprintf_r+0x1c0>
 8009d10:	0800b470 	.word	0x0800b470
 8009d14:	0800b47a 	.word	0x0800b47a
 8009d18:	080077ed 	.word	0x080077ed
 8009d1c:	08009a75 	.word	0x08009a75
 8009d20:	0800b476 	.word	0x0800b476

08009d24 <__sfputc_r>:
 8009d24:	6893      	ldr	r3, [r2, #8]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	b410      	push	{r4}
 8009d2c:	6093      	str	r3, [r2, #8]
 8009d2e:	da08      	bge.n	8009d42 <__sfputc_r+0x1e>
 8009d30:	6994      	ldr	r4, [r2, #24]
 8009d32:	42a3      	cmp	r3, r4
 8009d34:	db01      	blt.n	8009d3a <__sfputc_r+0x16>
 8009d36:	290a      	cmp	r1, #10
 8009d38:	d103      	bne.n	8009d42 <__sfputc_r+0x1e>
 8009d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d3e:	f7fe bab6 	b.w	80082ae <__swbuf_r>
 8009d42:	6813      	ldr	r3, [r2, #0]
 8009d44:	1c58      	adds	r0, r3, #1
 8009d46:	6010      	str	r0, [r2, #0]
 8009d48:	7019      	strb	r1, [r3, #0]
 8009d4a:	4608      	mov	r0, r1
 8009d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <__sfputs_r>:
 8009d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d54:	4606      	mov	r6, r0
 8009d56:	460f      	mov	r7, r1
 8009d58:	4614      	mov	r4, r2
 8009d5a:	18d5      	adds	r5, r2, r3
 8009d5c:	42ac      	cmp	r4, r5
 8009d5e:	d101      	bne.n	8009d64 <__sfputs_r+0x12>
 8009d60:	2000      	movs	r0, #0
 8009d62:	e007      	b.n	8009d74 <__sfputs_r+0x22>
 8009d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d68:	463a      	mov	r2, r7
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	f7ff ffda 	bl	8009d24 <__sfputc_r>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d1f3      	bne.n	8009d5c <__sfputs_r+0xa>
 8009d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d78 <_vfiprintf_r>:
 8009d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7c:	460d      	mov	r5, r1
 8009d7e:	b09d      	sub	sp, #116	@ 0x74
 8009d80:	4614      	mov	r4, r2
 8009d82:	4698      	mov	r8, r3
 8009d84:	4606      	mov	r6, r0
 8009d86:	b118      	cbz	r0, 8009d90 <_vfiprintf_r+0x18>
 8009d88:	6a03      	ldr	r3, [r0, #32]
 8009d8a:	b90b      	cbnz	r3, 8009d90 <_vfiprintf_r+0x18>
 8009d8c:	f7fe f972 	bl	8008074 <__sinit>
 8009d90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d92:	07d9      	lsls	r1, r3, #31
 8009d94:	d405      	bmi.n	8009da2 <_vfiprintf_r+0x2a>
 8009d96:	89ab      	ldrh	r3, [r5, #12]
 8009d98:	059a      	lsls	r2, r3, #22
 8009d9a:	d402      	bmi.n	8009da2 <_vfiprintf_r+0x2a>
 8009d9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d9e:	f7fe fb98 	bl	80084d2 <__retarget_lock_acquire_recursive>
 8009da2:	89ab      	ldrh	r3, [r5, #12]
 8009da4:	071b      	lsls	r3, r3, #28
 8009da6:	d501      	bpl.n	8009dac <_vfiprintf_r+0x34>
 8009da8:	692b      	ldr	r3, [r5, #16]
 8009daa:	b99b      	cbnz	r3, 8009dd4 <_vfiprintf_r+0x5c>
 8009dac:	4629      	mov	r1, r5
 8009dae:	4630      	mov	r0, r6
 8009db0:	f7fe fabc 	bl	800832c <__swsetup_r>
 8009db4:	b170      	cbz	r0, 8009dd4 <_vfiprintf_r+0x5c>
 8009db6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009db8:	07dc      	lsls	r4, r3, #31
 8009dba:	d504      	bpl.n	8009dc6 <_vfiprintf_r+0x4e>
 8009dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc0:	b01d      	add	sp, #116	@ 0x74
 8009dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc6:	89ab      	ldrh	r3, [r5, #12]
 8009dc8:	0598      	lsls	r0, r3, #22
 8009dca:	d4f7      	bmi.n	8009dbc <_vfiprintf_r+0x44>
 8009dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dce:	f7fe fb81 	bl	80084d4 <__retarget_lock_release_recursive>
 8009dd2:	e7f3      	b.n	8009dbc <_vfiprintf_r+0x44>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dd8:	2320      	movs	r3, #32
 8009dda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8009de2:	2330      	movs	r3, #48	@ 0x30
 8009de4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009f94 <_vfiprintf_r+0x21c>
 8009de8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009dec:	f04f 0901 	mov.w	r9, #1
 8009df0:	4623      	mov	r3, r4
 8009df2:	469a      	mov	sl, r3
 8009df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009df8:	b10a      	cbz	r2, 8009dfe <_vfiprintf_r+0x86>
 8009dfa:	2a25      	cmp	r2, #37	@ 0x25
 8009dfc:	d1f9      	bne.n	8009df2 <_vfiprintf_r+0x7a>
 8009dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8009e02:	d00b      	beq.n	8009e1c <_vfiprintf_r+0xa4>
 8009e04:	465b      	mov	r3, fp
 8009e06:	4622      	mov	r2, r4
 8009e08:	4629      	mov	r1, r5
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f7ff ffa1 	bl	8009d52 <__sfputs_r>
 8009e10:	3001      	adds	r0, #1
 8009e12:	f000 80a7 	beq.w	8009f64 <_vfiprintf_r+0x1ec>
 8009e16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e18:	445a      	add	r2, fp
 8009e1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 809f 	beq.w	8009f64 <_vfiprintf_r+0x1ec>
 8009e26:	2300      	movs	r3, #0
 8009e28:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e30:	f10a 0a01 	add.w	sl, sl, #1
 8009e34:	9304      	str	r3, [sp, #16]
 8009e36:	9307      	str	r3, [sp, #28]
 8009e38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e3e:	4654      	mov	r4, sl
 8009e40:	2205      	movs	r2, #5
 8009e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e46:	4853      	ldr	r0, [pc, #332]	@ (8009f94 <_vfiprintf_r+0x21c>)
 8009e48:	f7f6 f9c2 	bl	80001d0 <memchr>
 8009e4c:	9a04      	ldr	r2, [sp, #16]
 8009e4e:	b9d8      	cbnz	r0, 8009e88 <_vfiprintf_r+0x110>
 8009e50:	06d1      	lsls	r1, r2, #27
 8009e52:	bf44      	itt	mi
 8009e54:	2320      	movmi	r3, #32
 8009e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e5a:	0713      	lsls	r3, r2, #28
 8009e5c:	bf44      	itt	mi
 8009e5e:	232b      	movmi	r3, #43	@ 0x2b
 8009e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e64:	f89a 3000 	ldrb.w	r3, [sl]
 8009e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e6a:	d015      	beq.n	8009e98 <_vfiprintf_r+0x120>
 8009e6c:	9a07      	ldr	r2, [sp, #28]
 8009e6e:	4654      	mov	r4, sl
 8009e70:	2000      	movs	r0, #0
 8009e72:	f04f 0c0a 	mov.w	ip, #10
 8009e76:	4621      	mov	r1, r4
 8009e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e7c:	3b30      	subs	r3, #48	@ 0x30
 8009e7e:	2b09      	cmp	r3, #9
 8009e80:	d94b      	bls.n	8009f1a <_vfiprintf_r+0x1a2>
 8009e82:	b1b0      	cbz	r0, 8009eb2 <_vfiprintf_r+0x13a>
 8009e84:	9207      	str	r2, [sp, #28]
 8009e86:	e014      	b.n	8009eb2 <_vfiprintf_r+0x13a>
 8009e88:	eba0 0308 	sub.w	r3, r0, r8
 8009e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8009e90:	4313      	orrs	r3, r2
 8009e92:	9304      	str	r3, [sp, #16]
 8009e94:	46a2      	mov	sl, r4
 8009e96:	e7d2      	b.n	8009e3e <_vfiprintf_r+0xc6>
 8009e98:	9b03      	ldr	r3, [sp, #12]
 8009e9a:	1d19      	adds	r1, r3, #4
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	9103      	str	r1, [sp, #12]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	bfbb      	ittet	lt
 8009ea4:	425b      	neglt	r3, r3
 8009ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8009eaa:	9307      	strge	r3, [sp, #28]
 8009eac:	9307      	strlt	r3, [sp, #28]
 8009eae:	bfb8      	it	lt
 8009eb0:	9204      	strlt	r2, [sp, #16]
 8009eb2:	7823      	ldrb	r3, [r4, #0]
 8009eb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009eb6:	d10a      	bne.n	8009ece <_vfiprintf_r+0x156>
 8009eb8:	7863      	ldrb	r3, [r4, #1]
 8009eba:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ebc:	d132      	bne.n	8009f24 <_vfiprintf_r+0x1ac>
 8009ebe:	9b03      	ldr	r3, [sp, #12]
 8009ec0:	1d1a      	adds	r2, r3, #4
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	9203      	str	r2, [sp, #12]
 8009ec6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009eca:	3402      	adds	r4, #2
 8009ecc:	9305      	str	r3, [sp, #20]
 8009ece:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009fa4 <_vfiprintf_r+0x22c>
 8009ed2:	7821      	ldrb	r1, [r4, #0]
 8009ed4:	2203      	movs	r2, #3
 8009ed6:	4650      	mov	r0, sl
 8009ed8:	f7f6 f97a 	bl	80001d0 <memchr>
 8009edc:	b138      	cbz	r0, 8009eee <_vfiprintf_r+0x176>
 8009ede:	9b04      	ldr	r3, [sp, #16]
 8009ee0:	eba0 000a 	sub.w	r0, r0, sl
 8009ee4:	2240      	movs	r2, #64	@ 0x40
 8009ee6:	4082      	lsls	r2, r0
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	3401      	adds	r4, #1
 8009eec:	9304      	str	r3, [sp, #16]
 8009eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ef2:	4829      	ldr	r0, [pc, #164]	@ (8009f98 <_vfiprintf_r+0x220>)
 8009ef4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ef8:	2206      	movs	r2, #6
 8009efa:	f7f6 f969 	bl	80001d0 <memchr>
 8009efe:	2800      	cmp	r0, #0
 8009f00:	d03f      	beq.n	8009f82 <_vfiprintf_r+0x20a>
 8009f02:	4b26      	ldr	r3, [pc, #152]	@ (8009f9c <_vfiprintf_r+0x224>)
 8009f04:	bb1b      	cbnz	r3, 8009f4e <_vfiprintf_r+0x1d6>
 8009f06:	9b03      	ldr	r3, [sp, #12]
 8009f08:	3307      	adds	r3, #7
 8009f0a:	f023 0307 	bic.w	r3, r3, #7
 8009f0e:	3308      	adds	r3, #8
 8009f10:	9303      	str	r3, [sp, #12]
 8009f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f14:	443b      	add	r3, r7
 8009f16:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f18:	e76a      	b.n	8009df0 <_vfiprintf_r+0x78>
 8009f1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f1e:	460c      	mov	r4, r1
 8009f20:	2001      	movs	r0, #1
 8009f22:	e7a8      	b.n	8009e76 <_vfiprintf_r+0xfe>
 8009f24:	2300      	movs	r3, #0
 8009f26:	3401      	adds	r4, #1
 8009f28:	9305      	str	r3, [sp, #20]
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	f04f 0c0a 	mov.w	ip, #10
 8009f30:	4620      	mov	r0, r4
 8009f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f36:	3a30      	subs	r2, #48	@ 0x30
 8009f38:	2a09      	cmp	r2, #9
 8009f3a:	d903      	bls.n	8009f44 <_vfiprintf_r+0x1cc>
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d0c6      	beq.n	8009ece <_vfiprintf_r+0x156>
 8009f40:	9105      	str	r1, [sp, #20]
 8009f42:	e7c4      	b.n	8009ece <_vfiprintf_r+0x156>
 8009f44:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f48:	4604      	mov	r4, r0
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e7f0      	b.n	8009f30 <_vfiprintf_r+0x1b8>
 8009f4e:	ab03      	add	r3, sp, #12
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	462a      	mov	r2, r5
 8009f54:	4b12      	ldr	r3, [pc, #72]	@ (8009fa0 <_vfiprintf_r+0x228>)
 8009f56:	a904      	add	r1, sp, #16
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f7fd fc47 	bl	80077ec <_printf_float>
 8009f5e:	4607      	mov	r7, r0
 8009f60:	1c78      	adds	r0, r7, #1
 8009f62:	d1d6      	bne.n	8009f12 <_vfiprintf_r+0x19a>
 8009f64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009f66:	07d9      	lsls	r1, r3, #31
 8009f68:	d405      	bmi.n	8009f76 <_vfiprintf_r+0x1fe>
 8009f6a:	89ab      	ldrh	r3, [r5, #12]
 8009f6c:	059a      	lsls	r2, r3, #22
 8009f6e:	d402      	bmi.n	8009f76 <_vfiprintf_r+0x1fe>
 8009f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009f72:	f7fe faaf 	bl	80084d4 <__retarget_lock_release_recursive>
 8009f76:	89ab      	ldrh	r3, [r5, #12]
 8009f78:	065b      	lsls	r3, r3, #25
 8009f7a:	f53f af1f 	bmi.w	8009dbc <_vfiprintf_r+0x44>
 8009f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f80:	e71e      	b.n	8009dc0 <_vfiprintf_r+0x48>
 8009f82:	ab03      	add	r3, sp, #12
 8009f84:	9300      	str	r3, [sp, #0]
 8009f86:	462a      	mov	r2, r5
 8009f88:	4b05      	ldr	r3, [pc, #20]	@ (8009fa0 <_vfiprintf_r+0x228>)
 8009f8a:	a904      	add	r1, sp, #16
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	f7fd fec5 	bl	8007d1c <_printf_i>
 8009f92:	e7e4      	b.n	8009f5e <_vfiprintf_r+0x1e6>
 8009f94:	0800b470 	.word	0x0800b470
 8009f98:	0800b47a 	.word	0x0800b47a
 8009f9c:	080077ed 	.word	0x080077ed
 8009fa0:	08009d53 	.word	0x08009d53
 8009fa4:	0800b476 	.word	0x0800b476

08009fa8 <__sflush_r>:
 8009fa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb0:	0716      	lsls	r6, r2, #28
 8009fb2:	4605      	mov	r5, r0
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	d454      	bmi.n	800a062 <__sflush_r+0xba>
 8009fb8:	684b      	ldr	r3, [r1, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	dc02      	bgt.n	8009fc4 <__sflush_r+0x1c>
 8009fbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	dd48      	ble.n	800a056 <__sflush_r+0xae>
 8009fc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fc6:	2e00      	cmp	r6, #0
 8009fc8:	d045      	beq.n	800a056 <__sflush_r+0xae>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009fd0:	682f      	ldr	r7, [r5, #0]
 8009fd2:	6a21      	ldr	r1, [r4, #32]
 8009fd4:	602b      	str	r3, [r5, #0]
 8009fd6:	d030      	beq.n	800a03a <__sflush_r+0x92>
 8009fd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	0759      	lsls	r1, r3, #29
 8009fde:	d505      	bpl.n	8009fec <__sflush_r+0x44>
 8009fe0:	6863      	ldr	r3, [r4, #4]
 8009fe2:	1ad2      	subs	r2, r2, r3
 8009fe4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009fe6:	b10b      	cbz	r3, 8009fec <__sflush_r+0x44>
 8009fe8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009fea:	1ad2      	subs	r2, r2, r3
 8009fec:	2300      	movs	r3, #0
 8009fee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ff0:	6a21      	ldr	r1, [r4, #32]
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	47b0      	blx	r6
 8009ff6:	1c43      	adds	r3, r0, #1
 8009ff8:	89a3      	ldrh	r3, [r4, #12]
 8009ffa:	d106      	bne.n	800a00a <__sflush_r+0x62>
 8009ffc:	6829      	ldr	r1, [r5, #0]
 8009ffe:	291d      	cmp	r1, #29
 800a000:	d82b      	bhi.n	800a05a <__sflush_r+0xb2>
 800a002:	4a2a      	ldr	r2, [pc, #168]	@ (800a0ac <__sflush_r+0x104>)
 800a004:	410a      	asrs	r2, r1
 800a006:	07d6      	lsls	r6, r2, #31
 800a008:	d427      	bmi.n	800a05a <__sflush_r+0xb2>
 800a00a:	2200      	movs	r2, #0
 800a00c:	6062      	str	r2, [r4, #4]
 800a00e:	04d9      	lsls	r1, r3, #19
 800a010:	6922      	ldr	r2, [r4, #16]
 800a012:	6022      	str	r2, [r4, #0]
 800a014:	d504      	bpl.n	800a020 <__sflush_r+0x78>
 800a016:	1c42      	adds	r2, r0, #1
 800a018:	d101      	bne.n	800a01e <__sflush_r+0x76>
 800a01a:	682b      	ldr	r3, [r5, #0]
 800a01c:	b903      	cbnz	r3, 800a020 <__sflush_r+0x78>
 800a01e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a022:	602f      	str	r7, [r5, #0]
 800a024:	b1b9      	cbz	r1, 800a056 <__sflush_r+0xae>
 800a026:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a02a:	4299      	cmp	r1, r3
 800a02c:	d002      	beq.n	800a034 <__sflush_r+0x8c>
 800a02e:	4628      	mov	r0, r5
 800a030:	f7ff f89e 	bl	8009170 <_free_r>
 800a034:	2300      	movs	r3, #0
 800a036:	6363      	str	r3, [r4, #52]	@ 0x34
 800a038:	e00d      	b.n	800a056 <__sflush_r+0xae>
 800a03a:	2301      	movs	r3, #1
 800a03c:	4628      	mov	r0, r5
 800a03e:	47b0      	blx	r6
 800a040:	4602      	mov	r2, r0
 800a042:	1c50      	adds	r0, r2, #1
 800a044:	d1c9      	bne.n	8009fda <__sflush_r+0x32>
 800a046:	682b      	ldr	r3, [r5, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d0c6      	beq.n	8009fda <__sflush_r+0x32>
 800a04c:	2b1d      	cmp	r3, #29
 800a04e:	d001      	beq.n	800a054 <__sflush_r+0xac>
 800a050:	2b16      	cmp	r3, #22
 800a052:	d11e      	bne.n	800a092 <__sflush_r+0xea>
 800a054:	602f      	str	r7, [r5, #0]
 800a056:	2000      	movs	r0, #0
 800a058:	e022      	b.n	800a0a0 <__sflush_r+0xf8>
 800a05a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a05e:	b21b      	sxth	r3, r3
 800a060:	e01b      	b.n	800a09a <__sflush_r+0xf2>
 800a062:	690f      	ldr	r7, [r1, #16]
 800a064:	2f00      	cmp	r7, #0
 800a066:	d0f6      	beq.n	800a056 <__sflush_r+0xae>
 800a068:	0793      	lsls	r3, r2, #30
 800a06a:	680e      	ldr	r6, [r1, #0]
 800a06c:	bf08      	it	eq
 800a06e:	694b      	ldreq	r3, [r1, #20]
 800a070:	600f      	str	r7, [r1, #0]
 800a072:	bf18      	it	ne
 800a074:	2300      	movne	r3, #0
 800a076:	eba6 0807 	sub.w	r8, r6, r7
 800a07a:	608b      	str	r3, [r1, #8]
 800a07c:	f1b8 0f00 	cmp.w	r8, #0
 800a080:	dde9      	ble.n	800a056 <__sflush_r+0xae>
 800a082:	6a21      	ldr	r1, [r4, #32]
 800a084:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a086:	4643      	mov	r3, r8
 800a088:	463a      	mov	r2, r7
 800a08a:	4628      	mov	r0, r5
 800a08c:	47b0      	blx	r6
 800a08e:	2800      	cmp	r0, #0
 800a090:	dc08      	bgt.n	800a0a4 <__sflush_r+0xfc>
 800a092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a09a:	81a3      	strh	r3, [r4, #12]
 800a09c:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0a4:	4407      	add	r7, r0
 800a0a6:	eba8 0800 	sub.w	r8, r8, r0
 800a0aa:	e7e7      	b.n	800a07c <__sflush_r+0xd4>
 800a0ac:	dfbffffe 	.word	0xdfbffffe

0800a0b0 <_fflush_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	690b      	ldr	r3, [r1, #16]
 800a0b4:	4605      	mov	r5, r0
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	b913      	cbnz	r3, 800a0c0 <_fflush_r+0x10>
 800a0ba:	2500      	movs	r5, #0
 800a0bc:	4628      	mov	r0, r5
 800a0be:	bd38      	pop	{r3, r4, r5, pc}
 800a0c0:	b118      	cbz	r0, 800a0ca <_fflush_r+0x1a>
 800a0c2:	6a03      	ldr	r3, [r0, #32]
 800a0c4:	b90b      	cbnz	r3, 800a0ca <_fflush_r+0x1a>
 800a0c6:	f7fd ffd5 	bl	8008074 <__sinit>
 800a0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d0f3      	beq.n	800a0ba <_fflush_r+0xa>
 800a0d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a0d4:	07d0      	lsls	r0, r2, #31
 800a0d6:	d404      	bmi.n	800a0e2 <_fflush_r+0x32>
 800a0d8:	0599      	lsls	r1, r3, #22
 800a0da:	d402      	bmi.n	800a0e2 <_fflush_r+0x32>
 800a0dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0de:	f7fe f9f8 	bl	80084d2 <__retarget_lock_acquire_recursive>
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	4621      	mov	r1, r4
 800a0e6:	f7ff ff5f 	bl	8009fa8 <__sflush_r>
 800a0ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0ec:	07da      	lsls	r2, r3, #31
 800a0ee:	4605      	mov	r5, r0
 800a0f0:	d4e4      	bmi.n	800a0bc <_fflush_r+0xc>
 800a0f2:	89a3      	ldrh	r3, [r4, #12]
 800a0f4:	059b      	lsls	r3, r3, #22
 800a0f6:	d4e1      	bmi.n	800a0bc <_fflush_r+0xc>
 800a0f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0fa:	f7fe f9eb 	bl	80084d4 <__retarget_lock_release_recursive>
 800a0fe:	e7dd      	b.n	800a0bc <_fflush_r+0xc>

0800a100 <__swhatbuf_r>:
 800a100:	b570      	push	{r4, r5, r6, lr}
 800a102:	460c      	mov	r4, r1
 800a104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a108:	2900      	cmp	r1, #0
 800a10a:	b096      	sub	sp, #88	@ 0x58
 800a10c:	4615      	mov	r5, r2
 800a10e:	461e      	mov	r6, r3
 800a110:	da0d      	bge.n	800a12e <__swhatbuf_r+0x2e>
 800a112:	89a3      	ldrh	r3, [r4, #12]
 800a114:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a118:	f04f 0100 	mov.w	r1, #0
 800a11c:	bf14      	ite	ne
 800a11e:	2340      	movne	r3, #64	@ 0x40
 800a120:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a124:	2000      	movs	r0, #0
 800a126:	6031      	str	r1, [r6, #0]
 800a128:	602b      	str	r3, [r5, #0]
 800a12a:	b016      	add	sp, #88	@ 0x58
 800a12c:	bd70      	pop	{r4, r5, r6, pc}
 800a12e:	466a      	mov	r2, sp
 800a130:	f000 f862 	bl	800a1f8 <_fstat_r>
 800a134:	2800      	cmp	r0, #0
 800a136:	dbec      	blt.n	800a112 <__swhatbuf_r+0x12>
 800a138:	9901      	ldr	r1, [sp, #4]
 800a13a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a13e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a142:	4259      	negs	r1, r3
 800a144:	4159      	adcs	r1, r3
 800a146:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a14a:	e7eb      	b.n	800a124 <__swhatbuf_r+0x24>

0800a14c <__smakebuf_r>:
 800a14c:	898b      	ldrh	r3, [r1, #12]
 800a14e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a150:	079d      	lsls	r5, r3, #30
 800a152:	4606      	mov	r6, r0
 800a154:	460c      	mov	r4, r1
 800a156:	d507      	bpl.n	800a168 <__smakebuf_r+0x1c>
 800a158:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a15c:	6023      	str	r3, [r4, #0]
 800a15e:	6123      	str	r3, [r4, #16]
 800a160:	2301      	movs	r3, #1
 800a162:	6163      	str	r3, [r4, #20]
 800a164:	b003      	add	sp, #12
 800a166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a168:	ab01      	add	r3, sp, #4
 800a16a:	466a      	mov	r2, sp
 800a16c:	f7ff ffc8 	bl	800a100 <__swhatbuf_r>
 800a170:	9f00      	ldr	r7, [sp, #0]
 800a172:	4605      	mov	r5, r0
 800a174:	4639      	mov	r1, r7
 800a176:	4630      	mov	r0, r6
 800a178:	f7ff f86e 	bl	8009258 <_malloc_r>
 800a17c:	b948      	cbnz	r0, 800a192 <__smakebuf_r+0x46>
 800a17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a182:	059a      	lsls	r2, r3, #22
 800a184:	d4ee      	bmi.n	800a164 <__smakebuf_r+0x18>
 800a186:	f023 0303 	bic.w	r3, r3, #3
 800a18a:	f043 0302 	orr.w	r3, r3, #2
 800a18e:	81a3      	strh	r3, [r4, #12]
 800a190:	e7e2      	b.n	800a158 <__smakebuf_r+0xc>
 800a192:	89a3      	ldrh	r3, [r4, #12]
 800a194:	6020      	str	r0, [r4, #0]
 800a196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a19a:	81a3      	strh	r3, [r4, #12]
 800a19c:	9b01      	ldr	r3, [sp, #4]
 800a19e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a1a2:	b15b      	cbz	r3, 800a1bc <__smakebuf_r+0x70>
 800a1a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	f000 f837 	bl	800a21c <_isatty_r>
 800a1ae:	b128      	cbz	r0, 800a1bc <__smakebuf_r+0x70>
 800a1b0:	89a3      	ldrh	r3, [r4, #12]
 800a1b2:	f023 0303 	bic.w	r3, r3, #3
 800a1b6:	f043 0301 	orr.w	r3, r3, #1
 800a1ba:	81a3      	strh	r3, [r4, #12]
 800a1bc:	89a3      	ldrh	r3, [r4, #12]
 800a1be:	431d      	orrs	r5, r3
 800a1c0:	81a5      	strh	r5, [r4, #12]
 800a1c2:	e7cf      	b.n	800a164 <__smakebuf_r+0x18>

0800a1c4 <memmove>:
 800a1c4:	4288      	cmp	r0, r1
 800a1c6:	b510      	push	{r4, lr}
 800a1c8:	eb01 0402 	add.w	r4, r1, r2
 800a1cc:	d902      	bls.n	800a1d4 <memmove+0x10>
 800a1ce:	4284      	cmp	r4, r0
 800a1d0:	4623      	mov	r3, r4
 800a1d2:	d807      	bhi.n	800a1e4 <memmove+0x20>
 800a1d4:	1e43      	subs	r3, r0, #1
 800a1d6:	42a1      	cmp	r1, r4
 800a1d8:	d008      	beq.n	800a1ec <memmove+0x28>
 800a1da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1e2:	e7f8      	b.n	800a1d6 <memmove+0x12>
 800a1e4:	4402      	add	r2, r0
 800a1e6:	4601      	mov	r1, r0
 800a1e8:	428a      	cmp	r2, r1
 800a1ea:	d100      	bne.n	800a1ee <memmove+0x2a>
 800a1ec:	bd10      	pop	{r4, pc}
 800a1ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1f6:	e7f7      	b.n	800a1e8 <memmove+0x24>

0800a1f8 <_fstat_r>:
 800a1f8:	b538      	push	{r3, r4, r5, lr}
 800a1fa:	4d07      	ldr	r5, [pc, #28]	@ (800a218 <_fstat_r+0x20>)
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	4604      	mov	r4, r0
 800a200:	4608      	mov	r0, r1
 800a202:	4611      	mov	r1, r2
 800a204:	602b      	str	r3, [r5, #0]
 800a206:	f7f8 fcc3 	bl	8002b90 <_fstat>
 800a20a:	1c43      	adds	r3, r0, #1
 800a20c:	d102      	bne.n	800a214 <_fstat_r+0x1c>
 800a20e:	682b      	ldr	r3, [r5, #0]
 800a210:	b103      	cbz	r3, 800a214 <_fstat_r+0x1c>
 800a212:	6023      	str	r3, [r4, #0]
 800a214:	bd38      	pop	{r3, r4, r5, pc}
 800a216:	bf00      	nop
 800a218:	200007b8 	.word	0x200007b8

0800a21c <_isatty_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	4d06      	ldr	r5, [pc, #24]	@ (800a238 <_isatty_r+0x1c>)
 800a220:	2300      	movs	r3, #0
 800a222:	4604      	mov	r4, r0
 800a224:	4608      	mov	r0, r1
 800a226:	602b      	str	r3, [r5, #0]
 800a228:	f7f8 fcc2 	bl	8002bb0 <_isatty>
 800a22c:	1c43      	adds	r3, r0, #1
 800a22e:	d102      	bne.n	800a236 <_isatty_r+0x1a>
 800a230:	682b      	ldr	r3, [r5, #0]
 800a232:	b103      	cbz	r3, 800a236 <_isatty_r+0x1a>
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	bd38      	pop	{r3, r4, r5, pc}
 800a238:	200007b8 	.word	0x200007b8

0800a23c <_sbrk_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	4d06      	ldr	r5, [pc, #24]	@ (800a258 <_sbrk_r+0x1c>)
 800a240:	2300      	movs	r3, #0
 800a242:	4604      	mov	r4, r0
 800a244:	4608      	mov	r0, r1
 800a246:	602b      	str	r3, [r5, #0]
 800a248:	f7f8 fcca 	bl	8002be0 <_sbrk>
 800a24c:	1c43      	adds	r3, r0, #1
 800a24e:	d102      	bne.n	800a256 <_sbrk_r+0x1a>
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	b103      	cbz	r3, 800a256 <_sbrk_r+0x1a>
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	bd38      	pop	{r3, r4, r5, pc}
 800a258:	200007b8 	.word	0x200007b8

0800a25c <memcpy>:
 800a25c:	440a      	add	r2, r1
 800a25e:	4291      	cmp	r1, r2
 800a260:	f100 33ff 	add.w	r3, r0, #4294967295
 800a264:	d100      	bne.n	800a268 <memcpy+0xc>
 800a266:	4770      	bx	lr
 800a268:	b510      	push	{r4, lr}
 800a26a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a26e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a272:	4291      	cmp	r1, r2
 800a274:	d1f9      	bne.n	800a26a <memcpy+0xe>
 800a276:	bd10      	pop	{r4, pc}

0800a278 <__assert_func>:
 800a278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a27a:	4614      	mov	r4, r2
 800a27c:	461a      	mov	r2, r3
 800a27e:	4b09      	ldr	r3, [pc, #36]	@ (800a2a4 <__assert_func+0x2c>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4605      	mov	r5, r0
 800a284:	68d8      	ldr	r0, [r3, #12]
 800a286:	b954      	cbnz	r4, 800a29e <__assert_func+0x26>
 800a288:	4b07      	ldr	r3, [pc, #28]	@ (800a2a8 <__assert_func+0x30>)
 800a28a:	461c      	mov	r4, r3
 800a28c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a290:	9100      	str	r1, [sp, #0]
 800a292:	462b      	mov	r3, r5
 800a294:	4905      	ldr	r1, [pc, #20]	@ (800a2ac <__assert_func+0x34>)
 800a296:	f000 f86f 	bl	800a378 <fiprintf>
 800a29a:	f000 f87f 	bl	800a39c <abort>
 800a29e:	4b04      	ldr	r3, [pc, #16]	@ (800a2b0 <__assert_func+0x38>)
 800a2a0:	e7f4      	b.n	800a28c <__assert_func+0x14>
 800a2a2:	bf00      	nop
 800a2a4:	20000024 	.word	0x20000024
 800a2a8:	0800b4c6 	.word	0x0800b4c6
 800a2ac:	0800b498 	.word	0x0800b498
 800a2b0:	0800b48b 	.word	0x0800b48b

0800a2b4 <_calloc_r>:
 800a2b4:	b570      	push	{r4, r5, r6, lr}
 800a2b6:	fba1 5402 	umull	r5, r4, r1, r2
 800a2ba:	b93c      	cbnz	r4, 800a2cc <_calloc_r+0x18>
 800a2bc:	4629      	mov	r1, r5
 800a2be:	f7fe ffcb 	bl	8009258 <_malloc_r>
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	b928      	cbnz	r0, 800a2d2 <_calloc_r+0x1e>
 800a2c6:	2600      	movs	r6, #0
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	bd70      	pop	{r4, r5, r6, pc}
 800a2cc:	220c      	movs	r2, #12
 800a2ce:	6002      	str	r2, [r0, #0]
 800a2d0:	e7f9      	b.n	800a2c6 <_calloc_r+0x12>
 800a2d2:	462a      	mov	r2, r5
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	f7fe f87f 	bl	80083d8 <memset>
 800a2da:	e7f5      	b.n	800a2c8 <_calloc_r+0x14>

0800a2dc <__ascii_mbtowc>:
 800a2dc:	b082      	sub	sp, #8
 800a2de:	b901      	cbnz	r1, 800a2e2 <__ascii_mbtowc+0x6>
 800a2e0:	a901      	add	r1, sp, #4
 800a2e2:	b142      	cbz	r2, 800a2f6 <__ascii_mbtowc+0x1a>
 800a2e4:	b14b      	cbz	r3, 800a2fa <__ascii_mbtowc+0x1e>
 800a2e6:	7813      	ldrb	r3, [r2, #0]
 800a2e8:	600b      	str	r3, [r1, #0]
 800a2ea:	7812      	ldrb	r2, [r2, #0]
 800a2ec:	1e10      	subs	r0, r2, #0
 800a2ee:	bf18      	it	ne
 800a2f0:	2001      	movne	r0, #1
 800a2f2:	b002      	add	sp, #8
 800a2f4:	4770      	bx	lr
 800a2f6:	4610      	mov	r0, r2
 800a2f8:	e7fb      	b.n	800a2f2 <__ascii_mbtowc+0x16>
 800a2fa:	f06f 0001 	mvn.w	r0, #1
 800a2fe:	e7f8      	b.n	800a2f2 <__ascii_mbtowc+0x16>

0800a300 <_realloc_r>:
 800a300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a304:	4680      	mov	r8, r0
 800a306:	4615      	mov	r5, r2
 800a308:	460c      	mov	r4, r1
 800a30a:	b921      	cbnz	r1, 800a316 <_realloc_r+0x16>
 800a30c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a310:	4611      	mov	r1, r2
 800a312:	f7fe bfa1 	b.w	8009258 <_malloc_r>
 800a316:	b92a      	cbnz	r2, 800a324 <_realloc_r+0x24>
 800a318:	f7fe ff2a 	bl	8009170 <_free_r>
 800a31c:	2400      	movs	r4, #0
 800a31e:	4620      	mov	r0, r4
 800a320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a324:	f000 f841 	bl	800a3aa <_malloc_usable_size_r>
 800a328:	4285      	cmp	r5, r0
 800a32a:	4606      	mov	r6, r0
 800a32c:	d802      	bhi.n	800a334 <_realloc_r+0x34>
 800a32e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a332:	d8f4      	bhi.n	800a31e <_realloc_r+0x1e>
 800a334:	4629      	mov	r1, r5
 800a336:	4640      	mov	r0, r8
 800a338:	f7fe ff8e 	bl	8009258 <_malloc_r>
 800a33c:	4607      	mov	r7, r0
 800a33e:	2800      	cmp	r0, #0
 800a340:	d0ec      	beq.n	800a31c <_realloc_r+0x1c>
 800a342:	42b5      	cmp	r5, r6
 800a344:	462a      	mov	r2, r5
 800a346:	4621      	mov	r1, r4
 800a348:	bf28      	it	cs
 800a34a:	4632      	movcs	r2, r6
 800a34c:	f7ff ff86 	bl	800a25c <memcpy>
 800a350:	4621      	mov	r1, r4
 800a352:	4640      	mov	r0, r8
 800a354:	f7fe ff0c 	bl	8009170 <_free_r>
 800a358:	463c      	mov	r4, r7
 800a35a:	e7e0      	b.n	800a31e <_realloc_r+0x1e>

0800a35c <__ascii_wctomb>:
 800a35c:	4603      	mov	r3, r0
 800a35e:	4608      	mov	r0, r1
 800a360:	b141      	cbz	r1, 800a374 <__ascii_wctomb+0x18>
 800a362:	2aff      	cmp	r2, #255	@ 0xff
 800a364:	d904      	bls.n	800a370 <__ascii_wctomb+0x14>
 800a366:	228a      	movs	r2, #138	@ 0x8a
 800a368:	601a      	str	r2, [r3, #0]
 800a36a:	f04f 30ff 	mov.w	r0, #4294967295
 800a36e:	4770      	bx	lr
 800a370:	700a      	strb	r2, [r1, #0]
 800a372:	2001      	movs	r0, #1
 800a374:	4770      	bx	lr
	...

0800a378 <fiprintf>:
 800a378:	b40e      	push	{r1, r2, r3}
 800a37a:	b503      	push	{r0, r1, lr}
 800a37c:	4601      	mov	r1, r0
 800a37e:	ab03      	add	r3, sp, #12
 800a380:	4805      	ldr	r0, [pc, #20]	@ (800a398 <fiprintf+0x20>)
 800a382:	f853 2b04 	ldr.w	r2, [r3], #4
 800a386:	6800      	ldr	r0, [r0, #0]
 800a388:	9301      	str	r3, [sp, #4]
 800a38a:	f7ff fcf5 	bl	8009d78 <_vfiprintf_r>
 800a38e:	b002      	add	sp, #8
 800a390:	f85d eb04 	ldr.w	lr, [sp], #4
 800a394:	b003      	add	sp, #12
 800a396:	4770      	bx	lr
 800a398:	20000024 	.word	0x20000024

0800a39c <abort>:
 800a39c:	b508      	push	{r3, lr}
 800a39e:	2006      	movs	r0, #6
 800a3a0:	f000 f834 	bl	800a40c <raise>
 800a3a4:	2001      	movs	r0, #1
 800a3a6:	f7f8 fba3 	bl	8002af0 <_exit>

0800a3aa <_malloc_usable_size_r>:
 800a3aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ae:	1f18      	subs	r0, r3, #4
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	bfbc      	itt	lt
 800a3b4:	580b      	ldrlt	r3, [r1, r0]
 800a3b6:	18c0      	addlt	r0, r0, r3
 800a3b8:	4770      	bx	lr

0800a3ba <_raise_r>:
 800a3ba:	291f      	cmp	r1, #31
 800a3bc:	b538      	push	{r3, r4, r5, lr}
 800a3be:	4605      	mov	r5, r0
 800a3c0:	460c      	mov	r4, r1
 800a3c2:	d904      	bls.n	800a3ce <_raise_r+0x14>
 800a3c4:	2316      	movs	r3, #22
 800a3c6:	6003      	str	r3, [r0, #0]
 800a3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3cc:	bd38      	pop	{r3, r4, r5, pc}
 800a3ce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a3d0:	b112      	cbz	r2, 800a3d8 <_raise_r+0x1e>
 800a3d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3d6:	b94b      	cbnz	r3, 800a3ec <_raise_r+0x32>
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f000 f831 	bl	800a440 <_getpid_r>
 800a3de:	4622      	mov	r2, r4
 800a3e0:	4601      	mov	r1, r0
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3e8:	f000 b818 	b.w	800a41c <_kill_r>
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d00a      	beq.n	800a406 <_raise_r+0x4c>
 800a3f0:	1c59      	adds	r1, r3, #1
 800a3f2:	d103      	bne.n	800a3fc <_raise_r+0x42>
 800a3f4:	2316      	movs	r3, #22
 800a3f6:	6003      	str	r3, [r0, #0]
 800a3f8:	2001      	movs	r0, #1
 800a3fa:	e7e7      	b.n	800a3cc <_raise_r+0x12>
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a402:	4620      	mov	r0, r4
 800a404:	4798      	blx	r3
 800a406:	2000      	movs	r0, #0
 800a408:	e7e0      	b.n	800a3cc <_raise_r+0x12>
	...

0800a40c <raise>:
 800a40c:	4b02      	ldr	r3, [pc, #8]	@ (800a418 <raise+0xc>)
 800a40e:	4601      	mov	r1, r0
 800a410:	6818      	ldr	r0, [r3, #0]
 800a412:	f7ff bfd2 	b.w	800a3ba <_raise_r>
 800a416:	bf00      	nop
 800a418:	20000024 	.word	0x20000024

0800a41c <_kill_r>:
 800a41c:	b538      	push	{r3, r4, r5, lr}
 800a41e:	4d07      	ldr	r5, [pc, #28]	@ (800a43c <_kill_r+0x20>)
 800a420:	2300      	movs	r3, #0
 800a422:	4604      	mov	r4, r0
 800a424:	4608      	mov	r0, r1
 800a426:	4611      	mov	r1, r2
 800a428:	602b      	str	r3, [r5, #0]
 800a42a:	f7f8 fb51 	bl	8002ad0 <_kill>
 800a42e:	1c43      	adds	r3, r0, #1
 800a430:	d102      	bne.n	800a438 <_kill_r+0x1c>
 800a432:	682b      	ldr	r3, [r5, #0]
 800a434:	b103      	cbz	r3, 800a438 <_kill_r+0x1c>
 800a436:	6023      	str	r3, [r4, #0]
 800a438:	bd38      	pop	{r3, r4, r5, pc}
 800a43a:	bf00      	nop
 800a43c:	200007b8 	.word	0x200007b8

0800a440 <_getpid_r>:
 800a440:	f7f8 bb3e 	b.w	8002ac0 <_getpid>

0800a444 <cosf>:
 800a444:	ee10 3a10 	vmov	r3, s0
 800a448:	b507      	push	{r0, r1, r2, lr}
 800a44a:	4a1e      	ldr	r2, [pc, #120]	@ (800a4c4 <cosf+0x80>)
 800a44c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a450:	4293      	cmp	r3, r2
 800a452:	d806      	bhi.n	800a462 <cosf+0x1e>
 800a454:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800a4c8 <cosf+0x84>
 800a458:	b003      	add	sp, #12
 800a45a:	f85d eb04 	ldr.w	lr, [sp], #4
 800a45e:	f000 b87b 	b.w	800a558 <__kernel_cosf>
 800a462:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a466:	d304      	bcc.n	800a472 <cosf+0x2e>
 800a468:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a46c:	b003      	add	sp, #12
 800a46e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a472:	4668      	mov	r0, sp
 800a474:	f000 f910 	bl	800a698 <__ieee754_rem_pio2f>
 800a478:	f000 0003 	and.w	r0, r0, #3
 800a47c:	2801      	cmp	r0, #1
 800a47e:	d009      	beq.n	800a494 <cosf+0x50>
 800a480:	2802      	cmp	r0, #2
 800a482:	d010      	beq.n	800a4a6 <cosf+0x62>
 800a484:	b9b0      	cbnz	r0, 800a4b4 <cosf+0x70>
 800a486:	eddd 0a01 	vldr	s1, [sp, #4]
 800a48a:	ed9d 0a00 	vldr	s0, [sp]
 800a48e:	f000 f863 	bl	800a558 <__kernel_cosf>
 800a492:	e7eb      	b.n	800a46c <cosf+0x28>
 800a494:	eddd 0a01 	vldr	s1, [sp, #4]
 800a498:	ed9d 0a00 	vldr	s0, [sp]
 800a49c:	f000 f8b4 	bl	800a608 <__kernel_sinf>
 800a4a0:	eeb1 0a40 	vneg.f32	s0, s0
 800a4a4:	e7e2      	b.n	800a46c <cosf+0x28>
 800a4a6:	eddd 0a01 	vldr	s1, [sp, #4]
 800a4aa:	ed9d 0a00 	vldr	s0, [sp]
 800a4ae:	f000 f853 	bl	800a558 <__kernel_cosf>
 800a4b2:	e7f5      	b.n	800a4a0 <cosf+0x5c>
 800a4b4:	eddd 0a01 	vldr	s1, [sp, #4]
 800a4b8:	ed9d 0a00 	vldr	s0, [sp]
 800a4bc:	2001      	movs	r0, #1
 800a4be:	f000 f8a3 	bl	800a608 <__kernel_sinf>
 800a4c2:	e7d3      	b.n	800a46c <cosf+0x28>
 800a4c4:	3f490fd8 	.word	0x3f490fd8
 800a4c8:	00000000 	.word	0x00000000

0800a4cc <sinf>:
 800a4cc:	ee10 3a10 	vmov	r3, s0
 800a4d0:	b507      	push	{r0, r1, r2, lr}
 800a4d2:	4a1f      	ldr	r2, [pc, #124]	@ (800a550 <sinf+0x84>)
 800a4d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d807      	bhi.n	800a4ec <sinf+0x20>
 800a4dc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800a554 <sinf+0x88>
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	b003      	add	sp, #12
 800a4e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4e8:	f000 b88e 	b.w	800a608 <__kernel_sinf>
 800a4ec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a4f0:	d304      	bcc.n	800a4fc <sinf+0x30>
 800a4f2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a4f6:	b003      	add	sp, #12
 800a4f8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4fc:	4668      	mov	r0, sp
 800a4fe:	f000 f8cb 	bl	800a698 <__ieee754_rem_pio2f>
 800a502:	f000 0003 	and.w	r0, r0, #3
 800a506:	2801      	cmp	r0, #1
 800a508:	d00a      	beq.n	800a520 <sinf+0x54>
 800a50a:	2802      	cmp	r0, #2
 800a50c:	d00f      	beq.n	800a52e <sinf+0x62>
 800a50e:	b9c0      	cbnz	r0, 800a542 <sinf+0x76>
 800a510:	eddd 0a01 	vldr	s1, [sp, #4]
 800a514:	ed9d 0a00 	vldr	s0, [sp]
 800a518:	2001      	movs	r0, #1
 800a51a:	f000 f875 	bl	800a608 <__kernel_sinf>
 800a51e:	e7ea      	b.n	800a4f6 <sinf+0x2a>
 800a520:	eddd 0a01 	vldr	s1, [sp, #4]
 800a524:	ed9d 0a00 	vldr	s0, [sp]
 800a528:	f000 f816 	bl	800a558 <__kernel_cosf>
 800a52c:	e7e3      	b.n	800a4f6 <sinf+0x2a>
 800a52e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a532:	ed9d 0a00 	vldr	s0, [sp]
 800a536:	2001      	movs	r0, #1
 800a538:	f000 f866 	bl	800a608 <__kernel_sinf>
 800a53c:	eeb1 0a40 	vneg.f32	s0, s0
 800a540:	e7d9      	b.n	800a4f6 <sinf+0x2a>
 800a542:	eddd 0a01 	vldr	s1, [sp, #4]
 800a546:	ed9d 0a00 	vldr	s0, [sp]
 800a54a:	f000 f805 	bl	800a558 <__kernel_cosf>
 800a54e:	e7f5      	b.n	800a53c <sinf+0x70>
 800a550:	3f490fd8 	.word	0x3f490fd8
 800a554:	00000000 	.word	0x00000000

0800a558 <__kernel_cosf>:
 800a558:	ee10 3a10 	vmov	r3, s0
 800a55c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a560:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800a564:	eef0 6a40 	vmov.f32	s13, s0
 800a568:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a56c:	d204      	bcs.n	800a578 <__kernel_cosf+0x20>
 800a56e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800a572:	ee17 2a90 	vmov	r2, s15
 800a576:	b342      	cbz	r2, 800a5ca <__kernel_cosf+0x72>
 800a578:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800a57c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800a5e8 <__kernel_cosf+0x90>
 800a580:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800a5ec <__kernel_cosf+0x94>
 800a584:	4a1a      	ldr	r2, [pc, #104]	@ (800a5f0 <__kernel_cosf+0x98>)
 800a586:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a58a:	4293      	cmp	r3, r2
 800a58c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a5f4 <__kernel_cosf+0x9c>
 800a590:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a594:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800a5f8 <__kernel_cosf+0xa0>
 800a598:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a59c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800a5fc <__kernel_cosf+0xa4>
 800a5a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a5a4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800a600 <__kernel_cosf+0xa8>
 800a5a8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a5ac:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800a5b0:	ee26 6a07 	vmul.f32	s12, s12, s14
 800a5b4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a5b8:	eee7 0a06 	vfma.f32	s1, s14, s12
 800a5bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5c0:	d804      	bhi.n	800a5cc <__kernel_cosf+0x74>
 800a5c2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a5c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a5ca:	4770      	bx	lr
 800a5cc:	4a0d      	ldr	r2, [pc, #52]	@ (800a604 <__kernel_cosf+0xac>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	bf9a      	itte	ls
 800a5d2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800a5d6:	ee07 3a10 	vmovls	s14, r3
 800a5da:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800a5de:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a5e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5e6:	e7ec      	b.n	800a5c2 <__kernel_cosf+0x6a>
 800a5e8:	ad47d74e 	.word	0xad47d74e
 800a5ec:	310f74f6 	.word	0x310f74f6
 800a5f0:	3e999999 	.word	0x3e999999
 800a5f4:	b493f27c 	.word	0xb493f27c
 800a5f8:	37d00d01 	.word	0x37d00d01
 800a5fc:	bab60b61 	.word	0xbab60b61
 800a600:	3d2aaaab 	.word	0x3d2aaaab
 800a604:	3f480000 	.word	0x3f480000

0800a608 <__kernel_sinf>:
 800a608:	ee10 3a10 	vmov	r3, s0
 800a60c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a610:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800a614:	d204      	bcs.n	800a620 <__kernel_sinf+0x18>
 800a616:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a61a:	ee17 3a90 	vmov	r3, s15
 800a61e:	b35b      	cbz	r3, 800a678 <__kernel_sinf+0x70>
 800a620:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a624:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800a67c <__kernel_sinf+0x74>
 800a628:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800a680 <__kernel_sinf+0x78>
 800a62c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a630:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800a684 <__kernel_sinf+0x7c>
 800a634:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a638:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800a688 <__kernel_sinf+0x80>
 800a63c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800a640:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800a68c <__kernel_sinf+0x84>
 800a644:	ee60 6a07 	vmul.f32	s13, s0, s14
 800a648:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a64c:	b930      	cbnz	r0, 800a65c <__kernel_sinf+0x54>
 800a64e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800a690 <__kernel_sinf+0x88>
 800a652:	eea7 6a27 	vfma.f32	s12, s14, s15
 800a656:	eea6 0a26 	vfma.f32	s0, s12, s13
 800a65a:	4770      	bx	lr
 800a65c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a660:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800a664:	eee0 7a86 	vfma.f32	s15, s1, s12
 800a668:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800a66c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800a694 <__kernel_sinf+0x8c>
 800a670:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800a674:	ee30 0a60 	vsub.f32	s0, s0, s1
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	2f2ec9d3 	.word	0x2f2ec9d3
 800a680:	b2d72f34 	.word	0xb2d72f34
 800a684:	3638ef1b 	.word	0x3638ef1b
 800a688:	b9500d01 	.word	0xb9500d01
 800a68c:	3c088889 	.word	0x3c088889
 800a690:	be2aaaab 	.word	0xbe2aaaab
 800a694:	3e2aaaab 	.word	0x3e2aaaab

0800a698 <__ieee754_rem_pio2f>:
 800a698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a69a:	ee10 6a10 	vmov	r6, s0
 800a69e:	4b88      	ldr	r3, [pc, #544]	@ (800a8c0 <__ieee754_rem_pio2f+0x228>)
 800a6a0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800a6a4:	429d      	cmp	r5, r3
 800a6a6:	b087      	sub	sp, #28
 800a6a8:	4604      	mov	r4, r0
 800a6aa:	d805      	bhi.n	800a6b8 <__ieee754_rem_pio2f+0x20>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	ed80 0a00 	vstr	s0, [r0]
 800a6b2:	6043      	str	r3, [r0, #4]
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	e022      	b.n	800a6fe <__ieee754_rem_pio2f+0x66>
 800a6b8:	4b82      	ldr	r3, [pc, #520]	@ (800a8c4 <__ieee754_rem_pio2f+0x22c>)
 800a6ba:	429d      	cmp	r5, r3
 800a6bc:	d83a      	bhi.n	800a734 <__ieee754_rem_pio2f+0x9c>
 800a6be:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800a6c2:	2e00      	cmp	r6, #0
 800a6c4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800a8c8 <__ieee754_rem_pio2f+0x230>
 800a6c8:	4a80      	ldr	r2, [pc, #512]	@ (800a8cc <__ieee754_rem_pio2f+0x234>)
 800a6ca:	f023 030f 	bic.w	r3, r3, #15
 800a6ce:	dd18      	ble.n	800a702 <__ieee754_rem_pio2f+0x6a>
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	ee70 7a47 	vsub.f32	s15, s0, s14
 800a6d6:	bf09      	itett	eq
 800a6d8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800a8d0 <__ieee754_rem_pio2f+0x238>
 800a6dc:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800a8d4 <__ieee754_rem_pio2f+0x23c>
 800a6e0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800a8d8 <__ieee754_rem_pio2f+0x240>
 800a6e4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800a6e8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800a6ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6f0:	ed80 7a00 	vstr	s14, [r0]
 800a6f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a6f8:	edc0 7a01 	vstr	s15, [r0, #4]
 800a6fc:	2001      	movs	r0, #1
 800a6fe:	b007      	add	sp, #28
 800a700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a702:	4293      	cmp	r3, r2
 800a704:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a708:	bf09      	itett	eq
 800a70a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800a8d0 <__ieee754_rem_pio2f+0x238>
 800a70e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800a8d4 <__ieee754_rem_pio2f+0x23c>
 800a712:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800a8d8 <__ieee754_rem_pio2f+0x240>
 800a716:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800a71a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a71e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a722:	ed80 7a00 	vstr	s14, [r0]
 800a726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a72a:	edc0 7a01 	vstr	s15, [r0, #4]
 800a72e:	f04f 30ff 	mov.w	r0, #4294967295
 800a732:	e7e4      	b.n	800a6fe <__ieee754_rem_pio2f+0x66>
 800a734:	4b69      	ldr	r3, [pc, #420]	@ (800a8dc <__ieee754_rem_pio2f+0x244>)
 800a736:	429d      	cmp	r5, r3
 800a738:	d873      	bhi.n	800a822 <__ieee754_rem_pio2f+0x18a>
 800a73a:	f000 f8dd 	bl	800a8f8 <fabsf>
 800a73e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800a8e0 <__ieee754_rem_pio2f+0x248>
 800a742:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a746:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a74a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a74e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a752:	ee17 0a90 	vmov	r0, s15
 800a756:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800a8c8 <__ieee754_rem_pio2f+0x230>
 800a75a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a75e:	281f      	cmp	r0, #31
 800a760:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800a8d4 <__ieee754_rem_pio2f+0x23c>
 800a764:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a768:	eeb1 6a47 	vneg.f32	s12, s14
 800a76c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a770:	ee16 1a90 	vmov	r1, s13
 800a774:	dc09      	bgt.n	800a78a <__ieee754_rem_pio2f+0xf2>
 800a776:	4a5b      	ldr	r2, [pc, #364]	@ (800a8e4 <__ieee754_rem_pio2f+0x24c>)
 800a778:	1e47      	subs	r7, r0, #1
 800a77a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800a77e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800a782:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a786:	4293      	cmp	r3, r2
 800a788:	d107      	bne.n	800a79a <__ieee754_rem_pio2f+0x102>
 800a78a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800a78e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800a792:	2a08      	cmp	r2, #8
 800a794:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800a798:	dc14      	bgt.n	800a7c4 <__ieee754_rem_pio2f+0x12c>
 800a79a:	6021      	str	r1, [r4, #0]
 800a79c:	ed94 7a00 	vldr	s14, [r4]
 800a7a0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a7a4:	2e00      	cmp	r6, #0
 800a7a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a7aa:	ed84 0a01 	vstr	s0, [r4, #4]
 800a7ae:	daa6      	bge.n	800a6fe <__ieee754_rem_pio2f+0x66>
 800a7b0:	eeb1 7a47 	vneg.f32	s14, s14
 800a7b4:	eeb1 0a40 	vneg.f32	s0, s0
 800a7b8:	ed84 7a00 	vstr	s14, [r4]
 800a7bc:	ed84 0a01 	vstr	s0, [r4, #4]
 800a7c0:	4240      	negs	r0, r0
 800a7c2:	e79c      	b.n	800a6fe <__ieee754_rem_pio2f+0x66>
 800a7c4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800a8d0 <__ieee754_rem_pio2f+0x238>
 800a7c8:	eef0 6a40 	vmov.f32	s13, s0
 800a7cc:	eee6 6a25 	vfma.f32	s13, s12, s11
 800a7d0:	ee70 7a66 	vsub.f32	s15, s0, s13
 800a7d4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a7d8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800a8d8 <__ieee754_rem_pio2f+0x240>
 800a7dc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a7e0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a7e4:	ee15 2a90 	vmov	r2, s11
 800a7e8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a7ec:	1a5b      	subs	r3, r3, r1
 800a7ee:	2b19      	cmp	r3, #25
 800a7f0:	dc04      	bgt.n	800a7fc <__ieee754_rem_pio2f+0x164>
 800a7f2:	edc4 5a00 	vstr	s11, [r4]
 800a7f6:	eeb0 0a66 	vmov.f32	s0, s13
 800a7fa:	e7cf      	b.n	800a79c <__ieee754_rem_pio2f+0x104>
 800a7fc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800a8e8 <__ieee754_rem_pio2f+0x250>
 800a800:	eeb0 0a66 	vmov.f32	s0, s13
 800a804:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a808:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a80c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800a8ec <__ieee754_rem_pio2f+0x254>
 800a810:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a814:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a818:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a81c:	ed84 7a00 	vstr	s14, [r4]
 800a820:	e7bc      	b.n	800a79c <__ieee754_rem_pio2f+0x104>
 800a822:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800a826:	d306      	bcc.n	800a836 <__ieee754_rem_pio2f+0x19e>
 800a828:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a82c:	edc0 7a01 	vstr	s15, [r0, #4]
 800a830:	edc0 7a00 	vstr	s15, [r0]
 800a834:	e73e      	b.n	800a6b4 <__ieee754_rem_pio2f+0x1c>
 800a836:	15ea      	asrs	r2, r5, #23
 800a838:	3a86      	subs	r2, #134	@ 0x86
 800a83a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a83e:	ee07 3a90 	vmov	s15, r3
 800a842:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a846:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800a8f0 <__ieee754_rem_pio2f+0x258>
 800a84a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a84e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a852:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a856:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a85a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a85e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a862:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a866:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a86a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a86e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a876:	edcd 7a05 	vstr	s15, [sp, #20]
 800a87a:	d11e      	bne.n	800a8ba <__ieee754_rem_pio2f+0x222>
 800a87c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a884:	bf0c      	ite	eq
 800a886:	2301      	moveq	r3, #1
 800a888:	2302      	movne	r3, #2
 800a88a:	491a      	ldr	r1, [pc, #104]	@ (800a8f4 <__ieee754_rem_pio2f+0x25c>)
 800a88c:	9101      	str	r1, [sp, #4]
 800a88e:	2102      	movs	r1, #2
 800a890:	9100      	str	r1, [sp, #0]
 800a892:	a803      	add	r0, sp, #12
 800a894:	4621      	mov	r1, r4
 800a896:	f000 f837 	bl	800a908 <__kernel_rem_pio2f>
 800a89a:	2e00      	cmp	r6, #0
 800a89c:	f6bf af2f 	bge.w	800a6fe <__ieee754_rem_pio2f+0x66>
 800a8a0:	edd4 7a00 	vldr	s15, [r4]
 800a8a4:	eef1 7a67 	vneg.f32	s15, s15
 800a8a8:	edc4 7a00 	vstr	s15, [r4]
 800a8ac:	edd4 7a01 	vldr	s15, [r4, #4]
 800a8b0:	eef1 7a67 	vneg.f32	s15, s15
 800a8b4:	edc4 7a01 	vstr	s15, [r4, #4]
 800a8b8:	e782      	b.n	800a7c0 <__ieee754_rem_pio2f+0x128>
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e7e5      	b.n	800a88a <__ieee754_rem_pio2f+0x1f2>
 800a8be:	bf00      	nop
 800a8c0:	3f490fd8 	.word	0x3f490fd8
 800a8c4:	4016cbe3 	.word	0x4016cbe3
 800a8c8:	3fc90f80 	.word	0x3fc90f80
 800a8cc:	3fc90fd0 	.word	0x3fc90fd0
 800a8d0:	37354400 	.word	0x37354400
 800a8d4:	37354443 	.word	0x37354443
 800a8d8:	2e85a308 	.word	0x2e85a308
 800a8dc:	43490f80 	.word	0x43490f80
 800a8e0:	3f22f984 	.word	0x3f22f984
 800a8e4:	0800b4c8 	.word	0x0800b4c8
 800a8e8:	2e85a300 	.word	0x2e85a300
 800a8ec:	248d3132 	.word	0x248d3132
 800a8f0:	43800000 	.word	0x43800000
 800a8f4:	0800b548 	.word	0x0800b548

0800a8f8 <fabsf>:
 800a8f8:	ee10 3a10 	vmov	r3, s0
 800a8fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a900:	ee00 3a10 	vmov	s0, r3
 800a904:	4770      	bx	lr
	...

0800a908 <__kernel_rem_pio2f>:
 800a908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90c:	ed2d 8b04 	vpush	{d8-d9}
 800a910:	b0d9      	sub	sp, #356	@ 0x164
 800a912:	4690      	mov	r8, r2
 800a914:	9001      	str	r0, [sp, #4]
 800a916:	4ab9      	ldr	r2, [pc, #740]	@ (800abfc <__kernel_rem_pio2f+0x2f4>)
 800a918:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800a91a:	f118 0f04 	cmn.w	r8, #4
 800a91e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800a922:	460f      	mov	r7, r1
 800a924:	f103 3bff 	add.w	fp, r3, #4294967295
 800a928:	db27      	blt.n	800a97a <__kernel_rem_pio2f+0x72>
 800a92a:	f1b8 0203 	subs.w	r2, r8, #3
 800a92e:	bf48      	it	mi
 800a930:	f108 0204 	addmi.w	r2, r8, #4
 800a934:	10d2      	asrs	r2, r2, #3
 800a936:	1c55      	adds	r5, r2, #1
 800a938:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800a93a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800ac0c <__kernel_rem_pio2f+0x304>
 800a93e:	00e8      	lsls	r0, r5, #3
 800a940:	eba2 060b 	sub.w	r6, r2, fp
 800a944:	9002      	str	r0, [sp, #8]
 800a946:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800a94a:	eb0a 0c0b 	add.w	ip, sl, fp
 800a94e:	ac1c      	add	r4, sp, #112	@ 0x70
 800a950:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800a954:	2000      	movs	r0, #0
 800a956:	4560      	cmp	r0, ip
 800a958:	dd11      	ble.n	800a97e <__kernel_rem_pio2f+0x76>
 800a95a:	a91c      	add	r1, sp, #112	@ 0x70
 800a95c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800a960:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800a964:	f04f 0c00 	mov.w	ip, #0
 800a968:	45d4      	cmp	ip, sl
 800a96a:	dc27      	bgt.n	800a9bc <__kernel_rem_pio2f+0xb4>
 800a96c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a970:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800ac0c <__kernel_rem_pio2f+0x304>
 800a974:	4606      	mov	r6, r0
 800a976:	2400      	movs	r4, #0
 800a978:	e016      	b.n	800a9a8 <__kernel_rem_pio2f+0xa0>
 800a97a:	2200      	movs	r2, #0
 800a97c:	e7db      	b.n	800a936 <__kernel_rem_pio2f+0x2e>
 800a97e:	42c6      	cmn	r6, r0
 800a980:	bf5d      	ittte	pl
 800a982:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800a986:	ee07 1a90 	vmovpl	s15, r1
 800a98a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a98e:	eef0 7a47 	vmovmi.f32	s15, s14
 800a992:	ece4 7a01 	vstmia	r4!, {s15}
 800a996:	3001      	adds	r0, #1
 800a998:	e7dd      	b.n	800a956 <__kernel_rem_pio2f+0x4e>
 800a99a:	ecfe 6a01 	vldmia	lr!, {s13}
 800a99e:	ed96 7a00 	vldr	s14, [r6]
 800a9a2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a9a6:	3401      	adds	r4, #1
 800a9a8:	455c      	cmp	r4, fp
 800a9aa:	f1a6 0604 	sub.w	r6, r6, #4
 800a9ae:	ddf4      	ble.n	800a99a <__kernel_rem_pio2f+0x92>
 800a9b0:	ece9 7a01 	vstmia	r9!, {s15}
 800a9b4:	f10c 0c01 	add.w	ip, ip, #1
 800a9b8:	3004      	adds	r0, #4
 800a9ba:	e7d5      	b.n	800a968 <__kernel_rem_pio2f+0x60>
 800a9bc:	a908      	add	r1, sp, #32
 800a9be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9c2:	9104      	str	r1, [sp, #16]
 800a9c4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800a9c6:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800ac08 <__kernel_rem_pio2f+0x300>
 800a9ca:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800ac04 <__kernel_rem_pio2f+0x2fc>
 800a9ce:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800a9d2:	9203      	str	r2, [sp, #12]
 800a9d4:	4654      	mov	r4, sl
 800a9d6:	00a2      	lsls	r2, r4, #2
 800a9d8:	9205      	str	r2, [sp, #20]
 800a9da:	aa58      	add	r2, sp, #352	@ 0x160
 800a9dc:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800a9e0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800a9e4:	a944      	add	r1, sp, #272	@ 0x110
 800a9e6:	aa08      	add	r2, sp, #32
 800a9e8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800a9ec:	4694      	mov	ip, r2
 800a9ee:	4626      	mov	r6, r4
 800a9f0:	2e00      	cmp	r6, #0
 800a9f2:	f1a0 0004 	sub.w	r0, r0, #4
 800a9f6:	dc4c      	bgt.n	800aa92 <__kernel_rem_pio2f+0x18a>
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a9fe:	f000 f9f5 	bl	800adec <scalbnf>
 800aa02:	eeb0 8a40 	vmov.f32	s16, s0
 800aa06:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800aa0a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800aa0e:	f000 fa53 	bl	800aeb8 <floorf>
 800aa12:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800aa16:	eea0 8a67 	vfms.f32	s16, s0, s15
 800aa1a:	2d00      	cmp	r5, #0
 800aa1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa20:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800aa24:	ee17 9a90 	vmov	r9, s15
 800aa28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa2c:	ee38 8a67 	vsub.f32	s16, s16, s15
 800aa30:	dd41      	ble.n	800aab6 <__kernel_rem_pio2f+0x1ae>
 800aa32:	f104 3cff 	add.w	ip, r4, #4294967295
 800aa36:	a908      	add	r1, sp, #32
 800aa38:	f1c5 0e08 	rsb	lr, r5, #8
 800aa3c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800aa40:	fa46 f00e 	asr.w	r0, r6, lr
 800aa44:	4481      	add	r9, r0
 800aa46:	fa00 f00e 	lsl.w	r0, r0, lr
 800aa4a:	1a36      	subs	r6, r6, r0
 800aa4c:	f1c5 0007 	rsb	r0, r5, #7
 800aa50:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800aa54:	4106      	asrs	r6, r0
 800aa56:	2e00      	cmp	r6, #0
 800aa58:	dd3c      	ble.n	800aad4 <__kernel_rem_pio2f+0x1cc>
 800aa5a:	f04f 0e00 	mov.w	lr, #0
 800aa5e:	f109 0901 	add.w	r9, r9, #1
 800aa62:	4670      	mov	r0, lr
 800aa64:	4574      	cmp	r4, lr
 800aa66:	dc68      	bgt.n	800ab3a <__kernel_rem_pio2f+0x232>
 800aa68:	2d00      	cmp	r5, #0
 800aa6a:	dd03      	ble.n	800aa74 <__kernel_rem_pio2f+0x16c>
 800aa6c:	2d01      	cmp	r5, #1
 800aa6e:	d074      	beq.n	800ab5a <__kernel_rem_pio2f+0x252>
 800aa70:	2d02      	cmp	r5, #2
 800aa72:	d07d      	beq.n	800ab70 <__kernel_rem_pio2f+0x268>
 800aa74:	2e02      	cmp	r6, #2
 800aa76:	d12d      	bne.n	800aad4 <__kernel_rem_pio2f+0x1cc>
 800aa78:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800aa7c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800aa80:	b340      	cbz	r0, 800aad4 <__kernel_rem_pio2f+0x1cc>
 800aa82:	4628      	mov	r0, r5
 800aa84:	9306      	str	r3, [sp, #24]
 800aa86:	f000 f9b1 	bl	800adec <scalbnf>
 800aa8a:	9b06      	ldr	r3, [sp, #24]
 800aa8c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800aa90:	e020      	b.n	800aad4 <__kernel_rem_pio2f+0x1cc>
 800aa92:	ee60 7a28 	vmul.f32	s15, s0, s17
 800aa96:	3e01      	subs	r6, #1
 800aa98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aaa0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800aaa4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800aaa8:	ecac 0a01 	vstmia	ip!, {s0}
 800aaac:	ed90 0a00 	vldr	s0, [r0]
 800aab0:	ee37 0a80 	vadd.f32	s0, s15, s0
 800aab4:	e79c      	b.n	800a9f0 <__kernel_rem_pio2f+0xe8>
 800aab6:	d105      	bne.n	800aac4 <__kernel_rem_pio2f+0x1bc>
 800aab8:	1e60      	subs	r0, r4, #1
 800aaba:	a908      	add	r1, sp, #32
 800aabc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800aac0:	11f6      	asrs	r6, r6, #7
 800aac2:	e7c8      	b.n	800aa56 <__kernel_rem_pio2f+0x14e>
 800aac4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800aac8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800aacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aad0:	da31      	bge.n	800ab36 <__kernel_rem_pio2f+0x22e>
 800aad2:	2600      	movs	r6, #0
 800aad4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800aad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aadc:	f040 8098 	bne.w	800ac10 <__kernel_rem_pio2f+0x308>
 800aae0:	1e60      	subs	r0, r4, #1
 800aae2:	2200      	movs	r2, #0
 800aae4:	4550      	cmp	r0, sl
 800aae6:	da4b      	bge.n	800ab80 <__kernel_rem_pio2f+0x278>
 800aae8:	2a00      	cmp	r2, #0
 800aaea:	d065      	beq.n	800abb8 <__kernel_rem_pio2f+0x2b0>
 800aaec:	3c01      	subs	r4, #1
 800aaee:	ab08      	add	r3, sp, #32
 800aaf0:	3d08      	subs	r5, #8
 800aaf2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d0f8      	beq.n	800aaec <__kernel_rem_pio2f+0x1e4>
 800aafa:	4628      	mov	r0, r5
 800aafc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ab00:	f000 f974 	bl	800adec <scalbnf>
 800ab04:	1c63      	adds	r3, r4, #1
 800ab06:	aa44      	add	r2, sp, #272	@ 0x110
 800ab08:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800ac08 <__kernel_rem_pio2f+0x300>
 800ab0c:	0099      	lsls	r1, r3, #2
 800ab0e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ab12:	4623      	mov	r3, r4
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f280 80a9 	bge.w	800ac6c <__kernel_rem_pio2f+0x364>
 800ab1a:	4623      	mov	r3, r4
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f2c0 80c7 	blt.w	800acb0 <__kernel_rem_pio2f+0x3a8>
 800ab22:	aa44      	add	r2, sp, #272	@ 0x110
 800ab24:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ab28:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800ac00 <__kernel_rem_pio2f+0x2f8>
 800ab2c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800ac0c <__kernel_rem_pio2f+0x304>
 800ab30:	2000      	movs	r0, #0
 800ab32:	1ae2      	subs	r2, r4, r3
 800ab34:	e0b1      	b.n	800ac9a <__kernel_rem_pio2f+0x392>
 800ab36:	2602      	movs	r6, #2
 800ab38:	e78f      	b.n	800aa5a <__kernel_rem_pio2f+0x152>
 800ab3a:	f852 1b04 	ldr.w	r1, [r2], #4
 800ab3e:	b948      	cbnz	r0, 800ab54 <__kernel_rem_pio2f+0x24c>
 800ab40:	b121      	cbz	r1, 800ab4c <__kernel_rem_pio2f+0x244>
 800ab42:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800ab46:	f842 1c04 	str.w	r1, [r2, #-4]
 800ab4a:	2101      	movs	r1, #1
 800ab4c:	f10e 0e01 	add.w	lr, lr, #1
 800ab50:	4608      	mov	r0, r1
 800ab52:	e787      	b.n	800aa64 <__kernel_rem_pio2f+0x15c>
 800ab54:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800ab58:	e7f5      	b.n	800ab46 <__kernel_rem_pio2f+0x23e>
 800ab5a:	f104 3cff 	add.w	ip, r4, #4294967295
 800ab5e:	aa08      	add	r2, sp, #32
 800ab60:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ab64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ab68:	a908      	add	r1, sp, #32
 800ab6a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800ab6e:	e781      	b.n	800aa74 <__kernel_rem_pio2f+0x16c>
 800ab70:	f104 3cff 	add.w	ip, r4, #4294967295
 800ab74:	aa08      	add	r2, sp, #32
 800ab76:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ab7a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800ab7e:	e7f3      	b.n	800ab68 <__kernel_rem_pio2f+0x260>
 800ab80:	a908      	add	r1, sp, #32
 800ab82:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ab86:	3801      	subs	r0, #1
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	e7ab      	b.n	800aae4 <__kernel_rem_pio2f+0x1dc>
 800ab8c:	3201      	adds	r2, #1
 800ab8e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800ab92:	2e00      	cmp	r6, #0
 800ab94:	d0fa      	beq.n	800ab8c <__kernel_rem_pio2f+0x284>
 800ab96:	9905      	ldr	r1, [sp, #20]
 800ab98:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800ab9c:	eb0d 0001 	add.w	r0, sp, r1
 800aba0:	18e6      	adds	r6, r4, r3
 800aba2:	a91c      	add	r1, sp, #112	@ 0x70
 800aba4:	f104 0c01 	add.w	ip, r4, #1
 800aba8:	384c      	subs	r0, #76	@ 0x4c
 800abaa:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800abae:	4422      	add	r2, r4
 800abb0:	4562      	cmp	r2, ip
 800abb2:	da04      	bge.n	800abbe <__kernel_rem_pio2f+0x2b6>
 800abb4:	4614      	mov	r4, r2
 800abb6:	e70e      	b.n	800a9d6 <__kernel_rem_pio2f+0xce>
 800abb8:	9804      	ldr	r0, [sp, #16]
 800abba:	2201      	movs	r2, #1
 800abbc:	e7e7      	b.n	800ab8e <__kernel_rem_pio2f+0x286>
 800abbe:	9903      	ldr	r1, [sp, #12]
 800abc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800abc4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800abc8:	9105      	str	r1, [sp, #20]
 800abca:	ee07 1a90 	vmov	s15, r1
 800abce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abd2:	2400      	movs	r4, #0
 800abd4:	ece6 7a01 	vstmia	r6!, {s15}
 800abd8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800ac0c <__kernel_rem_pio2f+0x304>
 800abdc:	46b1      	mov	r9, r6
 800abde:	455c      	cmp	r4, fp
 800abe0:	dd04      	ble.n	800abec <__kernel_rem_pio2f+0x2e4>
 800abe2:	ece0 7a01 	vstmia	r0!, {s15}
 800abe6:	f10c 0c01 	add.w	ip, ip, #1
 800abea:	e7e1      	b.n	800abb0 <__kernel_rem_pio2f+0x2a8>
 800abec:	ecfe 6a01 	vldmia	lr!, {s13}
 800abf0:	ed39 7a01 	vldmdb	r9!, {s14}
 800abf4:	3401      	adds	r4, #1
 800abf6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800abfa:	e7f0      	b.n	800abde <__kernel_rem_pio2f+0x2d6>
 800abfc:	0800b88c 	.word	0x0800b88c
 800ac00:	0800b860 	.word	0x0800b860
 800ac04:	43800000 	.word	0x43800000
 800ac08:	3b800000 	.word	0x3b800000
 800ac0c:	00000000 	.word	0x00000000
 800ac10:	9b02      	ldr	r3, [sp, #8]
 800ac12:	eeb0 0a48 	vmov.f32	s0, s16
 800ac16:	eba3 0008 	sub.w	r0, r3, r8
 800ac1a:	f000 f8e7 	bl	800adec <scalbnf>
 800ac1e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800ac04 <__kernel_rem_pio2f+0x2fc>
 800ac22:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ac26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac2a:	db19      	blt.n	800ac60 <__kernel_rem_pio2f+0x358>
 800ac2c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800ac08 <__kernel_rem_pio2f+0x300>
 800ac30:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ac34:	aa08      	add	r2, sp, #32
 800ac36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac3a:	3508      	adds	r5, #8
 800ac3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac40:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ac44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ac48:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ac4c:	ee10 3a10 	vmov	r3, s0
 800ac50:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ac54:	ee17 3a90 	vmov	r3, s15
 800ac58:	3401      	adds	r4, #1
 800ac5a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ac5e:	e74c      	b.n	800aafa <__kernel_rem_pio2f+0x1f2>
 800ac60:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ac64:	aa08      	add	r2, sp, #32
 800ac66:	ee10 3a10 	vmov	r3, s0
 800ac6a:	e7f6      	b.n	800ac5a <__kernel_rem_pio2f+0x352>
 800ac6c:	a808      	add	r0, sp, #32
 800ac6e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ac72:	9001      	str	r0, [sp, #4]
 800ac74:	ee07 0a90 	vmov	s15, r0
 800ac78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ac82:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ac86:	ed62 7a01 	vstmdb	r2!, {s15}
 800ac8a:	e743      	b.n	800ab14 <__kernel_rem_pio2f+0x20c>
 800ac8c:	ecfc 6a01 	vldmia	ip!, {s13}
 800ac90:	ecb5 7a01 	vldmia	r5!, {s14}
 800ac94:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ac98:	3001      	adds	r0, #1
 800ac9a:	4550      	cmp	r0, sl
 800ac9c:	dc01      	bgt.n	800aca2 <__kernel_rem_pio2f+0x39a>
 800ac9e:	4282      	cmp	r2, r0
 800aca0:	daf4      	bge.n	800ac8c <__kernel_rem_pio2f+0x384>
 800aca2:	a858      	add	r0, sp, #352	@ 0x160
 800aca4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800aca8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800acac:	3b01      	subs	r3, #1
 800acae:	e735      	b.n	800ab1c <__kernel_rem_pio2f+0x214>
 800acb0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800acb2:	2b02      	cmp	r3, #2
 800acb4:	dc09      	bgt.n	800acca <__kernel_rem_pio2f+0x3c2>
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	dc2b      	bgt.n	800ad12 <__kernel_rem_pio2f+0x40a>
 800acba:	d044      	beq.n	800ad46 <__kernel_rem_pio2f+0x43e>
 800acbc:	f009 0007 	and.w	r0, r9, #7
 800acc0:	b059      	add	sp, #356	@ 0x164
 800acc2:	ecbd 8b04 	vpop	{d8-d9}
 800acc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acca:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800accc:	2b03      	cmp	r3, #3
 800acce:	d1f5      	bne.n	800acbc <__kernel_rem_pio2f+0x3b4>
 800acd0:	aa30      	add	r2, sp, #192	@ 0xc0
 800acd2:	1f0b      	subs	r3, r1, #4
 800acd4:	4413      	add	r3, r2
 800acd6:	461a      	mov	r2, r3
 800acd8:	4620      	mov	r0, r4
 800acda:	2800      	cmp	r0, #0
 800acdc:	f1a2 0204 	sub.w	r2, r2, #4
 800ace0:	dc52      	bgt.n	800ad88 <__kernel_rem_pio2f+0x480>
 800ace2:	4622      	mov	r2, r4
 800ace4:	2a01      	cmp	r2, #1
 800ace6:	f1a3 0304 	sub.w	r3, r3, #4
 800acea:	dc5d      	bgt.n	800ada8 <__kernel_rem_pio2f+0x4a0>
 800acec:	ab30      	add	r3, sp, #192	@ 0xc0
 800acee:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800ac0c <__kernel_rem_pio2f+0x304>
 800acf2:	440b      	add	r3, r1
 800acf4:	2c01      	cmp	r4, #1
 800acf6:	dc67      	bgt.n	800adc8 <__kernel_rem_pio2f+0x4c0>
 800acf8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800acfc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800ad00:	2e00      	cmp	r6, #0
 800ad02:	d167      	bne.n	800add4 <__kernel_rem_pio2f+0x4cc>
 800ad04:	edc7 6a00 	vstr	s13, [r7]
 800ad08:	ed87 7a01 	vstr	s14, [r7, #4]
 800ad0c:	edc7 7a02 	vstr	s15, [r7, #8]
 800ad10:	e7d4      	b.n	800acbc <__kernel_rem_pio2f+0x3b4>
 800ad12:	ab30      	add	r3, sp, #192	@ 0xc0
 800ad14:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800ac0c <__kernel_rem_pio2f+0x304>
 800ad18:	440b      	add	r3, r1
 800ad1a:	4622      	mov	r2, r4
 800ad1c:	2a00      	cmp	r2, #0
 800ad1e:	da24      	bge.n	800ad6a <__kernel_rem_pio2f+0x462>
 800ad20:	b34e      	cbz	r6, 800ad76 <__kernel_rem_pio2f+0x46e>
 800ad22:	eef1 7a47 	vneg.f32	s15, s14
 800ad26:	edc7 7a00 	vstr	s15, [r7]
 800ad2a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800ad2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad32:	aa31      	add	r2, sp, #196	@ 0xc4
 800ad34:	2301      	movs	r3, #1
 800ad36:	429c      	cmp	r4, r3
 800ad38:	da20      	bge.n	800ad7c <__kernel_rem_pio2f+0x474>
 800ad3a:	b10e      	cbz	r6, 800ad40 <__kernel_rem_pio2f+0x438>
 800ad3c:	eef1 7a67 	vneg.f32	s15, s15
 800ad40:	edc7 7a01 	vstr	s15, [r7, #4]
 800ad44:	e7ba      	b.n	800acbc <__kernel_rem_pio2f+0x3b4>
 800ad46:	ab30      	add	r3, sp, #192	@ 0xc0
 800ad48:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800ac0c <__kernel_rem_pio2f+0x304>
 800ad4c:	440b      	add	r3, r1
 800ad4e:	2c00      	cmp	r4, #0
 800ad50:	da05      	bge.n	800ad5e <__kernel_rem_pio2f+0x456>
 800ad52:	b10e      	cbz	r6, 800ad58 <__kernel_rem_pio2f+0x450>
 800ad54:	eef1 7a67 	vneg.f32	s15, s15
 800ad58:	edc7 7a00 	vstr	s15, [r7]
 800ad5c:	e7ae      	b.n	800acbc <__kernel_rem_pio2f+0x3b4>
 800ad5e:	ed33 7a01 	vldmdb	r3!, {s14}
 800ad62:	3c01      	subs	r4, #1
 800ad64:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad68:	e7f1      	b.n	800ad4e <__kernel_rem_pio2f+0x446>
 800ad6a:	ed73 7a01 	vldmdb	r3!, {s15}
 800ad6e:	3a01      	subs	r2, #1
 800ad70:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad74:	e7d2      	b.n	800ad1c <__kernel_rem_pio2f+0x414>
 800ad76:	eef0 7a47 	vmov.f32	s15, s14
 800ad7a:	e7d4      	b.n	800ad26 <__kernel_rem_pio2f+0x41e>
 800ad7c:	ecb2 7a01 	vldmia	r2!, {s14}
 800ad80:	3301      	adds	r3, #1
 800ad82:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad86:	e7d6      	b.n	800ad36 <__kernel_rem_pio2f+0x42e>
 800ad88:	edd2 7a00 	vldr	s15, [r2]
 800ad8c:	edd2 6a01 	vldr	s13, [r2, #4]
 800ad90:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ad94:	3801      	subs	r0, #1
 800ad96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ad9a:	ed82 7a00 	vstr	s14, [r2]
 800ad9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ada2:	edc2 7a01 	vstr	s15, [r2, #4]
 800ada6:	e798      	b.n	800acda <__kernel_rem_pio2f+0x3d2>
 800ada8:	edd3 7a00 	vldr	s15, [r3]
 800adac:	edd3 6a01 	vldr	s13, [r3, #4]
 800adb0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800adb4:	3a01      	subs	r2, #1
 800adb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800adba:	ed83 7a00 	vstr	s14, [r3]
 800adbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adc2:	edc3 7a01 	vstr	s15, [r3, #4]
 800adc6:	e78d      	b.n	800ace4 <__kernel_rem_pio2f+0x3dc>
 800adc8:	ed33 7a01 	vldmdb	r3!, {s14}
 800adcc:	3c01      	subs	r4, #1
 800adce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800add2:	e78f      	b.n	800acf4 <__kernel_rem_pio2f+0x3ec>
 800add4:	eef1 6a66 	vneg.f32	s13, s13
 800add8:	eeb1 7a47 	vneg.f32	s14, s14
 800addc:	edc7 6a00 	vstr	s13, [r7]
 800ade0:	ed87 7a01 	vstr	s14, [r7, #4]
 800ade4:	eef1 7a67 	vneg.f32	s15, s15
 800ade8:	e790      	b.n	800ad0c <__kernel_rem_pio2f+0x404>
 800adea:	bf00      	nop

0800adec <scalbnf>:
 800adec:	ee10 3a10 	vmov	r3, s0
 800adf0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800adf4:	d02b      	beq.n	800ae4e <scalbnf+0x62>
 800adf6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800adfa:	d302      	bcc.n	800ae02 <scalbnf+0x16>
 800adfc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ae00:	4770      	bx	lr
 800ae02:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800ae06:	d123      	bne.n	800ae50 <scalbnf+0x64>
 800ae08:	4b24      	ldr	r3, [pc, #144]	@ (800ae9c <scalbnf+0xb0>)
 800ae0a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800aea0 <scalbnf+0xb4>
 800ae0e:	4298      	cmp	r0, r3
 800ae10:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ae14:	db17      	blt.n	800ae46 <scalbnf+0x5a>
 800ae16:	ee10 3a10 	vmov	r3, s0
 800ae1a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ae1e:	3a19      	subs	r2, #25
 800ae20:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ae24:	4288      	cmp	r0, r1
 800ae26:	dd15      	ble.n	800ae54 <scalbnf+0x68>
 800ae28:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800aea4 <scalbnf+0xb8>
 800ae2c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800aea8 <scalbnf+0xbc>
 800ae30:	ee10 3a10 	vmov	r3, s0
 800ae34:	eeb0 7a67 	vmov.f32	s14, s15
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	bfb8      	it	lt
 800ae3c:	eef0 7a66 	vmovlt.f32	s15, s13
 800ae40:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ae44:	4770      	bx	lr
 800ae46:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800aeac <scalbnf+0xc0>
 800ae4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ae4e:	4770      	bx	lr
 800ae50:	0dd2      	lsrs	r2, r2, #23
 800ae52:	e7e5      	b.n	800ae20 <scalbnf+0x34>
 800ae54:	4410      	add	r0, r2
 800ae56:	28fe      	cmp	r0, #254	@ 0xfe
 800ae58:	dce6      	bgt.n	800ae28 <scalbnf+0x3c>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	dd06      	ble.n	800ae6c <scalbnf+0x80>
 800ae5e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ae62:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ae66:	ee00 3a10 	vmov	s0, r3
 800ae6a:	4770      	bx	lr
 800ae6c:	f110 0f16 	cmn.w	r0, #22
 800ae70:	da09      	bge.n	800ae86 <scalbnf+0x9a>
 800ae72:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800aeac <scalbnf+0xc0>
 800ae76:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800aeb0 <scalbnf+0xc4>
 800ae7a:	ee10 3a10 	vmov	r3, s0
 800ae7e:	eeb0 7a67 	vmov.f32	s14, s15
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	e7d9      	b.n	800ae3a <scalbnf+0x4e>
 800ae86:	3019      	adds	r0, #25
 800ae88:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ae8c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ae90:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800aeb4 <scalbnf+0xc8>
 800ae94:	ee07 3a90 	vmov	s15, r3
 800ae98:	e7d7      	b.n	800ae4a <scalbnf+0x5e>
 800ae9a:	bf00      	nop
 800ae9c:	ffff3cb0 	.word	0xffff3cb0
 800aea0:	4c000000 	.word	0x4c000000
 800aea4:	7149f2ca 	.word	0x7149f2ca
 800aea8:	f149f2ca 	.word	0xf149f2ca
 800aeac:	0da24260 	.word	0x0da24260
 800aeb0:	8da24260 	.word	0x8da24260
 800aeb4:	33000000 	.word	0x33000000

0800aeb8 <floorf>:
 800aeb8:	ee10 3a10 	vmov	r3, s0
 800aebc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800aec0:	3a7f      	subs	r2, #127	@ 0x7f
 800aec2:	2a16      	cmp	r2, #22
 800aec4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800aec8:	dc2b      	bgt.n	800af22 <floorf+0x6a>
 800aeca:	2a00      	cmp	r2, #0
 800aecc:	da12      	bge.n	800aef4 <floorf+0x3c>
 800aece:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800af34 <floorf+0x7c>
 800aed2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aed6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aeda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aede:	dd06      	ble.n	800aeee <floorf+0x36>
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	da24      	bge.n	800af2e <floorf+0x76>
 800aee4:	2900      	cmp	r1, #0
 800aee6:	4b14      	ldr	r3, [pc, #80]	@ (800af38 <floorf+0x80>)
 800aee8:	bf08      	it	eq
 800aeea:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800aeee:	ee00 3a10 	vmov	s0, r3
 800aef2:	4770      	bx	lr
 800aef4:	4911      	ldr	r1, [pc, #68]	@ (800af3c <floorf+0x84>)
 800aef6:	4111      	asrs	r1, r2
 800aef8:	420b      	tst	r3, r1
 800aefa:	d0fa      	beq.n	800aef2 <floorf+0x3a>
 800aefc:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800af34 <floorf+0x7c>
 800af00:	ee30 0a27 	vadd.f32	s0, s0, s15
 800af04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800af08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af0c:	ddef      	ble.n	800aeee <floorf+0x36>
 800af0e:	2b00      	cmp	r3, #0
 800af10:	bfbe      	ittt	lt
 800af12:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800af16:	fa40 f202 	asrlt.w	r2, r0, r2
 800af1a:	189b      	addlt	r3, r3, r2
 800af1c:	ea23 0301 	bic.w	r3, r3, r1
 800af20:	e7e5      	b.n	800aeee <floorf+0x36>
 800af22:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800af26:	d3e4      	bcc.n	800aef2 <floorf+0x3a>
 800af28:	ee30 0a00 	vadd.f32	s0, s0, s0
 800af2c:	4770      	bx	lr
 800af2e:	2300      	movs	r3, #0
 800af30:	e7dd      	b.n	800aeee <floorf+0x36>
 800af32:	bf00      	nop
 800af34:	7149f2ca 	.word	0x7149f2ca
 800af38:	bf800000 	.word	0xbf800000
 800af3c:	007fffff 	.word	0x007fffff

0800af40 <_init>:
 800af40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af42:	bf00      	nop
 800af44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af46:	bc08      	pop	{r3}
 800af48:	469e      	mov	lr, r3
 800af4a:	4770      	bx	lr

0800af4c <_fini>:
 800af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4e:	bf00      	nop
 800af50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af52:	bc08      	pop	{r3}
 800af54:	469e      	mov	lr, r3
 800af56:	4770      	bx	lr
