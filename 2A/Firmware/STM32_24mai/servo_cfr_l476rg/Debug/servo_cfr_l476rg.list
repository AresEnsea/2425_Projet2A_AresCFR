
servo_cfr_l476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005824  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080059ac  080059ac  000069ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059f4  080059f4  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  080059f4  080059f4  000069f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059fc  080059fc  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059fc  080059fc  000069fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a00  08005a00  00006a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005a04  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000014  08005a18  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08005a18  000071ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e6b  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f0  00000000  00000000  00017eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  0001a1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c18  00000000  00000000  0001b110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bf3  00000000  00000000  0001bd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001234b  00000000  00000000  0004291b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2641  00000000  00000000  00054c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001472a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004144  00000000  00000000  001472ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0014b430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005994 	.word	0x08005994

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08005994 	.word	0x08005994

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <setServoPosition_PA8>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Fonction pour définir la position du servo PA8 (Pince 1 gauche)
void setServoPosition_PA8(uint16_t position) {
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
    TIM1->CCR1 = position;
 80004c2:	4a04      	ldr	r2, [pc, #16]	@ (80004d4 <setServoPosition_PA8+0x1c>)
 80004c4:	88fb      	ldrh	r3, [r7, #6]
 80004c6:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	40012c00 	.word	0x40012c00

080004d8 <setServoPosition_PB0>:

// Fonction pour définir la position du servo PB0 (Pince 1 droite)
void setServoPosition_PB0(uint16_t position) {
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	80fb      	strh	r3, [r7, #6]
    TIM3->CCR3 = position;
 80004e2:	4a04      	ldr	r2, [pc, #16]	@ (80004f4 <setServoPosition_PB0+0x1c>)
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	40000400 	.word	0x40000400

080004f8 <setServoPosition_PA6>:

// Fonction pour définir la position du servo PA6 (Pince 2 gauche)
void setServoPosition_PA6(uint16_t position) {
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	80fb      	strh	r3, [r7, #6]
    TIM3->CCR1 = position;
 8000502:	4a04      	ldr	r2, [pc, #16]	@ (8000514 <setServoPosition_PA6+0x1c>)
 8000504:	88fb      	ldrh	r3, [r7, #6]
 8000506:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr
 8000514:	40000400 	.word	0x40000400

08000518 <setServoPosition_PA10>:

// Fonction pour définir la position du servo PA10 (Pince 2 droite)
void setServoPosition_PA10(uint16_t position) {
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	80fb      	strh	r3, [r7, #6]
    TIM1->CCR3 = position;
 8000522:	4a04      	ldr	r2, [pc, #16]	@ (8000534 <setServoPosition_PA10+0x1c>)
 8000524:	88fb      	ldrh	r3, [r7, #6]
 8000526:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	40012c00 	.word	0x40012c00

08000538 <moveServoSmoothly>:

// Fonction pour déplacer un servo progressivement
void moveServoSmoothly(uint16_t *current_position, uint16_t target_position, void (*setPosition)(uint16_t)) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	460b      	mov	r3, r1
 8000542:	607a      	str	r2, [r7, #4]
 8000544:	817b      	strh	r3, [r7, #10]
    if (*current_position == target_position) {
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	897a      	ldrh	r2, [r7, #10]
 800054c:	429a      	cmp	r2, r3
 800054e:	d02a      	beq.n	80005a6 <moveServoSmoothly+0x6e>
        return; // Pas besoin de bouger si déjà à la position cible
    }

    int16_t step = (target_position - *current_position) / SMOOTH_STEPS;
 8000550:	897b      	ldrh	r3, [r7, #10]
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	8812      	ldrh	r2, [r2, #0]
 8000556:	1a9b      	subs	r3, r3, r2
 8000558:	4a15      	ldr	r2, [pc, #84]	@ (80005b0 <moveServoSmoothly+0x78>)
 800055a:	fb82 1203 	smull	r1, r2, r2, r3
 800055e:	1112      	asrs	r2, r2, #4
 8000560:	17db      	asrs	r3, r3, #31
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	82fb      	strh	r3, [r7, #22]
    uint16_t position = *current_position;
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	83fb      	strh	r3, [r7, #30]

    for (int i = 0; i < SMOOTH_STEPS; i++) {
 800056c:	2300      	movs	r3, #0
 800056e:	61bb      	str	r3, [r7, #24]
 8000570:	e012      	b.n	8000598 <moveServoSmoothly+0x60>
        position += step;
 8000572:	8afa      	ldrh	r2, [r7, #22]
 8000574:	8bfb      	ldrh	r3, [r7, #30]
 8000576:	4413      	add	r3, r2
 8000578:	83fb      	strh	r3, [r7, #30]
        // S'assurer que la dernière étape atteint exactement la position cible
        if (i == SMOOTH_STEPS - 1) {
 800057a:	69bb      	ldr	r3, [r7, #24]
 800057c:	2b31      	cmp	r3, #49	@ 0x31
 800057e:	d101      	bne.n	8000584 <moveServoSmoothly+0x4c>
            position = target_position;
 8000580:	897b      	ldrh	r3, [r7, #10]
 8000582:	83fb      	strh	r3, [r7, #30]
        }

        setPosition(position);
 8000584:	8bfa      	ldrh	r2, [r7, #30]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4610      	mov	r0, r2
 800058a:	4798      	blx	r3
        HAL_Delay(STEP_DELAY_MS);
 800058c:	201e      	movs	r0, #30
 800058e:	f000 fe77 	bl	8001280 <HAL_Delay>
    for (int i = 0; i < SMOOTH_STEPS; i++) {
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	3301      	adds	r3, #1
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	2b31      	cmp	r3, #49	@ 0x31
 800059c:	dde9      	ble.n	8000572 <moveServoSmoothly+0x3a>
    }

    *current_position = target_position;
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	897a      	ldrh	r2, [r7, #10]
 80005a2:	801a      	strh	r2, [r3, #0]
 80005a4:	e000      	b.n	80005a8 <moveServoSmoothly+0x70>
        return; // Pas besoin de bouger si déjà à la position cible
 80005a6:	bf00      	nop
}
 80005a8:	3720      	adds	r7, #32
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	51eb851f 	.word	0x51eb851f

080005b4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005ba:	f000 fde5 	bl	8001188 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005be:	f000 f961 	bl	8000884 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005c2:	f000 fb6d 	bl	8000ca0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005c6:	f000 fb3b 	bl	8000c40 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 80005ca:	f000 f9ad 	bl	8000928 <MX_TIM1_Init>
	MX_TIM3_Init();
 80005ce:	f000 fa6f 	bl	8000ab0 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 80005d2:	f000 fb05 	bl	8000be0 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  // PA7 (première pince, milieu)
 80005d6:	2104      	movs	r1, #4
 80005d8:	489a      	ldr	r0, [pc, #616]	@ (8000844 <main+0x290>)
 80005da:	f002 fd9f 	bl	800311c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);  // PB0 (première pince, droit)
 80005de:	2108      	movs	r1, #8
 80005e0:	4898      	ldr	r0, [pc, #608]	@ (8000844 <main+0x290>)
 80005e2:	f002 fd9b 	bl	800311c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // PA8 (première pince, gauche)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4897      	ldr	r0, [pc, #604]	@ (8000848 <main+0x294>)
 80005ea:	f002 fd97 	bl	800311c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);  // PA9 (deuxième pince, milieu)
 80005ee:	2104      	movs	r1, #4
 80005f0:	4895      	ldr	r0, [pc, #596]	@ (8000848 <main+0x294>)
 80005f2:	f002 fd93 	bl	800311c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);  // PA10 (deuxième pince, droit)
 80005f6:	2108      	movs	r1, #8
 80005f8:	4893      	ldr	r0, [pc, #588]	@ (8000848 <main+0x294>)
 80005fa:	f002 fd8f 	bl	800311c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // PA6 (deuxième pince, gauche)
 80005fe:	2100      	movs	r1, #0
 8000600:	4890      	ldr	r0, [pc, #576]	@ (8000844 <main+0x290>)
 8000602:	f002 fd8b 	bl	800311c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);  // PB1 (banderolle)
 8000606:	210c      	movs	r1, #12
 8000608:	488e      	ldr	r0, [pc, #568]	@ (8000844 <main+0x290>)
 800060a:	f002 fd87 	bl	800311c <HAL_TIM_PWM_Start>

	HAL_UART_Receive_IT(&huart1, (uint8_t *)rx_data, 13);
 800060e:	220d      	movs	r2, #13
 8000610:	498e      	ldr	r1, [pc, #568]	@ (800084c <main+0x298>)
 8000612:	488f      	ldr	r0, [pc, #572]	@ (8000850 <main+0x29c>)
 8000614:	f003 fe80 	bl	8004318 <HAL_UART_Receive_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// Find the start marker '<' in rx_data
		int offset = -1;
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	61fb      	str	r3, [r7, #28]
		for (int j = 0; j < sizeof(rx_data); j++) {
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
 8000622:	e00b      	b.n	800063c <main+0x88>
			if (rx_data[j] == '<') {
 8000624:	4a89      	ldr	r2, [pc, #548]	@ (800084c <main+0x298>)
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	4413      	add	r3, r2
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b3c      	cmp	r3, #60	@ 0x3c
 800062e:	d102      	bne.n	8000636 <main+0x82>
				offset = j;
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	61fb      	str	r3, [r7, #28]
				break;
 8000634:	e005      	b.n	8000642 <main+0x8e>
		for (int j = 0; j < sizeof(rx_data); j++) {
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	3301      	adds	r3, #1
 800063a:	61bb      	str	r3, [r7, #24]
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	2b0c      	cmp	r3, #12
 8000640:	d9f0      	bls.n	8000624 <main+0x70>
			}
		}

		// Process data if '>' is found
		if (offset >= 0) {
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	2b00      	cmp	r3, #0
 8000646:	f2c0 80f7 	blt.w	8000838 <main+0x284>
			// Debug output: Reconstruct the message in circular order
			char message[15]; // 13 caractères de rx_data + 2 pour "\r\n"
			for (int i = 0; i < 13; i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	e018      	b.n	8000682 <main+0xce>
				message[i] = rx_data[(offset + i) % 13];
 8000650:	69fa      	ldr	r2, [r7, #28]
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	18d1      	adds	r1, r2, r3
 8000656:	4b7f      	ldr	r3, [pc, #508]	@ (8000854 <main+0x2a0>)
 8000658:	fb83 2301 	smull	r2, r3, r3, r1
 800065c:	109a      	asrs	r2, r3, #2
 800065e:	17cb      	asrs	r3, r1, #31
 8000660:	1ad2      	subs	r2, r2, r3
 8000662:	4613      	mov	r3, r2
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	4413      	add	r3, r2
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	4413      	add	r3, r2
 800066c:	1aca      	subs	r2, r1, r3
 800066e:	4b77      	ldr	r3, [pc, #476]	@ (800084c <main+0x298>)
 8000670:	5c99      	ldrb	r1, [r3, r2]
 8000672:	1d3a      	adds	r2, r7, #4
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	4413      	add	r3, r2
 8000678:	460a      	mov	r2, r1
 800067a:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 13; i++) {
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	3301      	adds	r3, #1
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	2b0c      	cmp	r3, #12
 8000686:	dde3      	ble.n	8000650 <main+0x9c>
			}
			message[13] = '\r'; // Ajouter retour chariot
 8000688:	230d      	movs	r3, #13
 800068a:	747b      	strb	r3, [r7, #17]
			message[14] = '\n'; // Ajouter nouvelle ligne
 800068c:	230a      	movs	r3, #10
 800068e:	74bb      	strb	r3, [r7, #18]
			HAL_UART_Transmit(&huart2, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);
 8000690:	1d39      	adds	r1, r7, #4
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	220f      	movs	r2, #15
 8000698:	486f      	ldr	r0, [pc, #444]	@ (8000858 <main+0x2a4>)
 800069a:	f003 fdb3 	bl	8004204 <HAL_UART_Transmit>

			// Première pince
			if (rx_data[(offset + 1) % 13] == '0') { // PA7 (TIM3_CH2) milieu
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	1c59      	adds	r1, r3, #1
 80006a2:	4b6c      	ldr	r3, [pc, #432]	@ (8000854 <main+0x2a0>)
 80006a4:	fb83 2301 	smull	r2, r3, r3, r1
 80006a8:	109a      	asrs	r2, r3, #2
 80006aa:	17cb      	asrs	r3, r1, #31
 80006ac:	1ad2      	subs	r2, r2, r3
 80006ae:	4613      	mov	r3, r2
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	4413      	add	r3, r2
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	4413      	add	r3, r2
 80006b8:	1aca      	subs	r2, r1, r3
 80006ba:	4b64      	ldr	r3, [pc, #400]	@ (800084c <main+0x298>)
 80006bc:	5c9b      	ldrb	r3, [r3, r2]
 80006be:	2b30      	cmp	r3, #48	@ 0x30
 80006c0:	d104      	bne.n	80006cc <main+0x118>
				TIM3->CCR2 = SERVO_MAX_M;
 80006c2:	4b66      	ldr	r3, [pc, #408]	@ (800085c <main+0x2a8>)
 80006c4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80006c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80006ca:	e003      	b.n	80006d4 <main+0x120>
			} else {
				TIM3->CCR2 = SERVO_MIN_M;
 80006cc:	4b63      	ldr	r3, [pc, #396]	@ (800085c <main+0x2a8>)
 80006ce:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80006d2:	639a      	str	r2, [r3, #56]	@ 0x38
			}

			// Déplacement progressif de la pince 1 droite
			if (rx_data[(offset + 2) % 13] == '0') { // PB0 (TIM3_CH3) droit
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	1c99      	adds	r1, r3, #2
 80006d8:	4b5e      	ldr	r3, [pc, #376]	@ (8000854 <main+0x2a0>)
 80006da:	fb83 2301 	smull	r2, r3, r3, r1
 80006de:	109a      	asrs	r2, r3, #2
 80006e0:	17cb      	asrs	r3, r1, #31
 80006e2:	1ad2      	subs	r2, r2, r3
 80006e4:	4613      	mov	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	4413      	add	r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4413      	add	r3, r2
 80006ee:	1aca      	subs	r2, r1, r3
 80006f0:	4b56      	ldr	r3, [pc, #344]	@ (800084c <main+0x298>)
 80006f2:	5c9b      	ldrb	r3, [r3, r2]
 80006f4:	2b30      	cmp	r3, #48	@ 0x30
 80006f6:	d106      	bne.n	8000706 <main+0x152>
				moveServoSmoothly(&current_pos_d1, SERVO_MIN_D, setServoPosition_PB0);
 80006f8:	4a59      	ldr	r2, [pc, #356]	@ (8000860 <main+0x2ac>)
 80006fa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006fe:	4859      	ldr	r0, [pc, #356]	@ (8000864 <main+0x2b0>)
 8000700:	f7ff ff1a 	bl	8000538 <moveServoSmoothly>
 8000704:	e005      	b.n	8000712 <main+0x15e>
			} else {
				moveServoSmoothly(&current_pos_d1, SERVO_MAX_D, setServoPosition_PB0);
 8000706:	4a56      	ldr	r2, [pc, #344]	@ (8000860 <main+0x2ac>)
 8000708:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800070c:	4855      	ldr	r0, [pc, #340]	@ (8000864 <main+0x2b0>)
 800070e:	f7ff ff13 	bl	8000538 <moveServoSmoothly>
			}

			// Déplacement progressif de la pince 1 gauche
			if (rx_data[(offset + 3) % 13] == '0') { // PA8 (TIM1_CH1) gauche
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	1cd9      	adds	r1, r3, #3
 8000716:	4b4f      	ldr	r3, [pc, #316]	@ (8000854 <main+0x2a0>)
 8000718:	fb83 2301 	smull	r2, r3, r3, r1
 800071c:	109a      	asrs	r2, r3, #2
 800071e:	17cb      	asrs	r3, r1, #31
 8000720:	1ad2      	subs	r2, r2, r3
 8000722:	4613      	mov	r3, r2
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	4413      	add	r3, r2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4413      	add	r3, r2
 800072c:	1aca      	subs	r2, r1, r3
 800072e:	4b47      	ldr	r3, [pc, #284]	@ (800084c <main+0x298>)
 8000730:	5c9b      	ldrb	r3, [r3, r2]
 8000732:	2b30      	cmp	r3, #48	@ 0x30
 8000734:	d106      	bne.n	8000744 <main+0x190>
				moveServoSmoothly(&current_pos_g1, SERVO_MAX_G, setServoPosition_PA8);
 8000736:	4a4c      	ldr	r2, [pc, #304]	@ (8000868 <main+0x2b4>)
 8000738:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800073c:	484b      	ldr	r0, [pc, #300]	@ (800086c <main+0x2b8>)
 800073e:	f7ff fefb 	bl	8000538 <moveServoSmoothly>
 8000742:	e005      	b.n	8000750 <main+0x19c>
			} else {
				moveServoSmoothly(&current_pos_g1, SERVO_MIN_G, setServoPosition_PA8);
 8000744:	4a48      	ldr	r2, [pc, #288]	@ (8000868 <main+0x2b4>)
 8000746:	f240 4179 	movw	r1, #1145	@ 0x479
 800074a:	4848      	ldr	r0, [pc, #288]	@ (800086c <main+0x2b8>)
 800074c:	f7ff fef4 	bl	8000538 <moveServoSmoothly>
			}

			// Deuxième pince
			if (rx_data[(offset + 4) % 13] == '0') { // PA9 (TIM1_CH2) milieu
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	1d19      	adds	r1, r3, #4
 8000754:	4b3f      	ldr	r3, [pc, #252]	@ (8000854 <main+0x2a0>)
 8000756:	fb83 2301 	smull	r2, r3, r3, r1
 800075a:	109a      	asrs	r2, r3, #2
 800075c:	17cb      	asrs	r3, r1, #31
 800075e:	1ad2      	subs	r2, r2, r3
 8000760:	4613      	mov	r3, r2
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	4413      	add	r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4413      	add	r3, r2
 800076a:	1aca      	subs	r2, r1, r3
 800076c:	4b37      	ldr	r3, [pc, #220]	@ (800084c <main+0x298>)
 800076e:	5c9b      	ldrb	r3, [r3, r2]
 8000770:	2b30      	cmp	r3, #48	@ 0x30
 8000772:	d104      	bne.n	800077e <main+0x1ca>
				TIM1->CCR2 = SERVO_MAX_M;
 8000774:	4b3e      	ldr	r3, [pc, #248]	@ (8000870 <main+0x2bc>)
 8000776:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800077a:	639a      	str	r2, [r3, #56]	@ 0x38
 800077c:	e003      	b.n	8000786 <main+0x1d2>
			} else {
				TIM1->CCR2 = SERVO_MIN_M;
 800077e:	4b3c      	ldr	r3, [pc, #240]	@ (8000870 <main+0x2bc>)
 8000780:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000784:	639a      	str	r2, [r3, #56]	@ 0x38
			}

			// Déplacement progressif de la pince 2 droite
			if (rx_data[(offset + 5) % 13] == '0') { // PA10 (TIM1_CH3) droit
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	1d59      	adds	r1, r3, #5
 800078a:	4b32      	ldr	r3, [pc, #200]	@ (8000854 <main+0x2a0>)
 800078c:	fb83 2301 	smull	r2, r3, r3, r1
 8000790:	109a      	asrs	r2, r3, #2
 8000792:	17cb      	asrs	r3, r1, #31
 8000794:	1ad2      	subs	r2, r2, r3
 8000796:	4613      	mov	r3, r2
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	4413      	add	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	1aca      	subs	r2, r1, r3
 80007a2:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <main+0x298>)
 80007a4:	5c9b      	ldrb	r3, [r3, r2]
 80007a6:	2b30      	cmp	r3, #48	@ 0x30
 80007a8:	d106      	bne.n	80007b8 <main+0x204>
				moveServoSmoothly(&current_pos_d2, SERVO_MIN_D, setServoPosition_PA10);
 80007aa:	4a32      	ldr	r2, [pc, #200]	@ (8000874 <main+0x2c0>)
 80007ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80007b0:	4831      	ldr	r0, [pc, #196]	@ (8000878 <main+0x2c4>)
 80007b2:	f7ff fec1 	bl	8000538 <moveServoSmoothly>
 80007b6:	e005      	b.n	80007c4 <main+0x210>
			} else {
				moveServoSmoothly(&current_pos_d2, SERVO_MAX_D, setServoPosition_PA10);
 80007b8:	4a2e      	ldr	r2, [pc, #184]	@ (8000874 <main+0x2c0>)
 80007ba:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80007be:	482e      	ldr	r0, [pc, #184]	@ (8000878 <main+0x2c4>)
 80007c0:	f7ff feba 	bl	8000538 <moveServoSmoothly>
			}

			// Déplacement progressif de la pince 2 gauche
			if (rx_data[(offset + 6) % 13] == '0') { // PA6 (TIM3_CH1) gauche
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	1d99      	adds	r1, r3, #6
 80007c8:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <main+0x2a0>)
 80007ca:	fb83 2301 	smull	r2, r3, r3, r1
 80007ce:	109a      	asrs	r2, r3, #2
 80007d0:	17cb      	asrs	r3, r1, #31
 80007d2:	1ad2      	subs	r2, r2, r3
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	1aca      	subs	r2, r1, r3
 80007e0:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <main+0x298>)
 80007e2:	5c9b      	ldrb	r3, [r3, r2]
 80007e4:	2b30      	cmp	r3, #48	@ 0x30
 80007e6:	d106      	bne.n	80007f6 <main+0x242>
				moveServoSmoothly(&current_pos_g2, SERVO_MAX_G, setServoPosition_PA6);
 80007e8:	4a24      	ldr	r2, [pc, #144]	@ (800087c <main+0x2c8>)
 80007ea:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80007ee:	4824      	ldr	r0, [pc, #144]	@ (8000880 <main+0x2cc>)
 80007f0:	f7ff fea2 	bl	8000538 <moveServoSmoothly>
 80007f4:	e005      	b.n	8000802 <main+0x24e>
			} else {
				moveServoSmoothly(&current_pos_g2, SERVO_MIN_G, setServoPosition_PA6);
 80007f6:	4a21      	ldr	r2, [pc, #132]	@ (800087c <main+0x2c8>)
 80007f8:	f240 4179 	movw	r1, #1145	@ 0x479
 80007fc:	4820      	ldr	r0, [pc, #128]	@ (8000880 <main+0x2cc>)
 80007fe:	f7ff fe9b 	bl	8000538 <moveServoSmoothly>
			}

			// banderolle
			if (rx_data[(offset + 7) % 13] == '0') { // PB1 (TIM3_CH4)
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	1dd9      	adds	r1, r3, #7
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <main+0x2a0>)
 8000808:	fb83 2301 	smull	r2, r3, r3, r1
 800080c:	109a      	asrs	r2, r3, #2
 800080e:	17cb      	asrs	r3, r1, #31
 8000810:	1ad2      	subs	r2, r2, r3
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4413      	add	r3, r2
 800081c:	1aca      	subs	r2, r1, r3
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <main+0x298>)
 8000820:	5c9b      	ldrb	r3, [r3, r2]
 8000822:	2b30      	cmp	r3, #48	@ 0x30
 8000824:	d104      	bne.n	8000830 <main+0x27c>
				TIM3->CCR4 = SERVO_MAX_G;
 8000826:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <main+0x2a8>)
 8000828:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800082c:	641a      	str	r2, [r3, #64]	@ 0x40
 800082e:	e003      	b.n	8000838 <main+0x284>
			} else {
				TIM3->CCR4 = SERVO_MIN_G;
 8000830:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <main+0x2a8>)
 8000832:	f240 4279 	movw	r2, #1145	@ 0x479
 8000836:	641a      	str	r2, [r3, #64]	@ 0x40
			}

		}

		// Re-enable UART reception to resynchronize
		HAL_UART_Receive_IT(&huart1, (uint8_t *)rx_data, sizeof(rx_data));
 8000838:	220d      	movs	r2, #13
 800083a:	4904      	ldr	r1, [pc, #16]	@ (800084c <main+0x298>)
 800083c:	4804      	ldr	r0, [pc, #16]	@ (8000850 <main+0x29c>)
 800083e:	f003 fd6b 	bl	8004318 <HAL_UART_Receive_IT>
	{
 8000842:	e6e9      	b.n	8000618 <main+0x64>
 8000844:	2000007c 	.word	0x2000007c
 8000848:	20000030 	.word	0x20000030
 800084c:	200001d8 	.word	0x200001d8
 8000850:	200000c8 	.word	0x200000c8
 8000854:	4ec4ec4f 	.word	0x4ec4ec4f
 8000858:	20000150 	.word	0x20000150
 800085c:	40000400 	.word	0x40000400
 8000860:	080004d9 	.word	0x080004d9
 8000864:	20000002 	.word	0x20000002
 8000868:	080004b9 	.word	0x080004b9
 800086c:	20000000 	.word	0x20000000
 8000870:	40012c00 	.word	0x40012c00
 8000874:	08000519 	.word	0x08000519
 8000878:	20000006 	.word	0x20000006
 800087c:	080004f9 	.word	0x080004f9
 8000880:	20000004 	.word	0x20000004

08000884 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b096      	sub	sp, #88	@ 0x58
 8000888:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	2244      	movs	r2, #68	@ 0x44
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f005 f852 	bl	800593c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	463b      	mov	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80008aa:	f001 f86d 	bl	8001988 <HAL_PWREx_ControlVoltageScaling>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80008b4:	f000 fa70 	bl	8000d98 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b8:	2302      	movs	r3, #2
 80008ba:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008c0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c2:	2310      	movs	r3, #16
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c6:	2302      	movs	r3, #2
 80008c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ca:	2302      	movs	r3, #2
 80008cc:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80008d2:	230a      	movs	r3, #10
 80008d4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008d6:	2307      	movs	r3, #7
 80008d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008da:	2302      	movs	r3, #2
 80008dc:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008de:	2302      	movs	r3, #2
 80008e0:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 f8a4 	bl	8001a34 <HAL_RCC_OscConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x72>
	{
		Error_Handler();
 80008f2:	f000 fa51 	bl	8000d98 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f6:	230f      	movs	r3, #15
 80008f8:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fa:	2303      	movs	r3, #3
 80008fc:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800090a:	463b      	mov	r3, r7
 800090c:	2104      	movs	r1, #4
 800090e:	4618      	mov	r0, r3
 8000910:	f001 fc6c 	bl	80021ec <HAL_RCC_ClockConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x9a>
	{
		Error_Handler();
 800091a:	f000 fa3d 	bl	8000d98 <Error_Handler>
	}
}
 800091e:	bf00      	nop
 8000920:	3758      	adds	r7, #88	@ 0x58
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b09a      	sub	sp, #104	@ 0x68
 800092c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000948:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
 8000958:	615a      	str	r2, [r3, #20]
 800095a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	222c      	movs	r2, #44	@ 0x2c
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f004 ffea 	bl	800593c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000968:	4b4f      	ldr	r3, [pc, #316]	@ (8000aa8 <MX_TIM1_Init+0x180>)
 800096a:	4a50      	ldr	r2, [pc, #320]	@ (8000aac <MX_TIM1_Init+0x184>)
 800096c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 80-1;
 800096e:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa8 <MX_TIM1_Init+0x180>)
 8000970:	224f      	movs	r2, #79	@ 0x4f
 8000972:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b4c      	ldr	r3, [pc, #304]	@ (8000aa8 <MX_TIM1_Init+0x180>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 3002-1;
 800097a:	4b4b      	ldr	r3, [pc, #300]	@ (8000aa8 <MX_TIM1_Init+0x180>)
 800097c:	f640 32b9 	movw	r2, #3001	@ 0xbb9
 8000980:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b49      	ldr	r3, [pc, #292]	@ (8000aa8 <MX_TIM1_Init+0x180>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000988:	4b47      	ldr	r3, [pc, #284]	@ (8000aa8 <MX_TIM1_Init+0x180>)
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b46      	ldr	r3, [pc, #280]	@ (8000aa8 <MX_TIM1_Init+0x180>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000994:	4844      	ldr	r0, [pc, #272]	@ (8000aa8 <MX_TIM1_Init+0x180>)
 8000996:	f002 fb09 	bl	8002fac <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 80009a0:	f000 f9fa 	bl	8000d98 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a8:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009aa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80009ae:	4619      	mov	r1, r3
 80009b0:	483d      	ldr	r0, [pc, #244]	@ (8000aa8 <MX_TIM1_Init+0x180>)
 80009b2:	f002 fdcd 	bl	8003550 <HAL_TIM_ConfigClockSource>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 80009bc:	f000 f9ec 	bl	8000d98 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009c0:	4839      	ldr	r0, [pc, #228]	@ (8000aa8 <MX_TIM1_Init+0x180>)
 80009c2:	f002 fb4a 	bl	800305a <HAL_TIM_PWM_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 80009cc:	f000 f9e4 	bl	8000d98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009dc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009e0:	4619      	mov	r1, r3
 80009e2:	4831      	ldr	r0, [pc, #196]	@ (8000aa8 <MX_TIM1_Init+0x180>)
 80009e4:	f003 faba 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 80009ee:	f000 f9d3 	bl	8000d98 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f2:	2360      	movs	r3, #96	@ 0x60
 80009f4:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fa:	2300      	movs	r3, #0
 80009fc:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009fe:	2300      	movs	r3, #0
 8000a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a0e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a12:	2200      	movs	r2, #0
 8000a14:	4619      	mov	r1, r3
 8000a16:	4824      	ldr	r0, [pc, #144]	@ (8000aa8 <MX_TIM1_Init+0x180>)
 8000a18:	f002 fc86 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 8000a22:	f000 f9b9 	bl	8000d98 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481e      	ldr	r0, [pc, #120]	@ (8000aa8 <MX_TIM1_Init+0x180>)
 8000a30:	f002 fc7a 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM1_Init+0x116>
	{
		Error_Handler();
 8000a3a:	f000 f9ad 	bl	8000d98 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a3e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a42:	2208      	movs	r2, #8
 8000a44:	4619      	mov	r1, r3
 8000a46:	4818      	ldr	r0, [pc, #96]	@ (8000aa8 <MX_TIM1_Init+0x180>)
 8000a48:	f002 fc6e 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM1_Init+0x12e>
	{
		Error_Handler();
 8000a52:	f000 f9a1 	bl	8000d98 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a6e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4807      	ldr	r0, [pc, #28]	@ (8000aa8 <MX_TIM1_Init+0x180>)
 8000a8c:	f003 faee 	bl	800406c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0x172>
	{
		Error_Handler();
 8000a96:	f000 f97f 	bl	8000d98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000a9a:	4803      	ldr	r0, [pc, #12]	@ (8000aa8 <MX_TIM1_Init+0x180>)
 8000a9c:	f000 f9da 	bl	8000e54 <HAL_TIM_MspPostInit>

}
 8000aa0:	bf00      	nop
 8000aa2:	3768      	adds	r7, #104	@ 0x68
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000030 	.word	0x20000030
 8000aac:	40012c00 	.word	0x40012c00

08000ab0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	@ 0x38
 8000ab4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]
 8000ade:	615a      	str	r2, [r3, #20]
 8000ae0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd8 <MX_TIM3_Init+0x128>)
 8000ae4:	4a3d      	ldr	r2, [pc, #244]	@ (8000bdc <MX_TIM3_Init+0x12c>)
 8000ae6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 80-1;
 8000ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8000bd8 <MX_TIM3_Init+0x128>)
 8000aea:	224f      	movs	r2, #79	@ 0x4f
 8000aec:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd8 <MX_TIM3_Init+0x128>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 3002-1;
 8000af4:	4b38      	ldr	r3, [pc, #224]	@ (8000bd8 <MX_TIM3_Init+0x128>)
 8000af6:	f640 32b9 	movw	r2, #3001	@ 0xbb9
 8000afa:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afc:	4b36      	ldr	r3, [pc, #216]	@ (8000bd8 <MX_TIM3_Init+0x128>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b02:	4b35      	ldr	r3, [pc, #212]	@ (8000bd8 <MX_TIM3_Init+0x128>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b08:	4833      	ldr	r0, [pc, #204]	@ (8000bd8 <MX_TIM3_Init+0x128>)
 8000b0a:	f002 fa4f 	bl	8002fac <HAL_TIM_Base_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8000b14:	f000 f940 	bl	8000d98 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b22:	4619      	mov	r1, r3
 8000b24:	482c      	ldr	r0, [pc, #176]	@ (8000bd8 <MX_TIM3_Init+0x128>)
 8000b26:	f002 fd13 	bl	8003550 <HAL_TIM_ConfigClockSource>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 8000b30:	f000 f932 	bl	8000d98 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b34:	4828      	ldr	r0, [pc, #160]	@ (8000bd8 <MX_TIM3_Init+0x128>)
 8000b36:	f002 fa90 	bl	800305a <HAL_TIM_PWM_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 8000b40:	f000 f92a 	bl	8000d98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	4821      	ldr	r0, [pc, #132]	@ (8000bd8 <MX_TIM3_Init+0x128>)
 8000b54:	f003 fa02 	bl	8003f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8000b5e:	f000 f91b 	bl	8000d98 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b62:	2360      	movs	r3, #96	@ 0x60
 8000b64:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b72:	463b      	mov	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	4619      	mov	r1, r3
 8000b78:	4817      	ldr	r0, [pc, #92]	@ (8000bd8 <MX_TIM3_Init+0x128>)
 8000b7a:	f002 fbd5 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 8000b84:	f000 f908 	bl	8000d98 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2204      	movs	r2, #4
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4812      	ldr	r0, [pc, #72]	@ (8000bd8 <MX_TIM3_Init+0x128>)
 8000b90:	f002 fbca 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM3_Init+0xee>
	{
		Error_Handler();
 8000b9a:	f000 f8fd 	bl	8000d98 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2208      	movs	r2, #8
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <MX_TIM3_Init+0x128>)
 8000ba6:	f002 fbbf 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM3_Init+0x104>
	{
		Error_Handler();
 8000bb0:	f000 f8f2 	bl	8000d98 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4807      	ldr	r0, [pc, #28]	@ (8000bd8 <MX_TIM3_Init+0x128>)
 8000bbc:	f002 fbb4 	bl	8003328 <HAL_TIM_PWM_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM3_Init+0x11a>
	{
		Error_Handler();
 8000bc6:	f000 f8e7 	bl	8000d98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000bca:	4803      	ldr	r0, [pc, #12]	@ (8000bd8 <MX_TIM3_Init+0x128>)
 8000bcc:	f000 f942 	bl	8000e54 <HAL_TIM_MspPostInit>

}
 8000bd0:	bf00      	nop
 8000bd2:	3738      	adds	r7, #56	@ 0x38
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	2000007c 	.word	0x2000007c
 8000bdc:	40000400 	.word	0x40000400

08000be0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000be4:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000be6:	4a15      	ldr	r2, [pc, #84]	@ (8000c3c <MX_USART1_UART_Init+0x5c>)
 8000be8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000bea:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000bec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c06:	220c      	movs	r2, #12
 8000c08:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c10:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c16:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c22:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <MX_USART1_UART_Init+0x58>)
 8000c24:	f003 faa0 	bl	8004168 <HAL_UART_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8000c2e:	f000 f8b3 	bl	8000d98 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200000c8 	.word	0x200000c8
 8000c3c:	40013800 	.word	0x40013800

08000c40 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000c44:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c46:	4a15      	ldr	r2, [pc, #84]	@ (8000c9c <MX_USART2_UART_Init+0x5c>)
 8000c48:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	@ (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c50:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_USART2_UART_Init+0x58>)
 8000c84:	f003 fa70 	bl	8004168 <HAL_UART_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000c8e:	f000 f883 	bl	8000d98 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000150 	.word	0x20000150
 8000c9c:	40004400 	.word	0x40004400

08000ca0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
 8000cb4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8000d64 <MX_GPIO_Init+0xc4>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cba:	4a2a      	ldr	r2, [pc, #168]	@ (8000d64 <MX_GPIO_Init+0xc4>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc2:	4b28      	ldr	r3, [pc, #160]	@ (8000d64 <MX_GPIO_Init+0xc4>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	4b25      	ldr	r3, [pc, #148]	@ (8000d64 <MX_GPIO_Init+0xc4>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd2:	4a24      	ldr	r2, [pc, #144]	@ (8000d64 <MX_GPIO_Init+0xc4>)
 8000cd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cda:	4b22      	ldr	r3, [pc, #136]	@ (8000d64 <MX_GPIO_Init+0xc4>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <MX_GPIO_Init+0xc4>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	4a1e      	ldr	r2, [pc, #120]	@ (8000d64 <MX_GPIO_Init+0xc4>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <MX_GPIO_Init+0xc4>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <MX_GPIO_Init+0xc4>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	4a18      	ldr	r2, [pc, #96]	@ (8000d64 <MX_GPIO_Init+0xc4>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0a:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <MX_GPIO_Init+0xc4>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2120      	movs	r1, #32
 8000d1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1e:	f000 fe0d 	bl	800193c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000d22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d26:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d28:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d2c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <MX_GPIO_Init+0xc8>)
 8000d3a:	f000 fc55 	bl	80015e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000d3e:	2320      	movs	r3, #32
 8000d40:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d58:	f000 fc46 	bl	80015e8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	@ 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000800 	.word	0x48000800

08000d6c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	if (huart == &huart1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a06      	ldr	r2, [pc, #24]	@ (8000d90 <HAL_UART_RxCpltCallback+0x24>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d104      	bne.n	8000d86 <HAL_UART_RxCpltCallback+0x1a>
	{
		HAL_UART_Receive_IT(&huart1, (uint8_t *)rx_data, sizeof(rx_data)); // Relancer la réception
 8000d7c:	220d      	movs	r2, #13
 8000d7e:	4905      	ldr	r1, [pc, #20]	@ (8000d94 <HAL_UART_RxCpltCallback+0x28>)
 8000d80:	4803      	ldr	r0, [pc, #12]	@ (8000d90 <HAL_UART_RxCpltCallback+0x24>)
 8000d82:	f003 fac9 	bl	8004318 <HAL_UART_Receive_IT>
	}
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200000c8 	.word	0x200000c8
 8000d94:	200001d8 	.word	0x200001d8

08000d98 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <Error_Handler+0x8>

08000da4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <HAL_MspInit+0x44>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dae:	4a0e      	ldr	r2, [pc, #56]	@ (8000de8 <HAL_MspInit+0x44>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000db6:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <HAL_MspInit+0x44>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <HAL_MspInit+0x44>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc6:	4a08      	ldr	r2, [pc, #32]	@ (8000de8 <HAL_MspInit+0x44>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_MspInit+0x44>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a13      	ldr	r2, [pc, #76]	@ (8000e48 <HAL_TIM_Base_MspInit+0x5c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10c      	bne.n	8000e18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <HAL_TIM_Base_MspInit+0x60>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e02:	4a12      	ldr	r2, [pc, #72]	@ (8000e4c <HAL_TIM_Base_MspInit+0x60>)
 8000e04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e0a:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <HAL_TIM_Base_MspInit+0x60>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e16:	e010      	b.n	8000e3a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e50 <HAL_TIM_Base_MspInit+0x64>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d10b      	bne.n	8000e3a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e22:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <HAL_TIM_Base_MspInit+0x60>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e26:	4a09      	ldr	r2, [pc, #36]	@ (8000e4c <HAL_TIM_Base_MspInit+0x60>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e2e:	4b07      	ldr	r3, [pc, #28]	@ (8000e4c <HAL_TIM_Base_MspInit+0x60>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
}
 8000e3a:	bf00      	nop
 8000e3c:	3714      	adds	r7, #20
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40012c00 	.word	0x40012c00
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40000400 	.word	0x40000400

08000e54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	@ 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a31      	ldr	r2, [pc, #196]	@ (8000f38 <HAL_TIM_MspPostInit+0xe4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d11e      	bne.n	8000eb4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b31      	ldr	r3, [pc, #196]	@ (8000f3c <HAL_TIM_MspPostInit+0xe8>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7a:	4a30      	ldr	r2, [pc, #192]	@ (8000f3c <HAL_TIM_MspPostInit+0xe8>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e82:	4b2e      	ldr	r3, [pc, #184]	@ (8000f3c <HAL_TIM_MspPostInit+0xe8>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000e8e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eae:	f000 fb9b 	bl	80015e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000eb2:	e03d      	b.n	8000f30 <HAL_TIM_MspPostInit+0xdc>
  else if(htim->Instance==TIM3)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a21      	ldr	r2, [pc, #132]	@ (8000f40 <HAL_TIM_MspPostInit+0xec>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d138      	bne.n	8000f30 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8000f3c <HAL_TIM_MspPostInit+0xe8>)
 8000ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f3c <HAL_TIM_MspPostInit+0xe8>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eca:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <HAL_TIM_MspPostInit+0xe8>)
 8000ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	4b19      	ldr	r3, [pc, #100]	@ (8000f3c <HAL_TIM_MspPostInit+0xe8>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eda:	4a18      	ldr	r2, [pc, #96]	@ (8000f3c <HAL_TIM_MspPostInit+0xe8>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee2:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <HAL_TIM_MspPostInit+0xe8>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eee:	23c0      	movs	r3, #192	@ 0xc0
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000efe:	2302      	movs	r3, #2
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0c:	f000 fb6c 	bl	80015e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f10:	2303      	movs	r3, #3
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f20:	2302      	movs	r3, #2
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	@ (8000f44 <HAL_TIM_MspPostInit+0xf0>)
 8000f2c:	f000 fb5c 	bl	80015e8 <HAL_GPIO_Init>
}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	@ 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40012c00 	.word	0x40012c00
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40000400 	.word	0x40000400
 8000f44:	48000400 	.word	0x48000400

08000f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0ae      	sub	sp, #184	@ 0xb8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	2288      	movs	r2, #136	@ 0x88
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f004 fce7 	bl	800593c <memset>
  if(huart->Instance==USART1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a46      	ldr	r2, [pc, #280]	@ (800108c <HAL_UART_MspInit+0x144>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d143      	bne.n	8001000 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fb55 	bl	8002634 <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f90:	f7ff ff02 	bl	8000d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f94:	4b3e      	ldr	r3, [pc, #248]	@ (8001090 <HAL_UART_MspInit+0x148>)
 8000f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f98:	4a3d      	ldr	r2, [pc, #244]	@ (8001090 <HAL_UART_MspInit+0x148>)
 8000f9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f9e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fa0:	4b3b      	ldr	r3, [pc, #236]	@ (8001090 <HAL_UART_MspInit+0x148>)
 8000fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fa8:	61bb      	str	r3, [r7, #24]
 8000faa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fac:	4b38      	ldr	r3, [pc, #224]	@ (8001090 <HAL_UART_MspInit+0x148>)
 8000fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb0:	4a37      	ldr	r2, [pc, #220]	@ (8001090 <HAL_UART_MspInit+0x148>)
 8000fb2:	f043 0302 	orr.w	r3, r3, #2
 8000fb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb8:	4b35      	ldr	r3, [pc, #212]	@ (8001090 <HAL_UART_MspInit+0x148>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fc4:	23c0      	movs	r3, #192	@ 0xc0
 8000fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fdc:	2307      	movs	r3, #7
 8000fde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	482a      	ldr	r0, [pc, #168]	@ (8001094 <HAL_UART_MspInit+0x14c>)
 8000fea:	f000 fafd 	bl	80015e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2025      	movs	r0, #37	@ 0x25
 8000ff4:	f000 fa43 	bl	800147e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ff8:	2025      	movs	r0, #37	@ 0x25
 8000ffa:	f000 fa5c 	bl	80014b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ffe:	e040      	b.n	8001082 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a24      	ldr	r2, [pc, #144]	@ (8001098 <HAL_UART_MspInit+0x150>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d13b      	bne.n	8001082 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800100a:	2302      	movs	r3, #2
 800100c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800100e:	2300      	movs	r3, #0
 8001010:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4618      	mov	r0, r3
 8001018:	f001 fb0c 	bl	8002634 <HAL_RCCEx_PeriphCLKConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8001022:	f7ff feb9 	bl	8000d98 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001026:	4b1a      	ldr	r3, [pc, #104]	@ (8001090 <HAL_UART_MspInit+0x148>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102a:	4a19      	ldr	r2, [pc, #100]	@ (8001090 <HAL_UART_MspInit+0x148>)
 800102c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001030:	6593      	str	r3, [r2, #88]	@ 0x58
 8001032:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <HAL_UART_MspInit+0x148>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <HAL_UART_MspInit+0x148>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001042:	4a13      	ldr	r2, [pc, #76]	@ (8001090 <HAL_UART_MspInit+0x148>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800104a:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <HAL_UART_MspInit+0x148>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001056:	230c      	movs	r3, #12
 8001058:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106e:	2307      	movs	r3, #7
 8001070:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001078:	4619      	mov	r1, r3
 800107a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800107e:	f000 fab3 	bl	80015e8 <HAL_GPIO_Init>
}
 8001082:	bf00      	nop
 8001084:	37b8      	adds	r7, #184	@ 0xb8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40013800 	.word	0x40013800
 8001090:	40021000 	.word	0x40021000
 8001094:	48000400 	.word	0x48000400
 8001098:	40004400 	.word	0x40004400

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <NMI_Handler+0x4>

080010a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <MemManage_Handler+0x4>

080010b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f2:	f000 f8a5 	bl	8001240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <USART1_IRQHandler+0x10>)
 8001102:	f003 f955 	bl	80043b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200000c8 	.word	0x200000c8

08001110 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <SystemInit+0x20>)
 8001116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800111a:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <SystemInit+0x20>)
 800111c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001120:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800116c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001138:	f7ff ffea 	bl	8001110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800113c:	480c      	ldr	r0, [pc, #48]	@ (8001170 <LoopForever+0x6>)
  ldr r1, =_edata
 800113e:	490d      	ldr	r1, [pc, #52]	@ (8001174 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001140:	4a0d      	ldr	r2, [pc, #52]	@ (8001178 <LoopForever+0xe>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001154:	4c0a      	ldr	r4, [pc, #40]	@ (8001180 <LoopForever+0x16>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001162:	f004 fbf3 	bl	800594c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001166:	f7ff fa25 	bl	80005b4 <main>

0800116a <LoopForever>:

LoopForever:
    b LoopForever
 800116a:	e7fe      	b.n	800116a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800116c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001178:	08005a04 	.word	0x08005a04
  ldr r2, =_sbss
 800117c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001180:	200001ec 	.word	0x200001ec

08001184 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC1_2_IRQHandler>
	...

08001188 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001192:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <HAL_Init+0x3c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a0b      	ldr	r2, [pc, #44]	@ (80011c4 <HAL_Init+0x3c>)
 8001198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800119c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119e:	2003      	movs	r0, #3
 80011a0:	f000 f962 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011a4:	2000      	movs	r0, #0
 80011a6:	f000 f80f 	bl	80011c8 <HAL_InitTick>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d002      	beq.n	80011b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	71fb      	strb	r3, [r7, #7]
 80011b4:	e001      	b.n	80011ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011b6:	f7ff fdf5 	bl	8000da4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011ba:	79fb      	ldrb	r3, [r7, #7]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40022000 	.word	0x40022000

080011c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <HAL_InitTick+0x6c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d023      	beq.n	8001224 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011dc:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <HAL_InitTick+0x70>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <HAL_InitTick+0x6c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f96d 	bl	80014d2 <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10f      	bne.n	800121e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b0f      	cmp	r3, #15
 8001202:	d809      	bhi.n	8001218 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001204:	2200      	movs	r2, #0
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f000 f937 	bl	800147e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001210:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <HAL_InitTick+0x74>)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e007      	b.n	8001228 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	e004      	b.n	8001228 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e001      	b.n	8001228 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000010 	.word	0x20000010
 8001238:	20000008 	.word	0x20000008
 800123c:	2000000c 	.word	0x2000000c

08001240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_IncTick+0x20>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_IncTick+0x24>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <HAL_IncTick+0x24>)
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000010 	.word	0x20000010
 8001264:	200001e8 	.word	0x200001e8

08001268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b03      	ldr	r3, [pc, #12]	@ (800127c <HAL_GetTick+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	200001e8 	.word	0x200001e8

08001280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001288:	f7ff ffee 	bl	8001268 <HAL_GetTick>
 800128c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001298:	d005      	beq.n	80012a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800129a:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <HAL_Delay+0x44>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012a6:	bf00      	nop
 80012a8:	f7ff ffde 	bl	8001268 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d8f7      	bhi.n	80012a8 <HAL_Delay+0x28>
  {
  }
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000010 	.word	0x20000010

080012c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	@ (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4907      	ldr	r1, [pc, #28]	@ (8001364 <__NVIC_EnableIRQ+0x38>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e100 	.word	0xe000e100

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	@ (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	@ (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	@ 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	@ 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001434:	d301      	bcc.n	800143a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001436:	2301      	movs	r3, #1
 8001438:	e00f      	b.n	800145a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <SysTick_Config+0x40>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001442:	210f      	movs	r1, #15
 8001444:	f04f 30ff 	mov.w	r0, #4294967295
 8001448:	f7ff ff8e 	bl	8001368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <SysTick_Config+0x40>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <SysTick_Config+0x40>)
 8001454:	2207      	movs	r2, #7
 8001456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	e000e010 	.word	0xe000e010

08001468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff29 	bl	80012c8 <__NVIC_SetPriorityGrouping>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001490:	f7ff ff3e 	bl	8001310 <__NVIC_GetPriorityGrouping>
 8001494:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68b9      	ldr	r1, [r7, #8]
 800149a:	6978      	ldr	r0, [r7, #20]
 800149c:	f7ff ff8e 	bl	80013bc <NVIC_EncodePriority>
 80014a0:	4602      	mov	r2, r0
 80014a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a6:	4611      	mov	r1, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff ff5d 	bl	8001368 <__NVIC_SetPriority>
}
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff31 	bl	800132c <__NVIC_EnableIRQ>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff ffa2 	bl	8001424 <SysTick_Config>
 80014e0:	4603      	mov	r3, r0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b085      	sub	sp, #20
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d008      	beq.n	8001514 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2204      	movs	r2, #4
 8001506:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e022      	b.n	800155a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 020e 	bic.w	r2, r2, #14
 8001522:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0201 	bic.w	r2, r2, #1
 8001532:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001538:	f003 021c 	and.w	r2, r3, #28
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001540:	2101      	movs	r1, #1
 8001542:	fa01 f202 	lsl.w	r2, r1, r2
 8001546:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b084      	sub	sp, #16
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d005      	beq.n	800158a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2204      	movs	r2, #4
 8001582:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
 8001588:	e029      	b.n	80015de <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 020e 	bic.w	r2, r2, #14
 8001598:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0201 	bic.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	f003 021c 	and.w	r2, r3, #28
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b6:	2101      	movs	r1, #1
 80015b8:	fa01 f202 	lsl.w	r2, r1, r2
 80015bc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	4798      	blx	r3
    }
  }
  return status;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3710      	adds	r7, #16
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f6:	e17f      	b.n	80018f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	2101      	movs	r1, #1
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	4013      	ands	r3, r2
 8001606:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 8171 	beq.w	80018f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	2b01      	cmp	r3, #1
 800161a:	d005      	beq.n	8001628 <HAL_GPIO_Init+0x40>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d130      	bne.n	800168a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800165e:	2201      	movs	r2, #1
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43db      	mvns	r3, r3
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	091b      	lsrs	r3, r3, #4
 8001674:	f003 0201 	and.w	r2, r3, #1
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	2b03      	cmp	r3, #3
 8001694:	d118      	bne.n	80016c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800169c:	2201      	movs	r2, #1
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	08db      	lsrs	r3, r3, #3
 80016b2:	f003 0201 	and.w	r2, r3, #1
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 0303 	and.w	r3, r3, #3
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d017      	beq.n	8001704 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	2203      	movs	r2, #3
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d123      	bne.n	8001758 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	08da      	lsrs	r2, r3, #3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3208      	adds	r2, #8
 8001718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	220f      	movs	r2, #15
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	08da      	lsrs	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3208      	adds	r2, #8
 8001752:	6939      	ldr	r1, [r7, #16]
 8001754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	2203      	movs	r2, #3
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0203 	and.w	r2, r3, #3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 80ac 	beq.w	80018f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179a:	4b5f      	ldr	r3, [pc, #380]	@ (8001918 <HAL_GPIO_Init+0x330>)
 800179c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800179e:	4a5e      	ldr	r2, [pc, #376]	@ (8001918 <HAL_GPIO_Init+0x330>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001918 <HAL_GPIO_Init+0x330>)
 80017a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017b2:	4a5a      	ldr	r2, [pc, #360]	@ (800191c <HAL_GPIO_Init+0x334>)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	3302      	adds	r3, #2
 80017ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017dc:	d025      	beq.n	800182a <HAL_GPIO_Init+0x242>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001920 <HAL_GPIO_Init+0x338>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d01f      	beq.n	8001826 <HAL_GPIO_Init+0x23e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001924 <HAL_GPIO_Init+0x33c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d019      	beq.n	8001822 <HAL_GPIO_Init+0x23a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4d      	ldr	r2, [pc, #308]	@ (8001928 <HAL_GPIO_Init+0x340>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d013      	beq.n	800181e <HAL_GPIO_Init+0x236>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4c      	ldr	r2, [pc, #304]	@ (800192c <HAL_GPIO_Init+0x344>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d00d      	beq.n	800181a <HAL_GPIO_Init+0x232>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4b      	ldr	r2, [pc, #300]	@ (8001930 <HAL_GPIO_Init+0x348>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d007      	beq.n	8001816 <HAL_GPIO_Init+0x22e>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a4a      	ldr	r2, [pc, #296]	@ (8001934 <HAL_GPIO_Init+0x34c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d101      	bne.n	8001812 <HAL_GPIO_Init+0x22a>
 800180e:	2306      	movs	r3, #6
 8001810:	e00c      	b.n	800182c <HAL_GPIO_Init+0x244>
 8001812:	2307      	movs	r3, #7
 8001814:	e00a      	b.n	800182c <HAL_GPIO_Init+0x244>
 8001816:	2305      	movs	r3, #5
 8001818:	e008      	b.n	800182c <HAL_GPIO_Init+0x244>
 800181a:	2304      	movs	r3, #4
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x244>
 800181e:	2303      	movs	r3, #3
 8001820:	e004      	b.n	800182c <HAL_GPIO_Init+0x244>
 8001822:	2302      	movs	r3, #2
 8001824:	e002      	b.n	800182c <HAL_GPIO_Init+0x244>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_GPIO_Init+0x244>
 800182a:	2300      	movs	r3, #0
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	f002 0203 	and.w	r2, r2, #3
 8001832:	0092      	lsls	r2, r2, #2
 8001834:	4093      	lsls	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800183c:	4937      	ldr	r1, [pc, #220]	@ (800191c <HAL_GPIO_Init+0x334>)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3302      	adds	r3, #2
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800184a:	4b3b      	ldr	r3, [pc, #236]	@ (8001938 <HAL_GPIO_Init+0x350>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800186e:	4a32      	ldr	r2, [pc, #200]	@ (8001938 <HAL_GPIO_Init+0x350>)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001874:	4b30      	ldr	r3, [pc, #192]	@ (8001938 <HAL_GPIO_Init+0x350>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001898:	4a27      	ldr	r2, [pc, #156]	@ (8001938 <HAL_GPIO_Init+0x350>)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800189e:	4b26      	ldr	r3, [pc, #152]	@ (8001938 <HAL_GPIO_Init+0x350>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001938 <HAL_GPIO_Init+0x350>)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <HAL_GPIO_Init+0x350>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4013      	ands	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018ec:	4a12      	ldr	r2, [pc, #72]	@ (8001938 <HAL_GPIO_Init+0x350>)
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3301      	adds	r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	f47f ae78 	bne.w	80015f8 <HAL_GPIO_Init+0x10>
  }
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	371c      	adds	r7, #28
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	40010000 	.word	0x40010000
 8001920:	48000400 	.word	0x48000400
 8001924:	48000800 	.word	0x48000800
 8001928:	48000c00 	.word	0x48000c00
 800192c:	48001000 	.word	0x48001000
 8001930:	48001400 	.word	0x48001400
 8001934:	48001800 	.word	0x48001800
 8001938:	40010400 	.word	0x40010400

0800193c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]
 8001948:	4613      	mov	r3, r2
 800194a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800194c:	787b      	ldrb	r3, [r7, #1]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001952:	887a      	ldrh	r2, [r7, #2]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001958:	e002      	b.n	8001960 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800195a:	887a      	ldrh	r2, [r7, #2]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001970:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <HAL_PWREx_GetVoltageRange+0x18>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40007000 	.word	0x40007000

08001988 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001996:	d130      	bne.n	80019fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001998:	4b23      	ldr	r3, [pc, #140]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019a4:	d038      	beq.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a6:	4b20      	ldr	r3, [pc, #128]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019b6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2232      	movs	r2, #50	@ 0x32
 80019bc:	fb02 f303 	mul.w	r3, r2, r3
 80019c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019c2:	fba2 2303 	umull	r2, r3, r2, r3
 80019c6:	0c9b      	lsrs	r3, r3, #18
 80019c8:	3301      	adds	r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019cc:	e002      	b.n	80019d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d4:	4b14      	ldr	r3, [pc, #80]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019e0:	d102      	bne.n	80019e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f2      	bne.n	80019ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019f4:	d110      	bne.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e00f      	b.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a06:	d007      	beq.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a08:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a10:	4a05      	ldr	r2, [pc, #20]	@ (8001a28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	20000008 	.word	0x20000008
 8001a30:	431bde83 	.word	0x431bde83

08001a34 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e3ca      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a46:	4b97      	ldr	r3, [pc, #604]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a50:	4b94      	ldr	r3, [pc, #592]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 80e4 	beq.w	8001c30 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <HAL_RCC_OscConfig+0x4a>
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b0c      	cmp	r3, #12
 8001a72:	f040 808b 	bne.w	8001b8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	f040 8087 	bne.w	8001b8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a7e:	4b89      	ldr	r3, [pc, #548]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <HAL_RCC_OscConfig+0x62>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e3a2      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a1a      	ldr	r2, [r3, #32]
 8001a9a:	4b82      	ldr	r3, [pc, #520]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d004      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x7c>
 8001aa6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aae:	e005      	b.n	8001abc <HAL_RCC_OscConfig+0x88>
 8001ab0:	4b7c      	ldr	r3, [pc, #496]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d223      	bcs.n	8001b08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 fd55 	bl	8002574 <RCC_SetFlashLatencyFromMSIRange>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e383      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ad4:	4b73      	ldr	r3, [pc, #460]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a72      	ldr	r2, [pc, #456]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001ada:	f043 0308 	orr.w	r3, r3, #8
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b70      	ldr	r3, [pc, #448]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	496d      	ldr	r1, [pc, #436]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af2:	4b6c      	ldr	r3, [pc, #432]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	4968      	ldr	r1, [pc, #416]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	604b      	str	r3, [r1, #4]
 8001b06:	e025      	b.n	8001b54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b08:	4b66      	ldr	r3, [pc, #408]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a65      	ldr	r2, [pc, #404]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	f043 0308 	orr.w	r3, r3, #8
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b63      	ldr	r3, [pc, #396]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4960      	ldr	r1, [pc, #384]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b26:	4b5f      	ldr	r3, [pc, #380]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	495b      	ldr	r1, [pc, #364]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fd15 	bl	8002574 <RCC_SetFlashLatencyFromMSIRange>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e343      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b54:	f000 fc4a 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b52      	ldr	r3, [pc, #328]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	091b      	lsrs	r3, r3, #4
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	4950      	ldr	r1, [pc, #320]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b70:	4a4e      	ldr	r2, [pc, #312]	@ (8001cac <HAL_RCC_OscConfig+0x278>)
 8001b72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b74:	4b4e      	ldr	r3, [pc, #312]	@ (8001cb0 <HAL_RCC_OscConfig+0x27c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fb25 	bl	80011c8 <HAL_InitTick>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d052      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	e327      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d032      	beq.n	8001bfa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b94:	4b43      	ldr	r3, [pc, #268]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a42      	ldr	r2, [pc, #264]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fb62 	bl	8001268 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ba8:	f7ff fb5e 	bl	8001268 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e310      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bba:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bc6:	4b37      	ldr	r3, [pc, #220]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a36      	ldr	r2, [pc, #216]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bcc:	f043 0308 	orr.w	r3, r3, #8
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	4b34      	ldr	r3, [pc, #208]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4931      	ldr	r1, [pc, #196]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be4:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	021b      	lsls	r3, r3, #8
 8001bf2:	492c      	ldr	r1, [pc, #176]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
 8001bf8:	e01a      	b.n	8001c30 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a29      	ldr	r2, [pc, #164]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fb2f 	bl	8001268 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c0e:	f7ff fb2b 	bl	8001268 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e2dd      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c20:	4b20      	ldr	r3, [pc, #128]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f0      	bne.n	8001c0e <HAL_RCC_OscConfig+0x1da>
 8001c2c:	e000      	b.n	8001c30 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c2e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d074      	beq.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d005      	beq.n	8001c4e <HAL_RCC_OscConfig+0x21a>
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	d10e      	bne.n	8001c66 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d10b      	bne.n	8001c66 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d064      	beq.n	8001d24 <HAL_RCC_OscConfig+0x2f0>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d160      	bne.n	8001d24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e2ba      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x24a>
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0b      	ldr	r2, [pc, #44]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e026      	b.n	8001ccc <HAL_RCC_OscConfig+0x298>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c86:	d115      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x280>
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a05      	ldr	r2, [pc, #20]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b03      	ldr	r3, [pc, #12]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a02      	ldr	r2, [pc, #8]	@ (8001ca4 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	e014      	b.n	8001ccc <HAL_RCC_OscConfig+0x298>
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	080059ac 	.word	0x080059ac
 8001cac:	20000008 	.word	0x20000008
 8001cb0:	2000000c 	.word	0x2000000c
 8001cb4:	4ba0      	ldr	r3, [pc, #640]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a9f      	ldr	r2, [pc, #636]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001cba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	4b9d      	ldr	r3, [pc, #628]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a9c      	ldr	r2, [pc, #624]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001cc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fac8 	bl	8001268 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fac4 	bl	8001268 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	@ 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e276      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cee:	4b92      	ldr	r3, [pc, #584]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x2a8>
 8001cfa:	e014      	b.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fab4 	bl	8001268 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff fab0 	bl	8001268 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	@ 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e262      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d16:	4b88      	ldr	r3, [pc, #544]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x2d0>
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d060      	beq.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_OscConfig+0x310>
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2b0c      	cmp	r3, #12
 8001d3c:	d119      	bne.n	8001d72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d116      	bne.n	8001d72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d44:	4b7c      	ldr	r3, [pc, #496]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_OscConfig+0x328>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e23f      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b76      	ldr	r3, [pc, #472]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	4973      	ldr	r1, [pc, #460]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d70:	e040      	b.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d023      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d7a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d86:	f7ff fa6f 	bl	8001268 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8e:	f7ff fa6b 	bl	8001268 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e21d      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da0:	4b65      	ldr	r3, [pc, #404]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dac:	4b62      	ldr	r3, [pc, #392]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	495f      	ldr	r1, [pc, #380]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
 8001dc0:	e018      	b.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dc2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a5c      	ldr	r2, [pc, #368]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7ff fa4b 	bl	8001268 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fa47 	bl	8001268 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e1f9      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de8:	4b53      	ldr	r3, [pc, #332]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d03c      	beq.n	8001e7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01c      	beq.n	8001e42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e08:	4b4b      	ldr	r3, [pc, #300]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e0e:	4a4a      	ldr	r2, [pc, #296]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e18:	f7ff fa26 	bl	8001268 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e20:	f7ff fa22 	bl	8001268 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e1d4      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e32:	4b41      	ldr	r3, [pc, #260]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0ef      	beq.n	8001e20 <HAL_RCC_OscConfig+0x3ec>
 8001e40:	e01b      	b.n	8001e7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e42:	4b3d      	ldr	r3, [pc, #244]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e48:	4a3b      	ldr	r2, [pc, #236]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e4a:	f023 0301 	bic.w	r3, r3, #1
 8001e4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e52:	f7ff fa09 	bl	8001268 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5a:	f7ff fa05 	bl	8001268 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e1b7      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e6c:	4b32      	ldr	r3, [pc, #200]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1ef      	bne.n	8001e5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 80a6 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10d      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e98:	4b27      	ldr	r3, [pc, #156]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9c:	4a26      	ldr	r2, [pc, #152]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001e9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ea4:	4b24      	ldr	r3, [pc, #144]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb4:	4b21      	ldr	r3, [pc, #132]	@ (8001f3c <HAL_RCC_OscConfig+0x508>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d118      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f3c <HAL_RCC_OscConfig+0x508>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f3c <HAL_RCC_OscConfig+0x508>)
 8001ec6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ecc:	f7ff f9cc 	bl	8001268 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed4:	f7ff f9c8 	bl	8001268 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e17a      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee6:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <HAL_RCC_OscConfig+0x508>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d108      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4d8>
 8001efa:	4b0f      	ldr	r3, [pc, #60]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f00:	4a0d      	ldr	r2, [pc, #52]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f0a:	e029      	b.n	8001f60 <HAL_RCC_OscConfig+0x52c>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	2b05      	cmp	r3, #5
 8001f12:	d115      	bne.n	8001f40 <HAL_RCC_OscConfig+0x50c>
 8001f14:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1a:	4a07      	ldr	r2, [pc, #28]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f24:	4b04      	ldr	r3, [pc, #16]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2a:	4a03      	ldr	r2, [pc, #12]	@ (8001f38 <HAL_RCC_OscConfig+0x504>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f34:	e014      	b.n	8001f60 <HAL_RCC_OscConfig+0x52c>
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40007000 	.word	0x40007000
 8001f40:	4b9c      	ldr	r3, [pc, #624]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f46:	4a9b      	ldr	r2, [pc, #620]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001f48:	f023 0301 	bic.w	r3, r3, #1
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f50:	4b98      	ldr	r3, [pc, #608]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f56:	4a97      	ldr	r2, [pc, #604]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d016      	beq.n	8001f96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7ff f97e 	bl	8001268 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f70:	f7ff f97a 	bl	8001268 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e12a      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f86:	4b8b      	ldr	r3, [pc, #556]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0ed      	beq.n	8001f70 <HAL_RCC_OscConfig+0x53c>
 8001f94:	e015      	b.n	8001fc2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f96:	f7ff f967 	bl	8001268 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7ff f963 	bl	8001268 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e113      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fb4:	4b7f      	ldr	r3, [pc, #508]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ed      	bne.n	8001f9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fc2:	7ffb      	ldrb	r3, [r7, #31]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d105      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc8:	4b7a      	ldr	r3, [pc, #488]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fcc:	4a79      	ldr	r2, [pc, #484]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001fce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fd2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 80fe 	beq.w	80021da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	f040 80d0 	bne.w	8002188 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fe8:	4b72      	ldr	r3, [pc, #456]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f003 0203 	and.w	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d130      	bne.n	800205e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	3b01      	subs	r3, #1
 8002008:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d127      	bne.n	800205e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002018:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d11f      	bne.n	800205e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002028:	2a07      	cmp	r2, #7
 800202a:	bf14      	ite	ne
 800202c:	2201      	movne	r2, #1
 800202e:	2200      	moveq	r2, #0
 8002030:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002032:	4293      	cmp	r3, r2
 8002034:	d113      	bne.n	800205e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002040:	085b      	lsrs	r3, r3, #1
 8002042:	3b01      	subs	r3, #1
 8002044:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002046:	429a      	cmp	r2, r3
 8002048:	d109      	bne.n	800205e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002054:	085b      	lsrs	r3, r3, #1
 8002056:	3b01      	subs	r3, #1
 8002058:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d06e      	beq.n	800213c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	2b0c      	cmp	r3, #12
 8002062:	d069      	beq.n	8002138 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002064:	4b53      	ldr	r3, [pc, #332]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002070:	4b50      	ldr	r3, [pc, #320]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0ad      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002080:	4b4c      	ldr	r3, [pc, #304]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a4b      	ldr	r2, [pc, #300]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 8002086:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800208a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800208c:	f7ff f8ec 	bl	8001268 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002094:	f7ff f8e8 	bl	8001268 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e09a      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a6:	4b43      	ldr	r3, [pc, #268]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020b2:	4b40      	ldr	r3, [pc, #256]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 80020b4:	68da      	ldr	r2, [r3, #12]
 80020b6:	4b40      	ldr	r3, [pc, #256]	@ (80021b8 <HAL_RCC_OscConfig+0x784>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020c2:	3a01      	subs	r2, #1
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	4311      	orrs	r1, r2
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020cc:	0212      	lsls	r2, r2, #8
 80020ce:	4311      	orrs	r1, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020d4:	0852      	lsrs	r2, r2, #1
 80020d6:	3a01      	subs	r2, #1
 80020d8:	0552      	lsls	r2, r2, #21
 80020da:	4311      	orrs	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020e0:	0852      	lsrs	r2, r2, #1
 80020e2:	3a01      	subs	r2, #1
 80020e4:	0652      	lsls	r2, r2, #25
 80020e6:	4311      	orrs	r1, r2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020ec:	0912      	lsrs	r2, r2, #4
 80020ee:	0452      	lsls	r2, r2, #17
 80020f0:	430a      	orrs	r2, r1
 80020f2:	4930      	ldr	r1, [pc, #192]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020f8:	4b2e      	ldr	r3, [pc, #184]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a2d      	ldr	r2, [pc, #180]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 80020fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002102:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002104:	4b2b      	ldr	r3, [pc, #172]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a2a      	ldr	r2, [pc, #168]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 800210a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800210e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002110:	f7ff f8aa 	bl	8001268 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff f8a6 	bl	8001268 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e058      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212a:	4b22      	ldr	r3, [pc, #136]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002136:	e050      	b.n	80021da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e04f      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213c:	4b1d      	ldr	r3, [pc, #116]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d148      	bne.n	80021da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002148:	4b1a      	ldr	r3, [pc, #104]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a19      	ldr	r2, [pc, #100]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 800214e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002152:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002154:	4b17      	ldr	r3, [pc, #92]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a16      	ldr	r2, [pc, #88]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 800215a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800215e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002160:	f7ff f882 	bl	8001268 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002168:	f7ff f87e 	bl	8001268 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e030      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217a:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x734>
 8002186:	e028      	b.n	80021da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b0c      	cmp	r3, #12
 800218c:	d023      	beq.n	80021d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a08      	ldr	r2, [pc, #32]	@ (80021b4 <HAL_RCC_OscConfig+0x780>)
 8002194:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7ff f865 	bl	8001268 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a0:	e00c      	b.n	80021bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a2:	f7ff f861 	bl	8001268 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d905      	bls.n	80021bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e013      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
 80021b4:	40021000 	.word	0x40021000
 80021b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021bc:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <HAL_RCC_OscConfig+0x7b0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ec      	bne.n	80021a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021c8:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_RCC_OscConfig+0x7b0>)
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	4905      	ldr	r1, [pc, #20]	@ (80021e4 <HAL_RCC_OscConfig+0x7b0>)
 80021ce:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_RCC_OscConfig+0x7b4>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	60cb      	str	r3, [r1, #12]
 80021d4:	e001      	b.n	80021da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3720      	adds	r7, #32
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	feeefffc 	.word	0xfeeefffc

080021ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0e7      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002200:	4b75      	ldr	r3, [pc, #468]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d910      	bls.n	8002230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b72      	ldr	r3, [pc, #456]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 0207 	bic.w	r2, r3, #7
 8002216:	4970      	ldr	r1, [pc, #448]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	4313      	orrs	r3, r2
 800221c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800221e:	4b6e      	ldr	r3, [pc, #440]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d001      	beq.n	8002230 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0cf      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d010      	beq.n	800225e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	4b66      	ldr	r3, [pc, #408]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002248:	429a      	cmp	r2, r3
 800224a:	d908      	bls.n	800225e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224c:	4b63      	ldr	r3, [pc, #396]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4960      	ldr	r1, [pc, #384]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800225a:	4313      	orrs	r3, r2
 800225c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d04c      	beq.n	8002304 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d107      	bne.n	8002282 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002272:	4b5a      	ldr	r3, [pc, #360]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d121      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0a6      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228a:	4b54      	ldr	r3, [pc, #336]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e09a      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022a2:	4b4e      	ldr	r3, [pc, #312]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e08e      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022b2:	4b4a      	ldr	r3, [pc, #296]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e086      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b46      	ldr	r3, [pc, #280]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4943      	ldr	r1, [pc, #268]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d4:	f7fe ffc8 	bl	8001268 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7fe ffc4 	bl	8001268 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e06e      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b3a      	ldr	r3, [pc, #232]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d010      	beq.n	8002332 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	4b31      	ldr	r3, [pc, #196]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800231c:	429a      	cmp	r2, r3
 800231e:	d208      	bcs.n	8002332 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002320:	4b2e      	ldr	r3, [pc, #184]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	492b      	ldr	r1, [pc, #172]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002332:	4b29      	ldr	r3, [pc, #164]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d210      	bcs.n	8002362 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002340:	4b25      	ldr	r3, [pc, #148]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 0207 	bic.w	r2, r3, #7
 8002348:	4923      	ldr	r1, [pc, #140]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	4313      	orrs	r3, r2
 800234e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002350:	4b21      	ldr	r3, [pc, #132]	@ (80023d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d001      	beq.n	8002362 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e036      	b.n	80023d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800236e:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	4918      	ldr	r1, [pc, #96]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d009      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800238c:	4b13      	ldr	r3, [pc, #76]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4910      	ldr	r1, [pc, #64]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023a0:	f000 f824 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b0d      	ldr	r3, [pc, #52]	@ (80023dc <HAL_RCC_ClockConfig+0x1f0>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	490b      	ldr	r1, [pc, #44]	@ (80023e0 <HAL_RCC_ClockConfig+0x1f4>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
 80023bc:	4a09      	ldr	r2, [pc, #36]	@ (80023e4 <HAL_RCC_ClockConfig+0x1f8>)
 80023be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023c0:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <HAL_RCC_ClockConfig+0x1fc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe feff 	bl	80011c8 <HAL_InitTick>
 80023ca:	4603      	mov	r3, r0
 80023cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80023ce:	7afb      	ldrb	r3, [r7, #11]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40022000 	.word	0x40022000
 80023dc:	40021000 	.word	0x40021000
 80023e0:	080059ac 	.word	0x080059ac
 80023e4:	20000008 	.word	0x20000008
 80023e8:	2000000c 	.word	0x2000000c

080023ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	@ 0x24
 80023f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fa:	4b3e      	ldr	r3, [pc, #248]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002404:	4b3b      	ldr	r3, [pc, #236]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_RCC_GetSysClockFreq+0x34>
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	2b0c      	cmp	r3, #12
 8002418:	d121      	bne.n	800245e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d11e      	bne.n	800245e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002420:	4b34      	ldr	r3, [pc, #208]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0308 	and.w	r3, r3, #8
 8002428:	2b00      	cmp	r3, #0
 800242a:	d107      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800242c:	4b31      	ldr	r3, [pc, #196]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800242e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	e005      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800243c:	4b2d      	ldr	r3, [pc, #180]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002448:	4a2b      	ldr	r2, [pc, #172]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002450:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10d      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	2b04      	cmp	r3, #4
 8002462:	d102      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002464:	4b25      	ldr	r3, [pc, #148]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	e004      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b08      	cmp	r3, #8
 800246e:	d101      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002470:	4b23      	ldr	r3, [pc, #140]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x114>)
 8002472:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	2b0c      	cmp	r3, #12
 8002478:	d134      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800247a:	4b1e      	ldr	r3, [pc, #120]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d003      	beq.n	8002492 <HAL_RCC_GetSysClockFreq+0xa6>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2b03      	cmp	r3, #3
 800248e:	d003      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0xac>
 8002490:	e005      	b.n	800249e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002492:	4b1a      	ldr	r3, [pc, #104]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002494:	617b      	str	r3, [r7, #20]
      break;
 8002496:	e005      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002498:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x114>)
 800249a:	617b      	str	r3, [r7, #20]
      break;
 800249c:	e002      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	617b      	str	r3, [r7, #20]
      break;
 80024a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024a4:	4b13      	ldr	r3, [pc, #76]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	3301      	adds	r3, #1
 80024b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	fb03 f202 	mul.w	r2, r3, r2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024ca:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	0e5b      	lsrs	r3, r3, #25
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	3301      	adds	r3, #1
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024e4:	69bb      	ldr	r3, [r7, #24]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3724      	adds	r7, #36	@ 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	080059c4 	.word	0x080059c4
 80024fc:	00f42400 	.word	0x00f42400
 8002500:	007a1200 	.word	0x007a1200

08002504 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002508:	4b03      	ldr	r3, [pc, #12]	@ (8002518 <HAL_RCC_GetHCLKFreq+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000008 	.word	0x20000008

0800251c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002520:	f7ff fff0 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	4904      	ldr	r1, [pc, #16]	@ (8002544 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800253c:	4618      	mov	r0, r3
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000
 8002544:	080059bc 	.word	0x080059bc

08002548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800254c:	f7ff ffda 	bl	8002504 <HAL_RCC_GetHCLKFreq>
 8002550:	4602      	mov	r2, r0
 8002552:	4b06      	ldr	r3, [pc, #24]	@ (800256c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	0adb      	lsrs	r3, r3, #11
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	4904      	ldr	r1, [pc, #16]	@ (8002570 <HAL_RCC_GetPCLK2Freq+0x28>)
 800255e:	5ccb      	ldrb	r3, [r1, r3]
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002568:	4618      	mov	r0, r3
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40021000 	.word	0x40021000
 8002570:	080059bc 	.word	0x080059bc

08002574 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800257c:	2300      	movs	r3, #0
 800257e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002580:	4b2a      	ldr	r3, [pc, #168]	@ (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800258c:	f7ff f9ee 	bl	800196c <HAL_PWREx_GetVoltageRange>
 8002590:	6178      	str	r0, [r7, #20]
 8002592:	e014      	b.n	80025be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002594:	4b25      	ldr	r3, [pc, #148]	@ (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002598:	4a24      	ldr	r2, [pc, #144]	@ (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800259e:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a0:	4b22      	ldr	r3, [pc, #136]	@ (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025ac:	f7ff f9de 	bl	800196c <HAL_PWREx_GetVoltageRange>
 80025b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025b2:	4b1e      	ldr	r3, [pc, #120]	@ (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b6:	4a1d      	ldr	r2, [pc, #116]	@ (800262c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025c4:	d10b      	bne.n	80025de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b80      	cmp	r3, #128	@ 0x80
 80025ca:	d919      	bls.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80025d0:	d902      	bls.n	80025d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025d2:	2302      	movs	r3, #2
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	e013      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025d8:	2301      	movs	r3, #1
 80025da:	613b      	str	r3, [r7, #16]
 80025dc:	e010      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b80      	cmp	r3, #128	@ 0x80
 80025e2:	d902      	bls.n	80025ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025e4:	2303      	movs	r3, #3
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	e00a      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b80      	cmp	r3, #128	@ 0x80
 80025ee:	d102      	bne.n	80025f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025f0:	2302      	movs	r3, #2
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	e004      	b.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b70      	cmp	r3, #112	@ 0x70
 80025fa:	d101      	bne.n	8002600 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025fc:	2301      	movs	r3, #1
 80025fe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 0207 	bic.w	r2, r3, #7
 8002608:	4909      	ldr	r1, [pc, #36]	@ (8002630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002610:	4b07      	ldr	r3, [pc, #28]	@ (8002630 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	429a      	cmp	r2, r3
 800261c:	d001      	beq.n	8002622 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	40022000 	.word	0x40022000

08002634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800263c:	2300      	movs	r3, #0
 800263e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002640:	2300      	movs	r3, #0
 8002642:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800264c:	2b00      	cmp	r3, #0
 800264e:	d041      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002654:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002658:	d02a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800265a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800265e:	d824      	bhi.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002660:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002664:	d008      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002666:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800266a:	d81e      	bhi.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002670:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002674:	d010      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002676:	e018      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002678:	4b86      	ldr	r3, [pc, #536]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4a85      	ldr	r2, [pc, #532]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002682:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002684:	e015      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3304      	adds	r3, #4
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f000 fabb 	bl	8002c08 <RCCEx_PLLSAI1_Config>
 8002692:	4603      	mov	r3, r0
 8002694:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002696:	e00c      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3320      	adds	r3, #32
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fba6 	bl	8002df0 <RCCEx_PLLSAI2_Config>
 80026a4:	4603      	mov	r3, r0
 80026a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026a8:	e003      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	74fb      	strb	r3, [r7, #19]
      break;
 80026ae:	e000      	b.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026b2:	7cfb      	ldrb	r3, [r7, #19]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10b      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026b8:	4b76      	ldr	r3, [pc, #472]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026c6:	4973      	ldr	r1, [pc, #460]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026ce:	e001      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d0:	7cfb      	ldrb	r3, [r7, #19]
 80026d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d041      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80026e8:	d02a      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80026ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80026ee:	d824      	bhi.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026f4:	d008      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026fa:	d81e      	bhi.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002700:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002704:	d010      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002706:	e018      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002708:	4b62      	ldr	r3, [pc, #392]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4a61      	ldr	r2, [pc, #388]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002712:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002714:	e015      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3304      	adds	r3, #4
 800271a:	2100      	movs	r1, #0
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fa73 	bl	8002c08 <RCCEx_PLLSAI1_Config>
 8002722:	4603      	mov	r3, r0
 8002724:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002726:	e00c      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3320      	adds	r3, #32
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f000 fb5e 	bl	8002df0 <RCCEx_PLLSAI2_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002738:	e003      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	74fb      	strb	r3, [r7, #19]
      break;
 800273e:	e000      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10b      	bne.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002748:	4b52      	ldr	r3, [pc, #328]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002756:	494f      	ldr	r1, [pc, #316]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800275e:	e001      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80a0 	beq.w	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002776:	4b47      	ldr	r3, [pc, #284]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002786:	2300      	movs	r3, #0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00d      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278c:	4b41      	ldr	r3, [pc, #260]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002790:	4a40      	ldr	r2, [pc, #256]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002796:	6593      	str	r3, [r2, #88]	@ 0x58
 8002798:	4b3e      	ldr	r3, [pc, #248]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027a4:	2301      	movs	r3, #1
 80027a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a3a      	ldr	r2, [pc, #232]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027b4:	f7fe fd58 	bl	8001268 <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027ba:	e009      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027bc:	f7fe fd54 	bl	8001268 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d902      	bls.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	74fb      	strb	r3, [r7, #19]
        break;
 80027ce:	e005      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027d0:	4b31      	ldr	r3, [pc, #196]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0ef      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d15c      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01f      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d019      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002800:	4b24      	ldr	r3, [pc, #144]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002802:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800280a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800280c:	4b21      	ldr	r3, [pc, #132]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002812:	4a20      	ldr	r2, [pc, #128]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800281c:	4b1d      	ldr	r3, [pc, #116]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002822:	4a1c      	ldr	r2, [pc, #112]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800282c:	4a19      	ldr	r2, [pc, #100]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d016      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283e:	f7fe fd13 	bl	8001268 <HAL_GetTick>
 8002842:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002844:	e00b      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f7fe fd0f 	bl	8001268 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d902      	bls.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	74fb      	strb	r3, [r7, #19]
            break;
 800285c:	e006      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285e:	4b0d      	ldr	r3, [pc, #52]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0ec      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800286c:	7cfb      	ldrb	r3, [r7, #19]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10c      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002872:	4b08      	ldr	r3, [pc, #32]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002878:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002882:	4904      	ldr	r1, [pc, #16]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800288a:	e009      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800288c:	7cfb      	ldrb	r3, [r7, #19]
 800288e:	74bb      	strb	r3, [r7, #18]
 8002890:	e006      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028a0:	7c7b      	ldrb	r3, [r7, #17]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d105      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a6:	4b9e      	ldr	r3, [pc, #632]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028aa:	4a9d      	ldr	r2, [pc, #628]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028be:	4b98      	ldr	r3, [pc, #608]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c4:	f023 0203 	bic.w	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028cc:	4994      	ldr	r1, [pc, #592]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028e0:	4b8f      	ldr	r3, [pc, #572]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e6:	f023 020c 	bic.w	r2, r3, #12
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ee:	498c      	ldr	r1, [pc, #560]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002902:	4b87      	ldr	r3, [pc, #540]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002908:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	4983      	ldr	r1, [pc, #524]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002924:	4b7e      	ldr	r3, [pc, #504]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	497b      	ldr	r1, [pc, #492]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00a      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002946:	4b76      	ldr	r3, [pc, #472]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002954:	4972      	ldr	r1, [pc, #456]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002968:	4b6d      	ldr	r3, [pc, #436]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800296e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002976:	496a      	ldr	r1, [pc, #424]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800298a:	4b65      	ldr	r3, [pc, #404]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002990:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002998:	4961      	ldr	r1, [pc, #388]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00a      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029ac:	4b5c      	ldr	r3, [pc, #368]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ba:	4959      	ldr	r1, [pc, #356]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ce:	4b54      	ldr	r3, [pc, #336]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029dc:	4950      	ldr	r1, [pc, #320]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d00a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fe:	4948      	ldr	r1, [pc, #288]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a12:	4b43      	ldr	r3, [pc, #268]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a20:	493f      	ldr	r1, [pc, #252]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d028      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a34:	4b3a      	ldr	r3, [pc, #232]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a42:	4937      	ldr	r1, [pc, #220]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a52:	d106      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a54:	4b32      	ldr	r3, [pc, #200]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4a31      	ldr	r2, [pc, #196]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a5e:	60d3      	str	r3, [r2, #12]
 8002a60:	e011      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a6a:	d10c      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	2101      	movs	r1, #1
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f8c8 	bl	8002c08 <RCCEx_PLLSAI1_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a7c:	7cfb      	ldrb	r3, [r7, #19]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a82:	7cfb      	ldrb	r3, [r7, #19]
 8002a84:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d028      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a92:	4b23      	ldr	r3, [pc, #140]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a98:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa0:	491f      	ldr	r1, [pc, #124]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ab0:	d106      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002abc:	60d3      	str	r3, [r2, #12]
 8002abe:	e011      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3304      	adds	r3, #4
 8002ace:	2101      	movs	r1, #1
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 f899 	bl	8002c08 <RCCEx_PLLSAI1_Config>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ada:	7cfb      	ldrb	r3, [r7, #19]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d02b      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002af0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002afe:	4908      	ldr	r1, [pc, #32]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b0e:	d109      	bne.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b10:	4b03      	ldr	r3, [pc, #12]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a02      	ldr	r2, [pc, #8]	@ (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b1a:	60d3      	str	r3, [r2, #12]
 8002b1c:	e014      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2101      	movs	r1, #1
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 f867 	bl	8002c08 <RCCEx_PLLSAI1_Config>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b3e:	7cfb      	ldrb	r3, [r7, #19]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d02f      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b54:	4b2b      	ldr	r3, [pc, #172]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b62:	4928      	ldr	r1, [pc, #160]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b72:	d10d      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	2102      	movs	r1, #2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f844 	bl	8002c08 <RCCEx_PLLSAI1_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d014      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b8a:	7cfb      	ldrb	r3, [r7, #19]
 8002b8c:	74bb      	strb	r3, [r7, #18]
 8002b8e:	e011      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3320      	adds	r3, #32
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 f925 	bl	8002df0 <RCCEx_PLLSAI2_Config>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002baa:	7cfb      	ldrb	r3, [r7, #19]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
 8002bb2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bc0:	4b10      	ldr	r3, [pc, #64]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bce:	490d      	ldr	r1, [pc, #52]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002be2:	4b08      	ldr	r3, [pc, #32]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bf2:	4904      	ldr	r1, [pc, #16]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bfa:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	40021000 	.word	0x40021000

08002c08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c16:	4b75      	ldr	r3, [pc, #468]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d018      	beq.n	8002c54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c22:	4b72      	ldr	r3, [pc, #456]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f003 0203 	and.w	r2, r3, #3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d10d      	bne.n	8002c4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
       ||
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d009      	beq.n	8002c4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c3a:	4b6c      	ldr	r3, [pc, #432]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
       ||
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d047      	beq.n	8002cde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
 8002c52:	e044      	b.n	8002cde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d018      	beq.n	8002c8e <RCCEx_PLLSAI1_Config+0x86>
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d825      	bhi.n	8002cac <RCCEx_PLLSAI1_Config+0xa4>
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d002      	beq.n	8002c6a <RCCEx_PLLSAI1_Config+0x62>
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d009      	beq.n	8002c7c <RCCEx_PLLSAI1_Config+0x74>
 8002c68:	e020      	b.n	8002cac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c6a:	4b60      	ldr	r3, [pc, #384]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d11d      	bne.n	8002cb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c7a:	e01a      	b.n	8002cb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c7c:	4b5b      	ldr	r3, [pc, #364]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d116      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c8c:	e013      	b.n	8002cb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c8e:	4b57      	ldr	r3, [pc, #348]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10f      	bne.n	8002cba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c9a:	4b54      	ldr	r3, [pc, #336]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002caa:	e006      	b.n	8002cba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb0:	e004      	b.n	8002cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cb2:	bf00      	nop
 8002cb4:	e002      	b.n	8002cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cb6:	bf00      	nop
 8002cb8:	e000      	b.n	8002cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002cba:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10d      	bne.n	8002cde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6819      	ldr	r1, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	430b      	orrs	r3, r1
 8002cd8:	4944      	ldr	r1, [pc, #272]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d17d      	bne.n	8002de0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ce4:	4b41      	ldr	r3, [pc, #260]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a40      	ldr	r2, [pc, #256]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf0:	f7fe faba 	bl	8001268 <HAL_GetTick>
 8002cf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cf6:	e009      	b.n	8002d0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cf8:	f7fe fab6 	bl	8001268 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d902      	bls.n	8002d0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	73fb      	strb	r3, [r7, #15]
        break;
 8002d0a:	e005      	b.n	8002d18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d0c:	4b37      	ldr	r3, [pc, #220]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1ef      	bne.n	8002cf8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d160      	bne.n	8002de0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d111      	bne.n	8002d48 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d24:	4b31      	ldr	r3, [pc, #196]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6892      	ldr	r2, [r2, #8]
 8002d34:	0211      	lsls	r1, r2, #8
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68d2      	ldr	r2, [r2, #12]
 8002d3a:	0912      	lsrs	r2, r2, #4
 8002d3c:	0452      	lsls	r2, r2, #17
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	492a      	ldr	r1, [pc, #168]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	610b      	str	r3, [r1, #16]
 8002d46:	e027      	b.n	8002d98 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d112      	bne.n	8002d74 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d4e:	4b27      	ldr	r3, [pc, #156]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002d56:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6892      	ldr	r2, [r2, #8]
 8002d5e:	0211      	lsls	r1, r2, #8
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6912      	ldr	r2, [r2, #16]
 8002d64:	0852      	lsrs	r2, r2, #1
 8002d66:	3a01      	subs	r2, #1
 8002d68:	0552      	lsls	r2, r2, #21
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	491f      	ldr	r1, [pc, #124]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	610b      	str	r3, [r1, #16]
 8002d72:	e011      	b.n	8002d98 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d74:	4b1d      	ldr	r3, [pc, #116]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d7c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6892      	ldr	r2, [r2, #8]
 8002d84:	0211      	lsls	r1, r2, #8
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6952      	ldr	r2, [r2, #20]
 8002d8a:	0852      	lsrs	r2, r2, #1
 8002d8c:	3a01      	subs	r2, #1
 8002d8e:	0652      	lsls	r2, r2, #25
 8002d90:	430a      	orrs	r2, r1
 8002d92:	4916      	ldr	r1, [pc, #88]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d98:	4b14      	ldr	r3, [pc, #80]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a13      	ldr	r2, [pc, #76]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002da2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7fe fa60 	bl	8001268 <HAL_GetTick>
 8002da8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002daa:	e009      	b.n	8002dc0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dac:	f7fe fa5c 	bl	8001268 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d902      	bls.n	8002dc0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	73fb      	strb	r3, [r7, #15]
          break;
 8002dbe:	e005      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ef      	beq.n	8002dac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dd2:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	4904      	ldr	r1, [pc, #16]	@ (8002dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000

08002df0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dfe:	4b6a      	ldr	r3, [pc, #424]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d018      	beq.n	8002e3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e0a:	4b67      	ldr	r3, [pc, #412]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f003 0203 	and.w	r2, r3, #3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d10d      	bne.n	8002e36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d009      	beq.n	8002e36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e22:	4b61      	ldr	r3, [pc, #388]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
       ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d047      	beq.n	8002ec6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	e044      	b.n	8002ec6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d018      	beq.n	8002e76 <RCCEx_PLLSAI2_Config+0x86>
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d825      	bhi.n	8002e94 <RCCEx_PLLSAI2_Config+0xa4>
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d002      	beq.n	8002e52 <RCCEx_PLLSAI2_Config+0x62>
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d009      	beq.n	8002e64 <RCCEx_PLLSAI2_Config+0x74>
 8002e50:	e020      	b.n	8002e94 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e52:	4b55      	ldr	r3, [pc, #340]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d11d      	bne.n	8002e9a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e62:	e01a      	b.n	8002e9a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e64:	4b50      	ldr	r3, [pc, #320]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d116      	bne.n	8002e9e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e74:	e013      	b.n	8002e9e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e76:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10f      	bne.n	8002ea2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e82:	4b49      	ldr	r3, [pc, #292]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e92:	e006      	b.n	8002ea2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
      break;
 8002e98:	e004      	b.n	8002ea4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e9a:	bf00      	nop
 8002e9c:	e002      	b.n	8002ea4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e9e:	bf00      	nop
 8002ea0:	e000      	b.n	8002ea4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ea2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10d      	bne.n	8002ec6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eaa:	4b3f      	ldr	r3, [pc, #252]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6819      	ldr	r1, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	4939      	ldr	r1, [pc, #228]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d167      	bne.n	8002f9c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ecc:	4b36      	ldr	r3, [pc, #216]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a35      	ldr	r2, [pc, #212]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed8:	f7fe f9c6 	bl	8001268 <HAL_GetTick>
 8002edc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ede:	e009      	b.n	8002ef4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ee0:	f7fe f9c2 	bl	8001268 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d902      	bls.n	8002ef4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ef2:	e005      	b.n	8002f00 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ef4:	4b2c      	ldr	r3, [pc, #176]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1ef      	bne.n	8002ee0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d14a      	bne.n	8002f9c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d111      	bne.n	8002f30 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f0c:	4b26      	ldr	r3, [pc, #152]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6892      	ldr	r2, [r2, #8]
 8002f1c:	0211      	lsls	r1, r2, #8
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68d2      	ldr	r2, [r2, #12]
 8002f22:	0912      	lsrs	r2, r2, #4
 8002f24:	0452      	lsls	r2, r2, #17
 8002f26:	430a      	orrs	r2, r1
 8002f28:	491f      	ldr	r1, [pc, #124]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	614b      	str	r3, [r1, #20]
 8002f2e:	e011      	b.n	8002f54 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f30:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f38:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6892      	ldr	r2, [r2, #8]
 8002f40:	0211      	lsls	r1, r2, #8
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6912      	ldr	r2, [r2, #16]
 8002f46:	0852      	lsrs	r2, r2, #1
 8002f48:	3a01      	subs	r2, #1
 8002f4a:	0652      	lsls	r2, r2, #25
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	4916      	ldr	r1, [pc, #88]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f54:	4b14      	ldr	r3, [pc, #80]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a13      	ldr	r2, [pc, #76]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fe f982 	bl	8001268 <HAL_GetTick>
 8002f64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f66:	e009      	b.n	8002f7c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f68:	f7fe f97e 	bl	8001268 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d902      	bls.n	8002f7c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	73fb      	strb	r3, [r7, #15]
          break;
 8002f7a:	e005      	b.n	8002f88 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ef      	beq.n	8002f68 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f8e:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	4904      	ldr	r1, [pc, #16]	@ (8002fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40021000 	.word	0x40021000

08002fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e049      	b.n	8003052 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fd ff0a 	bl	8000dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f000 fb7a 	bl	80036e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e049      	b.n	8003100 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f841 	bl	8003108 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3304      	adds	r3, #4
 8003096:	4619      	mov	r1, r3
 8003098:	4610      	mov	r0, r2
 800309a:	f000 fb23 	bl	80036e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d109      	bne.n	8003140 <HAL_TIM_PWM_Start+0x24>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	bf14      	ite	ne
 8003138:	2301      	movne	r3, #1
 800313a:	2300      	moveq	r3, #0
 800313c:	b2db      	uxtb	r3, r3
 800313e:	e03c      	b.n	80031ba <HAL_TIM_PWM_Start+0x9e>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b04      	cmp	r3, #4
 8003144:	d109      	bne.n	800315a <HAL_TIM_PWM_Start+0x3e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	bf14      	ite	ne
 8003152:	2301      	movne	r3, #1
 8003154:	2300      	moveq	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	e02f      	b.n	80031ba <HAL_TIM_PWM_Start+0x9e>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d109      	bne.n	8003174 <HAL_TIM_PWM_Start+0x58>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b01      	cmp	r3, #1
 800316a:	bf14      	ite	ne
 800316c:	2301      	movne	r3, #1
 800316e:	2300      	moveq	r3, #0
 8003170:	b2db      	uxtb	r3, r3
 8003172:	e022      	b.n	80031ba <HAL_TIM_PWM_Start+0x9e>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b0c      	cmp	r3, #12
 8003178:	d109      	bne.n	800318e <HAL_TIM_PWM_Start+0x72>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	bf14      	ite	ne
 8003186:	2301      	movne	r3, #1
 8003188:	2300      	moveq	r3, #0
 800318a:	b2db      	uxtb	r3, r3
 800318c:	e015      	b.n	80031ba <HAL_TIM_PWM_Start+0x9e>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b10      	cmp	r3, #16
 8003192:	d109      	bne.n	80031a8 <HAL_TIM_PWM_Start+0x8c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	e008      	b.n	80031ba <HAL_TIM_PWM_Start+0x9e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	bf14      	ite	ne
 80031b4:	2301      	movne	r3, #1
 80031b6:	2300      	moveq	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e09c      	b.n	80032fc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d104      	bne.n	80031d2 <HAL_TIM_PWM_Start+0xb6>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031d0:	e023      	b.n	800321a <HAL_TIM_PWM_Start+0xfe>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d104      	bne.n	80031e2 <HAL_TIM_PWM_Start+0xc6>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031e0:	e01b      	b.n	800321a <HAL_TIM_PWM_Start+0xfe>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b08      	cmp	r3, #8
 80031e6:	d104      	bne.n	80031f2 <HAL_TIM_PWM_Start+0xd6>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031f0:	e013      	b.n	800321a <HAL_TIM_PWM_Start+0xfe>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b0c      	cmp	r3, #12
 80031f6:	d104      	bne.n	8003202 <HAL_TIM_PWM_Start+0xe6>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003200:	e00b      	b.n	800321a <HAL_TIM_PWM_Start+0xfe>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b10      	cmp	r3, #16
 8003206:	d104      	bne.n	8003212 <HAL_TIM_PWM_Start+0xf6>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2202      	movs	r2, #2
 800320c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003210:	e003      	b.n	800321a <HAL_TIM_PWM_Start+0xfe>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2202      	movs	r2, #2
 8003216:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2201      	movs	r2, #1
 8003220:	6839      	ldr	r1, [r7, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fe74 	bl	8003f10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a35      	ldr	r2, [pc, #212]	@ (8003304 <HAL_TIM_PWM_Start+0x1e8>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d013      	beq.n	800325a <HAL_TIM_PWM_Start+0x13e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a34      	ldr	r2, [pc, #208]	@ (8003308 <HAL_TIM_PWM_Start+0x1ec>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d00e      	beq.n	800325a <HAL_TIM_PWM_Start+0x13e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a32      	ldr	r2, [pc, #200]	@ (800330c <HAL_TIM_PWM_Start+0x1f0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d009      	beq.n	800325a <HAL_TIM_PWM_Start+0x13e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a31      	ldr	r2, [pc, #196]	@ (8003310 <HAL_TIM_PWM_Start+0x1f4>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d004      	beq.n	800325a <HAL_TIM_PWM_Start+0x13e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a2f      	ldr	r2, [pc, #188]	@ (8003314 <HAL_TIM_PWM_Start+0x1f8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d101      	bne.n	800325e <HAL_TIM_PWM_Start+0x142>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <HAL_TIM_PWM_Start+0x144>
 800325e:	2300      	movs	r3, #0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003272:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a22      	ldr	r2, [pc, #136]	@ (8003304 <HAL_TIM_PWM_Start+0x1e8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d01d      	beq.n	80032ba <HAL_TIM_PWM_Start+0x19e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003286:	d018      	beq.n	80032ba <HAL_TIM_PWM_Start+0x19e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a22      	ldr	r2, [pc, #136]	@ (8003318 <HAL_TIM_PWM_Start+0x1fc>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <HAL_TIM_PWM_Start+0x19e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a21      	ldr	r2, [pc, #132]	@ (800331c <HAL_TIM_PWM_Start+0x200>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00e      	beq.n	80032ba <HAL_TIM_PWM_Start+0x19e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003320 <HAL_TIM_PWM_Start+0x204>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d009      	beq.n	80032ba <HAL_TIM_PWM_Start+0x19e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a17      	ldr	r2, [pc, #92]	@ (8003308 <HAL_TIM_PWM_Start+0x1ec>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d004      	beq.n	80032ba <HAL_TIM_PWM_Start+0x19e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a15      	ldr	r2, [pc, #84]	@ (800330c <HAL_TIM_PWM_Start+0x1f0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d115      	bne.n	80032e6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	4b18      	ldr	r3, [pc, #96]	@ (8003324 <HAL_TIM_PWM_Start+0x208>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b06      	cmp	r3, #6
 80032ca:	d015      	beq.n	80032f8 <HAL_TIM_PWM_Start+0x1dc>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d2:	d011      	beq.n	80032f8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e4:	e008      	b.n	80032f8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0201 	orr.w	r2, r2, #1
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	e000      	b.n	80032fa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40012c00 	.word	0x40012c00
 8003308:	40013400 	.word	0x40013400
 800330c:	40014000 	.word	0x40014000
 8003310:	40014400 	.word	0x40014400
 8003314:	40014800 	.word	0x40014800
 8003318:	40000400 	.word	0x40000400
 800331c:	40000800 	.word	0x40000800
 8003320:	40000c00 	.word	0x40000c00
 8003324:	00010007 	.word	0x00010007

08003328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003342:	2302      	movs	r3, #2
 8003344:	e0ff      	b.n	8003546 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b14      	cmp	r3, #20
 8003352:	f200 80f0 	bhi.w	8003536 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003356:	a201      	add	r2, pc, #4	@ (adr r2, 800335c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	080033b1 	.word	0x080033b1
 8003360:	08003537 	.word	0x08003537
 8003364:	08003537 	.word	0x08003537
 8003368:	08003537 	.word	0x08003537
 800336c:	080033f1 	.word	0x080033f1
 8003370:	08003537 	.word	0x08003537
 8003374:	08003537 	.word	0x08003537
 8003378:	08003537 	.word	0x08003537
 800337c:	08003433 	.word	0x08003433
 8003380:	08003537 	.word	0x08003537
 8003384:	08003537 	.word	0x08003537
 8003388:	08003537 	.word	0x08003537
 800338c:	08003473 	.word	0x08003473
 8003390:	08003537 	.word	0x08003537
 8003394:	08003537 	.word	0x08003537
 8003398:	08003537 	.word	0x08003537
 800339c:	080034b5 	.word	0x080034b5
 80033a0:	08003537 	.word	0x08003537
 80033a4:	08003537 	.word	0x08003537
 80033a8:	08003537 	.word	0x08003537
 80033ac:	080034f5 	.word	0x080034f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fa3a 	bl	8003830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0208 	orr.w	r2, r2, #8
 80033ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0204 	bic.w	r2, r2, #4
 80033da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6999      	ldr	r1, [r3, #24]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	619a      	str	r2, [r3, #24]
      break;
 80033ee:	e0a5      	b.n	800353c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 faaa 	bl	8003950 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800340a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800341a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6999      	ldr	r1, [r3, #24]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	021a      	lsls	r2, r3, #8
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	619a      	str	r2, [r3, #24]
      break;
 8003430:	e084      	b.n	800353c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fb13 	bl	8003a64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0208 	orr.w	r2, r2, #8
 800344c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0204 	bic.w	r2, r2, #4
 800345c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69d9      	ldr	r1, [r3, #28]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	61da      	str	r2, [r3, #28]
      break;
 8003470:	e064      	b.n	800353c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fb7b 	bl	8003b74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800348c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69da      	ldr	r2, [r3, #28]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800349c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69d9      	ldr	r1, [r3, #28]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	021a      	lsls	r2, r3, #8
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	61da      	str	r2, [r3, #28]
      break;
 80034b2:	e043      	b.n	800353c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fbc4 	bl	8003c48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0208 	orr.w	r2, r2, #8
 80034ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0204 	bic.w	r2, r2, #4
 80034de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	691a      	ldr	r2, [r3, #16]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80034f2:	e023      	b.n	800353c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68b9      	ldr	r1, [r7, #8]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fc08 	bl	8003d10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800350e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800351e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	021a      	lsls	r2, r3, #8
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003534:	e002      	b.n	800353c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	75fb      	strb	r3, [r7, #23]
      break;
 800353a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003544:	7dfb      	ldrb	r3, [r7, #23]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop

08003550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_TIM_ConfigClockSource+0x1c>
 8003568:	2302      	movs	r3, #2
 800356a:	e0b6      	b.n	80036da <HAL_TIM_ConfigClockSource+0x18a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800358a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800358e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003596:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035a8:	d03e      	beq.n	8003628 <HAL_TIM_ConfigClockSource+0xd8>
 80035aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035ae:	f200 8087 	bhi.w	80036c0 <HAL_TIM_ConfigClockSource+0x170>
 80035b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b6:	f000 8086 	beq.w	80036c6 <HAL_TIM_ConfigClockSource+0x176>
 80035ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035be:	d87f      	bhi.n	80036c0 <HAL_TIM_ConfigClockSource+0x170>
 80035c0:	2b70      	cmp	r3, #112	@ 0x70
 80035c2:	d01a      	beq.n	80035fa <HAL_TIM_ConfigClockSource+0xaa>
 80035c4:	2b70      	cmp	r3, #112	@ 0x70
 80035c6:	d87b      	bhi.n	80036c0 <HAL_TIM_ConfigClockSource+0x170>
 80035c8:	2b60      	cmp	r3, #96	@ 0x60
 80035ca:	d050      	beq.n	800366e <HAL_TIM_ConfigClockSource+0x11e>
 80035cc:	2b60      	cmp	r3, #96	@ 0x60
 80035ce:	d877      	bhi.n	80036c0 <HAL_TIM_ConfigClockSource+0x170>
 80035d0:	2b50      	cmp	r3, #80	@ 0x50
 80035d2:	d03c      	beq.n	800364e <HAL_TIM_ConfigClockSource+0xfe>
 80035d4:	2b50      	cmp	r3, #80	@ 0x50
 80035d6:	d873      	bhi.n	80036c0 <HAL_TIM_ConfigClockSource+0x170>
 80035d8:	2b40      	cmp	r3, #64	@ 0x40
 80035da:	d058      	beq.n	800368e <HAL_TIM_ConfigClockSource+0x13e>
 80035dc:	2b40      	cmp	r3, #64	@ 0x40
 80035de:	d86f      	bhi.n	80036c0 <HAL_TIM_ConfigClockSource+0x170>
 80035e0:	2b30      	cmp	r3, #48	@ 0x30
 80035e2:	d064      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x15e>
 80035e4:	2b30      	cmp	r3, #48	@ 0x30
 80035e6:	d86b      	bhi.n	80036c0 <HAL_TIM_ConfigClockSource+0x170>
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d060      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x15e>
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d867      	bhi.n	80036c0 <HAL_TIM_ConfigClockSource+0x170>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d05c      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x15e>
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d05a      	beq.n	80036ae <HAL_TIM_ConfigClockSource+0x15e>
 80035f8:	e062      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800360a:	f000 fc61 	bl	8003ed0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800361c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	609a      	str	r2, [r3, #8]
      break;
 8003626:	e04f      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003638:	f000 fc4a 	bl	8003ed0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800364a:	609a      	str	r2, [r3, #8]
      break;
 800364c:	e03c      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800365a:	461a      	mov	r2, r3
 800365c:	f000 fbbe 	bl	8003ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2150      	movs	r1, #80	@ 0x50
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fc17 	bl	8003e9a <TIM_ITRx_SetConfig>
      break;
 800366c:	e02c      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800367a:	461a      	mov	r2, r3
 800367c:	f000 fbdd 	bl	8003e3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2160      	movs	r1, #96	@ 0x60
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fc07 	bl	8003e9a <TIM_ITRx_SetConfig>
      break;
 800368c:	e01c      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800369a:	461a      	mov	r2, r3
 800369c:	f000 fb9e 	bl	8003ddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2140      	movs	r1, #64	@ 0x40
 80036a6:	4618      	mov	r0, r3
 80036a8:	f000 fbf7 	bl	8003e9a <TIM_ITRx_SetConfig>
      break;
 80036ac:	e00c      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4619      	mov	r1, r3
 80036b8:	4610      	mov	r0, r2
 80036ba:	f000 fbee 	bl	8003e9a <TIM_ITRx_SetConfig>
      break;
 80036be:	e003      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	73fb      	strb	r3, [r7, #15]
      break;
 80036c4:	e000      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80036c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a46      	ldr	r2, [pc, #280]	@ (8003810 <TIM_Base_SetConfig+0x12c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d013      	beq.n	8003724 <TIM_Base_SetConfig+0x40>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003702:	d00f      	beq.n	8003724 <TIM_Base_SetConfig+0x40>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a43      	ldr	r2, [pc, #268]	@ (8003814 <TIM_Base_SetConfig+0x130>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00b      	beq.n	8003724 <TIM_Base_SetConfig+0x40>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a42      	ldr	r2, [pc, #264]	@ (8003818 <TIM_Base_SetConfig+0x134>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d007      	beq.n	8003724 <TIM_Base_SetConfig+0x40>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a41      	ldr	r2, [pc, #260]	@ (800381c <TIM_Base_SetConfig+0x138>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d003      	beq.n	8003724 <TIM_Base_SetConfig+0x40>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a40      	ldr	r2, [pc, #256]	@ (8003820 <TIM_Base_SetConfig+0x13c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d108      	bne.n	8003736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800372a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4313      	orrs	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a35      	ldr	r2, [pc, #212]	@ (8003810 <TIM_Base_SetConfig+0x12c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d01f      	beq.n	800377e <TIM_Base_SetConfig+0x9a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003744:	d01b      	beq.n	800377e <TIM_Base_SetConfig+0x9a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a32      	ldr	r2, [pc, #200]	@ (8003814 <TIM_Base_SetConfig+0x130>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d017      	beq.n	800377e <TIM_Base_SetConfig+0x9a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a31      	ldr	r2, [pc, #196]	@ (8003818 <TIM_Base_SetConfig+0x134>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d013      	beq.n	800377e <TIM_Base_SetConfig+0x9a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a30      	ldr	r2, [pc, #192]	@ (800381c <TIM_Base_SetConfig+0x138>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00f      	beq.n	800377e <TIM_Base_SetConfig+0x9a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a2f      	ldr	r2, [pc, #188]	@ (8003820 <TIM_Base_SetConfig+0x13c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00b      	beq.n	800377e <TIM_Base_SetConfig+0x9a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a2e      	ldr	r2, [pc, #184]	@ (8003824 <TIM_Base_SetConfig+0x140>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d007      	beq.n	800377e <TIM_Base_SetConfig+0x9a>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a2d      	ldr	r2, [pc, #180]	@ (8003828 <TIM_Base_SetConfig+0x144>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d003      	beq.n	800377e <TIM_Base_SetConfig+0x9a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a2c      	ldr	r2, [pc, #176]	@ (800382c <TIM_Base_SetConfig+0x148>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d108      	bne.n	8003790 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003784:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a16      	ldr	r2, [pc, #88]	@ (8003810 <TIM_Base_SetConfig+0x12c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00f      	beq.n	80037dc <TIM_Base_SetConfig+0xf8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a18      	ldr	r2, [pc, #96]	@ (8003820 <TIM_Base_SetConfig+0x13c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00b      	beq.n	80037dc <TIM_Base_SetConfig+0xf8>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a17      	ldr	r2, [pc, #92]	@ (8003824 <TIM_Base_SetConfig+0x140>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d007      	beq.n	80037dc <TIM_Base_SetConfig+0xf8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a16      	ldr	r2, [pc, #88]	@ (8003828 <TIM_Base_SetConfig+0x144>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d003      	beq.n	80037dc <TIM_Base_SetConfig+0xf8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a15      	ldr	r2, [pc, #84]	@ (800382c <TIM_Base_SetConfig+0x148>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d103      	bne.n	80037e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d105      	bne.n	8003802 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	f023 0201 	bic.w	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	611a      	str	r2, [r3, #16]
  }
}
 8003802:	bf00      	nop
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40000400 	.word	0x40000400
 8003818:	40000800 	.word	0x40000800
 800381c:	40000c00 	.word	0x40000c00
 8003820:	40013400 	.word	0x40013400
 8003824:	40014000 	.word	0x40014000
 8003828:	40014400 	.word	0x40014400
 800382c:	40014800 	.word	0x40014800

08003830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	f023 0201 	bic.w	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800385e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f023 0302 	bic.w	r3, r3, #2
 800387c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a2c      	ldr	r2, [pc, #176]	@ (800393c <TIM_OC1_SetConfig+0x10c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00f      	beq.n	80038b0 <TIM_OC1_SetConfig+0x80>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a2b      	ldr	r2, [pc, #172]	@ (8003940 <TIM_OC1_SetConfig+0x110>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d00b      	beq.n	80038b0 <TIM_OC1_SetConfig+0x80>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a2a      	ldr	r2, [pc, #168]	@ (8003944 <TIM_OC1_SetConfig+0x114>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d007      	beq.n	80038b0 <TIM_OC1_SetConfig+0x80>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a29      	ldr	r2, [pc, #164]	@ (8003948 <TIM_OC1_SetConfig+0x118>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d003      	beq.n	80038b0 <TIM_OC1_SetConfig+0x80>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a28      	ldr	r2, [pc, #160]	@ (800394c <TIM_OC1_SetConfig+0x11c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d10c      	bne.n	80038ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f023 0308 	bic.w	r3, r3, #8
 80038b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	4313      	orrs	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f023 0304 	bic.w	r3, r3, #4
 80038c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a1b      	ldr	r2, [pc, #108]	@ (800393c <TIM_OC1_SetConfig+0x10c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00f      	beq.n	80038f2 <TIM_OC1_SetConfig+0xc2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1a      	ldr	r2, [pc, #104]	@ (8003940 <TIM_OC1_SetConfig+0x110>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <TIM_OC1_SetConfig+0xc2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a19      	ldr	r2, [pc, #100]	@ (8003944 <TIM_OC1_SetConfig+0x114>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <TIM_OC1_SetConfig+0xc2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a18      	ldr	r2, [pc, #96]	@ (8003948 <TIM_OC1_SetConfig+0x118>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_OC1_SetConfig+0xc2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a17      	ldr	r2, [pc, #92]	@ (800394c <TIM_OC1_SetConfig+0x11c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d111      	bne.n	8003916 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	621a      	str	r2, [r3, #32]
}
 8003930:	bf00      	nop
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	40012c00 	.word	0x40012c00
 8003940:	40013400 	.word	0x40013400
 8003944:	40014000 	.word	0x40014000
 8003948:	40014400 	.word	0x40014400
 800394c:	40014800 	.word	0x40014800

08003950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f023 0210 	bic.w	r2, r3, #16
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800397e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800398a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f023 0320 	bic.w	r3, r3, #32
 800399e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a28      	ldr	r2, [pc, #160]	@ (8003a50 <TIM_OC2_SetConfig+0x100>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d003      	beq.n	80039bc <TIM_OC2_SetConfig+0x6c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a27      	ldr	r2, [pc, #156]	@ (8003a54 <TIM_OC2_SetConfig+0x104>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d10d      	bne.n	80039d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a1d      	ldr	r2, [pc, #116]	@ (8003a50 <TIM_OC2_SetConfig+0x100>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00f      	beq.n	8003a00 <TIM_OC2_SetConfig+0xb0>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a54 <TIM_OC2_SetConfig+0x104>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d00b      	beq.n	8003a00 <TIM_OC2_SetConfig+0xb0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003a58 <TIM_OC2_SetConfig+0x108>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d007      	beq.n	8003a00 <TIM_OC2_SetConfig+0xb0>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a1a      	ldr	r2, [pc, #104]	@ (8003a5c <TIM_OC2_SetConfig+0x10c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d003      	beq.n	8003a00 <TIM_OC2_SetConfig+0xb0>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a19      	ldr	r2, [pc, #100]	@ (8003a60 <TIM_OC2_SetConfig+0x110>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d113      	bne.n	8003a28 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	621a      	str	r2, [r3, #32]
}
 8003a42:	bf00      	nop
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40012c00 	.word	0x40012c00
 8003a54:	40013400 	.word	0x40013400
 8003a58:	40014000 	.word	0x40014000
 8003a5c:	40014400 	.word	0x40014400
 8003a60:	40014800 	.word	0x40014800

08003a64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0303 	bic.w	r3, r3, #3
 8003a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a27      	ldr	r2, [pc, #156]	@ (8003b60 <TIM_OC3_SetConfig+0xfc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d003      	beq.n	8003ace <TIM_OC3_SetConfig+0x6a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a26      	ldr	r2, [pc, #152]	@ (8003b64 <TIM_OC3_SetConfig+0x100>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d10d      	bne.n	8003aea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a1c      	ldr	r2, [pc, #112]	@ (8003b60 <TIM_OC3_SetConfig+0xfc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00f      	beq.n	8003b12 <TIM_OC3_SetConfig+0xae>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a1b      	ldr	r2, [pc, #108]	@ (8003b64 <TIM_OC3_SetConfig+0x100>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00b      	beq.n	8003b12 <TIM_OC3_SetConfig+0xae>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a1a      	ldr	r2, [pc, #104]	@ (8003b68 <TIM_OC3_SetConfig+0x104>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d007      	beq.n	8003b12 <TIM_OC3_SetConfig+0xae>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a19      	ldr	r2, [pc, #100]	@ (8003b6c <TIM_OC3_SetConfig+0x108>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d003      	beq.n	8003b12 <TIM_OC3_SetConfig+0xae>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a18      	ldr	r2, [pc, #96]	@ (8003b70 <TIM_OC3_SetConfig+0x10c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d113      	bne.n	8003b3a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	621a      	str	r2, [r3, #32]
}
 8003b54:	bf00      	nop
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	40012c00 	.word	0x40012c00
 8003b64:	40013400 	.word	0x40013400
 8003b68:	40014000 	.word	0x40014000
 8003b6c:	40014400 	.word	0x40014400
 8003b70:	40014800 	.word	0x40014800

08003b74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003bc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	031b      	lsls	r3, r3, #12
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a18      	ldr	r2, [pc, #96]	@ (8003c34 <TIM_OC4_SetConfig+0xc0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00f      	beq.n	8003bf8 <TIM_OC4_SetConfig+0x84>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a17      	ldr	r2, [pc, #92]	@ (8003c38 <TIM_OC4_SetConfig+0xc4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00b      	beq.n	8003bf8 <TIM_OC4_SetConfig+0x84>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a16      	ldr	r2, [pc, #88]	@ (8003c3c <TIM_OC4_SetConfig+0xc8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d007      	beq.n	8003bf8 <TIM_OC4_SetConfig+0x84>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a15      	ldr	r2, [pc, #84]	@ (8003c40 <TIM_OC4_SetConfig+0xcc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <TIM_OC4_SetConfig+0x84>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a14      	ldr	r2, [pc, #80]	@ (8003c44 <TIM_OC4_SetConfig+0xd0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d109      	bne.n	8003c0c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003bfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	019b      	lsls	r3, r3, #6
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	621a      	str	r2, [r3, #32]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40013400 	.word	0x40013400
 8003c3c:	40014000 	.word	0x40014000
 8003c40:	40014400 	.word	0x40014400
 8003c44:	40014800 	.word	0x40014800

08003c48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003c8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	041b      	lsls	r3, r3, #16
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a17      	ldr	r2, [pc, #92]	@ (8003cfc <TIM_OC5_SetConfig+0xb4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00f      	beq.n	8003cc2 <TIM_OC5_SetConfig+0x7a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a16      	ldr	r2, [pc, #88]	@ (8003d00 <TIM_OC5_SetConfig+0xb8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00b      	beq.n	8003cc2 <TIM_OC5_SetConfig+0x7a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a15      	ldr	r2, [pc, #84]	@ (8003d04 <TIM_OC5_SetConfig+0xbc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d007      	beq.n	8003cc2 <TIM_OC5_SetConfig+0x7a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a14      	ldr	r2, [pc, #80]	@ (8003d08 <TIM_OC5_SetConfig+0xc0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d003      	beq.n	8003cc2 <TIM_OC5_SetConfig+0x7a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a13      	ldr	r2, [pc, #76]	@ (8003d0c <TIM_OC5_SetConfig+0xc4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d109      	bne.n	8003cd6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	021b      	lsls	r3, r3, #8
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	621a      	str	r2, [r3, #32]
}
 8003cf0:	bf00      	nop
 8003cf2:	371c      	adds	r7, #28
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	40012c00 	.word	0x40012c00
 8003d00:	40013400 	.word	0x40013400
 8003d04:	40014000 	.word	0x40014000
 8003d08:	40014400 	.word	0x40014400
 8003d0c:	40014800 	.word	0x40014800

08003d10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	051b      	lsls	r3, r3, #20
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a18      	ldr	r2, [pc, #96]	@ (8003dc8 <TIM_OC6_SetConfig+0xb8>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00f      	beq.n	8003d8c <TIM_OC6_SetConfig+0x7c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a17      	ldr	r2, [pc, #92]	@ (8003dcc <TIM_OC6_SetConfig+0xbc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d00b      	beq.n	8003d8c <TIM_OC6_SetConfig+0x7c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a16      	ldr	r2, [pc, #88]	@ (8003dd0 <TIM_OC6_SetConfig+0xc0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d007      	beq.n	8003d8c <TIM_OC6_SetConfig+0x7c>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a15      	ldr	r2, [pc, #84]	@ (8003dd4 <TIM_OC6_SetConfig+0xc4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_OC6_SetConfig+0x7c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a14      	ldr	r2, [pc, #80]	@ (8003dd8 <TIM_OC6_SetConfig+0xc8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d109      	bne.n	8003da0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	029b      	lsls	r3, r3, #10
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	621a      	str	r2, [r3, #32]
}
 8003dba:	bf00      	nop
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	40013400 	.word	0x40013400
 8003dd0:	40014000 	.word	0x40014000
 8003dd4:	40014400 	.word	0x40014400
 8003dd8:	40014800 	.word	0x40014800

08003ddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f023 0201 	bic.w	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f023 030a 	bic.w	r3, r3, #10
 8003e18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b087      	sub	sp, #28
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f023 0210 	bic.w	r2, r3, #16
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	031b      	lsls	r3, r3, #12
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	621a      	str	r2, [r3, #32]
}
 8003e8e:	bf00      	nop
 8003e90:	371c      	adds	r7, #28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b085      	sub	sp, #20
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	f043 0307 	orr.w	r3, r3, #7
 8003ebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	609a      	str	r2, [r3, #8]
}
 8003ec4:	bf00      	nop
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	021a      	lsls	r2, r3, #8
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	609a      	str	r2, [r3, #8]
}
 8003f04:	bf00      	nop
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f003 031f 	and.w	r3, r3, #31
 8003f22:	2201      	movs	r2, #1
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a1a      	ldr	r2, [r3, #32]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	43db      	mvns	r3, r3
 8003f32:	401a      	ands	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a1a      	ldr	r2, [r3, #32]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	621a      	str	r2, [r3, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e068      	b.n	8004046 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a2e      	ldr	r2, [pc, #184]	@ (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d004      	beq.n	8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a2d      	ldr	r2, [pc, #180]	@ (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d108      	bne.n	8003fba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003fae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01d      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe6:	d018      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1b      	ldr	r2, [pc, #108]	@ (800405c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1a      	ldr	r2, [pc, #104]	@ (8004060 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00e      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a18      	ldr	r2, [pc, #96]	@ (8004064 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d009      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a13      	ldr	r2, [pc, #76]	@ (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a14      	ldr	r2, [pc, #80]	@ (8004068 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d10c      	bne.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	4313      	orrs	r3, r2
 800402a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40012c00 	.word	0x40012c00
 8004058:	40013400 	.word	0x40013400
 800405c:	40000400 	.word	0x40000400
 8004060:	40000800 	.word	0x40000800
 8004064:	40000c00 	.word	0x40000c00
 8004068:	40014000 	.word	0x40014000

0800406c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004084:	2302      	movs	r3, #2
 8004086:	e065      	b.n	8004154 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	041b      	lsls	r3, r3, #16
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a16      	ldr	r2, [pc, #88]	@ (8004160 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d004      	beq.n	8004116 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a14      	ldr	r2, [pc, #80]	@ (8004164 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d115      	bne.n	8004142 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	051b      	lsls	r3, r3, #20
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	40012c00 	.word	0x40012c00
 8004164:	40013400 	.word	0x40013400

08004168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e040      	b.n	80041fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fc fedc 	bl	8000f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2224      	movs	r2, #36	@ 0x24
 8004194:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 0201 	bic.w	r2, r2, #1
 80041a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fedc 	bl	8004f6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fc21 	bl	80049fc <UART_SetConfig>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e01b      	b.n	80041fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 ff5b 	bl	80050b0 <UART_CheckIdleState>
 80041fa:	4603      	mov	r3, r0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	@ 0x28
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004218:	2b20      	cmp	r3, #32
 800421a:	d177      	bne.n	800430c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_UART_Transmit+0x24>
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e070      	b.n	800430e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2200      	movs	r2, #0
 8004230:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2221      	movs	r2, #33	@ 0x21
 8004238:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800423a:	f7fd f815 	bl	8001268 <HAL_GetTick>
 800423e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	88fa      	ldrh	r2, [r7, #6]
 8004244:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	88fa      	ldrh	r2, [r7, #6]
 800424c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004258:	d108      	bne.n	800426c <HAL_UART_Transmit+0x68>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d104      	bne.n	800426c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004262:	2300      	movs	r3, #0
 8004264:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	e003      	b.n	8004274 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004270:	2300      	movs	r3, #0
 8004272:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004274:	e02f      	b.n	80042d6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2200      	movs	r2, #0
 800427e:	2180      	movs	r1, #128	@ 0x80
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 ffbd 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d004      	beq.n	8004296 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e03b      	b.n	800430e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10b      	bne.n	80042b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	881a      	ldrh	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042a8:	b292      	uxth	r2, r2
 80042aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	3302      	adds	r3, #2
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	e007      	b.n	80042c4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	781a      	ldrb	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3301      	adds	r3, #1
 80042c2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1c9      	bne.n	8004276 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2200      	movs	r2, #0
 80042ea:	2140      	movs	r1, #64	@ 0x40
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 ff87 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d004      	beq.n	8004302 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e005      	b.n	800430e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2220      	movs	r2, #32
 8004306:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	e000      	b.n	800430e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800430c:	2302      	movs	r3, #2
  }
}
 800430e:	4618      	mov	r0, r3
 8004310:	3720      	adds	r7, #32
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08a      	sub	sp, #40	@ 0x28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	4613      	mov	r3, r2
 8004324:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800432c:	2b20      	cmp	r3, #32
 800432e:	d137      	bne.n	80043a0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_UART_Receive_IT+0x24>
 8004336:	88fb      	ldrh	r3, [r7, #6]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e030      	b.n	80043a2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a18      	ldr	r2, [pc, #96]	@ (80043ac <HAL_UART_Receive_IT+0x94>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d01f      	beq.n	8004390 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d018      	beq.n	8004390 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	613b      	str	r3, [r7, #16]
   return(result);
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004372:	627b      	str	r3, [r7, #36]	@ 0x24
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437c:	623b      	str	r3, [r7, #32]
 800437e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	69f9      	ldr	r1, [r7, #28]
 8004382:	6a3a      	ldr	r2, [r7, #32]
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	61bb      	str	r3, [r7, #24]
   return(result);
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e6      	bne.n	800435e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	461a      	mov	r2, r3
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 ffa0 	bl	80052dc <UART_Start_Receive_IT>
 800439c:	4603      	mov	r3, r0
 800439e:	e000      	b.n	80043a2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043a0:	2302      	movs	r3, #2
  }
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3728      	adds	r7, #40	@ 0x28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40008000 	.word	0x40008000

080043b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b0ba      	sub	sp, #232	@ 0xe8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80043d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80043da:	f640 030f 	movw	r3, #2063	@ 0x80f
 80043de:	4013      	ands	r3, r2
 80043e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80043e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d115      	bne.n	8004418 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80043ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00f      	beq.n	8004418 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d009      	beq.n	8004418 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 82ca 	beq.w	80049a2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	4798      	blx	r3
      }
      return;
 8004416:	e2c4      	b.n	80049a2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004418:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8117 	beq.w	8004650 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800442e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004432:	4b85      	ldr	r3, [pc, #532]	@ (8004648 <HAL_UART_IRQHandler+0x298>)
 8004434:	4013      	ands	r3, r2
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 810a 	beq.w	8004650 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800443c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d011      	beq.n	800446c <HAL_UART_IRQHandler+0xbc>
 8004448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800444c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00b      	beq.n	800446c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2201      	movs	r2, #1
 800445a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004462:	f043 0201 	orr.w	r2, r3, #1
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800446c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d011      	beq.n	800449c <HAL_UART_IRQHandler+0xec>
 8004478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00b      	beq.n	800449c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2202      	movs	r2, #2
 800448a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004492:	f043 0204 	orr.w	r2, r3, #4
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800449c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d011      	beq.n	80044cc <HAL_UART_IRQHandler+0x11c>
 80044a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00b      	beq.n	80044cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2204      	movs	r2, #4
 80044ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044c2:	f043 0202 	orr.w	r2, r3, #2
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d0:	f003 0308 	and.w	r3, r3, #8
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d017      	beq.n	8004508 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044dc:	f003 0320 	and.w	r3, r3, #32
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d105      	bne.n	80044f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80044e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00b      	beq.n	8004508 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2208      	movs	r2, #8
 80044f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044fe:	f043 0208 	orr.w	r2, r3, #8
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800450c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004510:	2b00      	cmp	r3, #0
 8004512:	d012      	beq.n	800453a <HAL_UART_IRQHandler+0x18a>
 8004514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004518:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00c      	beq.n	800453a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004528:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004530:	f043 0220 	orr.w	r2, r3, #32
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8230 	beq.w	80049a6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800454a:	f003 0320 	and.w	r3, r3, #32
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00d      	beq.n	800456e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	d007      	beq.n	800456e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004574:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004582:	2b40      	cmp	r3, #64	@ 0x40
 8004584:	d005      	beq.n	8004592 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800458a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800458e:	2b00      	cmp	r3, #0
 8004590:	d04f      	beq.n	8004632 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 ff68 	bl	8005468 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a2:	2b40      	cmp	r3, #64	@ 0x40
 80045a4:	d141      	bne.n	800462a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3308      	adds	r3, #8
 80045ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045b4:	e853 3f00 	ldrex	r3, [r3]
 80045b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80045bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3308      	adds	r3, #8
 80045ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80045d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80045d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80045de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80045ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1d9      	bne.n	80045a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d013      	beq.n	8004622 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045fe:	4a13      	ldr	r2, [pc, #76]	@ (800464c <HAL_UART_IRQHandler+0x29c>)
 8004600:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004606:	4618      	mov	r0, r3
 8004608:	f7fc ffad 	bl	8001566 <HAL_DMA_Abort_IT>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d017      	beq.n	8004642 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800461c:	4610      	mov	r0, r2
 800461e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004620:	e00f      	b.n	8004642 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f9d4 	bl	80049d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004628:	e00b      	b.n	8004642 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f9d0 	bl	80049d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004630:	e007      	b.n	8004642 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f9cc 	bl	80049d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004640:	e1b1      	b.n	80049a6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004642:	bf00      	nop
    return;
 8004644:	e1af      	b.n	80049a6 <HAL_UART_IRQHandler+0x5f6>
 8004646:	bf00      	nop
 8004648:	04000120 	.word	0x04000120
 800464c:	08005531 	.word	0x08005531

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004654:	2b01      	cmp	r3, #1
 8004656:	f040 816a 	bne.w	800492e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800465a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8163 	beq.w	800492e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800466c:	f003 0310 	and.w	r3, r3, #16
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 815c 	beq.w	800492e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2210      	movs	r2, #16
 800467c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004688:	2b40      	cmp	r3, #64	@ 0x40
 800468a:	f040 80d4 	bne.w	8004836 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800469a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80ad 	beq.w	80047fe <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80046aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046ae:	429a      	cmp	r2, r3
 80046b0:	f080 80a5 	bcs.w	80047fe <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f040 8086 	bne.w	80047dc <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046dc:	e853 3f00 	ldrex	r3, [r3]
 80046e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80046e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80046fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80046fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004706:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004712:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1da      	bne.n	80046d0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3308      	adds	r3, #8
 8004720:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004722:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004724:	e853 3f00 	ldrex	r3, [r3]
 8004728:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800472a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	3308      	adds	r3, #8
 800473a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800473e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004742:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004746:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004750:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e1      	bne.n	800471a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3308      	adds	r3, #8
 800475c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004766:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800476c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	3308      	adds	r3, #8
 8004776:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800477a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800477c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004780:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004788:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e3      	bne.n	8004756 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80047aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047ac:	f023 0310 	bic.w	r3, r3, #16
 80047b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80047be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80047cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e4      	bne.n	800479c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fc fe87 	bl	80014ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	4619      	mov	r1, r3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f8f4 	bl	80049e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80047fc:	e0d5      	b.n	80049aa <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004804:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004808:	429a      	cmp	r2, r3
 800480a:	f040 80ce 	bne.w	80049aa <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	2b20      	cmp	r3, #32
 800481c:	f040 80c5 	bne.w	80049aa <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800482c:	4619      	mov	r1, r3
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f8d8 	bl	80049e4 <HAL_UARTEx_RxEventCallback>
      return;
 8004834:	e0b9      	b.n	80049aa <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004842:	b29b      	uxth	r3, r3
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 80ab 	beq.w	80049ae <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004858:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 80a6 	beq.w	80049ae <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004872:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004876:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004884:	647b      	str	r3, [r7, #68]	@ 0x44
 8004886:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800488a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e4      	bne.n	8004862 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3308      	adds	r3, #8
 800489e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	623b      	str	r3, [r7, #32]
   return(result);
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3308      	adds	r3, #8
 80048b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80048bc:	633a      	str	r2, [r7, #48]	@ 0x30
 80048be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e3      	bne.n	8004898 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f023 0310 	bic.w	r3, r3, #16
 80048f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	461a      	mov	r2, r3
 8004902:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004906:	61fb      	str	r3, [r7, #28]
 8004908:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	69b9      	ldr	r1, [r7, #24]
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	617b      	str	r3, [r7, #20]
   return(result);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e4      	bne.n	80048e4 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2202      	movs	r2, #2
 800491e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004924:	4619      	mov	r1, r3
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f85c 	bl	80049e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800492c:	e03f      	b.n	80049ae <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800492e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004932:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00e      	beq.n	8004958 <HAL_UART_IRQHandler+0x5a8>
 800493a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800493e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d008      	beq.n	8004958 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800494e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 ffe9 	bl	8005928 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004956:	e02d      	b.n	80049b4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800495c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00e      	beq.n	8004982 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01c      	beq.n	80049b2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
    }
    return;
 8004980:	e017      	b.n	80049b2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	d012      	beq.n	80049b4 <HAL_UART_IRQHandler+0x604>
 800498e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00c      	beq.n	80049b4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fdde 	bl	800555c <UART_EndTransmit_IT>
    return;
 80049a0:	e008      	b.n	80049b4 <HAL_UART_IRQHandler+0x604>
      return;
 80049a2:	bf00      	nop
 80049a4:	e006      	b.n	80049b4 <HAL_UART_IRQHandler+0x604>
    return;
 80049a6:	bf00      	nop
 80049a8:	e004      	b.n	80049b4 <HAL_UART_IRQHandler+0x604>
      return;
 80049aa:	bf00      	nop
 80049ac:	e002      	b.n	80049b4 <HAL_UART_IRQHandler+0x604>
      return;
 80049ae:	bf00      	nop
 80049b0:	e000      	b.n	80049b4 <HAL_UART_IRQHandler+0x604>
    return;
 80049b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80049b4:	37e8      	adds	r7, #232	@ 0xe8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop

080049bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a00:	b08a      	sub	sp, #40	@ 0x28
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	431a      	orrs	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4ba4      	ldr	r3, [pc, #656]	@ (8004cbc <UART_SetConfig+0x2c0>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	6812      	ldr	r2, [r2, #0]
 8004a32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a34:	430b      	orrs	r3, r1
 8004a36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a99      	ldr	r2, [pc, #612]	@ (8004cc0 <UART_SetConfig+0x2c4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d004      	beq.n	8004a68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a64:	4313      	orrs	r3, r2
 8004a66:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a90      	ldr	r2, [pc, #576]	@ (8004cc4 <UART_SetConfig+0x2c8>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d126      	bne.n	8004ad4 <UART_SetConfig+0xd8>
 8004a86:	4b90      	ldr	r3, [pc, #576]	@ (8004cc8 <UART_SetConfig+0x2cc>)
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d81b      	bhi.n	8004acc <UART_SetConfig+0xd0>
 8004a94:	a201      	add	r2, pc, #4	@ (adr r2, 8004a9c <UART_SetConfig+0xa0>)
 8004a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9a:	bf00      	nop
 8004a9c:	08004aad 	.word	0x08004aad
 8004aa0:	08004abd 	.word	0x08004abd
 8004aa4:	08004ab5 	.word	0x08004ab5
 8004aa8:	08004ac5 	.word	0x08004ac5
 8004aac:	2301      	movs	r3, #1
 8004aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ab2:	e116      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aba:	e112      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004abc:	2304      	movs	r3, #4
 8004abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac2:	e10e      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aca:	e10a      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004acc:	2310      	movs	r3, #16
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad2:	e106      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a7c      	ldr	r2, [pc, #496]	@ (8004ccc <UART_SetConfig+0x2d0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d138      	bne.n	8004b50 <UART_SetConfig+0x154>
 8004ade:	4b7a      	ldr	r3, [pc, #488]	@ (8004cc8 <UART_SetConfig+0x2cc>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae4:	f003 030c 	and.w	r3, r3, #12
 8004ae8:	2b0c      	cmp	r3, #12
 8004aea:	d82d      	bhi.n	8004b48 <UART_SetConfig+0x14c>
 8004aec:	a201      	add	r2, pc, #4	@ (adr r2, 8004af4 <UART_SetConfig+0xf8>)
 8004aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af2:	bf00      	nop
 8004af4:	08004b29 	.word	0x08004b29
 8004af8:	08004b49 	.word	0x08004b49
 8004afc:	08004b49 	.word	0x08004b49
 8004b00:	08004b49 	.word	0x08004b49
 8004b04:	08004b39 	.word	0x08004b39
 8004b08:	08004b49 	.word	0x08004b49
 8004b0c:	08004b49 	.word	0x08004b49
 8004b10:	08004b49 	.word	0x08004b49
 8004b14:	08004b31 	.word	0x08004b31
 8004b18:	08004b49 	.word	0x08004b49
 8004b1c:	08004b49 	.word	0x08004b49
 8004b20:	08004b49 	.word	0x08004b49
 8004b24:	08004b41 	.word	0x08004b41
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b2e:	e0d8      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004b30:	2302      	movs	r3, #2
 8004b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b36:	e0d4      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004b38:	2304      	movs	r3, #4
 8004b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b3e:	e0d0      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004b40:	2308      	movs	r3, #8
 8004b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b46:	e0cc      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004b48:	2310      	movs	r3, #16
 8004b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b4e:	e0c8      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a5e      	ldr	r2, [pc, #376]	@ (8004cd0 <UART_SetConfig+0x2d4>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d125      	bne.n	8004ba6 <UART_SetConfig+0x1aa>
 8004b5a:	4b5b      	ldr	r3, [pc, #364]	@ (8004cc8 <UART_SetConfig+0x2cc>)
 8004b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b64:	2b30      	cmp	r3, #48	@ 0x30
 8004b66:	d016      	beq.n	8004b96 <UART_SetConfig+0x19a>
 8004b68:	2b30      	cmp	r3, #48	@ 0x30
 8004b6a:	d818      	bhi.n	8004b9e <UART_SetConfig+0x1a2>
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d00a      	beq.n	8004b86 <UART_SetConfig+0x18a>
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	d814      	bhi.n	8004b9e <UART_SetConfig+0x1a2>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <UART_SetConfig+0x182>
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d008      	beq.n	8004b8e <UART_SetConfig+0x192>
 8004b7c:	e00f      	b.n	8004b9e <UART_SetConfig+0x1a2>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b84:	e0ad      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004b86:	2302      	movs	r3, #2
 8004b88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b8c:	e0a9      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004b8e:	2304      	movs	r3, #4
 8004b90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b94:	e0a5      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004b96:	2308      	movs	r3, #8
 8004b98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b9c:	e0a1      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004b9e:	2310      	movs	r3, #16
 8004ba0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ba4:	e09d      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a4a      	ldr	r2, [pc, #296]	@ (8004cd4 <UART_SetConfig+0x2d8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d125      	bne.n	8004bfc <UART_SetConfig+0x200>
 8004bb0:	4b45      	ldr	r3, [pc, #276]	@ (8004cc8 <UART_SetConfig+0x2cc>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004bba:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bbc:	d016      	beq.n	8004bec <UART_SetConfig+0x1f0>
 8004bbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bc0:	d818      	bhi.n	8004bf4 <UART_SetConfig+0x1f8>
 8004bc2:	2b80      	cmp	r3, #128	@ 0x80
 8004bc4:	d00a      	beq.n	8004bdc <UART_SetConfig+0x1e0>
 8004bc6:	2b80      	cmp	r3, #128	@ 0x80
 8004bc8:	d814      	bhi.n	8004bf4 <UART_SetConfig+0x1f8>
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <UART_SetConfig+0x1d8>
 8004bce:	2b40      	cmp	r3, #64	@ 0x40
 8004bd0:	d008      	beq.n	8004be4 <UART_SetConfig+0x1e8>
 8004bd2:	e00f      	b.n	8004bf4 <UART_SetConfig+0x1f8>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bda:	e082      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004be2:	e07e      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004be4:	2304      	movs	r3, #4
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bea:	e07a      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004bec:	2308      	movs	r3, #8
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bf2:	e076      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bfa:	e072      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a35      	ldr	r2, [pc, #212]	@ (8004cd8 <UART_SetConfig+0x2dc>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d12a      	bne.n	8004c5c <UART_SetConfig+0x260>
 8004c06:	4b30      	ldr	r3, [pc, #192]	@ (8004cc8 <UART_SetConfig+0x2cc>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c14:	d01a      	beq.n	8004c4c <UART_SetConfig+0x250>
 8004c16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c1a:	d81b      	bhi.n	8004c54 <UART_SetConfig+0x258>
 8004c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c20:	d00c      	beq.n	8004c3c <UART_SetConfig+0x240>
 8004c22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c26:	d815      	bhi.n	8004c54 <UART_SetConfig+0x258>
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <UART_SetConfig+0x238>
 8004c2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c30:	d008      	beq.n	8004c44 <UART_SetConfig+0x248>
 8004c32:	e00f      	b.n	8004c54 <UART_SetConfig+0x258>
 8004c34:	2300      	movs	r3, #0
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c3a:	e052      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c42:	e04e      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004c44:	2304      	movs	r3, #4
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c4a:	e04a      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004c4c:	2308      	movs	r3, #8
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c52:	e046      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004c54:	2310      	movs	r3, #16
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c5a:	e042      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a17      	ldr	r2, [pc, #92]	@ (8004cc0 <UART_SetConfig+0x2c4>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d13a      	bne.n	8004cdc <UART_SetConfig+0x2e0>
 8004c66:	4b18      	ldr	r3, [pc, #96]	@ (8004cc8 <UART_SetConfig+0x2cc>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c74:	d01a      	beq.n	8004cac <UART_SetConfig+0x2b0>
 8004c76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c7a:	d81b      	bhi.n	8004cb4 <UART_SetConfig+0x2b8>
 8004c7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c80:	d00c      	beq.n	8004c9c <UART_SetConfig+0x2a0>
 8004c82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c86:	d815      	bhi.n	8004cb4 <UART_SetConfig+0x2b8>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <UART_SetConfig+0x298>
 8004c8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c90:	d008      	beq.n	8004ca4 <UART_SetConfig+0x2a8>
 8004c92:	e00f      	b.n	8004cb4 <UART_SetConfig+0x2b8>
 8004c94:	2300      	movs	r3, #0
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c9a:	e022      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ca2:	e01e      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004caa:	e01a      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004cac:	2308      	movs	r3, #8
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cb2:	e016      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004cb4:	2310      	movs	r3, #16
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cba:	e012      	b.n	8004ce2 <UART_SetConfig+0x2e6>
 8004cbc:	efff69f3 	.word	0xefff69f3
 8004cc0:	40008000 	.word	0x40008000
 8004cc4:	40013800 	.word	0x40013800
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	40004400 	.word	0x40004400
 8004cd0:	40004800 	.word	0x40004800
 8004cd4:	40004c00 	.word	0x40004c00
 8004cd8:	40005000 	.word	0x40005000
 8004cdc:	2310      	movs	r3, #16
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a9f      	ldr	r2, [pc, #636]	@ (8004f64 <UART_SetConfig+0x568>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d17a      	bne.n	8004de2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d824      	bhi.n	8004d3e <UART_SetConfig+0x342>
 8004cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cfc <UART_SetConfig+0x300>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d21 	.word	0x08004d21
 8004d00:	08004d3f 	.word	0x08004d3f
 8004d04:	08004d29 	.word	0x08004d29
 8004d08:	08004d3f 	.word	0x08004d3f
 8004d0c:	08004d2f 	.word	0x08004d2f
 8004d10:	08004d3f 	.word	0x08004d3f
 8004d14:	08004d3f 	.word	0x08004d3f
 8004d18:	08004d3f 	.word	0x08004d3f
 8004d1c:	08004d37 	.word	0x08004d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d20:	f7fd fbfc 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8004d24:	61f8      	str	r0, [r7, #28]
        break;
 8004d26:	e010      	b.n	8004d4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d28:	4b8f      	ldr	r3, [pc, #572]	@ (8004f68 <UART_SetConfig+0x56c>)
 8004d2a:	61fb      	str	r3, [r7, #28]
        break;
 8004d2c:	e00d      	b.n	8004d4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d2e:	f7fd fb5d 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8004d32:	61f8      	str	r0, [r7, #28]
        break;
 8004d34:	e009      	b.n	8004d4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d3a:	61fb      	str	r3, [r7, #28]
        break;
 8004d3c:	e005      	b.n	8004d4a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 80fb 	beq.w	8004f48 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	4413      	add	r3, r2
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d305      	bcc.n	8004d6e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d68:	69fa      	ldr	r2, [r7, #28]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d903      	bls.n	8004d76 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d74:	e0e8      	b.n	8004f48 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	461c      	mov	r4, r3
 8004d7c:	4615      	mov	r5, r2
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	f04f 0300 	mov.w	r3, #0
 8004d86:	022b      	lsls	r3, r5, #8
 8004d88:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d8c:	0222      	lsls	r2, r4, #8
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	6849      	ldr	r1, [r1, #4]
 8004d92:	0849      	lsrs	r1, r1, #1
 8004d94:	2000      	movs	r0, #0
 8004d96:	4688      	mov	r8, r1
 8004d98:	4681      	mov	r9, r0
 8004d9a:	eb12 0a08 	adds.w	sl, r2, r8
 8004d9e:	eb43 0b09 	adc.w	fp, r3, r9
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	603b      	str	r3, [r7, #0]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004db0:	4650      	mov	r0, sl
 8004db2:	4659      	mov	r1, fp
 8004db4:	f7fb fa08 	bl	80001c8 <__aeabi_uldivmod>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dc6:	d308      	bcc.n	8004dda <UART_SetConfig+0x3de>
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dce:	d204      	bcs.n	8004dda <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	60da      	str	r2, [r3, #12]
 8004dd8:	e0b6      	b.n	8004f48 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004de0:	e0b2      	b.n	8004f48 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dea:	d15e      	bne.n	8004eaa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004dec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d828      	bhi.n	8004e46 <UART_SetConfig+0x44a>
 8004df4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dfc <UART_SetConfig+0x400>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e21 	.word	0x08004e21
 8004e00:	08004e29 	.word	0x08004e29
 8004e04:	08004e31 	.word	0x08004e31
 8004e08:	08004e47 	.word	0x08004e47
 8004e0c:	08004e37 	.word	0x08004e37
 8004e10:	08004e47 	.word	0x08004e47
 8004e14:	08004e47 	.word	0x08004e47
 8004e18:	08004e47 	.word	0x08004e47
 8004e1c:	08004e3f 	.word	0x08004e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e20:	f7fd fb7c 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8004e24:	61f8      	str	r0, [r7, #28]
        break;
 8004e26:	e014      	b.n	8004e52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e28:	f7fd fb8e 	bl	8002548 <HAL_RCC_GetPCLK2Freq>
 8004e2c:	61f8      	str	r0, [r7, #28]
        break;
 8004e2e:	e010      	b.n	8004e52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e30:	4b4d      	ldr	r3, [pc, #308]	@ (8004f68 <UART_SetConfig+0x56c>)
 8004e32:	61fb      	str	r3, [r7, #28]
        break;
 8004e34:	e00d      	b.n	8004e52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e36:	f7fd fad9 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8004e3a:	61f8      	str	r0, [r7, #28]
        break;
 8004e3c:	e009      	b.n	8004e52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e42:	61fb      	str	r3, [r7, #28]
        break;
 8004e44:	e005      	b.n	8004e52 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d077      	beq.n	8004f48 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	005a      	lsls	r2, r3, #1
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	085b      	lsrs	r3, r3, #1
 8004e62:	441a      	add	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b0f      	cmp	r3, #15
 8004e72:	d916      	bls.n	8004ea2 <UART_SetConfig+0x4a6>
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e7a:	d212      	bcs.n	8004ea2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	f023 030f 	bic.w	r3, r3, #15
 8004e84:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	085b      	lsrs	r3, r3, #1
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	8afb      	ldrh	r3, [r7, #22]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	8afa      	ldrh	r2, [r7, #22]
 8004e9e:	60da      	str	r2, [r3, #12]
 8004ea0:	e052      	b.n	8004f48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ea8:	e04e      	b.n	8004f48 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eaa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d827      	bhi.n	8004f02 <UART_SetConfig+0x506>
 8004eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb8 <UART_SetConfig+0x4bc>)
 8004eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb8:	08004edd 	.word	0x08004edd
 8004ebc:	08004ee5 	.word	0x08004ee5
 8004ec0:	08004eed 	.word	0x08004eed
 8004ec4:	08004f03 	.word	0x08004f03
 8004ec8:	08004ef3 	.word	0x08004ef3
 8004ecc:	08004f03 	.word	0x08004f03
 8004ed0:	08004f03 	.word	0x08004f03
 8004ed4:	08004f03 	.word	0x08004f03
 8004ed8:	08004efb 	.word	0x08004efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004edc:	f7fd fb1e 	bl	800251c <HAL_RCC_GetPCLK1Freq>
 8004ee0:	61f8      	str	r0, [r7, #28]
        break;
 8004ee2:	e014      	b.n	8004f0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ee4:	f7fd fb30 	bl	8002548 <HAL_RCC_GetPCLK2Freq>
 8004ee8:	61f8      	str	r0, [r7, #28]
        break;
 8004eea:	e010      	b.n	8004f0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eec:	4b1e      	ldr	r3, [pc, #120]	@ (8004f68 <UART_SetConfig+0x56c>)
 8004eee:	61fb      	str	r3, [r7, #28]
        break;
 8004ef0:	e00d      	b.n	8004f0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ef2:	f7fd fa7b 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8004ef6:	61f8      	str	r0, [r7, #28]
        break;
 8004ef8:	e009      	b.n	8004f0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004efe:	61fb      	str	r3, [r7, #28]
        break;
 8004f00:	e005      	b.n	8004f0e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f0c:	bf00      	nop
    }

    if (pclk != 0U)
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d019      	beq.n	8004f48 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	085a      	lsrs	r2, r3, #1
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	441a      	add	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b0f      	cmp	r3, #15
 8004f2c:	d909      	bls.n	8004f42 <UART_SetConfig+0x546>
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f34:	d205      	bcs.n	8004f42 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60da      	str	r2, [r3, #12]
 8004f40:	e002      	b.n	8004f48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3728      	adds	r7, #40	@ 0x28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f62:	bf00      	nop
 8004f64:	40008000 	.word	0x40008000
 8004f68:	00f42400 	.word	0x00f42400

08004f6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00a      	beq.n	8004f96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00a      	beq.n	8004fb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01a      	beq.n	8005082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800506a:	d10a      	bne.n	8005082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	605a      	str	r2, [r3, #4]
  }
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b098      	sub	sp, #96	@ 0x60
 80050b4:	af02      	add	r7, sp, #8
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050c0:	f7fc f8d2 	bl	8001268 <HAL_GetTick>
 80050c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d12e      	bne.n	8005132 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050dc:	2200      	movs	r2, #0
 80050de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f88c 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d021      	beq.n	8005132 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005102:	653b      	str	r3, [r7, #80]	@ 0x50
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800510c:	647b      	str	r3, [r7, #68]	@ 0x44
 800510e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005112:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800511a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e6      	bne.n	80050ee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2220      	movs	r2, #32
 8005124:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e062      	b.n	80051f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b04      	cmp	r3, #4
 800513e:	d149      	bne.n	80051d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005140:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005148:	2200      	movs	r2, #0
 800514a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f856 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d03c      	beq.n	80051d4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	623b      	str	r3, [r7, #32]
   return(result);
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800516e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005178:	633b      	str	r3, [r7, #48]	@ 0x30
 800517a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800517e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e6      	bne.n	800515a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3308      	adds	r3, #8
 8005192:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	60fb      	str	r3, [r7, #12]
   return(result);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0301 	bic.w	r3, r3, #1
 80051a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3308      	adds	r3, #8
 80051aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051ac:	61fa      	str	r2, [r7, #28]
 80051ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	69b9      	ldr	r1, [r7, #24]
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	617b      	str	r3, [r7, #20]
   return(result);
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e5      	bne.n	800518c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e011      	b.n	80051f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3758      	adds	r7, #88	@ 0x58
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	4613      	mov	r3, r2
 800520e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005210:	e04f      	b.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005218:	d04b      	beq.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521a:	f7fc f825 	bl	8001268 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	429a      	cmp	r2, r3
 8005228:	d302      	bcc.n	8005230 <UART_WaitOnFlagUntilTimeout+0x30>
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e04e      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	d037      	beq.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b80      	cmp	r3, #128	@ 0x80
 8005246:	d034      	beq.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b40      	cmp	r3, #64	@ 0x40
 800524c:	d031      	beq.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69db      	ldr	r3, [r3, #28]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b08      	cmp	r3, #8
 800525a:	d110      	bne.n	800527e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2208      	movs	r2, #8
 8005262:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 f8ff 	bl	8005468 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2208      	movs	r2, #8
 800526e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e029      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800528c:	d111      	bne.n	80052b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005296:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f8e5 	bl	8005468 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2220      	movs	r2, #32
 80052a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e00f      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69da      	ldr	r2, [r3, #28]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4013      	ands	r3, r2
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	429a      	cmp	r2, r3
 80052c0:	bf0c      	ite	eq
 80052c2:	2301      	moveq	r3, #1
 80052c4:	2300      	movne	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d0a0      	beq.n	8005212 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052dc:	b480      	push	{r7}
 80052de:	b097      	sub	sp, #92	@ 0x5c
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	4613      	mov	r3, r2
 80052e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	88fa      	ldrh	r2, [r7, #6]
 80052f4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	88fa      	ldrh	r2, [r7, #6]
 80052fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800530e:	d10e      	bne.n	800532e <UART_Start_Receive_IT+0x52>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d105      	bne.n	8005324 <UART_Start_Receive_IT+0x48>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800531e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005322:	e02d      	b.n	8005380 <UART_Start_Receive_IT+0xa4>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	22ff      	movs	r2, #255	@ 0xff
 8005328:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800532c:	e028      	b.n	8005380 <UART_Start_Receive_IT+0xa4>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d10d      	bne.n	8005352 <UART_Start_Receive_IT+0x76>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d104      	bne.n	8005348 <UART_Start_Receive_IT+0x6c>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	22ff      	movs	r2, #255	@ 0xff
 8005342:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005346:	e01b      	b.n	8005380 <UART_Start_Receive_IT+0xa4>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	227f      	movs	r2, #127	@ 0x7f
 800534c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005350:	e016      	b.n	8005380 <UART_Start_Receive_IT+0xa4>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800535a:	d10d      	bne.n	8005378 <UART_Start_Receive_IT+0x9c>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d104      	bne.n	800536e <UART_Start_Receive_IT+0x92>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	227f      	movs	r2, #127	@ 0x7f
 8005368:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800536c:	e008      	b.n	8005380 <UART_Start_Receive_IT+0xa4>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	223f      	movs	r2, #63	@ 0x3f
 8005372:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005376:	e003      	b.n	8005380 <UART_Start_Receive_IT+0xa4>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2222      	movs	r2, #34	@ 0x22
 800538c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3308      	adds	r3, #8
 8005396:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3308      	adds	r3, #8
 80053ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80053b0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80053b2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80053b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80053be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e5      	bne.n	8005390 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053cc:	d107      	bne.n	80053de <UART_Start_Receive_IT+0x102>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d103      	bne.n	80053de <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4a21      	ldr	r2, [pc, #132]	@ (8005460 <UART_Start_Receive_IT+0x184>)
 80053da:	669a      	str	r2, [r3, #104]	@ 0x68
 80053dc:	e002      	b.n	80053e4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4a20      	ldr	r2, [pc, #128]	@ (8005464 <UART_Start_Receive_IT+0x188>)
 80053e2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d019      	beq.n	8005420 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005400:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800540a:	637b      	str	r3, [r7, #52]	@ 0x34
 800540c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005410:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e6      	bne.n	80053ec <UART_Start_Receive_IT+0x110>
 800541e:	e018      	b.n	8005452 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	613b      	str	r3, [r7, #16]
   return(result);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f043 0320 	orr.w	r3, r3, #32
 8005434:	653b      	str	r3, [r7, #80]	@ 0x50
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800543e:	623b      	str	r3, [r7, #32]
 8005440:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	69f9      	ldr	r1, [r7, #28]
 8005444:	6a3a      	ldr	r2, [r7, #32]
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	61bb      	str	r3, [r7, #24]
   return(result);
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e6      	bne.n	8005420 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	375c      	adds	r7, #92	@ 0x5c
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr
 8005460:	0800576d 	.word	0x0800576d
 8005464:	080055b1 	.word	0x080055b1

08005468 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005468:	b480      	push	{r7}
 800546a:	b095      	sub	sp, #84	@ 0x54
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800547e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005480:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005484:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	461a      	mov	r2, r3
 800548c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800548e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005490:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005492:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005494:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005496:	e841 2300 	strex	r3, r2, [r1]
 800549a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800549c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1e6      	bne.n	8005470 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3308      	adds	r3, #8
 80054a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	e853 3f00 	ldrex	r3, [r3]
 80054b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	f023 0301 	bic.w	r3, r3, #1
 80054b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3308      	adds	r3, #8
 80054c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054ca:	e841 2300 	strex	r3, r2, [r1]
 80054ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1e5      	bne.n	80054a2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d118      	bne.n	8005510 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	e853 3f00 	ldrex	r3, [r3]
 80054ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f023 0310 	bic.w	r3, r3, #16
 80054f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005500:	6979      	ldr	r1, [r7, #20]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	e841 2300 	strex	r3, r2, [r1]
 8005508:	613b      	str	r3, [r7, #16]
   return(result);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1e6      	bne.n	80054de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2220      	movs	r2, #32
 8005514:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005524:	bf00      	nop
 8005526:	3754      	adds	r7, #84	@ 0x54
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f7ff fa3e 	bl	80049d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005554:	bf00      	nop
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b088      	sub	sp, #32
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	60bb      	str	r3, [r7, #8]
   return(result);
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	61bb      	str	r3, [r7, #24]
 8005584:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6979      	ldr	r1, [r7, #20]
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	613b      	str	r3, [r7, #16]
   return(result);
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e6      	bne.n	8005564 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff fa0a 	bl	80049bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055a8:	bf00      	nop
 80055aa:	3720      	adds	r7, #32
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b09c      	sub	sp, #112	@ 0x70
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80055be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055c8:	2b22      	cmp	r3, #34	@ 0x22
 80055ca:	f040 80be 	bne.w	800574a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80055d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80055d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80055dc:	b2d9      	uxtb	r1, r3
 80055de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e8:	400a      	ands	r2, r1
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29a      	uxth	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	f040 80a3 	bne.w	800575e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005628:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800562c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005636:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005638:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800563c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800563e:	e841 2300 	strex	r3, r2, [r1]
 8005642:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1e6      	bne.n	8005618 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3308      	adds	r3, #8
 8005650:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800565a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565c:	f023 0301 	bic.w	r3, r3, #1
 8005660:	667b      	str	r3, [r7, #100]	@ 0x64
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	3308      	adds	r3, #8
 8005668:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800566a:	647a      	str	r2, [r7, #68]	@ 0x44
 800566c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005670:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e5      	bne.n	800564a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2220      	movs	r2, #32
 8005682:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a34      	ldr	r2, [pc, #208]	@ (8005768 <UART_RxISR_8BIT+0x1b8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d01f      	beq.n	80056dc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d018      	beq.n	80056dc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b2:	e853 3f00 	ldrex	r3, [r3]
 80056b6:	623b      	str	r3, [r7, #32]
   return(result);
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056be:	663b      	str	r3, [r7, #96]	@ 0x60
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	461a      	mov	r2, r3
 80056c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80056ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e6      	bne.n	80056aa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d12e      	bne.n	8005742 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	e853 3f00 	ldrex	r3, [r3]
 80056f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0310 	bic.w	r3, r3, #16
 80056fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	461a      	mov	r2, r3
 8005706:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005708:	61fb      	str	r3, [r7, #28]
 800570a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570c:	69b9      	ldr	r1, [r7, #24]
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	e841 2300 	strex	r3, r2, [r1]
 8005714:	617b      	str	r3, [r7, #20]
   return(result);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e6      	bne.n	80056ea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	f003 0310 	and.w	r3, r3, #16
 8005726:	2b10      	cmp	r3, #16
 8005728:	d103      	bne.n	8005732 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2210      	movs	r2, #16
 8005730:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005738:	4619      	mov	r1, r3
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff f952 	bl	80049e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005740:	e00d      	b.n	800575e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fb fb12 	bl	8000d6c <HAL_UART_RxCpltCallback>
}
 8005748:	e009      	b.n	800575e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	8b1b      	ldrh	r3, [r3, #24]
 8005750:	b29a      	uxth	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0208 	orr.w	r2, r2, #8
 800575a:	b292      	uxth	r2, r2
 800575c:	831a      	strh	r2, [r3, #24]
}
 800575e:	bf00      	nop
 8005760:	3770      	adds	r7, #112	@ 0x70
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40008000 	.word	0x40008000

0800576c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b09c      	sub	sp, #112	@ 0x70
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800577a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005784:	2b22      	cmp	r3, #34	@ 0x22
 8005786:	f040 80be 	bne.w	8005906 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005790:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005798:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800579a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800579e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80057a2:	4013      	ands	r3, r2
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ae:	1c9a      	adds	r2, r3, #2
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f040 80a3 	bne.w	800591a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80057e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80057f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80057f4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80057f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e6      	bne.n	80057d4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3308      	adds	r3, #8
 800580c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005818:	f023 0301 	bic.w	r3, r3, #1
 800581c:	663b      	str	r3, [r7, #96]	@ 0x60
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3308      	adds	r3, #8
 8005824:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005826:	643a      	str	r2, [r7, #64]	@ 0x40
 8005828:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800582c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e5      	bne.n	8005806 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2220      	movs	r2, #32
 800583e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a34      	ldr	r2, [pc, #208]	@ (8005924 <UART_RxISR_16BIT+0x1b8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d01f      	beq.n	8005898 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d018      	beq.n	8005898 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	61fb      	str	r3, [r7, #28]
   return(result);
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800587a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	461a      	mov	r2, r3
 8005882:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005886:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800588a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800588c:	e841 2300 	strex	r3, r2, [r1]
 8005890:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e6      	bne.n	8005866 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800589c:	2b01      	cmp	r3, #1
 800589e:	d12e      	bne.n	80058fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	e853 3f00 	ldrex	r3, [r3]
 80058b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f023 0310 	bic.w	r3, r3, #16
 80058ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058c4:	61bb      	str	r3, [r7, #24]
 80058c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c8:	6979      	ldr	r1, [r7, #20]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	e841 2300 	strex	r3, r2, [r1]
 80058d0:	613b      	str	r3, [r7, #16]
   return(result);
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e6      	bne.n	80058a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f003 0310 	and.w	r3, r3, #16
 80058e2:	2b10      	cmp	r3, #16
 80058e4:	d103      	bne.n	80058ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2210      	movs	r2, #16
 80058ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff f874 	bl	80049e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058fc:	e00d      	b.n	800591a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f7fb fa34 	bl	8000d6c <HAL_UART_RxCpltCallback>
}
 8005904:	e009      	b.n	800591a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	8b1b      	ldrh	r3, [r3, #24]
 800590c:	b29a      	uxth	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0208 	orr.w	r2, r2, #8
 8005916:	b292      	uxth	r2, r2
 8005918:	831a      	strh	r2, [r3, #24]
}
 800591a:	bf00      	nop
 800591c:	3770      	adds	r7, #112	@ 0x70
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	40008000 	.word	0x40008000

08005928 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <memset>:
 800593c:	4402      	add	r2, r0
 800593e:	4603      	mov	r3, r0
 8005940:	4293      	cmp	r3, r2
 8005942:	d100      	bne.n	8005946 <memset+0xa>
 8005944:	4770      	bx	lr
 8005946:	f803 1b01 	strb.w	r1, [r3], #1
 800594a:	e7f9      	b.n	8005940 <memset+0x4>

0800594c <__libc_init_array>:
 800594c:	b570      	push	{r4, r5, r6, lr}
 800594e:	4d0d      	ldr	r5, [pc, #52]	@ (8005984 <__libc_init_array+0x38>)
 8005950:	4c0d      	ldr	r4, [pc, #52]	@ (8005988 <__libc_init_array+0x3c>)
 8005952:	1b64      	subs	r4, r4, r5
 8005954:	10a4      	asrs	r4, r4, #2
 8005956:	2600      	movs	r6, #0
 8005958:	42a6      	cmp	r6, r4
 800595a:	d109      	bne.n	8005970 <__libc_init_array+0x24>
 800595c:	4d0b      	ldr	r5, [pc, #44]	@ (800598c <__libc_init_array+0x40>)
 800595e:	4c0c      	ldr	r4, [pc, #48]	@ (8005990 <__libc_init_array+0x44>)
 8005960:	f000 f818 	bl	8005994 <_init>
 8005964:	1b64      	subs	r4, r4, r5
 8005966:	10a4      	asrs	r4, r4, #2
 8005968:	2600      	movs	r6, #0
 800596a:	42a6      	cmp	r6, r4
 800596c:	d105      	bne.n	800597a <__libc_init_array+0x2e>
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	f855 3b04 	ldr.w	r3, [r5], #4
 8005974:	4798      	blx	r3
 8005976:	3601      	adds	r6, #1
 8005978:	e7ee      	b.n	8005958 <__libc_init_array+0xc>
 800597a:	f855 3b04 	ldr.w	r3, [r5], #4
 800597e:	4798      	blx	r3
 8005980:	3601      	adds	r6, #1
 8005982:	e7f2      	b.n	800596a <__libc_init_array+0x1e>
 8005984:	080059fc 	.word	0x080059fc
 8005988:	080059fc 	.word	0x080059fc
 800598c:	080059fc 	.word	0x080059fc
 8005990:	08005a00 	.word	0x08005a00

08005994 <_init>:
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	bf00      	nop
 8005998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599a:	bc08      	pop	{r3}
 800599c:	469e      	mov	lr, r3
 800599e:	4770      	bx	lr

080059a0 <_fini>:
 80059a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a2:	bf00      	nop
 80059a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059a6:	bc08      	pop	{r3}
 80059a8:	469e      	mov	lr, r3
 80059aa:	4770      	bx	lr
