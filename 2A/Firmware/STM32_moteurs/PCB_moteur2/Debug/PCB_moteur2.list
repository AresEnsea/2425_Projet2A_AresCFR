
PCB_moteur2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006378  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006550  08006550  00007550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006590  08006590  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006590  08006590  00007590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006598  08006598  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006598  08006598  00007598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800659c  0800659c  0000759c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080065a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  2000000c  080065ac  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  080065ac  00008344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a53b  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032bb  00000000  00000000  00022577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  00025838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000124c  00000000  00000000  00026fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dbb  00000000  00000000  000281ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c6da  00000000  00000000  00050fa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111c1f  00000000  00000000  0006d681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017f2a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064dc  00000000  00000000  0017f2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001857c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006538 	.word	0x08006538

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006538 	.word	0x08006538

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800050e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2220      	movs	r2, #32
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f005 ffdd 	bl	80064e0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000526:	4b32      	ldr	r3, [pc, #200]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000528:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800052c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800052e:	4b30      	ldr	r3, [pc, #192]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000530:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000536:	4b2e      	ldr	r3, [pc, #184]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053c:	4b2c      	ldr	r3, [pc, #176]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000542:	4b2b      	ldr	r3, [pc, #172]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000548:	4b29      	ldr	r3, [pc, #164]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054e:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000550:	2204      	movs	r2, #4
 8000552:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000554:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000556:	2200      	movs	r2, #0
 8000558:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800055a:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800055c:	2200      	movs	r2, #0
 800055e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000560:	4b23      	ldr	r3, [pc, #140]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000562:	2201      	movs	r2, #1
 8000564:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800056e:	4b20      	ldr	r3, [pc, #128]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000574:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800057a:	4b1d      	ldr	r3, [pc, #116]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000582:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000588:	4b19      	ldr	r3, [pc, #100]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	4817      	ldr	r0, [pc, #92]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000592:	f001 f9b5 	bl	8001900 <HAL_ADC_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800059c:	f000 fa79 	bl	8000a92 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005a8:	4619      	mov	r1, r3
 80005aa:	4811      	ldr	r0, [pc, #68]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005ac:	f001 ffca 	bl	8002544 <HAL_ADCEx_MultiModeConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005b6:	f000 fa6c 	bl	8000a92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <MX_ADC1_Init+0xec>)
 80005bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005be:	2306      	movs	r3, #6
 80005c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c6:	237f      	movs	r3, #127	@ 0x7f
 80005c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ca:	2304      	movs	r3, #4
 80005cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4619      	mov	r1, r3
 80005d6:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005d8:	f001 fb4e 	bl	8001c78 <HAL_ADC_ConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80005e2:	f000 fa56 	bl	8000a92 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	3730      	adds	r7, #48	@ 0x30
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028
 80005f4:	14f00020 	.word	0x14f00020

080005f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b0a0      	sub	sp, #128	@ 0x80
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000610:	f107 0318 	add.w	r3, r7, #24
 8000614:	2254      	movs	r2, #84	@ 0x54
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f005 ff61 	bl	80064e0 <memset>
  if(adcHandle->Instance==ADC1)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000626:	d14d      	bne.n	80006c4 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000628:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800062c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800062e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000632:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0318 	add.w	r3, r7, #24
 8000638:	4618      	mov	r0, r3
 800063a:	f003 fa33 	bl	8003aa4 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000644:	f000 fa25 	bl	8000a92 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000648:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a1f      	ldr	r2, [pc, #124]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a19      	ldr	r2, [pc, #100]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000678:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 800067a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067c:	4a13      	ldr	r2, [pc, #76]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000684:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 8000686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000688:	f003 0302 	and.w	r3, r3, #2
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000690:	2302      	movs	r3, #2
 8000692:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000694:	2303      	movs	r3, #3
 8000696:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80006a0:	4619      	mov	r1, r3
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f002 f939 	bl	800291c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_V_Pin|BUS_Imes_Pin;
 80006aa:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80006ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b0:	2303      	movs	r3, #3
 80006b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80006bc:	4619      	mov	r1, r3
 80006be:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <HAL_ADC_MspInit+0xd8>)
 80006c0:	f002 f92c 	bl	800291c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006c4:	bf00      	nop
 80006c6:	3780      	adds	r7, #128	@ 0x80
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000400 	.word	0x48000400

080006d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	@ 0x28
 80006d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	4b50      	ldr	r3, [pc, #320]	@ (800082c <MX_GPIO_Init+0x158>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	4a4f      	ldr	r2, [pc, #316]	@ (800082c <MX_GPIO_Init+0x158>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f6:	4b4d      	ldr	r3, [pc, #308]	@ (800082c <MX_GPIO_Init+0x158>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000702:	4b4a      	ldr	r3, [pc, #296]	@ (800082c <MX_GPIO_Init+0x158>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	4a49      	ldr	r2, [pc, #292]	@ (800082c <MX_GPIO_Init+0x158>)
 8000708:	f043 0320 	orr.w	r3, r3, #32
 800070c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070e:	4b47      	ldr	r3, [pc, #284]	@ (800082c <MX_GPIO_Init+0x158>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	f003 0320 	and.w	r3, r3, #32
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b44      	ldr	r3, [pc, #272]	@ (800082c <MX_GPIO_Init+0x158>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	4a43      	ldr	r2, [pc, #268]	@ (800082c <MX_GPIO_Init+0x158>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000726:	4b41      	ldr	r3, [pc, #260]	@ (800082c <MX_GPIO_Init+0x158>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b3e      	ldr	r3, [pc, #248]	@ (800082c <MX_GPIO_Init+0x158>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a3d      	ldr	r2, [pc, #244]	@ (800082c <MX_GPIO_Init+0x158>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073e:	4b3b      	ldr	r3, [pc, #236]	@ (800082c <MX_GPIO_Init+0x158>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074a:	4b38      	ldr	r3, [pc, #224]	@ (800082c <MX_GPIO_Init+0x158>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a37      	ldr	r2, [pc, #220]	@ (800082c <MX_GPIO_Init+0x158>)
 8000750:	f043 0308 	orr.w	r3, r3, #8
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000756:	4b35      	ldr	r3, [pc, #212]	@ (800082c <MX_GPIO_Init+0x158>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	f003 0308 	and.w	r3, r3, #8
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_EN_Pin|USR_LED_3_Pin|USR_LED_2_Pin|USR_LED_1_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8000768:	4831      	ldr	r0, [pc, #196]	@ (8000830 <MX_GPIO_Init+0x15c>)
 800076a:	f002 fa59 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000774:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000778:	f002 fa52 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR_EN_Pin|USR_LED_3_Pin|USR_LED_2_Pin|USR_LED_1_Pin;
 800077c:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	4826      	ldr	r0, [pc, #152]	@ (8000830 <MX_GPIO_Init+0x15c>)
 8000796:	f002 f8c1 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_Z_Pin;
 800079a:	2304      	movs	r3, #4
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_Z_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4820      	ldr	r0, [pc, #128]	@ (8000830 <MX_GPIO_Init+0x15c>)
 80007ae:	f002 f8b5 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_2_Pin;
 80007b2:	2310      	movs	r3, #16
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_2_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ca:	f002 f8a7 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_4_Pin;
 80007ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_4_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ea:	f002 f897 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_1_Pin;
 80007ee:	2304      	movs	r3, #4
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	480c      	ldr	r0, [pc, #48]	@ (8000834 <MX_GPIO_Init+0x160>)
 8000804:	f002 f88a 	bl	800291c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_3_Pin;
 8000808:	2340      	movs	r3, #64	@ 0x40
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_3_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	4806      	ldr	r0, [pc, #24]	@ (8000838 <MX_GPIO_Init+0x164>)
 800081e:	f002 f87d 	bl	800291c <HAL_GPIO_Init>

}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	@ 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000
 8000830:	48000800 	.word	0x48000800
 8000834:	48000c00 	.word	0x48000c00
 8000838:	48000400 	.word	0x48000400

0800083c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000842:	4a1c      	ldr	r2, [pc, #112]	@ (80008b4 <MX_I2C2_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30D29DE4;
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000848:	4a1b      	ldr	r2, [pc, #108]	@ (80008b8 <MX_I2C2_Init+0x7c>)
 800084a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800084c:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000852:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000854:	2201      	movs	r2, #1
 8000856:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000876:	480e      	ldr	r0, [pc, #56]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000878:	f002 fa04 	bl	8002c84 <HAL_I2C_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000882:	f000 f906 	bl	8000a92 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000886:	2100      	movs	r1, #0
 8000888:	4809      	ldr	r0, [pc, #36]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800088a:	f002 fa96 	bl	8002dba <HAL_I2CEx_ConfigAnalogFilter>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000894:	f000 f8fd 	bl	8000a92 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000898:	2100      	movs	r1, #0
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800089c:	f002 fad8 	bl	8002e50 <HAL_I2CEx_ConfigDigitalFilter>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008a6:	f000 f8f4 	bl	8000a92 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000094 	.word	0x20000094
 80008b4:	40005800 	.word	0x40005800
 80008b8:	30d29de4 	.word	0x30d29de4

080008bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b09e      	sub	sp, #120	@ 0x78
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	2254      	movs	r2, #84	@ 0x54
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f005 fdff 	bl	80064e0 <memset>
  if(i2cHandle->Instance==I2C2)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000964 <HAL_I2C_MspInit+0xa8>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d137      	bne.n	800095c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008ec:	2380      	movs	r3, #128	@ 0x80
 80008ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4618      	mov	r0, r3
 80008fa:	f003 f8d3 	bl	8003aa4 <HAL_RCCEx_PeriphCLKConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000904:	f000 f8c5 	bl	8000a92 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000908:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090c:	4a16      	ldr	r2, [pc, #88]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000914:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 8000916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000920:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000924:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000926:	2312      	movs	r3, #18
 8000928:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000932:	2304      	movs	r3, #4
 8000934:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800093a:	4619      	mov	r1, r3
 800093c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000940:	f001 ffec 	bl	800291c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 8000946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000948:	4a07      	ldr	r2, [pc, #28]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 800094a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800094e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 8000952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800095c:	bf00      	nop
 800095e:	3778      	adds	r7, #120	@ 0x78
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40005800 	.word	0x40005800
 8000968:	40021000 	.word	0x40021000

0800096c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000970:	f000 fd5d 	bl	800142e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000974:	f000 f844 	bl	8000a00 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000978:	f7ff feac 	bl	80006d4 <MX_GPIO_Init>
	MX_TIM2_Init();
 800097c:	f000 f950 	bl	8000c20 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000980:	f000 f9d6 	bl	8000d30 <MX_TIM3_Init>
	MX_ADC1_Init();
 8000984:	f7ff fdc0 	bl	8000508 <MX_ADC1_Init>
	MX_I2C2_Init();
 8000988:	f7ff ff58 	bl	800083c <MX_I2C2_Init>
	MX_TIM1_Init();
 800098c:	f000 f8ee 	bl	8000b6c <MX_TIM1_Init>
	MX_TIM16_Init();
 8000990:	f000 fa6e 	bl	8000e70 <MX_TIM16_Init>
	MX_USART1_UART_Init();
 8000994:	f000 fbf0 	bl	8001178 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8000998:	f000 fc3a 	bl	8001210 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //PA2 TIM2 CH3 symétrique PC7
	//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //PC6 TIM3 CH1
	//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
	//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800099c:	2108      	movs	r1, #8
 800099e:	4815      	ldr	r0, [pc, #84]	@ (80009f4 <main+0x88>)
 80009a0:	f003 fbe8 	bl	8004174 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80009a4:	210c      	movs	r1, #12
 80009a6:	4813      	ldr	r0, [pc, #76]	@ (80009f4 <main+0x88>)
 80009a8:	f003 fbe4 	bl	8004174 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80009ac:	2100      	movs	r1, #0
 80009ae:	4812      	ldr	r0, [pc, #72]	@ (80009f8 <main+0x8c>)
 80009b0:	f003 fbe0 	bl	8004174 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80009b4:	2104      	movs	r1, #4
 80009b6:	4810      	ldr	r0, [pc, #64]	@ (80009f8 <main+0x8c>)
 80009b8:	f003 fbdc 	bl	8004174 <HAL_TIM_PWM_Start>
		//	  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
		//	  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
		//	  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
		//	  HAL_Delay(1000);

		HAL_GPIO_TogglePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin);
 80009bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009c0:	480e      	ldr	r0, [pc, #56]	@ (80009fc <main+0x90>)
 80009c2:	f002 f945 	bl	8002c50 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin);
 80009c6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009ca:	480c      	ldr	r0, [pc, #48]	@ (80009fc <main+0x90>)
 80009cc:	f002 f940 	bl	8002c50 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin);
 80009d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009d4:	4809      	ldr	r0, [pc, #36]	@ (80009fc <main+0x90>)
 80009d6:	f002 f93b 	bl	8002c50 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin);
 80009da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e2:	f002 f935 	bl	8002c50 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80009e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009ea:	f000 fd91 	bl	8001510 <HAL_Delay>
		HAL_GPIO_TogglePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin);
 80009ee:	bf00      	nop
 80009f0:	e7e4      	b.n	80009bc <main+0x50>
 80009f2:	bf00      	nop
 80009f4:	20000134 	.word	0x20000134
 80009f8:	20000180 	.word	0x20000180
 80009fc:	48000800 	.word	0x48000800

08000a00 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b094      	sub	sp, #80	@ 0x50
 8000a04:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 0318 	add.w	r3, r7, #24
 8000a0a:	2238      	movs	r2, #56	@ 0x38
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f005 fd66 	bl	80064e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f002 fa60 	bl	8002ee8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a30:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a32:	2302      	movs	r3, #2
 8000a34:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a36:	2303      	movs	r3, #3
 8000a38:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 20;
 8000a3e:	2314      	movs	r3, #20
 8000a40:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4e:	f107 0318 	add.w	r3, r7, #24
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 fafc 	bl	8003050 <HAL_RCC_OscConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000a5e:	f000 f818 	bl	8000a92 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a62:	230f      	movs	r3, #15
 8000a64:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a66:	2303      	movs	r3, #3
 8000a68:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2104      	movs	r1, #4
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 fdfa 	bl	8003674 <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000a86:	f000 f804 	bl	8000a92 <Error_Handler>
	}
}
 8000a8a:	bf00      	nop
 8000a8c:	3750      	adds	r7, #80	@ 0x50
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a96:	b672      	cpsid	i
}
 8000a98:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a9a:	bf00      	nop
 8000a9c:	e7fd      	b.n	8000a9a <Error_Handler+0x8>
	...

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac2:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_MspInit+0x44>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ad6:	f002 faab 	bl	8003030 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3e:	f000 fcc9 	bl	80014d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <SystemInit+0x20>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b52:	4a05      	ldr	r2, [pc, #20]	@ (8000b68 <SystemInit+0x20>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	@ 0x30
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	2224      	movs	r2, #36	@ 0x24
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f005 fcb0 	bl	80064e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b80:	463b      	mov	r3, r7
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b8a:	4b23      	ldr	r3, [pc, #140]	@ (8000c18 <MX_TIM1_Init+0xac>)
 8000b8c:	4a23      	ldr	r2, [pc, #140]	@ (8000c1c <MX_TIM1_Init+0xb0>)
 8000b8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b90:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <MX_TIM1_Init+0xac>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b96:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <MX_TIM1_Init+0xac>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <MX_TIM1_Init+0xac>)
 8000b9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ba2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <MX_TIM1_Init+0xac>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000baa:	4b1b      	ldr	r3, [pc, #108]	@ (8000c18 <MX_TIM1_Init+0xac>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb0:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <MX_TIM1_Init+0xac>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4619      	mov	r1, r3
 8000be0:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <MX_TIM1_Init+0xac>)
 8000be2:	f003 fbd9 	bl	8004398 <HAL_TIM_Encoder_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000bec:	f7ff ff51 	bl	8000a92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <MX_TIM1_Init+0xac>)
 8000c02:	f004 fcd5 	bl	80055b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000c0c:	f7ff ff41 	bl	8000a92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3730      	adds	r7, #48	@ 0x30
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200000e8 	.word	0x200000e8
 8000c1c:	40012c00 	.word	0x40012c00

08000c20 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08e      	sub	sp, #56	@ 0x38
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c40:	463b      	mov	r3, r7
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]
 8000c4e:	615a      	str	r2, [r3, #20]
 8000c50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c52:	4b36      	ldr	r3, [pc, #216]	@ (8000d2c <MX_TIM2_Init+0x10c>)
 8000c54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000c5a:	4b34      	ldr	r3, [pc, #208]	@ (8000d2c <MX_TIM2_Init+0x10c>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c60:	4b32      	ldr	r3, [pc, #200]	@ (8000d2c <MX_TIM2_Init+0x10c>)
 8000c62:	2220      	movs	r2, #32
 8000c64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c66:	4b31      	ldr	r3, [pc, #196]	@ (8000d2c <MX_TIM2_Init+0x10c>)
 8000c68:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <MX_TIM2_Init+0x10c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c74:	4b2d      	ldr	r3, [pc, #180]	@ (8000d2c <MX_TIM2_Init+0x10c>)
 8000c76:	2280      	movs	r2, #128	@ 0x80
 8000c78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c7a:	482c      	ldr	r0, [pc, #176]	@ (8000d2c <MX_TIM2_Init+0x10c>)
 8000c7c:	f003 f960 	bl	8003f40 <HAL_TIM_Base_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c86:	f7ff ff04 	bl	8000a92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c94:	4619      	mov	r1, r3
 8000c96:	4825      	ldr	r0, [pc, #148]	@ (8000d2c <MX_TIM2_Init+0x10c>)
 8000c98:	f003 fdb2 	bl	8004800 <HAL_TIM_ConfigClockSource>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000ca2:	f7ff fef6 	bl	8000a92 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ca6:	4821      	ldr	r0, [pc, #132]	@ (8000d2c <MX_TIM2_Init+0x10c>)
 8000ca8:	f003 fa02 	bl	80040b0 <HAL_TIM_PWM_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000cb2:	f7ff feee 	bl	8000a92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000cba:	2380      	movs	r3, #128	@ 0x80
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4819      	ldr	r0, [pc, #100]	@ (8000d2c <MX_TIM2_Init+0x10c>)
 8000cc6:	f004 fc73 	bl	80055b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000cd0:	f7ff fedf 	bl	8000a92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cd4:	2360      	movs	r3, #96	@ 0x60
 8000cd6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 600;
 8000cd8:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000cdc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	2208      	movs	r2, #8
 8000cea:	4619      	mov	r1, r3
 8000cec:	480f      	ldr	r0, [pc, #60]	@ (8000d2c <MX_TIM2_Init+0x10c>)
 8000cee:	f003 fc73 	bl	80045d8 <HAL_TIM_PWM_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000cf8:	f7ff fecb 	bl	8000a92 <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 8000cfc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000d00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000d02:	2302      	movs	r3, #2
 8000d04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d06:	463b      	mov	r3, r7
 8000d08:	220c      	movs	r2, #12
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4807      	ldr	r0, [pc, #28]	@ (8000d2c <MX_TIM2_Init+0x10c>)
 8000d0e:	f003 fc63 	bl	80045d8 <HAL_TIM_PWM_ConfigChannel>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8000d18:	f7ff febb 	bl	8000a92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d1c:	4803      	ldr	r0, [pc, #12]	@ (8000d2c <MX_TIM2_Init+0x10c>)
 8000d1e:	f000 f9ab 	bl	8001078 <HAL_TIM_MspPostInit>

}
 8000d22:	bf00      	nop
 8000d24:	3738      	adds	r7, #56	@ 0x38
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000134 	.word	0x20000134

08000d30 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b094      	sub	sp, #80	@ 0x50
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d36:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d54:	f107 0320 	add.w	r3, r7, #32
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]
 8000d6e:	615a      	str	r2, [r3, #20]
 8000d70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d72:	4b3d      	ldr	r3, [pc, #244]	@ (8000e68 <MX_TIM3_Init+0x138>)
 8000d74:	4a3d      	ldr	r2, [pc, #244]	@ (8000e6c <MX_TIM3_Init+0x13c>)
 8000d76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8000d78:	4b3b      	ldr	r3, [pc, #236]	@ (8000e68 <MX_TIM3_Init+0x138>)
 8000d7a:	2207      	movs	r2, #7
 8000d7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e68 <MX_TIM3_Init+0x138>)
 8000d80:	2220      	movs	r2, #32
 8000d82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000d84:	4b38      	ldr	r3, [pc, #224]	@ (8000e68 <MX_TIM3_Init+0x138>)
 8000d86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8c:	4b36      	ldr	r3, [pc, #216]	@ (8000e68 <MX_TIM3_Init+0x138>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d92:	4b35      	ldr	r3, [pc, #212]	@ (8000e68 <MX_TIM3_Init+0x138>)
 8000d94:	2280      	movs	r2, #128	@ 0x80
 8000d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d98:	4833      	ldr	r0, [pc, #204]	@ (8000e68 <MX_TIM3_Init+0x138>)
 8000d9a:	f003 f8d1 	bl	8003f40 <HAL_TIM_Base_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000da4:	f7ff fe75 	bl	8000a92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dac:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000db2:	4619      	mov	r1, r3
 8000db4:	482c      	ldr	r0, [pc, #176]	@ (8000e68 <MX_TIM3_Init+0x138>)
 8000db6:	f003 fd23 	bl	8004800 <HAL_TIM_ConfigClockSource>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000dc0:	f7ff fe67 	bl	8000a92 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dc4:	4828      	ldr	r0, [pc, #160]	@ (8000e68 <MX_TIM3_Init+0x138>)
 8000dc6:	f003 f973 	bl	80040b0 <HAL_TIM_PWM_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8000dd0:	f7ff fe5f 	bl	8000a92 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000dd4:	2306      	movs	r3, #6
 8000dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000dd8:	2310      	movs	r3, #16
 8000dda:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000ddc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000de0:	4619      	mov	r1, r3
 8000de2:	4821      	ldr	r0, [pc, #132]	@ (8000e68 <MX_TIM3_Init+0x138>)
 8000de4:	f003 fe22 	bl	8004a2c <HAL_TIM_SlaveConfigSynchro>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8000dee:	f7ff fe50 	bl	8000a92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4819      	ldr	r0, [pc, #100]	@ (8000e68 <MX_TIM3_Init+0x138>)
 8000e02:	f004 fbd5 	bl	80055b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000e0c:	f7ff fe41 	bl	8000a92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e10:	2360      	movs	r3, #96	@ 0x60
 8000e12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 400;
 8000e14:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000e18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2200      	movs	r2, #0
 8000e26:	4619      	mov	r1, r3
 8000e28:	480f      	ldr	r0, [pc, #60]	@ (8000e68 <MX_TIM3_Init+0x138>)
 8000e2a:	f003 fbd5 	bl	80045d8 <HAL_TIM_PWM_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8000e34:	f7ff fe2d 	bl	8000a92 <Error_Handler>
  }
  sConfigOC.Pulse = 600;
 8000e38:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000e3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2204      	movs	r2, #4
 8000e46:	4619      	mov	r1, r3
 8000e48:	4807      	ldr	r0, [pc, #28]	@ (8000e68 <MX_TIM3_Init+0x138>)
 8000e4a:	f003 fbc5 	bl	80045d8 <HAL_TIM_PWM_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM3_Init+0x128>
  {
    Error_Handler();
 8000e54:	f7ff fe1d 	bl	8000a92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e58:	4803      	ldr	r0, [pc, #12]	@ (8000e68 <MX_TIM3_Init+0x138>)
 8000e5a:	f000 f90d 	bl	8001078 <HAL_TIM_MspPostInit>

}
 8000e5e:	bf00      	nop
 8000e60:	3750      	adds	r7, #80	@ 0x50
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000180 	.word	0x20000180
 8000e6c:	40000400 	.word	0x40000400

08000e70 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b094      	sub	sp, #80	@ 0x50
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]
 8000e86:	615a      	str	r2, [r3, #20]
 8000e88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	2234      	movs	r2, #52	@ 0x34
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f005 fb25 	bl	80064e0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000e96:	4b31      	ldr	r3, [pc, #196]	@ (8000f5c <MX_TIM16_Init+0xec>)
 8000e98:	4a31      	ldr	r2, [pc, #196]	@ (8000f60 <MX_TIM16_Init+0xf0>)
 8000e9a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f5c <MX_TIM16_Init+0xec>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f5c <MX_TIM16_Init+0xec>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f5c <MX_TIM16_Init+0xec>)
 8000eaa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f5c <MX_TIM16_Init+0xec>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000eb6:	4b29      	ldr	r3, [pc, #164]	@ (8000f5c <MX_TIM16_Init+0xec>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebc:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <MX_TIM16_Init+0xec>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000ec2:	4826      	ldr	r0, [pc, #152]	@ (8000f5c <MX_TIM16_Init+0xec>)
 8000ec4:	f003 f83c 	bl	8003f40 <HAL_TIM_Base_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000ece:	f7ff fde0 	bl	8000a92 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000ed2:	4822      	ldr	r0, [pc, #136]	@ (8000f5c <MX_TIM16_Init+0xec>)
 8000ed4:	f003 f88b 	bl	8003fee <HAL_TIM_OC_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000ede:	f7ff fdd8 	bl	8000a92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000efe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f02:	2200      	movs	r2, #0
 8000f04:	4619      	mov	r1, r3
 8000f06:	4815      	ldr	r0, [pc, #84]	@ (8000f5c <MX_TIM16_Init+0xec>)
 8000f08:	f003 faec 	bl	80044e4 <HAL_TIM_OC_ConfigChannel>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000f12:	f7ff fdbe 	bl	8000a92 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4807      	ldr	r0, [pc, #28]	@ (8000f5c <MX_TIM16_Init+0xec>)
 8000f3e:	f004 fbcd 	bl	80056dc <HAL_TIMEx_ConfigBreakDeadTime>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000f48:	f7ff fda3 	bl	8000a92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000f4c:	4803      	ldr	r0, [pc, #12]	@ (8000f5c <MX_TIM16_Init+0xec>)
 8000f4e:	f000 f893 	bl	8001078 <HAL_TIM_MspPostInit>

}
 8000f52:	bf00      	nop
 8000f54:	3750      	adds	r7, #80	@ 0x50
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200001cc 	.word	0x200001cc
 8000f60:	40014400 	.word	0x40014400

08000f64 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	@ 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a17      	ldr	r2, [pc, #92]	@ (8000fe0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d127      	bne.n	8000fd6 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f86:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8a:	4a16      	ldr	r2, [pc, #88]	@ (8000fe4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000f8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f90:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f92:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9e:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa2:	4a10      	ldr	r2, [pc, #64]	@ (8000fe4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000faa:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fae:	f003 0304 	and.w	r3, r3, #4
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	@ (8000fe8 <HAL_TIM_Encoder_MspInit+0x84>)
 8000fd2:	f001 fca3 	bl	800291c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	@ 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40012c00 	.word	0x40012c00
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	48000800 	.word	0x48000800

08000fec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ffc:	d10c      	bne.n	8001018 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800106c <HAL_TIM_Base_MspInit+0x80>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001002:	4a1a      	ldr	r2, [pc, #104]	@ (800106c <HAL_TIM_Base_MspInit+0x80>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6593      	str	r3, [r2, #88]	@ 0x58
 800100a:	4b18      	ldr	r3, [pc, #96]	@ (800106c <HAL_TIM_Base_MspInit+0x80>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001016:	e022      	b.n	800105e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a14      	ldr	r2, [pc, #80]	@ (8001070 <HAL_TIM_Base_MspInit+0x84>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d10c      	bne.n	800103c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001022:	4b12      	ldr	r3, [pc, #72]	@ (800106c <HAL_TIM_Base_MspInit+0x80>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001026:	4a11      	ldr	r2, [pc, #68]	@ (800106c <HAL_TIM_Base_MspInit+0x80>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6593      	str	r3, [r2, #88]	@ 0x58
 800102e:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <HAL_TIM_Base_MspInit+0x80>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
}
 800103a:	e010      	b.n	800105e <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM16)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0c      	ldr	r2, [pc, #48]	@ (8001074 <HAL_TIM_Base_MspInit+0x88>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d10b      	bne.n	800105e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <HAL_TIM_Base_MspInit+0x80>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800104a:	4a08      	ldr	r2, [pc, #32]	@ (800106c <HAL_TIM_Base_MspInit+0x80>)
 800104c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001050:	6613      	str	r3, [r2, #96]	@ 0x60
 8001052:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_TIM_Base_MspInit+0x80>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
}
 800105e:	bf00      	nop
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000
 8001070:	40000400 	.word	0x40000400
 8001074:	40014400 	.word	0x40014400

08001078 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001098:	d11d      	bne.n	80010d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b32      	ldr	r3, [pc, #200]	@ (8001164 <HAL_TIM_MspPostInit+0xec>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	4a31      	ldr	r2, [pc, #196]	@ (8001164 <HAL_TIM_MspPostInit+0xec>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001164 <HAL_TIM_MspPostInit+0xec>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
 80010b0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010b2:	230c      	movs	r3, #12
 80010b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010c2:	2301      	movs	r3, #1
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	f107 0314 	add.w	r3, r7, #20
 80010ca:	4619      	mov	r1, r3
 80010cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d0:	f001 fc24 	bl	800291c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80010d4:	e042      	b.n	800115c <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a23      	ldr	r2, [pc, #140]	@ (8001168 <HAL_TIM_MspPostInit+0xf0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d11c      	bne.n	800111a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e0:	4b20      	ldr	r3, [pc, #128]	@ (8001164 <HAL_TIM_MspPostInit+0xec>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001164 <HAL_TIM_MspPostInit+0xec>)
 80010e6:	f043 0304 	orr.w	r3, r3, #4
 80010ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <HAL_TIM_MspPostInit+0xec>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010f8:	23c0      	movs	r3, #192	@ 0xc0
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001108:	2302      	movs	r3, #2
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	4816      	ldr	r0, [pc, #88]	@ (800116c <HAL_TIM_MspPostInit+0xf4>)
 8001114:	f001 fc02 	bl	800291c <HAL_GPIO_Init>
}
 8001118:	e020      	b.n	800115c <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM16)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a14      	ldr	r2, [pc, #80]	@ (8001170 <HAL_TIM_MspPostInit+0xf8>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d11b      	bne.n	800115c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001124:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <HAL_TIM_MspPostInit+0xec>)
 8001126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001128:	4a0e      	ldr	r2, [pc, #56]	@ (8001164 <HAL_TIM_MspPostInit+0xec>)
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001130:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <HAL_TIM_MspPostInit+0xec>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800113c:	2310      	movs	r3, #16
 800113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800114c:	2301      	movs	r3, #1
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4619      	mov	r1, r3
 8001156:	4807      	ldr	r0, [pc, #28]	@ (8001174 <HAL_TIM_MspPostInit+0xfc>)
 8001158:	f001 fbe0 	bl	800291c <HAL_GPIO_Init>
}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	@ 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40021000 	.word	0x40021000
 8001168:	40000400 	.word	0x40000400
 800116c:	48000800 	.word	0x48000800
 8001170:	40014400 	.word	0x40014400
 8001174:	48000400 	.word	0x48000400

08001178 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800117c:	4b22      	ldr	r3, [pc, #136]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 800117e:	4a23      	ldr	r2, [pc, #140]	@ (800120c <MX_USART1_UART_Init+0x94>)
 8001180:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001182:	4b21      	ldr	r3, [pc, #132]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 8001184:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001188:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001196:	4b1c      	ldr	r3, [pc, #112]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b1a      	ldr	r3, [pc, #104]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b17      	ldr	r3, [pc, #92]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ae:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b4:	4b14      	ldr	r3, [pc, #80]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ba:	4b13      	ldr	r3, [pc, #76]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011bc:	2200      	movs	r2, #0
 80011be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011c0:	4811      	ldr	r0, [pc, #68]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011c2:	f004 fb1f 	bl	8005804 <HAL_UART_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80011cc:	f7ff fc61 	bl	8000a92 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d0:	2100      	movs	r1, #0
 80011d2:	480d      	ldr	r0, [pc, #52]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011d4:	f005 f8ba 	bl	800634c <HAL_UARTEx_SetTxFifoThreshold>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011de:	f7ff fc58 	bl	8000a92 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e2:	2100      	movs	r1, #0
 80011e4:	4808      	ldr	r0, [pc, #32]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011e6:	f005 f8ef 	bl	80063c8 <HAL_UARTEx_SetRxFifoThreshold>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011f0:	f7ff fc4f 	bl	8000a92 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	@ (8001208 <MX_USART1_UART_Init+0x90>)
 80011f6:	f005 f870 	bl	80062da <HAL_UARTEx_DisableFifoMode>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001200:	f7ff fc47 	bl	8000a92 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000218 	.word	0x20000218
 800120c:	40013800 	.word	0x40013800

08001210 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001214:	4b22      	ldr	r3, [pc, #136]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 8001216:	4a23      	ldr	r2, [pc, #140]	@ (80012a4 <MX_USART3_UART_Init+0x94>)
 8001218:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800121a:	4b21      	ldr	r3, [pc, #132]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 800121c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001220:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b1d      	ldr	r3, [pc, #116]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800122e:	4b1c      	ldr	r3, [pc, #112]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b1a      	ldr	r3, [pc, #104]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001246:	4b16      	ldr	r3, [pc, #88]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800124c:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001252:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 8001254:	2200      	movs	r2, #0
 8001256:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001258:	4811      	ldr	r0, [pc, #68]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 800125a:	f004 fad3 	bl	8005804 <HAL_UART_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001264:	f7ff fc15 	bl	8000a92 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001268:	2100      	movs	r1, #0
 800126a:	480d      	ldr	r0, [pc, #52]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 800126c:	f005 f86e 	bl	800634c <HAL_UARTEx_SetTxFifoThreshold>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001276:	f7ff fc0c 	bl	8000a92 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800127a:	2100      	movs	r1, #0
 800127c:	4808      	ldr	r0, [pc, #32]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 800127e:	f005 f8a3 	bl	80063c8 <HAL_UARTEx_SetRxFifoThreshold>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001288:	f7ff fc03 	bl	8000a92 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	@ (80012a0 <MX_USART3_UART_Init+0x90>)
 800128e:	f005 f824 	bl	80062da <HAL_UARTEx_DisableFifoMode>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001298:	f7ff fbfb 	bl	8000a92 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200002ac 	.word	0x200002ac
 80012a4:	40004800 	.word	0x40004800

080012a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0a0      	sub	sp, #128	@ 0x80
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012c0:	f107 0318 	add.w	r3, r7, #24
 80012c4:	2254      	movs	r2, #84	@ 0x54
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f005 f909 	bl	80064e0 <memset>
  if(uartHandle->Instance==USART1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a3d      	ldr	r2, [pc, #244]	@ (80013c8 <HAL_UART_MspInit+0x120>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d136      	bne.n	8001346 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012d8:	2301      	movs	r3, #1
 80012da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	4618      	mov	r0, r3
 80012e6:	f002 fbdd 	bl	8003aa4 <HAL_RCCEx_PeriphCLKConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012f0:	f7ff fbcf 	bl	8000a92 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012f4:	4b35      	ldr	r3, [pc, #212]	@ (80013cc <HAL_UART_MspInit+0x124>)
 80012f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f8:	4a34      	ldr	r2, [pc, #208]	@ (80013cc <HAL_UART_MspInit+0x124>)
 80012fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001300:	4b32      	ldr	r3, [pc, #200]	@ (80013cc <HAL_UART_MspInit+0x124>)
 8001302:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001304:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001308:	617b      	str	r3, [r7, #20]
 800130a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130c:	4b2f      	ldr	r3, [pc, #188]	@ (80013cc <HAL_UART_MspInit+0x124>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001310:	4a2e      	ldr	r2, [pc, #184]	@ (80013cc <HAL_UART_MspInit+0x124>)
 8001312:	f043 0304 	orr.w	r3, r3, #4
 8001316:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001318:	4b2c      	ldr	r3, [pc, #176]	@ (80013cc <HAL_UART_MspInit+0x124>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CMD_TX_Pin|CMD_RX_Pin;
 8001324:	2330      	movs	r3, #48	@ 0x30
 8001326:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001328:	2302      	movs	r3, #2
 800132a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001334:	2307      	movs	r3, #7
 8001336:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001338:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800133c:	4619      	mov	r1, r3
 800133e:	4824      	ldr	r0, [pc, #144]	@ (80013d0 <HAL_UART_MspInit+0x128>)
 8001340:	f001 faec 	bl	800291c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001344:	e03b      	b.n	80013be <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART3)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a22      	ldr	r2, [pc, #136]	@ (80013d4 <HAL_UART_MspInit+0x12c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d136      	bne.n	80013be <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001350:	2304      	movs	r3, #4
 8001352:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001358:	f107 0318 	add.w	r3, r7, #24
 800135c:	4618      	mov	r0, r3
 800135e:	f002 fba1 	bl	8003aa4 <HAL_RCCEx_PeriphCLKConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8001368:	f7ff fb93 	bl	8000a92 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800136c:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <HAL_UART_MspInit+0x124>)
 800136e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001370:	4a16      	ldr	r2, [pc, #88]	@ (80013cc <HAL_UART_MspInit+0x124>)
 8001372:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001376:	6593      	str	r3, [r2, #88]	@ 0x58
 8001378:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <HAL_UART_MspInit+0x124>)
 800137a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_UART_MspInit+0x124>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001388:	4a10      	ldr	r2, [pc, #64]	@ (80013cc <HAL_UART_MspInit+0x124>)
 800138a:	f043 0302 	orr.w	r3, r3, #2
 800138e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001390:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <HAL_UART_MspInit+0x124>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800139c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013ae:	2307      	movs	r3, #7
 80013b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013b6:	4619      	mov	r1, r3
 80013b8:	4807      	ldr	r0, [pc, #28]	@ (80013d8 <HAL_UART_MspInit+0x130>)
 80013ba:	f001 faaf 	bl	800291c <HAL_GPIO_Init>
}
 80013be:	bf00      	nop
 80013c0:	3780      	adds	r7, #128	@ 0x80
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40013800 	.word	0x40013800
 80013cc:	40021000 	.word	0x40021000
 80013d0:	48000800 	.word	0x48000800
 80013d4:	40004800 	.word	0x40004800
 80013d8:	48000400 	.word	0x48000400

080013dc <Reset_Handler>:
 80013dc:	480d      	ldr	r0, [pc, #52]	@ (8001414 <LoopForever+0x2>)
 80013de:	4685      	mov	sp, r0
 80013e0:	f7ff fbb2 	bl	8000b48 <SystemInit>
 80013e4:	480c      	ldr	r0, [pc, #48]	@ (8001418 <LoopForever+0x6>)
 80013e6:	490d      	ldr	r1, [pc, #52]	@ (800141c <LoopForever+0xa>)
 80013e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001420 <LoopForever+0xe>)
 80013ea:	2300      	movs	r3, #0
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:
 80013ee:	58d4      	ldr	r4, [r2, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:
 80013f4:	18c4      	adds	r4, r0, r3
 80013f6:	428c      	cmp	r4, r1
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <LoopForever+0x12>)
 80013fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001428 <LoopForever+0x16>)
 80013fe:	2300      	movs	r3, #0
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:
 8001406:	42a2      	cmp	r2, r4
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>
 800140a:	f005 f871 	bl	80064f0 <__libc_init_array>
 800140e:	f7ff faad 	bl	800096c <main>

08001412 <LoopForever>:
 8001412:	e7fe      	b.n	8001412 <LoopForever>
 8001414:	20020000 	.word	0x20020000
 8001418:	20000000 	.word	0x20000000
 800141c:	2000000c 	.word	0x2000000c
 8001420:	080065a0 	.word	0x080065a0
 8001424:	2000000c 	.word	0x2000000c
 8001428:	20000344 	.word	0x20000344

0800142c <ADC1_2_IRQHandler>:
 800142c:	e7fe      	b.n	800142c <ADC1_2_IRQHandler>

0800142e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f001 fa3d 	bl	80028b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800143e:	200f      	movs	r0, #15
 8001440:	f000 f80e 	bl	8001460 <HAL_InitTick>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	e001      	b.n	8001454 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001450:	f7ff fb26 	bl	8000aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001454:	79fb      	ldrb	r3, [r7, #7]

}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800146c:	4b16      	ldr	r3, [pc, #88]	@ (80014c8 <HAL_InitTick+0x68>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d022      	beq.n	80014ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001474:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <HAL_InitTick+0x6c>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <HAL_InitTick+0x68>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001480:	fbb1 f3f3 	udiv	r3, r1, r3
 8001484:	fbb2 f3f3 	udiv	r3, r2, r3
 8001488:	4618      	mov	r0, r3
 800148a:	f001 fa3a 	bl	8002902 <HAL_SYSTICK_Config>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10f      	bne.n	80014b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b0f      	cmp	r3, #15
 8001498:	d809      	bhi.n	80014ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149a:	2200      	movs	r2, #0
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014a2:	f001 fa14 	bl	80028ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a6:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <HAL_InitTick+0x70>)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	e007      	b.n	80014be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	e004      	b.n	80014be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e001      	b.n	80014be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000000 	.word	0x20000000
 80014d0:	20000004 	.word	0x20000004

080014d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <HAL_IncTick+0x1c>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b05      	ldr	r3, [pc, #20]	@ (80014f4 <HAL_IncTick+0x20>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	4a03      	ldr	r2, [pc, #12]	@ (80014f0 <HAL_IncTick+0x1c>)
 80014e4:	6013      	str	r3, [r2, #0]
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	20000340 	.word	0x20000340
 80014f4:	20000008 	.word	0x20000008

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	@ (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000340 	.word	0x20000340

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001528:	d004      	beq.n	8001534 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <HAL_Delay+0x40>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	4413      	add	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001534:	bf00      	nop
 8001536:	f7ff ffdf 	bl	80014f8 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	429a      	cmp	r2, r3
 8001544:	d8f7      	bhi.n	8001536 <HAL_Delay+0x26>
  {
  }
}
 8001546:	bf00      	nop
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000008 	.word	0x20000008

08001554 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	609a      	str	r2, [r3, #8]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	609a      	str	r2, [r3, #8]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3360      	adds	r3, #96	@ 0x60
 80015ce:	461a      	mov	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <LL_ADC_SetOffset+0x44>)
 80015de:	4013      	ands	r3, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	4313      	orrs	r3, r2
 80015ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015f4:	bf00      	nop
 80015f6:	371c      	adds	r7, #28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	03fff000 	.word	0x03fff000

08001604 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3360      	adds	r3, #96	@ 0x60
 8001612:	461a      	mov	r2, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3360      	adds	r3, #96	@ 0x60
 8001640:	461a      	mov	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	431a      	orrs	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800165a:	bf00      	nop
 800165c:	371c      	adds	r7, #28
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001666:	b480      	push	{r7}
 8001668:	b087      	sub	sp, #28
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3360      	adds	r3, #96	@ 0x60
 8001676:	461a      	mov	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	431a      	orrs	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001690:	bf00      	nop
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	3360      	adds	r3, #96	@ 0x60
 80016ac:	461a      	mov	r2, r3
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	431a      	orrs	r2, r3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80016c6:	bf00      	nop
 80016c8:	371c      	adds	r7, #28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	615a      	str	r2, [r3, #20]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3330      	adds	r3, #48	@ 0x30
 8001708:	461a      	mov	r2, r3
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	0a1b      	lsrs	r3, r3, #8
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	4413      	add	r3, r2
 8001716:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	211f      	movs	r1, #31
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	401a      	ands	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	0e9b      	lsrs	r3, r3, #26
 8001730:	f003 011f 	and.w	r1, r3, #31
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	431a      	orrs	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001744:	bf00      	nop
 8001746:	371c      	adds	r7, #28
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3314      	adds	r3, #20
 8001760:	461a      	mov	r2, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	0e5b      	lsrs	r3, r3, #25
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	4413      	add	r3, r2
 800176e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	0d1b      	lsrs	r3, r3, #20
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	2107      	movs	r1, #7
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	401a      	ands	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	0d1b      	lsrs	r3, r3, #20
 800178a:	f003 031f 	and.w	r3, r3, #31
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	fa01 f303 	lsl.w	r3, r1, r3
 8001794:	431a      	orrs	r2, r3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800179a:	bf00      	nop
 800179c:	371c      	adds	r7, #28
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c0:	43db      	mvns	r3, r3
 80017c2:	401a      	ands	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f003 0318 	and.w	r3, r3, #24
 80017ca:	4908      	ldr	r1, [pc, #32]	@ (80017ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80017cc:	40d9      	lsrs	r1, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	400b      	ands	r3, r1
 80017d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017d6:	431a      	orrs	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	0007ffff 	.word	0x0007ffff

080017f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001800:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6093      	str	r3, [r2, #8]
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001828:	d101      	bne.n	800182e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800184c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001850:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001874:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001878:	d101      	bne.n	800187e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <LL_ADC_IsEnabled+0x18>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <LL_ADC_IsEnabled+0x1a>
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	2b04      	cmp	r3, #4
 80018c4:	d101      	bne.n	80018ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d101      	bne.n	80018f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b089      	sub	sp, #36	@ 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e1a9      	b.n	8001c6e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001924:	2b00      	cmp	r3, #0
 8001926:	d109      	bne.n	800193c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7fe fe65 	bl	80005f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff67 	bl	8001814 <LL_ADC_IsDeepPowerDownEnabled>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff4d 	bl	80017f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff82 	bl	8001864 <LL_ADC_IsInternalRegulatorEnabled>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d115      	bne.n	8001992 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ff66 	bl	800183c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001970:	4b9c      	ldr	r3, [pc, #624]	@ (8001be4 <HAL_ADC_Init+0x2e4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	099b      	lsrs	r3, r3, #6
 8001976:	4a9c      	ldr	r2, [pc, #624]	@ (8001be8 <HAL_ADC_Init+0x2e8>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	099b      	lsrs	r3, r3, #6
 800197e:	3301      	adds	r3, #1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001984:	e002      	b.n	800198c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3b01      	subs	r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f9      	bne.n	8001986 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ff64 	bl	8001864 <LL_ADC_IsInternalRegulatorEnabled>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10d      	bne.n	80019be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a6:	f043 0210 	orr.w	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b2:	f043 0201 	orr.w	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ff75 	bl	80018b2 <LL_ADC_REG_IsConversionOngoing>
 80019c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f040 8142 	bne.w	8001c5c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f040 813e 	bne.w	8001c5c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80019e8:	f043 0202 	orr.w	r2, r3, #2
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff49 	bl	800188c <LL_ADC_IsEnabled>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d141      	bne.n	8001a84 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a08:	d004      	beq.n	8001a14 <HAL_ADC_Init+0x114>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a77      	ldr	r2, [pc, #476]	@ (8001bec <HAL_ADC_Init+0x2ec>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d10f      	bne.n	8001a34 <HAL_ADC_Init+0x134>
 8001a14:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001a18:	f7ff ff38 	bl	800188c <LL_ADC_IsEnabled>
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	4873      	ldr	r0, [pc, #460]	@ (8001bec <HAL_ADC_Init+0x2ec>)
 8001a20:	f7ff ff34 	bl	800188c <LL_ADC_IsEnabled>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4323      	orrs	r3, r4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2301      	moveq	r3, #1
 8001a2e:	2300      	movne	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	e012      	b.n	8001a5a <HAL_ADC_Init+0x15a>
 8001a34:	486e      	ldr	r0, [pc, #440]	@ (8001bf0 <HAL_ADC_Init+0x2f0>)
 8001a36:	f7ff ff29 	bl	800188c <LL_ADC_IsEnabled>
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	486d      	ldr	r0, [pc, #436]	@ (8001bf4 <HAL_ADC_Init+0x2f4>)
 8001a3e:	f7ff ff25 	bl	800188c <LL_ADC_IsEnabled>
 8001a42:	4603      	mov	r3, r0
 8001a44:	431c      	orrs	r4, r3
 8001a46:	486c      	ldr	r0, [pc, #432]	@ (8001bf8 <HAL_ADC_Init+0x2f8>)
 8001a48:	f7ff ff20 	bl	800188c <LL_ADC_IsEnabled>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4323      	orrs	r3, r4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	bf0c      	ite	eq
 8001a54:	2301      	moveq	r3, #1
 8001a56:	2300      	movne	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d012      	beq.n	8001a84 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a66:	d004      	beq.n	8001a72 <HAL_ADC_Init+0x172>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a5f      	ldr	r2, [pc, #380]	@ (8001bec <HAL_ADC_Init+0x2ec>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d101      	bne.n	8001a76 <HAL_ADC_Init+0x176>
 8001a72:	4a62      	ldr	r2, [pc, #392]	@ (8001bfc <HAL_ADC_Init+0x2fc>)
 8001a74:	e000      	b.n	8001a78 <HAL_ADC_Init+0x178>
 8001a76:	4a62      	ldr	r2, [pc, #392]	@ (8001c00 <HAL_ADC_Init+0x300>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4610      	mov	r0, r2
 8001a80:	f7ff fd68 	bl	8001554 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	7f5b      	ldrb	r3, [r3, #29]
 8001a88:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a8e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001a94:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001a9a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001aa2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d106      	bne.n	8001ac0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	045b      	lsls	r3, r3, #17
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d009      	beq.n	8001adc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001acc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	4b48      	ldr	r3, [pc, #288]	@ (8001c04 <HAL_ADC_Init+0x304>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	69b9      	ldr	r1, [r7, #24]
 8001aec:	430b      	orrs	r3, r1
 8001aee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fee4 	bl	80018d8 <LL_ADC_INJ_IsConversionOngoing>
 8001b10:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d17f      	bne.n	8001c18 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d17c      	bne.n	8001c18 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b22:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b2a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b3a:	f023 0302 	bic.w	r3, r3, #2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	69b9      	ldr	r1, [r7, #24]
 8001b44:	430b      	orrs	r3, r1
 8001b46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d017      	beq.n	8001b80 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001b5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b68:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6911      	ldr	r1, [r2, #16]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	430b      	orrs	r3, r1
 8001b7a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001b7e:	e013      	b.n	8001ba8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001b8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ba0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ba4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d12a      	bne.n	8001c08 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001bbc:	f023 0304 	bic.w	r3, r3, #4
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001bc8:	4311      	orrs	r1, r2
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001bce:	4311      	orrs	r1, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0201 	orr.w	r2, r2, #1
 8001be0:	611a      	str	r2, [r3, #16]
 8001be2:	e019      	b.n	8001c18 <HAL_ADC_Init+0x318>
 8001be4:	20000000 	.word	0x20000000
 8001be8:	053e2d63 	.word	0x053e2d63
 8001bec:	50000100 	.word	0x50000100
 8001bf0:	50000400 	.word	0x50000400
 8001bf4:	50000500 	.word	0x50000500
 8001bf8:	50000600 	.word	0x50000600
 8001bfc:	50000300 	.word	0x50000300
 8001c00:	50000700 	.word	0x50000700
 8001c04:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691a      	ldr	r2, [r3, #16]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d10c      	bne.n	8001c3a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	f023 010f 	bic.w	r1, r3, #15
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	1e5a      	subs	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c38:	e007      	b.n	8001c4a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 020f 	bic.w	r2, r2, #15
 8001c48:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4e:	f023 0303 	bic.w	r3, r3, #3
 8001c52:	f043 0201 	orr.w	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c5a:	e007      	b.n	8001c6c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c60:	f043 0210 	orr.w	r2, r3, #16
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	@ 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd90      	pop	{r4, r7, pc}
 8001c76:	bf00      	nop

08001c78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b0b6      	sub	sp, #216	@ 0xd8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d102      	bne.n	8001c9c <HAL_ADC_ConfigChannel+0x24>
 8001c96:	2302      	movs	r3, #2
 8001c98:	f000 bc13 	b.w	80024c2 <HAL_ADC_ConfigChannel+0x84a>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fe02 	bl	80018b2 <LL_ADC_REG_IsConversionOngoing>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f040 83f3 	bne.w	800249c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	6859      	ldr	r1, [r3, #4]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	f7ff fd18 	bl	80016f8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fdf0 	bl	80018b2 <LL_ADC_REG_IsConversionOngoing>
 8001cd2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fdfc 	bl	80018d8 <LL_ADC_INJ_IsConversionOngoing>
 8001ce0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ce4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f040 81d9 	bne.w	80020a0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f040 81d4 	bne.w	80020a0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d00:	d10f      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f7ff fd1f 	bl	8001750 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff fcd9 	bl	80016d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001d20:	e00e      	b.n	8001d40 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	6819      	ldr	r1, [r3, #0]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f7ff fd0e 	bl	8001750 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fcc9 	bl	80016d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	695a      	ldr	r2, [r3, #20]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	08db      	lsrs	r3, r3, #3
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d022      	beq.n	8001da8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6919      	ldr	r1, [r3, #16]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001d72:	f7ff fc23 	bl	80015bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6919      	ldr	r1, [r3, #16]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	461a      	mov	r2, r3
 8001d84:	f7ff fc6f 	bl	8001666 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d102      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x126>
 8001d98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d9c:	e000      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x128>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	461a      	mov	r2, r3
 8001da2:	f7ff fc7b 	bl	800169c <LL_ADC_SetOffsetSaturation>
 8001da6:	e17b      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fc28 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001db4:	4603      	mov	r3, r0
 8001db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10a      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x15c>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fc1d 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	0e9b      	lsrs	r3, r3, #26
 8001dce:	f003 021f 	and.w	r2, r3, #31
 8001dd2:	e01e      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x19a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fc12 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001df2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001df6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001dfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001e02:	2320      	movs	r3, #32
 8001e04:	e004      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001e06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x1b2>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	0e9b      	lsrs	r3, r3, #26
 8001e24:	f003 031f 	and.w	r3, r3, #31
 8001e28:	e018      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x1e4>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001e3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001e46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001e4e:	2320      	movs	r3, #32
 8001e50:	e004      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001e52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e56:	fab3 f383 	clz	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d106      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2200      	movs	r2, #0
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fbe1 	bl	8001630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2101      	movs	r1, #1
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fbc5 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10a      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x222>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff fbba 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001e90:	4603      	mov	r3, r0
 8001e92:	0e9b      	lsrs	r3, r3, #26
 8001e94:	f003 021f 	and.w	r2, r3, #31
 8001e98:	e01e      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x260>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fbaf 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001eb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001ec0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d101      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001ec8:	2320      	movs	r3, #32
 8001eca:	e004      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001ecc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ed0:	fab3 f383 	clz	r3, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x278>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	0e9b      	lsrs	r3, r3, #26
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	e018      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x2aa>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001f04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001f08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001f14:	2320      	movs	r3, #32
 8001f16:	e004      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001f18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001f1c:	fab3 f383 	clz	r3, r3
 8001f20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d106      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fb7e 	bl	8001630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2102      	movs	r1, #2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fb62 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10a      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x2e8>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2102      	movs	r1, #2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fb57 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	0e9b      	lsrs	r3, r3, #26
 8001f5a:	f003 021f 	and.w	r2, r3, #31
 8001f5e:	e01e      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x326>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2102      	movs	r1, #2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fb4c 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001f7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001f82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001f86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001f8e:	2320      	movs	r3, #32
 8001f90:	e004      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001f92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d105      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x33e>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	e016      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x36c>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001fc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001fca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001fd6:	2320      	movs	r3, #32
 8001fd8:	e004      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001fda:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d106      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2200      	movs	r2, #0
 8001fee:	2102      	movs	r1, #2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fb1d 	bl	8001630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2103      	movs	r1, #3
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fb01 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8002002:	4603      	mov	r3, r0
 8002004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10a      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x3aa>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2103      	movs	r1, #3
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff faf6 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8002018:	4603      	mov	r3, r0
 800201a:	0e9b      	lsrs	r3, r3, #26
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	e017      	b.n	8002052 <HAL_ADC_ConfigChannel+0x3da>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2103      	movs	r1, #3
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff faeb 	bl	8001604 <LL_ADC_GetOffsetChannel>
 800202e:	4603      	mov	r3, r0
 8002030:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800203a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800203c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800203e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002044:	2320      	movs	r3, #32
 8002046:	e003      	b.n	8002050 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002048:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
 8002050:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800205a:	2b00      	cmp	r3, #0
 800205c:	d105      	bne.n	800206a <HAL_ADC_ConfigChannel+0x3f2>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	0e9b      	lsrs	r3, r3, #26
 8002064:	f003 031f 	and.w	r3, r3, #31
 8002068:	e011      	b.n	800208e <HAL_ADC_ConfigChannel+0x416>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002078:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800207a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800207c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002082:	2320      	movs	r3, #32
 8002084:	e003      	b.n	800208e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800208e:	429a      	cmp	r2, r3
 8002090:	d106      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2200      	movs	r2, #0
 8002098:	2103      	movs	r1, #3
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fac8 	bl	8001630 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fbf1 	bl	800188c <LL_ADC_IsEnabled>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f040 813d 	bne.w	800232c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6819      	ldr	r1, [r3, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	461a      	mov	r2, r3
 80020c0:	f7ff fb72 	bl	80017a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4aa2      	ldr	r2, [pc, #648]	@ (8002354 <HAL_ADC_ConfigChannel+0x6dc>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	f040 812e 	bne.w	800232c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10b      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x480>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	0e9b      	lsrs	r3, r3, #26
 80020e6:	3301      	adds	r3, #1
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	2b09      	cmp	r3, #9
 80020ee:	bf94      	ite	ls
 80020f0:	2301      	movls	r3, #1
 80020f2:	2300      	movhi	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	e019      	b.n	800212c <HAL_ADC_ConfigChannel+0x4b4>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002106:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002108:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800210a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002110:	2320      	movs	r3, #32
 8002112:	e003      	b.n	800211c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002114:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	3301      	adds	r3, #1
 800211e:	f003 031f 	and.w	r3, r3, #31
 8002122:	2b09      	cmp	r3, #9
 8002124:	bf94      	ite	ls
 8002126:	2301      	movls	r3, #1
 8002128:	2300      	movhi	r3, #0
 800212a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800212c:	2b00      	cmp	r3, #0
 800212e:	d079      	beq.n	8002224 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002138:	2b00      	cmp	r3, #0
 800213a:	d107      	bne.n	800214c <HAL_ADC_ConfigChannel+0x4d4>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0e9b      	lsrs	r3, r3, #26
 8002142:	3301      	adds	r3, #1
 8002144:	069b      	lsls	r3, r3, #26
 8002146:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800214a:	e015      	b.n	8002178 <HAL_ADC_ConfigChannel+0x500>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800215a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800215c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800215e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002164:	2320      	movs	r3, #32
 8002166:	e003      	b.n	8002170 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800216a:	fab3 f383 	clz	r3, r3
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3301      	adds	r3, #1
 8002172:	069b      	lsls	r3, r3, #26
 8002174:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002180:	2b00      	cmp	r3, #0
 8002182:	d109      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x520>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	0e9b      	lsrs	r3, r3, #26
 800218a:	3301      	adds	r3, #1
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	e017      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x550>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80021a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80021aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80021b0:	2320      	movs	r3, #32
 80021b2:	e003      	b.n	80021bc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80021b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021b6:	fab3 f383 	clz	r3, r3
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	f003 031f 	and.w	r3, r3, #31
 80021c2:	2101      	movs	r1, #1
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	ea42 0103 	orr.w	r1, r2, r3
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10a      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x576>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	0e9b      	lsrs	r3, r3, #26
 80021de:	3301      	adds	r3, #1
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4613      	mov	r3, r2
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	4413      	add	r3, r2
 80021ea:	051b      	lsls	r3, r3, #20
 80021ec:	e018      	b.n	8002220 <HAL_ADC_ConfigChannel+0x5a8>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021f6:	fa93 f3a3 	rbit	r3, r3
 80021fa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80021fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002206:	2320      	movs	r3, #32
 8002208:	e003      	b.n	8002212 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800220a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800220c:	fab3 f383 	clz	r3, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	3301      	adds	r3, #1
 8002214:	f003 021f 	and.w	r2, r3, #31
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002220:	430b      	orrs	r3, r1
 8002222:	e07e      	b.n	8002322 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222c:	2b00      	cmp	r3, #0
 800222e:	d107      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x5c8>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	0e9b      	lsrs	r3, r3, #26
 8002236:	3301      	adds	r3, #1
 8002238:	069b      	lsls	r3, r3, #26
 800223a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800223e:	e015      	b.n	800226c <HAL_ADC_ConfigChannel+0x5f4>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800224e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002250:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002258:	2320      	movs	r3, #32
 800225a:	e003      	b.n	8002264 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800225c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	3301      	adds	r3, #1
 8002266:	069b      	lsls	r3, r3, #26
 8002268:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002274:	2b00      	cmp	r3, #0
 8002276:	d109      	bne.n	800228c <HAL_ADC_ConfigChannel+0x614>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	0e9b      	lsrs	r3, r3, #26
 800227e:	3301      	adds	r3, #1
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	2101      	movs	r1, #1
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	e017      	b.n	80022bc <HAL_ADC_ConfigChannel+0x644>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	61fb      	str	r3, [r7, #28]
  return result;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80022a4:	2320      	movs	r3, #32
 80022a6:	e003      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80022a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	3301      	adds	r3, #1
 80022b2:	f003 031f 	and.w	r3, r3, #31
 80022b6:	2101      	movs	r1, #1
 80022b8:	fa01 f303 	lsl.w	r3, r1, r3
 80022bc:	ea42 0103 	orr.w	r1, r2, r3
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10d      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x670>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0e9b      	lsrs	r3, r3, #26
 80022d2:	3301      	adds	r3, #1
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	4613      	mov	r3, r2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	4413      	add	r3, r2
 80022de:	3b1e      	subs	r3, #30
 80022e0:	051b      	lsls	r3, r3, #20
 80022e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022e6:	e01b      	b.n	8002320 <HAL_ADC_ConfigChannel+0x6a8>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	613b      	str	r3, [r7, #16]
  return result;
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d101      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002300:	2320      	movs	r3, #32
 8002302:	e003      	b.n	800230c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	3301      	adds	r3, #1
 800230e:	f003 021f 	and.w	r2, r3, #31
 8002312:	4613      	mov	r3, r2
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4413      	add	r3, r2
 8002318:	3b1e      	subs	r3, #30
 800231a:	051b      	lsls	r3, r3, #20
 800231c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002320:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002326:	4619      	mov	r1, r3
 8002328:	f7ff fa12 	bl	8001750 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b09      	ldr	r3, [pc, #36]	@ (8002358 <HAL_ADC_ConfigChannel+0x6e0>)
 8002332:	4013      	ands	r3, r2
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80be 	beq.w	80024b6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002342:	d004      	beq.n	800234e <HAL_ADC_ConfigChannel+0x6d6>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a04      	ldr	r2, [pc, #16]	@ (800235c <HAL_ADC_ConfigChannel+0x6e4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d10a      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x6ec>
 800234e:	4b04      	ldr	r3, [pc, #16]	@ (8002360 <HAL_ADC_ConfigChannel+0x6e8>)
 8002350:	e009      	b.n	8002366 <HAL_ADC_ConfigChannel+0x6ee>
 8002352:	bf00      	nop
 8002354:	407f0000 	.word	0x407f0000
 8002358:	80080000 	.word	0x80080000
 800235c:	50000100 	.word	0x50000100
 8002360:	50000300 	.word	0x50000300
 8002364:	4b59      	ldr	r3, [pc, #356]	@ (80024cc <HAL_ADC_ConfigChannel+0x854>)
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff f91a 	bl	80015a0 <LL_ADC_GetCommonPathInternalCh>
 800236c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a56      	ldr	r2, [pc, #344]	@ (80024d0 <HAL_ADC_ConfigChannel+0x858>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d004      	beq.n	8002384 <HAL_ADC_ConfigChannel+0x70c>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a55      	ldr	r2, [pc, #340]	@ (80024d4 <HAL_ADC_ConfigChannel+0x85c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d13a      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002384:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002388:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d134      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002398:	d005      	beq.n	80023a6 <HAL_ADC_ConfigChannel+0x72e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a4e      	ldr	r2, [pc, #312]	@ (80024d8 <HAL_ADC_ConfigChannel+0x860>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	f040 8085 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023ae:	d004      	beq.n	80023ba <HAL_ADC_ConfigChannel+0x742>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a49      	ldr	r2, [pc, #292]	@ (80024dc <HAL_ADC_ConfigChannel+0x864>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d101      	bne.n	80023be <HAL_ADC_ConfigChannel+0x746>
 80023ba:	4a49      	ldr	r2, [pc, #292]	@ (80024e0 <HAL_ADC_ConfigChannel+0x868>)
 80023bc:	e000      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x748>
 80023be:	4a43      	ldr	r2, [pc, #268]	@ (80024cc <HAL_ADC_ConfigChannel+0x854>)
 80023c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80023c8:	4619      	mov	r1, r3
 80023ca:	4610      	mov	r0, r2
 80023cc:	f7ff f8d5 	bl	800157a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023d0:	4b44      	ldr	r3, [pc, #272]	@ (80024e4 <HAL_ADC_ConfigChannel+0x86c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	099b      	lsrs	r3, r3, #6
 80023d6:	4a44      	ldr	r2, [pc, #272]	@ (80024e8 <HAL_ADC_ConfigChannel+0x870>)
 80023d8:	fba2 2303 	umull	r2, r3, r2, r3
 80023dc:	099b      	lsrs	r3, r3, #6
 80023de:	1c5a      	adds	r2, r3, #1
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023ea:	e002      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f9      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023f8:	e05a      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a3b      	ldr	r2, [pc, #236]	@ (80024ec <HAL_ADC_ConfigChannel+0x874>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d125      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002404:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002408:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d11f      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a31      	ldr	r2, [pc, #196]	@ (80024dc <HAL_ADC_ConfigChannel+0x864>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d104      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x7ac>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a34      	ldr	r2, [pc, #208]	@ (80024f0 <HAL_ADC_ConfigChannel+0x878>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d047      	beq.n	80024b4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800242c:	d004      	beq.n	8002438 <HAL_ADC_ConfigChannel+0x7c0>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a2a      	ldr	r2, [pc, #168]	@ (80024dc <HAL_ADC_ConfigChannel+0x864>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d101      	bne.n	800243c <HAL_ADC_ConfigChannel+0x7c4>
 8002438:	4a29      	ldr	r2, [pc, #164]	@ (80024e0 <HAL_ADC_ConfigChannel+0x868>)
 800243a:	e000      	b.n	800243e <HAL_ADC_ConfigChannel+0x7c6>
 800243c:	4a23      	ldr	r2, [pc, #140]	@ (80024cc <HAL_ADC_ConfigChannel+0x854>)
 800243e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002442:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002446:	4619      	mov	r1, r3
 8002448:	4610      	mov	r0, r2
 800244a:	f7ff f896 	bl	800157a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800244e:	e031      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a27      	ldr	r2, [pc, #156]	@ (80024f4 <HAL_ADC_ConfigChannel+0x87c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d12d      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800245a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800245e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d127      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1c      	ldr	r2, [pc, #112]	@ (80024dc <HAL_ADC_ConfigChannel+0x864>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d022      	beq.n	80024b6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002478:	d004      	beq.n	8002484 <HAL_ADC_ConfigChannel+0x80c>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a17      	ldr	r2, [pc, #92]	@ (80024dc <HAL_ADC_ConfigChannel+0x864>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x810>
 8002484:	4a16      	ldr	r2, [pc, #88]	@ (80024e0 <HAL_ADC_ConfigChannel+0x868>)
 8002486:	e000      	b.n	800248a <HAL_ADC_ConfigChannel+0x812>
 8002488:	4a10      	ldr	r2, [pc, #64]	@ (80024cc <HAL_ADC_ConfigChannel+0x854>)
 800248a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800248e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002492:	4619      	mov	r1, r3
 8002494:	4610      	mov	r0, r2
 8002496:	f7ff f870 	bl	800157a <LL_ADC_SetCommonPathInternalCh>
 800249a:	e00c      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a0:	f043 0220 	orr.w	r2, r3, #32
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80024ae:	e002      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024b0:	bf00      	nop
 80024b2:	e000      	b.n	80024b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80024be:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	37d8      	adds	r7, #216	@ 0xd8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	50000700 	.word	0x50000700
 80024d0:	c3210000 	.word	0xc3210000
 80024d4:	90c00010 	.word	0x90c00010
 80024d8:	50000600 	.word	0x50000600
 80024dc:	50000100 	.word	0x50000100
 80024e0:	50000300 	.word	0x50000300
 80024e4:	20000000 	.word	0x20000000
 80024e8:	053e2d63 	.word	0x053e2d63
 80024ec:	c7520000 	.word	0xc7520000
 80024f0:	50000500 	.word	0x50000500
 80024f4:	cb840000 	.word	0xcb840000

080024f8 <LL_ADC_IsEnabled>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 0301 	and.w	r3, r3, #1
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <LL_ADC_IsEnabled+0x18>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <LL_ADC_IsEnabled+0x1a>
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <LL_ADC_REG_IsConversionOngoing>:
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b04      	cmp	r3, #4
 8002530:	d101      	bne.n	8002536 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b0a1      	sub	sp, #132	@ 0x84
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800255e:	2302      	movs	r3, #2
 8002560:	e0e7      	b.n	8002732 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800256a:	2300      	movs	r3, #0
 800256c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800256e:	2300      	movs	r3, #0
 8002570:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800257a:	d102      	bne.n	8002582 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800257c:	4b6f      	ldr	r3, [pc, #444]	@ (800273c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800257e:	60bb      	str	r3, [r7, #8]
 8002580:	e009      	b.n	8002596 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6e      	ldr	r2, [pc, #440]	@ (8002740 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d102      	bne.n	8002592 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800258c:	4b6d      	ldr	r3, [pc, #436]	@ (8002744 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	e001      	b.n	8002596 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10b      	bne.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a0:	f043 0220 	orr.w	r2, r3, #32
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0be      	b.n	8002732 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ffb1 	bl	800251e <LL_ADC_REG_IsConversionOngoing>
 80025bc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff ffab 	bl	800251e <LL_ADC_REG_IsConversionOngoing>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 80a0 	bne.w	8002710 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80025d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f040 809c 	bne.w	8002710 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025e0:	d004      	beq.n	80025ec <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a55      	ldr	r2, [pc, #340]	@ (800273c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d101      	bne.n	80025f0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80025ec:	4b56      	ldr	r3, [pc, #344]	@ (8002748 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80025ee:	e000      	b.n	80025f2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80025f0:	4b56      	ldr	r3, [pc, #344]	@ (800274c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80025f2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d04b      	beq.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80025fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800260e:	035b      	lsls	r3, r3, #13
 8002610:	430b      	orrs	r3, r1
 8002612:	431a      	orrs	r2, r3
 8002614:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002616:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002620:	d004      	beq.n	800262c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a45      	ldr	r2, [pc, #276]	@ (800273c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d10f      	bne.n	800264c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800262c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002630:	f7ff ff62 	bl	80024f8 <LL_ADC_IsEnabled>
 8002634:	4604      	mov	r4, r0
 8002636:	4841      	ldr	r0, [pc, #260]	@ (800273c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002638:	f7ff ff5e 	bl	80024f8 <LL_ADC_IsEnabled>
 800263c:	4603      	mov	r3, r0
 800263e:	4323      	orrs	r3, r4
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	e012      	b.n	8002672 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800264c:	483c      	ldr	r0, [pc, #240]	@ (8002740 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800264e:	f7ff ff53 	bl	80024f8 <LL_ADC_IsEnabled>
 8002652:	4604      	mov	r4, r0
 8002654:	483b      	ldr	r0, [pc, #236]	@ (8002744 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002656:	f7ff ff4f 	bl	80024f8 <LL_ADC_IsEnabled>
 800265a:	4603      	mov	r3, r0
 800265c:	431c      	orrs	r4, r3
 800265e:	483c      	ldr	r0, [pc, #240]	@ (8002750 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002660:	f7ff ff4a 	bl	80024f8 <LL_ADC_IsEnabled>
 8002664:	4603      	mov	r3, r0
 8002666:	4323      	orrs	r3, r4
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf0c      	ite	eq
 800266c:	2301      	moveq	r3, #1
 800266e:	2300      	movne	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d056      	beq.n	8002724 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002676:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800267e:	f023 030f 	bic.w	r3, r3, #15
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	6811      	ldr	r1, [r2, #0]
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	6892      	ldr	r2, [r2, #8]
 800268a:	430a      	orrs	r2, r1
 800268c:	431a      	orrs	r2, r3
 800268e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002690:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002692:	e047      	b.n	8002724 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002694:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800269c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800269e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026a8:	d004      	beq.n	80026b4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a23      	ldr	r2, [pc, #140]	@ (800273c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d10f      	bne.n	80026d4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80026b4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80026b8:	f7ff ff1e 	bl	80024f8 <LL_ADC_IsEnabled>
 80026bc:	4604      	mov	r4, r0
 80026be:	481f      	ldr	r0, [pc, #124]	@ (800273c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026c0:	f7ff ff1a 	bl	80024f8 <LL_ADC_IsEnabled>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4323      	orrs	r3, r4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e012      	b.n	80026fa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80026d4:	481a      	ldr	r0, [pc, #104]	@ (8002740 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80026d6:	f7ff ff0f 	bl	80024f8 <LL_ADC_IsEnabled>
 80026da:	4604      	mov	r4, r0
 80026dc:	4819      	ldr	r0, [pc, #100]	@ (8002744 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80026de:	f7ff ff0b 	bl	80024f8 <LL_ADC_IsEnabled>
 80026e2:	4603      	mov	r3, r0
 80026e4:	431c      	orrs	r4, r3
 80026e6:	481a      	ldr	r0, [pc, #104]	@ (8002750 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80026e8:	f7ff ff06 	bl	80024f8 <LL_ADC_IsEnabled>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4323      	orrs	r3, r4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d012      	beq.n	8002724 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80026fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002706:	f023 030f 	bic.w	r3, r3, #15
 800270a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800270c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800270e:	e009      	b.n	8002724 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002714:	f043 0220 	orr.w	r2, r3, #32
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002722:	e000      	b.n	8002726 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002724:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800272e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002732:	4618      	mov	r0, r3
 8002734:	3784      	adds	r7, #132	@ 0x84
 8002736:	46bd      	mov	sp, r7
 8002738:	bd90      	pop	{r4, r7, pc}
 800273a:	bf00      	nop
 800273c:	50000100 	.word	0x50000100
 8002740:	50000400 	.word	0x50000400
 8002744:	50000500 	.word	0x50000500
 8002748:	50000300 	.word	0x50000300
 800274c:	50000700 	.word	0x50000700
 8002750:	50000600 	.word	0x50000600

08002754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002764:	4b0c      	ldr	r3, [pc, #48]	@ (8002798 <__NVIC_SetPriorityGrouping+0x44>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002770:	4013      	ands	r3, r2
 8002772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800277c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002780:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002786:	4a04      	ldr	r2, [pc, #16]	@ (8002798 <__NVIC_SetPriorityGrouping+0x44>)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	60d3      	str	r3, [r2, #12]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a0:	4b04      	ldr	r3, [pc, #16]	@ (80027b4 <__NVIC_GetPriorityGrouping+0x18>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	0a1b      	lsrs	r3, r3, #8
 80027a6:	f003 0307 	and.w	r3, r3, #7
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	db0a      	blt.n	80027e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	490c      	ldr	r1, [pc, #48]	@ (8002804 <__NVIC_SetPriority+0x4c>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	440b      	add	r3, r1
 80027dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e0:	e00a      	b.n	80027f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4908      	ldr	r1, [pc, #32]	@ (8002808 <__NVIC_SetPriority+0x50>)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3b04      	subs	r3, #4
 80027f0:	0112      	lsls	r2, r2, #4
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	440b      	add	r3, r1
 80027f6:	761a      	strb	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000e100 	.word	0xe000e100
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	@ 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f1c3 0307 	rsb	r3, r3, #7
 8002826:	2b04      	cmp	r3, #4
 8002828:	bf28      	it	cs
 800282a:	2304      	movcs	r3, #4
 800282c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3304      	adds	r3, #4
 8002832:	2b06      	cmp	r3, #6
 8002834:	d902      	bls.n	800283c <NVIC_EncodePriority+0x30>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3b03      	subs	r3, #3
 800283a:	e000      	b.n	800283e <NVIC_EncodePriority+0x32>
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	401a      	ands	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002854:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	43d9      	mvns	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	4313      	orrs	r3, r2
         );
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	@ 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002884:	d301      	bcc.n	800288a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002886:	2301      	movs	r3, #1
 8002888:	e00f      	b.n	80028aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288a:	4a0a      	ldr	r2, [pc, #40]	@ (80028b4 <SysTick_Config+0x40>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002892:	210f      	movs	r1, #15
 8002894:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002898:	f7ff ff8e 	bl	80027b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800289c:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <SysTick_Config+0x40>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a2:	4b04      	ldr	r3, [pc, #16]	@ (80028b4 <SysTick_Config+0x40>)
 80028a4:	2207      	movs	r2, #7
 80028a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	e000e010 	.word	0xe000e010

080028b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff ff47 	bl	8002754 <__NVIC_SetPriorityGrouping>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028dc:	f7ff ff5e 	bl	800279c <__NVIC_GetPriorityGrouping>
 80028e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	6978      	ldr	r0, [r7, #20]
 80028e8:	f7ff ff90 	bl	800280c <NVIC_EncodePriority>
 80028ec:	4602      	mov	r2, r0
 80028ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff5f 	bl	80027b8 <__NVIC_SetPriority>
}
 80028fa:	bf00      	nop
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff ffb2 	bl	8002874 <SysTick_Config>
 8002910:	4603      	mov	r3, r0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800292a:	e15a      	b.n	8002be2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2101      	movs	r1, #1
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	4013      	ands	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 814c 	beq.w	8002bdc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b01      	cmp	r3, #1
 800294e:	d005      	beq.n	800295c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002958:	2b02      	cmp	r3, #2
 800295a:	d130      	bne.n	80029be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002992:	2201      	movs	r2, #1
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43db      	mvns	r3, r3
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4013      	ands	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	f003 0201 	and.w	r2, r3, #1
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d017      	beq.n	80029fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	2203      	movs	r2, #3
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4013      	ands	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	693a      	ldr	r2, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d123      	bne.n	8002a4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	08da      	lsrs	r2, r3, #3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3208      	adds	r2, #8
 8002a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	220f      	movs	r2, #15
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4013      	ands	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	08da      	lsrs	r2, r3, #3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3208      	adds	r2, #8
 8002a48:	6939      	ldr	r1, [r7, #16]
 8002a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	2203      	movs	r2, #3
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 0203 	and.w	r2, r3, #3
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 80a6 	beq.w	8002bdc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a90:	4b5b      	ldr	r3, [pc, #364]	@ (8002c00 <HAL_GPIO_Init+0x2e4>)
 8002a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a94:	4a5a      	ldr	r2, [pc, #360]	@ (8002c00 <HAL_GPIO_Init+0x2e4>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a9c:	4b58      	ldr	r3, [pc, #352]	@ (8002c00 <HAL_GPIO_Init+0x2e4>)
 8002a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa8:	4a56      	ldr	r2, [pc, #344]	@ (8002c04 <HAL_GPIO_Init+0x2e8>)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	089b      	lsrs	r3, r3, #2
 8002aae:	3302      	adds	r3, #2
 8002ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	220f      	movs	r2, #15
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002ad2:	d01f      	beq.n	8002b14 <HAL_GPIO_Init+0x1f8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a4c      	ldr	r2, [pc, #304]	@ (8002c08 <HAL_GPIO_Init+0x2ec>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d019      	beq.n	8002b10 <HAL_GPIO_Init+0x1f4>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a4b      	ldr	r2, [pc, #300]	@ (8002c0c <HAL_GPIO_Init+0x2f0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d013      	beq.n	8002b0c <HAL_GPIO_Init+0x1f0>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a4a      	ldr	r2, [pc, #296]	@ (8002c10 <HAL_GPIO_Init+0x2f4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00d      	beq.n	8002b08 <HAL_GPIO_Init+0x1ec>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a49      	ldr	r2, [pc, #292]	@ (8002c14 <HAL_GPIO_Init+0x2f8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d007      	beq.n	8002b04 <HAL_GPIO_Init+0x1e8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a48      	ldr	r2, [pc, #288]	@ (8002c18 <HAL_GPIO_Init+0x2fc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d101      	bne.n	8002b00 <HAL_GPIO_Init+0x1e4>
 8002afc:	2305      	movs	r3, #5
 8002afe:	e00a      	b.n	8002b16 <HAL_GPIO_Init+0x1fa>
 8002b00:	2306      	movs	r3, #6
 8002b02:	e008      	b.n	8002b16 <HAL_GPIO_Init+0x1fa>
 8002b04:	2304      	movs	r3, #4
 8002b06:	e006      	b.n	8002b16 <HAL_GPIO_Init+0x1fa>
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e004      	b.n	8002b16 <HAL_GPIO_Init+0x1fa>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e002      	b.n	8002b16 <HAL_GPIO_Init+0x1fa>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <HAL_GPIO_Init+0x1fa>
 8002b14:	2300      	movs	r3, #0
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	f002 0203 	and.w	r2, r2, #3
 8002b1c:	0092      	lsls	r2, r2, #2
 8002b1e:	4093      	lsls	r3, r2
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b26:	4937      	ldr	r1, [pc, #220]	@ (8002c04 <HAL_GPIO_Init+0x2e8>)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b34:	4b39      	ldr	r3, [pc, #228]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b58:	4a30      	ldr	r2, [pc, #192]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b82:	4a26      	ldr	r2, [pc, #152]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002b88:	4b24      	ldr	r3, [pc, #144]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bac:	4a1b      	ldr	r2, [pc, #108]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bd6:	4a11      	ldr	r2, [pc, #68]	@ (8002c1c <HAL_GPIO_Init+0x300>)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3301      	adds	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f47f ae9d 	bne.w	800292c <HAL_GPIO_Init+0x10>
  }
}
 8002bf2:	bf00      	nop
 8002bf4:	bf00      	nop
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40010000 	.word	0x40010000
 8002c08:	48000400 	.word	0x48000400
 8002c0c:	48000800 	.word	0x48000800
 8002c10:	48000c00 	.word	0x48000c00
 8002c14:	48001000 	.word	0x48001000
 8002c18:	48001400 	.word	0x48001400
 8002c1c:	40010400 	.word	0x40010400

08002c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c30:	787b      	ldrb	r3, [r7, #1]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c36:	887a      	ldrh	r2, [r7, #2]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c3c:	e002      	b.n	8002c44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c3e:	887a      	ldrh	r2, [r7, #2]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c62:	887a      	ldrh	r2, [r7, #2]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4013      	ands	r3, r2
 8002c68:	041a      	lsls	r2, r3, #16
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	43d9      	mvns	r1, r3
 8002c6e:	887b      	ldrh	r3, [r7, #2]
 8002c70:	400b      	ands	r3, r1
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	619a      	str	r2, [r3, #24]
}
 8002c78:	bf00      	nop
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e08d      	b.n	8002db2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fd fe06 	bl	80008bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2224      	movs	r2, #36	@ 0x24
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ce4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d107      	bne.n	8002cfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	e006      	b.n	8002d0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002d0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d108      	bne.n	8002d26 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d22:	605a      	str	r2, [r3, #4]
 8002d24:	e007      	b.n	8002d36 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69d9      	ldr	r1, [r3, #28]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1a      	ldr	r2, [r3, #32]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d138      	bne.n	8002e42 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002dda:	2302      	movs	r3, #2
 8002ddc:	e032      	b.n	8002e44 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2224      	movs	r2, #36	@ 0x24
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0201 	bic.w	r2, r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e0c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6819      	ldr	r1, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0201 	orr.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e000      	b.n	8002e44 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e42:	2302      	movs	r3, #2
  }
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d139      	bne.n	8002eda <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e033      	b.n	8002edc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2224      	movs	r2, #36	@ 0x24
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0201 	bic.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ea2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0201 	orr.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e000      	b.n	8002edc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002eda:	2302      	movs	r3, #2
  }
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d141      	bne.n	8002f7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ef6:	4b4b      	ldr	r3, [pc, #300]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f02:	d131      	bne.n	8002f68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f04:	4b47      	ldr	r3, [pc, #284]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f0a:	4a46      	ldr	r2, [pc, #280]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f14:	4b43      	ldr	r3, [pc, #268]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f1c:	4a41      	ldr	r2, [pc, #260]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f24:	4b40      	ldr	r3, [pc, #256]	@ (8003028 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2232      	movs	r2, #50	@ 0x32
 8002f2a:	fb02 f303 	mul.w	r3, r2, r3
 8002f2e:	4a3f      	ldr	r2, [pc, #252]	@ (800302c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f30:	fba2 2303 	umull	r2, r3, r2, r3
 8002f34:	0c9b      	lsrs	r3, r3, #18
 8002f36:	3301      	adds	r3, #1
 8002f38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f3a:	e002      	b.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f42:	4b38      	ldr	r3, [pc, #224]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f4e:	d102      	bne.n	8002f56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f2      	bne.n	8002f3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f56:	4b33      	ldr	r3, [pc, #204]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f62:	d158      	bne.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e057      	b.n	8003018 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f68:	4b2e      	ldr	r3, [pc, #184]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f78:	e04d      	b.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f80:	d141      	bne.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f82:	4b28      	ldr	r3, [pc, #160]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f8e:	d131      	bne.n	8002ff4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f90:	4b24      	ldr	r3, [pc, #144]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f96:	4a23      	ldr	r2, [pc, #140]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fa0:	4b20      	ldr	r3, [pc, #128]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002faa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003028 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2232      	movs	r2, #50	@ 0x32
 8002fb6:	fb02 f303 	mul.w	r3, r2, r3
 8002fba:	4a1c      	ldr	r2, [pc, #112]	@ (800302c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	0c9b      	lsrs	r3, r3, #18
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fc6:	e002      	b.n	8002fce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fce:	4b15      	ldr	r3, [pc, #84]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fda:	d102      	bne.n	8002fe2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f2      	bne.n	8002fc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fe2:	4b10      	ldr	r3, [pc, #64]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fee:	d112      	bne.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e011      	b.n	8003018 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003000:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003004:	e007      	b.n	8003016 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003006:	4b07      	ldr	r3, [pc, #28]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800300e:	4a05      	ldr	r2, [pc, #20]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003010:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003014:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	40007000 	.word	0x40007000
 8003028:	20000000 	.word	0x20000000
 800302c:	431bde83 	.word	0x431bde83

08003030 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003034:	4b05      	ldr	r3, [pc, #20]	@ (800304c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4a04      	ldr	r2, [pc, #16]	@ (800304c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800303a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800303e:	6093      	str	r3, [r2, #8]
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40007000 	.word	0x40007000

08003050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e2fe      	b.n	8003660 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d075      	beq.n	800315a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800306e:	4b97      	ldr	r3, [pc, #604]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003078:	4b94      	ldr	r3, [pc, #592]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b0c      	cmp	r3, #12
 8003086:	d102      	bne.n	800308e <HAL_RCC_OscConfig+0x3e>
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2b03      	cmp	r3, #3
 800308c:	d002      	beq.n	8003094 <HAL_RCC_OscConfig+0x44>
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b08      	cmp	r3, #8
 8003092:	d10b      	bne.n	80030ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	4b8d      	ldr	r3, [pc, #564]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d05b      	beq.n	8003158 <HAL_RCC_OscConfig+0x108>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d157      	bne.n	8003158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e2d9      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030b4:	d106      	bne.n	80030c4 <HAL_RCC_OscConfig+0x74>
 80030b6:	4b85      	ldr	r3, [pc, #532]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a84      	ldr	r2, [pc, #528]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 80030bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e01d      	b.n	8003100 <HAL_RCC_OscConfig+0xb0>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x98>
 80030ce:	4b7f      	ldr	r3, [pc, #508]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a7e      	ldr	r2, [pc, #504]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 80030d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b7c      	ldr	r3, [pc, #496]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a7b      	ldr	r2, [pc, #492]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 80030e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e00b      	b.n	8003100 <HAL_RCC_OscConfig+0xb0>
 80030e8:	4b78      	ldr	r3, [pc, #480]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a77      	ldr	r2, [pc, #476]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 80030ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b75      	ldr	r3, [pc, #468]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a74      	ldr	r2, [pc, #464]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 80030fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7fe f9f6 	bl	80014f8 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003110:	f7fe f9f2 	bl	80014f8 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	@ 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e29e      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003122:	4b6a      	ldr	r3, [pc, #424]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0xc0>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fe f9e2 	bl	80014f8 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003138:	f7fe f9de 	bl	80014f8 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	@ 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e28a      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800314a:	4b60      	ldr	r3, [pc, #384]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0xe8>
 8003156:	e000      	b.n	800315a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d075      	beq.n	8003252 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003166:	4b59      	ldr	r3, [pc, #356]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003170:	4b56      	ldr	r3, [pc, #344]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b0c      	cmp	r3, #12
 800317e:	d102      	bne.n	8003186 <HAL_RCC_OscConfig+0x136>
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d002      	beq.n	800318c <HAL_RCC_OscConfig+0x13c>
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	2b04      	cmp	r3, #4
 800318a:	d11f      	bne.n	80031cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800318c:	4b4f      	ldr	r3, [pc, #316]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_OscConfig+0x154>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e25d      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a4:	4b49      	ldr	r3, [pc, #292]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	061b      	lsls	r3, r3, #24
 80031b2:	4946      	ldr	r1, [pc, #280]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031b8:	4b45      	ldr	r3, [pc, #276]	@ (80032d0 <HAL_RCC_OscConfig+0x280>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe f94f 	bl	8001460 <HAL_InitTick>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d043      	beq.n	8003250 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e249      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d023      	beq.n	800321c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d4:	4b3d      	ldr	r3, [pc, #244]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a3c      	ldr	r2, [pc, #240]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 80031da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe f98a 	bl	80014f8 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e8:	f7fe f986 	bl	80014f8 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e232      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031fa:	4b34      	ldr	r3, [pc, #208]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003206:	4b31      	ldr	r3, [pc, #196]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	061b      	lsls	r3, r3, #24
 8003214:	492d      	ldr	r1, [pc, #180]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 8003216:	4313      	orrs	r3, r2
 8003218:	604b      	str	r3, [r1, #4]
 800321a:	e01a      	b.n	8003252 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321c:	4b2b      	ldr	r3, [pc, #172]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2a      	ldr	r2, [pc, #168]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 8003222:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7fe f966 	bl	80014f8 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003230:	f7fe f962 	bl	80014f8 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e20e      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003242:	4b22      	ldr	r3, [pc, #136]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x1e0>
 800324e:	e000      	b.n	8003252 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003250:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b00      	cmp	r3, #0
 800325c:	d041      	beq.n	80032e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01c      	beq.n	80032a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003266:	4b19      	ldr	r3, [pc, #100]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 8003268:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800326c:	4a17      	ldr	r2, [pc, #92]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003276:	f7fe f93f 	bl	80014f8 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800327e:	f7fe f93b 	bl	80014f8 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e1e7      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003290:	4b0e      	ldr	r3, [pc, #56]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 8003292:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0ef      	beq.n	800327e <HAL_RCC_OscConfig+0x22e>
 800329e:	e020      	b.n	80032e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a0:	4b0a      	ldr	r3, [pc, #40]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 80032a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032a6:	4a09      	ldr	r2, [pc, #36]	@ (80032cc <HAL_RCC_OscConfig+0x27c>)
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b0:	f7fe f922 	bl	80014f8 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032b6:	e00d      	b.n	80032d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b8:	f7fe f91e 	bl	80014f8 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d906      	bls.n	80032d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e1ca      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000
 80032d0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032d4:	4b8c      	ldr	r3, [pc, #560]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 80032d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1ea      	bne.n	80032b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0304 	and.w	r3, r3, #4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 80a6 	beq.w	800343c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f0:	2300      	movs	r3, #0
 80032f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032f4:	4b84      	ldr	r3, [pc, #528]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_RCC_OscConfig+0x2b4>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x2b6>
 8003304:	2300      	movs	r3, #0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00d      	beq.n	8003326 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330a:	4b7f      	ldr	r3, [pc, #508]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 800330c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330e:	4a7e      	ldr	r2, [pc, #504]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 8003310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003314:	6593      	str	r3, [r2, #88]	@ 0x58
 8003316:	4b7c      	ldr	r3, [pc, #496]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 8003318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003322:	2301      	movs	r3, #1
 8003324:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003326:	4b79      	ldr	r3, [pc, #484]	@ (800350c <HAL_RCC_OscConfig+0x4bc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d118      	bne.n	8003364 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003332:	4b76      	ldr	r3, [pc, #472]	@ (800350c <HAL_RCC_OscConfig+0x4bc>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a75      	ldr	r2, [pc, #468]	@ (800350c <HAL_RCC_OscConfig+0x4bc>)
 8003338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800333c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800333e:	f7fe f8db 	bl	80014f8 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003346:	f7fe f8d7 	bl	80014f8 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e183      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003358:	4b6c      	ldr	r3, [pc, #432]	@ (800350c <HAL_RCC_OscConfig+0x4bc>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d108      	bne.n	800337e <HAL_RCC_OscConfig+0x32e>
 800336c:	4b66      	ldr	r3, [pc, #408]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003372:	4a65      	ldr	r2, [pc, #404]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800337c:	e024      	b.n	80033c8 <HAL_RCC_OscConfig+0x378>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b05      	cmp	r3, #5
 8003384:	d110      	bne.n	80033a8 <HAL_RCC_OscConfig+0x358>
 8003386:	4b60      	ldr	r3, [pc, #384]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 8003388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338c:	4a5e      	ldr	r2, [pc, #376]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 800338e:	f043 0304 	orr.w	r3, r3, #4
 8003392:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003396:	4b5c      	ldr	r3, [pc, #368]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339c:	4a5a      	ldr	r2, [pc, #360]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033a6:	e00f      	b.n	80033c8 <HAL_RCC_OscConfig+0x378>
 80033a8:	4b57      	ldr	r3, [pc, #348]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ae:	4a56      	ldr	r2, [pc, #344]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033b8:	4b53      	ldr	r3, [pc, #332]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033be:	4a52      	ldr	r2, [pc, #328]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d016      	beq.n	80033fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fe f892 	bl	80014f8 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033d6:	e00a      	b.n	80033ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d8:	f7fe f88e 	bl	80014f8 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e138      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ee:	4b46      	ldr	r3, [pc, #280]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 80033f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ed      	beq.n	80033d8 <HAL_RCC_OscConfig+0x388>
 80033fc:	e015      	b.n	800342a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7fe f87b 	bl	80014f8 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003404:	e00a      	b.n	800341c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7fe f877 	bl	80014f8 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003414:	4293      	cmp	r3, r2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e121      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800341c:	4b3a      	ldr	r3, [pc, #232]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1ed      	bne.n	8003406 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800342a:	7ffb      	ldrb	r3, [r7, #31]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d105      	bne.n	800343c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003430:	4b35      	ldr	r3, [pc, #212]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 8003432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003434:	4a34      	ldr	r2, [pc, #208]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 8003436:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800343a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0320 	and.w	r3, r3, #32
 8003444:	2b00      	cmp	r3, #0
 8003446:	d03c      	beq.n	80034c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01c      	beq.n	800348a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003450:	4b2d      	ldr	r3, [pc, #180]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 8003452:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003456:	4a2c      	ldr	r2, [pc, #176]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003460:	f7fe f84a 	bl	80014f8 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003468:	f7fe f846 	bl	80014f8 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e0f2      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800347a:	4b23      	ldr	r3, [pc, #140]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 800347c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0ef      	beq.n	8003468 <HAL_RCC_OscConfig+0x418>
 8003488:	e01b      	b.n	80034c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800348a:	4b1f      	ldr	r3, [pc, #124]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 800348c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003490:	4a1d      	ldr	r2, [pc, #116]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 8003492:	f023 0301 	bic.w	r3, r3, #1
 8003496:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7fe f82d 	bl	80014f8 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034a2:	f7fe f829 	bl	80014f8 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e0d5      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034b4:	4b14      	ldr	r3, [pc, #80]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 80034b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1ef      	bne.n	80034a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80c9 	beq.w	800365e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b0c      	cmp	r3, #12
 80034d6:	f000 8083 	beq.w	80035e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d15e      	bne.n	80035a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e2:	4b09      	ldr	r3, [pc, #36]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a08      	ldr	r2, [pc, #32]	@ (8003508 <HAL_RCC_OscConfig+0x4b8>)
 80034e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ee:	f7fe f803 	bl	80014f8 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f4:	e00c      	b.n	8003510 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f6:	f7fd ffff 	bl	80014f8 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d905      	bls.n	8003510 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e0ab      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
 8003508:	40021000 	.word	0x40021000
 800350c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003510:	4b55      	ldr	r3, [pc, #340]	@ (8003668 <HAL_RCC_OscConfig+0x618>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1ec      	bne.n	80034f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800351c:	4b52      	ldr	r3, [pc, #328]	@ (8003668 <HAL_RCC_OscConfig+0x618>)
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	4b52      	ldr	r3, [pc, #328]	@ (800366c <HAL_RCC_OscConfig+0x61c>)
 8003522:	4013      	ands	r3, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6a11      	ldr	r1, [r2, #32]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800352c:	3a01      	subs	r2, #1
 800352e:	0112      	lsls	r2, r2, #4
 8003530:	4311      	orrs	r1, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003536:	0212      	lsls	r2, r2, #8
 8003538:	4311      	orrs	r1, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800353e:	0852      	lsrs	r2, r2, #1
 8003540:	3a01      	subs	r2, #1
 8003542:	0552      	lsls	r2, r2, #21
 8003544:	4311      	orrs	r1, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800354a:	0852      	lsrs	r2, r2, #1
 800354c:	3a01      	subs	r2, #1
 800354e:	0652      	lsls	r2, r2, #25
 8003550:	4311      	orrs	r1, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003556:	06d2      	lsls	r2, r2, #27
 8003558:	430a      	orrs	r2, r1
 800355a:	4943      	ldr	r1, [pc, #268]	@ (8003668 <HAL_RCC_OscConfig+0x618>)
 800355c:	4313      	orrs	r3, r2
 800355e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003560:	4b41      	ldr	r3, [pc, #260]	@ (8003668 <HAL_RCC_OscConfig+0x618>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a40      	ldr	r2, [pc, #256]	@ (8003668 <HAL_RCC_OscConfig+0x618>)
 8003566:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800356a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800356c:	4b3e      	ldr	r3, [pc, #248]	@ (8003668 <HAL_RCC_OscConfig+0x618>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4a3d      	ldr	r2, [pc, #244]	@ (8003668 <HAL_RCC_OscConfig+0x618>)
 8003572:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003576:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fd ffbe 	bl	80014f8 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003580:	f7fd ffba 	bl	80014f8 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e066      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003592:	4b35      	ldr	r3, [pc, #212]	@ (8003668 <HAL_RCC_OscConfig+0x618>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x530>
 800359e:	e05e      	b.n	800365e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a0:	4b31      	ldr	r3, [pc, #196]	@ (8003668 <HAL_RCC_OscConfig+0x618>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a30      	ldr	r2, [pc, #192]	@ (8003668 <HAL_RCC_OscConfig+0x618>)
 80035a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fd ffa4 	bl	80014f8 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fd ffa0 	bl	80014f8 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e04c      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c6:	4b28      	ldr	r3, [pc, #160]	@ (8003668 <HAL_RCC_OscConfig+0x618>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80035d2:	4b25      	ldr	r3, [pc, #148]	@ (8003668 <HAL_RCC_OscConfig+0x618>)
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	4924      	ldr	r1, [pc, #144]	@ (8003668 <HAL_RCC_OscConfig+0x618>)
 80035d8:	4b25      	ldr	r3, [pc, #148]	@ (8003670 <HAL_RCC_OscConfig+0x620>)
 80035da:	4013      	ands	r3, r2
 80035dc:	60cb      	str	r3, [r1, #12]
 80035de:	e03e      	b.n	800365e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e039      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80035ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003668 <HAL_RCC_OscConfig+0x618>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f003 0203 	and.w	r2, r3, #3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d12c      	bne.n	800365a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	3b01      	subs	r3, #1
 800360c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d123      	bne.n	800365a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800361e:	429a      	cmp	r2, r3
 8003620:	d11b      	bne.n	800365a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d113      	bne.n	800365a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	3b01      	subs	r3, #1
 8003640:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003642:	429a      	cmp	r2, r3
 8003644:	d109      	bne.n	800365a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003650:	085b      	lsrs	r3, r3, #1
 8003652:	3b01      	subs	r3, #1
 8003654:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d001      	beq.n	800365e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e000      	b.n	8003660 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3720      	adds	r7, #32
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	019f800c 	.word	0x019f800c
 8003670:	feeefffc 	.word	0xfeeefffc

08003674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e11e      	b.n	80038ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800368c:	4b91      	ldr	r3, [pc, #580]	@ (80038d4 <HAL_RCC_ClockConfig+0x260>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d910      	bls.n	80036bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800369a:	4b8e      	ldr	r3, [pc, #568]	@ (80038d4 <HAL_RCC_ClockConfig+0x260>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 020f 	bic.w	r2, r3, #15
 80036a2:	498c      	ldr	r1, [pc, #560]	@ (80038d4 <HAL_RCC_ClockConfig+0x260>)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036aa:	4b8a      	ldr	r3, [pc, #552]	@ (80038d4 <HAL_RCC_ClockConfig+0x260>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e106      	b.n	80038ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d073      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d129      	bne.n	8003724 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d0:	4b81      	ldr	r3, [pc, #516]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0f4      	b.n	80038ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80036e0:	f000 f99c 	bl	8003a1c <RCC_GetSysClockFreqFromPLLSource>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	4a7c      	ldr	r2, [pc, #496]	@ (80038dc <HAL_RCC_ClockConfig+0x268>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d93f      	bls.n	800376e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036ee:	4b7a      	ldr	r3, [pc, #488]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003702:	2b00      	cmp	r3, #0
 8003704:	d033      	beq.n	800376e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800370a:	2b00      	cmp	r3, #0
 800370c:	d12f      	bne.n	800376e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800370e:	4b72      	ldr	r3, [pc, #456]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003716:	4a70      	ldr	r2, [pc, #448]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 8003718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800371c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800371e:	2380      	movs	r3, #128	@ 0x80
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	e024      	b.n	800376e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d107      	bne.n	800373c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800372c:	4b6a      	ldr	r3, [pc, #424]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d109      	bne.n	800374c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e0c6      	b.n	80038ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800373c:	4b66      	ldr	r3, [pc, #408]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e0be      	b.n	80038ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800374c:	f000 f8ce 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 8003750:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4a61      	ldr	r2, [pc, #388]	@ (80038dc <HAL_RCC_ClockConfig+0x268>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d909      	bls.n	800376e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800375a:	4b5f      	ldr	r3, [pc, #380]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003762:	4a5d      	ldr	r2, [pc, #372]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 8003764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003768:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800376a:	2380      	movs	r3, #128	@ 0x80
 800376c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800376e:	4b5a      	ldr	r3, [pc, #360]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f023 0203 	bic.w	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4957      	ldr	r1, [pc, #348]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 800377c:	4313      	orrs	r3, r2
 800377e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003780:	f7fd feba 	bl	80014f8 <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	e00a      	b.n	800379e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003788:	f7fd feb6 	bl	80014f8 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e095      	b.n	80038ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	4b4e      	ldr	r3, [pc, #312]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 020c 	and.w	r2, r3, #12
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d1eb      	bne.n	8003788 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d023      	beq.n	8003804 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0304 	and.w	r3, r3, #4
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037c8:	4b43      	ldr	r3, [pc, #268]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	4a42      	ldr	r2, [pc, #264]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 80037ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80037e0:	4b3d      	ldr	r3, [pc, #244]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80037e8:	4a3b      	ldr	r2, [pc, #236]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 80037ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f0:	4b39      	ldr	r3, [pc, #228]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4936      	ldr	r1, [pc, #216]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
 8003802:	e008      	b.n	8003816 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2b80      	cmp	r3, #128	@ 0x80
 8003808:	d105      	bne.n	8003816 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800380a:	4b33      	ldr	r3, [pc, #204]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	4a32      	ldr	r2, [pc, #200]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 8003810:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003814:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003816:	4b2f      	ldr	r3, [pc, #188]	@ (80038d4 <HAL_RCC_ClockConfig+0x260>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d21d      	bcs.n	8003860 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003824:	4b2b      	ldr	r3, [pc, #172]	@ (80038d4 <HAL_RCC_ClockConfig+0x260>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 020f 	bic.w	r2, r3, #15
 800382c:	4929      	ldr	r1, [pc, #164]	@ (80038d4 <HAL_RCC_ClockConfig+0x260>)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003834:	f7fd fe60 	bl	80014f8 <HAL_GetTick>
 8003838:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800383a:	e00a      	b.n	8003852 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383c:	f7fd fe5c 	bl	80014f8 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e03b      	b.n	80038ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b20      	ldr	r3, [pc, #128]	@ (80038d4 <HAL_RCC_ClockConfig+0x260>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d1ed      	bne.n	800383c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800386c:	4b1a      	ldr	r3, [pc, #104]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	4917      	ldr	r1, [pc, #92]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800388a:	4b13      	ldr	r3, [pc, #76]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	490f      	ldr	r1, [pc, #60]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800389e:	f000 f825 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 80038a2:	4602      	mov	r2, r0
 80038a4:	4b0c      	ldr	r3, [pc, #48]	@ (80038d8 <HAL_RCC_ClockConfig+0x264>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	091b      	lsrs	r3, r3, #4
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	490c      	ldr	r1, [pc, #48]	@ (80038e0 <HAL_RCC_ClockConfig+0x26c>)
 80038b0:	5ccb      	ldrb	r3, [r1, r3]
 80038b2:	f003 031f 	and.w	r3, r3, #31
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	4a0a      	ldr	r2, [pc, #40]	@ (80038e4 <HAL_RCC_ClockConfig+0x270>)
 80038bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038be:	4b0a      	ldr	r3, [pc, #40]	@ (80038e8 <HAL_RCC_ClockConfig+0x274>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fd fdcc 	bl	8001460 <HAL_InitTick>
 80038c8:	4603      	mov	r3, r0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40022000 	.word	0x40022000
 80038d8:	40021000 	.word	0x40021000
 80038dc:	04c4b400 	.word	0x04c4b400
 80038e0:	08006550 	.word	0x08006550
 80038e4:	20000000 	.word	0x20000000
 80038e8:	20000004 	.word	0x20000004

080038ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038f2:	4b2c      	ldr	r3, [pc, #176]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d102      	bne.n	8003904 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038fe:	4b2a      	ldr	r3, [pc, #168]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	e047      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003904:	4b27      	ldr	r3, [pc, #156]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b08      	cmp	r3, #8
 800390e:	d102      	bne.n	8003916 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003910:	4b25      	ldr	r3, [pc, #148]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	e03e      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003916:	4b23      	ldr	r3, [pc, #140]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b0c      	cmp	r3, #12
 8003920:	d136      	bne.n	8003990 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003922:	4b20      	ldr	r3, [pc, #128]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800392c:	4b1d      	ldr	r3, [pc, #116]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	091b      	lsrs	r3, r3, #4
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	3301      	adds	r3, #1
 8003938:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b03      	cmp	r3, #3
 800393e:	d10c      	bne.n	800395a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003940:	4a19      	ldr	r2, [pc, #100]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	4a16      	ldr	r2, [pc, #88]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800394a:	68d2      	ldr	r2, [r2, #12]
 800394c:	0a12      	lsrs	r2, r2, #8
 800394e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003952:	fb02 f303 	mul.w	r3, r2, r3
 8003956:	617b      	str	r3, [r7, #20]
      break;
 8003958:	e00c      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800395a:	4a13      	ldr	r2, [pc, #76]	@ (80039a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003962:	4a10      	ldr	r2, [pc, #64]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003964:	68d2      	ldr	r2, [r2, #12]
 8003966:	0a12      	lsrs	r2, r2, #8
 8003968:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800396c:	fb02 f303 	mul.w	r3, r2, r3
 8003970:	617b      	str	r3, [r7, #20]
      break;
 8003972:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003974:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	0e5b      	lsrs	r3, r3, #25
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	3301      	adds	r3, #1
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	fbb2 f3f3 	udiv	r3, r2, r3
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	e001      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003994:	693b      	ldr	r3, [r7, #16]
}
 8003996:	4618      	mov	r0, r3
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40021000 	.word	0x40021000
 80039a8:	00f42400 	.word	0x00f42400

080039ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b0:	4b03      	ldr	r3, [pc, #12]	@ (80039c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039b2:	681b      	ldr	r3, [r3, #0]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000000 	.word	0x20000000

080039c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039c8:	f7ff fff0 	bl	80039ac <HAL_RCC_GetHCLKFreq>
 80039cc:	4602      	mov	r2, r0
 80039ce:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	0a1b      	lsrs	r3, r3, #8
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	4904      	ldr	r1, [pc, #16]	@ (80039ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80039da:	5ccb      	ldrb	r3, [r1, r3]
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000
 80039ec:	08006560 	.word	0x08006560

080039f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039f4:	f7ff ffda 	bl	80039ac <HAL_RCC_GetHCLKFreq>
 80039f8:	4602      	mov	r2, r0
 80039fa:	4b06      	ldr	r3, [pc, #24]	@ (8003a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	0adb      	lsrs	r3, r3, #11
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	4904      	ldr	r1, [pc, #16]	@ (8003a18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a06:	5ccb      	ldrb	r3, [r1, r3]
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000
 8003a18:	08006560 	.word	0x08006560

08003a1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a22:	4b1e      	ldr	r3, [pc, #120]	@ (8003a9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	3301      	adds	r3, #1
 8003a38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d10c      	bne.n	8003a5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a40:	4a17      	ldr	r2, [pc, #92]	@ (8003aa0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a48:	4a14      	ldr	r2, [pc, #80]	@ (8003a9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a4a:	68d2      	ldr	r2, [r2, #12]
 8003a4c:	0a12      	lsrs	r2, r2, #8
 8003a4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a52:	fb02 f303 	mul.w	r3, r2, r3
 8003a56:	617b      	str	r3, [r7, #20]
    break;
 8003a58:	e00c      	b.n	8003a74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a5a:	4a11      	ldr	r2, [pc, #68]	@ (8003aa0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a62:	4a0e      	ldr	r2, [pc, #56]	@ (8003a9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a64:	68d2      	ldr	r2, [r2, #12]
 8003a66:	0a12      	lsrs	r2, r2, #8
 8003a68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
 8003a70:	617b      	str	r3, [r7, #20]
    break;
 8003a72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a74:	4b09      	ldr	r3, [pc, #36]	@ (8003a9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	0e5b      	lsrs	r3, r3, #25
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003a8e:	687b      	ldr	r3, [r7, #4]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	00f42400 	.word	0x00f42400

08003aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003aac:	2300      	movs	r3, #0
 8003aae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8098 	beq.w	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac6:	4b43      	ldr	r3, [pc, #268]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10d      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad2:	4b40      	ldr	r3, [pc, #256]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad6:	4a3f      	ldr	r2, [pc, #252]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003adc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ade:	4b3d      	ldr	r3, [pc, #244]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aea:	2301      	movs	r3, #1
 8003aec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aee:	4b3a      	ldr	r3, [pc, #232]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a39      	ldr	r2, [pc, #228]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003af4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003afa:	f7fd fcfd 	bl	80014f8 <HAL_GetTick>
 8003afe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b00:	e009      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b02:	f7fd fcf9 	bl	80014f8 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d902      	bls.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	74fb      	strb	r3, [r7, #19]
        break;
 8003b14:	e005      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b16:	4b30      	ldr	r3, [pc, #192]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0ef      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b22:	7cfb      	ldrb	r3, [r7, #19]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d159      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b28:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d01e      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d019      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b44:	4b23      	ldr	r3, [pc, #140]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b50:	4b20      	ldr	r3, [pc, #128]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b56:	4a1f      	ldr	r2, [pc, #124]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b60:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b66:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b70:	4a18      	ldr	r2, [pc, #96]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d016      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fd fcb9 	bl	80014f8 <HAL_GetTick>
 8003b86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b88:	e00b      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fd fcb5 	bl	80014f8 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d902      	bls.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	74fb      	strb	r3, [r7, #19]
            break;
 8003ba0:	e006      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0ec      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003bb0:	7cfb      	ldrb	r3, [r7, #19]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10b      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bb6:	4b07      	ldr	r3, [pc, #28]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc4:	4903      	ldr	r1, [pc, #12]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003bcc:	e008      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bce:	7cfb      	ldrb	r3, [r7, #19]
 8003bd0:	74bb      	strb	r3, [r7, #18]
 8003bd2:	e005      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bdc:	7cfb      	ldrb	r3, [r7, #19]
 8003bde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003be0:	7c7b      	ldrb	r3, [r7, #17]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d105      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be6:	4ba7      	ldr	r3, [pc, #668]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bea:	4aa6      	ldr	r2, [pc, #664]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bf0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bfe:	4ba1      	ldr	r3, [pc, #644]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c04:	f023 0203 	bic.w	r2, r3, #3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	499d      	ldr	r1, [pc, #628]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c20:	4b98      	ldr	r3, [pc, #608]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c26:	f023 020c 	bic.w	r2, r3, #12
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	4995      	ldr	r1, [pc, #596]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c42:	4b90      	ldr	r3, [pc, #576]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c48:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	498c      	ldr	r1, [pc, #560]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c64:	4b87      	ldr	r3, [pc, #540]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	4984      	ldr	r1, [pc, #528]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00a      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c86:	4b7f      	ldr	r3, [pc, #508]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	497b      	ldr	r1, [pc, #492]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0320 	and.w	r3, r3, #32
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ca8:	4b76      	ldr	r3, [pc, #472]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	4973      	ldr	r1, [pc, #460]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00a      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cca:	4b6e      	ldr	r3, [pc, #440]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	496a      	ldr	r1, [pc, #424]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cec:	4b65      	ldr	r3, [pc, #404]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	4962      	ldr	r1, [pc, #392]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1c:	4959      	ldr	r1, [pc, #356]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d30:	4b54      	ldr	r3, [pc, #336]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d36:	f023 0203 	bic.w	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d3e:	4951      	ldr	r1, [pc, #324]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d52:	4b4c      	ldr	r3, [pc, #304]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d58:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d60:	4948      	ldr	r1, [pc, #288]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d015      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d74:	4b43      	ldr	r3, [pc, #268]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d82:	4940      	ldr	r1, [pc, #256]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d92:	d105      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d94:	4b3b      	ldr	r3, [pc, #236]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4a3a      	ldr	r2, [pc, #232]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d9e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d015      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dac:	4b35      	ldr	r3, [pc, #212]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dba:	4932      	ldr	r1, [pc, #200]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dca:	d105      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dd6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d015      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003de4:	4b27      	ldr	r3, [pc, #156]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df2:	4924      	ldr	r1, [pc, #144]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e02:	d105      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e04:	4b1f      	ldr	r3, [pc, #124]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4a1e      	ldr	r2, [pc, #120]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e0e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d015      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e1c:	4b19      	ldr	r3, [pc, #100]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2a:	4916      	ldr	r1, [pc, #88]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e3a:	d105      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e3c:	4b11      	ldr	r3, [pc, #68]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4a10      	ldr	r2, [pc, #64]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e46:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d019      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e54:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e62:	4908      	ldr	r1, [pc, #32]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e72:	d109      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e74:	4b03      	ldr	r3, [pc, #12]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4a02      	ldr	r2, [pc, #8]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e7e:	60d3      	str	r3, [r2, #12]
 8003e80:	e002      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003e82:	bf00      	nop
 8003e84:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d015      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e94:	4b29      	ldr	r3, [pc, #164]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea2:	4926      	ldr	r1, [pc, #152]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003eb2:	d105      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003eb4:	4b21      	ldr	r3, [pc, #132]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4a20      	ldr	r2, [pc, #128]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ebe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d015      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eda:	4918      	ldr	r1, [pc, #96]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eea:	d105      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003eec:	4b13      	ldr	r3, [pc, #76]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	4a12      	ldr	r2, [pc, #72]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d015      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f04:	4b0d      	ldr	r3, [pc, #52]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f12:	490a      	ldr	r1, [pc, #40]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f22:	d105      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f24:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4a04      	ldr	r2, [pc, #16]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f2e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f30:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40021000 	.word	0x40021000

08003f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e049      	b.n	8003fe6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7fd f840 	bl	8000fec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	f000 fd96 	bl	8004ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b082      	sub	sp, #8
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e049      	b.n	8004094 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d106      	bne.n	800401a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 f841 	bl	800409c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2202      	movs	r2, #2
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	3304      	adds	r3, #4
 800402a:	4619      	mov	r1, r3
 800402c:	4610      	mov	r0, r2
 800402e:	f000 fd3f 	bl	8004ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e049      	b.n	8004156 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f841 	bl	800415e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2202      	movs	r2, #2
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3304      	adds	r3, #4
 80040ec:	4619      	mov	r1, r3
 80040ee:	4610      	mov	r0, r2
 80040f0:	f000 fcde 	bl	8004ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d109      	bne.n	8004198 <HAL_TIM_PWM_Start+0x24>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	e03c      	b.n	8004212 <HAL_TIM_PWM_Start+0x9e>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b04      	cmp	r3, #4
 800419c:	d109      	bne.n	80041b2 <HAL_TIM_PWM_Start+0x3e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	bf14      	ite	ne
 80041aa:	2301      	movne	r3, #1
 80041ac:	2300      	moveq	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	e02f      	b.n	8004212 <HAL_TIM_PWM_Start+0x9e>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d109      	bne.n	80041cc <HAL_TIM_PWM_Start+0x58>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	bf14      	ite	ne
 80041c4:	2301      	movne	r3, #1
 80041c6:	2300      	moveq	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	e022      	b.n	8004212 <HAL_TIM_PWM_Start+0x9e>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b0c      	cmp	r3, #12
 80041d0:	d109      	bne.n	80041e6 <HAL_TIM_PWM_Start+0x72>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b01      	cmp	r3, #1
 80041dc:	bf14      	ite	ne
 80041de:	2301      	movne	r3, #1
 80041e0:	2300      	moveq	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	e015      	b.n	8004212 <HAL_TIM_PWM_Start+0x9e>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b10      	cmp	r3, #16
 80041ea:	d109      	bne.n	8004200 <HAL_TIM_PWM_Start+0x8c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	bf14      	ite	ne
 80041f8:	2301      	movne	r3, #1
 80041fa:	2300      	moveq	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	e008      	b.n	8004212 <HAL_TIM_PWM_Start+0x9e>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	bf14      	ite	ne
 800420c:	2301      	movne	r3, #1
 800420e:	2300      	moveq	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e0a6      	b.n	8004368 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d104      	bne.n	800422a <HAL_TIM_PWM_Start+0xb6>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004228:	e023      	b.n	8004272 <HAL_TIM_PWM_Start+0xfe>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b04      	cmp	r3, #4
 800422e:	d104      	bne.n	800423a <HAL_TIM_PWM_Start+0xc6>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004238:	e01b      	b.n	8004272 <HAL_TIM_PWM_Start+0xfe>
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b08      	cmp	r3, #8
 800423e:	d104      	bne.n	800424a <HAL_TIM_PWM_Start+0xd6>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2202      	movs	r2, #2
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004248:	e013      	b.n	8004272 <HAL_TIM_PWM_Start+0xfe>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b0c      	cmp	r3, #12
 800424e:	d104      	bne.n	800425a <HAL_TIM_PWM_Start+0xe6>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004258:	e00b      	b.n	8004272 <HAL_TIM_PWM_Start+0xfe>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b10      	cmp	r3, #16
 800425e:	d104      	bne.n	800426a <HAL_TIM_PWM_Start+0xf6>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004268:	e003      	b.n	8004272 <HAL_TIM_PWM_Start+0xfe>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2201      	movs	r2, #1
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f001 f972 	bl	8005564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a3a      	ldr	r2, [pc, #232]	@ (8004370 <HAL_TIM_PWM_Start+0x1fc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d018      	beq.n	80042bc <HAL_TIM_PWM_Start+0x148>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a39      	ldr	r2, [pc, #228]	@ (8004374 <HAL_TIM_PWM_Start+0x200>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <HAL_TIM_PWM_Start+0x148>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a37      	ldr	r2, [pc, #220]	@ (8004378 <HAL_TIM_PWM_Start+0x204>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00e      	beq.n	80042bc <HAL_TIM_PWM_Start+0x148>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a36      	ldr	r2, [pc, #216]	@ (800437c <HAL_TIM_PWM_Start+0x208>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d009      	beq.n	80042bc <HAL_TIM_PWM_Start+0x148>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a34      	ldr	r2, [pc, #208]	@ (8004380 <HAL_TIM_PWM_Start+0x20c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d004      	beq.n	80042bc <HAL_TIM_PWM_Start+0x148>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a33      	ldr	r2, [pc, #204]	@ (8004384 <HAL_TIM_PWM_Start+0x210>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d101      	bne.n	80042c0 <HAL_TIM_PWM_Start+0x14c>
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <HAL_TIM_PWM_Start+0x14e>
 80042c0:	2300      	movs	r3, #0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d007      	beq.n	80042d6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a25      	ldr	r2, [pc, #148]	@ (8004370 <HAL_TIM_PWM_Start+0x1fc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d022      	beq.n	8004326 <HAL_TIM_PWM_Start+0x1b2>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042e8:	d01d      	beq.n	8004326 <HAL_TIM_PWM_Start+0x1b2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a26      	ldr	r2, [pc, #152]	@ (8004388 <HAL_TIM_PWM_Start+0x214>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d018      	beq.n	8004326 <HAL_TIM_PWM_Start+0x1b2>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a24      	ldr	r2, [pc, #144]	@ (800438c <HAL_TIM_PWM_Start+0x218>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <HAL_TIM_PWM_Start+0x1b2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a23      	ldr	r2, [pc, #140]	@ (8004390 <HAL_TIM_PWM_Start+0x21c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00e      	beq.n	8004326 <HAL_TIM_PWM_Start+0x1b2>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a19      	ldr	r2, [pc, #100]	@ (8004374 <HAL_TIM_PWM_Start+0x200>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d009      	beq.n	8004326 <HAL_TIM_PWM_Start+0x1b2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a18      	ldr	r2, [pc, #96]	@ (8004378 <HAL_TIM_PWM_Start+0x204>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <HAL_TIM_PWM_Start+0x1b2>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a18      	ldr	r2, [pc, #96]	@ (8004384 <HAL_TIM_PWM_Start+0x210>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d115      	bne.n	8004352 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	4b19      	ldr	r3, [pc, #100]	@ (8004394 <HAL_TIM_PWM_Start+0x220>)
 800432e:	4013      	ands	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b06      	cmp	r3, #6
 8004336:	d015      	beq.n	8004364 <HAL_TIM_PWM_Start+0x1f0>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800433e:	d011      	beq.n	8004364 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004350:	e008      	b.n	8004364 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0201 	orr.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e000      	b.n	8004366 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004364:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40013400 	.word	0x40013400
 8004378:	40014000 	.word	0x40014000
 800437c:	40014400 	.word	0x40014400
 8004380:	40014800 	.word	0x40014800
 8004384:	40015000 	.word	0x40015000
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800
 8004390:	40000c00 	.word	0x40000c00
 8004394:	00010007 	.word	0x00010007

08004398 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e097      	b.n	80044dc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d106      	bne.n	80043c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7fc fdcf 	bl	8000f64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2202      	movs	r2, #2
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80043dc:	f023 0307 	bic.w	r3, r3, #7
 80043e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	3304      	adds	r3, #4
 80043ea:	4619      	mov	r1, r3
 80043ec:	4610      	mov	r0, r2
 80043ee:	f000 fb5f 	bl	8004ab0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800441a:	f023 0303 	bic.w	r3, r3, #3
 800441e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	4313      	orrs	r3, r2
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004438:	f023 030c 	bic.w	r3, r3, #12
 800443c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004444:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004448:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	4313      	orrs	r3, r2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	011a      	lsls	r2, r3, #4
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	031b      	lsls	r3, r3, #12
 8004468:	4313      	orrs	r3, r2
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004476:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800447e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	4313      	orrs	r3, r2
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d101      	bne.n	8004502 <HAL_TIM_OC_ConfigChannel+0x1e>
 80044fe:	2302      	movs	r3, #2
 8004500:	e066      	b.n	80045d0 <HAL_TIM_OC_ConfigChannel+0xec>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b14      	cmp	r3, #20
 800450e:	d857      	bhi.n	80045c0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8004510:	a201      	add	r2, pc, #4	@ (adr r2, 8004518 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	0800456d 	.word	0x0800456d
 800451c:	080045c1 	.word	0x080045c1
 8004520:	080045c1 	.word	0x080045c1
 8004524:	080045c1 	.word	0x080045c1
 8004528:	0800457b 	.word	0x0800457b
 800452c:	080045c1 	.word	0x080045c1
 8004530:	080045c1 	.word	0x080045c1
 8004534:	080045c1 	.word	0x080045c1
 8004538:	08004589 	.word	0x08004589
 800453c:	080045c1 	.word	0x080045c1
 8004540:	080045c1 	.word	0x080045c1
 8004544:	080045c1 	.word	0x080045c1
 8004548:	08004597 	.word	0x08004597
 800454c:	080045c1 	.word	0x080045c1
 8004550:	080045c1 	.word	0x080045c1
 8004554:	080045c1 	.word	0x080045c1
 8004558:	080045a5 	.word	0x080045a5
 800455c:	080045c1 	.word	0x080045c1
 8004560:	080045c1 	.word	0x080045c1
 8004564:	080045c1 	.word	0x080045c1
 8004568:	080045b3 	.word	0x080045b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68b9      	ldr	r1, [r7, #8]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fb50 	bl	8004c18 <TIM_OC1_SetConfig>
      break;
 8004578:	e025      	b.n	80045c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fbe3 	bl	8004d4c <TIM_OC2_SetConfig>
      break;
 8004586:	e01e      	b.n	80045c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fc70 	bl	8004e74 <TIM_OC3_SetConfig>
      break;
 8004594:	e017      	b.n	80045c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68b9      	ldr	r1, [r7, #8]
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fcfb 	bl	8004f98 <TIM_OC4_SetConfig>
      break;
 80045a2:	e010      	b.n	80045c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fd88 	bl	80050c0 <TIM_OC5_SetConfig>
      break;
 80045b0:	e009      	b.n	80045c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68b9      	ldr	r1, [r7, #8]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 fdeb 	bl	8005194 <TIM_OC6_SetConfig>
      break;
 80045be:	e002      	b.n	80045c6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	75fb      	strb	r3, [r7, #23]
      break;
 80045c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d101      	bne.n	80045f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045f2:	2302      	movs	r3, #2
 80045f4:	e0ff      	b.n	80047f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b14      	cmp	r3, #20
 8004602:	f200 80f0 	bhi.w	80047e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004606:	a201      	add	r2, pc, #4	@ (adr r2, 800460c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460c:	08004661 	.word	0x08004661
 8004610:	080047e7 	.word	0x080047e7
 8004614:	080047e7 	.word	0x080047e7
 8004618:	080047e7 	.word	0x080047e7
 800461c:	080046a1 	.word	0x080046a1
 8004620:	080047e7 	.word	0x080047e7
 8004624:	080047e7 	.word	0x080047e7
 8004628:	080047e7 	.word	0x080047e7
 800462c:	080046e3 	.word	0x080046e3
 8004630:	080047e7 	.word	0x080047e7
 8004634:	080047e7 	.word	0x080047e7
 8004638:	080047e7 	.word	0x080047e7
 800463c:	08004723 	.word	0x08004723
 8004640:	080047e7 	.word	0x080047e7
 8004644:	080047e7 	.word	0x080047e7
 8004648:	080047e7 	.word	0x080047e7
 800464c:	08004765 	.word	0x08004765
 8004650:	080047e7 	.word	0x080047e7
 8004654:	080047e7 	.word	0x080047e7
 8004658:	080047e7 	.word	0x080047e7
 800465c:	080047a5 	.word	0x080047a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fad6 	bl	8004c18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	699a      	ldr	r2, [r3, #24]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f042 0208 	orr.w	r2, r2, #8
 800467a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f022 0204 	bic.w	r2, r2, #4
 800468a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6999      	ldr	r1, [r3, #24]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	619a      	str	r2, [r3, #24]
      break;
 800469e:	e0a5      	b.n	80047ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fb50 	bl	8004d4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6999      	ldr	r1, [r3, #24]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	021a      	lsls	r2, r3, #8
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	619a      	str	r2, [r3, #24]
      break;
 80046e0:	e084      	b.n	80047ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68b9      	ldr	r1, [r7, #8]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fbc3 	bl	8004e74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69da      	ldr	r2, [r3, #28]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f042 0208 	orr.w	r2, r2, #8
 80046fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0204 	bic.w	r2, r2, #4
 800470c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69d9      	ldr	r1, [r3, #28]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	61da      	str	r2, [r3, #28]
      break;
 8004720:	e064      	b.n	80047ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68b9      	ldr	r1, [r7, #8]
 8004728:	4618      	mov	r0, r3
 800472a:	f000 fc35 	bl	8004f98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	69da      	ldr	r2, [r3, #28]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800473c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69da      	ldr	r2, [r3, #28]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800474c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69d9      	ldr	r1, [r3, #28]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	021a      	lsls	r2, r3, #8
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	61da      	str	r2, [r3, #28]
      break;
 8004762:	e043      	b.n	80047ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fca8 	bl	80050c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0208 	orr.w	r2, r2, #8
 800477e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0204 	bic.w	r2, r2, #4
 800478e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	691a      	ldr	r2, [r3, #16]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80047a2:	e023      	b.n	80047ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fcf2 	bl	8005194 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047be:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	021a      	lsls	r2, r3, #8
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80047e4:	e002      	b.n	80047ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	75fb      	strb	r3, [r7, #23]
      break;
 80047ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop

08004800 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_TIM_ConfigClockSource+0x1c>
 8004818:	2302      	movs	r3, #2
 800481a:	e0f6      	b.n	8004a0a <HAL_TIM_ConfigClockSource+0x20a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800483a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800483e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a6f      	ldr	r2, [pc, #444]	@ (8004a14 <HAL_TIM_ConfigClockSource+0x214>)
 8004856:	4293      	cmp	r3, r2
 8004858:	f000 80c1 	beq.w	80049de <HAL_TIM_ConfigClockSource+0x1de>
 800485c:	4a6d      	ldr	r2, [pc, #436]	@ (8004a14 <HAL_TIM_ConfigClockSource+0x214>)
 800485e:	4293      	cmp	r3, r2
 8004860:	f200 80c6 	bhi.w	80049f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004864:	4a6c      	ldr	r2, [pc, #432]	@ (8004a18 <HAL_TIM_ConfigClockSource+0x218>)
 8004866:	4293      	cmp	r3, r2
 8004868:	f000 80b9 	beq.w	80049de <HAL_TIM_ConfigClockSource+0x1de>
 800486c:	4a6a      	ldr	r2, [pc, #424]	@ (8004a18 <HAL_TIM_ConfigClockSource+0x218>)
 800486e:	4293      	cmp	r3, r2
 8004870:	f200 80be 	bhi.w	80049f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004874:	4a69      	ldr	r2, [pc, #420]	@ (8004a1c <HAL_TIM_ConfigClockSource+0x21c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	f000 80b1 	beq.w	80049de <HAL_TIM_ConfigClockSource+0x1de>
 800487c:	4a67      	ldr	r2, [pc, #412]	@ (8004a1c <HAL_TIM_ConfigClockSource+0x21c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	f200 80b6 	bhi.w	80049f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004884:	4a66      	ldr	r2, [pc, #408]	@ (8004a20 <HAL_TIM_ConfigClockSource+0x220>)
 8004886:	4293      	cmp	r3, r2
 8004888:	f000 80a9 	beq.w	80049de <HAL_TIM_ConfigClockSource+0x1de>
 800488c:	4a64      	ldr	r2, [pc, #400]	@ (8004a20 <HAL_TIM_ConfigClockSource+0x220>)
 800488e:	4293      	cmp	r3, r2
 8004890:	f200 80ae 	bhi.w	80049f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004894:	4a63      	ldr	r2, [pc, #396]	@ (8004a24 <HAL_TIM_ConfigClockSource+0x224>)
 8004896:	4293      	cmp	r3, r2
 8004898:	f000 80a1 	beq.w	80049de <HAL_TIM_ConfigClockSource+0x1de>
 800489c:	4a61      	ldr	r2, [pc, #388]	@ (8004a24 <HAL_TIM_ConfigClockSource+0x224>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	f200 80a6 	bhi.w	80049f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80048a4:	4a60      	ldr	r2, [pc, #384]	@ (8004a28 <HAL_TIM_ConfigClockSource+0x228>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	f000 8099 	beq.w	80049de <HAL_TIM_ConfigClockSource+0x1de>
 80048ac:	4a5e      	ldr	r2, [pc, #376]	@ (8004a28 <HAL_TIM_ConfigClockSource+0x228>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	f200 809e 	bhi.w	80049f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80048b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80048b8:	f000 8091 	beq.w	80049de <HAL_TIM_ConfigClockSource+0x1de>
 80048bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80048c0:	f200 8096 	bhi.w	80049f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80048c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048c8:	f000 8089 	beq.w	80049de <HAL_TIM_ConfigClockSource+0x1de>
 80048cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048d0:	f200 808e 	bhi.w	80049f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80048d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048d8:	d03e      	beq.n	8004958 <HAL_TIM_ConfigClockSource+0x158>
 80048da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048de:	f200 8087 	bhi.w	80049f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80048e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048e6:	f000 8086 	beq.w	80049f6 <HAL_TIM_ConfigClockSource+0x1f6>
 80048ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ee:	d87f      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80048f0:	2b70      	cmp	r3, #112	@ 0x70
 80048f2:	d01a      	beq.n	800492a <HAL_TIM_ConfigClockSource+0x12a>
 80048f4:	2b70      	cmp	r3, #112	@ 0x70
 80048f6:	d87b      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x1f0>
 80048f8:	2b60      	cmp	r3, #96	@ 0x60
 80048fa:	d050      	beq.n	800499e <HAL_TIM_ConfigClockSource+0x19e>
 80048fc:	2b60      	cmp	r3, #96	@ 0x60
 80048fe:	d877      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004900:	2b50      	cmp	r3, #80	@ 0x50
 8004902:	d03c      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x17e>
 8004904:	2b50      	cmp	r3, #80	@ 0x50
 8004906:	d873      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004908:	2b40      	cmp	r3, #64	@ 0x40
 800490a:	d058      	beq.n	80049be <HAL_TIM_ConfigClockSource+0x1be>
 800490c:	2b40      	cmp	r3, #64	@ 0x40
 800490e:	d86f      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004910:	2b30      	cmp	r3, #48	@ 0x30
 8004912:	d064      	beq.n	80049de <HAL_TIM_ConfigClockSource+0x1de>
 8004914:	2b30      	cmp	r3, #48	@ 0x30
 8004916:	d86b      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004918:	2b20      	cmp	r3, #32
 800491a:	d060      	beq.n	80049de <HAL_TIM_ConfigClockSource+0x1de>
 800491c:	2b20      	cmp	r3, #32
 800491e:	d867      	bhi.n	80049f0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d05c      	beq.n	80049de <HAL_TIM_ConfigClockSource+0x1de>
 8004924:	2b10      	cmp	r3, #16
 8004926:	d05a      	beq.n	80049de <HAL_TIM_ConfigClockSource+0x1de>
 8004928:	e062      	b.n	80049f0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800493a:	f000 fdf3 	bl	8005524 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800494c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	609a      	str	r2, [r3, #8]
      break;
 8004956:	e04f      	b.n	80049f8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004968:	f000 fddc 	bl	8005524 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800497a:	609a      	str	r2, [r3, #8]
      break;
 800497c:	e03c      	b.n	80049f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800498a:	461a      	mov	r2, r3
 800498c:	f000 fd4e 	bl	800542c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2150      	movs	r1, #80	@ 0x50
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fda7 	bl	80054ea <TIM_ITRx_SetConfig>
      break;
 800499c:	e02c      	b.n	80049f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049aa:	461a      	mov	r2, r3
 80049ac:	f000 fd6d 	bl	800548a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2160      	movs	r1, #96	@ 0x60
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fd97 	bl	80054ea <TIM_ITRx_SetConfig>
      break;
 80049bc:	e01c      	b.n	80049f8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ca:	461a      	mov	r2, r3
 80049cc:	f000 fd2e 	bl	800542c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2140      	movs	r1, #64	@ 0x40
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fd87 	bl	80054ea <TIM_ITRx_SetConfig>
      break;
 80049dc:	e00c      	b.n	80049f8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4619      	mov	r1, r3
 80049e8:	4610      	mov	r0, r2
 80049ea:	f000 fd7e 	bl	80054ea <TIM_ITRx_SetConfig>
      break;
 80049ee:	e003      	b.n	80049f8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	73fb      	strb	r3, [r7, #15]
      break;
 80049f4:	e000      	b.n	80049f8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80049f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	00100070 	.word	0x00100070
 8004a18:	00100060 	.word	0x00100060
 8004a1c:	00100050 	.word	0x00100050
 8004a20:	00100040 	.word	0x00100040
 8004a24:	00100030 	.word	0x00100030
 8004a28:	00100020 	.word	0x00100020

08004a2c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e031      	b.n	8004aa8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004a54:	6839      	ldr	r1, [r7, #0]
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fc08 	bl	800526c <TIM_SlaveTimer_SetConfig>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e018      	b.n	8004aa8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a84:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a94:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	4a4c      	ldr	r2, [pc, #304]	@ (8004bf4 <TIM_Base_SetConfig+0x144>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d017      	beq.n	8004af8 <TIM_Base_SetConfig+0x48>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ace:	d013      	beq.n	8004af8 <TIM_Base_SetConfig+0x48>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a49      	ldr	r2, [pc, #292]	@ (8004bf8 <TIM_Base_SetConfig+0x148>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00f      	beq.n	8004af8 <TIM_Base_SetConfig+0x48>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a48      	ldr	r2, [pc, #288]	@ (8004bfc <TIM_Base_SetConfig+0x14c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d00b      	beq.n	8004af8 <TIM_Base_SetConfig+0x48>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a47      	ldr	r2, [pc, #284]	@ (8004c00 <TIM_Base_SetConfig+0x150>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d007      	beq.n	8004af8 <TIM_Base_SetConfig+0x48>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a46      	ldr	r2, [pc, #280]	@ (8004c04 <TIM_Base_SetConfig+0x154>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d003      	beq.n	8004af8 <TIM_Base_SetConfig+0x48>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a45      	ldr	r2, [pc, #276]	@ (8004c08 <TIM_Base_SetConfig+0x158>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d108      	bne.n	8004b0a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a39      	ldr	r2, [pc, #228]	@ (8004bf4 <TIM_Base_SetConfig+0x144>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d023      	beq.n	8004b5a <TIM_Base_SetConfig+0xaa>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b18:	d01f      	beq.n	8004b5a <TIM_Base_SetConfig+0xaa>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a36      	ldr	r2, [pc, #216]	@ (8004bf8 <TIM_Base_SetConfig+0x148>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d01b      	beq.n	8004b5a <TIM_Base_SetConfig+0xaa>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a35      	ldr	r2, [pc, #212]	@ (8004bfc <TIM_Base_SetConfig+0x14c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d017      	beq.n	8004b5a <TIM_Base_SetConfig+0xaa>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a34      	ldr	r2, [pc, #208]	@ (8004c00 <TIM_Base_SetConfig+0x150>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d013      	beq.n	8004b5a <TIM_Base_SetConfig+0xaa>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a33      	ldr	r2, [pc, #204]	@ (8004c04 <TIM_Base_SetConfig+0x154>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00f      	beq.n	8004b5a <TIM_Base_SetConfig+0xaa>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a33      	ldr	r2, [pc, #204]	@ (8004c0c <TIM_Base_SetConfig+0x15c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d00b      	beq.n	8004b5a <TIM_Base_SetConfig+0xaa>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a32      	ldr	r2, [pc, #200]	@ (8004c10 <TIM_Base_SetConfig+0x160>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d007      	beq.n	8004b5a <TIM_Base_SetConfig+0xaa>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a31      	ldr	r2, [pc, #196]	@ (8004c14 <TIM_Base_SetConfig+0x164>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d003      	beq.n	8004b5a <TIM_Base_SetConfig+0xaa>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a2c      	ldr	r2, [pc, #176]	@ (8004c08 <TIM_Base_SetConfig+0x158>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d108      	bne.n	8004b6c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689a      	ldr	r2, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a18      	ldr	r2, [pc, #96]	@ (8004bf4 <TIM_Base_SetConfig+0x144>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d013      	beq.n	8004bc0 <TIM_Base_SetConfig+0x110>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8004c04 <TIM_Base_SetConfig+0x154>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d00f      	beq.n	8004bc0 <TIM_Base_SetConfig+0x110>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8004c0c <TIM_Base_SetConfig+0x15c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00b      	beq.n	8004bc0 <TIM_Base_SetConfig+0x110>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a19      	ldr	r2, [pc, #100]	@ (8004c10 <TIM_Base_SetConfig+0x160>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d007      	beq.n	8004bc0 <TIM_Base_SetConfig+0x110>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a18      	ldr	r2, [pc, #96]	@ (8004c14 <TIM_Base_SetConfig+0x164>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d003      	beq.n	8004bc0 <TIM_Base_SetConfig+0x110>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a13      	ldr	r2, [pc, #76]	@ (8004c08 <TIM_Base_SetConfig+0x158>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d103      	bne.n	8004bc8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d105      	bne.n	8004be6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f023 0201 	bic.w	r2, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	611a      	str	r2, [r3, #16]
  }
}
 8004be6:	bf00      	nop
 8004be8:	3714      	adds	r7, #20
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40000400 	.word	0x40000400
 8004bfc:	40000800 	.word	0x40000800
 8004c00:	40000c00 	.word	0x40000c00
 8004c04:	40013400 	.word	0x40013400
 8004c08:	40015000 	.word	0x40015000
 8004c0c:	40014000 	.word	0x40014000
 8004c10:	40014400 	.word	0x40014400
 8004c14:	40014800 	.word	0x40014800

08004c18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	f023 0201 	bic.w	r2, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f023 0303 	bic.w	r3, r3, #3
 8004c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f023 0302 	bic.w	r3, r3, #2
 8004c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a30      	ldr	r2, [pc, #192]	@ (8004d34 <TIM_OC1_SetConfig+0x11c>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d013      	beq.n	8004ca0 <TIM_OC1_SetConfig+0x88>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a2f      	ldr	r2, [pc, #188]	@ (8004d38 <TIM_OC1_SetConfig+0x120>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00f      	beq.n	8004ca0 <TIM_OC1_SetConfig+0x88>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a2e      	ldr	r2, [pc, #184]	@ (8004d3c <TIM_OC1_SetConfig+0x124>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00b      	beq.n	8004ca0 <TIM_OC1_SetConfig+0x88>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a2d      	ldr	r2, [pc, #180]	@ (8004d40 <TIM_OC1_SetConfig+0x128>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d007      	beq.n	8004ca0 <TIM_OC1_SetConfig+0x88>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a2c      	ldr	r2, [pc, #176]	@ (8004d44 <TIM_OC1_SetConfig+0x12c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_OC1_SetConfig+0x88>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a2b      	ldr	r2, [pc, #172]	@ (8004d48 <TIM_OC1_SetConfig+0x130>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d10c      	bne.n	8004cba <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f023 0308 	bic.w	r3, r3, #8
 8004ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f023 0304 	bic.w	r3, r3, #4
 8004cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8004d34 <TIM_OC1_SetConfig+0x11c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d013      	beq.n	8004cea <TIM_OC1_SetConfig+0xd2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d38 <TIM_OC1_SetConfig+0x120>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00f      	beq.n	8004cea <TIM_OC1_SetConfig+0xd2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8004d3c <TIM_OC1_SetConfig+0x124>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00b      	beq.n	8004cea <TIM_OC1_SetConfig+0xd2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a1a      	ldr	r2, [pc, #104]	@ (8004d40 <TIM_OC1_SetConfig+0x128>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d007      	beq.n	8004cea <TIM_OC1_SetConfig+0xd2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a19      	ldr	r2, [pc, #100]	@ (8004d44 <TIM_OC1_SetConfig+0x12c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d003      	beq.n	8004cea <TIM_OC1_SetConfig+0xd2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a18      	ldr	r2, [pc, #96]	@ (8004d48 <TIM_OC1_SetConfig+0x130>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d111      	bne.n	8004d0e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	621a      	str	r2, [r3, #32]
}
 8004d28:	bf00      	nop
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	40012c00 	.word	0x40012c00
 8004d38:	40013400 	.word	0x40013400
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	40014400 	.word	0x40014400
 8004d44:	40014800 	.word	0x40014800
 8004d48:	40015000 	.word	0x40015000

08004d4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f023 0210 	bic.w	r2, r3, #16
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	021b      	lsls	r3, r3, #8
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f023 0320 	bic.w	r3, r3, #32
 8004d9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a2c      	ldr	r2, [pc, #176]	@ (8004e5c <TIM_OC2_SetConfig+0x110>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d007      	beq.n	8004dc0 <TIM_OC2_SetConfig+0x74>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a2b      	ldr	r2, [pc, #172]	@ (8004e60 <TIM_OC2_SetConfig+0x114>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <TIM_OC2_SetConfig+0x74>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a2a      	ldr	r2, [pc, #168]	@ (8004e64 <TIM_OC2_SetConfig+0x118>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d10d      	bne.n	8004ddc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a1f      	ldr	r2, [pc, #124]	@ (8004e5c <TIM_OC2_SetConfig+0x110>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d013      	beq.n	8004e0c <TIM_OC2_SetConfig+0xc0>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e60 <TIM_OC2_SetConfig+0x114>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00f      	beq.n	8004e0c <TIM_OC2_SetConfig+0xc0>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a1e      	ldr	r2, [pc, #120]	@ (8004e68 <TIM_OC2_SetConfig+0x11c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <TIM_OC2_SetConfig+0xc0>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a1d      	ldr	r2, [pc, #116]	@ (8004e6c <TIM_OC2_SetConfig+0x120>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d007      	beq.n	8004e0c <TIM_OC2_SetConfig+0xc0>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8004e70 <TIM_OC2_SetConfig+0x124>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_OC2_SetConfig+0xc0>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a17      	ldr	r2, [pc, #92]	@ (8004e64 <TIM_OC2_SetConfig+0x118>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d113      	bne.n	8004e34 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40012c00 	.word	0x40012c00
 8004e60:	40013400 	.word	0x40013400
 8004e64:	40015000 	.word	0x40015000
 8004e68:	40014000 	.word	0x40014000
 8004e6c:	40014400 	.word	0x40014400
 8004e70:	40014800 	.word	0x40014800

08004e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b087      	sub	sp, #28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ec0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a2b      	ldr	r2, [pc, #172]	@ (8004f80 <TIM_OC3_SetConfig+0x10c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d007      	beq.n	8004ee6 <TIM_OC3_SetConfig+0x72>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a2a      	ldr	r2, [pc, #168]	@ (8004f84 <TIM_OC3_SetConfig+0x110>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d003      	beq.n	8004ee6 <TIM_OC3_SetConfig+0x72>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a29      	ldr	r2, [pc, #164]	@ (8004f88 <TIM_OC3_SetConfig+0x114>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d10d      	bne.n	8004f02 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	021b      	lsls	r3, r3, #8
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a1e      	ldr	r2, [pc, #120]	@ (8004f80 <TIM_OC3_SetConfig+0x10c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d013      	beq.n	8004f32 <TIM_OC3_SetConfig+0xbe>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004f84 <TIM_OC3_SetConfig+0x110>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00f      	beq.n	8004f32 <TIM_OC3_SetConfig+0xbe>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a1d      	ldr	r2, [pc, #116]	@ (8004f8c <TIM_OC3_SetConfig+0x118>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00b      	beq.n	8004f32 <TIM_OC3_SetConfig+0xbe>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8004f90 <TIM_OC3_SetConfig+0x11c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d007      	beq.n	8004f32 <TIM_OC3_SetConfig+0xbe>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a1b      	ldr	r2, [pc, #108]	@ (8004f94 <TIM_OC3_SetConfig+0x120>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d003      	beq.n	8004f32 <TIM_OC3_SetConfig+0xbe>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a16      	ldr	r2, [pc, #88]	@ (8004f88 <TIM_OC3_SetConfig+0x114>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d113      	bne.n	8004f5a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	693a      	ldr	r2, [r7, #16]
 8004f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	621a      	str	r2, [r3, #32]
}
 8004f74:	bf00      	nop
 8004f76:	371c      	adds	r7, #28
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	40012c00 	.word	0x40012c00
 8004f84:	40013400 	.word	0x40013400
 8004f88:	40015000 	.word	0x40015000
 8004f8c:	40014000 	.word	0x40014000
 8004f90:	40014400 	.word	0x40014400
 8004f94:	40014800 	.word	0x40014800

08004f98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	021b      	lsls	r3, r3, #8
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fe6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	031b      	lsls	r3, r3, #12
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a2c      	ldr	r2, [pc, #176]	@ (80050a8 <TIM_OC4_SetConfig+0x110>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d007      	beq.n	800500c <TIM_OC4_SetConfig+0x74>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a2b      	ldr	r2, [pc, #172]	@ (80050ac <TIM_OC4_SetConfig+0x114>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d003      	beq.n	800500c <TIM_OC4_SetConfig+0x74>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a2a      	ldr	r2, [pc, #168]	@ (80050b0 <TIM_OC4_SetConfig+0x118>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d10d      	bne.n	8005028 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	031b      	lsls	r3, r3, #12
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	4313      	orrs	r3, r2
 800501e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005026:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a1f      	ldr	r2, [pc, #124]	@ (80050a8 <TIM_OC4_SetConfig+0x110>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d013      	beq.n	8005058 <TIM_OC4_SetConfig+0xc0>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a1e      	ldr	r2, [pc, #120]	@ (80050ac <TIM_OC4_SetConfig+0x114>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00f      	beq.n	8005058 <TIM_OC4_SetConfig+0xc0>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a1e      	ldr	r2, [pc, #120]	@ (80050b4 <TIM_OC4_SetConfig+0x11c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00b      	beq.n	8005058 <TIM_OC4_SetConfig+0xc0>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a1d      	ldr	r2, [pc, #116]	@ (80050b8 <TIM_OC4_SetConfig+0x120>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d007      	beq.n	8005058 <TIM_OC4_SetConfig+0xc0>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a1c      	ldr	r2, [pc, #112]	@ (80050bc <TIM_OC4_SetConfig+0x124>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d003      	beq.n	8005058 <TIM_OC4_SetConfig+0xc0>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a17      	ldr	r2, [pc, #92]	@ (80050b0 <TIM_OC4_SetConfig+0x118>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d113      	bne.n	8005080 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800505e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005066:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	019b      	lsls	r3, r3, #6
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	019b      	lsls	r3, r3, #6
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	621a      	str	r2, [r3, #32]
}
 800509a:	bf00      	nop
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40012c00 	.word	0x40012c00
 80050ac:	40013400 	.word	0x40013400
 80050b0:	40015000 	.word	0x40015000
 80050b4:	40014000 	.word	0x40014000
 80050b8:	40014400 	.word	0x40014400
 80050bc:	40014800 	.word	0x40014800

080050c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005104:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	041b      	lsls	r3, r3, #16
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a19      	ldr	r2, [pc, #100]	@ (800517c <TIM_OC5_SetConfig+0xbc>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d013      	beq.n	8005142 <TIM_OC5_SetConfig+0x82>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a18      	ldr	r2, [pc, #96]	@ (8005180 <TIM_OC5_SetConfig+0xc0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00f      	beq.n	8005142 <TIM_OC5_SetConfig+0x82>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a17      	ldr	r2, [pc, #92]	@ (8005184 <TIM_OC5_SetConfig+0xc4>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00b      	beq.n	8005142 <TIM_OC5_SetConfig+0x82>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a16      	ldr	r2, [pc, #88]	@ (8005188 <TIM_OC5_SetConfig+0xc8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d007      	beq.n	8005142 <TIM_OC5_SetConfig+0x82>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a15      	ldr	r2, [pc, #84]	@ (800518c <TIM_OC5_SetConfig+0xcc>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d003      	beq.n	8005142 <TIM_OC5_SetConfig+0x82>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a14      	ldr	r2, [pc, #80]	@ (8005190 <TIM_OC5_SetConfig+0xd0>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d109      	bne.n	8005156 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005148:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	621a      	str	r2, [r3, #32]
}
 8005170:	bf00      	nop
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	40012c00 	.word	0x40012c00
 8005180:	40013400 	.word	0x40013400
 8005184:	40014000 	.word	0x40014000
 8005188:	40014400 	.word	0x40014400
 800518c:	40014800 	.word	0x40014800
 8005190:	40015000 	.word	0x40015000

08005194 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	051b      	lsls	r3, r3, #20
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005254 <TIM_OC6_SetConfig+0xc0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d013      	beq.n	8005218 <TIM_OC6_SetConfig+0x84>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a19      	ldr	r2, [pc, #100]	@ (8005258 <TIM_OC6_SetConfig+0xc4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00f      	beq.n	8005218 <TIM_OC6_SetConfig+0x84>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a18      	ldr	r2, [pc, #96]	@ (800525c <TIM_OC6_SetConfig+0xc8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00b      	beq.n	8005218 <TIM_OC6_SetConfig+0x84>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a17      	ldr	r2, [pc, #92]	@ (8005260 <TIM_OC6_SetConfig+0xcc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d007      	beq.n	8005218 <TIM_OC6_SetConfig+0x84>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a16      	ldr	r2, [pc, #88]	@ (8005264 <TIM_OC6_SetConfig+0xd0>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_OC6_SetConfig+0x84>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a15      	ldr	r2, [pc, #84]	@ (8005268 <TIM_OC6_SetConfig+0xd4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d109      	bne.n	800522c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800521e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	029b      	lsls	r3, r3, #10
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	40012c00 	.word	0x40012c00
 8005258:	40013400 	.word	0x40013400
 800525c:	40014000 	.word	0x40014000
 8005260:	40014400 	.word	0x40014400
 8005264:	40014800 	.word	0x40014800
 8005268:	40015000 	.word	0x40015000

0800526c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800528c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800529e:	f023 0307 	bic.w	r3, r3, #7
 80052a2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4a56      	ldr	r2, [pc, #344]	@ (8005414 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	f000 80a2 	beq.w	8005406 <TIM_SlaveTimer_SetConfig+0x19a>
 80052c2:	4a54      	ldr	r2, [pc, #336]	@ (8005414 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	f200 809b 	bhi.w	8005400 <TIM_SlaveTimer_SetConfig+0x194>
 80052ca:	4a53      	ldr	r2, [pc, #332]	@ (8005418 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	f000 809a 	beq.w	8005406 <TIM_SlaveTimer_SetConfig+0x19a>
 80052d2:	4a51      	ldr	r2, [pc, #324]	@ (8005418 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	f200 8093 	bhi.w	8005400 <TIM_SlaveTimer_SetConfig+0x194>
 80052da:	4a50      	ldr	r2, [pc, #320]	@ (800541c <TIM_SlaveTimer_SetConfig+0x1b0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	f000 8092 	beq.w	8005406 <TIM_SlaveTimer_SetConfig+0x19a>
 80052e2:	4a4e      	ldr	r2, [pc, #312]	@ (800541c <TIM_SlaveTimer_SetConfig+0x1b0>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	f200 808b 	bhi.w	8005400 <TIM_SlaveTimer_SetConfig+0x194>
 80052ea:	4a4d      	ldr	r2, [pc, #308]	@ (8005420 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	f000 808a 	beq.w	8005406 <TIM_SlaveTimer_SetConfig+0x19a>
 80052f2:	4a4b      	ldr	r2, [pc, #300]	@ (8005420 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	f200 8083 	bhi.w	8005400 <TIM_SlaveTimer_SetConfig+0x194>
 80052fa:	4a4a      	ldr	r2, [pc, #296]	@ (8005424 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	f000 8082 	beq.w	8005406 <TIM_SlaveTimer_SetConfig+0x19a>
 8005302:	4a48      	ldr	r2, [pc, #288]	@ (8005424 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d87b      	bhi.n	8005400 <TIM_SlaveTimer_SetConfig+0x194>
 8005308:	4a47      	ldr	r2, [pc, #284]	@ (8005428 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d07b      	beq.n	8005406 <TIM_SlaveTimer_SetConfig+0x19a>
 800530e:	4a46      	ldr	r2, [pc, #280]	@ (8005428 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d875      	bhi.n	8005400 <TIM_SlaveTimer_SetConfig+0x194>
 8005314:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005318:	d075      	beq.n	8005406 <TIM_SlaveTimer_SetConfig+0x19a>
 800531a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800531e:	d86f      	bhi.n	8005400 <TIM_SlaveTimer_SetConfig+0x194>
 8005320:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005324:	d06f      	beq.n	8005406 <TIM_SlaveTimer_SetConfig+0x19a>
 8005326:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800532a:	d869      	bhi.n	8005400 <TIM_SlaveTimer_SetConfig+0x194>
 800532c:	2b70      	cmp	r3, #112	@ 0x70
 800532e:	d01a      	beq.n	8005366 <TIM_SlaveTimer_SetConfig+0xfa>
 8005330:	2b70      	cmp	r3, #112	@ 0x70
 8005332:	d865      	bhi.n	8005400 <TIM_SlaveTimer_SetConfig+0x194>
 8005334:	2b60      	cmp	r3, #96	@ 0x60
 8005336:	d059      	beq.n	80053ec <TIM_SlaveTimer_SetConfig+0x180>
 8005338:	2b60      	cmp	r3, #96	@ 0x60
 800533a:	d861      	bhi.n	8005400 <TIM_SlaveTimer_SetConfig+0x194>
 800533c:	2b50      	cmp	r3, #80	@ 0x50
 800533e:	d04b      	beq.n	80053d8 <TIM_SlaveTimer_SetConfig+0x16c>
 8005340:	2b50      	cmp	r3, #80	@ 0x50
 8005342:	d85d      	bhi.n	8005400 <TIM_SlaveTimer_SetConfig+0x194>
 8005344:	2b40      	cmp	r3, #64	@ 0x40
 8005346:	d019      	beq.n	800537c <TIM_SlaveTimer_SetConfig+0x110>
 8005348:	2b40      	cmp	r3, #64	@ 0x40
 800534a:	d859      	bhi.n	8005400 <TIM_SlaveTimer_SetConfig+0x194>
 800534c:	2b30      	cmp	r3, #48	@ 0x30
 800534e:	d05a      	beq.n	8005406 <TIM_SlaveTimer_SetConfig+0x19a>
 8005350:	2b30      	cmp	r3, #48	@ 0x30
 8005352:	d855      	bhi.n	8005400 <TIM_SlaveTimer_SetConfig+0x194>
 8005354:	2b20      	cmp	r3, #32
 8005356:	d056      	beq.n	8005406 <TIM_SlaveTimer_SetConfig+0x19a>
 8005358:	2b20      	cmp	r3, #32
 800535a:	d851      	bhi.n	8005400 <TIM_SlaveTimer_SetConfig+0x194>
 800535c:	2b00      	cmp	r3, #0
 800535e:	d052      	beq.n	8005406 <TIM_SlaveTimer_SetConfig+0x19a>
 8005360:	2b10      	cmp	r3, #16
 8005362:	d050      	beq.n	8005406 <TIM_SlaveTimer_SetConfig+0x19a>
 8005364:	e04c      	b.n	8005400 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005376:	f000 f8d5 	bl	8005524 <TIM_ETR_SetConfig>
      break;
 800537a:	e045      	b.n	8005408 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b05      	cmp	r3, #5
 8005382:	d004      	beq.n	800538e <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005388:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 800538c:	d101      	bne.n	8005392 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e03b      	b.n	800540a <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6a1a      	ldr	r2, [r3, #32]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0201 	bic.w	r2, r2, #1
 80053a8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053b8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	621a      	str	r2, [r3, #32]
      break;
 80053d6:	e017      	b.n	8005408 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e4:	461a      	mov	r2, r3
 80053e6:	f000 f821 	bl	800542c <TIM_TI1_ConfigInputStage>
      break;
 80053ea:	e00d      	b.n	8005408 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053f8:	461a      	mov	r2, r3
 80053fa:	f000 f846 	bl	800548a <TIM_TI2_ConfigInputStage>
      break;
 80053fe:	e003      	b.n	8005408 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	75fb      	strb	r3, [r7, #23]
      break;
 8005404:	e000      	b.n	8005408 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8005406:	bf00      	nop
  }

  return status;
 8005408:	7dfb      	ldrb	r3, [r7, #23]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	00100070 	.word	0x00100070
 8005418:	00100060 	.word	0x00100060
 800541c:	00100050 	.word	0x00100050
 8005420:	00100040 	.word	0x00100040
 8005424:	00100030 	.word	0x00100030
 8005428:	00100020 	.word	0x00100020

0800542c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	f023 0201 	bic.w	r2, r3, #1
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f023 030a 	bic.w	r3, r3, #10
 8005468:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	621a      	str	r2, [r3, #32]
}
 800547e:	bf00      	nop
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800548a:	b480      	push	{r7}
 800548c:	b087      	sub	sp, #28
 800548e:	af00      	add	r7, sp, #0
 8005490:	60f8      	str	r0, [r7, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	f023 0210 	bic.w	r2, r3, #16
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	031b      	lsls	r3, r3, #12
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	621a      	str	r2, [r3, #32]
}
 80054de:	bf00      	nop
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b085      	sub	sp, #20
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005500:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4313      	orrs	r3, r2
 800550c:	f043 0307 	orr.w	r3, r3, #7
 8005510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	609a      	str	r2, [r3, #8]
}
 8005518:	bf00      	nop
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005524:	b480      	push	{r7}
 8005526:	b087      	sub	sp, #28
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800553e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	021a      	lsls	r2, r3, #8
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	431a      	orrs	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4313      	orrs	r3, r2
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	4313      	orrs	r3, r2
 8005550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	609a      	str	r2, [r3, #8]
}
 8005558:	bf00      	nop
 800555a:	371c      	adds	r7, #28
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f003 031f 	and.w	r3, r3, #31
 8005576:	2201      	movs	r2, #1
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6a1a      	ldr	r2, [r3, #32]
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	43db      	mvns	r3, r3
 8005586:	401a      	ands	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a1a      	ldr	r2, [r3, #32]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 031f 	and.w	r3, r3, #31
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	fa01 f303 	lsl.w	r3, r1, r3
 800559c:	431a      	orrs	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	621a      	str	r2, [r3, #32]
}
 80055a2:	bf00      	nop
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
	...

080055b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e074      	b.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a34      	ldr	r2, [pc, #208]	@ (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d009      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a33      	ldr	r2, [pc, #204]	@ (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d004      	beq.n	8005606 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a31      	ldr	r2, [pc, #196]	@ (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d108      	bne.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800560c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800561e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a21      	ldr	r2, [pc, #132]	@ (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d022      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005648:	d01d      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1f      	ldr	r2, [pc, #124]	@ (80056cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d018      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a1d      	ldr	r2, [pc, #116]	@ (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d013      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a1c      	ldr	r2, [pc, #112]	@ (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00e      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a15      	ldr	r2, [pc, #84]	@ (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d009      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a18      	ldr	r2, [pc, #96]	@ (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d004      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a11      	ldr	r2, [pc, #68]	@ (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d10c      	bne.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800568c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	4313      	orrs	r3, r2
 8005696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40012c00 	.word	0x40012c00
 80056c4:	40013400 	.word	0x40013400
 80056c8:	40015000 	.word	0x40015000
 80056cc:	40000400 	.word	0x40000400
 80056d0:	40000800 	.word	0x40000800
 80056d4:	40000c00 	.word	0x40000c00
 80056d8:	40014000 	.word	0x40014000

080056dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d101      	bne.n	80056f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056f4:	2302      	movs	r3, #2
 80056f6:	e078      	b.n	80057ea <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	041b      	lsls	r3, r3, #16
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	69db      	ldr	r3, [r3, #28]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1c      	ldr	r2, [pc, #112]	@ (80057f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d009      	beq.n	800579e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a1b      	ldr	r2, [pc, #108]	@ (80057fc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d004      	beq.n	800579e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a19      	ldr	r2, [pc, #100]	@ (8005800 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d11c      	bne.n	80057d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a8:	051b      	lsls	r3, r3, #20
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40012c00 	.word	0x40012c00
 80057fc:	40013400 	.word	0x40013400
 8005800:	40015000 	.word	0x40015000

08005804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e042      	b.n	800589c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581c:	2b00      	cmp	r3, #0
 800581e:	d106      	bne.n	800582e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7fb fd3d 	bl	80012a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2224      	movs	r2, #36	@ 0x24
 8005832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0201 	bic.w	r2, r2, #1
 8005844:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fb24 	bl	8005e9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f825 	bl	80058a4 <UART_SetConfig>
 800585a:	4603      	mov	r3, r0
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e01b      	b.n	800589c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fba3 	bl	8005fe0 <UART_CheckIdleState>
 800589a:	4603      	mov	r3, r0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058a8:	b08c      	sub	sp, #48	@ 0x30
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	431a      	orrs	r2, r3
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	4baa      	ldr	r3, [pc, #680]	@ (8005b7c <UART_SetConfig+0x2d8>)
 80058d4:	4013      	ands	r3, r2
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	6812      	ldr	r2, [r2, #0]
 80058da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058dc:	430b      	orrs	r3, r1
 80058de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a9f      	ldr	r2, [pc, #636]	@ (8005b80 <UART_SetConfig+0x2dc>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d004      	beq.n	8005910 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800590c:	4313      	orrs	r3, r2
 800590e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800591a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	6812      	ldr	r2, [r2, #0]
 8005922:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005924:	430b      	orrs	r3, r1
 8005926:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592e:	f023 010f 	bic.w	r1, r3, #15
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a90      	ldr	r2, [pc, #576]	@ (8005b84 <UART_SetConfig+0x2e0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d125      	bne.n	8005994 <UART_SetConfig+0xf0>
 8005948:	4b8f      	ldr	r3, [pc, #572]	@ (8005b88 <UART_SetConfig+0x2e4>)
 800594a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800594e:	f003 0303 	and.w	r3, r3, #3
 8005952:	2b03      	cmp	r3, #3
 8005954:	d81a      	bhi.n	800598c <UART_SetConfig+0xe8>
 8005956:	a201      	add	r2, pc, #4	@ (adr r2, 800595c <UART_SetConfig+0xb8>)
 8005958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595c:	0800596d 	.word	0x0800596d
 8005960:	0800597d 	.word	0x0800597d
 8005964:	08005975 	.word	0x08005975
 8005968:	08005985 	.word	0x08005985
 800596c:	2301      	movs	r3, #1
 800596e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005972:	e116      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005974:	2302      	movs	r3, #2
 8005976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800597a:	e112      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 800597c:	2304      	movs	r3, #4
 800597e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005982:	e10e      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005984:	2308      	movs	r3, #8
 8005986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800598a:	e10a      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 800598c:	2310      	movs	r3, #16
 800598e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005992:	e106      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a7c      	ldr	r2, [pc, #496]	@ (8005b8c <UART_SetConfig+0x2e8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d138      	bne.n	8005a10 <UART_SetConfig+0x16c>
 800599e:	4b7a      	ldr	r3, [pc, #488]	@ (8005b88 <UART_SetConfig+0x2e4>)
 80059a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a4:	f003 030c 	and.w	r3, r3, #12
 80059a8:	2b0c      	cmp	r3, #12
 80059aa:	d82d      	bhi.n	8005a08 <UART_SetConfig+0x164>
 80059ac:	a201      	add	r2, pc, #4	@ (adr r2, 80059b4 <UART_SetConfig+0x110>)
 80059ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b2:	bf00      	nop
 80059b4:	080059e9 	.word	0x080059e9
 80059b8:	08005a09 	.word	0x08005a09
 80059bc:	08005a09 	.word	0x08005a09
 80059c0:	08005a09 	.word	0x08005a09
 80059c4:	080059f9 	.word	0x080059f9
 80059c8:	08005a09 	.word	0x08005a09
 80059cc:	08005a09 	.word	0x08005a09
 80059d0:	08005a09 	.word	0x08005a09
 80059d4:	080059f1 	.word	0x080059f1
 80059d8:	08005a09 	.word	0x08005a09
 80059dc:	08005a09 	.word	0x08005a09
 80059e0:	08005a09 	.word	0x08005a09
 80059e4:	08005a01 	.word	0x08005a01
 80059e8:	2300      	movs	r3, #0
 80059ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059ee:	e0d8      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 80059f0:	2302      	movs	r3, #2
 80059f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059f6:	e0d4      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 80059f8:	2304      	movs	r3, #4
 80059fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80059fe:	e0d0      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005a00:	2308      	movs	r3, #8
 8005a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a06:	e0cc      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005a08:	2310      	movs	r3, #16
 8005a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a0e:	e0c8      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a5e      	ldr	r2, [pc, #376]	@ (8005b90 <UART_SetConfig+0x2ec>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d125      	bne.n	8005a66 <UART_SetConfig+0x1c2>
 8005a1a:	4b5b      	ldr	r3, [pc, #364]	@ (8005b88 <UART_SetConfig+0x2e4>)
 8005a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005a24:	2b30      	cmp	r3, #48	@ 0x30
 8005a26:	d016      	beq.n	8005a56 <UART_SetConfig+0x1b2>
 8005a28:	2b30      	cmp	r3, #48	@ 0x30
 8005a2a:	d818      	bhi.n	8005a5e <UART_SetConfig+0x1ba>
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d00a      	beq.n	8005a46 <UART_SetConfig+0x1a2>
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d814      	bhi.n	8005a5e <UART_SetConfig+0x1ba>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <UART_SetConfig+0x19a>
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d008      	beq.n	8005a4e <UART_SetConfig+0x1aa>
 8005a3c:	e00f      	b.n	8005a5e <UART_SetConfig+0x1ba>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a44:	e0ad      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005a46:	2302      	movs	r3, #2
 8005a48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a4c:	e0a9      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005a4e:	2304      	movs	r3, #4
 8005a50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a54:	e0a5      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005a56:	2308      	movs	r3, #8
 8005a58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a5c:	e0a1      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005a5e:	2310      	movs	r3, #16
 8005a60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a64:	e09d      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a4a      	ldr	r2, [pc, #296]	@ (8005b94 <UART_SetConfig+0x2f0>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d125      	bne.n	8005abc <UART_SetConfig+0x218>
 8005a70:	4b45      	ldr	r3, [pc, #276]	@ (8005b88 <UART_SetConfig+0x2e4>)
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a76:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005a7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a7c:	d016      	beq.n	8005aac <UART_SetConfig+0x208>
 8005a7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a80:	d818      	bhi.n	8005ab4 <UART_SetConfig+0x210>
 8005a82:	2b80      	cmp	r3, #128	@ 0x80
 8005a84:	d00a      	beq.n	8005a9c <UART_SetConfig+0x1f8>
 8005a86:	2b80      	cmp	r3, #128	@ 0x80
 8005a88:	d814      	bhi.n	8005ab4 <UART_SetConfig+0x210>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <UART_SetConfig+0x1f0>
 8005a8e:	2b40      	cmp	r3, #64	@ 0x40
 8005a90:	d008      	beq.n	8005aa4 <UART_SetConfig+0x200>
 8005a92:	e00f      	b.n	8005ab4 <UART_SetConfig+0x210>
 8005a94:	2300      	movs	r3, #0
 8005a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a9a:	e082      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aa2:	e07e      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005aa4:	2304      	movs	r3, #4
 8005aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aaa:	e07a      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005aac:	2308      	movs	r3, #8
 8005aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ab2:	e076      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aba:	e072      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a35      	ldr	r2, [pc, #212]	@ (8005b98 <UART_SetConfig+0x2f4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d12a      	bne.n	8005b1c <UART_SetConfig+0x278>
 8005ac6:	4b30      	ldr	r3, [pc, #192]	@ (8005b88 <UART_SetConfig+0x2e4>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005acc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ad0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ad4:	d01a      	beq.n	8005b0c <UART_SetConfig+0x268>
 8005ad6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ada:	d81b      	bhi.n	8005b14 <UART_SetConfig+0x270>
 8005adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ae0:	d00c      	beq.n	8005afc <UART_SetConfig+0x258>
 8005ae2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ae6:	d815      	bhi.n	8005b14 <UART_SetConfig+0x270>
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <UART_SetConfig+0x250>
 8005aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005af0:	d008      	beq.n	8005b04 <UART_SetConfig+0x260>
 8005af2:	e00f      	b.n	8005b14 <UART_SetConfig+0x270>
 8005af4:	2300      	movs	r3, #0
 8005af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005afa:	e052      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005afc:	2302      	movs	r3, #2
 8005afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b02:	e04e      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005b04:	2304      	movs	r3, #4
 8005b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b0a:	e04a      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005b0c:	2308      	movs	r3, #8
 8005b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b12:	e046      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005b14:	2310      	movs	r3, #16
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b1a:	e042      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a17      	ldr	r2, [pc, #92]	@ (8005b80 <UART_SetConfig+0x2dc>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d13a      	bne.n	8005b9c <UART_SetConfig+0x2f8>
 8005b26:	4b18      	ldr	r3, [pc, #96]	@ (8005b88 <UART_SetConfig+0x2e4>)
 8005b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005b30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b34:	d01a      	beq.n	8005b6c <UART_SetConfig+0x2c8>
 8005b36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b3a:	d81b      	bhi.n	8005b74 <UART_SetConfig+0x2d0>
 8005b3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b40:	d00c      	beq.n	8005b5c <UART_SetConfig+0x2b8>
 8005b42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b46:	d815      	bhi.n	8005b74 <UART_SetConfig+0x2d0>
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <UART_SetConfig+0x2b0>
 8005b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b50:	d008      	beq.n	8005b64 <UART_SetConfig+0x2c0>
 8005b52:	e00f      	b.n	8005b74 <UART_SetConfig+0x2d0>
 8005b54:	2300      	movs	r3, #0
 8005b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b5a:	e022      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b62:	e01e      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005b64:	2304      	movs	r3, #4
 8005b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b6a:	e01a      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005b6c:	2308      	movs	r3, #8
 8005b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b72:	e016      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005b74:	2310      	movs	r3, #16
 8005b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b7a:	e012      	b.n	8005ba2 <UART_SetConfig+0x2fe>
 8005b7c:	cfff69f3 	.word	0xcfff69f3
 8005b80:	40008000 	.word	0x40008000
 8005b84:	40013800 	.word	0x40013800
 8005b88:	40021000 	.word	0x40021000
 8005b8c:	40004400 	.word	0x40004400
 8005b90:	40004800 	.word	0x40004800
 8005b94:	40004c00 	.word	0x40004c00
 8005b98:	40005000 	.word	0x40005000
 8005b9c:	2310      	movs	r3, #16
 8005b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4aae      	ldr	r2, [pc, #696]	@ (8005e60 <UART_SetConfig+0x5bc>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	f040 8097 	bne.w	8005cdc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d823      	bhi.n	8005bfe <UART_SetConfig+0x35a>
 8005bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bbc <UART_SetConfig+0x318>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005be1 	.word	0x08005be1
 8005bc0:	08005bff 	.word	0x08005bff
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005bff 	.word	0x08005bff
 8005bcc:	08005bef 	.word	0x08005bef
 8005bd0:	08005bff 	.word	0x08005bff
 8005bd4:	08005bff 	.word	0x08005bff
 8005bd8:	08005bff 	.word	0x08005bff
 8005bdc:	08005bf7 	.word	0x08005bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be0:	f7fd fef0 	bl	80039c4 <HAL_RCC_GetPCLK1Freq>
 8005be4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005be6:	e010      	b.n	8005c0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005be8:	4b9e      	ldr	r3, [pc, #632]	@ (8005e64 <UART_SetConfig+0x5c0>)
 8005bea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bec:	e00d      	b.n	8005c0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bee:	f7fd fe7d 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 8005bf2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bf4:	e009      	b.n	8005c0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bfc:	e005      	b.n	8005c0a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005c08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 8130 	beq.w	8005e72 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c16:	4a94      	ldr	r2, [pc, #592]	@ (8005e68 <UART_SetConfig+0x5c4>)
 8005c18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	4413      	add	r3, r2
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d305      	bcc.n	8005c42 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d903      	bls.n	8005c4a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005c48:	e113      	b.n	8005e72 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	60bb      	str	r3, [r7, #8]
 8005c50:	60fa      	str	r2, [r7, #12]
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c56:	4a84      	ldr	r2, [pc, #528]	@ (8005e68 <UART_SetConfig+0x5c4>)
 8005c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	2200      	movs	r2, #0
 8005c60:	603b      	str	r3, [r7, #0]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c6c:	f7fa fad4 	bl	8000218 <__aeabi_uldivmod>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4610      	mov	r0, r2
 8005c76:	4619      	mov	r1, r3
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	f04f 0300 	mov.w	r3, #0
 8005c80:	020b      	lsls	r3, r1, #8
 8005c82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c86:	0202      	lsls	r2, r0, #8
 8005c88:	6979      	ldr	r1, [r7, #20]
 8005c8a:	6849      	ldr	r1, [r1, #4]
 8005c8c:	0849      	lsrs	r1, r1, #1
 8005c8e:	2000      	movs	r0, #0
 8005c90:	460c      	mov	r4, r1
 8005c92:	4605      	mov	r5, r0
 8005c94:	eb12 0804 	adds.w	r8, r2, r4
 8005c98:	eb43 0905 	adc.w	r9, r3, r5
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	469a      	mov	sl, r3
 8005ca4:	4693      	mov	fp, r2
 8005ca6:	4652      	mov	r2, sl
 8005ca8:	465b      	mov	r3, fp
 8005caa:	4640      	mov	r0, r8
 8005cac:	4649      	mov	r1, r9
 8005cae:	f7fa fab3 	bl	8000218 <__aeabi_uldivmod>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cc0:	d308      	bcc.n	8005cd4 <UART_SetConfig+0x430>
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cc8:	d204      	bcs.n	8005cd4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6a3a      	ldr	r2, [r7, #32]
 8005cd0:	60da      	str	r2, [r3, #12]
 8005cd2:	e0ce      	b.n	8005e72 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005cda:	e0ca      	b.n	8005e72 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ce4:	d166      	bne.n	8005db4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005ce6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d827      	bhi.n	8005d3e <UART_SetConfig+0x49a>
 8005cee:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf4 <UART_SetConfig+0x450>)
 8005cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf4:	08005d19 	.word	0x08005d19
 8005cf8:	08005d21 	.word	0x08005d21
 8005cfc:	08005d29 	.word	0x08005d29
 8005d00:	08005d3f 	.word	0x08005d3f
 8005d04:	08005d2f 	.word	0x08005d2f
 8005d08:	08005d3f 	.word	0x08005d3f
 8005d0c:	08005d3f 	.word	0x08005d3f
 8005d10:	08005d3f 	.word	0x08005d3f
 8005d14:	08005d37 	.word	0x08005d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d18:	f7fd fe54 	bl	80039c4 <HAL_RCC_GetPCLK1Freq>
 8005d1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d1e:	e014      	b.n	8005d4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d20:	f7fd fe66 	bl	80039f0 <HAL_RCC_GetPCLK2Freq>
 8005d24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d26:	e010      	b.n	8005d4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d28:	4b4e      	ldr	r3, [pc, #312]	@ (8005e64 <UART_SetConfig+0x5c0>)
 8005d2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d2c:	e00d      	b.n	8005d4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d2e:	f7fd fddd 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 8005d32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d34:	e009      	b.n	8005d4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d3c:	e005      	b.n	8005d4a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 8090 	beq.w	8005e72 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d56:	4a44      	ldr	r2, [pc, #272]	@ (8005e68 <UART_SetConfig+0x5c4>)
 8005d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d64:	005a      	lsls	r2, r3, #1
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	085b      	lsrs	r3, r3, #1
 8005d6c:	441a      	add	r2, r3
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	2b0f      	cmp	r3, #15
 8005d7c:	d916      	bls.n	8005dac <UART_SetConfig+0x508>
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d84:	d212      	bcs.n	8005dac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f023 030f 	bic.w	r3, r3, #15
 8005d8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	085b      	lsrs	r3, r3, #1
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	8bfb      	ldrh	r3, [r7, #30]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	8bfa      	ldrh	r2, [r7, #30]
 8005da8:	60da      	str	r2, [r3, #12]
 8005daa:	e062      	b.n	8005e72 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005db2:	e05e      	b.n	8005e72 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005db4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d828      	bhi.n	8005e0e <UART_SetConfig+0x56a>
 8005dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc4 <UART_SetConfig+0x520>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005de9 	.word	0x08005de9
 8005dc8:	08005df1 	.word	0x08005df1
 8005dcc:	08005df9 	.word	0x08005df9
 8005dd0:	08005e0f 	.word	0x08005e0f
 8005dd4:	08005dff 	.word	0x08005dff
 8005dd8:	08005e0f 	.word	0x08005e0f
 8005ddc:	08005e0f 	.word	0x08005e0f
 8005de0:	08005e0f 	.word	0x08005e0f
 8005de4:	08005e07 	.word	0x08005e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005de8:	f7fd fdec 	bl	80039c4 <HAL_RCC_GetPCLK1Freq>
 8005dec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dee:	e014      	b.n	8005e1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005df0:	f7fd fdfe 	bl	80039f0 <HAL_RCC_GetPCLK2Freq>
 8005df4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005df6:	e010      	b.n	8005e1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005df8:	4b1a      	ldr	r3, [pc, #104]	@ (8005e64 <UART_SetConfig+0x5c0>)
 8005dfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dfc:	e00d      	b.n	8005e1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dfe:	f7fd fd75 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 8005e02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e04:	e009      	b.n	8005e1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e0c:	e005      	b.n	8005e1a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e18:	bf00      	nop
    }

    if (pclk != 0U)
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d028      	beq.n	8005e72 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e24:	4a10      	ldr	r2, [pc, #64]	@ (8005e68 <UART_SetConfig+0x5c4>)
 8005e26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	441a      	add	r2, r3
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	2b0f      	cmp	r3, #15
 8005e48:	d910      	bls.n	8005e6c <UART_SetConfig+0x5c8>
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e50:	d20c      	bcs.n	8005e6c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60da      	str	r2, [r3, #12]
 8005e5c:	e009      	b.n	8005e72 <UART_SetConfig+0x5ce>
 8005e5e:	bf00      	nop
 8005e60:	40008000 	.word	0x40008000
 8005e64:	00f42400 	.word	0x00f42400
 8005e68:	08006568 	.word	0x08006568
      }
      else
      {
        ret = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2200      	movs	r2, #0
 8005e86:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e8e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3730      	adds	r7, #48	@ 0x30
 8005e96:	46bd      	mov	sp, r7
 8005e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea8:	f003 0308 	and.w	r3, r3, #8
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00a      	beq.n	8005ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00a      	beq.n	8005f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01a      	beq.n	8005fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f9a:	d10a      	bne.n	8005fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	605a      	str	r2, [r3, #4]
  }
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b098      	sub	sp, #96	@ 0x60
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ff0:	f7fb fa82 	bl	80014f8 <HAL_GetTick>
 8005ff4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b08      	cmp	r3, #8
 8006002:	d12f      	bne.n	8006064 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006004:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800600c:	2200      	movs	r2, #0
 800600e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f88e 	bl	8006134 <UART_WaitOnFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d022      	beq.n	8006064 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006026:	e853 3f00 	ldrex	r3, [r3]
 800602a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800602c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800602e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006032:	653b      	str	r3, [r7, #80]	@ 0x50
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	461a      	mov	r2, r3
 800603a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800603c:	647b      	str	r3, [r7, #68]	@ 0x44
 800603e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006040:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006042:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006044:	e841 2300 	strex	r3, r2, [r1]
 8006048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800604a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1e6      	bne.n	800601e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2220      	movs	r2, #32
 8006054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e063      	b.n	800612c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b04      	cmp	r3, #4
 8006070:	d149      	bne.n	8006106 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006072:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800607a:	2200      	movs	r2, #0
 800607c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f857 	bl	8006134 <UART_WaitOnFlagUntilTimeout>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d03c      	beq.n	8006106 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	623b      	str	r3, [r7, #32]
   return(result);
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	461a      	mov	r2, r3
 80060a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80060ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e6      	bne.n	800608c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3308      	adds	r3, #8
 80060c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f023 0301 	bic.w	r3, r3, #1
 80060d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	3308      	adds	r3, #8
 80060dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060de:	61fa      	str	r2, [r7, #28]
 80060e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e2:	69b9      	ldr	r1, [r7, #24]
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	e841 2300 	strex	r3, r2, [r1]
 80060ea:	617b      	str	r3, [r7, #20]
   return(result);
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1e5      	bne.n	80060be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e012      	b.n	800612c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2220      	movs	r2, #32
 800610a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2220      	movs	r2, #32
 8006112:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3758      	adds	r7, #88	@ 0x58
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	4613      	mov	r3, r2
 8006142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006144:	e04f      	b.n	80061e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800614c:	d04b      	beq.n	80061e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800614e:	f7fb f9d3 	bl	80014f8 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	429a      	cmp	r2, r3
 800615c:	d302      	bcc.n	8006164 <UART_WaitOnFlagUntilTimeout+0x30>
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e04e      	b.n	8006206 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b00      	cmp	r3, #0
 8006174:	d037      	beq.n	80061e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b80      	cmp	r3, #128	@ 0x80
 800617a:	d034      	beq.n	80061e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b40      	cmp	r3, #64	@ 0x40
 8006180:	d031      	beq.n	80061e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69db      	ldr	r3, [r3, #28]
 8006188:	f003 0308 	and.w	r3, r3, #8
 800618c:	2b08      	cmp	r3, #8
 800618e:	d110      	bne.n	80061b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2208      	movs	r2, #8
 8006196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f000 f838 	bl	800620e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2208      	movs	r2, #8
 80061a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e029      	b.n	8006206 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061c0:	d111      	bne.n	80061e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 f81e 	bl	800620e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2220      	movs	r2, #32
 80061d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e00f      	b.n	8006206 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69da      	ldr	r2, [r3, #28]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	4013      	ands	r3, r2
 80061f0:	68ba      	ldr	r2, [r7, #8]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	bf0c      	ite	eq
 80061f6:	2301      	moveq	r3, #1
 80061f8:	2300      	movne	r3, #0
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	461a      	mov	r2, r3
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	429a      	cmp	r2, r3
 8006202:	d0a0      	beq.n	8006146 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800620e:	b480      	push	{r7}
 8006210:	b095      	sub	sp, #84	@ 0x54
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006226:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800622a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006234:	643b      	str	r3, [r7, #64]	@ 0x40
 8006236:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800623a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800623c:	e841 2300 	strex	r3, r2, [r1]
 8006240:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e6      	bne.n	8006216 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3308      	adds	r3, #8
 800624e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	6a3b      	ldr	r3, [r7, #32]
 8006252:	e853 3f00 	ldrex	r3, [r3]
 8006256:	61fb      	str	r3, [r7, #28]
   return(result);
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800625e:	f023 0301 	bic.w	r3, r3, #1
 8006262:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3308      	adds	r3, #8
 800626a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800626c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800626e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006272:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006274:	e841 2300 	strex	r3, r2, [r1]
 8006278:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1e3      	bne.n	8006248 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006284:	2b01      	cmp	r3, #1
 8006286:	d118      	bne.n	80062ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	60bb      	str	r3, [r7, #8]
   return(result);
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	f023 0310 	bic.w	r3, r3, #16
 800629c:	647b      	str	r3, [r7, #68]	@ 0x44
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	461a      	mov	r2, r3
 80062a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062a6:	61bb      	str	r3, [r7, #24]
 80062a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	6979      	ldr	r1, [r7, #20]
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	613b      	str	r3, [r7, #16]
   return(result);
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e6      	bne.n	8006288 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80062ce:	bf00      	nop
 80062d0:	3754      	adds	r7, #84	@ 0x54
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e027      	b.n	8006340 <HAL_UARTEx_DisableFifoMode+0x66>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2224      	movs	r2, #36	@ 0x24
 80062fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0201 	bic.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800631e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2220      	movs	r2, #32
 8006332:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006360:	2302      	movs	r3, #2
 8006362:	e02d      	b.n	80063c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2224      	movs	r2, #36	@ 0x24
 8006370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0201 	bic.w	r2, r2, #1
 800638a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f84f 	bl	8006444 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d101      	bne.n	80063e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80063dc:	2302      	movs	r3, #2
 80063de:	e02d      	b.n	800643c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2224      	movs	r2, #36	@ 0x24
 80063ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0201 	bic.w	r2, r2, #1
 8006406:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f811 	bl	8006444 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006450:	2b00      	cmp	r3, #0
 8006452:	d108      	bne.n	8006466 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006464:	e031      	b.n	80064ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006466:	2308      	movs	r3, #8
 8006468:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800646a:	2308      	movs	r3, #8
 800646c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	0e5b      	lsrs	r3, r3, #25
 8006476:	b2db      	uxtb	r3, r3
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	0f5b      	lsrs	r3, r3, #29
 8006486:	b2db      	uxtb	r3, r3
 8006488:	f003 0307 	and.w	r3, r3, #7
 800648c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800648e:	7bbb      	ldrb	r3, [r7, #14]
 8006490:	7b3a      	ldrb	r2, [r7, #12]
 8006492:	4911      	ldr	r1, [pc, #68]	@ (80064d8 <UARTEx_SetNbDataToProcess+0x94>)
 8006494:	5c8a      	ldrb	r2, [r1, r2]
 8006496:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800649a:	7b3a      	ldrb	r2, [r7, #12]
 800649c:	490f      	ldr	r1, [pc, #60]	@ (80064dc <UARTEx_SetNbDataToProcess+0x98>)
 800649e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	7b7a      	ldrb	r2, [r7, #13]
 80064b0:	4909      	ldr	r1, [pc, #36]	@ (80064d8 <UARTEx_SetNbDataToProcess+0x94>)
 80064b2:	5c8a      	ldrb	r2, [r1, r2]
 80064b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80064b8:	7b7a      	ldrb	r2, [r7, #13]
 80064ba:	4908      	ldr	r1, [pc, #32]	@ (80064dc <UARTEx_SetNbDataToProcess+0x98>)
 80064bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064be:	fb93 f3f2 	sdiv	r3, r3, r2
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80064ca:	bf00      	nop
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	08006580 	.word	0x08006580
 80064dc:	08006588 	.word	0x08006588

080064e0 <memset>:
 80064e0:	4402      	add	r2, r0
 80064e2:	4603      	mov	r3, r0
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d100      	bne.n	80064ea <memset+0xa>
 80064e8:	4770      	bx	lr
 80064ea:	f803 1b01 	strb.w	r1, [r3], #1
 80064ee:	e7f9      	b.n	80064e4 <memset+0x4>

080064f0 <__libc_init_array>:
 80064f0:	b570      	push	{r4, r5, r6, lr}
 80064f2:	4d0d      	ldr	r5, [pc, #52]	@ (8006528 <__libc_init_array+0x38>)
 80064f4:	4c0d      	ldr	r4, [pc, #52]	@ (800652c <__libc_init_array+0x3c>)
 80064f6:	1b64      	subs	r4, r4, r5
 80064f8:	10a4      	asrs	r4, r4, #2
 80064fa:	2600      	movs	r6, #0
 80064fc:	42a6      	cmp	r6, r4
 80064fe:	d109      	bne.n	8006514 <__libc_init_array+0x24>
 8006500:	4d0b      	ldr	r5, [pc, #44]	@ (8006530 <__libc_init_array+0x40>)
 8006502:	4c0c      	ldr	r4, [pc, #48]	@ (8006534 <__libc_init_array+0x44>)
 8006504:	f000 f818 	bl	8006538 <_init>
 8006508:	1b64      	subs	r4, r4, r5
 800650a:	10a4      	asrs	r4, r4, #2
 800650c:	2600      	movs	r6, #0
 800650e:	42a6      	cmp	r6, r4
 8006510:	d105      	bne.n	800651e <__libc_init_array+0x2e>
 8006512:	bd70      	pop	{r4, r5, r6, pc}
 8006514:	f855 3b04 	ldr.w	r3, [r5], #4
 8006518:	4798      	blx	r3
 800651a:	3601      	adds	r6, #1
 800651c:	e7ee      	b.n	80064fc <__libc_init_array+0xc>
 800651e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006522:	4798      	blx	r3
 8006524:	3601      	adds	r6, #1
 8006526:	e7f2      	b.n	800650e <__libc_init_array+0x1e>
 8006528:	08006598 	.word	0x08006598
 800652c:	08006598 	.word	0x08006598
 8006530:	08006598 	.word	0x08006598
 8006534:	0800659c 	.word	0x0800659c

08006538 <_init>:
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	bf00      	nop
 800653c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653e:	bc08      	pop	{r3}
 8006540:	469e      	mov	lr, r3
 8006542:	4770      	bx	lr

08006544 <_fini>:
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	bf00      	nop
 8006548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654a:	bc08      	pop	{r3}
 800654c:	469e      	mov	lr, r3
 800654e:	4770      	bx	lr
