
PCB_moteur2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a14  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002bec  08002bec  00003bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bfc  08002bfc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bfc  08002bfc  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bfc  08002bfc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bfc  08002bfc  00003bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c00  08002c00  00003c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c04  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08002c10  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002c10  000040cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a278  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001842  00000000  00000000  0000e2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  0000faf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000934  00000000  00000000  000106e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002489d  00000000  00000000  0001101c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c237  00000000  00000000  000358b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f12e6  00000000  00000000  00041af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132dd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003224  00000000  00000000  00132e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00136040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002bd4 	.word	0x08002bd4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002bd4 	.word	0x08002bd4

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fae1 	bl	80007e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f84a 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f998 	bl	8000558 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000228:	f000 f892 	bl	8000350 <MX_TIM2_Init>
  MX_TIM3_Init();
 800022c:	f000 f912 	bl	8000454 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //PA2 TIM2 CH3 symétrique PC7
 8000230:	2108      	movs	r1, #8
 8000232:	481b      	ldr	r0, [pc, #108]	@ (80002a0 <main+0x88>)
 8000234:	f001 fc30 	bl	8001a98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //PC6 TIM3 CH1
 8000238:	2100      	movs	r1, #0
 800023a:	481a      	ldr	r0, [pc, #104]	@ (80002a4 <main+0x8c>)
 800023c:	f001 fc2c 	bl	8001a98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000240:	210c      	movs	r1, #12
 8000242:	4817      	ldr	r0, [pc, #92]	@ (80002a0 <main+0x88>)
 8000244:	f001 fc28 	bl	8001a98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000248:	2104      	movs	r1, #4
 800024a:	4816      	ldr	r0, [pc, #88]	@ (80002a4 <main+0x8c>)
 800024c:	f001 fc24 	bl	8001a98 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {// freq 20 K, presc à 0, pres à 7, pi avec simulink, aller voir Mr Martin
	  V=24;
 8000250:	4b15      	ldr	r3, [pc, #84]	@ (80002a8 <main+0x90>)
 8000252:	4a16      	ldr	r2, [pc, #88]	@ (80002ac <main+0x94>)
 8000254:	601a      	str	r2, [r3, #0]
	  alpha=(V/24 +1)*(1/2);//  paramètre V a donné
 8000256:	4b14      	ldr	r3, [pc, #80]	@ (80002a8 <main+0x90>)
 8000258:	ed93 7a00 	vldr	s14, [r3]
 800025c:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8000260:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000264:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000268:	ee77 7a87 	vadd.f32	s15, s15, s14
 800026c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80002b0 <main+0x98>
 8000270:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000274:	4b0f      	ldr	r3, [pc, #60]	@ (80002b4 <main+0x9c>)
 8000276:	edc3 7a00 	vstr	s15, [r3]
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1000);
 800027a:	4b09      	ldr	r3, [pc, #36]	@ (80002a0 <main+0x88>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000282:	63da      	str	r2, [r3, #60]	@ 0x3c
	  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);
	  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1000);
	  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1000);
	  HAL_Delay(1000);
 8000284:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000288:	f000 fb1c 	bl	80008c4 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 800028c:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <main+0x88>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2200      	movs	r2, #0
 8000292:	63da      	str	r2, [r3, #60]	@ 0x3c
	  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
	  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);
	  //__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
	  HAL_Delay(1000);
 8000294:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000298:	f000 fb14 	bl	80008c4 <HAL_Delay>
	  V=24;
 800029c:	bf00      	nop
 800029e:	e7d7      	b.n	8000250 <main+0x38>
 80002a0:	20000028 	.word	0x20000028
 80002a4:	20000074 	.word	0x20000074
 80002a8:	200000c4 	.word	0x200000c4
 80002ac:	41c00000 	.word	0x41c00000
 80002b0:	00000000 	.word	0x00000000
 80002b4:	200000c0 	.word	0x200000c0

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b094      	sub	sp, #80	@ 0x50
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	2238      	movs	r2, #56	@ 0x38
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 fc58 	bl	8002b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80002da:	2000      	movs	r0, #0
 80002dc:	f000 fd7a 	bl	8000dd4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e0:	2302      	movs	r3, #2
 80002e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ea:	2340      	movs	r3, #64	@ 0x40
 80002ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ee:	2302      	movs	r3, #2
 80002f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002f2:	2302      	movs	r3, #2
 80002f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002f6:	2301      	movs	r3, #1
 80002f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80002fa:	2314      	movs	r3, #20
 80002fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002fe:	2302      	movs	r3, #2
 8000300:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000302:	2302      	movs	r3, #2
 8000304:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000306:	2302      	movs	r3, #2
 8000308:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800030a:	f107 0318 	add.w	r3, r7, #24
 800030e:	4618      	mov	r0, r3
 8000310:	f000 fe14 	bl	8000f3c <HAL_RCC_OscConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800031a:	f000 f941 	bl	80005a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031e:	230f      	movs	r3, #15
 8000320:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000322:	2303      	movs	r3, #3
 8000324:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2104      	movs	r1, #4
 8000336:	4618      	mov	r0, r3
 8000338:	f001 f912 	bl	8001560 <HAL_RCC_ClockConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000342:	f000 f92d 	bl	80005a0 <Error_Handler>
  }
}
 8000346:	bf00      	nop
 8000348:	3750      	adds	r7, #80	@ 0x50
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b08e      	sub	sp, #56	@ 0x38
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000356:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000364:	f107 031c 	add.w	r3, r7, #28
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000370:	463b      	mov	r3, r7
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
 800037c:	611a      	str	r2, [r3, #16]
 800037e:	615a      	str	r2, [r3, #20]
 8000380:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000382:	4b33      	ldr	r3, [pc, #204]	@ (8000450 <MX_TIM2_Init+0x100>)
 8000384:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000388:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 800038a:	4b31      	ldr	r3, [pc, #196]	@ (8000450 <MX_TIM2_Init+0x100>)
 800038c:	2207      	movs	r2, #7
 800038e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000390:	4b2f      	ldr	r3, [pc, #188]	@ (8000450 <MX_TIM2_Init+0x100>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000396:	4b2e      	ldr	r3, [pc, #184]	@ (8000450 <MX_TIM2_Init+0x100>)
 8000398:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800039c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800039e:	4b2c      	ldr	r3, [pc, #176]	@ (8000450 <MX_TIM2_Init+0x100>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000450 <MX_TIM2_Init+0x100>)
 80003a6:	2280      	movs	r2, #128	@ 0x80
 80003a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003aa:	4829      	ldr	r0, [pc, #164]	@ (8000450 <MX_TIM2_Init+0x100>)
 80003ac:	f001 fabc 	bl	8001928 <HAL_TIM_Base_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80003b6:	f000 f8f3 	bl	80005a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003be:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003c4:	4619      	mov	r1, r3
 80003c6:	4822      	ldr	r0, [pc, #136]	@ (8000450 <MX_TIM2_Init+0x100>)
 80003c8:	f001 fd8c 	bl	8001ee4 <HAL_TIM_ConfigClockSource>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80003d2:	f000 f8e5 	bl	80005a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003d6:	481e      	ldr	r0, [pc, #120]	@ (8000450 <MX_TIM2_Init+0x100>)
 80003d8:	f001 fafd 	bl	80019d6 <HAL_TIM_PWM_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80003e2:	f000 f8dd 	bl	80005a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ea:	2300      	movs	r3, #0
 80003ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003ee:	f107 031c 	add.w	r3, r7, #28
 80003f2:	4619      	mov	r1, r3
 80003f4:	4816      	ldr	r0, [pc, #88]	@ (8000450 <MX_TIM2_Init+0x100>)
 80003f6:	f002 fb2b 	bl	8002a50 <HAL_TIMEx_MasterConfigSynchronization>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000400:	f000 f8ce 	bl	80005a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000404:	2360      	movs	r3, #96	@ 0x60
 8000406:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000408:	2300      	movs	r3, #0
 800040a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800040c:	2300      	movs	r3, #0
 800040e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000410:	2300      	movs	r3, #0
 8000412:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000414:	463b      	mov	r3, r7
 8000416:	2208      	movs	r2, #8
 8000418:	4619      	mov	r1, r3
 800041a:	480d      	ldr	r0, [pc, #52]	@ (8000450 <MX_TIM2_Init+0x100>)
 800041c:	f001 fc4e 	bl	8001cbc <HAL_TIM_PWM_ConfigChannel>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000426:	f000 f8bb 	bl	80005a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800042a:	463b      	mov	r3, r7
 800042c:	220c      	movs	r2, #12
 800042e:	4619      	mov	r1, r3
 8000430:	4807      	ldr	r0, [pc, #28]	@ (8000450 <MX_TIM2_Init+0x100>)
 8000432:	f001 fc43 	bl	8001cbc <HAL_TIM_PWM_ConfigChannel>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800043c:	f000 f8b0 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000440:	4803      	ldr	r0, [pc, #12]	@ (8000450 <MX_TIM2_Init+0x100>)
 8000442:	f000 f909 	bl	8000658 <HAL_TIM_MspPostInit>

}
 8000446:	bf00      	nop
 8000448:	3738      	adds	r7, #56	@ 0x38
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000028 	.word	0x20000028

08000454 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b08e      	sub	sp, #56	@ 0x38
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800045a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000468:	f107 031c 	add.w	r3, r7, #28
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000474:	463b      	mov	r3, r7
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]
 8000480:	611a      	str	r2, [r3, #16]
 8000482:	615a      	str	r2, [r3, #20]
 8000484:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000486:	4b32      	ldr	r3, [pc, #200]	@ (8000550 <MX_TIM3_Init+0xfc>)
 8000488:	4a32      	ldr	r2, [pc, #200]	@ (8000554 <MX_TIM3_Init+0x100>)
 800048a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 800048c:	4b30      	ldr	r3, [pc, #192]	@ (8000550 <MX_TIM3_Init+0xfc>)
 800048e:	2207      	movs	r2, #7
 8000490:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000492:	4b2f      	ldr	r3, [pc, #188]	@ (8000550 <MX_TIM3_Init+0xfc>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500;
 8000498:	4b2d      	ldr	r3, [pc, #180]	@ (8000550 <MX_TIM3_Init+0xfc>)
 800049a:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800049e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000550 <MX_TIM3_Init+0xfc>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000550 <MX_TIM3_Init+0xfc>)
 80004a8:	2280      	movs	r2, #128	@ 0x80
 80004aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004ac:	4828      	ldr	r0, [pc, #160]	@ (8000550 <MX_TIM3_Init+0xfc>)
 80004ae:	f001 fa3b 	bl	8001928 <HAL_TIM_Base_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80004b8:	f000 f872 	bl	80005a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004c6:	4619      	mov	r1, r3
 80004c8:	4821      	ldr	r0, [pc, #132]	@ (8000550 <MX_TIM3_Init+0xfc>)
 80004ca:	f001 fd0b 	bl	8001ee4 <HAL_TIM_ConfigClockSource>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80004d4:	f000 f864 	bl	80005a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004d8:	481d      	ldr	r0, [pc, #116]	@ (8000550 <MX_TIM3_Init+0xfc>)
 80004da:	f001 fa7c 	bl	80019d6 <HAL_TIM_PWM_Init>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80004e4:	f000 f85c 	bl	80005a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ec:	2300      	movs	r3, #0
 80004ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004f0:	f107 031c 	add.w	r3, r7, #28
 80004f4:	4619      	mov	r1, r3
 80004f6:	4816      	ldr	r0, [pc, #88]	@ (8000550 <MX_TIM3_Init+0xfc>)
 80004f8:	f002 faaa 	bl	8002a50 <HAL_TIMEx_MasterConfigSynchronization>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000502:	f000 f84d 	bl	80005a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000506:	2360      	movs	r3, #96	@ 0x60
 8000508:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000512:	2300      	movs	r3, #0
 8000514:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000516:	463b      	mov	r3, r7
 8000518:	2200      	movs	r2, #0
 800051a:	4619      	mov	r1, r3
 800051c:	480c      	ldr	r0, [pc, #48]	@ (8000550 <MX_TIM3_Init+0xfc>)
 800051e:	f001 fbcd 	bl	8001cbc <HAL_TIM_PWM_ConfigChannel>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000528:	f000 f83a 	bl	80005a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800052c:	463b      	mov	r3, r7
 800052e:	2204      	movs	r2, #4
 8000530:	4619      	mov	r1, r3
 8000532:	4807      	ldr	r0, [pc, #28]	@ (8000550 <MX_TIM3_Init+0xfc>)
 8000534:	f001 fbc2 	bl	8001cbc <HAL_TIM_PWM_ConfigChannel>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800053e:	f000 f82f 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000542:	4803      	ldr	r0, [pc, #12]	@ (8000550 <MX_TIM3_Init+0xfc>)
 8000544:	f000 f888 	bl	8000658 <HAL_TIM_MspPostInit>

}
 8000548:	bf00      	nop
 800054a:	3738      	adds	r7, #56	@ 0x38
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000074 	.word	0x20000074
 8000554:	40000400 	.word	0x40000400

08000558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <MX_GPIO_Init+0x44>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000562:	4a0e      	ldr	r2, [pc, #56]	@ (800059c <MX_GPIO_Init+0x44>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800056a:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <MX_GPIO_Init+0x44>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b09      	ldr	r3, [pc, #36]	@ (800059c <MX_GPIO_Init+0x44>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057a:	4a08      	ldr	r2, [pc, #32]	@ (800059c <MX_GPIO_Init+0x44>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000582:	4b06      	ldr	r3, [pc, #24]	@ (800059c <MX_GPIO_Init+0x44>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000

080005a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a4:	b672      	cpsid	i
}
 80005a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <Error_Handler+0x8>

080005ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005b2:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <HAL_MspInit+0x44>)
 80005b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005b6:	4a0e      	ldr	r2, [pc, #56]	@ (80005f0 <HAL_MspInit+0x44>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80005be:	4b0c      	ldr	r3, [pc, #48]	@ (80005f0 <HAL_MspInit+0x44>)
 80005c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <HAL_MspInit+0x44>)
 80005cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005ce:	4a08      	ldr	r2, [pc, #32]	@ (80005f0 <HAL_MspInit+0x44>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80005d6:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <HAL_MspInit+0x44>)
 80005d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80005e2:	f000 fc9b 	bl	8000f1c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000

080005f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000604:	d10c      	bne.n	8000620 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000606:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <HAL_TIM_Base_MspInit+0x5c>)
 8000608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800060a:	4a11      	ldr	r2, [pc, #68]	@ (8000650 <HAL_TIM_Base_MspInit+0x5c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6593      	str	r3, [r2, #88]	@ 0x58
 8000612:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <HAL_TIM_Base_MspInit+0x5c>)
 8000614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800061e:	e010      	b.n	8000642 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a0b      	ldr	r2, [pc, #44]	@ (8000654 <HAL_TIM_Base_MspInit+0x60>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d10b      	bne.n	8000642 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <HAL_TIM_Base_MspInit+0x5c>)
 800062c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800062e:	4a08      	ldr	r2, [pc, #32]	@ (8000650 <HAL_TIM_Base_MspInit+0x5c>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	6593      	str	r3, [r2, #88]	@ 0x58
 8000636:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <HAL_TIM_Base_MspInit+0x5c>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000
 8000654:	40000400 	.word	0x40000400

08000658 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	@ 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000678:	d11d      	bne.n	80006b6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b21      	ldr	r3, [pc, #132]	@ (8000700 <HAL_TIM_MspPostInit+0xa8>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067e:	4a20      	ldr	r2, [pc, #128]	@ (8000700 <HAL_TIM_MspPostInit+0xa8>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000686:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <HAL_TIM_MspPostInit+0xa8>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000692:	230c      	movs	r3, #12
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80006a2:	2301      	movs	r3, #1
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b0:	f000 fa0e 	bl	8000ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80006b4:	e020      	b.n	80006f8 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a12      	ldr	r2, [pc, #72]	@ (8000704 <HAL_TIM_MspPostInit+0xac>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d11b      	bne.n	80006f8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <HAL_TIM_MspPostInit+0xa8>)
 80006c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c4:	4a0e      	ldr	r2, [pc, #56]	@ (8000700 <HAL_TIM_MspPostInit+0xa8>)
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <HAL_TIM_MspPostInit+0xa8>)
 80006ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d0:	f003 0304 	and.w	r3, r3, #4
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006d8:	23c0      	movs	r3, #192	@ 0xc0
 80006da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006dc:	2302      	movs	r3, #2
 80006de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80006e8:	2302      	movs	r3, #2
 80006ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <HAL_TIM_MspPostInit+0xb0>)
 80006f4:	f000 f9ec 	bl	8000ad0 <HAL_GPIO_Init>
}
 80006f8:	bf00      	nop
 80006fa:	3728      	adds	r7, #40	@ 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40021000 	.word	0x40021000
 8000704:	40000400 	.word	0x40000400
 8000708:	48000800 	.word	0x48000800

0800070c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000710:	bf00      	nop
 8000712:	e7fd      	b.n	8000710 <NMI_Handler+0x4>

08000714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000718:	bf00      	nop
 800071a:	e7fd      	b.n	8000718 <HardFault_Handler+0x4>

0800071c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000720:	bf00      	nop
 8000722:	e7fd      	b.n	8000720 <MemManage_Handler+0x4>

08000724 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <BusFault_Handler+0x4>

0800072c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <UsageFault_Handler+0x4>

08000734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000762:	f000 f891 	bl	8000888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <SystemInit+0x20>)
 8000772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000776:	4a05      	ldr	r2, [pc, #20]	@ (800078c <SystemInit+0x20>)
 8000778:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800077c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000790:	480d      	ldr	r0, [pc, #52]	@ (80007c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000792:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000794:	f7ff ffea 	bl	800076c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000798:	480c      	ldr	r0, [pc, #48]	@ (80007cc <LoopForever+0x6>)
  ldr r1, =_edata
 800079a:	490d      	ldr	r1, [pc, #52]	@ (80007d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800079c:	4a0d      	ldr	r2, [pc, #52]	@ (80007d4 <LoopForever+0xe>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80007a0:	e002      	b.n	80007a8 <LoopCopyDataInit>

080007a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a6:	3304      	adds	r3, #4

080007a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ac:	d3f9      	bcc.n	80007a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ae:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b0:	4c0a      	ldr	r4, [pc, #40]	@ (80007dc <LoopForever+0x16>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b4:	e001      	b.n	80007ba <LoopFillZerobss>

080007b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b8:	3204      	adds	r2, #4

080007ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007bc:	d3fb      	bcc.n	80007b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007be:	f002 f9e5 	bl	8002b8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007c2:	f7ff fd29 	bl	8000218 <main>

080007c6 <LoopForever>:

LoopForever:
    b LoopForever
 80007c6:	e7fe      	b.n	80007c6 <LoopForever>
  ldr   r0, =_estack
 80007c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007d4:	08002c04 	.word	0x08002c04
  ldr r2, =_sbss
 80007d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007dc:	200000cc 	.word	0x200000cc

080007e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007e0:	e7fe      	b.n	80007e0 <ADC1_2_IRQHandler>

080007e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007e8:	2300      	movs	r3, #0
 80007ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f000 f93d 	bl	8000a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007f2:	200f      	movs	r0, #15
 80007f4:	f000 f80e 	bl	8000814 <HAL_InitTick>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d002      	beq.n	8000804 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	71fb      	strb	r3, [r7, #7]
 8000802:	e001      	b.n	8000808 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000804:	f7ff fed2 	bl	80005ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000808:	79fb      	ldrb	r3, [r7, #7]

}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800081c:	2300      	movs	r3, #0
 800081e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000820:	4b16      	ldr	r3, [pc, #88]	@ (800087c <HAL_InitTick+0x68>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d022      	beq.n	800086e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000828:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <HAL_InitTick+0x6c>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4b13      	ldr	r3, [pc, #76]	@ (800087c <HAL_InitTick+0x68>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000834:	fbb1 f3f3 	udiv	r3, r1, r3
 8000838:	fbb2 f3f3 	udiv	r3, r2, r3
 800083c:	4618      	mov	r0, r3
 800083e:	f000 f93a 	bl	8000ab6 <HAL_SYSTICK_Config>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d10f      	bne.n	8000868 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b0f      	cmp	r3, #15
 800084c:	d809      	bhi.n	8000862 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084e:	2200      	movs	r2, #0
 8000850:	6879      	ldr	r1, [r7, #4]
 8000852:	f04f 30ff 	mov.w	r0, #4294967295
 8000856:	f000 f914 	bl	8000a82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800085a:	4a0a      	ldr	r2, [pc, #40]	@ (8000884 <HAL_InitTick+0x70>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6013      	str	r3, [r2, #0]
 8000860:	e007      	b.n	8000872 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	73fb      	strb	r3, [r7, #15]
 8000866:	e004      	b.n	8000872 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000868:	2301      	movs	r3, #1
 800086a:	73fb      	strb	r3, [r7, #15]
 800086c:	e001      	b.n	8000872 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000872:	7bfb      	ldrb	r3, [r7, #15]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000008 	.word	0x20000008
 8000880:	20000000 	.word	0x20000000
 8000884:	20000004 	.word	0x20000004

08000888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800088c:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <HAL_IncTick+0x1c>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <HAL_IncTick+0x20>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4413      	add	r3, r2
 8000896:	4a03      	ldr	r2, [pc, #12]	@ (80008a4 <HAL_IncTick+0x1c>)
 8000898:	6013      	str	r3, [r2, #0]
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	200000c8 	.word	0x200000c8
 80008a8:	20000008 	.word	0x20000008

080008ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return uwTick;
 80008b0:	4b03      	ldr	r3, [pc, #12]	@ (80008c0 <HAL_GetTick+0x14>)
 80008b2:	681b      	ldr	r3, [r3, #0]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	200000c8 	.word	0x200000c8

080008c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008cc:	f7ff ffee 	bl	80008ac <HAL_GetTick>
 80008d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008dc:	d004      	beq.n	80008e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80008de:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <HAL_Delay+0x40>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	4413      	add	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008e8:	bf00      	nop
 80008ea:	f7ff ffdf 	bl	80008ac <HAL_GetTick>
 80008ee:	4602      	mov	r2, r0
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	1ad3      	subs	r3, r2, r3
 80008f4:	68fa      	ldr	r2, [r7, #12]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d8f7      	bhi.n	80008ea <HAL_Delay+0x26>
  {
  }
}
 80008fa:	bf00      	nop
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000008 	.word	0x20000008

08000908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000924:	4013      	ands	r3, r2
 8000926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000930:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800093a:	4a04      	ldr	r2, [pc, #16]	@ (800094c <__NVIC_SetPriorityGrouping+0x44>)
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	60d3      	str	r3, [r2, #12]
}
 8000940:	bf00      	nop
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000954:	4b04      	ldr	r3, [pc, #16]	@ (8000968 <__NVIC_GetPriorityGrouping+0x18>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	0a1b      	lsrs	r3, r3, #8
 800095a:	f003 0307 	and.w	r3, r3, #7
}
 800095e:	4618      	mov	r0, r3
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	6039      	str	r1, [r7, #0]
 8000976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	db0a      	blt.n	8000996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	490c      	ldr	r1, [pc, #48]	@ (80009b8 <__NVIC_SetPriority+0x4c>)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	0112      	lsls	r2, r2, #4
 800098c:	b2d2      	uxtb	r2, r2
 800098e:	440b      	add	r3, r1
 8000990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000994:	e00a      	b.n	80009ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4908      	ldr	r1, [pc, #32]	@ (80009bc <__NVIC_SetPriority+0x50>)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	f003 030f 	and.w	r3, r3, #15
 80009a2:	3b04      	subs	r3, #4
 80009a4:	0112      	lsls	r2, r2, #4
 80009a6:	b2d2      	uxtb	r2, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	761a      	strb	r2, [r3, #24]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000e100 	.word	0xe000e100
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b089      	sub	sp, #36	@ 0x24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	f1c3 0307 	rsb	r3, r3, #7
 80009da:	2b04      	cmp	r3, #4
 80009dc:	bf28      	it	cs
 80009de:	2304      	movcs	r3, #4
 80009e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3304      	adds	r3, #4
 80009e6:	2b06      	cmp	r3, #6
 80009e8:	d902      	bls.n	80009f0 <NVIC_EncodePriority+0x30>
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3b03      	subs	r3, #3
 80009ee:	e000      	b.n	80009f2 <NVIC_EncodePriority+0x32>
 80009f0:	2300      	movs	r3, #0
 80009f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	f04f 32ff 	mov.w	r2, #4294967295
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43da      	mvns	r2, r3
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	401a      	ands	r2, r3
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a08:	f04f 31ff 	mov.w	r1, #4294967295
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	43d9      	mvns	r1, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	4313      	orrs	r3, r2
         );
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3724      	adds	r7, #36	@ 0x24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a38:	d301      	bcc.n	8000a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e00f      	b.n	8000a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <SysTick_Config+0x40>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a46:	210f      	movs	r1, #15
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f7ff ff8e 	bl	800096c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <SysTick_Config+0x40>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a56:	4b04      	ldr	r3, [pc, #16]	@ (8000a68 <SysTick_Config+0x40>)
 8000a58:	2207      	movs	r2, #7
 8000a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	e000e010 	.word	0xe000e010

08000a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff47 	bl	8000908 <__NVIC_SetPriorityGrouping>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
 8000a8e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a90:	f7ff ff5e 	bl	8000950 <__NVIC_GetPriorityGrouping>
 8000a94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	6978      	ldr	r0, [r7, #20]
 8000a9c:	f7ff ff90 	bl	80009c0 <NVIC_EncodePriority>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff ff5f 	bl	800096c <__NVIC_SetPriority>
}
 8000aae:	bf00      	nop
 8000ab0:	3718      	adds	r7, #24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff ffb2 	bl	8000a28 <SysTick_Config>
 8000ac4:	4603      	mov	r3, r0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b087      	sub	sp, #28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ade:	e15a      	b.n	8000d96 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aec:	4013      	ands	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f000 814c 	beq.w	8000d90 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0303 	and.w	r3, r3, #3
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d005      	beq.n	8000b10 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d130      	bne.n	8000b72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	43db      	mvns	r3, r3
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	68da      	ldr	r2, [r3, #12]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b46:	2201      	movs	r2, #1
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	091b      	lsrs	r3, r3, #4
 8000b5c:	f003 0201 	and.w	r2, r3, #1
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f003 0303 	and.w	r3, r3, #3
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d017      	beq.n	8000bae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	4013      	ands	r3, r2
 8000b94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f003 0303 	and.w	r3, r3, #3
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d123      	bne.n	8000c02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	08da      	lsrs	r2, r3, #3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3208      	adds	r2, #8
 8000bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	220f      	movs	r2, #15
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	691a      	ldr	r2, [r3, #16]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	f003 0307 	and.w	r3, r3, #7
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	08da      	lsrs	r2, r3, #3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3208      	adds	r2, #8
 8000bfc:	6939      	ldr	r1, [r7, #16]
 8000bfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	693a      	ldr	r2, [r7, #16]
 8000c16:	4013      	ands	r3, r2
 8000c18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0203 	and.w	r2, r3, #3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	f000 80a6 	beq.w	8000d90 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c44:	4b5b      	ldr	r3, [pc, #364]	@ (8000db4 <HAL_GPIO_Init+0x2e4>)
 8000c46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c48:	4a5a      	ldr	r2, [pc, #360]	@ (8000db4 <HAL_GPIO_Init+0x2e4>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c50:	4b58      	ldr	r3, [pc, #352]	@ (8000db4 <HAL_GPIO_Init+0x2e4>)
 8000c52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c5c:	4a56      	ldr	r2, [pc, #344]	@ (8000db8 <HAL_GPIO_Init+0x2e8>)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	089b      	lsrs	r3, r3, #2
 8000c62:	3302      	adds	r3, #2
 8000c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	220f      	movs	r2, #15
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c86:	d01f      	beq.n	8000cc8 <HAL_GPIO_Init+0x1f8>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a4c      	ldr	r2, [pc, #304]	@ (8000dbc <HAL_GPIO_Init+0x2ec>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d019      	beq.n	8000cc4 <HAL_GPIO_Init+0x1f4>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a4b      	ldr	r2, [pc, #300]	@ (8000dc0 <HAL_GPIO_Init+0x2f0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d013      	beq.n	8000cc0 <HAL_GPIO_Init+0x1f0>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a4a      	ldr	r2, [pc, #296]	@ (8000dc4 <HAL_GPIO_Init+0x2f4>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d00d      	beq.n	8000cbc <HAL_GPIO_Init+0x1ec>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a49      	ldr	r2, [pc, #292]	@ (8000dc8 <HAL_GPIO_Init+0x2f8>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d007      	beq.n	8000cb8 <HAL_GPIO_Init+0x1e8>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a48      	ldr	r2, [pc, #288]	@ (8000dcc <HAL_GPIO_Init+0x2fc>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d101      	bne.n	8000cb4 <HAL_GPIO_Init+0x1e4>
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	e00a      	b.n	8000cca <HAL_GPIO_Init+0x1fa>
 8000cb4:	2306      	movs	r3, #6
 8000cb6:	e008      	b.n	8000cca <HAL_GPIO_Init+0x1fa>
 8000cb8:	2304      	movs	r3, #4
 8000cba:	e006      	b.n	8000cca <HAL_GPIO_Init+0x1fa>
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e004      	b.n	8000cca <HAL_GPIO_Init+0x1fa>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	e002      	b.n	8000cca <HAL_GPIO_Init+0x1fa>
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e000      	b.n	8000cca <HAL_GPIO_Init+0x1fa>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	f002 0203 	and.w	r2, r2, #3
 8000cd0:	0092      	lsls	r2, r2, #2
 8000cd2:	4093      	lsls	r3, r2
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cda:	4937      	ldr	r1, [pc, #220]	@ (8000db8 <HAL_GPIO_Init+0x2e8>)
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ce8:	4b39      	ldr	r3, [pc, #228]	@ (8000dd0 <HAL_GPIO_Init+0x300>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d0c:	4a30      	ldr	r2, [pc, #192]	@ (8000dd0 <HAL_GPIO_Init+0x300>)
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d12:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd0 <HAL_GPIO_Init+0x300>)
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d36:	4a26      	ldr	r2, [pc, #152]	@ (8000dd0 <HAL_GPIO_Init+0x300>)
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000d3c:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <HAL_GPIO_Init+0x300>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d60:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd0 <HAL_GPIO_Init+0x300>)
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000d66:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <HAL_GPIO_Init+0x300>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d8a:	4a11      	ldr	r2, [pc, #68]	@ (8000dd0 <HAL_GPIO_Init+0x300>)
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	3301      	adds	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f47f ae9d 	bne.w	8000ae0 <HAL_GPIO_Init+0x10>
  }
}
 8000da6:	bf00      	nop
 8000da8:	bf00      	nop
 8000daa:	371c      	adds	r7, #28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010000 	.word	0x40010000
 8000dbc:	48000400 	.word	0x48000400
 8000dc0:	48000800 	.word	0x48000800
 8000dc4:	48000c00 	.word	0x48000c00
 8000dc8:	48001000 	.word	0x48001000
 8000dcc:	48001400 	.word	0x48001400
 8000dd0:	40010400 	.word	0x40010400

08000dd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d141      	bne.n	8000e66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000de2:	4b4b      	ldr	r3, [pc, #300]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dee:	d131      	bne.n	8000e54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000df0:	4b47      	ldr	r3, [pc, #284]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000df6:	4a46      	ldr	r2, [pc, #280]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000dfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e00:	4b43      	ldr	r3, [pc, #268]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e08:	4a41      	ldr	r2, [pc, #260]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e10:	4b40      	ldr	r3, [pc, #256]	@ (8000f14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2232      	movs	r2, #50	@ 0x32
 8000e16:	fb02 f303 	mul.w	r3, r2, r3
 8000e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8000f18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	0c9b      	lsrs	r3, r3, #18
 8000e22:	3301      	adds	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e26:	e002      	b.n	8000e2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e2e:	4b38      	ldr	r3, [pc, #224]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e3a:	d102      	bne.n	8000e42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f2      	bne.n	8000e28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e42:	4b33      	ldr	r3, [pc, #204]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e4e:	d158      	bne.n	8000f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e057      	b.n	8000f04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e54:	4b2e      	ldr	r3, [pc, #184]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e5a:	4a2d      	ldr	r2, [pc, #180]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000e60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000e64:	e04d      	b.n	8000f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e6c:	d141      	bne.n	8000ef2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e6e:	4b28      	ldr	r3, [pc, #160]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e7a:	d131      	bne.n	8000ee0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e7c:	4b24      	ldr	r3, [pc, #144]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e82:	4a23      	ldr	r2, [pc, #140]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e8c:	4b20      	ldr	r3, [pc, #128]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e94:	4a1e      	ldr	r2, [pc, #120]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2232      	movs	r2, #50	@ 0x32
 8000ea2:	fb02 f303 	mul.w	r3, r2, r3
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eac:	0c9b      	lsrs	r3, r3, #18
 8000eae:	3301      	adds	r3, #1
 8000eb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eb2:	e002      	b.n	8000eba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ebc:	695b      	ldr	r3, [r3, #20]
 8000ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ec6:	d102      	bne.n	8000ece <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f2      	bne.n	8000eb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ece:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000eda:	d112      	bne.n	8000f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e011      	b.n	8000f04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000ef0:	e007      	b.n	8000f02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ef2:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000efa:	4a05      	ldr	r2, [pc, #20]	@ (8000f10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000efc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f00:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	40007000 	.word	0x40007000
 8000f14:	20000000 	.word	0x20000000
 8000f18:	431bde83 	.word	0x431bde83

08000f1c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000f26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f2a:	6093      	str	r3, [r2, #8]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	40007000 	.word	0x40007000

08000f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e2fe      	b.n	800154c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d075      	beq.n	8001046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f5a:	4b97      	ldr	r3, [pc, #604]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
 8000f62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f64:	4b94      	ldr	r3, [pc, #592]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	f003 0303 	and.w	r3, r3, #3
 8000f6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	2b0c      	cmp	r3, #12
 8000f72:	d102      	bne.n	8000f7a <HAL_RCC_OscConfig+0x3e>
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d002      	beq.n	8000f80 <HAL_RCC_OscConfig+0x44>
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2b08      	cmp	r3, #8
 8000f7e:	d10b      	bne.n	8000f98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	4b8d      	ldr	r3, [pc, #564]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d05b      	beq.n	8001044 <HAL_RCC_OscConfig+0x108>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d157      	bne.n	8001044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e2d9      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa0:	d106      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x74>
 8000fa2:	4b85      	ldr	r3, [pc, #532]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a84      	ldr	r2, [pc, #528]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e01d      	b.n	8000fec <HAL_RCC_OscConfig+0xb0>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x98>
 8000fba:	4b7f      	ldr	r3, [pc, #508]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a7e      	ldr	r2, [pc, #504]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b7c      	ldr	r3, [pc, #496]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a7b      	ldr	r2, [pc, #492]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e00b      	b.n	8000fec <HAL_RCC_OscConfig+0xb0>
 8000fd4:	4b78      	ldr	r3, [pc, #480]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a77      	ldr	r2, [pc, #476]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b75      	ldr	r3, [pc, #468]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a74      	ldr	r2, [pc, #464]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8000fe6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d013      	beq.n	800101c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fc5a 	bl	80008ac <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ffc:	f7ff fc56 	bl	80008ac <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b64      	cmp	r3, #100	@ 0x64
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e29e      	b.n	800154c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800100e:	4b6a      	ldr	r3, [pc, #424]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f0      	beq.n	8000ffc <HAL_RCC_OscConfig+0xc0>
 800101a:	e014      	b.n	8001046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800101c:	f7ff fc46 	bl	80008ac <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fc42 	bl	80008ac <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	@ 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e28a      	b.n	800154c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001036:	4b60      	ldr	r3, [pc, #384]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0xe8>
 8001042:	e000      	b.n	8001046 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d075      	beq.n	800113e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001052:	4b59      	ldr	r3, [pc, #356]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800105c:	4b56      	ldr	r3, [pc, #344]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2b0c      	cmp	r3, #12
 800106a:	d102      	bne.n	8001072 <HAL_RCC_OscConfig+0x136>
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d002      	beq.n	8001078 <HAL_RCC_OscConfig+0x13c>
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	2b04      	cmp	r3, #4
 8001076:	d11f      	bne.n	80010b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001078:	4b4f      	ldr	r3, [pc, #316]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <HAL_RCC_OscConfig+0x154>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e25d      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001090:	4b49      	ldr	r3, [pc, #292]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	061b      	lsls	r3, r3, #24
 800109e:	4946      	ldr	r1, [pc, #280]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80010a4:	4b45      	ldr	r3, [pc, #276]	@ (80011bc <HAL_RCC_OscConfig+0x280>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fbb3 	bl	8000814 <HAL_InitTick>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d043      	beq.n	800113c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e249      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d023      	beq.n	8001108 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c0:	4b3d      	ldr	r3, [pc, #244]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a3c      	ldr	r2, [pc, #240]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 80010c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010cc:	f7ff fbee 	bl	80008ac <HAL_GetTick>
 80010d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d4:	f7ff fbea 	bl	80008ac <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e232      	b.n	800154c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80010e6:	4b34      	ldr	r3, [pc, #208]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f0      	beq.n	80010d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f2:	4b31      	ldr	r3, [pc, #196]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	061b      	lsls	r3, r3, #24
 8001100:	492d      	ldr	r1, [pc, #180]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8001102:	4313      	orrs	r3, r2
 8001104:	604b      	str	r3, [r1, #4]
 8001106:	e01a      	b.n	800113e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001108:	4b2b      	ldr	r3, [pc, #172]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a2a      	ldr	r2, [pc, #168]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 800110e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001114:	f7ff fbca 	bl	80008ac <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800111c:	f7ff fbc6 	bl	80008ac <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e20e      	b.n	800154c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800112e:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x1e0>
 800113a:	e000      	b.n	800113e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800113c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d041      	beq.n	80011ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d01c      	beq.n	800118c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001152:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8001154:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001158:	4a17      	ldr	r2, [pc, #92]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001162:	f7ff fba3 	bl	80008ac <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116a:	f7ff fb9f 	bl	80008ac <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e1e7      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800117c:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 800117e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0ef      	beq.n	800116a <HAL_RCC_OscConfig+0x22e>
 800118a:	e020      	b.n	80011ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800118c:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 800118e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001192:	4a09      	ldr	r2, [pc, #36]	@ (80011b8 <HAL_RCC_OscConfig+0x27c>)
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800119c:	f7ff fb86 	bl	80008ac <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011a2:	e00d      	b.n	80011c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011a4:	f7ff fb82 	bl	80008ac <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d906      	bls.n	80011c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e1ca      	b.n	800154c <HAL_RCC_OscConfig+0x610>
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80011c0:	4b8c      	ldr	r3, [pc, #560]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80011c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1ea      	bne.n	80011a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 80a6 	beq.w	8001328 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80011e0:	4b84      	ldr	r3, [pc, #528]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80011e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_RCC_OscConfig+0x2b4>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x2b6>
 80011f0:	2300      	movs	r3, #0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00d      	beq.n	8001212 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b7f      	ldr	r3, [pc, #508]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fa:	4a7e      	ldr	r2, [pc, #504]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001200:	6593      	str	r3, [r2, #88]	@ 0x58
 8001202:	4b7c      	ldr	r3, [pc, #496]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800120e:	2301      	movs	r3, #1
 8001210:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001212:	4b79      	ldr	r3, [pc, #484]	@ (80013f8 <HAL_RCC_OscConfig+0x4bc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800121a:	2b00      	cmp	r3, #0
 800121c:	d118      	bne.n	8001250 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800121e:	4b76      	ldr	r3, [pc, #472]	@ (80013f8 <HAL_RCC_OscConfig+0x4bc>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a75      	ldr	r2, [pc, #468]	@ (80013f8 <HAL_RCC_OscConfig+0x4bc>)
 8001224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800122a:	f7ff fb3f 	bl	80008ac <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001232:	f7ff fb3b 	bl	80008ac <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e183      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001244:	4b6c      	ldr	r3, [pc, #432]	@ (80013f8 <HAL_RCC_OscConfig+0x4bc>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d108      	bne.n	800126a <HAL_RCC_OscConfig+0x32e>
 8001258:	4b66      	ldr	r3, [pc, #408]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 800125a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800125e:	4a65      	ldr	r2, [pc, #404]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001268:	e024      	b.n	80012b4 <HAL_RCC_OscConfig+0x378>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b05      	cmp	r3, #5
 8001270:	d110      	bne.n	8001294 <HAL_RCC_OscConfig+0x358>
 8001272:	4b60      	ldr	r3, [pc, #384]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001278:	4a5e      	ldr	r2, [pc, #376]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001282:	4b5c      	ldr	r3, [pc, #368]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001288:	4a5a      	ldr	r2, [pc, #360]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001292:	e00f      	b.n	80012b4 <HAL_RCC_OscConfig+0x378>
 8001294:	4b57      	ldr	r3, [pc, #348]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800129a:	4a56      	ldr	r2, [pc, #344]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 800129c:	f023 0301 	bic.w	r3, r3, #1
 80012a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80012a4:	4b53      	ldr	r3, [pc, #332]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80012a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012aa:	4a52      	ldr	r2, [pc, #328]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80012ac:	f023 0304 	bic.w	r3, r3, #4
 80012b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d016      	beq.n	80012ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012bc:	f7ff faf6 	bl	80008ac <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012c2:	e00a      	b.n	80012da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c4:	f7ff faf2 	bl	80008ac <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e138      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012da:	4b46      	ldr	r3, [pc, #280]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80012dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d0ed      	beq.n	80012c4 <HAL_RCC_OscConfig+0x388>
 80012e8:	e015      	b.n	8001316 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ea:	f7ff fadf 	bl	80008ac <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012f0:	e00a      	b.n	8001308 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	f7ff fadb 	bl	80008ac <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001300:	4293      	cmp	r3, r2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e121      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001308:	4b3a      	ldr	r3, [pc, #232]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 800130a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1ed      	bne.n	80012f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001316:	7ffb      	ldrb	r3, [r7, #31]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d105      	bne.n	8001328 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800131c:	4b35      	ldr	r3, [pc, #212]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 800131e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001320:	4a34      	ldr	r2, [pc, #208]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001326:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0320 	and.w	r3, r3, #32
 8001330:	2b00      	cmp	r3, #0
 8001332:	d03c      	beq.n	80013ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d01c      	beq.n	8001376 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800133c:	4b2d      	ldr	r3, [pc, #180]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 800133e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001342:	4a2c      	ldr	r2, [pc, #176]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800134c:	f7ff faae 	bl	80008ac <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001354:	f7ff faaa 	bl	80008ac <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e0f2      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001366:	4b23      	ldr	r3, [pc, #140]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001368:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0ef      	beq.n	8001354 <HAL_RCC_OscConfig+0x418>
 8001374:	e01b      	b.n	80013ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001376:	4b1f      	ldr	r3, [pc, #124]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 8001378:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800137c:	4a1d      	ldr	r2, [pc, #116]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 800137e:	f023 0301 	bic.w	r3, r3, #1
 8001382:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001386:	f7ff fa91 	bl	80008ac <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800138e:	f7ff fa8d 	bl	80008ac <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e0d5      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80013a0:	4b14      	ldr	r3, [pc, #80]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80013a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1ef      	bne.n	800138e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 80c9 	beq.w	800154a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013b8:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 030c 	and.w	r3, r3, #12
 80013c0:	2b0c      	cmp	r3, #12
 80013c2:	f000 8083 	beq.w	80014cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d15e      	bne.n	800148c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a08      	ldr	r2, [pc, #32]	@ (80013f4 <HAL_RCC_OscConfig+0x4b8>)
 80013d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013da:	f7ff fa67 	bl	80008ac <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e0:	e00c      	b.n	80013fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e2:	f7ff fa63 	bl	80008ac <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d905      	bls.n	80013fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e0ab      	b.n	800154c <HAL_RCC_OscConfig+0x610>
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013fc:	4b55      	ldr	r3, [pc, #340]	@ (8001554 <HAL_RCC_OscConfig+0x618>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1ec      	bne.n	80013e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001408:	4b52      	ldr	r3, [pc, #328]	@ (8001554 <HAL_RCC_OscConfig+0x618>)
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	4b52      	ldr	r3, [pc, #328]	@ (8001558 <HAL_RCC_OscConfig+0x61c>)
 800140e:	4013      	ands	r3, r2
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6a11      	ldr	r1, [r2, #32]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001418:	3a01      	subs	r2, #1
 800141a:	0112      	lsls	r2, r2, #4
 800141c:	4311      	orrs	r1, r2
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001422:	0212      	lsls	r2, r2, #8
 8001424:	4311      	orrs	r1, r2
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800142a:	0852      	lsrs	r2, r2, #1
 800142c:	3a01      	subs	r2, #1
 800142e:	0552      	lsls	r2, r2, #21
 8001430:	4311      	orrs	r1, r2
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001436:	0852      	lsrs	r2, r2, #1
 8001438:	3a01      	subs	r2, #1
 800143a:	0652      	lsls	r2, r2, #25
 800143c:	4311      	orrs	r1, r2
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001442:	06d2      	lsls	r2, r2, #27
 8001444:	430a      	orrs	r2, r1
 8001446:	4943      	ldr	r1, [pc, #268]	@ (8001554 <HAL_RCC_OscConfig+0x618>)
 8001448:	4313      	orrs	r3, r2
 800144a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800144c:	4b41      	ldr	r3, [pc, #260]	@ (8001554 <HAL_RCC_OscConfig+0x618>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a40      	ldr	r2, [pc, #256]	@ (8001554 <HAL_RCC_OscConfig+0x618>)
 8001452:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001456:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001458:	4b3e      	ldr	r3, [pc, #248]	@ (8001554 <HAL_RCC_OscConfig+0x618>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4a3d      	ldr	r2, [pc, #244]	@ (8001554 <HAL_RCC_OscConfig+0x618>)
 800145e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001462:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff fa22 	bl	80008ac <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146c:	f7ff fa1e 	bl	80008ac <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e066      	b.n	800154c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800147e:	4b35      	ldr	r3, [pc, #212]	@ (8001554 <HAL_RCC_OscConfig+0x618>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0f0      	beq.n	800146c <HAL_RCC_OscConfig+0x530>
 800148a:	e05e      	b.n	800154a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800148c:	4b31      	ldr	r3, [pc, #196]	@ (8001554 <HAL_RCC_OscConfig+0x618>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a30      	ldr	r2, [pc, #192]	@ (8001554 <HAL_RCC_OscConfig+0x618>)
 8001492:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fa08 	bl	80008ac <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff fa04 	bl	80008ac <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e04c      	b.n	800154c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b2:	4b28      	ldr	r3, [pc, #160]	@ (8001554 <HAL_RCC_OscConfig+0x618>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80014be:	4b25      	ldr	r3, [pc, #148]	@ (8001554 <HAL_RCC_OscConfig+0x618>)
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	4924      	ldr	r1, [pc, #144]	@ (8001554 <HAL_RCC_OscConfig+0x618>)
 80014c4:	4b25      	ldr	r3, [pc, #148]	@ (800155c <HAL_RCC_OscConfig+0x620>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	60cb      	str	r3, [r1, #12]
 80014ca:	e03e      	b.n	800154a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e039      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80014d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001554 <HAL_RCC_OscConfig+0x618>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f003 0203 	and.w	r2, r3, #3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d12c      	bne.n	8001546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f6:	3b01      	subs	r3, #1
 80014f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d123      	bne.n	8001546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001508:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800150a:	429a      	cmp	r2, r3
 800150c:	d11b      	bne.n	8001546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001518:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800151a:	429a      	cmp	r2, r3
 800151c:	d113      	bne.n	8001546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001528:	085b      	lsrs	r3, r3, #1
 800152a:	3b01      	subs	r3, #1
 800152c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800152e:	429a      	cmp	r2, r3
 8001530:	d109      	bne.n	8001546 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800153c:	085b      	lsrs	r3, r3, #1
 800153e:	3b01      	subs	r3, #1
 8001540:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001542:	429a      	cmp	r2, r3
 8001544:	d001      	beq.n	800154a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000
 8001558:	019f800c 	.word	0x019f800c
 800155c:	feeefffc 	.word	0xfeeefffc

08001560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e11e      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001578:	4b91      	ldr	r3, [pc, #580]	@ (80017c0 <HAL_RCC_ClockConfig+0x260>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d910      	bls.n	80015a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	4b8e      	ldr	r3, [pc, #568]	@ (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 020f 	bic.w	r2, r3, #15
 800158e:	498c      	ldr	r1, [pc, #560]	@ (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001596:	4b8a      	ldr	r3, [pc, #552]	@ (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e106      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d073      	beq.n	800169c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d129      	bne.n	8001610 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015bc:	4b81      	ldr	r3, [pc, #516]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e0f4      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80015cc:	f000 f966 	bl	800189c <RCC_GetSysClockFreqFromPLLSource>
 80015d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4a7c      	ldr	r2, [pc, #496]	@ (80017c8 <HAL_RCC_ClockConfig+0x268>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d93f      	bls.n	800165a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015da:	4b7a      	ldr	r3, [pc, #488]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d033      	beq.n	800165a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d12f      	bne.n	800165a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80015fa:	4b72      	ldr	r3, [pc, #456]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001602:	4a70      	ldr	r2, [pc, #448]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001608:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	e024      	b.n	800165a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b02      	cmp	r3, #2
 8001616:	d107      	bne.n	8001628 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001618:	4b6a      	ldr	r3, [pc, #424]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0c6      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001628:	4b66      	ldr	r3, [pc, #408]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0be      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001638:	f000 f8ce 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
 800163c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4a61      	ldr	r2, [pc, #388]	@ (80017c8 <HAL_RCC_ClockConfig+0x268>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d909      	bls.n	800165a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001646:	4b5f      	ldr	r3, [pc, #380]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800164e:	4a5d      	ldr	r2, [pc, #372]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001650:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001654:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001656:	2380      	movs	r3, #128	@ 0x80
 8001658:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800165a:	4b5a      	ldr	r3, [pc, #360]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f023 0203 	bic.w	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4957      	ldr	r1, [pc, #348]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001668:	4313      	orrs	r3, r2
 800166a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800166c:	f7ff f91e 	bl	80008ac <HAL_GetTick>
 8001670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001672:	e00a      	b.n	800168a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001674:	f7ff f91a 	bl	80008ac <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e095      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168a:	4b4e      	ldr	r3, [pc, #312]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 020c 	and.w	r2, r3, #12
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	429a      	cmp	r2, r3
 800169a:	d1eb      	bne.n	8001674 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d023      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016b4:	4b43      	ldr	r3, [pc, #268]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a42      	ldr	r2, [pc, #264]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d007      	beq.n	80016dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80016cc:	4b3d      	ldr	r3, [pc, #244]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80016d4:	4a3b      	ldr	r2, [pc, #236]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80016da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016dc:	4b39      	ldr	r3, [pc, #228]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	4936      	ldr	r1, [pc, #216]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
 80016ee:	e008      	b.n	8001702 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2b80      	cmp	r3, #128	@ 0x80
 80016f4:	d105      	bne.n	8001702 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80016f6:	4b33      	ldr	r3, [pc, #204]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	4a32      	ldr	r2, [pc, #200]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 80016fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001700:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001702:	4b2f      	ldr	r3, [pc, #188]	@ (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	429a      	cmp	r2, r3
 800170e:	d21d      	bcs.n	800174c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001710:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f023 020f 	bic.w	r2, r3, #15
 8001718:	4929      	ldr	r1, [pc, #164]	@ (80017c0 <HAL_RCC_ClockConfig+0x260>)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001720:	f7ff f8c4 	bl	80008ac <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001726:	e00a      	b.n	800173e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001728:	f7ff f8c0 	bl	80008ac <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e03b      	b.n	80017b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <HAL_RCC_ClockConfig+0x260>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d1ed      	bne.n	8001728 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001758:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4917      	ldr	r1, [pc, #92]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b00      	cmp	r3, #0
 8001774:	d009      	beq.n	800178a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001776:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	490f      	ldr	r1, [pc, #60]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001786:	4313      	orrs	r3, r2
 8001788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800178a:	f000 f825 	bl	80017d8 <HAL_RCC_GetSysClockFreq>
 800178e:	4602      	mov	r2, r0
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <HAL_RCC_ClockConfig+0x264>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	091b      	lsrs	r3, r3, #4
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	490c      	ldr	r1, [pc, #48]	@ (80017cc <HAL_RCC_ClockConfig+0x26c>)
 800179c:	5ccb      	ldrb	r3, [r1, r3]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	fa22 f303 	lsr.w	r3, r2, r3
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <HAL_RCC_ClockConfig+0x270>)
 80017a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80017aa:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <HAL_RCC_ClockConfig+0x274>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff f830 	bl	8000814 <HAL_InitTick>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40022000 	.word	0x40022000
 80017c4:	40021000 	.word	0x40021000
 80017c8:	04c4b400 	.word	0x04c4b400
 80017cc:	08002bec 	.word	0x08002bec
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000004 	.word	0x20000004

080017d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80017de:	4b2c      	ldr	r3, [pc, #176]	@ (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d102      	bne.n	80017f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80017ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001894 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	e047      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017f0:	4b27      	ldr	r3, [pc, #156]	@ (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 030c 	and.w	r3, r3, #12
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d102      	bne.n	8001802 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017fc:	4b26      	ldr	r3, [pc, #152]	@ (8001898 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	e03e      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001802:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b0c      	cmp	r3, #12
 800180c:	d136      	bne.n	800187c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800180e:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001818:	4b1d      	ldr	r3, [pc, #116]	@ (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3301      	adds	r3, #1
 8001824:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d10c      	bne.n	8001846 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800182c:	4a1a      	ldr	r2, [pc, #104]	@ (8001898 <HAL_RCC_GetSysClockFreq+0xc0>)
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	fbb2 f3f3 	udiv	r3, r2, r3
 8001834:	4a16      	ldr	r2, [pc, #88]	@ (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001836:	68d2      	ldr	r2, [r2, #12]
 8001838:	0a12      	lsrs	r2, r2, #8
 800183a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	617b      	str	r3, [r7, #20]
      break;
 8001844:	e00c      	b.n	8001860 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001846:	4a13      	ldr	r2, [pc, #76]	@ (8001894 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	4a10      	ldr	r2, [pc, #64]	@ (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001850:	68d2      	ldr	r2, [r2, #12]
 8001852:	0a12      	lsrs	r2, r2, #8
 8001854:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	617b      	str	r3, [r7, #20]
      break;
 800185e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001860:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0e5b      	lsrs	r3, r3, #25
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	3301      	adds	r3, #1
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	fbb2 f3f3 	udiv	r3, r2, r3
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	e001      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001880:	693b      	ldr	r3, [r7, #16]
}
 8001882:	4618      	mov	r0, r3
 8001884:	371c      	adds	r7, #28
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	00f42400 	.word	0x00f42400
 8001898:	007a1200 	.word	0x007a1200

0800189c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018a2:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	@ (800191c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	3301      	adds	r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	2b03      	cmp	r3, #3
 80018be:	d10c      	bne.n	80018da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018c0:	4a17      	ldr	r2, [pc, #92]	@ (8001920 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c8:	4a14      	ldr	r2, [pc, #80]	@ (800191c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018ca:	68d2      	ldr	r2, [r2, #12]
 80018cc:	0a12      	lsrs	r2, r2, #8
 80018ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80018d2:	fb02 f303 	mul.w	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
    break;
 80018d8:	e00c      	b.n	80018f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80018da:	4a12      	ldr	r2, [pc, #72]	@ (8001924 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4a0e      	ldr	r2, [pc, #56]	@ (800191c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018e4:	68d2      	ldr	r2, [r2, #12]
 80018e6:	0a12      	lsrs	r2, r2, #8
 80018e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	617b      	str	r3, [r7, #20]
    break;
 80018f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80018f4:	4b09      	ldr	r3, [pc, #36]	@ (800191c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0e5b      	lsrs	r3, r3, #25
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	3301      	adds	r3, #1
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800190e:	687b      	ldr	r3, [r7, #4]
}
 8001910:	4618      	mov	r0, r3
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40021000 	.word	0x40021000
 8001920:	007a1200 	.word	0x007a1200
 8001924:	00f42400 	.word	0x00f42400

08001928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e049      	b.n	80019ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d106      	bne.n	8001954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7fe fe50 	bl	80005f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2202      	movs	r2, #2
 8001958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3304      	adds	r3, #4
 8001964:	4619      	mov	r1, r3
 8001966:	4610      	mov	r0, r2
 8001968:	f000 fbd2 	bl	8002110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e049      	b.n	8001a7c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d106      	bne.n	8001a02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f000 f841 	bl	8001a84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2202      	movs	r2, #2
 8001a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3304      	adds	r3, #4
 8001a12:	4619      	mov	r1, r3
 8001a14:	4610      	mov	r0, r2
 8001a16:	f000 fb7b 	bl	8002110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d109      	bne.n	8001abc <HAL_TIM_PWM_Start+0x24>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	bf14      	ite	ne
 8001ab4:	2301      	movne	r3, #1
 8001ab6:	2300      	moveq	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	e03c      	b.n	8001b36 <HAL_TIM_PWM_Start+0x9e>
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d109      	bne.n	8001ad6 <HAL_TIM_PWM_Start+0x3e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	bf14      	ite	ne
 8001ace:	2301      	movne	r3, #1
 8001ad0:	2300      	moveq	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	e02f      	b.n	8001b36 <HAL_TIM_PWM_Start+0x9e>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d109      	bne.n	8001af0 <HAL_TIM_PWM_Start+0x58>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	bf14      	ite	ne
 8001ae8:	2301      	movne	r3, #1
 8001aea:	2300      	moveq	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	e022      	b.n	8001b36 <HAL_TIM_PWM_Start+0x9e>
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	2b0c      	cmp	r3, #12
 8001af4:	d109      	bne.n	8001b0a <HAL_TIM_PWM_Start+0x72>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	bf14      	ite	ne
 8001b02:	2301      	movne	r3, #1
 8001b04:	2300      	moveq	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	e015      	b.n	8001b36 <HAL_TIM_PWM_Start+0x9e>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b10      	cmp	r3, #16
 8001b0e:	d109      	bne.n	8001b24 <HAL_TIM_PWM_Start+0x8c>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	e008      	b.n	8001b36 <HAL_TIM_PWM_Start+0x9e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	bf14      	ite	ne
 8001b30:	2301      	movne	r3, #1
 8001b32:	2300      	moveq	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e0a6      	b.n	8001c8c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d104      	bne.n	8001b4e <HAL_TIM_PWM_Start+0xb6>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b4c:	e023      	b.n	8001b96 <HAL_TIM_PWM_Start+0xfe>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d104      	bne.n	8001b5e <HAL_TIM_PWM_Start+0xc6>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2202      	movs	r2, #2
 8001b58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b5c:	e01b      	b.n	8001b96 <HAL_TIM_PWM_Start+0xfe>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d104      	bne.n	8001b6e <HAL_TIM_PWM_Start+0xd6>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b6c:	e013      	b.n	8001b96 <HAL_TIM_PWM_Start+0xfe>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2b0c      	cmp	r3, #12
 8001b72:	d104      	bne.n	8001b7e <HAL_TIM_PWM_Start+0xe6>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001b7c:	e00b      	b.n	8001b96 <HAL_TIM_PWM_Start+0xfe>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b10      	cmp	r3, #16
 8001b82:	d104      	bne.n	8001b8e <HAL_TIM_PWM_Start+0xf6>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b8c:	e003      	b.n	8001b96 <HAL_TIM_PWM_Start+0xfe>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2202      	movs	r2, #2
 8001b92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	6839      	ldr	r1, [r7, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 ff30 	bl	8002a04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a3a      	ldr	r2, [pc, #232]	@ (8001c94 <HAL_TIM_PWM_Start+0x1fc>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d018      	beq.n	8001be0 <HAL_TIM_PWM_Start+0x148>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a39      	ldr	r2, [pc, #228]	@ (8001c98 <HAL_TIM_PWM_Start+0x200>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d013      	beq.n	8001be0 <HAL_TIM_PWM_Start+0x148>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a37      	ldr	r2, [pc, #220]	@ (8001c9c <HAL_TIM_PWM_Start+0x204>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00e      	beq.n	8001be0 <HAL_TIM_PWM_Start+0x148>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a36      	ldr	r2, [pc, #216]	@ (8001ca0 <HAL_TIM_PWM_Start+0x208>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d009      	beq.n	8001be0 <HAL_TIM_PWM_Start+0x148>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a34      	ldr	r2, [pc, #208]	@ (8001ca4 <HAL_TIM_PWM_Start+0x20c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d004      	beq.n	8001be0 <HAL_TIM_PWM_Start+0x148>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a33      	ldr	r2, [pc, #204]	@ (8001ca8 <HAL_TIM_PWM_Start+0x210>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d101      	bne.n	8001be4 <HAL_TIM_PWM_Start+0x14c>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_TIM_PWM_Start+0x14e>
 8001be4:	2300      	movs	r3, #0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d007      	beq.n	8001bfa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001bf8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a25      	ldr	r2, [pc, #148]	@ (8001c94 <HAL_TIM_PWM_Start+0x1fc>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d022      	beq.n	8001c4a <HAL_TIM_PWM_Start+0x1b2>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c0c:	d01d      	beq.n	8001c4a <HAL_TIM_PWM_Start+0x1b2>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a26      	ldr	r2, [pc, #152]	@ (8001cac <HAL_TIM_PWM_Start+0x214>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d018      	beq.n	8001c4a <HAL_TIM_PWM_Start+0x1b2>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a24      	ldr	r2, [pc, #144]	@ (8001cb0 <HAL_TIM_PWM_Start+0x218>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_TIM_PWM_Start+0x1b2>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a23      	ldr	r2, [pc, #140]	@ (8001cb4 <HAL_TIM_PWM_Start+0x21c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d00e      	beq.n	8001c4a <HAL_TIM_PWM_Start+0x1b2>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a19      	ldr	r2, [pc, #100]	@ (8001c98 <HAL_TIM_PWM_Start+0x200>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d009      	beq.n	8001c4a <HAL_TIM_PWM_Start+0x1b2>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a18      	ldr	r2, [pc, #96]	@ (8001c9c <HAL_TIM_PWM_Start+0x204>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d004      	beq.n	8001c4a <HAL_TIM_PWM_Start+0x1b2>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a18      	ldr	r2, [pc, #96]	@ (8001ca8 <HAL_TIM_PWM_Start+0x210>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d115      	bne.n	8001c76 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <HAL_TIM_PWM_Start+0x220>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b06      	cmp	r3, #6
 8001c5a:	d015      	beq.n	8001c88 <HAL_TIM_PWM_Start+0x1f0>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c62:	d011      	beq.n	8001c88 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c74:	e008      	b.n	8001c88 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0201 	orr.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	e000      	b.n	8001c8a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40012c00 	.word	0x40012c00
 8001c98:	40013400 	.word	0x40013400
 8001c9c:	40014000 	.word	0x40014000
 8001ca0:	40014400 	.word	0x40014400
 8001ca4:	40014800 	.word	0x40014800
 8001ca8:	40015000 	.word	0x40015000
 8001cac:	40000400 	.word	0x40000400
 8001cb0:	40000800 	.word	0x40000800
 8001cb4:	40000c00 	.word	0x40000c00
 8001cb8:	00010007 	.word	0x00010007

08001cbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e0ff      	b.n	8001eda <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b14      	cmp	r3, #20
 8001ce6:	f200 80f0 	bhi.w	8001eca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001cea:	a201      	add	r2, pc, #4	@ (adr r2, 8001cf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf0:	08001d45 	.word	0x08001d45
 8001cf4:	08001ecb 	.word	0x08001ecb
 8001cf8:	08001ecb 	.word	0x08001ecb
 8001cfc:	08001ecb 	.word	0x08001ecb
 8001d00:	08001d85 	.word	0x08001d85
 8001d04:	08001ecb 	.word	0x08001ecb
 8001d08:	08001ecb 	.word	0x08001ecb
 8001d0c:	08001ecb 	.word	0x08001ecb
 8001d10:	08001dc7 	.word	0x08001dc7
 8001d14:	08001ecb 	.word	0x08001ecb
 8001d18:	08001ecb 	.word	0x08001ecb
 8001d1c:	08001ecb 	.word	0x08001ecb
 8001d20:	08001e07 	.word	0x08001e07
 8001d24:	08001ecb 	.word	0x08001ecb
 8001d28:	08001ecb 	.word	0x08001ecb
 8001d2c:	08001ecb 	.word	0x08001ecb
 8001d30:	08001e49 	.word	0x08001e49
 8001d34:	08001ecb 	.word	0x08001ecb
 8001d38:	08001ecb 	.word	0x08001ecb
 8001d3c:	08001ecb 	.word	0x08001ecb
 8001d40:	08001e89 	.word	0x08001e89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 fa94 	bl	8002278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699a      	ldr	r2, [r3, #24]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0208 	orr.w	r2, r2, #8
 8001d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699a      	ldr	r2, [r3, #24]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0204 	bic.w	r2, r2, #4
 8001d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6999      	ldr	r1, [r3, #24]
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	619a      	str	r2, [r3, #24]
      break;
 8001d82:	e0a5      	b.n	8001ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 fb0e 	bl	80023ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699a      	ldr	r2, [r3, #24]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699a      	ldr	r2, [r3, #24]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6999      	ldr	r1, [r3, #24]
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	021a      	lsls	r2, r3, #8
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	619a      	str	r2, [r3, #24]
      break;
 8001dc4:	e084      	b.n	8001ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68b9      	ldr	r1, [r7, #8]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 fb81 	bl	80024d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69da      	ldr	r2, [r3, #28]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0208 	orr.w	r2, r2, #8
 8001de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69da      	ldr	r2, [r3, #28]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0204 	bic.w	r2, r2, #4
 8001df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	69d9      	ldr	r1, [r3, #28]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	61da      	str	r2, [r3, #28]
      break;
 8001e04:	e064      	b.n	8001ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 fbf3 	bl	80025f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	69da      	ldr	r2, [r3, #28]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	69da      	ldr	r2, [r3, #28]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69d9      	ldr	r1, [r3, #28]
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	021a      	lsls	r2, r3, #8
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	61da      	str	r2, [r3, #28]
      break;
 8001e46:	e043      	b.n	8001ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fc66 	bl	8002720 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0208 	orr.w	r2, r2, #8
 8001e62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0204 	bic.w	r2, r2, #4
 8001e72:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8001e86:	e023      	b.n	8001ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 fcb0 	bl	80027f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ea2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eb2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	021a      	lsls	r2, r3, #8
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8001ec8:	e002      	b.n	8001ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8001ece:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop

08001ee4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_TIM_ConfigClockSource+0x1c>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e0f6      	b.n	80020ee <HAL_TIM_ConfigClockSource+0x20a>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8001f1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a6f      	ldr	r2, [pc, #444]	@ (80020f8 <HAL_TIM_ConfigClockSource+0x214>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	f000 80c1 	beq.w	80020c2 <HAL_TIM_ConfigClockSource+0x1de>
 8001f40:	4a6d      	ldr	r2, [pc, #436]	@ (80020f8 <HAL_TIM_ConfigClockSource+0x214>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	f200 80c6 	bhi.w	80020d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8001f48:	4a6c      	ldr	r2, [pc, #432]	@ (80020fc <HAL_TIM_ConfigClockSource+0x218>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	f000 80b9 	beq.w	80020c2 <HAL_TIM_ConfigClockSource+0x1de>
 8001f50:	4a6a      	ldr	r2, [pc, #424]	@ (80020fc <HAL_TIM_ConfigClockSource+0x218>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	f200 80be 	bhi.w	80020d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8001f58:	4a69      	ldr	r2, [pc, #420]	@ (8002100 <HAL_TIM_ConfigClockSource+0x21c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	f000 80b1 	beq.w	80020c2 <HAL_TIM_ConfigClockSource+0x1de>
 8001f60:	4a67      	ldr	r2, [pc, #412]	@ (8002100 <HAL_TIM_ConfigClockSource+0x21c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	f200 80b6 	bhi.w	80020d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8001f68:	4a66      	ldr	r2, [pc, #408]	@ (8002104 <HAL_TIM_ConfigClockSource+0x220>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	f000 80a9 	beq.w	80020c2 <HAL_TIM_ConfigClockSource+0x1de>
 8001f70:	4a64      	ldr	r2, [pc, #400]	@ (8002104 <HAL_TIM_ConfigClockSource+0x220>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	f200 80ae 	bhi.w	80020d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8001f78:	4a63      	ldr	r2, [pc, #396]	@ (8002108 <HAL_TIM_ConfigClockSource+0x224>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	f000 80a1 	beq.w	80020c2 <HAL_TIM_ConfigClockSource+0x1de>
 8001f80:	4a61      	ldr	r2, [pc, #388]	@ (8002108 <HAL_TIM_ConfigClockSource+0x224>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	f200 80a6 	bhi.w	80020d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8001f88:	4a60      	ldr	r2, [pc, #384]	@ (800210c <HAL_TIM_ConfigClockSource+0x228>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	f000 8099 	beq.w	80020c2 <HAL_TIM_ConfigClockSource+0x1de>
 8001f90:	4a5e      	ldr	r2, [pc, #376]	@ (800210c <HAL_TIM_ConfigClockSource+0x228>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	f200 809e 	bhi.w	80020d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8001f98:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8001f9c:	f000 8091 	beq.w	80020c2 <HAL_TIM_ConfigClockSource+0x1de>
 8001fa0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8001fa4:	f200 8096 	bhi.w	80020d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8001fa8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001fac:	f000 8089 	beq.w	80020c2 <HAL_TIM_ConfigClockSource+0x1de>
 8001fb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001fb4:	f200 808e 	bhi.w	80020d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8001fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fbc:	d03e      	beq.n	800203c <HAL_TIM_ConfigClockSource+0x158>
 8001fbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fc2:	f200 8087 	bhi.w	80020d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8001fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fca:	f000 8086 	beq.w	80020da <HAL_TIM_ConfigClockSource+0x1f6>
 8001fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fd2:	d87f      	bhi.n	80020d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8001fd4:	2b70      	cmp	r3, #112	@ 0x70
 8001fd6:	d01a      	beq.n	800200e <HAL_TIM_ConfigClockSource+0x12a>
 8001fd8:	2b70      	cmp	r3, #112	@ 0x70
 8001fda:	d87b      	bhi.n	80020d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8001fdc:	2b60      	cmp	r3, #96	@ 0x60
 8001fde:	d050      	beq.n	8002082 <HAL_TIM_ConfigClockSource+0x19e>
 8001fe0:	2b60      	cmp	r3, #96	@ 0x60
 8001fe2:	d877      	bhi.n	80020d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8001fe4:	2b50      	cmp	r3, #80	@ 0x50
 8001fe6:	d03c      	beq.n	8002062 <HAL_TIM_ConfigClockSource+0x17e>
 8001fe8:	2b50      	cmp	r3, #80	@ 0x50
 8001fea:	d873      	bhi.n	80020d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8001fec:	2b40      	cmp	r3, #64	@ 0x40
 8001fee:	d058      	beq.n	80020a2 <HAL_TIM_ConfigClockSource+0x1be>
 8001ff0:	2b40      	cmp	r3, #64	@ 0x40
 8001ff2:	d86f      	bhi.n	80020d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8001ff4:	2b30      	cmp	r3, #48	@ 0x30
 8001ff6:	d064      	beq.n	80020c2 <HAL_TIM_ConfigClockSource+0x1de>
 8001ff8:	2b30      	cmp	r3, #48	@ 0x30
 8001ffa:	d86b      	bhi.n	80020d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8001ffc:	2b20      	cmp	r3, #32
 8001ffe:	d060      	beq.n	80020c2 <HAL_TIM_ConfigClockSource+0x1de>
 8002000:	2b20      	cmp	r3, #32
 8002002:	d867      	bhi.n	80020d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8002004:	2b00      	cmp	r3, #0
 8002006:	d05c      	beq.n	80020c2 <HAL_TIM_ConfigClockSource+0x1de>
 8002008:	2b10      	cmp	r3, #16
 800200a:	d05a      	beq.n	80020c2 <HAL_TIM_ConfigClockSource+0x1de>
 800200c:	e062      	b.n	80020d4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800201e:	f000 fcd1 	bl	80029c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002030:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	609a      	str	r2, [r3, #8]
      break;
 800203a:	e04f      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800204c:	f000 fcba 	bl	80029c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800205e:	609a      	str	r2, [r3, #8]
      break;
 8002060:	e03c      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800206e:	461a      	mov	r2, r3
 8002070:	f000 fc2c 	bl	80028cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2150      	movs	r1, #80	@ 0x50
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fc85 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 8002080:	e02c      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800208e:	461a      	mov	r2, r3
 8002090:	f000 fc4b 	bl	800292a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2160      	movs	r1, #96	@ 0x60
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fc75 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 80020a0:	e01c      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ae:	461a      	mov	r2, r3
 80020b0:	f000 fc0c 	bl	80028cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2140      	movs	r1, #64	@ 0x40
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 fc65 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 80020c0:	e00c      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4619      	mov	r1, r3
 80020cc:	4610      	mov	r0, r2
 80020ce:	f000 fc5c 	bl	800298a <TIM_ITRx_SetConfig>
      break;
 80020d2:	e003      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
      break;
 80020d8:	e000      	b.n	80020dc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80020da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	00100070 	.word	0x00100070
 80020fc:	00100060 	.word	0x00100060
 8002100:	00100050 	.word	0x00100050
 8002104:	00100040 	.word	0x00100040
 8002108:	00100030 	.word	0x00100030
 800210c:	00100020 	.word	0x00100020

08002110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a4c      	ldr	r2, [pc, #304]	@ (8002254 <TIM_Base_SetConfig+0x144>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d017      	beq.n	8002158 <TIM_Base_SetConfig+0x48>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800212e:	d013      	beq.n	8002158 <TIM_Base_SetConfig+0x48>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a49      	ldr	r2, [pc, #292]	@ (8002258 <TIM_Base_SetConfig+0x148>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d00f      	beq.n	8002158 <TIM_Base_SetConfig+0x48>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a48      	ldr	r2, [pc, #288]	@ (800225c <TIM_Base_SetConfig+0x14c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d00b      	beq.n	8002158 <TIM_Base_SetConfig+0x48>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a47      	ldr	r2, [pc, #284]	@ (8002260 <TIM_Base_SetConfig+0x150>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d007      	beq.n	8002158 <TIM_Base_SetConfig+0x48>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a46      	ldr	r2, [pc, #280]	@ (8002264 <TIM_Base_SetConfig+0x154>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d003      	beq.n	8002158 <TIM_Base_SetConfig+0x48>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a45      	ldr	r2, [pc, #276]	@ (8002268 <TIM_Base_SetConfig+0x158>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d108      	bne.n	800216a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800215e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a39      	ldr	r2, [pc, #228]	@ (8002254 <TIM_Base_SetConfig+0x144>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d023      	beq.n	80021ba <TIM_Base_SetConfig+0xaa>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002178:	d01f      	beq.n	80021ba <TIM_Base_SetConfig+0xaa>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a36      	ldr	r2, [pc, #216]	@ (8002258 <TIM_Base_SetConfig+0x148>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d01b      	beq.n	80021ba <TIM_Base_SetConfig+0xaa>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a35      	ldr	r2, [pc, #212]	@ (800225c <TIM_Base_SetConfig+0x14c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d017      	beq.n	80021ba <TIM_Base_SetConfig+0xaa>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a34      	ldr	r2, [pc, #208]	@ (8002260 <TIM_Base_SetConfig+0x150>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d013      	beq.n	80021ba <TIM_Base_SetConfig+0xaa>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a33      	ldr	r2, [pc, #204]	@ (8002264 <TIM_Base_SetConfig+0x154>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00f      	beq.n	80021ba <TIM_Base_SetConfig+0xaa>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a33      	ldr	r2, [pc, #204]	@ (800226c <TIM_Base_SetConfig+0x15c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00b      	beq.n	80021ba <TIM_Base_SetConfig+0xaa>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a32      	ldr	r2, [pc, #200]	@ (8002270 <TIM_Base_SetConfig+0x160>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d007      	beq.n	80021ba <TIM_Base_SetConfig+0xaa>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a31      	ldr	r2, [pc, #196]	@ (8002274 <TIM_Base_SetConfig+0x164>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d003      	beq.n	80021ba <TIM_Base_SetConfig+0xaa>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002268 <TIM_Base_SetConfig+0x158>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d108      	bne.n	80021cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a18      	ldr	r2, [pc, #96]	@ (8002254 <TIM_Base_SetConfig+0x144>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d013      	beq.n	8002220 <TIM_Base_SetConfig+0x110>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002264 <TIM_Base_SetConfig+0x154>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d00f      	beq.n	8002220 <TIM_Base_SetConfig+0x110>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a1a      	ldr	r2, [pc, #104]	@ (800226c <TIM_Base_SetConfig+0x15c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d00b      	beq.n	8002220 <TIM_Base_SetConfig+0x110>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a19      	ldr	r2, [pc, #100]	@ (8002270 <TIM_Base_SetConfig+0x160>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d007      	beq.n	8002220 <TIM_Base_SetConfig+0x110>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a18      	ldr	r2, [pc, #96]	@ (8002274 <TIM_Base_SetConfig+0x164>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d003      	beq.n	8002220 <TIM_Base_SetConfig+0x110>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a13      	ldr	r2, [pc, #76]	@ (8002268 <TIM_Base_SetConfig+0x158>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d103      	bne.n	8002228 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b01      	cmp	r3, #1
 8002238:	d105      	bne.n	8002246 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f023 0201 	bic.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	611a      	str	r2, [r3, #16]
  }
}
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40012c00 	.word	0x40012c00
 8002258:	40000400 	.word	0x40000400
 800225c:	40000800 	.word	0x40000800
 8002260:	40000c00 	.word	0x40000c00
 8002264:	40013400 	.word	0x40013400
 8002268:	40015000 	.word	0x40015000
 800226c:	40014000 	.word	0x40014000
 8002270:	40014400 	.word	0x40014400
 8002274:	40014800 	.word	0x40014800

08002278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	f023 0201 	bic.w	r2, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f023 0303 	bic.w	r3, r3, #3
 80022b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f023 0302 	bic.w	r3, r3, #2
 80022c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a30      	ldr	r2, [pc, #192]	@ (8002394 <TIM_OC1_SetConfig+0x11c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d013      	beq.n	8002300 <TIM_OC1_SetConfig+0x88>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a2f      	ldr	r2, [pc, #188]	@ (8002398 <TIM_OC1_SetConfig+0x120>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d00f      	beq.n	8002300 <TIM_OC1_SetConfig+0x88>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a2e      	ldr	r2, [pc, #184]	@ (800239c <TIM_OC1_SetConfig+0x124>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d00b      	beq.n	8002300 <TIM_OC1_SetConfig+0x88>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a2d      	ldr	r2, [pc, #180]	@ (80023a0 <TIM_OC1_SetConfig+0x128>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d007      	beq.n	8002300 <TIM_OC1_SetConfig+0x88>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a2c      	ldr	r2, [pc, #176]	@ (80023a4 <TIM_OC1_SetConfig+0x12c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d003      	beq.n	8002300 <TIM_OC1_SetConfig+0x88>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a2b      	ldr	r2, [pc, #172]	@ (80023a8 <TIM_OC1_SetConfig+0x130>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d10c      	bne.n	800231a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f023 0308 	bic.w	r3, r3, #8
 8002306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f023 0304 	bic.w	r3, r3, #4
 8002318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a1d      	ldr	r2, [pc, #116]	@ (8002394 <TIM_OC1_SetConfig+0x11c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <TIM_OC1_SetConfig+0xd2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a1c      	ldr	r2, [pc, #112]	@ (8002398 <TIM_OC1_SetConfig+0x120>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00f      	beq.n	800234a <TIM_OC1_SetConfig+0xd2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a1b      	ldr	r2, [pc, #108]	@ (800239c <TIM_OC1_SetConfig+0x124>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d00b      	beq.n	800234a <TIM_OC1_SetConfig+0xd2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a1a      	ldr	r2, [pc, #104]	@ (80023a0 <TIM_OC1_SetConfig+0x128>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d007      	beq.n	800234a <TIM_OC1_SetConfig+0xd2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a19      	ldr	r2, [pc, #100]	@ (80023a4 <TIM_OC1_SetConfig+0x12c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d003      	beq.n	800234a <TIM_OC1_SetConfig+0xd2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a18      	ldr	r2, [pc, #96]	@ (80023a8 <TIM_OC1_SetConfig+0x130>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d111      	bne.n	800236e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	621a      	str	r2, [r3, #32]
}
 8002388:	bf00      	nop
 800238a:	371c      	adds	r7, #28
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40013400 	.word	0x40013400
 800239c:	40014000 	.word	0x40014000
 80023a0:	40014400 	.word	0x40014400
 80023a4:	40014800 	.word	0x40014800
 80023a8:	40015000 	.word	0x40015000

080023ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f023 0210 	bic.w	r2, r3, #16
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f023 0320 	bic.w	r3, r3, #32
 80023fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	4313      	orrs	r3, r2
 8002406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a2c      	ldr	r2, [pc, #176]	@ (80024bc <TIM_OC2_SetConfig+0x110>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d007      	beq.n	8002420 <TIM_OC2_SetConfig+0x74>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a2b      	ldr	r2, [pc, #172]	@ (80024c0 <TIM_OC2_SetConfig+0x114>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d003      	beq.n	8002420 <TIM_OC2_SetConfig+0x74>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a2a      	ldr	r2, [pc, #168]	@ (80024c4 <TIM_OC2_SetConfig+0x118>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d10d      	bne.n	800243c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800243a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a1f      	ldr	r2, [pc, #124]	@ (80024bc <TIM_OC2_SetConfig+0x110>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d013      	beq.n	800246c <TIM_OC2_SetConfig+0xc0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a1e      	ldr	r2, [pc, #120]	@ (80024c0 <TIM_OC2_SetConfig+0x114>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00f      	beq.n	800246c <TIM_OC2_SetConfig+0xc0>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a1e      	ldr	r2, [pc, #120]	@ (80024c8 <TIM_OC2_SetConfig+0x11c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d00b      	beq.n	800246c <TIM_OC2_SetConfig+0xc0>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a1d      	ldr	r2, [pc, #116]	@ (80024cc <TIM_OC2_SetConfig+0x120>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d007      	beq.n	800246c <TIM_OC2_SetConfig+0xc0>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a1c      	ldr	r2, [pc, #112]	@ (80024d0 <TIM_OC2_SetConfig+0x124>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d003      	beq.n	800246c <TIM_OC2_SetConfig+0xc0>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a17      	ldr	r2, [pc, #92]	@ (80024c4 <TIM_OC2_SetConfig+0x118>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d113      	bne.n	8002494 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002472:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800247a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	621a      	str	r2, [r3, #32]
}
 80024ae:	bf00      	nop
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40012c00 	.word	0x40012c00
 80024c0:	40013400 	.word	0x40013400
 80024c4:	40015000 	.word	0x40015000
 80024c8:	40014000 	.word	0x40014000
 80024cc:	40014400 	.word	0x40014400
 80024d0:	40014800 	.word	0x40014800

080024d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0303 	bic.w	r3, r3, #3
 800250e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	4313      	orrs	r3, r2
 800252c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a2b      	ldr	r2, [pc, #172]	@ (80025e0 <TIM_OC3_SetConfig+0x10c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <TIM_OC3_SetConfig+0x72>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a2a      	ldr	r2, [pc, #168]	@ (80025e4 <TIM_OC3_SetConfig+0x110>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d003      	beq.n	8002546 <TIM_OC3_SetConfig+0x72>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a29      	ldr	r2, [pc, #164]	@ (80025e8 <TIM_OC3_SetConfig+0x114>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d10d      	bne.n	8002562 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800254c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	021b      	lsls	r3, r3, #8
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	4313      	orrs	r3, r2
 8002558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a1e      	ldr	r2, [pc, #120]	@ (80025e0 <TIM_OC3_SetConfig+0x10c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <TIM_OC3_SetConfig+0xbe>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a1d      	ldr	r2, [pc, #116]	@ (80025e4 <TIM_OC3_SetConfig+0x110>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00f      	beq.n	8002592 <TIM_OC3_SetConfig+0xbe>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a1d      	ldr	r2, [pc, #116]	@ (80025ec <TIM_OC3_SetConfig+0x118>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00b      	beq.n	8002592 <TIM_OC3_SetConfig+0xbe>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a1c      	ldr	r2, [pc, #112]	@ (80025f0 <TIM_OC3_SetConfig+0x11c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d007      	beq.n	8002592 <TIM_OC3_SetConfig+0xbe>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a1b      	ldr	r2, [pc, #108]	@ (80025f4 <TIM_OC3_SetConfig+0x120>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d003      	beq.n	8002592 <TIM_OC3_SetConfig+0xbe>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a16      	ldr	r2, [pc, #88]	@ (80025e8 <TIM_OC3_SetConfig+0x114>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d113      	bne.n	80025ba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	621a      	str	r2, [r3, #32]
}
 80025d4:	bf00      	nop
 80025d6:	371c      	adds	r7, #28
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	40012c00 	.word	0x40012c00
 80025e4:	40013400 	.word	0x40013400
 80025e8:	40015000 	.word	0x40015000
 80025ec:	40014000 	.word	0x40014000
 80025f0:	40014400 	.word	0x40014400
 80025f4:	40014800 	.word	0x40014800

080025f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800262a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4313      	orrs	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a2c      	ldr	r2, [pc, #176]	@ (8002708 <TIM_OC4_SetConfig+0x110>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d007      	beq.n	800266c <TIM_OC4_SetConfig+0x74>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a2b      	ldr	r2, [pc, #172]	@ (800270c <TIM_OC4_SetConfig+0x114>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d003      	beq.n	800266c <TIM_OC4_SetConfig+0x74>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a2a      	ldr	r2, [pc, #168]	@ (8002710 <TIM_OC4_SetConfig+0x118>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d10d      	bne.n	8002688 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	031b      	lsls	r3, r3, #12
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002686:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a1f      	ldr	r2, [pc, #124]	@ (8002708 <TIM_OC4_SetConfig+0x110>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d013      	beq.n	80026b8 <TIM_OC4_SetConfig+0xc0>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a1e      	ldr	r2, [pc, #120]	@ (800270c <TIM_OC4_SetConfig+0x114>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00f      	beq.n	80026b8 <TIM_OC4_SetConfig+0xc0>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a1e      	ldr	r2, [pc, #120]	@ (8002714 <TIM_OC4_SetConfig+0x11c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d00b      	beq.n	80026b8 <TIM_OC4_SetConfig+0xc0>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002718 <TIM_OC4_SetConfig+0x120>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d007      	beq.n	80026b8 <TIM_OC4_SetConfig+0xc0>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a1c      	ldr	r2, [pc, #112]	@ (800271c <TIM_OC4_SetConfig+0x124>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d003      	beq.n	80026b8 <TIM_OC4_SetConfig+0xc0>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a17      	ldr	r2, [pc, #92]	@ (8002710 <TIM_OC4_SetConfig+0x118>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d113      	bne.n	80026e0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80026c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	019b      	lsls	r3, r3, #6
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	019b      	lsls	r3, r3, #6
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	621a      	str	r2, [r3, #32]
}
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40012c00 	.word	0x40012c00
 800270c:	40013400 	.word	0x40013400
 8002710:	40015000 	.word	0x40015000
 8002714:	40014000 	.word	0x40014000
 8002718:	40014400 	.word	0x40014400
 800271c:	40014800 	.word	0x40014800

08002720 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800274e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002764:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	041b      	lsls	r3, r3, #16
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a19      	ldr	r2, [pc, #100]	@ (80027dc <TIM_OC5_SetConfig+0xbc>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d013      	beq.n	80027a2 <TIM_OC5_SetConfig+0x82>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a18      	ldr	r2, [pc, #96]	@ (80027e0 <TIM_OC5_SetConfig+0xc0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00f      	beq.n	80027a2 <TIM_OC5_SetConfig+0x82>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a17      	ldr	r2, [pc, #92]	@ (80027e4 <TIM_OC5_SetConfig+0xc4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00b      	beq.n	80027a2 <TIM_OC5_SetConfig+0x82>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a16      	ldr	r2, [pc, #88]	@ (80027e8 <TIM_OC5_SetConfig+0xc8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d007      	beq.n	80027a2 <TIM_OC5_SetConfig+0x82>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a15      	ldr	r2, [pc, #84]	@ (80027ec <TIM_OC5_SetConfig+0xcc>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d003      	beq.n	80027a2 <TIM_OC5_SetConfig+0x82>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a14      	ldr	r2, [pc, #80]	@ (80027f0 <TIM_OC5_SetConfig+0xd0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d109      	bne.n	80027b6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	621a      	str	r2, [r3, #32]
}
 80027d0:	bf00      	nop
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40012c00 	.word	0x40012c00
 80027e0:	40013400 	.word	0x40013400
 80027e4:	40014000 	.word	0x40014000
 80027e8:	40014400 	.word	0x40014400
 80027ec:	40014800 	.word	0x40014800
 80027f0:	40015000 	.word	0x40015000

080027f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800283a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	051b      	lsls	r3, r3, #20
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a1a      	ldr	r2, [pc, #104]	@ (80028b4 <TIM_OC6_SetConfig+0xc0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d013      	beq.n	8002878 <TIM_OC6_SetConfig+0x84>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a19      	ldr	r2, [pc, #100]	@ (80028b8 <TIM_OC6_SetConfig+0xc4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d00f      	beq.n	8002878 <TIM_OC6_SetConfig+0x84>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a18      	ldr	r2, [pc, #96]	@ (80028bc <TIM_OC6_SetConfig+0xc8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d00b      	beq.n	8002878 <TIM_OC6_SetConfig+0x84>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a17      	ldr	r2, [pc, #92]	@ (80028c0 <TIM_OC6_SetConfig+0xcc>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d007      	beq.n	8002878 <TIM_OC6_SetConfig+0x84>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a16      	ldr	r2, [pc, #88]	@ (80028c4 <TIM_OC6_SetConfig+0xd0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d003      	beq.n	8002878 <TIM_OC6_SetConfig+0x84>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a15      	ldr	r2, [pc, #84]	@ (80028c8 <TIM_OC6_SetConfig+0xd4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d109      	bne.n	800288c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800287e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	029b      	lsls	r3, r3, #10
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	621a      	str	r2, [r3, #32]
}
 80028a6:	bf00      	nop
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40013400 	.word	0x40013400
 80028bc:	40014000 	.word	0x40014000
 80028c0:	40014400 	.word	0x40014400
 80028c4:	40014800 	.word	0x40014800
 80028c8:	40015000 	.word	0x40015000

080028cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	f023 0201 	bic.w	r2, r3, #1
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f023 030a 	bic.w	r3, r3, #10
 8002908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	621a      	str	r2, [r3, #32]
}
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800292a:	b480      	push	{r7}
 800292c:	b087      	sub	sp, #28
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	f023 0210 	bic.w	r2, r3, #16
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	031b      	lsls	r3, r3, #12
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002966:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	621a      	str	r2, [r3, #32]
}
 800297e:	bf00      	nop
 8002980:	371c      	adds	r7, #28
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800298a:	b480      	push	{r7}
 800298c:	b085      	sub	sp, #20
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80029a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f043 0307 	orr.w	r3, r3, #7
 80029b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	609a      	str	r2, [r3, #8]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	021a      	lsls	r2, r3, #8
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	609a      	str	r2, [r3, #8]
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	2201      	movs	r2, #1
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a1a      	ldr	r2, [r3, #32]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	401a      	ands	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a1a      	ldr	r2, [r3, #32]
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	621a      	str	r2, [r3, #32]
}
 8002a42:	bf00      	nop
 8002a44:	371c      	adds	r7, #28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e074      	b.n	8002b52 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a34      	ldr	r2, [pc, #208]	@ (8002b60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d009      	beq.n	8002aa6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a33      	ldr	r2, [pc, #204]	@ (8002b64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d004      	beq.n	8002aa6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a31      	ldr	r2, [pc, #196]	@ (8002b68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d108      	bne.n	8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002aac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002abe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a21      	ldr	r2, [pc, #132]	@ (8002b60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d022      	beq.n	8002b26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ae8:	d01d      	beq.n	8002b26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1f      	ldr	r2, [pc, #124]	@ (8002b6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d018      	beq.n	8002b26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b70 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d013      	beq.n	8002b26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a1c      	ldr	r2, [pc, #112]	@ (8002b74 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00e      	beq.n	8002b26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a15      	ldr	r2, [pc, #84]	@ (8002b64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d009      	beq.n	8002b26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a18      	ldr	r2, [pc, #96]	@ (8002b78 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d004      	beq.n	8002b26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a11      	ldr	r2, [pc, #68]	@ (8002b68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d10c      	bne.n	8002b40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	40012c00 	.word	0x40012c00
 8002b64:	40013400 	.word	0x40013400
 8002b68:	40015000 	.word	0x40015000
 8002b6c:	40000400 	.word	0x40000400
 8002b70:	40000800 	.word	0x40000800
 8002b74:	40000c00 	.word	0x40000c00
 8002b78:	40014000 	.word	0x40014000

08002b7c <memset>:
 8002b7c:	4402      	add	r2, r0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d100      	bne.n	8002b86 <memset+0xa>
 8002b84:	4770      	bx	lr
 8002b86:	f803 1b01 	strb.w	r1, [r3], #1
 8002b8a:	e7f9      	b.n	8002b80 <memset+0x4>

08002b8c <__libc_init_array>:
 8002b8c:	b570      	push	{r4, r5, r6, lr}
 8002b8e:	4d0d      	ldr	r5, [pc, #52]	@ (8002bc4 <__libc_init_array+0x38>)
 8002b90:	4c0d      	ldr	r4, [pc, #52]	@ (8002bc8 <__libc_init_array+0x3c>)
 8002b92:	1b64      	subs	r4, r4, r5
 8002b94:	10a4      	asrs	r4, r4, #2
 8002b96:	2600      	movs	r6, #0
 8002b98:	42a6      	cmp	r6, r4
 8002b9a:	d109      	bne.n	8002bb0 <__libc_init_array+0x24>
 8002b9c:	4d0b      	ldr	r5, [pc, #44]	@ (8002bcc <__libc_init_array+0x40>)
 8002b9e:	4c0c      	ldr	r4, [pc, #48]	@ (8002bd0 <__libc_init_array+0x44>)
 8002ba0:	f000 f818 	bl	8002bd4 <_init>
 8002ba4:	1b64      	subs	r4, r4, r5
 8002ba6:	10a4      	asrs	r4, r4, #2
 8002ba8:	2600      	movs	r6, #0
 8002baa:	42a6      	cmp	r6, r4
 8002bac:	d105      	bne.n	8002bba <__libc_init_array+0x2e>
 8002bae:	bd70      	pop	{r4, r5, r6, pc}
 8002bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb4:	4798      	blx	r3
 8002bb6:	3601      	adds	r6, #1
 8002bb8:	e7ee      	b.n	8002b98 <__libc_init_array+0xc>
 8002bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bbe:	4798      	blx	r3
 8002bc0:	3601      	adds	r6, #1
 8002bc2:	e7f2      	b.n	8002baa <__libc_init_array+0x1e>
 8002bc4:	08002bfc 	.word	0x08002bfc
 8002bc8:	08002bfc 	.word	0x08002bfc
 8002bcc:	08002bfc 	.word	0x08002bfc
 8002bd0:	08002c00 	.word	0x08002c00

08002bd4 <_init>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	bf00      	nop
 8002bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bda:	bc08      	pop	{r3}
 8002bdc:	469e      	mov	lr, r3
 8002bde:	4770      	bx	lr

08002be0 <_fini>:
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	bf00      	nop
 8002be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be6:	bc08      	pop	{r3}
 8002be8:	469e      	mov	lr, r3
 8002bea:	4770      	bx	lr
