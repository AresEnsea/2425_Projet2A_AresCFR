
PCB_moteur2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064a4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800667c  0800667c  0000767c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066bc  080066bc  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  080066bc  080066bc  000076bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066c4  080066c4  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066c4  080066c4  000076c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066c8  080066c8  000076c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080066cc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  2000000c  080066d8  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  080066d8  00008350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5b6  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032bc  00000000  00000000  000225f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  000258b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000124c  00000000  00000000  00027018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dbb  00000000  00000000  00028264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d8fe  00000000  00000000  0005101f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111bd5  00000000  00000000  0006e91d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001804f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064dc  00000000  00000000  00180538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00186a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006664 	.word	0x08006664

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006664 	.word	0x08006664

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800050e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2220      	movs	r2, #32
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f006 f873 	bl	800660c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000526:	4b32      	ldr	r3, [pc, #200]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000528:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800052c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800052e:	4b30      	ldr	r3, [pc, #192]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000530:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000536:	4b2e      	ldr	r3, [pc, #184]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053c:	4b2c      	ldr	r3, [pc, #176]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000542:	4b2b      	ldr	r3, [pc, #172]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000548:	4b29      	ldr	r3, [pc, #164]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054e:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000550:	2204      	movs	r2, #4
 8000552:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000554:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000556:	2200      	movs	r2, #0
 8000558:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800055a:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800055c:	2200      	movs	r2, #0
 800055e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000560:	4b23      	ldr	r3, [pc, #140]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000562:	2201      	movs	r2, #1
 8000564:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800056e:	4b20      	ldr	r3, [pc, #128]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000574:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800057a:	4b1d      	ldr	r3, [pc, #116]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000582:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000588:	4b19      	ldr	r3, [pc, #100]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	4817      	ldr	r0, [pc, #92]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000592:	f001 fa4b 	bl	8001a2c <HAL_ADC_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800059c:	f000 fb0f 	bl	8000bbe <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005a8:	4619      	mov	r1, r3
 80005aa:	4811      	ldr	r0, [pc, #68]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005ac:	f002 f860 	bl	8002670 <HAL_ADCEx_MultiModeConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005b6:	f000 fb02 	bl	8000bbe <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <MX_ADC1_Init+0xec>)
 80005bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005be:	2306      	movs	r3, #6
 80005c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c6:	237f      	movs	r3, #127	@ 0x7f
 80005c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ca:	2304      	movs	r3, #4
 80005cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4619      	mov	r1, r3
 80005d6:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005d8:	f001 fbe4 	bl	8001da4 <HAL_ADC_ConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80005e2:	f000 faec 	bl	8000bbe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	3730      	adds	r7, #48	@ 0x30
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028
 80005f4:	14f00020 	.word	0x14f00020

080005f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b0a0      	sub	sp, #128	@ 0x80
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000610:	f107 0318 	add.w	r3, r7, #24
 8000614:	2254      	movs	r2, #84	@ 0x54
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f005 fff7 	bl	800660c <memset>
  if(adcHandle->Instance==ADC1)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000626:	d14d      	bne.n	80006c4 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000628:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800062c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800062e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000632:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0318 	add.w	r3, r7, #24
 8000638:	4618      	mov	r0, r3
 800063a:	f003 fac9 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000644:	f000 fabb 	bl	8000bbe <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000648:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a1f      	ldr	r2, [pc, #124]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a19      	ldr	r2, [pc, #100]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000678:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 800067a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067c:	4a13      	ldr	r2, [pc, #76]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000684:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <HAL_ADC_MspInit+0xd4>)
 8000686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000688:	f003 0302 	and.w	r3, r3, #2
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000690:	2302      	movs	r3, #2
 8000692:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000694:	2303      	movs	r3, #3
 8000696:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80006a0:	4619      	mov	r1, r3
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f002 f9cf 	bl	8002a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_V_Pin|BUS_Imes_Pin;
 80006aa:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 80006ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b0:	2303      	movs	r3, #3
 80006b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80006bc:	4619      	mov	r1, r3
 80006be:	4804      	ldr	r0, [pc, #16]	@ (80006d0 <HAL_ADC_MspInit+0xd8>)
 80006c0:	f002 f9c2 	bl	8002a48 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006c4:	bf00      	nop
 80006c6:	3780      	adds	r7, #128	@ 0x80
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000400 	.word	0x48000400

080006d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	@ 0x28
 80006d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	4b50      	ldr	r3, [pc, #320]	@ (800082c <MX_GPIO_Init+0x158>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	4a4f      	ldr	r2, [pc, #316]	@ (800082c <MX_GPIO_Init+0x158>)
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f6:	4b4d      	ldr	r3, [pc, #308]	@ (800082c <MX_GPIO_Init+0x158>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	f003 0304 	and.w	r3, r3, #4
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000702:	4b4a      	ldr	r3, [pc, #296]	@ (800082c <MX_GPIO_Init+0x158>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	4a49      	ldr	r2, [pc, #292]	@ (800082c <MX_GPIO_Init+0x158>)
 8000708:	f043 0320 	orr.w	r3, r3, #32
 800070c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070e:	4b47      	ldr	r3, [pc, #284]	@ (800082c <MX_GPIO_Init+0x158>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	f003 0320 	and.w	r3, r3, #32
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b44      	ldr	r3, [pc, #272]	@ (800082c <MX_GPIO_Init+0x158>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	4a43      	ldr	r2, [pc, #268]	@ (800082c <MX_GPIO_Init+0x158>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000726:	4b41      	ldr	r3, [pc, #260]	@ (800082c <MX_GPIO_Init+0x158>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	4b3e      	ldr	r3, [pc, #248]	@ (800082c <MX_GPIO_Init+0x158>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	4a3d      	ldr	r2, [pc, #244]	@ (800082c <MX_GPIO_Init+0x158>)
 8000738:	f043 0302 	orr.w	r3, r3, #2
 800073c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800073e:	4b3b      	ldr	r3, [pc, #236]	@ (800082c <MX_GPIO_Init+0x158>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000742:	f003 0302 	and.w	r3, r3, #2
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074a:	4b38      	ldr	r3, [pc, #224]	@ (800082c <MX_GPIO_Init+0x158>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074e:	4a37      	ldr	r2, [pc, #220]	@ (800082c <MX_GPIO_Init+0x158>)
 8000750:	f043 0308 	orr.w	r3, r3, #8
 8000754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000756:	4b35      	ldr	r3, [pc, #212]	@ (800082c <MX_GPIO_Init+0x158>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800075a:	f003 0308 	and.w	r3, r3, #8
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_EN_Pin|USR_LED_3_Pin|USR_LED_2_Pin|USR_LED_1_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 5170 	mov.w	r1, #15360	@ 0x3c00
 8000768:	4831      	ldr	r0, [pc, #196]	@ (8000830 <MX_GPIO_Init+0x15c>)
 800076a:	f002 faef 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000774:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000778:	f002 fae8 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = MOTOR_EN_Pin|USR_LED_3_Pin|USR_LED_2_Pin|USR_LED_1_Pin;
 800077c:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000780:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	4826      	ldr	r0, [pc, #152]	@ (8000830 <MX_GPIO_Init+0x15c>)
 8000796:	f002 f957 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_Z_Pin;
 800079a:	2304      	movs	r3, #4
 800079c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_Z_GPIO_Port, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4820      	ldr	r0, [pc, #128]	@ (8000830 <MX_GPIO_Init+0x15c>)
 80007ae:	f002 f94b 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_2_Pin;
 80007b2:	2310      	movs	r3, #16
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_2_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ca:	f002 f93d 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_4_Pin;
 80007ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_4_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ea:	f002 f92d 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_1_Pin;
 80007ee:	2304      	movs	r3, #4
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	480c      	ldr	r0, [pc, #48]	@ (8000834 <MX_GPIO_Init+0x160>)
 8000804:	f002 f920 	bl	8002a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_3_Pin;
 8000808:	2340      	movs	r3, #64	@ 0x40
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_3_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	4806      	ldr	r0, [pc, #24]	@ (8000838 <MX_GPIO_Init+0x164>)
 800081e:	f002 f913 	bl	8002a48 <HAL_GPIO_Init>

}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	@ 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40021000 	.word	0x40021000
 8000830:	48000800 	.word	0x48000800
 8000834:	48000c00 	.word	0x48000c00
 8000838:	48000400 	.word	0x48000400

0800083c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000842:	4a1c      	ldr	r2, [pc, #112]	@ (80008b4 <MX_I2C2_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30D29DE4;
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000848:	4a1b      	ldr	r2, [pc, #108]	@ (80008b8 <MX_I2C2_Init+0x7c>)
 800084a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800084c:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000852:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000854:	2201      	movs	r2, #1
 8000856:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000876:	480e      	ldr	r0, [pc, #56]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000878:	f002 fa9a 	bl	8002db0 <HAL_I2C_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000882:	f000 f99c 	bl	8000bbe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000886:	2100      	movs	r1, #0
 8000888:	4809      	ldr	r0, [pc, #36]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800088a:	f002 fb2c 	bl	8002ee6 <HAL_I2CEx_ConfigAnalogFilter>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000894:	f000 f993 	bl	8000bbe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000898:	2100      	movs	r1, #0
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800089c:	f002 fb6e 	bl	8002f7c <HAL_I2CEx_ConfigDigitalFilter>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008a6:	f000 f98a 	bl	8000bbe <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000094 	.word	0x20000094
 80008b4:	40005800 	.word	0x40005800
 80008b8:	30d29de4 	.word	0x30d29de4

080008bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b09e      	sub	sp, #120	@ 0x78
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	2254      	movs	r2, #84	@ 0x54
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f005 fe95 	bl	800660c <memset>
  if(i2cHandle->Instance==I2C2)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000964 <HAL_I2C_MspInit+0xa8>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d137      	bne.n	800095c <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008ec:	2380      	movs	r3, #128	@ 0x80
 80008ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4618      	mov	r0, r3
 80008fa:	f003 f969 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000904:	f000 f95b 	bl	8000bbe <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000908:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090c:	4a16      	ldr	r2, [pc, #88]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 800090e:	f043 0301 	orr.w	r3, r3, #1
 8000912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000914:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 8000916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000918:	f003 0301 	and.w	r3, r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000920:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000924:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000926:	2312      	movs	r3, #18
 8000928:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000932:	2304      	movs	r3, #4
 8000934:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800093a:	4619      	mov	r1, r3
 800093c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000940:	f002 f882 	bl	8002a48 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 8000946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000948:	4a07      	ldr	r2, [pc, #28]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 800094a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800094e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000950:	4b05      	ldr	r3, [pc, #20]	@ (8000968 <HAL_I2C_MspInit+0xac>)
 8000952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800095c:	bf00      	nop
 800095e:	3778      	adds	r7, #120	@ 0x78
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40005800 	.word	0x40005800
 8000968:	40021000 	.word	0x40021000

0800096c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000970:	f000 fdf3 	bl	800155a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000974:	f000 f8da 	bl	8000b2c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000978:	f7ff feac 	bl	80006d4 <MX_GPIO_Init>
	MX_TIM2_Init();
 800097c:	f000 f9e6 	bl	8000d4c <MX_TIM2_Init>
	MX_TIM3_Init();
 8000980:	f000 fa6c 	bl	8000e5c <MX_TIM3_Init>
	MX_ADC1_Init();
 8000984:	f7ff fdc0 	bl	8000508 <MX_ADC1_Init>
	MX_I2C2_Init();
 8000988:	f7ff ff58 	bl	800083c <MX_I2C2_Init>
	MX_TIM1_Init();
 800098c:	f000 f984 	bl	8000c98 <MX_TIM1_Init>
	MX_TIM16_Init();
 8000990:	f000 fb04 	bl	8000f9c <MX_TIM16_Init>
	MX_USART1_UART_Init();
 8000994:	f000 fc86 	bl	80012a4 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8000998:	f000 fcd0 	bl	800133c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //PA2 TIM2 CH3 symétrique PC7
	//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //PC6 TIM3 CH1
	//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
	//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // D1 led
 800099c:	2108      	movs	r1, #8
 800099e:	485a      	ldr	r0, [pc, #360]	@ (8000b08 <main+0x19c>)
 80009a0:	f003 fc7e 	bl	80042a0 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // D5 led
 80009a4:	2100      	movs	r1, #0
 80009a6:	4859      	ldr	r0, [pc, #356]	@ (8000b0c <main+0x1a0>)
 80009a8:	f003 fc7a 	bl	80042a0 <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // enable motor
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b2:	4857      	ldr	r0, [pc, #348]	@ (8000b10 <main+0x1a4>)
 80009b4:	f002 f9ca 	bl	8002d4c <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{// freq 20 K, presc à 0, pres à 7, pi avec simulink, aller voir Mr Martin
		V=15.0f;
 80009b8:	4b56      	ldr	r3, [pc, #344]	@ (8000b14 <main+0x1a8>)
 80009ba:	4a57      	ldr	r2, [pc, #348]	@ (8000b18 <main+0x1ac>)
 80009bc:	601a      	str	r2, [r3, #0]
		alpha = (V / 24.0f + 1.0f) * 0.5f;//  paramètre V a donné
 80009be:	4b55      	ldr	r3, [pc, #340]	@ (8000b14 <main+0x1a8>)
 80009c0:	ed93 7a00 	vldr	s14, [r3]
 80009c4:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80009c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80009d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80009d4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80009d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009dc:	4b4f      	ldr	r3, [pc, #316]	@ (8000b1c <main+0x1b0>)
 80009de:	edc3 7a00 	vstr	s15, [r3]
		dutyCycle = (int)(alpha * 1000.0f);
 80009e2:	4b4e      	ldr	r3, [pc, #312]	@ (8000b1c <main+0x1b0>)
 80009e4:	edd3 7a00 	vldr	s15, [r3]
 80009e8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8000b20 <main+0x1b4>
 80009ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009f4:	ee17 2a90 	vmov	r2, s15
 80009f8:	4b4a      	ldr	r3, [pc, #296]	@ (8000b24 <main+0x1b8>)
 80009fa:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_TogglePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin);
		//HAL_GPIO_TogglePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin);
		//HAL_GPIO_TogglePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin);
		//HAL_GPIO_TogglePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin);

		TIM2 -> CCR3 =999; // plus c'est proche de 1000, plus le moteur tourne vite
 80009fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a00:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a04:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3 -> CCR1 =1;
 8000a06:	4b48      	ldr	r3, [pc, #288]	@ (8000b28 <main+0x1bc>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_TogglePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin);
 8000a0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a10:	483f      	ldr	r0, [pc, #252]	@ (8000b10 <main+0x1a4>)
 8000a12:	f002 f9b3 	bl	8002d7c <HAL_GPIO_TogglePin>

		HAL_Delay(2000);
 8000a16:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a1a:	f000 fe0f 	bl	800163c <HAL_Delay>

		TIM2 -> CCR3 =750; // plus c'est proche de 1000, plus le moteur tourne vite
 8000a1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a22:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000a26:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3 -> CCR1 =250;
 8000a28:	4b3f      	ldr	r3, [pc, #252]	@ (8000b28 <main+0x1bc>)
 8000a2a:	22fa      	movs	r2, #250	@ 0xfa
 8000a2c:	635a      	str	r2, [r3, #52]	@ 0x34

		HAL_Delay(2000);
 8000a2e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a32:	f000 fe03 	bl	800163c <HAL_Delay>

		TIM2 -> CCR3 =500; // plus c'est proche de 1000, plus le moteur tourne vite
 8000a36:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a3a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a3e:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3 -> CCR1 =500;
 8000a40:	4b39      	ldr	r3, [pc, #228]	@ (8000b28 <main+0x1bc>)
 8000a42:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a46:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_TogglePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin);
 8000a48:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a4c:	4830      	ldr	r0, [pc, #192]	@ (8000b10 <main+0x1a4>)
 8000a4e:	f002 f995 	bl	8002d7c <HAL_GPIO_TogglePin>

		HAL_Delay(2000);
 8000a52:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a56:	f000 fdf1 	bl	800163c <HAL_Delay>

		TIM2 -> CCR3 =250; // plus c'est proche de 1000, plus le moteur tourne vite
 8000a5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a5e:	22fa      	movs	r2, #250	@ 0xfa
 8000a60:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3 -> CCR1 =750;
 8000a62:	4b31      	ldr	r3, [pc, #196]	@ (8000b28 <main+0x1bc>)
 8000a64:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000a68:	635a      	str	r2, [r3, #52]	@ 0x34

		HAL_Delay(2000);
 8000a6a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a6e:	f000 fde5 	bl	800163c <HAL_Delay>

		TIM2 -> CCR3 =1; // plus c'est proche de 1000, plus le moteur tourne vite
 8000a72:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a76:	2201      	movs	r2, #1
 8000a78:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3 -> CCR1 =999;
 8000a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000b28 <main+0x1bc>)
 8000a7c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a80:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_TogglePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin);
 8000a82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a86:	4822      	ldr	r0, [pc, #136]	@ (8000b10 <main+0x1a4>)
 8000a88:	f002 f978 	bl	8002d7c <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // enable motor
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a92:	481f      	ldr	r0, [pc, #124]	@ (8000b10 <main+0x1a4>)
 8000a94:	f002 f95a 	bl	8002d4c <HAL_GPIO_WritePin>

		HAL_Delay(2000);
 8000a98:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a9c:	f000 fdce 	bl	800163c <HAL_Delay>

		TIM2 -> CCR3 =250; // plus c'est proche de 1000, plus le moteur tourne vite
 8000aa0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000aa4:	22fa      	movs	r2, #250	@ 0xfa
 8000aa6:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3 -> CCR1 =750;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <main+0x1bc>)
 8000aaa:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000aae:	635a      	str	r2, [r3, #52]	@ 0x34

		HAL_Delay(2000);
 8000ab0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ab4:	f000 fdc2 	bl	800163c <HAL_Delay>

		TIM2 -> CCR3 =500; // plus c'est proche de 1000, plus le moteur tourne vite
 8000ab8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000abc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ac0:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3 -> CCR1 =500;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <main+0x1bc>)
 8000ac4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ac8:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_TogglePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin);
 8000aca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ace:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad2:	f002 f953 	bl	8002d7c <HAL_GPIO_TogglePin>

		HAL_Delay(2000);
 8000ad6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ada:	f000 fdaf 	bl	800163c <HAL_Delay>

		TIM2 -> CCR3 =750; // plus c'est proche de 1000, plus le moteur tourne vite
 8000ade:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000ae2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000ae6:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM3 -> CCR1 =250;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <main+0x1bc>)
 8000aea:	22fa      	movs	r2, #250	@ 0xfa
 8000aec:	635a      	str	r2, [r3, #52]	@ 0x34

		HAL_Delay(2000);
 8000aee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000af2:	f000 fda3 	bl	800163c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1); // enable motor
 8000af6:	2201      	movs	r2, #1
 8000af8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000afc:	4804      	ldr	r0, [pc, #16]	@ (8000b10 <main+0x1a4>)
 8000afe:	f002 f925 	bl	8002d4c <HAL_GPIO_WritePin>
		V=15.0f;
 8000b02:	bf00      	nop
 8000b04:	e758      	b.n	80009b8 <main+0x4c>
 8000b06:	bf00      	nop
 8000b08:	20000140 	.word	0x20000140
 8000b0c:	2000018c 	.word	0x2000018c
 8000b10:	48000800 	.word	0x48000800
 8000b14:	200000ec 	.word	0x200000ec
 8000b18:	41700000 	.word	0x41700000
 8000b1c:	200000e8 	.word	0x200000e8
 8000b20:	447a0000 	.word	0x447a0000
 8000b24:	200000f0 	.word	0x200000f0
 8000b28:	40000400 	.word	0x40000400

08000b2c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b094      	sub	sp, #80	@ 0x50
 8000b30:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b32:	f107 0318 	add.w	r3, r7, #24
 8000b36:	2238      	movs	r2, #56	@ 0x38
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f005 fd66 	bl	800660c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f002 fa60 	bl	8003014 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b54:	2301      	movs	r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b5c:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b62:	2303      	movs	r3, #3
 8000b64:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000b66:	2301      	movs	r3, #1
 8000b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 20;
 8000b6a:	2314      	movs	r3, #20
 8000b6c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b72:	2302      	movs	r3, #2
 8000b74:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b76:	2302      	movs	r3, #2
 8000b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7a:	f107 0318 	add.w	r3, r7, #24
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f002 fafc 	bl	800317c <HAL_RCC_OscConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x62>
	{
		Error_Handler();
 8000b8a:	f000 f818 	bl	8000bbe <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8e:	230f      	movs	r3, #15
 8000b90:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b92:	2303      	movs	r3, #3
 8000b94:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 fdfa 	bl	80037a0 <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x8a>
	{
		Error_Handler();
 8000bb2:	f000 f804 	bl	8000bbe <Error_Handler>
	}
}
 8000bb6:	bf00      	nop
 8000bb8:	3750      	adds	r7, #80	@ 0x50
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc2:	b672      	cpsid	i
}
 8000bc4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bc6:	bf00      	nop
 8000bc8:	e7fd      	b.n	8000bc6 <Error_Handler+0x8>
	...

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bd6:	4a0e      	ldr	r2, [pc, #56]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bde:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <HAL_MspInit+0x44>)
 8000be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_MspInit+0x44>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c02:	f002 faab 	bl	800315c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <NMI_Handler+0x4>

08000c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6a:	f000 fcc9 	bl	8001600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	@ 0x30
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	2224      	movs	r2, #36	@ 0x24
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f005 fcb0 	bl	800660c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cac:	463b      	mov	r3, r7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cb6:	4b23      	ldr	r3, [pc, #140]	@ (8000d44 <MX_TIM1_Init+0xac>)
 8000cb8:	4a23      	ldr	r2, [pc, #140]	@ (8000d48 <MX_TIM1_Init+0xb0>)
 8000cba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cbc:	4b21      	ldr	r3, [pc, #132]	@ (8000d44 <MX_TIM1_Init+0xac>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc2:	4b20      	ldr	r3, [pc, #128]	@ (8000d44 <MX_TIM1_Init+0xac>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <MX_TIM1_Init+0xac>)
 8000cca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <MX_TIM1_Init+0xac>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d44 <MX_TIM1_Init+0xac>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cdc:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <MX_TIM1_Init+0xac>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cea:	2301      	movs	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480d      	ldr	r0, [pc, #52]	@ (8000d44 <MX_TIM1_Init+0xac>)
 8000d0e:	f003 fbd9 	bl	80044c4 <HAL_TIM_Encoder_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000d18:	f7ff ff51 	bl	8000bbe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d28:	463b      	mov	r3, r7
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4805      	ldr	r0, [pc, #20]	@ (8000d44 <MX_TIM1_Init+0xac>)
 8000d2e:	f004 fcd5 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000d38:	f7ff ff41 	bl	8000bbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	3730      	adds	r7, #48	@ 0x30
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200000f4 	.word	0x200000f4
 8000d48:	40012c00 	.word	0x40012c00

08000d4c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08e      	sub	sp, #56	@ 0x38
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d6c:	463b      	mov	r3, r7
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]
 8000d7a:	615a      	str	r2, [r3, #20]
 8000d7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d7e:	4b36      	ldr	r3, [pc, #216]	@ (8000e58 <MX_TIM2_Init+0x10c>)
 8000d80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000d86:	4b34      	ldr	r3, [pc, #208]	@ (8000e58 <MX_TIM2_Init+0x10c>)
 8000d88:	2207      	movs	r2, #7
 8000d8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000d8c:	4b32      	ldr	r3, [pc, #200]	@ (8000e58 <MX_TIM2_Init+0x10c>)
 8000d8e:	2220      	movs	r2, #32
 8000d90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d92:	4b31      	ldr	r3, [pc, #196]	@ (8000e58 <MX_TIM2_Init+0x10c>)
 8000d94:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e58 <MX_TIM2_Init+0x10c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000da0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e58 <MX_TIM2_Init+0x10c>)
 8000da2:	2280      	movs	r2, #128	@ 0x80
 8000da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000da6:	482c      	ldr	r0, [pc, #176]	@ (8000e58 <MX_TIM2_Init+0x10c>)
 8000da8:	f003 f960 	bl	800406c <HAL_TIM_Base_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000db2:	f7ff ff04 	bl	8000bbe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4825      	ldr	r0, [pc, #148]	@ (8000e58 <MX_TIM2_Init+0x10c>)
 8000dc4:	f003 fdb2 	bl	800492c <HAL_TIM_ConfigClockSource>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000dce:	f7ff fef6 	bl	8000bbe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dd2:	4821      	ldr	r0, [pc, #132]	@ (8000e58 <MX_TIM2_Init+0x10c>)
 8000dd4:	f003 fa02 	bl	80041dc <HAL_TIM_PWM_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000dde:	f7ff feee 	bl	8000bbe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000de2:	2320      	movs	r3, #32
 8000de4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000de6:	2380      	movs	r3, #128	@ 0x80
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	4819      	ldr	r0, [pc, #100]	@ (8000e58 <MX_TIM2_Init+0x10c>)
 8000df2:	f004 fc73 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000dfc:	f7ff fedf 	bl	8000bbe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e00:	2360      	movs	r3, #96	@ 0x60
 8000e02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 600;
 8000e04:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000e08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e12:	463b      	mov	r3, r7
 8000e14:	2208      	movs	r2, #8
 8000e16:	4619      	mov	r1, r3
 8000e18:	480f      	ldr	r0, [pc, #60]	@ (8000e58 <MX_TIM2_Init+0x10c>)
 8000e1a:	f003 fc73 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000e24:	f7ff fecb 	bl	8000bbe <Error_Handler>
  }
  sConfigOC.Pulse = 400;
 8000e28:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000e2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e32:	463b      	mov	r3, r7
 8000e34:	220c      	movs	r2, #12
 8000e36:	4619      	mov	r1, r3
 8000e38:	4807      	ldr	r0, [pc, #28]	@ (8000e58 <MX_TIM2_Init+0x10c>)
 8000e3a:	f003 fc63 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8000e44:	f7ff febb 	bl	8000bbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e48:	4803      	ldr	r0, [pc, #12]	@ (8000e58 <MX_TIM2_Init+0x10c>)
 8000e4a:	f000 f9ab 	bl	80011a4 <HAL_TIM_MspPostInit>

}
 8000e4e:	bf00      	nop
 8000e50:	3738      	adds	r7, #56	@ 0x38
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000140 	.word	0x20000140

08000e5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b094      	sub	sp, #80	@ 0x50
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	f107 0320 	add.w	r3, r7, #32
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	615a      	str	r2, [r3, #20]
 8000e9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e9e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f94 <MX_TIM3_Init+0x138>)
 8000ea0:	4a3d      	ldr	r2, [pc, #244]	@ (8000f98 <MX_TIM3_Init+0x13c>)
 8000ea2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8-1;
 8000ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8000f94 <MX_TIM3_Init+0x138>)
 8000ea6:	2207      	movs	r2, #7
 8000ea8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000eaa:	4b3a      	ldr	r3, [pc, #232]	@ (8000f94 <MX_TIM3_Init+0x138>)
 8000eac:	2220      	movs	r2, #32
 8000eae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000eb0:	4b38      	ldr	r3, [pc, #224]	@ (8000f94 <MX_TIM3_Init+0x138>)
 8000eb2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000eb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb8:	4b36      	ldr	r3, [pc, #216]	@ (8000f94 <MX_TIM3_Init+0x138>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ebe:	4b35      	ldr	r3, [pc, #212]	@ (8000f94 <MX_TIM3_Init+0x138>)
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ec4:	4833      	ldr	r0, [pc, #204]	@ (8000f94 <MX_TIM3_Init+0x138>)
 8000ec6:	f003 f8d1 	bl	800406c <HAL_TIM_Base_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000ed0:	f7ff fe75 	bl	8000bbe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed8:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000eda:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ede:	4619      	mov	r1, r3
 8000ee0:	482c      	ldr	r0, [pc, #176]	@ (8000f94 <MX_TIM3_Init+0x138>)
 8000ee2:	f003 fd23 	bl	800492c <HAL_TIM_ConfigClockSource>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000eec:	f7ff fe67 	bl	8000bbe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ef0:	4828      	ldr	r0, [pc, #160]	@ (8000f94 <MX_TIM3_Init+0x138>)
 8000ef2:	f003 f973 	bl	80041dc <HAL_TIM_PWM_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8000efc:	f7ff fe5f 	bl	8000bbe <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000f00:	2306      	movs	r3, #6
 8000f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000f04:	2310      	movs	r3, #16
 8000f06:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000f08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4821      	ldr	r0, [pc, #132]	@ (8000f94 <MX_TIM3_Init+0x138>)
 8000f10:	f003 fe22 	bl	8004b58 <HAL_TIM_SlaveConfigSynchro>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8000f1a:	f7ff fe50 	bl	8000bbe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f26:	f107 0320 	add.w	r3, r7, #32
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4819      	ldr	r0, [pc, #100]	@ (8000f94 <MX_TIM3_Init+0x138>)
 8000f2e:	f004 fbd5 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000f38:	f7ff fe41 	bl	8000bbe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3c:	2360      	movs	r3, #96	@ 0x60
 8000f3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 400;
 8000f40:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000f44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	4619      	mov	r1, r3
 8000f54:	480f      	ldr	r0, [pc, #60]	@ (8000f94 <MX_TIM3_Init+0x138>)
 8000f56:	f003 fbd5 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8000f60:	f7ff fe2d 	bl	8000bbe <Error_Handler>
  }
  sConfigOC.Pulse = 600;
 8000f64:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000f68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2204      	movs	r2, #4
 8000f72:	4619      	mov	r1, r3
 8000f74:	4807      	ldr	r0, [pc, #28]	@ (8000f94 <MX_TIM3_Init+0x138>)
 8000f76:	f003 fbc5 	bl	8004704 <HAL_TIM_PWM_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM3_Init+0x128>
  {
    Error_Handler();
 8000f80:	f7ff fe1d 	bl	8000bbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <MX_TIM3_Init+0x138>)
 8000f86:	f000 f90d 	bl	80011a4 <HAL_TIM_MspPostInit>

}
 8000f8a:	bf00      	nop
 8000f8c:	3750      	adds	r7, #80	@ 0x50
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000018c 	.word	0x2000018c
 8000f98:	40000400 	.word	0x40000400

08000f9c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	@ 0x50
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]
 8000fb2:	615a      	str	r2, [r3, #20]
 8000fb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	2234      	movs	r2, #52	@ 0x34
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f005 fb25 	bl	800660c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000fc2:	4b31      	ldr	r3, [pc, #196]	@ (8001088 <MX_TIM16_Init+0xec>)
 8000fc4:	4a31      	ldr	r2, [pc, #196]	@ (800108c <MX_TIM16_Init+0xf0>)
 8000fc6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000fc8:	4b2f      	ldr	r3, [pc, #188]	@ (8001088 <MX_TIM16_Init+0xec>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fce:	4b2e      	ldr	r3, [pc, #184]	@ (8001088 <MX_TIM16_Init+0xec>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001088 <MX_TIM16_Init+0xec>)
 8000fd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fda:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fdc:	4b2a      	ldr	r3, [pc, #168]	@ (8001088 <MX_TIM16_Init+0xec>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000fe2:	4b29      	ldr	r3, [pc, #164]	@ (8001088 <MX_TIM16_Init+0xec>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe8:	4b27      	ldr	r3, [pc, #156]	@ (8001088 <MX_TIM16_Init+0xec>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000fee:	4826      	ldr	r0, [pc, #152]	@ (8001088 <MX_TIM16_Init+0xec>)
 8000ff0:	f003 f83c 	bl	800406c <HAL_TIM_Base_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000ffa:	f7ff fde0 	bl	8000bbe <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000ffe:	4822      	ldr	r0, [pc, #136]	@ (8001088 <MX_TIM16_Init+0xec>)
 8001000:	f003 f88b 	bl	800411a <HAL_TIM_OC_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800100a:	f7ff fdd8 	bl	8000bbe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800100e:	2300      	movs	r3, #0
 8001010:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001016:	2300      	movs	r3, #0
 8001018:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800101a:	2300      	movs	r3, #0
 800101c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800102a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	4815      	ldr	r0, [pc, #84]	@ (8001088 <MX_TIM16_Init+0xec>)
 8001034:	f003 faec 	bl	8004610 <HAL_TIM_OC_ConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800103e:	f7ff fdbe 	bl	8000bbe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001056:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800105a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001064:	463b      	mov	r3, r7
 8001066:	4619      	mov	r1, r3
 8001068:	4807      	ldr	r0, [pc, #28]	@ (8001088 <MX_TIM16_Init+0xec>)
 800106a:	f004 fbcd 	bl	8005808 <HAL_TIMEx_ConfigBreakDeadTime>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001074:	f7ff fda3 	bl	8000bbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001078:	4803      	ldr	r0, [pc, #12]	@ (8001088 <MX_TIM16_Init+0xec>)
 800107a:	f000 f893 	bl	80011a4 <HAL_TIM_MspPostInit>

}
 800107e:	bf00      	nop
 8001080:	3750      	adds	r7, #80	@ 0x50
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200001d8 	.word	0x200001d8
 800108c:	40014400 	.word	0x40014400

08001090 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	@ 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a17      	ldr	r2, [pc, #92]	@ (800110c <HAL_TIM_Encoder_MspInit+0x7c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d127      	bne.n	8001102 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010b2:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x80>)
 80010b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010b6:	4a16      	ldr	r2, [pc, #88]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x80>)
 80010b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80010be:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x80>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x80>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	4a10      	ldr	r2, [pc, #64]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x80>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <HAL_TIM_Encoder_MspInit+0x80>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 80010e2:	2303      	movs	r3, #3
 80010e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80010f2:	2302      	movs	r3, #2
 80010f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	@ (8001114 <HAL_TIM_Encoder_MspInit+0x84>)
 80010fe:	f001 fca3 	bl	8002a48 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001102:	bf00      	nop
 8001104:	3728      	adds	r7, #40	@ 0x28
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40012c00 	.word	0x40012c00
 8001110:	40021000 	.word	0x40021000
 8001114:	48000800 	.word	0x48000800

08001118 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001128:	d10c      	bne.n	8001144 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800112a:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <HAL_TIM_Base_MspInit+0x80>)
 800112c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112e:	4a1a      	ldr	r2, [pc, #104]	@ (8001198 <HAL_TIM_Base_MspInit+0x80>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6593      	str	r3, [r2, #88]	@ 0x58
 8001136:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <HAL_TIM_Base_MspInit+0x80>)
 8001138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001142:	e022      	b.n	800118a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a14      	ldr	r2, [pc, #80]	@ (800119c <HAL_TIM_Base_MspInit+0x84>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d10c      	bne.n	8001168 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800114e:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <HAL_TIM_Base_MspInit+0x80>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001152:	4a11      	ldr	r2, [pc, #68]	@ (8001198 <HAL_TIM_Base_MspInit+0x80>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6593      	str	r3, [r2, #88]	@ 0x58
 800115a:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <HAL_TIM_Base_MspInit+0x80>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
}
 8001166:	e010      	b.n	800118a <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM16)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0c      	ldr	r2, [pc, #48]	@ (80011a0 <HAL_TIM_Base_MspInit+0x88>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d10b      	bne.n	800118a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <HAL_TIM_Base_MspInit+0x80>)
 8001174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001176:	4a08      	ldr	r2, [pc, #32]	@ (8001198 <HAL_TIM_Base_MspInit+0x80>)
 8001178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800117c:	6613      	str	r3, [r2, #96]	@ 0x60
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_TIM_Base_MspInit+0x80>)
 8001180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
}
 800118a:	bf00      	nop
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	40000400 	.word	0x40000400
 80011a0:	40014400 	.word	0x40014400

080011a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	@ 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011c4:	d11d      	bne.n	8001202 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	4b32      	ldr	r3, [pc, #200]	@ (8001290 <HAL_TIM_MspPostInit+0xec>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	4a31      	ldr	r2, [pc, #196]	@ (8001290 <HAL_TIM_MspPostInit+0xec>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001290 <HAL_TIM_MspPostInit+0xec>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011de:	230c      	movs	r3, #12
 80011e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011ee:	2301      	movs	r3, #1
 80011f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fc:	f001 fc24 	bl	8002a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001200:	e042      	b.n	8001288 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM3)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a23      	ldr	r2, [pc, #140]	@ (8001294 <HAL_TIM_MspPostInit+0xf0>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d11c      	bne.n	8001246 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120c:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <HAL_TIM_MspPostInit+0xec>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001210:	4a1f      	ldr	r2, [pc, #124]	@ (8001290 <HAL_TIM_MspPostInit+0xec>)
 8001212:	f043 0304 	orr.w	r3, r3, #4
 8001216:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001218:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <HAL_TIM_MspPostInit+0xec>)
 800121a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001224:	23c0      	movs	r3, #192	@ 0xc0
 8001226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001234:	2302      	movs	r3, #2
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001238:	f107 0314 	add.w	r3, r7, #20
 800123c:	4619      	mov	r1, r3
 800123e:	4816      	ldr	r0, [pc, #88]	@ (8001298 <HAL_TIM_MspPostInit+0xf4>)
 8001240:	f001 fc02 	bl	8002a48 <HAL_GPIO_Init>
}
 8001244:	e020      	b.n	8001288 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM16)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a14      	ldr	r2, [pc, #80]	@ (800129c <HAL_TIM_MspPostInit+0xf8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d11b      	bne.n	8001288 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001250:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <HAL_TIM_MspPostInit+0xec>)
 8001252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001254:	4a0e      	ldr	r2, [pc, #56]	@ (8001290 <HAL_TIM_MspPostInit+0xec>)
 8001256:	f043 0302 	orr.w	r3, r3, #2
 800125a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125c:	4b0c      	ldr	r3, [pc, #48]	@ (8001290 <HAL_TIM_MspPostInit+0xec>)
 800125e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001268:	2310      	movs	r3, #16
 800126a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001278:	2301      	movs	r3, #1
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4807      	ldr	r0, [pc, #28]	@ (80012a0 <HAL_TIM_MspPostInit+0xfc>)
 8001284:	f001 fbe0 	bl	8002a48 <HAL_GPIO_Init>
}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	@ 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000
 8001294:	40000400 	.word	0x40000400
 8001298:	48000800 	.word	0x48000800
 800129c:	40014400 	.word	0x40014400
 80012a0:	48000400 	.word	0x48000400

080012a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a8:	4b22      	ldr	r3, [pc, #136]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012aa:	4a23      	ldr	r2, [pc, #140]	@ (8001338 <MX_USART1_UART_Init+0x94>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ae:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012da:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012e0:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e6:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ec:	4811      	ldr	r0, [pc, #68]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 80012ee:	f004 fb1f 	bl	8005930 <HAL_UART_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80012f8:	f7ff fc61 	bl	8000bbe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012fc:	2100      	movs	r1, #0
 80012fe:	480d      	ldr	r0, [pc, #52]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 8001300:	f005 f8ba 	bl	8006478 <HAL_UARTEx_SetTxFifoThreshold>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800130a:	f7ff fc58 	bl	8000bbe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130e:	2100      	movs	r1, #0
 8001310:	4808      	ldr	r0, [pc, #32]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 8001312:	f005 f8ef 	bl	80064f4 <HAL_UARTEx_SetRxFifoThreshold>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800131c:	f7ff fc4f 	bl	8000bbe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	@ (8001334 <MX_USART1_UART_Init+0x90>)
 8001322:	f005 f870 	bl	8006406 <HAL_UARTEx_DisableFifoMode>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800132c:	f7ff fc47 	bl	8000bbe <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000224 	.word	0x20000224
 8001338:	40013800 	.word	0x40013800

0800133c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001340:	4b22      	ldr	r3, [pc, #136]	@ (80013cc <MX_USART3_UART_Init+0x90>)
 8001342:	4a23      	ldr	r2, [pc, #140]	@ (80013d0 <MX_USART3_UART_Init+0x94>)
 8001344:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001346:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <MX_USART3_UART_Init+0x90>)
 8001348:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800134c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <MX_USART3_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b1d      	ldr	r3, [pc, #116]	@ (80013cc <MX_USART3_UART_Init+0x90>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800135a:	4b1c      	ldr	r3, [pc, #112]	@ (80013cc <MX_USART3_UART_Init+0x90>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001360:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <MX_USART3_UART_Init+0x90>)
 8001362:	220c      	movs	r2, #12
 8001364:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <MX_USART3_UART_Init+0x90>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <MX_USART3_UART_Init+0x90>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001372:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <MX_USART3_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001378:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_USART3_UART_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <MX_USART3_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001384:	4811      	ldr	r0, [pc, #68]	@ (80013cc <MX_USART3_UART_Init+0x90>)
 8001386:	f004 fad3 	bl	8005930 <HAL_UART_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001390:	f7ff fc15 	bl	8000bbe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001394:	2100      	movs	r1, #0
 8001396:	480d      	ldr	r0, [pc, #52]	@ (80013cc <MX_USART3_UART_Init+0x90>)
 8001398:	f005 f86e 	bl	8006478 <HAL_UARTEx_SetTxFifoThreshold>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80013a2:	f7ff fc0c 	bl	8000bbe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013a6:	2100      	movs	r1, #0
 80013a8:	4808      	ldr	r0, [pc, #32]	@ (80013cc <MX_USART3_UART_Init+0x90>)
 80013aa:	f005 f8a3 	bl	80064f4 <HAL_UARTEx_SetRxFifoThreshold>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80013b4:	f7ff fc03 	bl	8000bbe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	@ (80013cc <MX_USART3_UART_Init+0x90>)
 80013ba:	f005 f824 	bl	8006406 <HAL_UARTEx_DisableFifoMode>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80013c4:	f7ff fbfb 	bl	8000bbe <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200002b8 	.word	0x200002b8
 80013d0:	40004800 	.word	0x40004800

080013d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b0a0      	sub	sp, #128	@ 0x80
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ec:	f107 0318 	add.w	r3, r7, #24
 80013f0:	2254      	movs	r2, #84	@ 0x54
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f005 f909 	bl	800660c <memset>
  if(uartHandle->Instance==USART1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a3d      	ldr	r2, [pc, #244]	@ (80014f4 <HAL_UART_MspInit+0x120>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d136      	bne.n	8001472 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001404:	2301      	movs	r3, #1
 8001406:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800140c:	f107 0318 	add.w	r3, r7, #24
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fbdd 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800141c:	f7ff fbcf 	bl	8000bbe <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001420:	4b35      	ldr	r3, [pc, #212]	@ (80014f8 <HAL_UART_MspInit+0x124>)
 8001422:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001424:	4a34      	ldr	r2, [pc, #208]	@ (80014f8 <HAL_UART_MspInit+0x124>)
 8001426:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800142a:	6613      	str	r3, [r2, #96]	@ 0x60
 800142c:	4b32      	ldr	r3, [pc, #200]	@ (80014f8 <HAL_UART_MspInit+0x124>)
 800142e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001430:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001438:	4b2f      	ldr	r3, [pc, #188]	@ (80014f8 <HAL_UART_MspInit+0x124>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143c:	4a2e      	ldr	r2, [pc, #184]	@ (80014f8 <HAL_UART_MspInit+0x124>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001444:	4b2c      	ldr	r3, [pc, #176]	@ (80014f8 <HAL_UART_MspInit+0x124>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CMD_TX_Pin|CMD_RX_Pin;
 8001450:	2330      	movs	r3, #48	@ 0x30
 8001452:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001460:	2307      	movs	r3, #7
 8001462:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001464:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001468:	4619      	mov	r1, r3
 800146a:	4824      	ldr	r0, [pc, #144]	@ (80014fc <HAL_UART_MspInit+0x128>)
 800146c:	f001 faec 	bl	8002a48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001470:	e03b      	b.n	80014ea <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART3)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a22      	ldr	r2, [pc, #136]	@ (8001500 <HAL_UART_MspInit+0x12c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d136      	bne.n	80014ea <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800147c:	2304      	movs	r3, #4
 800147e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001484:	f107 0318 	add.w	r3, r7, #24
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fba1 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8001494:	f7ff fb93 	bl	8000bbe <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001498:	4b17      	ldr	r3, [pc, #92]	@ (80014f8 <HAL_UART_MspInit+0x124>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149c:	4a16      	ldr	r2, [pc, #88]	@ (80014f8 <HAL_UART_MspInit+0x124>)
 800149e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80014a4:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <HAL_UART_MspInit+0x124>)
 80014a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b0:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <HAL_UART_MspInit+0x124>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b4:	4a10      	ldr	r2, [pc, #64]	@ (80014f8 <HAL_UART_MspInit+0x124>)
 80014b6:	f043 0302 	orr.w	r3, r3, #2
 80014ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014bc:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <HAL_UART_MspInit+0x124>)
 80014be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80014c8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014da:	2307      	movs	r3, #7
 80014dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80014e2:	4619      	mov	r1, r3
 80014e4:	4807      	ldr	r0, [pc, #28]	@ (8001504 <HAL_UART_MspInit+0x130>)
 80014e6:	f001 faaf 	bl	8002a48 <HAL_GPIO_Init>
}
 80014ea:	bf00      	nop
 80014ec:	3780      	adds	r7, #128	@ 0x80
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40013800 	.word	0x40013800
 80014f8:	40021000 	.word	0x40021000
 80014fc:	48000800 	.word	0x48000800
 8001500:	40004800 	.word	0x40004800
 8001504:	48000400 	.word	0x48000400

08001508 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001508:	480d      	ldr	r0, [pc, #52]	@ (8001540 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800150a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800150c:	f7ff fbb2 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480c      	ldr	r0, [pc, #48]	@ (8001544 <LoopForever+0x6>)
  ldr r1, =_edata
 8001512:	490d      	ldr	r1, [pc, #52]	@ (8001548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001514:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <LoopForever+0xe>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001528:	4c0a      	ldr	r4, [pc, #40]	@ (8001554 <LoopForever+0x16>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001536:	f005 f871 	bl	800661c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800153a:	f7ff fa17 	bl	800096c <main>

0800153e <LoopForever>:

LoopForever:
    b LoopForever
 800153e:	e7fe      	b.n	800153e <LoopForever>
  ldr   r0, =_estack
 8001540:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800154c:	080066cc 	.word	0x080066cc
  ldr r2, =_sbss
 8001550:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001554:	20000350 	.word	0x20000350

08001558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC1_2_IRQHandler>

0800155a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f001 fa3d 	bl	80029e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800156a:	200f      	movs	r0, #15
 800156c:	f000 f80e 	bl	800158c <HAL_InitTick>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	71fb      	strb	r3, [r7, #7]
 800157a:	e001      	b.n	8001580 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800157c:	f7ff fb26 	bl	8000bcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001580:	79fb      	ldrb	r3, [r7, #7]

}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001598:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <HAL_InitTick+0x68>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d022      	beq.n	80015e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015a0:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <HAL_InitTick+0x6c>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <HAL_InitTick+0x68>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80015ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 fa3a 	bl	8002a2e <HAL_SYSTICK_Config>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10f      	bne.n	80015e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	d809      	bhi.n	80015da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c6:	2200      	movs	r2, #0
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	f04f 30ff 	mov.w	r0, #4294967295
 80015ce:	f001 fa14 	bl	80029fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015d2:	4a0a      	ldr	r2, [pc, #40]	@ (80015fc <HAL_InitTick+0x70>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	e007      	b.n	80015ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	73fb      	strb	r3, [r7, #15]
 80015de:	e004      	b.n	80015ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e001      	b.n	80015ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000008 	.word	0x20000008
 80015f8:	20000000 	.word	0x20000000
 80015fc:	20000004 	.word	0x20000004

08001600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001604:	4b05      	ldr	r3, [pc, #20]	@ (800161c <HAL_IncTick+0x1c>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b05      	ldr	r3, [pc, #20]	@ (8001620 <HAL_IncTick+0x20>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4413      	add	r3, r2
 800160e:	4a03      	ldr	r2, [pc, #12]	@ (800161c <HAL_IncTick+0x1c>)
 8001610:	6013      	str	r3, [r2, #0]
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	2000034c 	.word	0x2000034c
 8001620:	20000008 	.word	0x20000008

08001624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return uwTick;
 8001628:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <HAL_GetTick+0x14>)
 800162a:	681b      	ldr	r3, [r3, #0]
}
 800162c:	4618      	mov	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2000034c 	.word	0x2000034c

0800163c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001644:	f7ff ffee 	bl	8001624 <HAL_GetTick>
 8001648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	d004      	beq.n	8001660 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <HAL_Delay+0x40>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4413      	add	r3, r2
 800165e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001660:	bf00      	nop
 8001662:	f7ff ffdf 	bl	8001624 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	429a      	cmp	r2, r3
 8001670:	d8f7      	bhi.n	8001662 <HAL_Delay+0x26>
  {
  }
}
 8001672:	bf00      	nop
 8001674:	bf00      	nop
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000008 	.word	0x20000008

08001680 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	609a      	str	r2, [r3, #8]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	609a      	str	r2, [r3, #8]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3360      	adds	r3, #96	@ 0x60
 80016fa:	461a      	mov	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b08      	ldr	r3, [pc, #32]	@ (800172c <LL_ADC_SetOffset+0x44>)
 800170a:	4013      	ands	r3, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	4313      	orrs	r3, r2
 8001718:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001720:	bf00      	nop
 8001722:	371c      	adds	r7, #28
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	03fff000 	.word	0x03fff000

08001730 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3360      	adds	r3, #96	@ 0x60
 800173e:	461a      	mov	r2, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	3360      	adds	r3, #96	@ 0x60
 800176c:	461a      	mov	r2, r3
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	431a      	orrs	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001786:	bf00      	nop
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001792:	b480      	push	{r7}
 8001794:	b087      	sub	sp, #28
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3360      	adds	r3, #96	@ 0x60
 80017a2:	461a      	mov	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80017bc:	bf00      	nop
 80017be:	371c      	adds	r7, #28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b087      	sub	sp, #28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3360      	adds	r3, #96	@ 0x60
 80017d8:	461a      	mov	r2, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	431a      	orrs	r2, r3
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80017f2:	bf00      	nop
 80017f4:	371c      	adds	r7, #28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	615a      	str	r2, [r3, #20]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3330      	adds	r3, #48	@ 0x30
 8001834:	461a      	mov	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	4413      	add	r3, r2
 8001842:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	211f      	movs	r1, #31
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	401a      	ands	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	0e9b      	lsrs	r3, r3, #26
 800185c:	f003 011f 	and.w	r1, r3, #31
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	fa01 f303 	lsl.w	r3, r1, r3
 800186a:	431a      	orrs	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001870:	bf00      	nop
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800187c:	b480      	push	{r7}
 800187e:	b087      	sub	sp, #28
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	3314      	adds	r3, #20
 800188c:	461a      	mov	r2, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	0e5b      	lsrs	r3, r3, #25
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	4413      	add	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	0d1b      	lsrs	r3, r3, #20
 80018a4:	f003 031f 	and.w	r3, r3, #31
 80018a8:	2107      	movs	r1, #7
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	401a      	ands	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	0d1b      	lsrs	r3, r3, #20
 80018b6:	f003 031f 	and.w	r3, r3, #31
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	fa01 f303 	lsl.w	r3, r1, r3
 80018c0:	431a      	orrs	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018c6:	bf00      	nop
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ec:	43db      	mvns	r3, r3
 80018ee:	401a      	ands	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0318 	and.w	r3, r3, #24
 80018f6:	4908      	ldr	r1, [pc, #32]	@ (8001918 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018f8:	40d9      	lsrs	r1, r3
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	400b      	ands	r3, r1
 80018fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001902:	431a      	orrs	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	0007ffff 	.word	0x0007ffff

0800191c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800192c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6093      	str	r3, [r2, #8]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001950:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001954:	d101      	bne.n	800195a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001978:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800197c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80019a4:	d101      	bne.n	80019aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <LL_ADC_IsEnabled+0x18>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <LL_ADC_IsEnabled+0x1a>
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d101      	bne.n	80019f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d101      	bne.n	8001a1c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b089      	sub	sp, #36	@ 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e1a9      	b.n	8001d9a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d109      	bne.n	8001a68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7fe fdcf 	bl	80005f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff67 	bl	8001940 <LL_ADC_IsDeepPowerDownEnabled>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d004      	beq.n	8001a82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff4d 	bl	800191c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff82 	bl	8001990 <LL_ADC_IsInternalRegulatorEnabled>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d115      	bne.n	8001abe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff66 	bl	8001968 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a9c:	4b9c      	ldr	r3, [pc, #624]	@ (8001d10 <HAL_ADC_Init+0x2e4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	099b      	lsrs	r3, r3, #6
 8001aa2:	4a9c      	ldr	r2, [pc, #624]	@ (8001d14 <HAL_ADC_Init+0x2e8>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	3301      	adds	r3, #1
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ab0:	e002      	b.n	8001ab8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f9      	bne.n	8001ab2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff ff64 	bl	8001990 <LL_ADC_IsInternalRegulatorEnabled>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10d      	bne.n	8001aea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad2:	f043 0210 	orr.w	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ade:	f043 0201 	orr.w	r2, r3, #1
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ff75 	bl	80019de <LL_ADC_REG_IsConversionOngoing>
 8001af4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f040 8142 	bne.w	8001d88 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f040 813e 	bne.w	8001d88 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b10:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b14:	f043 0202 	orr.w	r2, r3, #2
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff49 	bl	80019b8 <LL_ADC_IsEnabled>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d141      	bne.n	8001bb0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b34:	d004      	beq.n	8001b40 <HAL_ADC_Init+0x114>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a77      	ldr	r2, [pc, #476]	@ (8001d18 <HAL_ADC_Init+0x2ec>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d10f      	bne.n	8001b60 <HAL_ADC_Init+0x134>
 8001b40:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001b44:	f7ff ff38 	bl	80019b8 <LL_ADC_IsEnabled>
 8001b48:	4604      	mov	r4, r0
 8001b4a:	4873      	ldr	r0, [pc, #460]	@ (8001d18 <HAL_ADC_Init+0x2ec>)
 8001b4c:	f7ff ff34 	bl	80019b8 <LL_ADC_IsEnabled>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4323      	orrs	r3, r4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	e012      	b.n	8001b86 <HAL_ADC_Init+0x15a>
 8001b60:	486e      	ldr	r0, [pc, #440]	@ (8001d1c <HAL_ADC_Init+0x2f0>)
 8001b62:	f7ff ff29 	bl	80019b8 <LL_ADC_IsEnabled>
 8001b66:	4604      	mov	r4, r0
 8001b68:	486d      	ldr	r0, [pc, #436]	@ (8001d20 <HAL_ADC_Init+0x2f4>)
 8001b6a:	f7ff ff25 	bl	80019b8 <LL_ADC_IsEnabled>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	431c      	orrs	r4, r3
 8001b72:	486c      	ldr	r0, [pc, #432]	@ (8001d24 <HAL_ADC_Init+0x2f8>)
 8001b74:	f7ff ff20 	bl	80019b8 <LL_ADC_IsEnabled>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4323      	orrs	r3, r4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf0c      	ite	eq
 8001b80:	2301      	moveq	r3, #1
 8001b82:	2300      	movne	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d012      	beq.n	8001bb0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b92:	d004      	beq.n	8001b9e <HAL_ADC_Init+0x172>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a5f      	ldr	r2, [pc, #380]	@ (8001d18 <HAL_ADC_Init+0x2ec>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_Init+0x176>
 8001b9e:	4a62      	ldr	r2, [pc, #392]	@ (8001d28 <HAL_ADC_Init+0x2fc>)
 8001ba0:	e000      	b.n	8001ba4 <HAL_ADC_Init+0x178>
 8001ba2:	4a62      	ldr	r2, [pc, #392]	@ (8001d2c <HAL_ADC_Init+0x300>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4610      	mov	r0, r2
 8001bac:	f7ff fd68 	bl	8001680 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7f5b      	ldrb	r3, [r3, #29]
 8001bb4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bba:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001bc0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001bc6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001bce:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d106      	bne.n	8001bec <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be2:	3b01      	subs	r3, #1
 8001be4:	045b      	lsls	r3, r3, #17
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d009      	beq.n	8001c08 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c00:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	4b48      	ldr	r3, [pc, #288]	@ (8001d30 <HAL_ADC_Init+0x304>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	69b9      	ldr	r1, [r7, #24]
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fee4 	bl	8001a04 <LL_ADC_INJ_IsConversionOngoing>
 8001c3c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d17f      	bne.n	8001d44 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d17c      	bne.n	8001d44 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c4e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c56:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c66:	f023 0302 	bic.w	r3, r3, #2
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	69b9      	ldr	r1, [r7, #24]
 8001c70:	430b      	orrs	r3, r1
 8001c72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d017      	beq.n	8001cac <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001c8a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001c94:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6911      	ldr	r1, [r2, #16]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001caa:	e013      	b.n	8001cd4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001cba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ccc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cd0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d12a      	bne.n	8001d34 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001ce8:	f023 0304 	bic.w	r3, r3, #4
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001cf4:	4311      	orrs	r1, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d00:	430a      	orrs	r2, r1
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	611a      	str	r2, [r3, #16]
 8001d0e:	e019      	b.n	8001d44 <HAL_ADC_Init+0x318>
 8001d10:	20000000 	.word	0x20000000
 8001d14:	053e2d63 	.word	0x053e2d63
 8001d18:	50000100 	.word	0x50000100
 8001d1c:	50000400 	.word	0x50000400
 8001d20:	50000500 	.word	0x50000500
 8001d24:	50000600 	.word	0x50000600
 8001d28:	50000300 	.word	0x50000300
 8001d2c:	50000700 	.word	0x50000700
 8001d30:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691a      	ldr	r2, [r3, #16]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d10c      	bne.n	8001d66 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	f023 010f 	bic.w	r1, r3, #15
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	1e5a      	subs	r2, r3, #1
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d64:	e007      	b.n	8001d76 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 020f 	bic.w	r2, r2, #15
 8001d74:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7a:	f023 0303 	bic.w	r3, r3, #3
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d86:	e007      	b.n	8001d98 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d8c:	f043 0210 	orr.w	r2, r3, #16
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d98:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3724      	adds	r7, #36	@ 0x24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd90      	pop	{r4, r7, pc}
 8001da2:	bf00      	nop

08001da4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b0b6      	sub	sp, #216	@ 0xd8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d102      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x24>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	f000 bc13 	b.w	80025ee <HAL_ADC_ConfigChannel+0x84a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fe02 	bl	80019de <LL_ADC_REG_IsConversionOngoing>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f040 83f3 	bne.w	80025c8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6859      	ldr	r1, [r3, #4]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	f7ff fd18 	bl	8001824 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fdf0 	bl	80019de <LL_ADC_REG_IsConversionOngoing>
 8001dfe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fdfc 	bl	8001a04 <LL_ADC_INJ_IsConversionOngoing>
 8001e0c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f040 81d9 	bne.w	80021cc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f040 81d4 	bne.w	80021cc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001e2c:	d10f      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7ff fd1f 	bl	800187c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fcd9 	bl	80017fe <LL_ADC_SetSamplingTimeCommonConfig>
 8001e4c:	e00e      	b.n	8001e6c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f7ff fd0e 	bl	800187c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fcc9 	bl	80017fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	695a      	ldr	r2, [r3, #20]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	08db      	lsrs	r3, r3, #3
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d022      	beq.n	8001ed4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	6919      	ldr	r1, [r3, #16]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001e9e:	f7ff fc23 	bl	80016e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6818      	ldr	r0, [r3, #0]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	6919      	ldr	r1, [r3, #16]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f7ff fc6f 	bl	8001792 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d102      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x126>
 8001ec4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ec8:	e000      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x128>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	461a      	mov	r2, r3
 8001ece:	f7ff fc7b 	bl	80017c8 <LL_ADC_SetOffsetSaturation>
 8001ed2:	e17b      	b.n	80021cc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff fc28 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10a      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x15c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fc1d 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	0e9b      	lsrs	r3, r3, #26
 8001efa:	f003 021f 	and.w	r2, r3, #31
 8001efe:	e01e      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x19a>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2100      	movs	r1, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fc12 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001f2e:	2320      	movs	r3, #32
 8001f30:	e004      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001f32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x1b2>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	0e9b      	lsrs	r3, r3, #26
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	e018      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x1e4>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001f72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	e004      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001f7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d106      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2200      	movs	r2, #0
 8001f92:	2100      	movs	r1, #0
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fbe1 	bl	800175c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fbc5 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x222>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fbba 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	0e9b      	lsrs	r3, r3, #26
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	e01e      	b.n	8002004 <HAL_ADC_ConfigChannel+0x260>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2101      	movs	r1, #1
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fbaf 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fdc:	fa93 f3a3 	rbit	r3, r3
 8001fe0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001fe4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fe8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001fec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	e004      	b.n	8002002 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001ff8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ffc:	fab3 f383 	clz	r3, r3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200c:	2b00      	cmp	r3, #0
 800200e:	d105      	bne.n	800201c <HAL_ADC_ConfigChannel+0x278>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	0e9b      	lsrs	r3, r3, #26
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	e018      	b.n	800204e <HAL_ADC_ConfigChannel+0x2aa>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002024:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002030:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002034:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002038:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002040:	2320      	movs	r3, #32
 8002042:	e004      	b.n	800204e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002044:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800204e:	429a      	cmp	r2, r3
 8002050:	d106      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	2101      	movs	r1, #1
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fb7e 	bl	800175c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2102      	movs	r1, #2
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fb62 	bl	8001730 <LL_ADC_GetOffsetChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10a      	bne.n	800208c <HAL_ADC_ConfigChannel+0x2e8>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2102      	movs	r1, #2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fb57 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	0e9b      	lsrs	r3, r3, #26
 8002086:	f003 021f 	and.w	r2, r3, #31
 800208a:	e01e      	b.n	80020ca <HAL_ADC_ConfigChannel+0x326>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2102      	movs	r1, #2
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fb4c 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020a2:	fa93 f3a3 	rbit	r3, r3
 80020a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80020aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80020b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80020ba:	2320      	movs	r3, #32
 80020bc:	e004      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80020be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80020c2:	fab3 f383 	clz	r3, r3
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x33e>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	0e9b      	lsrs	r3, r3, #26
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	e016      	b.n	8002110 <HAL_ADC_ConfigChannel+0x36c>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80020f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80020fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002102:	2320      	movs	r3, #32
 8002104:	e004      	b.n	8002110 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002106:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002110:	429a      	cmp	r2, r3
 8002112:	d106      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2200      	movs	r2, #0
 800211a:	2102      	movs	r1, #2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fb1d 	bl	800175c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2103      	movs	r1, #3
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fb01 	bl	8001730 <LL_ADC_GetOffsetChannel>
 800212e:	4603      	mov	r3, r0
 8002130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10a      	bne.n	800214e <HAL_ADC_ConfigChannel+0x3aa>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2103      	movs	r1, #3
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff faf6 	bl	8001730 <LL_ADC_GetOffsetChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	0e9b      	lsrs	r3, r3, #26
 8002148:	f003 021f 	and.w	r2, r3, #31
 800214c:	e017      	b.n	800217e <HAL_ADC_ConfigChannel+0x3da>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2103      	movs	r1, #3
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff faeb 	bl	8001730 <LL_ADC_GetOffsetChannel>
 800215a:	4603      	mov	r3, r0
 800215c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002160:	fa93 f3a3 	rbit	r3, r3
 8002164:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002166:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002168:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800216a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002170:	2320      	movs	r3, #32
 8002172:	e003      	b.n	800217c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002174:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002186:	2b00      	cmp	r3, #0
 8002188:	d105      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x3f2>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	0e9b      	lsrs	r3, r3, #26
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	e011      	b.n	80021ba <HAL_ADC_ConfigChannel+0x416>
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80021a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80021a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80021ae:	2320      	movs	r3, #32
 80021b0:	e003      	b.n	80021ba <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80021b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021b4:	fab3 f383 	clz	r3, r3
 80021b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d106      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2200      	movs	r2, #0
 80021c4:	2103      	movs	r1, #3
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fac8 	bl	800175c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fbf1 	bl	80019b8 <LL_ADC_IsEnabled>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f040 813d 	bne.w	8002458 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6818      	ldr	r0, [r3, #0]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	6819      	ldr	r1, [r3, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	461a      	mov	r2, r3
 80021ec:	f7ff fb72 	bl	80018d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4aa2      	ldr	r2, [pc, #648]	@ (8002480 <HAL_ADC_ConfigChannel+0x6dc>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	f040 812e 	bne.w	8002458 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10b      	bne.n	8002224 <HAL_ADC_ConfigChannel+0x480>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	0e9b      	lsrs	r3, r3, #26
 8002212:	3301      	adds	r3, #1
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	2b09      	cmp	r3, #9
 800221a:	bf94      	ite	ls
 800221c:	2301      	movls	r3, #1
 800221e:	2300      	movhi	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	e019      	b.n	8002258 <HAL_ADC_ConfigChannel+0x4b4>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800222c:	fa93 f3a3 	rbit	r3, r3
 8002230:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002232:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002234:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002236:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800223c:	2320      	movs	r3, #32
 800223e:	e003      	b.n	8002248 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002240:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	3301      	adds	r3, #1
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	2b09      	cmp	r3, #9
 8002250:	bf94      	ite	ls
 8002252:	2301      	movls	r3, #1
 8002254:	2300      	movhi	r3, #0
 8002256:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002258:	2b00      	cmp	r3, #0
 800225a:	d079      	beq.n	8002350 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002264:	2b00      	cmp	r3, #0
 8002266:	d107      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x4d4>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	0e9b      	lsrs	r3, r3, #26
 800226e:	3301      	adds	r3, #1
 8002270:	069b      	lsls	r3, r3, #26
 8002272:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002276:	e015      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x500>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002280:	fa93 f3a3 	rbit	r3, r3
 8002284:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002286:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002288:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800228a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002290:	2320      	movs	r3, #32
 8002292:	e003      	b.n	800229c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	3301      	adds	r3, #1
 800229e:	069b      	lsls	r3, r3, #26
 80022a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x520>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	0e9b      	lsrs	r3, r3, #26
 80022b6:	3301      	adds	r3, #1
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	2101      	movs	r1, #1
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	e017      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x550>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022cc:	fa93 f3a3 	rbit	r3, r3
 80022d0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80022d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80022d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80022dc:	2320      	movs	r3, #32
 80022de:	e003      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80022e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022e2:	fab3 f383 	clz	r3, r3
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	3301      	adds	r3, #1
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	2101      	movs	r1, #1
 80022f0:	fa01 f303 	lsl.w	r3, r1, r3
 80022f4:	ea42 0103 	orr.w	r1, r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10a      	bne.n	800231a <HAL_ADC_ConfigChannel+0x576>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0e9b      	lsrs	r3, r3, #26
 800230a:	3301      	adds	r3, #1
 800230c:	f003 021f 	and.w	r2, r3, #31
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	051b      	lsls	r3, r3, #20
 8002318:	e018      	b.n	800234c <HAL_ADC_ConfigChannel+0x5a8>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800232a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800232c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002332:	2320      	movs	r3, #32
 8002334:	e003      	b.n	800233e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002338:	fab3 f383 	clz	r3, r3
 800233c:	b2db      	uxtb	r3, r3
 800233e:	3301      	adds	r3, #1
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800234c:	430b      	orrs	r3, r1
 800234e:	e07e      	b.n	800244e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002358:	2b00      	cmp	r3, #0
 800235a:	d107      	bne.n	800236c <HAL_ADC_ConfigChannel+0x5c8>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0e9b      	lsrs	r3, r3, #26
 8002362:	3301      	adds	r3, #1
 8002364:	069b      	lsls	r3, r3, #26
 8002366:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800236a:	e015      	b.n	8002398 <HAL_ADC_ConfigChannel+0x5f4>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800237a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800237c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800237e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002384:	2320      	movs	r3, #32
 8002386:	e003      	b.n	8002390 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238a:	fab3 f383 	clz	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	3301      	adds	r3, #1
 8002392:	069b      	lsls	r3, r3, #26
 8002394:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d109      	bne.n	80023b8 <HAL_ADC_ConfigChannel+0x614>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	0e9b      	lsrs	r3, r3, #26
 80023aa:	3301      	adds	r3, #1
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	2101      	movs	r1, #1
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	e017      	b.n	80023e8 <HAL_ADC_ConfigChannel+0x644>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	fa93 f3a3 	rbit	r3, r3
 80023c4:	61fb      	str	r3, [r7, #28]
  return result;
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80023ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80023d0:	2320      	movs	r3, #32
 80023d2:	e003      	b.n	80023dc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80023d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d6:	fab3 f383 	clz	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	3301      	adds	r3, #1
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	2101      	movs	r1, #1
 80023e4:	fa01 f303 	lsl.w	r3, r1, r3
 80023e8:	ea42 0103 	orr.w	r1, r2, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10d      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x670>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	0e9b      	lsrs	r3, r3, #26
 80023fe:	3301      	adds	r3, #1
 8002400:	f003 021f 	and.w	r2, r3, #31
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	3b1e      	subs	r3, #30
 800240c:	051b      	lsls	r3, r3, #20
 800240e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002412:	e01b      	b.n	800244c <HAL_ADC_ConfigChannel+0x6a8>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	613b      	str	r3, [r7, #16]
  return result;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800242c:	2320      	movs	r3, #32
 800242e:	e003      	b.n	8002438 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	3301      	adds	r3, #1
 800243a:	f003 021f 	and.w	r2, r3, #31
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	3b1e      	subs	r3, #30
 8002446:	051b      	lsls	r3, r3, #20
 8002448:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800244c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002452:	4619      	mov	r1, r3
 8002454:	f7ff fa12 	bl	800187c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <HAL_ADC_ConfigChannel+0x6e0>)
 800245e:	4013      	ands	r3, r2
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80be 	beq.w	80025e2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800246e:	d004      	beq.n	800247a <HAL_ADC_ConfigChannel+0x6d6>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a04      	ldr	r2, [pc, #16]	@ (8002488 <HAL_ADC_ConfigChannel+0x6e4>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d10a      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x6ec>
 800247a:	4b04      	ldr	r3, [pc, #16]	@ (800248c <HAL_ADC_ConfigChannel+0x6e8>)
 800247c:	e009      	b.n	8002492 <HAL_ADC_ConfigChannel+0x6ee>
 800247e:	bf00      	nop
 8002480:	407f0000 	.word	0x407f0000
 8002484:	80080000 	.word	0x80080000
 8002488:	50000100 	.word	0x50000100
 800248c:	50000300 	.word	0x50000300
 8002490:	4b59      	ldr	r3, [pc, #356]	@ (80025f8 <HAL_ADC_ConfigChannel+0x854>)
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff f91a 	bl	80016cc <LL_ADC_GetCommonPathInternalCh>
 8002498:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a56      	ldr	r2, [pc, #344]	@ (80025fc <HAL_ADC_ConfigChannel+0x858>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d004      	beq.n	80024b0 <HAL_ADC_ConfigChannel+0x70c>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a55      	ldr	r2, [pc, #340]	@ (8002600 <HAL_ADC_ConfigChannel+0x85c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d13a      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d134      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024c4:	d005      	beq.n	80024d2 <HAL_ADC_ConfigChannel+0x72e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a4e      	ldr	r2, [pc, #312]	@ (8002604 <HAL_ADC_ConfigChannel+0x860>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	f040 8085 	bne.w	80025dc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024da:	d004      	beq.n	80024e6 <HAL_ADC_ConfigChannel+0x742>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a49      	ldr	r2, [pc, #292]	@ (8002608 <HAL_ADC_ConfigChannel+0x864>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x746>
 80024e6:	4a49      	ldr	r2, [pc, #292]	@ (800260c <HAL_ADC_ConfigChannel+0x868>)
 80024e8:	e000      	b.n	80024ec <HAL_ADC_ConfigChannel+0x748>
 80024ea:	4a43      	ldr	r2, [pc, #268]	@ (80025f8 <HAL_ADC_ConfigChannel+0x854>)
 80024ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f7ff f8d5 	bl	80016a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024fc:	4b44      	ldr	r3, [pc, #272]	@ (8002610 <HAL_ADC_ConfigChannel+0x86c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	099b      	lsrs	r3, r3, #6
 8002502:	4a44      	ldr	r2, [pc, #272]	@ (8002614 <HAL_ADC_ConfigChannel+0x870>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	099b      	lsrs	r3, r3, #6
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	4613      	mov	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002516:	e002      	b.n	800251e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	3b01      	subs	r3, #1
 800251c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1f9      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002524:	e05a      	b.n	80025dc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a3b      	ldr	r2, [pc, #236]	@ (8002618 <HAL_ADC_ConfigChannel+0x874>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d125      	bne.n	800257c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002530:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002534:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d11f      	bne.n	800257c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a31      	ldr	r2, [pc, #196]	@ (8002608 <HAL_ADC_ConfigChannel+0x864>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d104      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x7ac>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a34      	ldr	r2, [pc, #208]	@ (800261c <HAL_ADC_ConfigChannel+0x878>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d047      	beq.n	80025e0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002558:	d004      	beq.n	8002564 <HAL_ADC_ConfigChannel+0x7c0>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a2a      	ldr	r2, [pc, #168]	@ (8002608 <HAL_ADC_ConfigChannel+0x864>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d101      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x7c4>
 8002564:	4a29      	ldr	r2, [pc, #164]	@ (800260c <HAL_ADC_ConfigChannel+0x868>)
 8002566:	e000      	b.n	800256a <HAL_ADC_ConfigChannel+0x7c6>
 8002568:	4a23      	ldr	r2, [pc, #140]	@ (80025f8 <HAL_ADC_ConfigChannel+0x854>)
 800256a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800256e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f7ff f896 	bl	80016a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800257a:	e031      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a27      	ldr	r2, [pc, #156]	@ (8002620 <HAL_ADC_ConfigChannel+0x87c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d12d      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002586:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800258a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d127      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a1c      	ldr	r2, [pc, #112]	@ (8002608 <HAL_ADC_ConfigChannel+0x864>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d022      	beq.n	80025e2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025a4:	d004      	beq.n	80025b0 <HAL_ADC_ConfigChannel+0x80c>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a17      	ldr	r2, [pc, #92]	@ (8002608 <HAL_ADC_ConfigChannel+0x864>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d101      	bne.n	80025b4 <HAL_ADC_ConfigChannel+0x810>
 80025b0:	4a16      	ldr	r2, [pc, #88]	@ (800260c <HAL_ADC_ConfigChannel+0x868>)
 80025b2:	e000      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x812>
 80025b4:	4a10      	ldr	r2, [pc, #64]	@ (80025f8 <HAL_ADC_ConfigChannel+0x854>)
 80025b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025be:	4619      	mov	r1, r3
 80025c0:	4610      	mov	r0, r2
 80025c2:	f7ff f870 	bl	80016a6 <LL_ADC_SetCommonPathInternalCh>
 80025c6:	e00c      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80025da:	e002      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025dc:	bf00      	nop
 80025de:	e000      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80025ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	37d8      	adds	r7, #216	@ 0xd8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	50000700 	.word	0x50000700
 80025fc:	c3210000 	.word	0xc3210000
 8002600:	90c00010 	.word	0x90c00010
 8002604:	50000600 	.word	0x50000600
 8002608:	50000100 	.word	0x50000100
 800260c:	50000300 	.word	0x50000300
 8002610:	20000000 	.word	0x20000000
 8002614:	053e2d63 	.word	0x053e2d63
 8002618:	c7520000 	.word	0xc7520000
 800261c:	50000500 	.word	0x50000500
 8002620:	cb840000 	.word	0xcb840000

08002624 <LL_ADC_IsEnabled>:
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <LL_ADC_IsEnabled+0x18>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <LL_ADC_IsEnabled+0x1a>
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <LL_ADC_REG_IsConversionOngoing>:
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b04      	cmp	r3, #4
 800265c:	d101      	bne.n	8002662 <LL_ADC_REG_IsConversionOngoing+0x18>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b0a1      	sub	sp, #132	@ 0x84
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800268a:	2302      	movs	r3, #2
 800268c:	e0e7      	b.n	800285e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002696:	2300      	movs	r3, #0
 8002698:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800269a:	2300      	movs	r3, #0
 800269c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026a6:	d102      	bne.n	80026ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002868 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	e009      	b.n	80026c2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a6e      	ldr	r2, [pc, #440]	@ (800286c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d102      	bne.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80026b8:	4b6d      	ldr	r3, [pc, #436]	@ (8002870 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	e001      	b.n	80026c2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10b      	bne.n	80026e0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026cc:	f043 0220 	orr.w	r2, r3, #32
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0be      	b.n	800285e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ffb1 	bl	800264a <LL_ADC_REG_IsConversionOngoing>
 80026e8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff ffab 	bl	800264a <LL_ADC_REG_IsConversionOngoing>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f040 80a0 	bne.w	800283c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80026fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 809c 	bne.w	800283c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800270c:	d004      	beq.n	8002718 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a55      	ldr	r2, [pc, #340]	@ (8002868 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d101      	bne.n	800271c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002718:	4b56      	ldr	r3, [pc, #344]	@ (8002874 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800271a:	e000      	b.n	800271e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800271c:	4b56      	ldr	r3, [pc, #344]	@ (8002878 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800271e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d04b      	beq.n	80027c0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002728:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	6859      	ldr	r1, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800273a:	035b      	lsls	r3, r3, #13
 800273c:	430b      	orrs	r3, r1
 800273e:	431a      	orrs	r2, r3
 8002740:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002742:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800274c:	d004      	beq.n	8002758 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a45      	ldr	r2, [pc, #276]	@ (8002868 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d10f      	bne.n	8002778 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002758:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800275c:	f7ff ff62 	bl	8002624 <LL_ADC_IsEnabled>
 8002760:	4604      	mov	r4, r0
 8002762:	4841      	ldr	r0, [pc, #260]	@ (8002868 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002764:	f7ff ff5e 	bl	8002624 <LL_ADC_IsEnabled>
 8002768:	4603      	mov	r3, r0
 800276a:	4323      	orrs	r3, r4
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	e012      	b.n	800279e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002778:	483c      	ldr	r0, [pc, #240]	@ (800286c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800277a:	f7ff ff53 	bl	8002624 <LL_ADC_IsEnabled>
 800277e:	4604      	mov	r4, r0
 8002780:	483b      	ldr	r0, [pc, #236]	@ (8002870 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002782:	f7ff ff4f 	bl	8002624 <LL_ADC_IsEnabled>
 8002786:	4603      	mov	r3, r0
 8002788:	431c      	orrs	r4, r3
 800278a:	483c      	ldr	r0, [pc, #240]	@ (800287c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800278c:	f7ff ff4a 	bl	8002624 <LL_ADC_IsEnabled>
 8002790:	4603      	mov	r3, r0
 8002792:	4323      	orrs	r3, r4
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d056      	beq.n	8002850 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80027a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80027aa:	f023 030f 	bic.w	r3, r3, #15
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	6811      	ldr	r1, [r2, #0]
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	6892      	ldr	r2, [r2, #8]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	431a      	orrs	r2, r3
 80027ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027bc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027be:	e047      	b.n	8002850 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027ca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027d4:	d004      	beq.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a23      	ldr	r2, [pc, #140]	@ (8002868 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d10f      	bne.n	8002800 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80027e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80027e4:	f7ff ff1e 	bl	8002624 <LL_ADC_IsEnabled>
 80027e8:	4604      	mov	r4, r0
 80027ea:	481f      	ldr	r0, [pc, #124]	@ (8002868 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027ec:	f7ff ff1a 	bl	8002624 <LL_ADC_IsEnabled>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4323      	orrs	r3, r4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	bf0c      	ite	eq
 80027f8:	2301      	moveq	r3, #1
 80027fa:	2300      	movne	r3, #0
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	e012      	b.n	8002826 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002800:	481a      	ldr	r0, [pc, #104]	@ (800286c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002802:	f7ff ff0f 	bl	8002624 <LL_ADC_IsEnabled>
 8002806:	4604      	mov	r4, r0
 8002808:	4819      	ldr	r0, [pc, #100]	@ (8002870 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800280a:	f7ff ff0b 	bl	8002624 <LL_ADC_IsEnabled>
 800280e:	4603      	mov	r3, r0
 8002810:	431c      	orrs	r4, r3
 8002812:	481a      	ldr	r0, [pc, #104]	@ (800287c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002814:	f7ff ff06 	bl	8002624 <LL_ADC_IsEnabled>
 8002818:	4603      	mov	r3, r0
 800281a:	4323      	orrs	r3, r4
 800281c:	2b00      	cmp	r3, #0
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d012      	beq.n	8002850 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800282a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002832:	f023 030f 	bic.w	r3, r3, #15
 8002836:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002838:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800283a:	e009      	b.n	8002850 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800284e:	e000      	b.n	8002852 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002850:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800285a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800285e:	4618      	mov	r0, r3
 8002860:	3784      	adds	r7, #132	@ 0x84
 8002862:	46bd      	mov	sp, r7
 8002864:	bd90      	pop	{r4, r7, pc}
 8002866:	bf00      	nop
 8002868:	50000100 	.word	0x50000100
 800286c:	50000400 	.word	0x50000400
 8002870:	50000500 	.word	0x50000500
 8002874:	50000300 	.word	0x50000300
 8002878:	50000700 	.word	0x50000700
 800287c:	50000600 	.word	0x50000600

08002880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002890:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800289c:	4013      	ands	r3, r2
 800289e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b2:	4a04      	ldr	r2, [pc, #16]	@ (80028c4 <__NVIC_SetPriorityGrouping+0x44>)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	60d3      	str	r3, [r2, #12]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028cc:	4b04      	ldr	r3, [pc, #16]	@ (80028e0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	0a1b      	lsrs	r3, r3, #8
 80028d2:	f003 0307 	and.w	r3, r3, #7
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	6039      	str	r1, [r7, #0]
 80028ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	db0a      	blt.n	800290e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	490c      	ldr	r1, [pc, #48]	@ (8002930 <__NVIC_SetPriority+0x4c>)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	0112      	lsls	r2, r2, #4
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	440b      	add	r3, r1
 8002908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800290c:	e00a      	b.n	8002924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4908      	ldr	r1, [pc, #32]	@ (8002934 <__NVIC_SetPriority+0x50>)
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	3b04      	subs	r3, #4
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	440b      	add	r3, r1
 8002922:	761a      	strb	r2, [r3, #24]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000e100 	.word	0xe000e100
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002938:	b480      	push	{r7}
 800293a:	b089      	sub	sp, #36	@ 0x24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f1c3 0307 	rsb	r3, r3, #7
 8002952:	2b04      	cmp	r3, #4
 8002954:	bf28      	it	cs
 8002956:	2304      	movcs	r3, #4
 8002958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	3304      	adds	r3, #4
 800295e:	2b06      	cmp	r3, #6
 8002960:	d902      	bls.n	8002968 <NVIC_EncodePriority+0x30>
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3b03      	subs	r3, #3
 8002966:	e000      	b.n	800296a <NVIC_EncodePriority+0x32>
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800296c:	f04f 32ff 	mov.w	r2, #4294967295
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	43da      	mvns	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	401a      	ands	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002980:	f04f 31ff 	mov.w	r1, #4294967295
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	fa01 f303 	lsl.w	r3, r1, r3
 800298a:	43d9      	mvns	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002990:	4313      	orrs	r3, r2
         );
}
 8002992:	4618      	mov	r0, r3
 8002994:	3724      	adds	r7, #36	@ 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029b0:	d301      	bcc.n	80029b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029b2:	2301      	movs	r3, #1
 80029b4:	e00f      	b.n	80029d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b6:	4a0a      	ldr	r2, [pc, #40]	@ (80029e0 <SysTick_Config+0x40>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029be:	210f      	movs	r1, #15
 80029c0:	f04f 30ff 	mov.w	r0, #4294967295
 80029c4:	f7ff ff8e 	bl	80028e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c8:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <SysTick_Config+0x40>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ce:	4b04      	ldr	r3, [pc, #16]	@ (80029e0 <SysTick_Config+0x40>)
 80029d0:	2207      	movs	r2, #7
 80029d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	e000e010 	.word	0xe000e010

080029e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ff47 	bl	8002880 <__NVIC_SetPriorityGrouping>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a08:	f7ff ff5e 	bl	80028c8 <__NVIC_GetPriorityGrouping>
 8002a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	6978      	ldr	r0, [r7, #20]
 8002a14:	f7ff ff90 	bl	8002938 <NVIC_EncodePriority>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1e:	4611      	mov	r1, r2
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff ff5f 	bl	80028e4 <__NVIC_SetPriority>
}
 8002a26:	bf00      	nop
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff ffb2 	bl	80029a0 <SysTick_Config>
 8002a3c:	4603      	mov	r3, r0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a56:	e15a      	b.n	8002d0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	4013      	ands	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 814c 	beq.w	8002d08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d005      	beq.n	8002a88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d130      	bne.n	8002aea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002abe:	2201      	movs	r2, #1
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4013      	ands	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	f003 0201 	and.w	r2, r3, #1
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d017      	beq.n	8002b26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	2203      	movs	r2, #3
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d123      	bne.n	8002b7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	08da      	lsrs	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3208      	adds	r2, #8
 8002b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	220f      	movs	r2, #15
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4013      	ands	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	08da      	lsrs	r2, r3, #3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3208      	adds	r2, #8
 8002b74:	6939      	ldr	r1, [r7, #16]
 8002b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	2203      	movs	r2, #3
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 0203 	and.w	r2, r3, #3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80a6 	beq.w	8002d08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bbc:	4b5b      	ldr	r3, [pc, #364]	@ (8002d2c <HAL_GPIO_Init+0x2e4>)
 8002bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc0:	4a5a      	ldr	r2, [pc, #360]	@ (8002d2c <HAL_GPIO_Init+0x2e4>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bc8:	4b58      	ldr	r3, [pc, #352]	@ (8002d2c <HAL_GPIO_Init+0x2e4>)
 8002bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd4:	4a56      	ldr	r2, [pc, #344]	@ (8002d30 <HAL_GPIO_Init+0x2e8>)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	089b      	lsrs	r3, r3, #2
 8002bda:	3302      	adds	r3, #2
 8002bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002bfe:	d01f      	beq.n	8002c40 <HAL_GPIO_Init+0x1f8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a4c      	ldr	r2, [pc, #304]	@ (8002d34 <HAL_GPIO_Init+0x2ec>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d019      	beq.n	8002c3c <HAL_GPIO_Init+0x1f4>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a4b      	ldr	r2, [pc, #300]	@ (8002d38 <HAL_GPIO_Init+0x2f0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d013      	beq.n	8002c38 <HAL_GPIO_Init+0x1f0>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a4a      	ldr	r2, [pc, #296]	@ (8002d3c <HAL_GPIO_Init+0x2f4>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00d      	beq.n	8002c34 <HAL_GPIO_Init+0x1ec>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a49      	ldr	r2, [pc, #292]	@ (8002d40 <HAL_GPIO_Init+0x2f8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d007      	beq.n	8002c30 <HAL_GPIO_Init+0x1e8>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a48      	ldr	r2, [pc, #288]	@ (8002d44 <HAL_GPIO_Init+0x2fc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d101      	bne.n	8002c2c <HAL_GPIO_Init+0x1e4>
 8002c28:	2305      	movs	r3, #5
 8002c2a:	e00a      	b.n	8002c42 <HAL_GPIO_Init+0x1fa>
 8002c2c:	2306      	movs	r3, #6
 8002c2e:	e008      	b.n	8002c42 <HAL_GPIO_Init+0x1fa>
 8002c30:	2304      	movs	r3, #4
 8002c32:	e006      	b.n	8002c42 <HAL_GPIO_Init+0x1fa>
 8002c34:	2303      	movs	r3, #3
 8002c36:	e004      	b.n	8002c42 <HAL_GPIO_Init+0x1fa>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e002      	b.n	8002c42 <HAL_GPIO_Init+0x1fa>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <HAL_GPIO_Init+0x1fa>
 8002c40:	2300      	movs	r3, #0
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	f002 0203 	and.w	r2, r2, #3
 8002c48:	0092      	lsls	r2, r2, #2
 8002c4a:	4093      	lsls	r3, r2
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c52:	4937      	ldr	r1, [pc, #220]	@ (8002d30 <HAL_GPIO_Init+0x2e8>)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	089b      	lsrs	r3, r3, #2
 8002c58:	3302      	adds	r3, #2
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c60:	4b39      	ldr	r3, [pc, #228]	@ (8002d48 <HAL_GPIO_Init+0x300>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c84:	4a30      	ldr	r2, [pc, #192]	@ (8002d48 <HAL_GPIO_Init+0x300>)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d48 <HAL_GPIO_Init+0x300>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	43db      	mvns	r3, r3
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4013      	ands	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cae:	4a26      	ldr	r2, [pc, #152]	@ (8002d48 <HAL_GPIO_Init+0x300>)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002cb4:	4b24      	ldr	r3, [pc, #144]	@ (8002d48 <HAL_GPIO_Init+0x300>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8002d48 <HAL_GPIO_Init+0x300>)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002cde:	4b1a      	ldr	r3, [pc, #104]	@ (8002d48 <HAL_GPIO_Init+0x300>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d02:	4a11      	ldr	r2, [pc, #68]	@ (8002d48 <HAL_GPIO_Init+0x300>)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f47f ae9d 	bne.w	8002a58 <HAL_GPIO_Init+0x10>
  }
}
 8002d1e:	bf00      	nop
 8002d20:	bf00      	nop
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40010000 	.word	0x40010000
 8002d34:	48000400 	.word	0x48000400
 8002d38:	48000800 	.word	0x48000800
 8002d3c:	48000c00 	.word	0x48000c00
 8002d40:	48001000 	.word	0x48001000
 8002d44:	48001400 	.word	0x48001400
 8002d48:	40010400 	.word	0x40010400

08002d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	807b      	strh	r3, [r7, #2]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d5c:	787b      	ldrb	r3, [r7, #1]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d62:	887a      	ldrh	r2, [r7, #2]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d68:	e002      	b.n	8002d70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d8e:	887a      	ldrh	r2, [r7, #2]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4013      	ands	r3, r2
 8002d94:	041a      	lsls	r2, r3, #16
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	43d9      	mvns	r1, r3
 8002d9a:	887b      	ldrh	r3, [r7, #2]
 8002d9c:	400b      	ands	r3, r1
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	619a      	str	r2, [r3, #24]
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e08d      	b.n	8002ede <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd fd70 	bl	80008bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2224      	movs	r2, #36	@ 0x24
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d107      	bne.n	8002e2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	e006      	b.n	8002e38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d108      	bne.n	8002e52 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	e007      	b.n	8002e62 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69d9      	ldr	r1, [r3, #28]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1a      	ldr	r2, [r3, #32]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d138      	bne.n	8002f6e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e032      	b.n	8002f70 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2224      	movs	r2, #36	@ 0x24
 8002f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f38:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6819      	ldr	r1, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0201 	orr.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e000      	b.n	8002f70 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
  }
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d139      	bne.n	8003006 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e033      	b.n	8003008 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2224      	movs	r2, #36	@ 0x24
 8002fac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0201 	bic.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002fce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
  }
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d141      	bne.n	80030a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003022:	4b4b      	ldr	r3, [pc, #300]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800302a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800302e:	d131      	bne.n	8003094 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003030:	4b47      	ldr	r3, [pc, #284]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003036:	4a46      	ldr	r2, [pc, #280]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800303c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003040:	4b43      	ldr	r3, [pc, #268]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003048:	4a41      	ldr	r2, [pc, #260]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800304e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003050:	4b40      	ldr	r3, [pc, #256]	@ (8003154 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2232      	movs	r2, #50	@ 0x32
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	4a3f      	ldr	r2, [pc, #252]	@ (8003158 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	0c9b      	lsrs	r3, r3, #18
 8003062:	3301      	adds	r3, #1
 8003064:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003066:	e002      	b.n	800306e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3b01      	subs	r3, #1
 800306c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800306e:	4b38      	ldr	r3, [pc, #224]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800307a:	d102      	bne.n	8003082 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f2      	bne.n	8003068 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003082:	4b33      	ldr	r3, [pc, #204]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800308a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800308e:	d158      	bne.n	8003142 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e057      	b.n	8003144 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003094:	4b2e      	ldr	r3, [pc, #184]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800309a:	4a2d      	ldr	r2, [pc, #180]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800309c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80030a4:	e04d      	b.n	8003142 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ac:	d141      	bne.n	8003132 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030ae:	4b28      	ldr	r3, [pc, #160]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ba:	d131      	bne.n	8003120 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030bc:	4b24      	ldr	r3, [pc, #144]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80030c2:	4a23      	ldr	r2, [pc, #140]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030cc:	4b20      	ldr	r3, [pc, #128]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003154 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2232      	movs	r2, #50	@ 0x32
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	4a1c      	ldr	r2, [pc, #112]	@ (8003158 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	0c9b      	lsrs	r3, r3, #18
 80030ee:	3301      	adds	r3, #1
 80030f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030f2:	e002      	b.n	80030fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030fa:	4b15      	ldr	r3, [pc, #84]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003106:	d102      	bne.n	800310e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f2      	bne.n	80030f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800310e:	4b10      	ldr	r3, [pc, #64]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800311a:	d112      	bne.n	8003142 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e011      	b.n	8003144 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003120:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003126:	4a0a      	ldr	r2, [pc, #40]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800312c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003130:	e007      	b.n	8003142 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003132:	4b07      	ldr	r3, [pc, #28]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800313a:	4a05      	ldr	r2, [pc, #20]	@ (8003150 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003140:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	40007000 	.word	0x40007000
 8003154:	20000000 	.word	0x20000000
 8003158:	431bde83 	.word	0x431bde83

0800315c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003160:	4b05      	ldr	r3, [pc, #20]	@ (8003178 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4a04      	ldr	r2, [pc, #16]	@ (8003178 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003166:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800316a:	6093      	str	r3, [r2, #8]
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40007000 	.word	0x40007000

0800317c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e2fe      	b.n	800378c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d075      	beq.n	8003286 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800319a:	4b97      	ldr	r3, [pc, #604]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031a4:	4b94      	ldr	r3, [pc, #592]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b0c      	cmp	r3, #12
 80031b2:	d102      	bne.n	80031ba <HAL_RCC_OscConfig+0x3e>
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d002      	beq.n	80031c0 <HAL_RCC_OscConfig+0x44>
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d10b      	bne.n	80031d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c0:	4b8d      	ldr	r3, [pc, #564]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d05b      	beq.n	8003284 <HAL_RCC_OscConfig+0x108>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d157      	bne.n	8003284 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e2d9      	b.n	800378c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031e0:	d106      	bne.n	80031f0 <HAL_RCC_OscConfig+0x74>
 80031e2:	4b85      	ldr	r3, [pc, #532]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a84      	ldr	r2, [pc, #528]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	e01d      	b.n	800322c <HAL_RCC_OscConfig+0xb0>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031f8:	d10c      	bne.n	8003214 <HAL_RCC_OscConfig+0x98>
 80031fa:	4b7f      	ldr	r3, [pc, #508]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a7e      	ldr	r2, [pc, #504]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 8003200:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4b7c      	ldr	r3, [pc, #496]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a7b      	ldr	r2, [pc, #492]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 800320c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e00b      	b.n	800322c <HAL_RCC_OscConfig+0xb0>
 8003214:	4b78      	ldr	r3, [pc, #480]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a77      	ldr	r2, [pc, #476]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 800321a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4b75      	ldr	r3, [pc, #468]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a74      	ldr	r2, [pc, #464]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 8003226:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800322a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d013      	beq.n	800325c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003234:	f7fe f9f6 	bl	8001624 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800323c:	f7fe f9f2 	bl	8001624 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	@ 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e29e      	b.n	800378c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800324e:	4b6a      	ldr	r3, [pc, #424]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0xc0>
 800325a:	e014      	b.n	8003286 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe f9e2 	bl	8001624 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003264:	f7fe f9de 	bl	8001624 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	@ 0x64
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e28a      	b.n	800378c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003276:	4b60      	ldr	r3, [pc, #384]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0xe8>
 8003282:	e000      	b.n	8003286 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d075      	beq.n	800337e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003292:	4b59      	ldr	r3, [pc, #356]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800329c:	4b56      	ldr	r3, [pc, #344]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	2b0c      	cmp	r3, #12
 80032aa:	d102      	bne.n	80032b2 <HAL_RCC_OscConfig+0x136>
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d002      	beq.n	80032b8 <HAL_RCC_OscConfig+0x13c>
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	d11f      	bne.n	80032f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032b8:	4b4f      	ldr	r3, [pc, #316]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d005      	beq.n	80032d0 <HAL_RCC_OscConfig+0x154>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e25d      	b.n	800378c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d0:	4b49      	ldr	r3, [pc, #292]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	061b      	lsls	r3, r3, #24
 80032de:	4946      	ldr	r1, [pc, #280]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032e4:	4b45      	ldr	r3, [pc, #276]	@ (80033fc <HAL_RCC_OscConfig+0x280>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe f94f 	bl	800158c <HAL_InitTick>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d043      	beq.n	800337c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e249      	b.n	800378c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d023      	beq.n	8003348 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003300:	4b3d      	ldr	r3, [pc, #244]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a3c      	ldr	r2, [pc, #240]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 8003306:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800330a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fe f98a 	bl	8001624 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003314:	f7fe f986 	bl	8001624 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e232      	b.n	800378c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003326:	4b34      	ldr	r3, [pc, #208]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003332:	4b31      	ldr	r3, [pc, #196]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	061b      	lsls	r3, r3, #24
 8003340:	492d      	ldr	r1, [pc, #180]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 8003342:	4313      	orrs	r3, r2
 8003344:	604b      	str	r3, [r1, #4]
 8003346:	e01a      	b.n	800337e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003348:	4b2b      	ldr	r3, [pc, #172]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a2a      	ldr	r2, [pc, #168]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 800334e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe f966 	bl	8001624 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800335c:	f7fe f962 	bl	8001624 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e20e      	b.n	800378c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800336e:	4b22      	ldr	r3, [pc, #136]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x1e0>
 800337a:	e000      	b.n	800337e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800337c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d041      	beq.n	800340e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01c      	beq.n	80033cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003392:	4b19      	ldr	r3, [pc, #100]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 8003394:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003398:	4a17      	ldr	r2, [pc, #92]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 800339a:	f043 0301 	orr.w	r3, r3, #1
 800339e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a2:	f7fe f93f 	bl	8001624 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033aa:	f7fe f93b 	bl	8001624 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e1e7      	b.n	800378c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033bc:	4b0e      	ldr	r3, [pc, #56]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 80033be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0ef      	beq.n	80033aa <HAL_RCC_OscConfig+0x22e>
 80033ca:	e020      	b.n	800340e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033cc:	4b0a      	ldr	r3, [pc, #40]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 80033ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033d2:	4a09      	ldr	r2, [pc, #36]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 80033d4:	f023 0301 	bic.w	r3, r3, #1
 80033d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fe f922 	bl	8001624 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033e2:	e00d      	b.n	8003400 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e4:	f7fe f91e 	bl	8001624 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d906      	bls.n	8003400 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e1ca      	b.n	800378c <HAL_RCC_OscConfig+0x610>
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003400:	4b8c      	ldr	r3, [pc, #560]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 8003402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1ea      	bne.n	80033e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 80a6 	beq.w	8003568 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341c:	2300      	movs	r3, #0
 800341e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003420:	4b84      	ldr	r3, [pc, #528]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 8003422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003424:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <HAL_RCC_OscConfig+0x2b4>
 800342c:	2301      	movs	r3, #1
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x2b6>
 8003430:	2300      	movs	r3, #0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00d      	beq.n	8003452 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003436:	4b7f      	ldr	r3, [pc, #508]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 8003438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343a:	4a7e      	ldr	r2, [pc, #504]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 800343c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003440:	6593      	str	r3, [r2, #88]	@ 0x58
 8003442:	4b7c      	ldr	r3, [pc, #496]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800344e:	2301      	movs	r3, #1
 8003450:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003452:	4b79      	ldr	r3, [pc, #484]	@ (8003638 <HAL_RCC_OscConfig+0x4bc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d118      	bne.n	8003490 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800345e:	4b76      	ldr	r3, [pc, #472]	@ (8003638 <HAL_RCC_OscConfig+0x4bc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a75      	ldr	r2, [pc, #468]	@ (8003638 <HAL_RCC_OscConfig+0x4bc>)
 8003464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346a:	f7fe f8db 	bl	8001624 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003472:	f7fe f8d7 	bl	8001624 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e183      	b.n	800378c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003484:	4b6c      	ldr	r3, [pc, #432]	@ (8003638 <HAL_RCC_OscConfig+0x4bc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d108      	bne.n	80034aa <HAL_RCC_OscConfig+0x32e>
 8003498:	4b66      	ldr	r3, [pc, #408]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 800349a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800349e:	4a65      	ldr	r2, [pc, #404]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034a8:	e024      	b.n	80034f4 <HAL_RCC_OscConfig+0x378>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b05      	cmp	r3, #5
 80034b0:	d110      	bne.n	80034d4 <HAL_RCC_OscConfig+0x358>
 80034b2:	4b60      	ldr	r3, [pc, #384]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 80034b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b8:	4a5e      	ldr	r2, [pc, #376]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 80034ba:	f043 0304 	orr.w	r3, r3, #4
 80034be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 80034c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c8:	4a5a      	ldr	r2, [pc, #360]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034d2:	e00f      	b.n	80034f4 <HAL_RCC_OscConfig+0x378>
 80034d4:	4b57      	ldr	r3, [pc, #348]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 80034d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034da:	4a56      	ldr	r2, [pc, #344]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034e4:	4b53      	ldr	r3, [pc, #332]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ea:	4a52      	ldr	r2, [pc, #328]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 80034ec:	f023 0304 	bic.w	r3, r3, #4
 80034f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d016      	beq.n	800352a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fc:	f7fe f892 	bl	8001624 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003502:	e00a      	b.n	800351a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003504:	f7fe f88e 	bl	8001624 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e138      	b.n	800378c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800351a:	4b46      	ldr	r3, [pc, #280]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0ed      	beq.n	8003504 <HAL_RCC_OscConfig+0x388>
 8003528:	e015      	b.n	8003556 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352a:	f7fe f87b 	bl	8001624 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003530:	e00a      	b.n	8003548 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003532:	f7fe f877 	bl	8001624 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003540:	4293      	cmp	r3, r2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e121      	b.n	800378c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003548:	4b3a      	ldr	r3, [pc, #232]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1ed      	bne.n	8003532 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003556:	7ffb      	ldrb	r3, [r7, #31]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d105      	bne.n	8003568 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355c:	4b35      	ldr	r3, [pc, #212]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 800355e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003560:	4a34      	ldr	r2, [pc, #208]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 8003562:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003566:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b00      	cmp	r3, #0
 8003572:	d03c      	beq.n	80035ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01c      	beq.n	80035b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800357c:	4b2d      	ldr	r3, [pc, #180]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 800357e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003582:	4a2c      	ldr	r2, [pc, #176]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358c:	f7fe f84a 	bl	8001624 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003594:	f7fe f846 	bl	8001624 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e0f2      	b.n	800378c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035a6:	4b23      	ldr	r3, [pc, #140]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 80035a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0ef      	beq.n	8003594 <HAL_RCC_OscConfig+0x418>
 80035b4:	e01b      	b.n	80035ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 80035b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 80035be:	f023 0301 	bic.w	r3, r3, #1
 80035c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c6:	f7fe f82d 	bl	8001624 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035ce:	f7fe f829 	bl	8001624 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e0d5      	b.n	800378c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035e0:	4b14      	ldr	r3, [pc, #80]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 80035e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1ef      	bne.n	80035ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80c9 	beq.w	800378a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b0c      	cmp	r3, #12
 8003602:	f000 8083 	beq.w	800370c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d15e      	bne.n	80036cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360e:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a08      	ldr	r2, [pc, #32]	@ (8003634 <HAL_RCC_OscConfig+0x4b8>)
 8003614:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361a:	f7fe f803 	bl	8001624 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003620:	e00c      	b.n	800363c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003622:	f7fd ffff 	bl	8001624 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d905      	bls.n	800363c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e0ab      	b.n	800378c <HAL_RCC_OscConfig+0x610>
 8003634:	40021000 	.word	0x40021000
 8003638:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800363c:	4b55      	ldr	r3, [pc, #340]	@ (8003794 <HAL_RCC_OscConfig+0x618>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1ec      	bne.n	8003622 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003648:	4b52      	ldr	r3, [pc, #328]	@ (8003794 <HAL_RCC_OscConfig+0x618>)
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	4b52      	ldr	r3, [pc, #328]	@ (8003798 <HAL_RCC_OscConfig+0x61c>)
 800364e:	4013      	ands	r3, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6a11      	ldr	r1, [r2, #32]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003658:	3a01      	subs	r2, #1
 800365a:	0112      	lsls	r2, r2, #4
 800365c:	4311      	orrs	r1, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003662:	0212      	lsls	r2, r2, #8
 8003664:	4311      	orrs	r1, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800366a:	0852      	lsrs	r2, r2, #1
 800366c:	3a01      	subs	r2, #1
 800366e:	0552      	lsls	r2, r2, #21
 8003670:	4311      	orrs	r1, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003676:	0852      	lsrs	r2, r2, #1
 8003678:	3a01      	subs	r2, #1
 800367a:	0652      	lsls	r2, r2, #25
 800367c:	4311      	orrs	r1, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003682:	06d2      	lsls	r2, r2, #27
 8003684:	430a      	orrs	r2, r1
 8003686:	4943      	ldr	r1, [pc, #268]	@ (8003794 <HAL_RCC_OscConfig+0x618>)
 8003688:	4313      	orrs	r3, r2
 800368a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800368c:	4b41      	ldr	r3, [pc, #260]	@ (8003794 <HAL_RCC_OscConfig+0x618>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a40      	ldr	r2, [pc, #256]	@ (8003794 <HAL_RCC_OscConfig+0x618>)
 8003692:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003696:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003698:	4b3e      	ldr	r3, [pc, #248]	@ (8003794 <HAL_RCC_OscConfig+0x618>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4a3d      	ldr	r2, [pc, #244]	@ (8003794 <HAL_RCC_OscConfig+0x618>)
 800369e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fd ffbe 	bl	8001624 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fd ffba 	bl	8001624 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e066      	b.n	800378c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036be:	4b35      	ldr	r3, [pc, #212]	@ (8003794 <HAL_RCC_OscConfig+0x618>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0x530>
 80036ca:	e05e      	b.n	800378a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036cc:	4b31      	ldr	r3, [pc, #196]	@ (8003794 <HAL_RCC_OscConfig+0x618>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a30      	ldr	r2, [pc, #192]	@ (8003794 <HAL_RCC_OscConfig+0x618>)
 80036d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7fd ffa4 	bl	8001624 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fd ffa0 	bl	8001624 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e04c      	b.n	800378c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f2:	4b28      	ldr	r3, [pc, #160]	@ (8003794 <HAL_RCC_OscConfig+0x618>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80036fe:	4b25      	ldr	r3, [pc, #148]	@ (8003794 <HAL_RCC_OscConfig+0x618>)
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	4924      	ldr	r1, [pc, #144]	@ (8003794 <HAL_RCC_OscConfig+0x618>)
 8003704:	4b25      	ldr	r3, [pc, #148]	@ (800379c <HAL_RCC_OscConfig+0x620>)
 8003706:	4013      	ands	r3, r2
 8003708:	60cb      	str	r3, [r1, #12]
 800370a:	e03e      	b.n	800378a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e039      	b.n	800378c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003718:	4b1e      	ldr	r3, [pc, #120]	@ (8003794 <HAL_RCC_OscConfig+0x618>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f003 0203 	and.w	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	429a      	cmp	r2, r3
 800372a:	d12c      	bne.n	8003786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	3b01      	subs	r3, #1
 8003738:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373a:	429a      	cmp	r2, r3
 800373c:	d123      	bne.n	8003786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003748:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800374a:	429a      	cmp	r2, r3
 800374c:	d11b      	bne.n	8003786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003758:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d113      	bne.n	8003786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003768:	085b      	lsrs	r3, r3, #1
 800376a:	3b01      	subs	r3, #1
 800376c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800376e:	429a      	cmp	r2, r3
 8003770:	d109      	bne.n	8003786 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800377c:	085b      	lsrs	r3, r3, #1
 800377e:	3b01      	subs	r3, #1
 8003780:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003782:	429a      	cmp	r2, r3
 8003784:	d001      	beq.n	800378a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	019f800c 	.word	0x019f800c
 800379c:	feeefffc 	.word	0xfeeefffc

080037a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e11e      	b.n	80039f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037b8:	4b91      	ldr	r3, [pc, #580]	@ (8003a00 <HAL_RCC_ClockConfig+0x260>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d910      	bls.n	80037e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b8e      	ldr	r3, [pc, #568]	@ (8003a00 <HAL_RCC_ClockConfig+0x260>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f023 020f 	bic.w	r2, r3, #15
 80037ce:	498c      	ldr	r1, [pc, #560]	@ (8003a00 <HAL_RCC_ClockConfig+0x260>)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b8a      	ldr	r3, [pc, #552]	@ (8003a00 <HAL_RCC_ClockConfig+0x260>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e106      	b.n	80039f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d073      	beq.n	80038dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d129      	bne.n	8003850 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fc:	4b81      	ldr	r3, [pc, #516]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0f4      	b.n	80039f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800380c:	f000 f99c 	bl	8003b48 <RCC_GetSysClockFreqFromPLLSource>
 8003810:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4a7c      	ldr	r2, [pc, #496]	@ (8003a08 <HAL_RCC_ClockConfig+0x268>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d93f      	bls.n	800389a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800381a:	4b7a      	ldr	r3, [pc, #488]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800382e:	2b00      	cmp	r3, #0
 8003830:	d033      	beq.n	800389a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003836:	2b00      	cmp	r3, #0
 8003838:	d12f      	bne.n	800389a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800383a:	4b72      	ldr	r3, [pc, #456]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003842:	4a70      	ldr	r2, [pc, #448]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 8003844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003848:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800384a:	2380      	movs	r3, #128	@ 0x80
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	e024      	b.n	800389a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d107      	bne.n	8003868 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003858:	4b6a      	ldr	r3, [pc, #424]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d109      	bne.n	8003878 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0c6      	b.n	80039f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003868:	4b66      	ldr	r3, [pc, #408]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0be      	b.n	80039f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003878:	f000 f8ce 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 800387c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	4a61      	ldr	r2, [pc, #388]	@ (8003a08 <HAL_RCC_ClockConfig+0x268>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d909      	bls.n	800389a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003886:	4b5f      	ldr	r3, [pc, #380]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800388e:	4a5d      	ldr	r2, [pc, #372]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 8003890:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003894:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003896:	2380      	movs	r3, #128	@ 0x80
 8003898:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800389a:	4b5a      	ldr	r3, [pc, #360]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f023 0203 	bic.w	r2, r3, #3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	4957      	ldr	r1, [pc, #348]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ac:	f7fd feba 	bl	8001624 <HAL_GetTick>
 80038b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b2:	e00a      	b.n	80038ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b4:	f7fd feb6 	bl	8001624 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e095      	b.n	80039f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	4b4e      	ldr	r3, [pc, #312]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 020c 	and.w	r2, r3, #12
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	429a      	cmp	r2, r3
 80038da:	d1eb      	bne.n	80038b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d023      	beq.n	8003930 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f4:	4b43      	ldr	r3, [pc, #268]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4a42      	ldr	r2, [pc, #264]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 80038fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800390c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003914:	4a3b      	ldr	r2, [pc, #236]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 8003916:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800391a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800391c:	4b39      	ldr	r3, [pc, #228]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	4936      	ldr	r1, [pc, #216]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
 800392e:	e008      	b.n	8003942 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b80      	cmp	r3, #128	@ 0x80
 8003934:	d105      	bne.n	8003942 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003936:	4b33      	ldr	r3, [pc, #204]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	4a32      	ldr	r2, [pc, #200]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 800393c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003940:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003942:	4b2f      	ldr	r3, [pc, #188]	@ (8003a00 <HAL_RCC_ClockConfig+0x260>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d21d      	bcs.n	800398c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003950:	4b2b      	ldr	r3, [pc, #172]	@ (8003a00 <HAL_RCC_ClockConfig+0x260>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f023 020f 	bic.w	r2, r3, #15
 8003958:	4929      	ldr	r1, [pc, #164]	@ (8003a00 <HAL_RCC_ClockConfig+0x260>)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	4313      	orrs	r3, r2
 800395e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003960:	f7fd fe60 	bl	8001624 <HAL_GetTick>
 8003964:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003966:	e00a      	b.n	800397e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003968:	f7fd fe5c 	bl	8001624 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e03b      	b.n	80039f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397e:	4b20      	ldr	r3, [pc, #128]	@ (8003a00 <HAL_RCC_ClockConfig+0x260>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d1ed      	bne.n	8003968 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003998:	4b1a      	ldr	r3, [pc, #104]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4917      	ldr	r1, [pc, #92]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d009      	beq.n	80039ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b6:	4b13      	ldr	r3, [pc, #76]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	490f      	ldr	r1, [pc, #60]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039ca:	f000 f825 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 80039ce:	4602      	mov	r2, r0
 80039d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a04 <HAL_RCC_ClockConfig+0x264>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	091b      	lsrs	r3, r3, #4
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	490c      	ldr	r1, [pc, #48]	@ (8003a0c <HAL_RCC_ClockConfig+0x26c>)
 80039dc:	5ccb      	ldrb	r3, [r1, r3]
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	fa22 f303 	lsr.w	r3, r2, r3
 80039e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003a10 <HAL_RCC_ClockConfig+0x270>)
 80039e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <HAL_RCC_ClockConfig+0x274>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fd fdcc 	bl	800158c <HAL_InitTick>
 80039f4:	4603      	mov	r3, r0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40022000 	.word	0x40022000
 8003a04:	40021000 	.word	0x40021000
 8003a08:	04c4b400 	.word	0x04c4b400
 8003a0c:	0800667c 	.word	0x0800667c
 8003a10:	20000000 	.word	0x20000000
 8003a14:	20000004 	.word	0x20000004

08003a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d102      	bne.n	8003a30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	e047      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003a30:	4b27      	ldr	r3, [pc, #156]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 030c 	and.w	r3, r3, #12
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d102      	bne.n	8003a42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a3c:	4b25      	ldr	r3, [pc, #148]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	e03e      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003a42:	4b23      	ldr	r3, [pc, #140]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
 8003a4a:	2b0c      	cmp	r3, #12
 8003a4c:	d136      	bne.n	8003abc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a4e:	4b20      	ldr	r3, [pc, #128]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a58:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	3301      	adds	r3, #1
 8003a64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d10c      	bne.n	8003a86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a6c:	4a19      	ldr	r2, [pc, #100]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a74:	4a16      	ldr	r2, [pc, #88]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a76:	68d2      	ldr	r2, [r2, #12]
 8003a78:	0a12      	lsrs	r2, r2, #8
 8003a7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	617b      	str	r3, [r7, #20]
      break;
 8003a84:	e00c      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a86:	4a13      	ldr	r2, [pc, #76]	@ (8003ad4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	4a10      	ldr	r2, [pc, #64]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a90:	68d2      	ldr	r2, [r2, #12]
 8003a92:	0a12      	lsrs	r2, r2, #8
 8003a94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a98:	fb02 f303 	mul.w	r3, r2, r3
 8003a9c:	617b      	str	r3, [r7, #20]
      break;
 8003a9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	0e5b      	lsrs	r3, r3, #25
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	e001      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ac0:	693b      	ldr	r3, [r7, #16]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	00f42400 	.word	0x00f42400

08003ad8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003adc:	4b03      	ldr	r3, [pc, #12]	@ (8003aec <HAL_RCC_GetHCLKFreq+0x14>)
 8003ade:	681b      	ldr	r3, [r3, #0]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20000000 	.word	0x20000000

08003af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003af4:	f7ff fff0 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	4b06      	ldr	r3, [pc, #24]	@ (8003b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	4904      	ldr	r1, [pc, #16]	@ (8003b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b06:	5ccb      	ldrb	r3, [r1, r3]
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40021000 	.word	0x40021000
 8003b18:	0800668c 	.word	0x0800668c

08003b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b20:	f7ff ffda 	bl	8003ad8 <HAL_RCC_GetHCLKFreq>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4b06      	ldr	r3, [pc, #24]	@ (8003b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	0adb      	lsrs	r3, r3, #11
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	4904      	ldr	r1, [pc, #16]	@ (8003b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b32:	5ccb      	ldrb	r3, [r1, r3]
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	0800668c 	.word	0x0800668c

08003b48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b58:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	091b      	lsrs	r3, r3, #4
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	3301      	adds	r3, #1
 8003b64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d10c      	bne.n	8003b86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b6c:	4a17      	ldr	r2, [pc, #92]	@ (8003bcc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b74:	4a14      	ldr	r2, [pc, #80]	@ (8003bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b76:	68d2      	ldr	r2, [r2, #12]
 8003b78:	0a12      	lsrs	r2, r2, #8
 8003b7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b7e:	fb02 f303 	mul.w	r3, r2, r3
 8003b82:	617b      	str	r3, [r7, #20]
    break;
 8003b84:	e00c      	b.n	8003ba0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003b86:	4a11      	ldr	r2, [pc, #68]	@ (8003bcc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	4a0e      	ldr	r2, [pc, #56]	@ (8003bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003b90:	68d2      	ldr	r2, [r2, #12]
 8003b92:	0a12      	lsrs	r2, r2, #8
 8003b94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003b98:	fb02 f303 	mul.w	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]
    break;
 8003b9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ba0:	4b09      	ldr	r3, [pc, #36]	@ (8003bc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	0e5b      	lsrs	r3, r3, #25
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	3301      	adds	r3, #1
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003bba:	687b      	ldr	r3, [r7, #4]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	371c      	adds	r7, #28
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	00f42400 	.word	0x00f42400

08003bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bd8:	2300      	movs	r3, #0
 8003bda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bdc:	2300      	movs	r3, #0
 8003bde:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8098 	beq.w	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf2:	4b43      	ldr	r3, [pc, #268]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10d      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfe:	4b40      	ldr	r3, [pc, #256]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c02:	4a3f      	ldr	r2, [pc, #252]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c16:	2301      	movs	r3, #1
 8003c18:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a39      	ldr	r2, [pc, #228]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c26:	f7fd fcfd 	bl	8001624 <HAL_GetTick>
 8003c2a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c2c:	e009      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2e:	f7fd fcf9 	bl	8001624 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d902      	bls.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	74fb      	strb	r3, [r7, #19]
        break;
 8003c40:	e005      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c42:	4b30      	ldr	r3, [pc, #192]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0ef      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003c4e:	7cfb      	ldrb	r3, [r7, #19]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d159      	bne.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c54:	4b2a      	ldr	r3, [pc, #168]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d01e      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d019      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c70:	4b23      	ldr	r3, [pc, #140]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c7c:	4b20      	ldr	r3, [pc, #128]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c82:	4a1f      	ldr	r2, [pc, #124]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c92:	4a1b      	ldr	r2, [pc, #108]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c9c:	4a18      	ldr	r2, [pc, #96]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d016      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cae:	f7fd fcb9 	bl	8001624 <HAL_GetTick>
 8003cb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb4:	e00b      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb6:	f7fd fcb5 	bl	8001624 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d902      	bls.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	74fb      	strb	r3, [r7, #19]
            break;
 8003ccc:	e006      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cce:	4b0c      	ldr	r3, [pc, #48]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0ec      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10b      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce2:	4b07      	ldr	r3, [pc, #28]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf0:	4903      	ldr	r1, [pc, #12]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003cf8:	e008      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cfa:	7cfb      	ldrb	r3, [r7, #19]
 8003cfc:	74bb      	strb	r3, [r7, #18]
 8003cfe:	e005      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003d00:	40021000 	.word	0x40021000
 8003d04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d08:	7cfb      	ldrb	r3, [r7, #19]
 8003d0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d0c:	7c7b      	ldrb	r3, [r7, #17]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d105      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d12:	4ba7      	ldr	r3, [pc, #668]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d16:	4aa6      	ldr	r2, [pc, #664]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d1c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d2a:	4ba1      	ldr	r3, [pc, #644]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d30:	f023 0203 	bic.w	r2, r3, #3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	499d      	ldr	r1, [pc, #628]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00a      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d4c:	4b98      	ldr	r3, [pc, #608]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d52:	f023 020c 	bic.w	r2, r3, #12
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	4995      	ldr	r1, [pc, #596]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d6e:	4b90      	ldr	r3, [pc, #576]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d74:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	498c      	ldr	r1, [pc, #560]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d90:	4b87      	ldr	r3, [pc, #540]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	4984      	ldr	r1, [pc, #528]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0310 	and.w	r3, r3, #16
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003db2:	4b7f      	ldr	r3, [pc, #508]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	497b      	ldr	r1, [pc, #492]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dd4:	4b76      	ldr	r3, [pc, #472]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dda:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	4973      	ldr	r1, [pc, #460]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003df6:	4b6e      	ldr	r3, [pc, #440]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dfc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	496a      	ldr	r1, [pc, #424]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e18:	4b65      	ldr	r3, [pc, #404]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	4962      	ldr	r1, [pc, #392]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	4959      	ldr	r1, [pc, #356]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e5c:	4b54      	ldr	r3, [pc, #336]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e62:	f023 0203 	bic.w	r2, r3, #3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e6a:	4951      	ldr	r1, [pc, #324]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e7e:	4b4c      	ldr	r3, [pc, #304]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e84:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8c:	4948      	ldr	r1, [pc, #288]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d015      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ea0:	4b43      	ldr	r3, [pc, #268]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eae:	4940      	ldr	r1, [pc, #256]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ebe:	d105      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a3a      	ldr	r2, [pc, #232]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eca:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d015      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ed8:	4b35      	ldr	r3, [pc, #212]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ede:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ee6:	4932      	ldr	r1, [pc, #200]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ef6:	d105      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4a2c      	ldr	r2, [pc, #176]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003efe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f02:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d015      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f10:	4b27      	ldr	r3, [pc, #156]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f16:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1e:	4924      	ldr	r1, [pc, #144]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f2e:	d105      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f30:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f3a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d015      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f48:	4b19      	ldr	r3, [pc, #100]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f56:	4916      	ldr	r1, [pc, #88]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f66:	d105      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f68:	4b11      	ldr	r3, [pc, #68]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4a10      	ldr	r2, [pc, #64]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f72:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d019      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f80:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8e:	4908      	ldr	r1, [pc, #32]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f9e:	d109      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fa0:	4b03      	ldr	r3, [pc, #12]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4a02      	ldr	r2, [pc, #8]	@ (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003faa:	60d3      	str	r3, [r2, #12]
 8003fac:	e002      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d015      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003fc0:	4b29      	ldr	r3, [pc, #164]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fce:	4926      	ldr	r1, [pc, #152]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fde:	d105      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003fe0:	4b21      	ldr	r3, [pc, #132]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	4a20      	ldr	r2, [pc, #128]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d015      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004006:	4918      	ldr	r1, [pc, #96]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004016:	d105      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004018:	4b13      	ldr	r3, [pc, #76]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4a12      	ldr	r2, [pc, #72]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800401e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004022:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d015      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004030:	4b0d      	ldr	r3, [pc, #52]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004032:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004036:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403e:	490a      	ldr	r1, [pc, #40]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800404a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800404e:	d105      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004050:	4b05      	ldr	r3, [pc, #20]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a04      	ldr	r2, [pc, #16]	@ (8004068 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004056:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800405a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800405c:	7cbb      	ldrb	r3, [r7, #18]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000

0800406c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e049      	b.n	8004112 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fd f840 	bl	8001118 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f000 fd96 	bl	8004bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b082      	sub	sp, #8
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e049      	b.n	80041c0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f841 	bl	80041c8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2202      	movs	r2, #2
 800414a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3304      	adds	r3, #4
 8004156:	4619      	mov	r1, r3
 8004158:	4610      	mov	r0, r2
 800415a:	f000 fd3f 	bl	8004bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e049      	b.n	8004282 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f841 	bl	800428a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	4619      	mov	r1, r3
 800421a:	4610      	mov	r0, r2
 800421c:	f000 fcde 	bl	8004bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}

0800428a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
	...

080042a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d109      	bne.n	80042c4 <HAL_TIM_PWM_Start+0x24>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	bf14      	ite	ne
 80042bc:	2301      	movne	r3, #1
 80042be:	2300      	moveq	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	e03c      	b.n	800433e <HAL_TIM_PWM_Start+0x9e>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d109      	bne.n	80042de <HAL_TIM_PWM_Start+0x3e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	bf14      	ite	ne
 80042d6:	2301      	movne	r3, #1
 80042d8:	2300      	moveq	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	e02f      	b.n	800433e <HAL_TIM_PWM_Start+0x9e>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d109      	bne.n	80042f8 <HAL_TIM_PWM_Start+0x58>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	bf14      	ite	ne
 80042f0:	2301      	movne	r3, #1
 80042f2:	2300      	moveq	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	e022      	b.n	800433e <HAL_TIM_PWM_Start+0x9e>
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	2b0c      	cmp	r3, #12
 80042fc:	d109      	bne.n	8004312 <HAL_TIM_PWM_Start+0x72>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b01      	cmp	r3, #1
 8004308:	bf14      	ite	ne
 800430a:	2301      	movne	r3, #1
 800430c:	2300      	moveq	r3, #0
 800430e:	b2db      	uxtb	r3, r3
 8004310:	e015      	b.n	800433e <HAL_TIM_PWM_Start+0x9e>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b10      	cmp	r3, #16
 8004316:	d109      	bne.n	800432c <HAL_TIM_PWM_Start+0x8c>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b01      	cmp	r3, #1
 8004322:	bf14      	ite	ne
 8004324:	2301      	movne	r3, #1
 8004326:	2300      	moveq	r3, #0
 8004328:	b2db      	uxtb	r3, r3
 800432a:	e008      	b.n	800433e <HAL_TIM_PWM_Start+0x9e>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	bf14      	ite	ne
 8004338:	2301      	movne	r3, #1
 800433a:	2300      	moveq	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e0a6      	b.n	8004494 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d104      	bne.n	8004356 <HAL_TIM_PWM_Start+0xb6>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004354:	e023      	b.n	800439e <HAL_TIM_PWM_Start+0xfe>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b04      	cmp	r3, #4
 800435a:	d104      	bne.n	8004366 <HAL_TIM_PWM_Start+0xc6>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004364:	e01b      	b.n	800439e <HAL_TIM_PWM_Start+0xfe>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d104      	bne.n	8004376 <HAL_TIM_PWM_Start+0xd6>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004374:	e013      	b.n	800439e <HAL_TIM_PWM_Start+0xfe>
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	2b0c      	cmp	r3, #12
 800437a:	d104      	bne.n	8004386 <HAL_TIM_PWM_Start+0xe6>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004384:	e00b      	b.n	800439e <HAL_TIM_PWM_Start+0xfe>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b10      	cmp	r3, #16
 800438a:	d104      	bne.n	8004396 <HAL_TIM_PWM_Start+0xf6>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004394:	e003      	b.n	800439e <HAL_TIM_PWM_Start+0xfe>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2201      	movs	r2, #1
 80043a4:	6839      	ldr	r1, [r7, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f001 f972 	bl	8005690 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a3a      	ldr	r2, [pc, #232]	@ (800449c <HAL_TIM_PWM_Start+0x1fc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d018      	beq.n	80043e8 <HAL_TIM_PWM_Start+0x148>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a39      	ldr	r2, [pc, #228]	@ (80044a0 <HAL_TIM_PWM_Start+0x200>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d013      	beq.n	80043e8 <HAL_TIM_PWM_Start+0x148>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a37      	ldr	r2, [pc, #220]	@ (80044a4 <HAL_TIM_PWM_Start+0x204>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00e      	beq.n	80043e8 <HAL_TIM_PWM_Start+0x148>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a36      	ldr	r2, [pc, #216]	@ (80044a8 <HAL_TIM_PWM_Start+0x208>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d009      	beq.n	80043e8 <HAL_TIM_PWM_Start+0x148>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a34      	ldr	r2, [pc, #208]	@ (80044ac <HAL_TIM_PWM_Start+0x20c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d004      	beq.n	80043e8 <HAL_TIM_PWM_Start+0x148>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a33      	ldr	r2, [pc, #204]	@ (80044b0 <HAL_TIM_PWM_Start+0x210>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d101      	bne.n	80043ec <HAL_TIM_PWM_Start+0x14c>
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <HAL_TIM_PWM_Start+0x14e>
 80043ec:	2300      	movs	r3, #0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d007      	beq.n	8004402 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004400:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a25      	ldr	r2, [pc, #148]	@ (800449c <HAL_TIM_PWM_Start+0x1fc>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d022      	beq.n	8004452 <HAL_TIM_PWM_Start+0x1b2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004414:	d01d      	beq.n	8004452 <HAL_TIM_PWM_Start+0x1b2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a26      	ldr	r2, [pc, #152]	@ (80044b4 <HAL_TIM_PWM_Start+0x214>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d018      	beq.n	8004452 <HAL_TIM_PWM_Start+0x1b2>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a24      	ldr	r2, [pc, #144]	@ (80044b8 <HAL_TIM_PWM_Start+0x218>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_TIM_PWM_Start+0x1b2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a23      	ldr	r2, [pc, #140]	@ (80044bc <HAL_TIM_PWM_Start+0x21c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00e      	beq.n	8004452 <HAL_TIM_PWM_Start+0x1b2>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a19      	ldr	r2, [pc, #100]	@ (80044a0 <HAL_TIM_PWM_Start+0x200>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d009      	beq.n	8004452 <HAL_TIM_PWM_Start+0x1b2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a18      	ldr	r2, [pc, #96]	@ (80044a4 <HAL_TIM_PWM_Start+0x204>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d004      	beq.n	8004452 <HAL_TIM_PWM_Start+0x1b2>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a18      	ldr	r2, [pc, #96]	@ (80044b0 <HAL_TIM_PWM_Start+0x210>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d115      	bne.n	800447e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	4b19      	ldr	r3, [pc, #100]	@ (80044c0 <HAL_TIM_PWM_Start+0x220>)
 800445a:	4013      	ands	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b06      	cmp	r3, #6
 8004462:	d015      	beq.n	8004490 <HAL_TIM_PWM_Start+0x1f0>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800446a:	d011      	beq.n	8004490 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447c:	e008      	b.n	8004490 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	e000      	b.n	8004492 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004490:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40012c00 	.word	0x40012c00
 80044a0:	40013400 	.word	0x40013400
 80044a4:	40014000 	.word	0x40014000
 80044a8:	40014400 	.word	0x40014400
 80044ac:	40014800 	.word	0x40014800
 80044b0:	40015000 	.word	0x40015000
 80044b4:	40000400 	.word	0x40000400
 80044b8:	40000800 	.word	0x40000800
 80044bc:	40000c00 	.word	0x40000c00
 80044c0:	00010007 	.word	0x00010007

080044c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d101      	bne.n	80044d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e097      	b.n	8004608 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d106      	bne.n	80044f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7fc fdcf 	bl	8001090 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2202      	movs	r2, #2
 80044f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004508:	f023 0307 	bic.w	r3, r3, #7
 800450c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3304      	adds	r3, #4
 8004516:	4619      	mov	r1, r3
 8004518:	4610      	mov	r0, r2
 800451a:	f000 fb5f 	bl	8004bdc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004546:	f023 0303 	bic.w	r3, r3, #3
 800454a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	021b      	lsls	r3, r3, #8
 8004556:	4313      	orrs	r3, r2
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004564:	f023 030c 	bic.w	r3, r3, #12
 8004568:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004570:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004574:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	4313      	orrs	r3, r2
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	011a      	lsls	r2, r3, #4
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	031b      	lsls	r3, r3, #12
 8004594:	4313      	orrs	r3, r2
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80045a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80045aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	4313      	orrs	r3, r2
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_TIM_OC_ConfigChannel+0x1e>
 800462a:	2302      	movs	r3, #2
 800462c:	e066      	b.n	80046fc <HAL_TIM_OC_ConfigChannel+0xec>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b14      	cmp	r3, #20
 800463a:	d857      	bhi.n	80046ec <HAL_TIM_OC_ConfigChannel+0xdc>
 800463c:	a201      	add	r2, pc, #4	@ (adr r2, 8004644 <HAL_TIM_OC_ConfigChannel+0x34>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	08004699 	.word	0x08004699
 8004648:	080046ed 	.word	0x080046ed
 800464c:	080046ed 	.word	0x080046ed
 8004650:	080046ed 	.word	0x080046ed
 8004654:	080046a7 	.word	0x080046a7
 8004658:	080046ed 	.word	0x080046ed
 800465c:	080046ed 	.word	0x080046ed
 8004660:	080046ed 	.word	0x080046ed
 8004664:	080046b5 	.word	0x080046b5
 8004668:	080046ed 	.word	0x080046ed
 800466c:	080046ed 	.word	0x080046ed
 8004670:	080046ed 	.word	0x080046ed
 8004674:	080046c3 	.word	0x080046c3
 8004678:	080046ed 	.word	0x080046ed
 800467c:	080046ed 	.word	0x080046ed
 8004680:	080046ed 	.word	0x080046ed
 8004684:	080046d1 	.word	0x080046d1
 8004688:	080046ed 	.word	0x080046ed
 800468c:	080046ed 	.word	0x080046ed
 8004690:	080046ed 	.word	0x080046ed
 8004694:	080046df 	.word	0x080046df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 fb50 	bl	8004d44 <TIM_OC1_SetConfig>
      break;
 80046a4:	e025      	b.n	80046f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68b9      	ldr	r1, [r7, #8]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fbe3 	bl	8004e78 <TIM_OC2_SetConfig>
      break;
 80046b2:	e01e      	b.n	80046f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68b9      	ldr	r1, [r7, #8]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fc70 	bl	8004fa0 <TIM_OC3_SetConfig>
      break;
 80046c0:	e017      	b.n	80046f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68b9      	ldr	r1, [r7, #8]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 fcfb 	bl	80050c4 <TIM_OC4_SetConfig>
      break;
 80046ce:	e010      	b.n	80046f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fd88 	bl	80051ec <TIM_OC5_SetConfig>
      break;
 80046dc:	e009      	b.n	80046f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fdeb 	bl	80052c0 <TIM_OC6_SetConfig>
      break;
 80046ea:	e002      	b.n	80046f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	75fb      	strb	r3, [r7, #23]
      break;
 80046f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800471e:	2302      	movs	r3, #2
 8004720:	e0ff      	b.n	8004922 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b14      	cmp	r3, #20
 800472e:	f200 80f0 	bhi.w	8004912 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004732:	a201      	add	r2, pc, #4	@ (adr r2, 8004738 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	0800478d 	.word	0x0800478d
 800473c:	08004913 	.word	0x08004913
 8004740:	08004913 	.word	0x08004913
 8004744:	08004913 	.word	0x08004913
 8004748:	080047cd 	.word	0x080047cd
 800474c:	08004913 	.word	0x08004913
 8004750:	08004913 	.word	0x08004913
 8004754:	08004913 	.word	0x08004913
 8004758:	0800480f 	.word	0x0800480f
 800475c:	08004913 	.word	0x08004913
 8004760:	08004913 	.word	0x08004913
 8004764:	08004913 	.word	0x08004913
 8004768:	0800484f 	.word	0x0800484f
 800476c:	08004913 	.word	0x08004913
 8004770:	08004913 	.word	0x08004913
 8004774:	08004913 	.word	0x08004913
 8004778:	08004891 	.word	0x08004891
 800477c:	08004913 	.word	0x08004913
 8004780:	08004913 	.word	0x08004913
 8004784:	08004913 	.word	0x08004913
 8004788:	080048d1 	.word	0x080048d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fad6 	bl	8004d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0208 	orr.w	r2, r2, #8
 80047a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0204 	bic.w	r2, r2, #4
 80047b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6999      	ldr	r1, [r3, #24]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	691a      	ldr	r2, [r3, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	619a      	str	r2, [r3, #24]
      break;
 80047ca:	e0a5      	b.n	8004918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fb50 	bl	8004e78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699a      	ldr	r2, [r3, #24]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6999      	ldr	r1, [r3, #24]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	021a      	lsls	r2, r3, #8
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	619a      	str	r2, [r3, #24]
      break;
 800480c:	e084      	b.n	8004918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fbc3 	bl	8004fa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69da      	ldr	r2, [r3, #28]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0208 	orr.w	r2, r2, #8
 8004828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69da      	ldr	r2, [r3, #28]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0204 	bic.w	r2, r2, #4
 8004838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69d9      	ldr	r1, [r3, #28]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	61da      	str	r2, [r3, #28]
      break;
 800484c:	e064      	b.n	8004918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fc35 	bl	80050c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69da      	ldr	r2, [r3, #28]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69da      	ldr	r2, [r3, #28]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69d9      	ldr	r1, [r3, #28]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	021a      	lsls	r2, r3, #8
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	61da      	str	r2, [r3, #28]
      break;
 800488e:	e043      	b.n	8004918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68b9      	ldr	r1, [r7, #8]
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fca8 	bl	80051ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0208 	orr.w	r2, r2, #8
 80048aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0204 	bic.w	r2, r2, #4
 80048ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80048ce:	e023      	b.n	8004918 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68b9      	ldr	r1, [r7, #8]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fcf2 	bl	80052c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	021a      	lsls	r2, r3, #8
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	430a      	orrs	r2, r1
 800490e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004910:	e002      	b.n	8004918 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	75fb      	strb	r3, [r7, #23]
      break;
 8004916:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004920:	7dfb      	ldrb	r3, [r7, #23]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop

0800492c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004940:	2b01      	cmp	r3, #1
 8004942:	d101      	bne.n	8004948 <HAL_TIM_ConfigClockSource+0x1c>
 8004944:	2302      	movs	r3, #2
 8004946:	e0f6      	b.n	8004b36 <HAL_TIM_ConfigClockSource+0x20a>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004966:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800496a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004972:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68ba      	ldr	r2, [r7, #8]
 800497a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a6f      	ldr	r2, [pc, #444]	@ (8004b40 <HAL_TIM_ConfigClockSource+0x214>)
 8004982:	4293      	cmp	r3, r2
 8004984:	f000 80c1 	beq.w	8004b0a <HAL_TIM_ConfigClockSource+0x1de>
 8004988:	4a6d      	ldr	r2, [pc, #436]	@ (8004b40 <HAL_TIM_ConfigClockSource+0x214>)
 800498a:	4293      	cmp	r3, r2
 800498c:	f200 80c6 	bhi.w	8004b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004990:	4a6c      	ldr	r2, [pc, #432]	@ (8004b44 <HAL_TIM_ConfigClockSource+0x218>)
 8004992:	4293      	cmp	r3, r2
 8004994:	f000 80b9 	beq.w	8004b0a <HAL_TIM_ConfigClockSource+0x1de>
 8004998:	4a6a      	ldr	r2, [pc, #424]	@ (8004b44 <HAL_TIM_ConfigClockSource+0x218>)
 800499a:	4293      	cmp	r3, r2
 800499c:	f200 80be 	bhi.w	8004b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80049a0:	4a69      	ldr	r2, [pc, #420]	@ (8004b48 <HAL_TIM_ConfigClockSource+0x21c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	f000 80b1 	beq.w	8004b0a <HAL_TIM_ConfigClockSource+0x1de>
 80049a8:	4a67      	ldr	r2, [pc, #412]	@ (8004b48 <HAL_TIM_ConfigClockSource+0x21c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	f200 80b6 	bhi.w	8004b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80049b0:	4a66      	ldr	r2, [pc, #408]	@ (8004b4c <HAL_TIM_ConfigClockSource+0x220>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	f000 80a9 	beq.w	8004b0a <HAL_TIM_ConfigClockSource+0x1de>
 80049b8:	4a64      	ldr	r2, [pc, #400]	@ (8004b4c <HAL_TIM_ConfigClockSource+0x220>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	f200 80ae 	bhi.w	8004b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80049c0:	4a63      	ldr	r2, [pc, #396]	@ (8004b50 <HAL_TIM_ConfigClockSource+0x224>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	f000 80a1 	beq.w	8004b0a <HAL_TIM_ConfigClockSource+0x1de>
 80049c8:	4a61      	ldr	r2, [pc, #388]	@ (8004b50 <HAL_TIM_ConfigClockSource+0x224>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	f200 80a6 	bhi.w	8004b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80049d0:	4a60      	ldr	r2, [pc, #384]	@ (8004b54 <HAL_TIM_ConfigClockSource+0x228>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	f000 8099 	beq.w	8004b0a <HAL_TIM_ConfigClockSource+0x1de>
 80049d8:	4a5e      	ldr	r2, [pc, #376]	@ (8004b54 <HAL_TIM_ConfigClockSource+0x228>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	f200 809e 	bhi.w	8004b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80049e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80049e4:	f000 8091 	beq.w	8004b0a <HAL_TIM_ConfigClockSource+0x1de>
 80049e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80049ec:	f200 8096 	bhi.w	8004b1c <HAL_TIM_ConfigClockSource+0x1f0>
 80049f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049f4:	f000 8089 	beq.w	8004b0a <HAL_TIM_ConfigClockSource+0x1de>
 80049f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049fc:	f200 808e 	bhi.w	8004b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a04:	d03e      	beq.n	8004a84 <HAL_TIM_ConfigClockSource+0x158>
 8004a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a0a:	f200 8087 	bhi.w	8004b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a12:	f000 8086 	beq.w	8004b22 <HAL_TIM_ConfigClockSource+0x1f6>
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a1a:	d87f      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a1c:	2b70      	cmp	r3, #112	@ 0x70
 8004a1e:	d01a      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x12a>
 8004a20:	2b70      	cmp	r3, #112	@ 0x70
 8004a22:	d87b      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a24:	2b60      	cmp	r3, #96	@ 0x60
 8004a26:	d050      	beq.n	8004aca <HAL_TIM_ConfigClockSource+0x19e>
 8004a28:	2b60      	cmp	r3, #96	@ 0x60
 8004a2a:	d877      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a2c:	2b50      	cmp	r3, #80	@ 0x50
 8004a2e:	d03c      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0x17e>
 8004a30:	2b50      	cmp	r3, #80	@ 0x50
 8004a32:	d873      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a34:	2b40      	cmp	r3, #64	@ 0x40
 8004a36:	d058      	beq.n	8004aea <HAL_TIM_ConfigClockSource+0x1be>
 8004a38:	2b40      	cmp	r3, #64	@ 0x40
 8004a3a:	d86f      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a3c:	2b30      	cmp	r3, #48	@ 0x30
 8004a3e:	d064      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x1de>
 8004a40:	2b30      	cmp	r3, #48	@ 0x30
 8004a42:	d86b      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d060      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x1de>
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d867      	bhi.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f0>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d05c      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x1de>
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d05a      	beq.n	8004b0a <HAL_TIM_ConfigClockSource+0x1de>
 8004a54:	e062      	b.n	8004b1c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a66:	f000 fdf3 	bl	8005650 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	609a      	str	r2, [r3, #8]
      break;
 8004a82:	e04f      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a94:	f000 fddc 	bl	8005650 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689a      	ldr	r2, [r3, #8]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004aa6:	609a      	str	r2, [r3, #8]
      break;
 8004aa8:	e03c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f000 fd4e 	bl	8005558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2150      	movs	r1, #80	@ 0x50
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fda7 	bl	8005616 <TIM_ITRx_SetConfig>
      break;
 8004ac8:	e02c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f000 fd6d 	bl	80055b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2160      	movs	r1, #96	@ 0x60
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fd97 	bl	8005616 <TIM_ITRx_SetConfig>
      break;
 8004ae8:	e01c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004af6:	461a      	mov	r2, r3
 8004af8:	f000 fd2e 	bl	8005558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2140      	movs	r1, #64	@ 0x40
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fd87 	bl	8005616 <TIM_ITRx_SetConfig>
      break;
 8004b08:	e00c      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f000 fd7e 	bl	8005616 <TIM_ITRx_SetConfig>
      break;
 8004b1a:	e003      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b20:	e000      	b.n	8004b24 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	00100070 	.word	0x00100070
 8004b44:	00100060 	.word	0x00100060
 8004b48:	00100050 	.word	0x00100050
 8004b4c:	00100040 	.word	0x00100040
 8004b50:	00100030 	.word	0x00100030
 8004b54:	00100020 	.word	0x00100020

08004b58 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d101      	bne.n	8004b70 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	e031      	b.n	8004bd4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004b80:	6839      	ldr	r1, [r7, #0]
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fc08 	bl	8005398 <TIM_SlaveTimer_SetConfig>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d009      	beq.n	8004ba2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e018      	b.n	8004bd4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bb0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004bc0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a4c      	ldr	r2, [pc, #304]	@ (8004d20 <TIM_Base_SetConfig+0x144>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d017      	beq.n	8004c24 <TIM_Base_SetConfig+0x48>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bfa:	d013      	beq.n	8004c24 <TIM_Base_SetConfig+0x48>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a49      	ldr	r2, [pc, #292]	@ (8004d24 <TIM_Base_SetConfig+0x148>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00f      	beq.n	8004c24 <TIM_Base_SetConfig+0x48>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a48      	ldr	r2, [pc, #288]	@ (8004d28 <TIM_Base_SetConfig+0x14c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00b      	beq.n	8004c24 <TIM_Base_SetConfig+0x48>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a47      	ldr	r2, [pc, #284]	@ (8004d2c <TIM_Base_SetConfig+0x150>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d007      	beq.n	8004c24 <TIM_Base_SetConfig+0x48>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a46      	ldr	r2, [pc, #280]	@ (8004d30 <TIM_Base_SetConfig+0x154>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d003      	beq.n	8004c24 <TIM_Base_SetConfig+0x48>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a45      	ldr	r2, [pc, #276]	@ (8004d34 <TIM_Base_SetConfig+0x158>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d108      	bne.n	8004c36 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a39      	ldr	r2, [pc, #228]	@ (8004d20 <TIM_Base_SetConfig+0x144>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d023      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c44:	d01f      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a36      	ldr	r2, [pc, #216]	@ (8004d24 <TIM_Base_SetConfig+0x148>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d01b      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a35      	ldr	r2, [pc, #212]	@ (8004d28 <TIM_Base_SetConfig+0x14c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d017      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a34      	ldr	r2, [pc, #208]	@ (8004d2c <TIM_Base_SetConfig+0x150>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a33      	ldr	r2, [pc, #204]	@ (8004d30 <TIM_Base_SetConfig+0x154>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00f      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a33      	ldr	r2, [pc, #204]	@ (8004d38 <TIM_Base_SetConfig+0x15c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00b      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a32      	ldr	r2, [pc, #200]	@ (8004d3c <TIM_Base_SetConfig+0x160>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d007      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a31      	ldr	r2, [pc, #196]	@ (8004d40 <TIM_Base_SetConfig+0x164>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d003      	beq.n	8004c86 <TIM_Base_SetConfig+0xaa>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a2c      	ldr	r2, [pc, #176]	@ (8004d34 <TIM_Base_SetConfig+0x158>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d108      	bne.n	8004c98 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a18      	ldr	r2, [pc, #96]	@ (8004d20 <TIM_Base_SetConfig+0x144>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d013      	beq.n	8004cec <TIM_Base_SetConfig+0x110>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a1a      	ldr	r2, [pc, #104]	@ (8004d30 <TIM_Base_SetConfig+0x154>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00f      	beq.n	8004cec <TIM_Base_SetConfig+0x110>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a1a      	ldr	r2, [pc, #104]	@ (8004d38 <TIM_Base_SetConfig+0x15c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00b      	beq.n	8004cec <TIM_Base_SetConfig+0x110>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a19      	ldr	r2, [pc, #100]	@ (8004d3c <TIM_Base_SetConfig+0x160>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d007      	beq.n	8004cec <TIM_Base_SetConfig+0x110>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a18      	ldr	r2, [pc, #96]	@ (8004d40 <TIM_Base_SetConfig+0x164>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <TIM_Base_SetConfig+0x110>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a13      	ldr	r2, [pc, #76]	@ (8004d34 <TIM_Base_SetConfig+0x158>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d103      	bne.n	8004cf4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d105      	bne.n	8004d12 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f023 0201 	bic.w	r2, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	611a      	str	r2, [r3, #16]
  }
}
 8004d12:	bf00      	nop
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40012c00 	.word	0x40012c00
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	40013400 	.word	0x40013400
 8004d34:	40015000 	.word	0x40015000
 8004d38:	40014000 	.word	0x40014000
 8004d3c:	40014400 	.word	0x40014400
 8004d40:	40014800 	.word	0x40014800

08004d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	f023 0201 	bic.w	r2, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0303 	bic.w	r3, r3, #3
 8004d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f023 0302 	bic.w	r3, r3, #2
 8004d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a30      	ldr	r2, [pc, #192]	@ (8004e60 <TIM_OC1_SetConfig+0x11c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d013      	beq.n	8004dcc <TIM_OC1_SetConfig+0x88>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a2f      	ldr	r2, [pc, #188]	@ (8004e64 <TIM_OC1_SetConfig+0x120>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d00f      	beq.n	8004dcc <TIM_OC1_SetConfig+0x88>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a2e      	ldr	r2, [pc, #184]	@ (8004e68 <TIM_OC1_SetConfig+0x124>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <TIM_OC1_SetConfig+0x88>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a2d      	ldr	r2, [pc, #180]	@ (8004e6c <TIM_OC1_SetConfig+0x128>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d007      	beq.n	8004dcc <TIM_OC1_SetConfig+0x88>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8004e70 <TIM_OC1_SetConfig+0x12c>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d003      	beq.n	8004dcc <TIM_OC1_SetConfig+0x88>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a2b      	ldr	r2, [pc, #172]	@ (8004e74 <TIM_OC1_SetConfig+0x130>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d10c      	bne.n	8004de6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f023 0308 	bic.w	r3, r3, #8
 8004dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f023 0304 	bic.w	r3, r3, #4
 8004de4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e60 <TIM_OC1_SetConfig+0x11c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d013      	beq.n	8004e16 <TIM_OC1_SetConfig+0xd2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a1c      	ldr	r2, [pc, #112]	@ (8004e64 <TIM_OC1_SetConfig+0x120>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00f      	beq.n	8004e16 <TIM_OC1_SetConfig+0xd2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a1b      	ldr	r2, [pc, #108]	@ (8004e68 <TIM_OC1_SetConfig+0x124>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00b      	beq.n	8004e16 <TIM_OC1_SetConfig+0xd2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a1a      	ldr	r2, [pc, #104]	@ (8004e6c <TIM_OC1_SetConfig+0x128>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d007      	beq.n	8004e16 <TIM_OC1_SetConfig+0xd2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a19      	ldr	r2, [pc, #100]	@ (8004e70 <TIM_OC1_SetConfig+0x12c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d003      	beq.n	8004e16 <TIM_OC1_SetConfig+0xd2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a18      	ldr	r2, [pc, #96]	@ (8004e74 <TIM_OC1_SetConfig+0x130>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d111      	bne.n	8004e3a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	621a      	str	r2, [r3, #32]
}
 8004e54:	bf00      	nop
 8004e56:	371c      	adds	r7, #28
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	40012c00 	.word	0x40012c00
 8004e64:	40013400 	.word	0x40013400
 8004e68:	40014000 	.word	0x40014000
 8004e6c:	40014400 	.word	0x40014400
 8004e70:	40014800 	.word	0x40014800
 8004e74:	40015000 	.word	0x40015000

08004e78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f023 0210 	bic.w	r2, r3, #16
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f023 0320 	bic.w	r3, r3, #32
 8004ec6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8004f88 <TIM_OC2_SetConfig+0x110>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d007      	beq.n	8004eec <TIM_OC2_SetConfig+0x74>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a2b      	ldr	r2, [pc, #172]	@ (8004f8c <TIM_OC2_SetConfig+0x114>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d003      	beq.n	8004eec <TIM_OC2_SetConfig+0x74>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a2a      	ldr	r2, [pc, #168]	@ (8004f90 <TIM_OC2_SetConfig+0x118>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d10d      	bne.n	8004f08 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f88 <TIM_OC2_SetConfig+0x110>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <TIM_OC2_SetConfig+0xc0>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a1e      	ldr	r2, [pc, #120]	@ (8004f8c <TIM_OC2_SetConfig+0x114>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00f      	beq.n	8004f38 <TIM_OC2_SetConfig+0xc0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8004f94 <TIM_OC2_SetConfig+0x11c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00b      	beq.n	8004f38 <TIM_OC2_SetConfig+0xc0>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a1d      	ldr	r2, [pc, #116]	@ (8004f98 <TIM_OC2_SetConfig+0x120>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d007      	beq.n	8004f38 <TIM_OC2_SetConfig+0xc0>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8004f9c <TIM_OC2_SetConfig+0x124>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d003      	beq.n	8004f38 <TIM_OC2_SetConfig+0xc0>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a17      	ldr	r2, [pc, #92]	@ (8004f90 <TIM_OC2_SetConfig+0x118>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d113      	bne.n	8004f60 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40012c00 	.word	0x40012c00
 8004f8c:	40013400 	.word	0x40013400
 8004f90:	40015000 	.word	0x40015000
 8004f94:	40014000 	.word	0x40014000
 8004f98:	40014400 	.word	0x40014400
 8004f9c:	40014800 	.word	0x40014800

08004fa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0303 	bic.w	r3, r3, #3
 8004fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	021b      	lsls	r3, r3, #8
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2b      	ldr	r2, [pc, #172]	@ (80050ac <TIM_OC3_SetConfig+0x10c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d007      	beq.n	8005012 <TIM_OC3_SetConfig+0x72>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2a      	ldr	r2, [pc, #168]	@ (80050b0 <TIM_OC3_SetConfig+0x110>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d003      	beq.n	8005012 <TIM_OC3_SetConfig+0x72>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a29      	ldr	r2, [pc, #164]	@ (80050b4 <TIM_OC3_SetConfig+0x114>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d10d      	bne.n	800502e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005018:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800502c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a1e      	ldr	r2, [pc, #120]	@ (80050ac <TIM_OC3_SetConfig+0x10c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d013      	beq.n	800505e <TIM_OC3_SetConfig+0xbe>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a1d      	ldr	r2, [pc, #116]	@ (80050b0 <TIM_OC3_SetConfig+0x110>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00f      	beq.n	800505e <TIM_OC3_SetConfig+0xbe>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a1d      	ldr	r2, [pc, #116]	@ (80050b8 <TIM_OC3_SetConfig+0x118>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00b      	beq.n	800505e <TIM_OC3_SetConfig+0xbe>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1c      	ldr	r2, [pc, #112]	@ (80050bc <TIM_OC3_SetConfig+0x11c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d007      	beq.n	800505e <TIM_OC3_SetConfig+0xbe>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1b      	ldr	r2, [pc, #108]	@ (80050c0 <TIM_OC3_SetConfig+0x120>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d003      	beq.n	800505e <TIM_OC3_SetConfig+0xbe>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a16      	ldr	r2, [pc, #88]	@ (80050b4 <TIM_OC3_SetConfig+0x114>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d113      	bne.n	8005086 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800506c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	621a      	str	r2, [r3, #32]
}
 80050a0:	bf00      	nop
 80050a2:	371c      	adds	r7, #28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	40012c00 	.word	0x40012c00
 80050b0:	40013400 	.word	0x40013400
 80050b4:	40015000 	.word	0x40015000
 80050b8:	40014000 	.word	0x40014000
 80050bc:	40014400 	.word	0x40014400
 80050c0:	40014800 	.word	0x40014800

080050c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4313      	orrs	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	031b      	lsls	r3, r3, #12
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a2c      	ldr	r2, [pc, #176]	@ (80051d4 <TIM_OC4_SetConfig+0x110>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <TIM_OC4_SetConfig+0x74>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a2b      	ldr	r2, [pc, #172]	@ (80051d8 <TIM_OC4_SetConfig+0x114>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_OC4_SetConfig+0x74>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a2a      	ldr	r2, [pc, #168]	@ (80051dc <TIM_OC4_SetConfig+0x118>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d10d      	bne.n	8005154 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800513e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	031b      	lsls	r3, r3, #12
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005152:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a1f      	ldr	r2, [pc, #124]	@ (80051d4 <TIM_OC4_SetConfig+0x110>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d013      	beq.n	8005184 <TIM_OC4_SetConfig+0xc0>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a1e      	ldr	r2, [pc, #120]	@ (80051d8 <TIM_OC4_SetConfig+0x114>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00f      	beq.n	8005184 <TIM_OC4_SetConfig+0xc0>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a1e      	ldr	r2, [pc, #120]	@ (80051e0 <TIM_OC4_SetConfig+0x11c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00b      	beq.n	8005184 <TIM_OC4_SetConfig+0xc0>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a1d      	ldr	r2, [pc, #116]	@ (80051e4 <TIM_OC4_SetConfig+0x120>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d007      	beq.n	8005184 <TIM_OC4_SetConfig+0xc0>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a1c      	ldr	r2, [pc, #112]	@ (80051e8 <TIM_OC4_SetConfig+0x124>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d003      	beq.n	8005184 <TIM_OC4_SetConfig+0xc0>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a17      	ldr	r2, [pc, #92]	@ (80051dc <TIM_OC4_SetConfig+0x118>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d113      	bne.n	80051ac <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800518a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005192:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	019b      	lsls	r3, r3, #6
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	019b      	lsls	r3, r3, #6
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	621a      	str	r2, [r3, #32]
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40012c00 	.word	0x40012c00
 80051d8:	40013400 	.word	0x40013400
 80051dc:	40015000 	.word	0x40015000
 80051e0:	40014000 	.word	0x40014000
 80051e4:	40014400 	.word	0x40014400
 80051e8:	40014800 	.word	0x40014800

080051ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800521a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800521e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005230:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	041b      	lsls	r3, r3, #16
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a19      	ldr	r2, [pc, #100]	@ (80052a8 <TIM_OC5_SetConfig+0xbc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <TIM_OC5_SetConfig+0x82>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a18      	ldr	r2, [pc, #96]	@ (80052ac <TIM_OC5_SetConfig+0xc0>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00f      	beq.n	800526e <TIM_OC5_SetConfig+0x82>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a17      	ldr	r2, [pc, #92]	@ (80052b0 <TIM_OC5_SetConfig+0xc4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00b      	beq.n	800526e <TIM_OC5_SetConfig+0x82>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a16      	ldr	r2, [pc, #88]	@ (80052b4 <TIM_OC5_SetConfig+0xc8>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d007      	beq.n	800526e <TIM_OC5_SetConfig+0x82>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a15      	ldr	r2, [pc, #84]	@ (80052b8 <TIM_OC5_SetConfig+0xcc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d003      	beq.n	800526e <TIM_OC5_SetConfig+0x82>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a14      	ldr	r2, [pc, #80]	@ (80052bc <TIM_OC5_SetConfig+0xd0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d109      	bne.n	8005282 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005274:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	021b      	lsls	r3, r3, #8
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	4313      	orrs	r3, r2
 8005280:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	621a      	str	r2, [r3, #32]
}
 800529c:	bf00      	nop
 800529e:	371c      	adds	r7, #28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40013400 	.word	0x40013400
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40014400 	.word	0x40014400
 80052b8:	40014800 	.word	0x40014800
 80052bc:	40015000 	.word	0x40015000

080052c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	021b      	lsls	r3, r3, #8
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	051b      	lsls	r3, r3, #20
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a1a      	ldr	r2, [pc, #104]	@ (8005380 <TIM_OC6_SetConfig+0xc0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d013      	beq.n	8005344 <TIM_OC6_SetConfig+0x84>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a19      	ldr	r2, [pc, #100]	@ (8005384 <TIM_OC6_SetConfig+0xc4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00f      	beq.n	8005344 <TIM_OC6_SetConfig+0x84>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a18      	ldr	r2, [pc, #96]	@ (8005388 <TIM_OC6_SetConfig+0xc8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00b      	beq.n	8005344 <TIM_OC6_SetConfig+0x84>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a17      	ldr	r2, [pc, #92]	@ (800538c <TIM_OC6_SetConfig+0xcc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d007      	beq.n	8005344 <TIM_OC6_SetConfig+0x84>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a16      	ldr	r2, [pc, #88]	@ (8005390 <TIM_OC6_SetConfig+0xd0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d003      	beq.n	8005344 <TIM_OC6_SetConfig+0x84>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a15      	ldr	r2, [pc, #84]	@ (8005394 <TIM_OC6_SetConfig+0xd4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d109      	bne.n	8005358 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800534a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	695b      	ldr	r3, [r3, #20]
 8005350:	029b      	lsls	r3, r3, #10
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	621a      	str	r2, [r3, #32]
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40012c00 	.word	0x40012c00
 8005384:	40013400 	.word	0x40013400
 8005388:	40014000 	.word	0x40014000
 800538c:	40014400 	.word	0x40014400
 8005390:	40014800 	.word	0x40014800
 8005394:	40015000 	.word	0x40015000

08005398 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80053b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053ca:	f023 0307 	bic.w	r3, r3, #7
 80053ce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	4a56      	ldr	r2, [pc, #344]	@ (8005540 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	f000 80a2 	beq.w	8005532 <TIM_SlaveTimer_SetConfig+0x19a>
 80053ee:	4a54      	ldr	r2, [pc, #336]	@ (8005540 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	f200 809b 	bhi.w	800552c <TIM_SlaveTimer_SetConfig+0x194>
 80053f6:	4a53      	ldr	r2, [pc, #332]	@ (8005544 <TIM_SlaveTimer_SetConfig+0x1ac>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	f000 809a 	beq.w	8005532 <TIM_SlaveTimer_SetConfig+0x19a>
 80053fe:	4a51      	ldr	r2, [pc, #324]	@ (8005544 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8005400:	4293      	cmp	r3, r2
 8005402:	f200 8093 	bhi.w	800552c <TIM_SlaveTimer_SetConfig+0x194>
 8005406:	4a50      	ldr	r2, [pc, #320]	@ (8005548 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	f000 8092 	beq.w	8005532 <TIM_SlaveTimer_SetConfig+0x19a>
 800540e:	4a4e      	ldr	r2, [pc, #312]	@ (8005548 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8005410:	4293      	cmp	r3, r2
 8005412:	f200 808b 	bhi.w	800552c <TIM_SlaveTimer_SetConfig+0x194>
 8005416:	4a4d      	ldr	r2, [pc, #308]	@ (800554c <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	f000 808a 	beq.w	8005532 <TIM_SlaveTimer_SetConfig+0x19a>
 800541e:	4a4b      	ldr	r2, [pc, #300]	@ (800554c <TIM_SlaveTimer_SetConfig+0x1b4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	f200 8083 	bhi.w	800552c <TIM_SlaveTimer_SetConfig+0x194>
 8005426:	4a4a      	ldr	r2, [pc, #296]	@ (8005550 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	f000 8082 	beq.w	8005532 <TIM_SlaveTimer_SetConfig+0x19a>
 800542e:	4a48      	ldr	r2, [pc, #288]	@ (8005550 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d87b      	bhi.n	800552c <TIM_SlaveTimer_SetConfig+0x194>
 8005434:	4a47      	ldr	r2, [pc, #284]	@ (8005554 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d07b      	beq.n	8005532 <TIM_SlaveTimer_SetConfig+0x19a>
 800543a:	4a46      	ldr	r2, [pc, #280]	@ (8005554 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d875      	bhi.n	800552c <TIM_SlaveTimer_SetConfig+0x194>
 8005440:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005444:	d075      	beq.n	8005532 <TIM_SlaveTimer_SetConfig+0x19a>
 8005446:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800544a:	d86f      	bhi.n	800552c <TIM_SlaveTimer_SetConfig+0x194>
 800544c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005450:	d06f      	beq.n	8005532 <TIM_SlaveTimer_SetConfig+0x19a>
 8005452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005456:	d869      	bhi.n	800552c <TIM_SlaveTimer_SetConfig+0x194>
 8005458:	2b70      	cmp	r3, #112	@ 0x70
 800545a:	d01a      	beq.n	8005492 <TIM_SlaveTimer_SetConfig+0xfa>
 800545c:	2b70      	cmp	r3, #112	@ 0x70
 800545e:	d865      	bhi.n	800552c <TIM_SlaveTimer_SetConfig+0x194>
 8005460:	2b60      	cmp	r3, #96	@ 0x60
 8005462:	d059      	beq.n	8005518 <TIM_SlaveTimer_SetConfig+0x180>
 8005464:	2b60      	cmp	r3, #96	@ 0x60
 8005466:	d861      	bhi.n	800552c <TIM_SlaveTimer_SetConfig+0x194>
 8005468:	2b50      	cmp	r3, #80	@ 0x50
 800546a:	d04b      	beq.n	8005504 <TIM_SlaveTimer_SetConfig+0x16c>
 800546c:	2b50      	cmp	r3, #80	@ 0x50
 800546e:	d85d      	bhi.n	800552c <TIM_SlaveTimer_SetConfig+0x194>
 8005470:	2b40      	cmp	r3, #64	@ 0x40
 8005472:	d019      	beq.n	80054a8 <TIM_SlaveTimer_SetConfig+0x110>
 8005474:	2b40      	cmp	r3, #64	@ 0x40
 8005476:	d859      	bhi.n	800552c <TIM_SlaveTimer_SetConfig+0x194>
 8005478:	2b30      	cmp	r3, #48	@ 0x30
 800547a:	d05a      	beq.n	8005532 <TIM_SlaveTimer_SetConfig+0x19a>
 800547c:	2b30      	cmp	r3, #48	@ 0x30
 800547e:	d855      	bhi.n	800552c <TIM_SlaveTimer_SetConfig+0x194>
 8005480:	2b20      	cmp	r3, #32
 8005482:	d056      	beq.n	8005532 <TIM_SlaveTimer_SetConfig+0x19a>
 8005484:	2b20      	cmp	r3, #32
 8005486:	d851      	bhi.n	800552c <TIM_SlaveTimer_SetConfig+0x194>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d052      	beq.n	8005532 <TIM_SlaveTimer_SetConfig+0x19a>
 800548c:	2b10      	cmp	r3, #16
 800548e:	d050      	beq.n	8005532 <TIM_SlaveTimer_SetConfig+0x19a>
 8005490:	e04c      	b.n	800552c <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80054a2:	f000 f8d5 	bl	8005650 <TIM_ETR_SetConfig>
      break;
 80054a6:	e045      	b.n	8005534 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b05      	cmp	r3, #5
 80054ae:	d004      	beq.n	80054ba <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80054b4:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 80054b8:	d101      	bne.n	80054be <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e03b      	b.n	8005536 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6a1a      	ldr	r2, [r3, #32]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0201 	bic.w	r2, r2, #1
 80054d4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054e4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	011b      	lsls	r3, r3, #4
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	621a      	str	r2, [r3, #32]
      break;
 8005502:	e017      	b.n	8005534 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005510:	461a      	mov	r2, r3
 8005512:	f000 f821 	bl	8005558 <TIM_TI1_ConfigInputStage>
      break;
 8005516:	e00d      	b.n	8005534 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005524:	461a      	mov	r2, r3
 8005526:	f000 f846 	bl	80055b6 <TIM_TI2_ConfigInputStage>
      break;
 800552a:	e003      	b.n	8005534 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	75fb      	strb	r3, [r7, #23]
      break;
 8005530:	e000      	b.n	8005534 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8005532:	bf00      	nop
  }

  return status;
 8005534:	7dfb      	ldrb	r3, [r7, #23]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	00100070 	.word	0x00100070
 8005544:	00100060 	.word	0x00100060
 8005548:	00100050 	.word	0x00100050
 800554c:	00100040 	.word	0x00100040
 8005550:	00100030 	.word	0x00100030
 8005554:	00100020 	.word	0x00100020

08005558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005558:	b480      	push	{r7}
 800555a:	b087      	sub	sp, #28
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	f023 0201 	bic.w	r2, r3, #1
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4313      	orrs	r3, r2
 800558c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f023 030a 	bic.w	r3, r3, #10
 8005594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	621a      	str	r2, [r3, #32]
}
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b087      	sub	sp, #28
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	f023 0210 	bic.w	r2, r3, #16
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	031b      	lsls	r3, r3, #12
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	697a      	ldr	r2, [r7, #20]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	621a      	str	r2, [r3, #32]
}
 800560a:	bf00      	nop
 800560c:	371c      	adds	r7, #28
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005616:	b480      	push	{r7}
 8005618:	b085      	sub	sp, #20
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800562c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	f043 0307 	orr.w	r3, r3, #7
 800563c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	609a      	str	r2, [r3, #8]
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800566a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	021a      	lsls	r2, r3, #8
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	431a      	orrs	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4313      	orrs	r3, r2
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	609a      	str	r2, [r3, #8]
}
 8005684:	bf00      	nop
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f003 031f 	and.w	r3, r3, #31
 80056a2:	2201      	movs	r2, #1
 80056a4:	fa02 f303 	lsl.w	r3, r2, r3
 80056a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a1a      	ldr	r2, [r3, #32]
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	43db      	mvns	r3, r3
 80056b2:	401a      	ands	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a1a      	ldr	r2, [r3, #32]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 031f 	and.w	r3, r3, #31
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	fa01 f303 	lsl.w	r3, r1, r3
 80056c8:	431a      	orrs	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	621a      	str	r2, [r3, #32]
}
 80056ce:	bf00      	nop
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e074      	b.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a34      	ldr	r2, [pc, #208]	@ (80057ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d009      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a33      	ldr	r2, [pc, #204]	@ (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d004      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a31      	ldr	r2, [pc, #196]	@ (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d108      	bne.n	8005744 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005738:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800574a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a21      	ldr	r2, [pc, #132]	@ (80057ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d022      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005774:	d01d      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1f      	ldr	r2, [pc, #124]	@ (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d018      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1d      	ldr	r2, [pc, #116]	@ (80057fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d013      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a1c      	ldr	r2, [pc, #112]	@ (8005800 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00e      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a15      	ldr	r2, [pc, #84]	@ (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d009      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a18      	ldr	r2, [pc, #96]	@ (8005804 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d004      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a11      	ldr	r2, [pc, #68]	@ (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d10c      	bne.n	80057cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40012c00 	.word	0x40012c00
 80057f0:	40013400 	.word	0x40013400
 80057f4:	40015000 	.word	0x40015000
 80057f8:	40000400 	.word	0x40000400
 80057fc:	40000800 	.word	0x40000800
 8005800:	40000c00 	.word	0x40000c00
 8005804:	40014000 	.word	0x40014000

08005808 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005820:	2302      	movs	r3, #2
 8005822:	e078      	b.n	8005916 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	041b      	lsls	r3, r3, #16
 800589a:	4313      	orrs	r3, r2
 800589c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005924 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d009      	beq.n	80058ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005928 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d004      	beq.n	80058ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a19      	ldr	r2, [pc, #100]	@ (800592c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d11c      	bne.n	8005904 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d4:	051b      	lsls	r3, r3, #20
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40012c00 	.word	0x40012c00
 8005928:	40013400 	.word	0x40013400
 800592c:	40015000 	.word	0x40015000

08005930 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e042      	b.n	80059c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005948:	2b00      	cmp	r3, #0
 800594a:	d106      	bne.n	800595a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7fb fd3d 	bl	80013d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2224      	movs	r2, #36	@ 0x24
 800595e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0201 	bic.w	r2, r2, #1
 8005970:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fb24 	bl	8005fc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f825 	bl	80059d0 <UART_SetConfig>
 8005986:	4603      	mov	r3, r0
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e01b      	b.n	80059c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800599e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fba3 	bl	800610c <UART_CheckIdleState>
 80059c6:	4603      	mov	r3, r0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3708      	adds	r7, #8
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059d4:	b08c      	sub	sp, #48	@ 0x30
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	431a      	orrs	r2, r3
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	69db      	ldr	r3, [r3, #28]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	4baa      	ldr	r3, [pc, #680]	@ (8005ca8 <UART_SetConfig+0x2d8>)
 8005a00:	4013      	ands	r3, r2
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	6812      	ldr	r2, [r2, #0]
 8005a06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a9f      	ldr	r2, [pc, #636]	@ (8005cac <UART_SetConfig+0x2dc>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d004      	beq.n	8005a3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005a46:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	6812      	ldr	r2, [r2, #0]
 8005a4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a50:	430b      	orrs	r3, r1
 8005a52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5a:	f023 010f 	bic.w	r1, r3, #15
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a90      	ldr	r2, [pc, #576]	@ (8005cb0 <UART_SetConfig+0x2e0>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d125      	bne.n	8005ac0 <UART_SetConfig+0xf0>
 8005a74:	4b8f      	ldr	r3, [pc, #572]	@ (8005cb4 <UART_SetConfig+0x2e4>)
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d81a      	bhi.n	8005ab8 <UART_SetConfig+0xe8>
 8005a82:	a201      	add	r2, pc, #4	@ (adr r2, 8005a88 <UART_SetConfig+0xb8>)
 8005a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a88:	08005a99 	.word	0x08005a99
 8005a8c:	08005aa9 	.word	0x08005aa9
 8005a90:	08005aa1 	.word	0x08005aa1
 8005a94:	08005ab1 	.word	0x08005ab1
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005a9e:	e116      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aa6:	e112      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005aa8:	2304      	movs	r3, #4
 8005aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005aae:	e10e      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005ab0:	2308      	movs	r3, #8
 8005ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ab6:	e10a      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005ab8:	2310      	movs	r3, #16
 8005aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005abe:	e106      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a7c      	ldr	r2, [pc, #496]	@ (8005cb8 <UART_SetConfig+0x2e8>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d138      	bne.n	8005b3c <UART_SetConfig+0x16c>
 8005aca:	4b7a      	ldr	r3, [pc, #488]	@ (8005cb4 <UART_SetConfig+0x2e4>)
 8005acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ad0:	f003 030c 	and.w	r3, r3, #12
 8005ad4:	2b0c      	cmp	r3, #12
 8005ad6:	d82d      	bhi.n	8005b34 <UART_SetConfig+0x164>
 8005ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae0 <UART_SetConfig+0x110>)
 8005ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ade:	bf00      	nop
 8005ae0:	08005b15 	.word	0x08005b15
 8005ae4:	08005b35 	.word	0x08005b35
 8005ae8:	08005b35 	.word	0x08005b35
 8005aec:	08005b35 	.word	0x08005b35
 8005af0:	08005b25 	.word	0x08005b25
 8005af4:	08005b35 	.word	0x08005b35
 8005af8:	08005b35 	.word	0x08005b35
 8005afc:	08005b35 	.word	0x08005b35
 8005b00:	08005b1d 	.word	0x08005b1d
 8005b04:	08005b35 	.word	0x08005b35
 8005b08:	08005b35 	.word	0x08005b35
 8005b0c:	08005b35 	.word	0x08005b35
 8005b10:	08005b2d 	.word	0x08005b2d
 8005b14:	2300      	movs	r3, #0
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b1a:	e0d8      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b22:	e0d4      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005b24:	2304      	movs	r3, #4
 8005b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b2a:	e0d0      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005b2c:	2308      	movs	r3, #8
 8005b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b32:	e0cc      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005b34:	2310      	movs	r3, #16
 8005b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b3a:	e0c8      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a5e      	ldr	r2, [pc, #376]	@ (8005cbc <UART_SetConfig+0x2ec>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d125      	bne.n	8005b92 <UART_SetConfig+0x1c2>
 8005b46:	4b5b      	ldr	r3, [pc, #364]	@ (8005cb4 <UART_SetConfig+0x2e4>)
 8005b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b4c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b50:	2b30      	cmp	r3, #48	@ 0x30
 8005b52:	d016      	beq.n	8005b82 <UART_SetConfig+0x1b2>
 8005b54:	2b30      	cmp	r3, #48	@ 0x30
 8005b56:	d818      	bhi.n	8005b8a <UART_SetConfig+0x1ba>
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d00a      	beq.n	8005b72 <UART_SetConfig+0x1a2>
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d814      	bhi.n	8005b8a <UART_SetConfig+0x1ba>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <UART_SetConfig+0x19a>
 8005b64:	2b10      	cmp	r3, #16
 8005b66:	d008      	beq.n	8005b7a <UART_SetConfig+0x1aa>
 8005b68:	e00f      	b.n	8005b8a <UART_SetConfig+0x1ba>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b70:	e0ad      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005b72:	2302      	movs	r3, #2
 8005b74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b78:	e0a9      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005b7a:	2304      	movs	r3, #4
 8005b7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b80:	e0a5      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005b82:	2308      	movs	r3, #8
 8005b84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b88:	e0a1      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005b8a:	2310      	movs	r3, #16
 8005b8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b90:	e09d      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a4a      	ldr	r2, [pc, #296]	@ (8005cc0 <UART_SetConfig+0x2f0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d125      	bne.n	8005be8 <UART_SetConfig+0x218>
 8005b9c:	4b45      	ldr	r3, [pc, #276]	@ (8005cb4 <UART_SetConfig+0x2e4>)
 8005b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005ba6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ba8:	d016      	beq.n	8005bd8 <UART_SetConfig+0x208>
 8005baa:	2bc0      	cmp	r3, #192	@ 0xc0
 8005bac:	d818      	bhi.n	8005be0 <UART_SetConfig+0x210>
 8005bae:	2b80      	cmp	r3, #128	@ 0x80
 8005bb0:	d00a      	beq.n	8005bc8 <UART_SetConfig+0x1f8>
 8005bb2:	2b80      	cmp	r3, #128	@ 0x80
 8005bb4:	d814      	bhi.n	8005be0 <UART_SetConfig+0x210>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <UART_SetConfig+0x1f0>
 8005bba:	2b40      	cmp	r3, #64	@ 0x40
 8005bbc:	d008      	beq.n	8005bd0 <UART_SetConfig+0x200>
 8005bbe:	e00f      	b.n	8005be0 <UART_SetConfig+0x210>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bc6:	e082      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bce:	e07e      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005bd0:	2304      	movs	r3, #4
 8005bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bd6:	e07a      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005bd8:	2308      	movs	r3, #8
 8005bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bde:	e076      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005be0:	2310      	movs	r3, #16
 8005be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005be6:	e072      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a35      	ldr	r2, [pc, #212]	@ (8005cc4 <UART_SetConfig+0x2f4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d12a      	bne.n	8005c48 <UART_SetConfig+0x278>
 8005bf2:	4b30      	ldr	r3, [pc, #192]	@ (8005cb4 <UART_SetConfig+0x2e4>)
 8005bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bfc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c00:	d01a      	beq.n	8005c38 <UART_SetConfig+0x268>
 8005c02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c06:	d81b      	bhi.n	8005c40 <UART_SetConfig+0x270>
 8005c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c0c:	d00c      	beq.n	8005c28 <UART_SetConfig+0x258>
 8005c0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c12:	d815      	bhi.n	8005c40 <UART_SetConfig+0x270>
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <UART_SetConfig+0x250>
 8005c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c1c:	d008      	beq.n	8005c30 <UART_SetConfig+0x260>
 8005c1e:	e00f      	b.n	8005c40 <UART_SetConfig+0x270>
 8005c20:	2300      	movs	r3, #0
 8005c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c26:	e052      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c2e:	e04e      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005c30:	2304      	movs	r3, #4
 8005c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c36:	e04a      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005c38:	2308      	movs	r3, #8
 8005c3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c3e:	e046      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005c40:	2310      	movs	r3, #16
 8005c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c46:	e042      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a17      	ldr	r2, [pc, #92]	@ (8005cac <UART_SetConfig+0x2dc>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d13a      	bne.n	8005cc8 <UART_SetConfig+0x2f8>
 8005c52:	4b18      	ldr	r3, [pc, #96]	@ (8005cb4 <UART_SetConfig+0x2e4>)
 8005c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c5c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c60:	d01a      	beq.n	8005c98 <UART_SetConfig+0x2c8>
 8005c62:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c66:	d81b      	bhi.n	8005ca0 <UART_SetConfig+0x2d0>
 8005c68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c6c:	d00c      	beq.n	8005c88 <UART_SetConfig+0x2b8>
 8005c6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c72:	d815      	bhi.n	8005ca0 <UART_SetConfig+0x2d0>
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <UART_SetConfig+0x2b0>
 8005c78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c7c:	d008      	beq.n	8005c90 <UART_SetConfig+0x2c0>
 8005c7e:	e00f      	b.n	8005ca0 <UART_SetConfig+0x2d0>
 8005c80:	2300      	movs	r3, #0
 8005c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c86:	e022      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c8e:	e01e      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005c90:	2304      	movs	r3, #4
 8005c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c96:	e01a      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005c98:	2308      	movs	r3, #8
 8005c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c9e:	e016      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005ca0:	2310      	movs	r3, #16
 8005ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ca6:	e012      	b.n	8005cce <UART_SetConfig+0x2fe>
 8005ca8:	cfff69f3 	.word	0xcfff69f3
 8005cac:	40008000 	.word	0x40008000
 8005cb0:	40013800 	.word	0x40013800
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	40004400 	.word	0x40004400
 8005cbc:	40004800 	.word	0x40004800
 8005cc0:	40004c00 	.word	0x40004c00
 8005cc4:	40005000 	.word	0x40005000
 8005cc8:	2310      	movs	r3, #16
 8005cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4aae      	ldr	r2, [pc, #696]	@ (8005f8c <UART_SetConfig+0x5bc>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	f040 8097 	bne.w	8005e08 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d823      	bhi.n	8005d2a <UART_SetConfig+0x35a>
 8005ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce8 <UART_SetConfig+0x318>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005d0d 	.word	0x08005d0d
 8005cec:	08005d2b 	.word	0x08005d2b
 8005cf0:	08005d15 	.word	0x08005d15
 8005cf4:	08005d2b 	.word	0x08005d2b
 8005cf8:	08005d1b 	.word	0x08005d1b
 8005cfc:	08005d2b 	.word	0x08005d2b
 8005d00:	08005d2b 	.word	0x08005d2b
 8005d04:	08005d2b 	.word	0x08005d2b
 8005d08:	08005d23 	.word	0x08005d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d0c:	f7fd fef0 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8005d10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d12:	e010      	b.n	8005d36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d14:	4b9e      	ldr	r3, [pc, #632]	@ (8005f90 <UART_SetConfig+0x5c0>)
 8005d16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d18:	e00d      	b.n	8005d36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d1a:	f7fd fe7d 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 8005d1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005d20:	e009      	b.n	8005d36 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005d28:	e005      	b.n	8005d36 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005d34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8130 	beq.w	8005f9e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d42:	4a94      	ldr	r2, [pc, #592]	@ (8005f94 <UART_SetConfig+0x5c4>)
 8005d44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d50:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	4613      	mov	r3, r2
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	4413      	add	r3, r2
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d305      	bcc.n	8005d6e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d903      	bls.n	8005d76 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005d74:	e113      	b.n	8005f9e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	2200      	movs	r2, #0
 8005d7a:	60bb      	str	r3, [r7, #8]
 8005d7c:	60fa      	str	r2, [r7, #12]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d82:	4a84      	ldr	r2, [pc, #528]	@ (8005f94 <UART_SetConfig+0x5c4>)
 8005d84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	603b      	str	r3, [r7, #0]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d98:	f7fa fa3e 	bl	8000218 <__aeabi_uldivmod>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4610      	mov	r0, r2
 8005da2:	4619      	mov	r1, r3
 8005da4:	f04f 0200 	mov.w	r2, #0
 8005da8:	f04f 0300 	mov.w	r3, #0
 8005dac:	020b      	lsls	r3, r1, #8
 8005dae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005db2:	0202      	lsls	r2, r0, #8
 8005db4:	6979      	ldr	r1, [r7, #20]
 8005db6:	6849      	ldr	r1, [r1, #4]
 8005db8:	0849      	lsrs	r1, r1, #1
 8005dba:	2000      	movs	r0, #0
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	4605      	mov	r5, r0
 8005dc0:	eb12 0804 	adds.w	r8, r2, r4
 8005dc4:	eb43 0905 	adc.w	r9, r3, r5
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	469a      	mov	sl, r3
 8005dd0:	4693      	mov	fp, r2
 8005dd2:	4652      	mov	r2, sl
 8005dd4:	465b      	mov	r3, fp
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	4649      	mov	r1, r9
 8005dda:	f7fa fa1d 	bl	8000218 <__aeabi_uldivmod>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4613      	mov	r3, r2
 8005de4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dec:	d308      	bcc.n	8005e00 <UART_SetConfig+0x430>
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005df4:	d204      	bcs.n	8005e00 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6a3a      	ldr	r2, [r7, #32]
 8005dfc:	60da      	str	r2, [r3, #12]
 8005dfe:	e0ce      	b.n	8005f9e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e06:	e0ca      	b.n	8005f9e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e10:	d166      	bne.n	8005ee0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005e12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e16:	2b08      	cmp	r3, #8
 8005e18:	d827      	bhi.n	8005e6a <UART_SetConfig+0x49a>
 8005e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e20 <UART_SetConfig+0x450>)
 8005e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e20:	08005e45 	.word	0x08005e45
 8005e24:	08005e4d 	.word	0x08005e4d
 8005e28:	08005e55 	.word	0x08005e55
 8005e2c:	08005e6b 	.word	0x08005e6b
 8005e30:	08005e5b 	.word	0x08005e5b
 8005e34:	08005e6b 	.word	0x08005e6b
 8005e38:	08005e6b 	.word	0x08005e6b
 8005e3c:	08005e6b 	.word	0x08005e6b
 8005e40:	08005e63 	.word	0x08005e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e44:	f7fd fe54 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8005e48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e4a:	e014      	b.n	8005e76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e4c:	f7fd fe66 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 8005e50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e52:	e010      	b.n	8005e76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e54:	4b4e      	ldr	r3, [pc, #312]	@ (8005f90 <UART_SetConfig+0x5c0>)
 8005e56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e58:	e00d      	b.n	8005e76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e5a:	f7fd fddd 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 8005e5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e60:	e009      	b.n	8005e76 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e68:	e005      	b.n	8005e76 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005e74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 8090 	beq.w	8005f9e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	4a44      	ldr	r2, [pc, #272]	@ (8005f94 <UART_SetConfig+0x5c4>)
 8005e84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e90:	005a      	lsls	r2, r3, #1
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	441a      	add	r2, r3
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	2b0f      	cmp	r3, #15
 8005ea8:	d916      	bls.n	8005ed8 <UART_SetConfig+0x508>
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eb0:	d212      	bcs.n	8005ed8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f023 030f 	bic.w	r3, r3, #15
 8005eba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	085b      	lsrs	r3, r3, #1
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	8bfb      	ldrh	r3, [r7, #30]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	8bfa      	ldrh	r2, [r7, #30]
 8005ed4:	60da      	str	r2, [r3, #12]
 8005ed6:	e062      	b.n	8005f9e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ede:	e05e      	b.n	8005f9e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ee0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d828      	bhi.n	8005f3a <UART_SetConfig+0x56a>
 8005ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef0 <UART_SetConfig+0x520>)
 8005eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eee:	bf00      	nop
 8005ef0:	08005f15 	.word	0x08005f15
 8005ef4:	08005f1d 	.word	0x08005f1d
 8005ef8:	08005f25 	.word	0x08005f25
 8005efc:	08005f3b 	.word	0x08005f3b
 8005f00:	08005f2b 	.word	0x08005f2b
 8005f04:	08005f3b 	.word	0x08005f3b
 8005f08:	08005f3b 	.word	0x08005f3b
 8005f0c:	08005f3b 	.word	0x08005f3b
 8005f10:	08005f33 	.word	0x08005f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f14:	f7fd fdec 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8005f18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f1a:	e014      	b.n	8005f46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f1c:	f7fd fdfe 	bl	8003b1c <HAL_RCC_GetPCLK2Freq>
 8005f20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f22:	e010      	b.n	8005f46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f24:	4b1a      	ldr	r3, [pc, #104]	@ (8005f90 <UART_SetConfig+0x5c0>)
 8005f26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f28:	e00d      	b.n	8005f46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f2a:	f7fd fd75 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 8005f2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f30:	e009      	b.n	8005f46 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f38:	e005      	b.n	8005f46 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005f44:	bf00      	nop
    }

    if (pclk != 0U)
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d028      	beq.n	8005f9e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f50:	4a10      	ldr	r2, [pc, #64]	@ (8005f94 <UART_SetConfig+0x5c4>)
 8005f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f56:	461a      	mov	r2, r3
 8005f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	085b      	lsrs	r3, r3, #1
 8005f64:	441a      	add	r2, r3
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	2b0f      	cmp	r3, #15
 8005f74:	d910      	bls.n	8005f98 <UART_SetConfig+0x5c8>
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f7c:	d20c      	bcs.n	8005f98 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	60da      	str	r2, [r3, #12]
 8005f88:	e009      	b.n	8005f9e <UART_SetConfig+0x5ce>
 8005f8a:	bf00      	nop
 8005f8c:	40008000 	.word	0x40008000
 8005f90:	00f42400 	.word	0x00f42400
 8005f94:	08006694 	.word	0x08006694
      }
      else
      {
        ret = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005fba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3730      	adds	r7, #48	@ 0x30
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005fc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd4:	f003 0308 	and.w	r3, r3, #8
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00a      	beq.n	8006014 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603a:	f003 0304 	and.w	r3, r3, #4
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605c:	f003 0310 	and.w	r3, r3, #16
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00a      	beq.n	800607a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01a      	beq.n	80060de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060c6:	d10a      	bne.n	80060de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	605a      	str	r2, [r3, #4]
  }
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b098      	sub	sp, #96	@ 0x60
 8006110:	af02      	add	r7, sp, #8
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800611c:	f7fb fa82 	bl	8001624 <HAL_GetTick>
 8006120:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0308 	and.w	r3, r3, #8
 800612c:	2b08      	cmp	r3, #8
 800612e:	d12f      	bne.n	8006190 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006130:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006138:	2200      	movs	r2, #0
 800613a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f88e 	bl	8006260 <UART_WaitOnFlagUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d022      	beq.n	8006190 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006152:	e853 3f00 	ldrex	r3, [r3]
 8006156:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800615a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800615e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006168:	647b      	str	r3, [r7, #68]	@ 0x44
 800616a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800616e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006170:	e841 2300 	strex	r3, r2, [r1]
 8006174:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e6      	bne.n	800614a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e063      	b.n	8006258 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b04      	cmp	r3, #4
 800619c:	d149      	bne.n	8006232 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800619e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061a6:	2200      	movs	r2, #0
 80061a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f857 	bl	8006260 <UART_WaitOnFlagUntilTimeout>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d03c      	beq.n	8006232 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	623b      	str	r3, [r7, #32]
   return(result);
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80061d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e6      	bne.n	80061b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3308      	adds	r3, #8
 80061f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f023 0301 	bic.w	r3, r3, #1
 8006200:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3308      	adds	r3, #8
 8006208:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800620a:	61fa      	str	r2, [r7, #28]
 800620c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620e:	69b9      	ldr	r1, [r7, #24]
 8006210:	69fa      	ldr	r2, [r7, #28]
 8006212:	e841 2300 	strex	r3, r2, [r1]
 8006216:	617b      	str	r3, [r7, #20]
   return(result);
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e5      	bne.n	80061ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2220      	movs	r2, #32
 8006222:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e012      	b.n	8006258 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2220      	movs	r2, #32
 8006236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3758      	adds	r7, #88	@ 0x58
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	4613      	mov	r3, r2
 800626e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006270:	e04f      	b.n	8006312 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006278:	d04b      	beq.n	8006312 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800627a:	f7fb f9d3 	bl	8001624 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	429a      	cmp	r2, r3
 8006288:	d302      	bcc.n	8006290 <UART_WaitOnFlagUntilTimeout+0x30>
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e04e      	b.n	8006332 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0304 	and.w	r3, r3, #4
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d037      	beq.n	8006312 <UART_WaitOnFlagUntilTimeout+0xb2>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2b80      	cmp	r3, #128	@ 0x80
 80062a6:	d034      	beq.n	8006312 <UART_WaitOnFlagUntilTimeout+0xb2>
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2b40      	cmp	r3, #64	@ 0x40
 80062ac:	d031      	beq.n	8006312 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	f003 0308 	and.w	r3, r3, #8
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d110      	bne.n	80062de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2208      	movs	r2, #8
 80062c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 f838 	bl	800633a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2208      	movs	r2, #8
 80062ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e029      	b.n	8006332 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062ec:	d111      	bne.n	8006312 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80062f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 f81e 	bl	800633a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2220      	movs	r2, #32
 8006302:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e00f      	b.n	8006332 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69da      	ldr	r2, [r3, #28]
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	4013      	ands	r3, r2
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	429a      	cmp	r2, r3
 8006320:	bf0c      	ite	eq
 8006322:	2301      	moveq	r3, #1
 8006324:	2300      	movne	r3, #0
 8006326:	b2db      	uxtb	r3, r3
 8006328:	461a      	mov	r2, r3
 800632a:	79fb      	ldrb	r3, [r7, #7]
 800632c:	429a      	cmp	r2, r3
 800632e:	d0a0      	beq.n	8006272 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800633a:	b480      	push	{r7}
 800633c:	b095      	sub	sp, #84	@ 0x54
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800634a:	e853 3f00 	ldrex	r3, [r3]
 800634e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006352:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	461a      	mov	r2, r3
 800635e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006360:	643b      	str	r3, [r7, #64]	@ 0x40
 8006362:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006366:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006368:	e841 2300 	strex	r3, r2, [r1]
 800636c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800636e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e6      	bne.n	8006342 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3308      	adds	r3, #8
 800637a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	61fb      	str	r3, [r7, #28]
   return(result);
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800638a:	f023 0301 	bic.w	r3, r3, #1
 800638e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3308      	adds	r3, #8
 8006396:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006398:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800639a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800639e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063a0:	e841 2300 	strex	r3, r2, [r1]
 80063a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e3      	bne.n	8006374 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d118      	bne.n	80063e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	e853 3f00 	ldrex	r3, [r3]
 80063c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f023 0310 	bic.w	r3, r3, #16
 80063c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063d2:	61bb      	str	r3, [r7, #24]
 80063d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d6:	6979      	ldr	r1, [r7, #20]
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	e841 2300 	strex	r3, r2, [r1]
 80063de:	613b      	str	r3, [r7, #16]
   return(result);
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1e6      	bne.n	80063b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2220      	movs	r2, #32
 80063ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80063fa:	bf00      	nop
 80063fc:	3754      	adds	r7, #84	@ 0x54
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006406:	b480      	push	{r7}
 8006408:	b085      	sub	sp, #20
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_UARTEx_DisableFifoMode+0x16>
 8006418:	2302      	movs	r3, #2
 800641a:	e027      	b.n	800646c <HAL_UARTEx_DisableFifoMode+0x66>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2224      	movs	r2, #36	@ 0x24
 8006428:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0201 	bic.w	r2, r2, #1
 8006442:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800644a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006488:	2b01      	cmp	r3, #1
 800648a:	d101      	bne.n	8006490 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800648c:	2302      	movs	r3, #2
 800648e:	e02d      	b.n	80064ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2224      	movs	r2, #36	@ 0x24
 800649c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f022 0201 	bic.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	683a      	ldr	r2, [r7, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f84f 	bl	8006570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2220      	movs	r2, #32
 80064de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006508:	2302      	movs	r3, #2
 800650a:	e02d      	b.n	8006568 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2224      	movs	r2, #36	@ 0x24
 8006518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0201 	bic.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 f811 	bl	8006570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800657c:	2b00      	cmp	r3, #0
 800657e:	d108      	bne.n	8006592 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2201      	movs	r2, #1
 800658c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006590:	e031      	b.n	80065f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006592:	2308      	movs	r3, #8
 8006594:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006596:	2308      	movs	r3, #8
 8006598:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	0e5b      	lsrs	r3, r3, #25
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	0f5b      	lsrs	r3, r3, #29
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f003 0307 	and.w	r3, r3, #7
 80065b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	7b3a      	ldrb	r2, [r7, #12]
 80065be:	4911      	ldr	r1, [pc, #68]	@ (8006604 <UARTEx_SetNbDataToProcess+0x94>)
 80065c0:	5c8a      	ldrb	r2, [r1, r2]
 80065c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80065c6:	7b3a      	ldrb	r2, [r7, #12]
 80065c8:	490f      	ldr	r1, [pc, #60]	@ (8006608 <UARTEx_SetNbDataToProcess+0x98>)
 80065ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80065cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
 80065da:	7b7a      	ldrb	r2, [r7, #13]
 80065dc:	4909      	ldr	r1, [pc, #36]	@ (8006604 <UARTEx_SetNbDataToProcess+0x94>)
 80065de:	5c8a      	ldrb	r2, [r1, r2]
 80065e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80065e4:	7b7a      	ldrb	r2, [r7, #13]
 80065e6:	4908      	ldr	r1, [pc, #32]	@ (8006608 <UARTEx_SetNbDataToProcess+0x98>)
 80065e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80065f6:	bf00      	nop
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	080066ac 	.word	0x080066ac
 8006608:	080066b4 	.word	0x080066b4

0800660c <memset>:
 800660c:	4402      	add	r2, r0
 800660e:	4603      	mov	r3, r0
 8006610:	4293      	cmp	r3, r2
 8006612:	d100      	bne.n	8006616 <memset+0xa>
 8006614:	4770      	bx	lr
 8006616:	f803 1b01 	strb.w	r1, [r3], #1
 800661a:	e7f9      	b.n	8006610 <memset+0x4>

0800661c <__libc_init_array>:
 800661c:	b570      	push	{r4, r5, r6, lr}
 800661e:	4d0d      	ldr	r5, [pc, #52]	@ (8006654 <__libc_init_array+0x38>)
 8006620:	4c0d      	ldr	r4, [pc, #52]	@ (8006658 <__libc_init_array+0x3c>)
 8006622:	1b64      	subs	r4, r4, r5
 8006624:	10a4      	asrs	r4, r4, #2
 8006626:	2600      	movs	r6, #0
 8006628:	42a6      	cmp	r6, r4
 800662a:	d109      	bne.n	8006640 <__libc_init_array+0x24>
 800662c:	4d0b      	ldr	r5, [pc, #44]	@ (800665c <__libc_init_array+0x40>)
 800662e:	4c0c      	ldr	r4, [pc, #48]	@ (8006660 <__libc_init_array+0x44>)
 8006630:	f000 f818 	bl	8006664 <_init>
 8006634:	1b64      	subs	r4, r4, r5
 8006636:	10a4      	asrs	r4, r4, #2
 8006638:	2600      	movs	r6, #0
 800663a:	42a6      	cmp	r6, r4
 800663c:	d105      	bne.n	800664a <__libc_init_array+0x2e>
 800663e:	bd70      	pop	{r4, r5, r6, pc}
 8006640:	f855 3b04 	ldr.w	r3, [r5], #4
 8006644:	4798      	blx	r3
 8006646:	3601      	adds	r6, #1
 8006648:	e7ee      	b.n	8006628 <__libc_init_array+0xc>
 800664a:	f855 3b04 	ldr.w	r3, [r5], #4
 800664e:	4798      	blx	r3
 8006650:	3601      	adds	r6, #1
 8006652:	e7f2      	b.n	800663a <__libc_init_array+0x1e>
 8006654:	080066c4 	.word	0x080066c4
 8006658:	080066c4 	.word	0x080066c4
 800665c:	080066c4 	.word	0x080066c4
 8006660:	080066c8 	.word	0x080066c8

08006664 <_init>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	bf00      	nop
 8006668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666a:	bc08      	pop	{r3}
 800666c:	469e      	mov	lr, r3
 800666e:	4770      	bx	lr

08006670 <_fini>:
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006672:	bf00      	nop
 8006674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006676:	bc08      	pop	{r3}
 8006678:	469e      	mov	lr, r3
 800667a:	4770      	bx	lr
