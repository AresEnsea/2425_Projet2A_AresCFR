
cfr_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000571c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080058a4  080058a4  000068a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059f0  080059f0  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080059f0  080059f0  000069f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059f8  080059f8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059f8  080059f8  000069f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059fc  080059fc  000069fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005a00  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000005c  08005a5c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08005a5c  00007368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000117d8  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002530  00000000  00000000  00018864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0001ad98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c26  00000000  00000000  0001bd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027160  00000000  00000000  0001c94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126d9  00000000  00000000  00043aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2616  00000000  00000000  00056187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014879d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004334  00000000  00000000  001487e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0014cb14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800588c 	.word	0x0800588c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	0800588c 	.word	0x0800588c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08c      	sub	sp, #48	@ 0x30
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fd61 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f8b3 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 fa8f 	bl	80009e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ca:	f000 f92d 	bl	8000728 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004ce:	f000 fa09 	bl	80008e4 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 80004d2:	f000 f8fd 	bl	80006d0 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 80004d6:	f000 f957 	bl	8000788 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //PB10 TIM2 CH3
 80004da:	2108      	movs	r1, #8
 80004dc:	484a      	ldr	r0, [pc, #296]	@ (8000608 <main+0x150>)
 80004de:	f002 fcf7 	bl	8002ed0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //PA 8 TIM1 CH1
 80004e2:	2100      	movs	r1, #0
 80004e4:	4849      	ldr	r0, [pc, #292]	@ (800060c <main+0x154>)
 80004e6:	f002 fcf3 	bl	8002ed0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); //PB11 TIM2 CH4
 80004ea:	210c      	movs	r1, #12
 80004ec:	4846      	ldr	r0, [pc, #280]	@ (8000608 <main+0x150>)
 80004ee:	f002 fcef 	bl	8002ed0 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&hlpuart1,(uint8_t*)rx_data, 11);  // Start receiving data initially
 80004f2:	220b      	movs	r2, #11
 80004f4:	4946      	ldr	r1, [pc, #280]	@ (8000610 <main+0x158>)
 80004f6:	4847      	ldr	r0, [pc, #284]	@ (8000614 <main+0x15c>)
 80004f8:	f003 fde8 	bl	80040cc <HAL_UART_Receive_IT>
  {

	      // Extraire les 4 premiers octets pour le moteur Maxon droit
	  	  char mot_maxon_dataD[4];
	  	  char direc[1];
	  	  strncpy(direc, (char *)&rx_data, 1);
 80004fc:	f107 031c 	add.w	r3, r7, #28
 8000500:	2201      	movs	r2, #1
 8000502:	4943      	ldr	r1, [pc, #268]	@ (8000610 <main+0x158>)
 8000504:	4618      	mov	r0, r3
 8000506:	f005 f983 	bl	8005810 <strncpy>
	  	  //int dir_R = (int)rx_data[0];
	  	  strncpy(mot_maxon_dataD, (char *)&rx_data + 1, 4);
 800050a:	4943      	ldr	r1, [pc, #268]	@ (8000618 <main+0x160>)
 800050c:	f107 0320 	add.w	r3, r7, #32
 8000510:	2204      	movs	r2, #4
 8000512:	4618      	mov	r0, r3
 8000514:	f005 f97c 	bl	8005810 <strncpy>
	  	  //mot_maxon_dataD[4] = '\0'; // Null terminate
	  	  int mot_maxon_valueD = atoi(mot_maxon_dataD);
 8000518:	f107 0320 	add.w	r3, r7, #32
 800051c:	4618      	mov	r0, r3
 800051e:	f005 f8e7 	bl	80056f0 <atoi>
 8000522:	62f8      	str	r0, [r7, #44]	@ 0x2c
	  	  int dir_R= atoi(direc);
 8000524:	f107 031c 	add.w	r3, r7, #28
 8000528:	4618      	mov	r0, r3
 800052a:	f005 f8e1 	bl	80056f0 <atoi>
 800052e:	4603      	mov	r3, r0
 8000530:	61bb      	str	r3, [r7, #24]
	  	  mot_maxonD(mot_maxon_valueD,dir_R);
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	4619      	mov	r1, r3
 8000536:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000538:	f000 fae4 	bl	8000b04 <mot_maxonD>

	  	  // Extraire les octets 5 à 8 pour le moteur gauche
	  	  char mot_maxon_dataG[4];
	  	  char direc_G[1];
	  	  strncpy(direc_G, (char *)&rx_data + 5, 1);
 800053c:	4937      	ldr	r1, [pc, #220]	@ (800061c <main+0x164>)
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	2201      	movs	r2, #1
 8000544:	4618      	mov	r0, r3
 8000546:	f005 f963 	bl	8005810 <strncpy>
	  	  strncpy(mot_maxon_dataG, (char *)&rx_data + 6, 4);
 800054a:	4935      	ldr	r1, [pc, #212]	@ (8000620 <main+0x168>)
 800054c:	f107 0314 	add.w	r3, r7, #20
 8000550:	2204      	movs	r2, #4
 8000552:	4618      	mov	r0, r3
 8000554:	f005 f95c 	bl	8005810 <strncpy>
	  	  //mot_maxon_dataG[4] = '\0'; // Null terminate
	  	  int mot_maxon_valueG = atoi(mot_maxon_dataG);
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	4618      	mov	r0, r3
 800055e:	f005 f8c7 	bl	80056f0 <atoi>
 8000562:	62b8      	str	r0, [r7, #40]	@ 0x28
	  	  int dir_G= atoi(direc_G);
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	4618      	mov	r0, r3
 800056a:	f005 f8c1 	bl	80056f0 <atoi>
 800056e:	4603      	mov	r3, r0
 8000570:	60fb      	str	r3, [r7, #12]
	  	  mot_maxonG(mot_maxon_valueG,dir_G);
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	4619      	mov	r1, r3
 8000576:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000578:	f000 faf0 	bl	8000b5c <mot_maxonG>

	  	  // Extraire les octets 5 à 8 pour le servo moteur
	  	  char servo_goal_data[1];
	  	  strncpy(servo_goal_data, (char *)&rx_data + 10, 1);
 800057c:	4929      	ldr	r1, [pc, #164]	@ (8000624 <main+0x16c>)
 800057e:	f107 0308 	add.w	r3, r7, #8
 8000582:	2201      	movs	r2, #1
 8000584:	4618      	mov	r0, r3
 8000586:	f005 f943 	bl	8005810 <strncpy>
	  	  //servo_goal_data[2] = '\0'; // Null terminate
	  	  int servo_goal_value = atoi(servo_goal_data);
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	4618      	mov	r0, r3
 8000590:	f005 f8ae 	bl	80056f0 <atoi>
 8000594:	6278      	str	r0, [r7, #36]	@ 0x24
	  	  reach_goal_servo(servo_goal_value);
 8000596:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000598:	f000 fb0c 	bl	8000bb4 <reach_goal_servo>

	  	  // Transmission pour debug
	  	  uint8_t newline[] = "\r\n\0";
 800059c:	f640 230d 	movw	r3, #2573	@ 0xa0d
 80005a0:	607b      	str	r3, [r7, #4]

	  	  HAL_UART_Transmit(&huart2, (uint8_t *)&dir_R, sizeof(dir_R), HAL_MAX_DELAY);
 80005a2:	f107 0118 	add.w	r1, r7, #24
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005aa:	2204      	movs	r2, #4
 80005ac:	481e      	ldr	r0, [pc, #120]	@ (8000628 <main+0x170>)
 80005ae:	f003 fd03 	bl	8003fb8 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart2, newline, sizeof(newline) - 1, HAL_MAX_DELAY);
 80005b2:	1d39      	adds	r1, r7, #4
 80005b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005b8:	2203      	movs	r2, #3
 80005ba:	481b      	ldr	r0, [pc, #108]	@ (8000628 <main+0x170>)
 80005bc:	f003 fcfc 	bl	8003fb8 <HAL_UART_Transmit>
	  	  //HAL_UART_Transmit(&huart2, (uint8_t *)mot_maxon_dataD, sizeof(mot_maxon_dataD), HAL_MAX_DELAY);
	  	  //HAL_UART_Transmit(&huart2, newline, sizeof(newline) - 1, HAL_MAX_DELAY);
	  	  //HAL_UART_Transmit(&huart2, (uint8_t *)&mot_maxon_valueD, sizeof(mot_maxon_valueD), HAL_MAX_DELAY);

	  	  //HAL_UART_Transmit(&huart2, newline, sizeof(newline) - 1, HAL_MAX_DELAY);
	  	  HAL_UART_Transmit(&huart2, (uint8_t *)&dir_G, sizeof(dir_G), HAL_MAX_DELAY);
 80005c0:	f107 010c 	add.w	r1, r7, #12
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005c8:	2204      	movs	r2, #4
 80005ca:	4817      	ldr	r0, [pc, #92]	@ (8000628 <main+0x170>)
 80005cc:	f003 fcf4 	bl	8003fb8 <HAL_UART_Transmit>
	  	  HAL_UART_Transmit(&huart2, newline, sizeof(newline) - 1, HAL_MAX_DELAY);
 80005d0:	1d39      	adds	r1, r7, #4
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005d6:	2203      	movs	r2, #3
 80005d8:	4813      	ldr	r0, [pc, #76]	@ (8000628 <main+0x170>)
 80005da:	f003 fced 	bl	8003fb8 <HAL_UART_Transmit>
	  	  //HAL_UART_Transmit(&huart2, (uint8_t *)&servo_goal_value, sizeof(servo_goal_value), HAL_MAX_DELAY);


	  	  //HAL_UART_Transmit(&huart2, newline, sizeof(newline) - 1, HAL_MAX_DELAY);

	  	  HAL_UART_Transmit(&huart2, (uint8_t *)rx_data, sizeof(rx_data), HAL_MAX_DELAY);
 80005de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005e2:	220b      	movs	r2, #11
 80005e4:	490a      	ldr	r1, [pc, #40]	@ (8000610 <main+0x158>)
 80005e6:	4810      	ldr	r0, [pc, #64]	@ (8000628 <main+0x170>)
 80005e8:	f003 fce6 	bl	8003fb8 <HAL_UART_Transmit>

	  	  HAL_UART_Transmit(&huart2, newline, sizeof(newline) - 1, HAL_MAX_DELAY);
 80005ec:	1d39      	adds	r1, r7, #4
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005f2:	2203      	movs	r2, #3
 80005f4:	480c      	ldr	r0, [pc, #48]	@ (8000628 <main+0x170>)
 80005f6:	f003 fcdf 	bl	8003fb8 <HAL_UART_Transmit>
	  	  // Réactiver la réception des données
	  	  HAL_UART_Receive_IT(&hlpuart1, rx_data, sizeof(rx_data));
 80005fa:	220b      	movs	r2, #11
 80005fc:	4904      	ldr	r1, [pc, #16]	@ (8000610 <main+0x158>)
 80005fe:	4805      	ldr	r0, [pc, #20]	@ (8000614 <main+0x15c>)
 8000600:	f003 fd64 	bl	80040cc <HAL_UART_Receive_IT>
  {
 8000604:	bf00      	nop
 8000606:	e779      	b.n	80004fc <main+0x44>
 8000608:	200001d4 	.word	0x200001d4
 800060c:	20000188 	.word	0x20000188
 8000610:	20000220 	.word	0x20000220
 8000614:	20000078 	.word	0x20000078
 8000618:	20000221 	.word	0x20000221
 800061c:	20000225 	.word	0x20000225
 8000620:	20000226 	.word	0x20000226
 8000624:	2000022a 	.word	0x2000022a
 8000628:	20000100 	.word	0x20000100

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b096      	sub	sp, #88	@ 0x58
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2244      	movs	r2, #68	@ 0x44
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f005 f8e0 	bl	8005800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800064e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000652:	f001 f873 	bl	800173c <HAL_PWREx_ControlVoltageScaling>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800065c:	f000 fa4c 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000668:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066a:	2310      	movs	r3, #16
 800066c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000672:	2302      	movs	r3, #2
 8000674:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000676:	2301      	movs	r3, #1
 8000678:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800067a:	230a      	movs	r3, #10
 800067c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800067e:	2307      	movs	r3, #7
 8000680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000686:	2302      	movs	r3, #2
 8000688:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4618      	mov	r0, r3
 8000690:	f001 f8aa 	bl	80017e8 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800069a:	f000 fa2d 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2303      	movs	r3, #3
 80006a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b4:	463b      	mov	r3, r7
 80006b6:	2104      	movs	r1, #4
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fc71 	bl	8001fa0 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006c4:	f000 fa18 	bl	8000af8 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3758      	adds	r7, #88	@ 0x58
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 80006d6:	4a13      	ldr	r2, [pc, #76]	@ (8000724 <MX_LPUART1_UART_Init+0x54>)
 80006d8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006da:	4b11      	ldr	r3, [pc, #68]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000706:	4b06      	ldr	r3, [pc, #24]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	@ (8000720 <MX_LPUART1_UART_Init+0x50>)
 800070e:	f003 fc05 	bl	8003f1c <HAL_UART_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000718:	f000 f9ee 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000078 	.word	0x20000078
 8000724:	40008000 	.word	0x40008000

08000728 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800072c:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 800072e:	4a15      	ldr	r2, [pc, #84]	@ (8000784 <MX_USART2_UART_Init+0x5c>)
 8000730:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000732:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	@ (8000780 <MX_USART2_UART_Init+0x58>)
 800076c:	f003 fbd6 	bl	8003f1c <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000776:	f000 f9bf 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000100 	.word	0x20000100
 8000784:	40004400 	.word	0x40004400

08000788 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b09a      	sub	sp, #104	@ 0x68
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
 80007b8:	615a      	str	r2, [r3, #20]
 80007ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	222c      	movs	r2, #44	@ 0x2c
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f005 f81c 	bl	8005800 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c8:	4b44      	ldr	r3, [pc, #272]	@ (80008dc <MX_TIM1_Init+0x154>)
 80007ca:	4a45      	ldr	r2, [pc, #276]	@ (80008e0 <MX_TIM1_Init+0x158>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1600-1;
 80007ce:	4b43      	ldr	r3, [pc, #268]	@ (80008dc <MX_TIM1_Init+0x154>)
 80007d0:	f240 623f 	movw	r2, #1599	@ 0x63f
 80007d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d6:	4b41      	ldr	r3, [pc, #260]	@ (80008dc <MX_TIM1_Init+0x154>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80007dc:	4b3f      	ldr	r3, [pc, #252]	@ (80008dc <MX_TIM1_Init+0x154>)
 80007de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b3d      	ldr	r3, [pc, #244]	@ (80008dc <MX_TIM1_Init+0x154>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ea:	4b3c      	ldr	r3, [pc, #240]	@ (80008dc <MX_TIM1_Init+0x154>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f0:	4b3a      	ldr	r3, [pc, #232]	@ (80008dc <MX_TIM1_Init+0x154>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007f6:	4839      	ldr	r0, [pc, #228]	@ (80008dc <MX_TIM1_Init+0x154>)
 80007f8:	f002 fab2 	bl	8002d60 <HAL_TIM_Base_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000802:	f000 f979 	bl	8000af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800080c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000810:	4619      	mov	r1, r3
 8000812:	4832      	ldr	r0, [pc, #200]	@ (80008dc <MX_TIM1_Init+0x154>)
 8000814:	f002 fd76 	bl	8003304 <HAL_TIM_ConfigClockSource>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800081e:	f000 f96b 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000822:	482e      	ldr	r0, [pc, #184]	@ (80008dc <MX_TIM1_Init+0x154>)
 8000824:	f002 faf3 	bl	8002e0e <HAL_TIM_PWM_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800082e:	f000 f963 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000836:	2300      	movs	r3, #0
 8000838:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800083e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000842:	4619      	mov	r1, r3
 8000844:	4825      	ldr	r0, [pc, #148]	@ (80008dc <MX_TIM1_Init+0x154>)
 8000846:	f003 fa63 	bl	8003d10 <HAL_TIMEx_MasterConfigSynchronization>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000850:	f000 f952 	bl	8000af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000854:	2360      	movs	r3, #96	@ 0x60
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085c:	2300      	movs	r3, #0
 800085e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000860:	2300      	movs	r3, #0
 8000862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000868:	2300      	movs	r3, #0
 800086a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086c:	2300      	movs	r3, #0
 800086e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000870:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000874:	2200      	movs	r2, #0
 8000876:	4619      	mov	r1, r3
 8000878:	4818      	ldr	r0, [pc, #96]	@ (80008dc <MX_TIM1_Init+0x154>)
 800087a:	f002 fc2f 	bl	80030dc <HAL_TIM_PWM_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000884:	f000 f938 	bl	8000af8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800089c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	@ (80008dc <MX_TIM1_Init+0x154>)
 80008be:	f003 faaf 	bl	8003e20 <HAL_TIMEx_ConfigBreakDeadTime>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80008c8:	f000 f916 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008cc:	4803      	ldr	r0, [pc, #12]	@ (80008dc <MX_TIM1_Init+0x154>)
 80008ce:	f000 fa87 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 80008d2:	bf00      	nop
 80008d4:	3768      	adds	r7, #104	@ 0x68
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000188 	.word	0x20000188
 80008e0:	40012c00 	.word	0x40012c00

080008e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08e      	sub	sp, #56	@ 0x38
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000904:	463b      	mov	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]
 8000912:	615a      	str	r2, [r3, #20]
 8000914:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000916:	4b33      	ldr	r3, [pc, #204]	@ (80009e4 <MX_TIM2_Init+0x100>)
 8000918:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800091c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800091e:	4b31      	ldr	r3, [pc, #196]	@ (80009e4 <MX_TIM2_Init+0x100>)
 8000920:	224f      	movs	r2, #79	@ 0x4f
 8000922:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b2f      	ldr	r3, [pc, #188]	@ (80009e4 <MX_TIM2_Init+0x100>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800092a:	4b2e      	ldr	r3, [pc, #184]	@ (80009e4 <MX_TIM2_Init+0x100>)
 800092c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000930:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b2c      	ldr	r3, [pc, #176]	@ (80009e4 <MX_TIM2_Init+0x100>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b2a      	ldr	r3, [pc, #168]	@ (80009e4 <MX_TIM2_Init+0x100>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800093e:	4829      	ldr	r0, [pc, #164]	@ (80009e4 <MX_TIM2_Init+0x100>)
 8000940:	f002 fa0e 	bl	8002d60 <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800094a:	f000 f8d5 	bl	8000af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000952:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000954:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000958:	4619      	mov	r1, r3
 800095a:	4822      	ldr	r0, [pc, #136]	@ (80009e4 <MX_TIM2_Init+0x100>)
 800095c:	f002 fcd2 	bl	8003304 <HAL_TIM_ConfigClockSource>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000966:	f000 f8c7 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800096a:	481e      	ldr	r0, [pc, #120]	@ (80009e4 <MX_TIM2_Init+0x100>)
 800096c:	f002 fa4f 	bl	8002e0e <HAL_TIM_PWM_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000976:	f000 f8bf 	bl	8000af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	4816      	ldr	r0, [pc, #88]	@ (80009e4 <MX_TIM2_Init+0x100>)
 800098a:	f003 f9c1 	bl	8003d10 <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000994:	f000 f8b0 	bl	8000af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000998:	2360      	movs	r3, #96	@ 0x60
 800099a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	2208      	movs	r2, #8
 80009ac:	4619      	mov	r1, r3
 80009ae:	480d      	ldr	r0, [pc, #52]	@ (80009e4 <MX_TIM2_Init+0x100>)
 80009b0:	f002 fb94 	bl	80030dc <HAL_TIM_PWM_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80009ba:	f000 f89d 	bl	8000af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009be:	463b      	mov	r3, r7
 80009c0:	220c      	movs	r2, #12
 80009c2:	4619      	mov	r1, r3
 80009c4:	4807      	ldr	r0, [pc, #28]	@ (80009e4 <MX_TIM2_Init+0x100>)
 80009c6:	f002 fb89 	bl	80030dc <HAL_TIM_PWM_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80009d0:	f000 f892 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009d4:	4803      	ldr	r0, [pc, #12]	@ (80009e4 <MX_TIM2_Init+0x100>)
 80009d6:	f000 fa03 	bl	8000de0 <HAL_TIM_MspPostInit>

}
 80009da:	bf00      	nop
 80009dc:	3738      	adds	r7, #56	@ 0x38
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200001d4 	.word	0x200001d4

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	4b36      	ldr	r3, [pc, #216]	@ (8000ad8 <MX_GPIO_Init+0xf0>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	4a35      	ldr	r2, [pc, #212]	@ (8000ad8 <MX_GPIO_Init+0xf0>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0a:	4b33      	ldr	r3, [pc, #204]	@ (8000ad8 <MX_GPIO_Init+0xf0>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a16:	4b30      	ldr	r3, [pc, #192]	@ (8000ad8 <MX_GPIO_Init+0xf0>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad8 <MX_GPIO_Init+0xf0>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a22:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad8 <MX_GPIO_Init+0xf0>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad8 <MX_GPIO_Init+0xf0>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	4a29      	ldr	r2, [pc, #164]	@ (8000ad8 <MX_GPIO_Init+0xf0>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3a:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <MX_GPIO_Init+0xf0>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <MX_GPIO_Init+0xf0>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	4a23      	ldr	r2, [pc, #140]	@ (8000ad8 <MX_GPIO_Init+0xf0>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <MX_GPIO_Init+0xf0>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2120      	movs	r1, #32
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a66:	f000 fe43 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8000a70:	481a      	ldr	r0, [pc, #104]	@ (8000adc <MX_GPIO_Init+0xf4>)
 8000a72:	f000 fe3d 	bl	80016f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a7c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4814      	ldr	r0, [pc, #80]	@ (8000ae0 <MX_GPIO_Init+0xf8>)
 8000a8e:	f000 fc85 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a92:	2320      	movs	r3, #32
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aac:	f000 fc76 	bl	800139c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8000ab0:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8000ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4804      	ldr	r0, [pc, #16]	@ (8000adc <MX_GPIO_Init+0xf4>)
 8000aca:	f000 fc67 	bl	800139c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ace:	bf00      	nop
 8000ad0:	3728      	adds	r7, #40	@ 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	48000400 	.word	0x48000400
 8000ae0:	48000800 	.word	0x48000800

08000ae4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <Error_Handler+0x8>

08000b04 <mot_maxonD>:
#include "main.h"

extern TIM_HandleTypeDef htim2;

// Function to control the right motor (Motor_R)
void mot_maxonD(int result, int direction) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
    if (direction == 1) {
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d10b      	bne.n	8000b2c <mot_maxonD+0x28>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);   // Set B4 high
 8000b14:	2201      	movs	r2, #1
 8000b16:	2110      	movs	r1, #16
 8000b18:	480e      	ldr	r0, [pc, #56]	@ (8000b54 <mot_maxonD+0x50>)
 8000b1a:	f000 fde9 	bl	80016f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET); // Set B8 low
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b24:	480b      	ldr	r0, [pc, #44]	@ (8000b54 <mot_maxonD+0x50>)
 8000b26:	f000 fde3 	bl	80016f0 <HAL_GPIO_WritePin>
 8000b2a:	e00a      	b.n	8000b42 <mot_maxonD+0x3e>
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // Set B4 low
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2110      	movs	r1, #16
 8000b30:	4808      	ldr	r0, [pc, #32]	@ (8000b54 <mot_maxonD+0x50>)
 8000b32:	f000 fddd 	bl	80016f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);   // Set B8 high
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b3c:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <mot_maxonD+0x50>)
 8000b3e:	f000 fdd7 	bl	80016f0 <HAL_GPIO_WritePin>
    }
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result);
 8000b42:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <mot_maxonD+0x54>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	48000400 	.word	0x48000400
 8000b58:	200001d4 	.word	0x200001d4

08000b5c <mot_maxonG>:

// Function to control the left motor (Motor_L)
void mot_maxonG(int result, int direction) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
 8000b64:	6039      	str	r1, [r7, #0]
    if (direction) {
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d00b      	beq.n	8000b84 <mot_maxonG+0x28>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);   // Set B9 high
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b72:	480e      	ldr	r0, [pc, #56]	@ (8000bac <mot_maxonG+0x50>)
 8000b74:	f000 fdbc 	bl	80016f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Set B5 low
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	480b      	ldr	r0, [pc, #44]	@ (8000bac <mot_maxonG+0x50>)
 8000b7e:	f000 fdb7 	bl	80016f0 <HAL_GPIO_WritePin>
 8000b82:	e00a      	b.n	8000b9a <mot_maxonG+0x3e>
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); // Set B9 low
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b8a:	4808      	ldr	r0, [pc, #32]	@ (8000bac <mot_maxonG+0x50>)
 8000b8c:	f000 fdb0 	bl	80016f0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);   // Set B5 high
 8000b90:	2201      	movs	r2, #1
 8000b92:	2120      	movs	r1, #32
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <mot_maxonG+0x50>)
 8000b96:	f000 fdab 	bl	80016f0 <HAL_GPIO_WritePin>
    }
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result);
 8000b9a:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <mot_maxonG+0x54>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	200001d4 	.word	0x200001d4

08000bb4 <reach_goal_servo>:
 *      Author: Antle
 */
#include "servo.h"
extern TIM_HandleTypeDef htim1;

void reach_goal_servo(int goal){
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
	if (goal==1){
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d103      	bne.n	8000bca <reach_goal_servo+0x16>
		TIM1->CCR1 = 5;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <reach_goal_servo+0x28>)
 8000bc4:	2205      	movs	r2, #5
 8000bc6:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	else{
		TIM1->CCR1 = 20;
	}

}
 8000bc8:	e002      	b.n	8000bd0 <reach_goal_servo+0x1c>
		TIM1->CCR1 = 20;
 8000bca:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <reach_goal_servo+0x28>)
 8000bcc:	2214      	movs	r2, #20
 8000bce:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	40012c00 	.word	0x40012c00

08000be0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bea:	4a0e      	ldr	r2, [pc, #56]	@ (8000c24 <HAL_MspInit+0x44>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <HAL_MspInit+0x44>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c02:	4a08      	ldr	r2, [pc, #32]	@ (8000c24 <HAL_MspInit+0x44>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c0a:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_MspInit+0x44>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000

08000c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0ae      	sub	sp, #184	@ 0xb8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	2288      	movs	r2, #136	@ 0x88
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f004 fdd9 	bl	8005800 <memset>
  if(huart->Instance==LPUART1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a46      	ldr	r2, [pc, #280]	@ (8000d6c <HAL_UART_MspInit+0x144>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d143      	bne.n	8000ce0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c58:	2320      	movs	r3, #32
 8000c5a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4618      	mov	r0, r3
 8000c66:	f001 fbbf 	bl	80023e8 <HAL_RCCEx_PeriphCLKConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c70:	f7ff ff42 	bl	8000af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c74:	4b3e      	ldr	r3, [pc, #248]	@ (8000d70 <HAL_UART_MspInit+0x148>)
 8000c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c78:	4a3d      	ldr	r2, [pc, #244]	@ (8000d70 <HAL_UART_MspInit+0x148>)
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000c80:	4b3b      	ldr	r3, [pc, #236]	@ (8000d70 <HAL_UART_MspInit+0x148>)
 8000c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	61bb      	str	r3, [r7, #24]
 8000c8a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8c:	4b38      	ldr	r3, [pc, #224]	@ (8000d70 <HAL_UART_MspInit+0x148>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c90:	4a37      	ldr	r2, [pc, #220]	@ (8000d70 <HAL_UART_MspInit+0x148>)
 8000c92:	f043 0304 	orr.w	r3, r3, #4
 8000c96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c98:	4b35      	ldr	r3, [pc, #212]	@ (8000d70 <HAL_UART_MspInit+0x148>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000cbc:	2308      	movs	r3, #8
 8000cbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	482a      	ldr	r0, [pc, #168]	@ (8000d74 <HAL_UART_MspInit+0x14c>)
 8000cca:	f000 fb67 	bl	800139c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2046      	movs	r0, #70	@ 0x46
 8000cd4:	f000 faad 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000cd8:	2046      	movs	r0, #70	@ 0x46
 8000cda:	f000 fac6 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cde:	e040      	b.n	8000d62 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a24      	ldr	r2, [pc, #144]	@ (8000d78 <HAL_UART_MspInit+0x150>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d13b      	bne.n	8000d62 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 fb76 	bl	80023e8 <HAL_RCCEx_PeriphCLKConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8000d02:	f7ff fef9 	bl	8000af8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d06:	4b1a      	ldr	r3, [pc, #104]	@ (8000d70 <HAL_UART_MspInit+0x148>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0a:	4a19      	ldr	r2, [pc, #100]	@ (8000d70 <HAL_UART_MspInit+0x148>)
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d12:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <HAL_UART_MspInit+0x148>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <HAL_UART_MspInit+0x148>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d22:	4a13      	ldr	r2, [pc, #76]	@ (8000d70 <HAL_UART_MspInit+0x148>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2a:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <HAL_UART_MspInit+0x148>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d36:	230c      	movs	r3, #12
 8000d38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4e:	2307      	movs	r3, #7
 8000d50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d5e:	f000 fb1d 	bl	800139c <HAL_GPIO_Init>
}
 8000d62:	bf00      	nop
 8000d64:	37b8      	adds	r7, #184	@ 0xb8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40008000 	.word	0x40008000
 8000d70:	40021000 	.word	0x40021000
 8000d74:	48000800 	.word	0x48000800
 8000d78:	40004400 	.word	0x40004400

08000d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a13      	ldr	r2, [pc, #76]	@ (8000dd8 <HAL_TIM_Base_MspInit+0x5c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d10c      	bne.n	8000da8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d8e:	4b13      	ldr	r3, [pc, #76]	@ (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d92:	4a12      	ldr	r2, [pc, #72]	@ (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000d94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d98:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000da6:	e010      	b.n	8000dca <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000db0:	d10b      	bne.n	8000dca <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000db2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db6:	4a09      	ldr	r2, [pc, #36]	@ (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <HAL_TIM_Base_MspInit+0x60>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60bb      	str	r3, [r7, #8]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40012c00 	.word	0x40012c00
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	@ 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a23      	ldr	r2, [pc, #140]	@ (8000e8c <HAL_TIM_MspPostInit+0xac>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d11e      	bne.n	8000e40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b23      	ldr	r3, [pc, #140]	@ (8000e90 <HAL_TIM_MspPostInit+0xb0>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	4a22      	ldr	r2, [pc, #136]	@ (8000e90 <HAL_TIM_MspPostInit+0xb0>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0e:	4b20      	ldr	r3, [pc, #128]	@ (8000e90 <HAL_TIM_MspPostInit+0xb0>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3a:	f000 faaf 	bl	800139c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e3e:	e021      	b.n	8000e84 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e48:	d11c      	bne.n	8000e84 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <HAL_TIM_MspPostInit+0xb0>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e4e:	4a10      	ldr	r2, [pc, #64]	@ (8000e90 <HAL_TIM_MspPostInit+0xb0>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <HAL_TIM_MspPostInit+0xb0>)
 8000e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e62:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e74:	2301      	movs	r3, #1
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <HAL_TIM_MspPostInit+0xb4>)
 8000e80:	f000 fa8c 	bl	800139c <HAL_GPIO_Init>
}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	@ 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40012c00 	.word	0x40012c00
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000400 	.word	0x48000400

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <NMI_Handler+0x4>

08000ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <HardFault_Handler+0x4>

08000ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <MemManage_Handler+0x4>

08000eb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eee:	f000 f8a5 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000efc:	4802      	ldr	r0, [pc, #8]	@ (8000f08 <LPUART1_IRQHandler+0x10>)
 8000efe:	f003 f931 	bl	8004164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000078 	.word	0x20000078

08000f0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <Reset_Handler>:
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f68 <LoopForever+0x2>
 8000f34:	f7ff ffea 	bl	8000f0c <SystemInit>
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <LoopForever+0x6>)
 8000f3a:	490d      	ldr	r1, [pc, #52]	@ (8000f70 <LoopForever+0xa>)
 8000f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f74 <LoopForever+0xe>)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:
 8000f42:	58d4      	ldr	r4, [r2, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:
 8000f48:	18c4      	adds	r4, r0, r3
 8000f4a:	428c      	cmp	r4, r1
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f78 <LoopForever+0x12>)
 8000f50:	4c0a      	ldr	r4, [pc, #40]	@ (8000f7c <LoopForever+0x16>)
 8000f52:	2300      	movs	r3, #0
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:
 8000f5a:	42a2      	cmp	r2, r4
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>
 8000f5e:	f004 fc71 	bl	8005844 <__libc_init_array>
 8000f62:	f7ff faa9 	bl	80004b8 <main>

08000f66 <LoopForever>:
 8000f66:	e7fe      	b.n	8000f66 <LoopForever>
 8000f68:	20018000 	.word	0x20018000
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	2000005c 	.word	0x2000005c
 8000f74:	08005a00 	.word	0x08005a00
 8000f78:	2000005c 	.word	0x2000005c
 8000f7c:	20000368 	.word	0x20000368

08000f80 <ADC1_2_IRQHandler>:
 8000f80:	e7fe      	b.n	8000f80 <ADC1_2_IRQHandler>
	...

08000f84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <HAL_Init+0x3c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a0b      	ldr	r2, [pc, #44]	@ (8000fc0 <HAL_Init+0x3c>)
 8000f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f98:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	f000 f93e 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 f80f 	bl	8000fc4 <HAL_InitTick>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	e001      	b.n	8000fb6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb2:	f7ff fe15 	bl	8000be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40022000 	.word	0x40022000

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fd0:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <HAL_InitTick+0x6c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d023      	beq.n	8001020 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fd8:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <HAL_InitTick+0x70>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <HAL_InitTick+0x6c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f949 	bl	8001286 <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10f      	bne.n	800101a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d809      	bhi.n	8001014 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001008:	f000 f913 	bl	8001232 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800100c:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <HAL_InitTick+0x74>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e007      	b.n	8001024 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e004      	b.n	8001024 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e001      	b.n	8001024 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008
 8001034:	20000000 	.word	0x20000000
 8001038:	20000004 	.word	0x20000004

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000008 	.word	0x20000008
 8001060:	2000022c 	.word	0x2000022c

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	2000022c 	.word	0x2000022c

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	@ (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4907      	ldr	r1, [pc, #28]	@ (8001118 <__NVIC_EnableIRQ+0x38>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	@ (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	@ (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	@ 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011fc:	f7ff ff8e 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	@ (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff29 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff3e 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff8e 	bl	8001170 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5d 	bl	800111c <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff31 	bl	80010e0 <__NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffa2 	bl	80011d8 <SysTick_Config>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800129e:	b480      	push	{r7}
 80012a0:	b085      	sub	sp, #20
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d008      	beq.n	80012c8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2204      	movs	r2, #4
 80012ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e022      	b.n	800130e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f022 020e 	bic.w	r2, r2, #14
 80012d6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0201 	bic.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ec:	f003 021c 	and.w	r2, r3, #28
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	2101      	movs	r1, #1
 80012f6:	fa01 f202 	lsl.w	r2, r1, r2
 80012fa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d005      	beq.n	800133e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2204      	movs	r2, #4
 8001336:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	e029      	b.n	8001392 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f022 020e 	bic.w	r2, r2, #14
 800134c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0201 	bic.w	r2, r2, #1
 800135c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	f003 021c 	and.w	r2, r3, #28
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136a:	2101      	movs	r1, #1
 800136c:	fa01 f202 	lsl.w	r2, r1, r2
 8001370:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	4798      	blx	r3
    }
  }
  return status;
 8001392:	7bfb      	ldrb	r3, [r7, #15]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013aa:	e17f      	b.n	80016ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2101      	movs	r1, #1
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	4013      	ands	r3, r2
 80013ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 8171 	beq.w	80016a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d005      	beq.n	80013dc <HAL_GPIO_Init+0x40>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d130      	bne.n	800143e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68da      	ldr	r2, [r3, #12]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001412:	2201      	movs	r2, #1
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	f003 0201 	and.w	r2, r3, #1
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b03      	cmp	r3, #3
 8001448:	d118      	bne.n	800147c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001450:	2201      	movs	r2, #1
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	08db      	lsrs	r3, r3, #3
 8001466:	f003 0201 	and.w	r2, r3, #1
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b03      	cmp	r3, #3
 8001486:	d017      	beq.n	80014b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	2203      	movs	r2, #3
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d123      	bne.n	800150c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	08da      	lsrs	r2, r3, #3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3208      	adds	r2, #8
 80014cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	220f      	movs	r2, #15
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4013      	ands	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	08da      	lsrs	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3208      	adds	r2, #8
 8001506:	6939      	ldr	r1, [r7, #16]
 8001508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	2203      	movs	r2, #3
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0203 	and.w	r2, r3, #3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80ac 	beq.w	80016a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	4b5f      	ldr	r3, [pc, #380]	@ (80016cc <HAL_GPIO_Init+0x330>)
 8001550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001552:	4a5e      	ldr	r2, [pc, #376]	@ (80016cc <HAL_GPIO_Init+0x330>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6613      	str	r3, [r2, #96]	@ 0x60
 800155a:	4b5c      	ldr	r3, [pc, #368]	@ (80016cc <HAL_GPIO_Init+0x330>)
 800155c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001566:	4a5a      	ldr	r2, [pc, #360]	@ (80016d0 <HAL_GPIO_Init+0x334>)
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	089b      	lsrs	r3, r3, #2
 800156c:	3302      	adds	r3, #2
 800156e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	220f      	movs	r2, #15
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43db      	mvns	r3, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001590:	d025      	beq.n	80015de <HAL_GPIO_Init+0x242>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4f      	ldr	r2, [pc, #316]	@ (80016d4 <HAL_GPIO_Init+0x338>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d01f      	beq.n	80015da <HAL_GPIO_Init+0x23e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4e      	ldr	r2, [pc, #312]	@ (80016d8 <HAL_GPIO_Init+0x33c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d019      	beq.n	80015d6 <HAL_GPIO_Init+0x23a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4d      	ldr	r2, [pc, #308]	@ (80016dc <HAL_GPIO_Init+0x340>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d013      	beq.n	80015d2 <HAL_GPIO_Init+0x236>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4c      	ldr	r2, [pc, #304]	@ (80016e0 <HAL_GPIO_Init+0x344>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d00d      	beq.n	80015ce <HAL_GPIO_Init+0x232>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4b      	ldr	r2, [pc, #300]	@ (80016e4 <HAL_GPIO_Init+0x348>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d007      	beq.n	80015ca <HAL_GPIO_Init+0x22e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4a      	ldr	r2, [pc, #296]	@ (80016e8 <HAL_GPIO_Init+0x34c>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d101      	bne.n	80015c6 <HAL_GPIO_Init+0x22a>
 80015c2:	2306      	movs	r3, #6
 80015c4:	e00c      	b.n	80015e0 <HAL_GPIO_Init+0x244>
 80015c6:	2307      	movs	r3, #7
 80015c8:	e00a      	b.n	80015e0 <HAL_GPIO_Init+0x244>
 80015ca:	2305      	movs	r3, #5
 80015cc:	e008      	b.n	80015e0 <HAL_GPIO_Init+0x244>
 80015ce:	2304      	movs	r3, #4
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x244>
 80015d2:	2303      	movs	r3, #3
 80015d4:	e004      	b.n	80015e0 <HAL_GPIO_Init+0x244>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e002      	b.n	80015e0 <HAL_GPIO_Init+0x244>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <HAL_GPIO_Init+0x244>
 80015de:	2300      	movs	r3, #0
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	f002 0203 	and.w	r2, r2, #3
 80015e6:	0092      	lsls	r2, r2, #2
 80015e8:	4093      	lsls	r3, r2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015f0:	4937      	ldr	r1, [pc, #220]	@ (80016d0 <HAL_GPIO_Init+0x334>)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	3302      	adds	r3, #2
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015fe:	4b3b      	ldr	r3, [pc, #236]	@ (80016ec <HAL_GPIO_Init+0x350>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001622:	4a32      	ldr	r2, [pc, #200]	@ (80016ec <HAL_GPIO_Init+0x350>)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001628:	4b30      	ldr	r3, [pc, #192]	@ (80016ec <HAL_GPIO_Init+0x350>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800164c:	4a27      	ldr	r2, [pc, #156]	@ (80016ec <HAL_GPIO_Init+0x350>)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001652:	4b26      	ldr	r3, [pc, #152]	@ (80016ec <HAL_GPIO_Init+0x350>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001676:	4a1d      	ldr	r2, [pc, #116]	@ (80016ec <HAL_GPIO_Init+0x350>)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800167c:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <HAL_GPIO_Init+0x350>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016a0:	4a12      	ldr	r2, [pc, #72]	@ (80016ec <HAL_GPIO_Init+0x350>)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa22 f303 	lsr.w	r3, r2, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f47f ae78 	bne.w	80013ac <HAL_GPIO_Init+0x10>
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	371c      	adds	r7, #28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40010000 	.word	0x40010000
 80016d4:	48000400 	.word	0x48000400
 80016d8:	48000800 	.word	0x48000800
 80016dc:	48000c00 	.word	0x48000c00
 80016e0:	48001000 	.word	0x48001000
 80016e4:	48001400 	.word	0x48001400
 80016e8:	48001800 	.word	0x48001800
 80016ec:	40010400 	.word	0x40010400

080016f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
 80016fc:	4613      	mov	r3, r2
 80016fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001700:	787b      	ldrb	r3, [r7, #1]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800170c:	e002      	b.n	8001714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800170e:	887a      	ldrh	r2, [r7, #2]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001724:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <HAL_PWREx_GetVoltageRange+0x18>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40007000 	.word	0x40007000

0800173c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800174a:	d130      	bne.n	80017ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800174c:	4b23      	ldr	r3, [pc, #140]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001758:	d038      	beq.n	80017cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800175a:	4b20      	ldr	r3, [pc, #128]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001762:	4a1e      	ldr	r2, [pc, #120]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001764:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001768:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800176a:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2232      	movs	r2, #50	@ 0x32
 8001770:	fb02 f303 	mul.w	r3, r2, r3
 8001774:	4a1b      	ldr	r2, [pc, #108]	@ (80017e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001776:	fba2 2303 	umull	r2, r3, r2, r3
 800177a:	0c9b      	lsrs	r3, r3, #18
 800177c:	3301      	adds	r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001780:	e002      	b.n	8001788 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3b01      	subs	r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001788:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001794:	d102      	bne.n	800179c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f2      	bne.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800179c:	4b0f      	ldr	r3, [pc, #60]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017a8:	d110      	bne.n	80017cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e00f      	b.n	80017ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017ae:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017ba:	d007      	beq.n	80017cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017bc:	4b07      	ldr	r3, [pc, #28]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017c4:	4a05      	ldr	r2, [pc, #20]	@ (80017dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40007000 	.word	0x40007000
 80017e0:	20000000 	.word	0x20000000
 80017e4:	431bde83 	.word	0x431bde83

080017e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e3ca      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017fa:	4b97      	ldr	r3, [pc, #604]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001804:	4b94      	ldr	r3, [pc, #592]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80e4 	beq.w	80019e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d007      	beq.n	8001832 <HAL_RCC_OscConfig+0x4a>
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	2b0c      	cmp	r3, #12
 8001826:	f040 808b 	bne.w	8001940 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2b01      	cmp	r3, #1
 800182e:	f040 8087 	bne.w	8001940 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001832:	4b89      	ldr	r3, [pc, #548]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d005      	beq.n	800184a <HAL_RCC_OscConfig+0x62>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e3a2      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1a      	ldr	r2, [r3, #32]
 800184e:	4b82      	ldr	r3, [pc, #520]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <HAL_RCC_OscConfig+0x7c>
 800185a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001862:	e005      	b.n	8001870 <HAL_RCC_OscConfig+0x88>
 8001864:	4b7c      	ldr	r3, [pc, #496]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 8001866:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001870:	4293      	cmp	r3, r2
 8001872:	d223      	bcs.n	80018bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	4618      	mov	r0, r3
 800187a:	f000 fd55 	bl	8002328 <RCC_SetFlashLatencyFromMSIRange>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e383      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001888:	4b73      	ldr	r3, [pc, #460]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a72      	ldr	r2, [pc, #456]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 800188e:	f043 0308 	orr.w	r3, r3, #8
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b70      	ldr	r3, [pc, #448]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	496d      	ldr	r1, [pc, #436]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	4968      	ldr	r1, [pc, #416]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]
 80018ba:	e025      	b.n	8001908 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018bc:	4b66      	ldr	r3, [pc, #408]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a65      	ldr	r2, [pc, #404]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 80018c2:	f043 0308 	orr.w	r3, r3, #8
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b63      	ldr	r3, [pc, #396]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4960      	ldr	r1, [pc, #384]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018da:	4b5f      	ldr	r3, [pc, #380]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	495b      	ldr	r1, [pc, #364]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d109      	bne.n	8001908 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 fd15 	bl	8002328 <RCC_SetFlashLatencyFromMSIRange>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e343      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001908:	f000 fc4a 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 800190c:	4602      	mov	r2, r0
 800190e:	4b52      	ldr	r3, [pc, #328]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	4950      	ldr	r1, [pc, #320]	@ (8001a5c <HAL_RCC_OscConfig+0x274>)
 800191a:	5ccb      	ldrb	r3, [r1, r3]
 800191c:	f003 031f 	and.w	r3, r3, #31
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
 8001924:	4a4e      	ldr	r2, [pc, #312]	@ (8001a60 <HAL_RCC_OscConfig+0x278>)
 8001926:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001928:	4b4e      	ldr	r3, [pc, #312]	@ (8001a64 <HAL_RCC_OscConfig+0x27c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fb49 	bl	8000fc4 <HAL_InitTick>
 8001932:	4603      	mov	r3, r0
 8001934:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d052      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	e327      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d032      	beq.n	80019ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001948:	4b43      	ldr	r3, [pc, #268]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a42      	ldr	r2, [pc, #264]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001954:	f7ff fb86 	bl	8001064 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800195c:	f7ff fb82 	bl	8001064 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e310      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800196e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800197a:	4b37      	ldr	r3, [pc, #220]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a36      	ldr	r2, [pc, #216]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 8001980:	f043 0308 	orr.w	r3, r3, #8
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	4b34      	ldr	r3, [pc, #208]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	4931      	ldr	r1, [pc, #196]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 8001994:	4313      	orrs	r3, r2
 8001996:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001998:	4b2f      	ldr	r3, [pc, #188]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	492c      	ldr	r1, [pc, #176]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
 80019ac:	e01a      	b.n	80019e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a29      	ldr	r2, [pc, #164]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 80019b4:	f023 0301 	bic.w	r3, r3, #1
 80019b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019ba:	f7ff fb53 	bl	8001064 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019c2:	f7ff fb4f 	bl	8001064 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e2dd      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019d4:	4b20      	ldr	r3, [pc, #128]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f0      	bne.n	80019c2 <HAL_RCC_OscConfig+0x1da>
 80019e0:	e000      	b.n	80019e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d074      	beq.n	8001ada <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d005      	beq.n	8001a02 <HAL_RCC_OscConfig+0x21a>
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	2b0c      	cmp	r3, #12
 80019fa:	d10e      	bne.n	8001a1a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d10b      	bne.n	8001a1a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a02:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d064      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x2f0>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d160      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e2ba      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x24a>
 8001a24:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0b      	ldr	r2, [pc, #44]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e026      	b.n	8001a80 <HAL_RCC_OscConfig+0x298>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a3a:	d115      	bne.n	8001a68 <HAL_RCC_OscConfig+0x280>
 8001a3c:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a05      	ldr	r2, [pc, #20]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 8001a42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b03      	ldr	r3, [pc, #12]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a02      	ldr	r2, [pc, #8]	@ (8001a58 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e014      	b.n	8001a80 <HAL_RCC_OscConfig+0x298>
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	080058a4 	.word	0x080058a4
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000004 	.word	0x20000004
 8001a68:	4ba0      	ldr	r3, [pc, #640]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a9f      	ldr	r2, [pc, #636]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4b9d      	ldr	r3, [pc, #628]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a9c      	ldr	r2, [pc, #624]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d013      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7ff faec 	bl	8001064 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff fae8 	bl	8001064 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	@ 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e276      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa2:	4b92      	ldr	r3, [pc, #584]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0x2a8>
 8001aae:	e014      	b.n	8001ada <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fad8 	bl	8001064 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fad4 	bl	8001064 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	@ 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e262      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aca:	4b88      	ldr	r3, [pc, #544]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x2d0>
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d060      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_OscConfig+0x310>
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	2b0c      	cmp	r3, #12
 8001af0:	d119      	bne.n	8001b26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d116      	bne.n	8001b26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001af8:	4b7c      	ldr	r3, [pc, #496]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_OscConfig+0x328>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e23f      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4b76      	ldr	r3, [pc, #472]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	061b      	lsls	r3, r3, #24
 8001b1e:	4973      	ldr	r1, [pc, #460]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b24:	e040      	b.n	8001ba8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d023      	beq.n	8001b76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b2e:	4b6f      	ldr	r3, [pc, #444]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a6e      	ldr	r2, [pc, #440]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fa93 	bl	8001064 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b42:	f7ff fa8f 	bl	8001064 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e21d      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b54:	4b65      	ldr	r3, [pc, #404]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b60:	4b62      	ldr	r3, [pc, #392]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	061b      	lsls	r3, r3, #24
 8001b6e:	495f      	ldr	r1, [pc, #380]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
 8001b74:	e018      	b.n	8001ba8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b76:	4b5d      	ldr	r3, [pc, #372]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a5c      	ldr	r2, [pc, #368]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001b7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b82:	f7ff fa6f 	bl	8001064 <HAL_GetTick>
 8001b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8a:	f7ff fa6b 	bl	8001064 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e1f9      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b9c:	4b53      	ldr	r3, [pc, #332]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f0      	bne.n	8001b8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0308 	and.w	r3, r3, #8
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d03c      	beq.n	8001c2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01c      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bbc:	4b4b      	ldr	r3, [pc, #300]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bc2:	4a4a      	ldr	r2, [pc, #296]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bcc:	f7ff fa4a 	bl	8001064 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd4:	f7ff fa46 	bl	8001064 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1d4      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001be6:	4b41      	ldr	r3, [pc, #260]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0ef      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x3ec>
 8001bf4:	e01b      	b.n	8001c2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bfc:	4a3b      	ldr	r2, [pc, #236]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c06:	f7ff fa2d 	bl	8001064 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0e:	f7ff fa29 	bl	8001064 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e1b7      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c20:	4b32      	ldr	r3, [pc, #200]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1ef      	bne.n	8001c0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 80a6 	beq.w	8001d88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c40:	4b2a      	ldr	r3, [pc, #168]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10d      	bne.n	8001c68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4c:	4b27      	ldr	r3, [pc, #156]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c50:	4a26      	ldr	r2, [pc, #152]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c56:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c58:	4b24      	ldr	r3, [pc, #144]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c64:	2301      	movs	r3, #1
 8001c66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c68:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <HAL_RCC_OscConfig+0x508>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d118      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c74:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <HAL_RCC_OscConfig+0x508>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf0 <HAL_RCC_OscConfig+0x508>)
 8001c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c80:	f7ff f9f0 	bl	8001064 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c88:	f7ff f9ec 	bl	8001064 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e17a      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_RCC_OscConfig+0x508>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d108      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x4d8>
 8001cae:	4b0f      	ldr	r3, [pc, #60]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cbe:	e029      	b.n	8001d14 <HAL_RCC_OscConfig+0x52c>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d115      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x50c>
 8001cc8:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cce:	4a07      	ldr	r2, [pc, #28]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cd8:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cde:	4a03      	ldr	r2, [pc, #12]	@ (8001cec <HAL_RCC_OscConfig+0x504>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ce8:	e014      	b.n	8001d14 <HAL_RCC_OscConfig+0x52c>
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40007000 	.word	0x40007000
 8001cf4:	4b9c      	ldr	r3, [pc, #624]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cfa:	4a9b      	ldr	r2, [pc, #620]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d04:	4b98      	ldr	r3, [pc, #608]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d0a:	4a97      	ldr	r2, [pc, #604]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d016      	beq.n	8001d4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1c:	f7ff f9a2 	bl	8001064 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d22:	e00a      	b.n	8001d3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d24:	f7ff f99e 	bl	8001064 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e12a      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3a:	4b8b      	ldr	r3, [pc, #556]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0ed      	beq.n	8001d24 <HAL_RCC_OscConfig+0x53c>
 8001d48:	e015      	b.n	8001d76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4a:	f7ff f98b 	bl	8001064 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7ff f987 	bl	8001064 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e113      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d68:	4b7f      	ldr	r3, [pc, #508]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ed      	bne.n	8001d52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d76:	7ffb      	ldrb	r3, [r7, #31]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d105      	bne.n	8001d88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7c:	4b7a      	ldr	r3, [pc, #488]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d80:	4a79      	ldr	r2, [pc, #484]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001d82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d86:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80fe 	beq.w	8001f8e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	f040 80d0 	bne.w	8001f3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d9c:	4b72      	ldr	r3, [pc, #456]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 0203 	and.w	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d130      	bne.n	8001e12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d127      	bne.n	8001e12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d11f      	bne.n	8001e12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ddc:	2a07      	cmp	r2, #7
 8001dde:	bf14      	ite	ne
 8001de0:	2201      	movne	r2, #1
 8001de2:	2200      	moveq	r2, #0
 8001de4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d113      	bne.n	8001e12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df4:	085b      	lsrs	r3, r3, #1
 8001df6:	3b01      	subs	r3, #1
 8001df8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d109      	bne.n	8001e12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	085b      	lsrs	r3, r3, #1
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d06e      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	2b0c      	cmp	r3, #12
 8001e16:	d069      	beq.n	8001eec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e18:	4b53      	ldr	r3, [pc, #332]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e24:	4b50      	ldr	r3, [pc, #320]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0ad      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e34:	4b4c      	ldr	r3, [pc, #304]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a4b      	ldr	r2, [pc, #300]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001e3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e40:	f7ff f910 	bl	8001064 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e48:	f7ff f90c 	bl	8001064 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e09a      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e5a:	4b43      	ldr	r3, [pc, #268]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e66:	4b40      	ldr	r3, [pc, #256]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	4b40      	ldr	r3, [pc, #256]	@ (8001f6c <HAL_RCC_OscConfig+0x784>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e76:	3a01      	subs	r2, #1
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	4311      	orrs	r1, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e80:	0212      	lsls	r2, r2, #8
 8001e82:	4311      	orrs	r1, r2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e88:	0852      	lsrs	r2, r2, #1
 8001e8a:	3a01      	subs	r2, #1
 8001e8c:	0552      	lsls	r2, r2, #21
 8001e8e:	4311      	orrs	r1, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e94:	0852      	lsrs	r2, r2, #1
 8001e96:	3a01      	subs	r2, #1
 8001e98:	0652      	lsls	r2, r2, #25
 8001e9a:	4311      	orrs	r1, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ea0:	0912      	lsrs	r2, r2, #4
 8001ea2:	0452      	lsls	r2, r2, #17
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	4930      	ldr	r1, [pc, #192]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001eac:	4b2e      	ldr	r3, [pc, #184]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a2d      	ldr	r2, [pc, #180]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001eb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ec2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ec4:	f7ff f8ce 	bl	8001064 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ecc:	f7ff f8ca 	bl	8001064 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e058      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ede:	4b22      	ldr	r3, [pc, #136]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eea:	e050      	b.n	8001f8e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e04f      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d148      	bne.n	8001f8e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001efc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a19      	ldr	r2, [pc, #100]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001f02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f08:	4b17      	ldr	r3, [pc, #92]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4a16      	ldr	r2, [pc, #88]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001f0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f14:	f7ff f8a6 	bl	8001064 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff f8a2 	bl	8001064 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e030      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x734>
 8001f3a:	e028      	b.n	8001f8e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d023      	beq.n	8001f8a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a08      	ldr	r2, [pc, #32]	@ (8001f68 <HAL_RCC_OscConfig+0x780>)
 8001f48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4e:	f7ff f889 	bl	8001064 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f54:	e00c      	b.n	8001f70 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f56:	f7ff f885 	bl	8001064 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d905      	bls.n	8001f70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e013      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f70:	4b09      	ldr	r3, [pc, #36]	@ (8001f98 <HAL_RCC_OscConfig+0x7b0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1ec      	bne.n	8001f56 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <HAL_RCC_OscConfig+0x7b0>)
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	4905      	ldr	r1, [pc, #20]	@ (8001f98 <HAL_RCC_OscConfig+0x7b0>)
 8001f82:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <HAL_RCC_OscConfig+0x7b4>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	60cb      	str	r3, [r1, #12]
 8001f88:	e001      	b.n	8001f8e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	feeefffc 	.word	0xfeeefffc

08001fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0e7      	b.n	8002184 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b75      	ldr	r3, [pc, #468]	@ (800218c <HAL_RCC_ClockConfig+0x1ec>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d910      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	4b72      	ldr	r3, [pc, #456]	@ (800218c <HAL_RCC_ClockConfig+0x1ec>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 0207 	bic.w	r2, r3, #7
 8001fca:	4970      	ldr	r1, [pc, #448]	@ (800218c <HAL_RCC_ClockConfig+0x1ec>)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b6e      	ldr	r3, [pc, #440]	@ (800218c <HAL_RCC_ClockConfig+0x1ec>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0cf      	b.n	8002184 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d010      	beq.n	8002012 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	4b66      	ldr	r3, [pc, #408]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d908      	bls.n	8002012 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002000:	4b63      	ldr	r3, [pc, #396]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4960      	ldr	r1, [pc, #384]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d04c      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b03      	cmp	r3, #3
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002026:	4b5a      	ldr	r3, [pc, #360]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d121      	bne.n	8002076 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e0a6      	b.n	8002184 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800203e:	4b54      	ldr	r3, [pc, #336]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d115      	bne.n	8002076 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e09a      	b.n	8002184 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d107      	bne.n	8002066 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002056:	4b4e      	ldr	r3, [pc, #312]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d109      	bne.n	8002076 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e08e      	b.n	8002184 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002066:	4b4a      	ldr	r3, [pc, #296]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e086      	b.n	8002184 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b46      	ldr	r3, [pc, #280]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4943      	ldr	r1, [pc, #268]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffec 	bl	8001064 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffe8 	bl	8001064 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e06e      	b.n	8002184 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b3a      	ldr	r3, [pc, #232]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d010      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	4b31      	ldr	r3, [pc, #196]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d208      	bcs.n	80020e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d4:	4b2e      	ldr	r3, [pc, #184]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	492b      	ldr	r1, [pc, #172]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020e6:	4b29      	ldr	r3, [pc, #164]	@ (800218c <HAL_RCC_ClockConfig+0x1ec>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d210      	bcs.n	8002116 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f4:	4b25      	ldr	r3, [pc, #148]	@ (800218c <HAL_RCC_ClockConfig+0x1ec>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f023 0207 	bic.w	r2, r3, #7
 80020fc:	4923      	ldr	r1, [pc, #140]	@ (800218c <HAL_RCC_ClockConfig+0x1ec>)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002104:	4b21      	ldr	r3, [pc, #132]	@ (800218c <HAL_RCC_ClockConfig+0x1ec>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d001      	beq.n	8002116 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e036      	b.n	8002184 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0304 	and.w	r3, r3, #4
 800211e:	2b00      	cmp	r3, #0
 8002120:	d008      	beq.n	8002134 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002122:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	4918      	ldr	r1, [pc, #96]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 8002130:	4313      	orrs	r3, r2
 8002132:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0308 	and.w	r3, r3, #8
 800213c:	2b00      	cmp	r3, #0
 800213e:	d009      	beq.n	8002154 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002140:	4b13      	ldr	r3, [pc, #76]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4910      	ldr	r1, [pc, #64]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 8002150:	4313      	orrs	r3, r2
 8002152:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002154:	f000 f824 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 8002158:	4602      	mov	r2, r0
 800215a:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <HAL_RCC_ClockConfig+0x1f0>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	091b      	lsrs	r3, r3, #4
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	490b      	ldr	r1, [pc, #44]	@ (8002194 <HAL_RCC_ClockConfig+0x1f4>)
 8002166:	5ccb      	ldrb	r3, [r1, r3]
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	4a09      	ldr	r2, [pc, #36]	@ (8002198 <HAL_RCC_ClockConfig+0x1f8>)
 8002172:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002174:	4b09      	ldr	r3, [pc, #36]	@ (800219c <HAL_RCC_ClockConfig+0x1fc>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe ff23 	bl	8000fc4 <HAL_InitTick>
 800217e:	4603      	mov	r3, r0
 8002180:	72fb      	strb	r3, [r7, #11]

  return status;
 8002182:	7afb      	ldrb	r3, [r7, #11]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40022000 	.word	0x40022000
 8002190:	40021000 	.word	0x40021000
 8002194:	080058a4 	.word	0x080058a4
 8002198:	20000000 	.word	0x20000000
 800219c:	20000004 	.word	0x20000004

080021a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	@ 0x24
 80021a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ae:	4b3e      	ldr	r3, [pc, #248]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
 80021b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b8:	4b3b      	ldr	r3, [pc, #236]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x34>
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	2b0c      	cmp	r3, #12
 80021cc:	d121      	bne.n	8002212 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d11e      	bne.n	8002212 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021d4:	4b34      	ldr	r3, [pc, #208]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d107      	bne.n	80021f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021e0:	4b31      	ldr	r3, [pc, #196]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021e6:	0a1b      	lsrs	r3, r3, #8
 80021e8:	f003 030f 	and.w	r3, r3, #15
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	e005      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021f0:	4b2d      	ldr	r3, [pc, #180]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021fc:	4a2b      	ldr	r2, [pc, #172]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002204:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10d      	bne.n	8002228 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002210:	e00a      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b04      	cmp	r3, #4
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002218:	4b25      	ldr	r3, [pc, #148]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	e004      	b.n	8002228 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b08      	cmp	r3, #8
 8002222:	d101      	bne.n	8002228 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002224:	4b23      	ldr	r3, [pc, #140]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002226:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b0c      	cmp	r3, #12
 800222c:	d134      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222e:	4b1e      	ldr	r3, [pc, #120]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d003      	beq.n	8002246 <HAL_RCC_GetSysClockFreq+0xa6>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d003      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0xac>
 8002244:	e005      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002246:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002248:	617b      	str	r3, [r7, #20]
      break;
 800224a:	e005      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800224c:	4b19      	ldr	r3, [pc, #100]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800224e:	617b      	str	r3, [r7, #20]
      break;
 8002250:	e002      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	617b      	str	r3, [r7, #20]
      break;
 8002256:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002258:	4b13      	ldr	r3, [pc, #76]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	091b      	lsrs	r3, r3, #4
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	3301      	adds	r3, #1
 8002264:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002266:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	fb03 f202 	mul.w	r2, r3, r2
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	fbb2 f3f3 	udiv	r3, r2, r3
 800227c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227e:	4b0a      	ldr	r3, [pc, #40]	@ (80022a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	0e5b      	lsrs	r3, r3, #25
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	3301      	adds	r3, #1
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002298:	69bb      	ldr	r3, [r7, #24]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3724      	adds	r7, #36	@ 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000
 80022ac:	080058bc 	.word	0x080058bc
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	007a1200 	.word	0x007a1200

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	@ (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000000 	.word	0x20000000

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	@ (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	080058b4 	.word	0x080058b4

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	@ (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	080058b4 	.word	0x080058b4

08002328 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002330:	2300      	movs	r3, #0
 8002332:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002334:	4b2a      	ldr	r3, [pc, #168]	@ (80023e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002338:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002340:	f7ff f9ee 	bl	8001720 <HAL_PWREx_GetVoltageRange>
 8002344:	6178      	str	r0, [r7, #20]
 8002346:	e014      	b.n	8002372 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002348:	4b25      	ldr	r3, [pc, #148]	@ (80023e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800234a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234c:	4a24      	ldr	r2, [pc, #144]	@ (80023e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800234e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002352:	6593      	str	r3, [r2, #88]	@ 0x58
 8002354:	4b22      	ldr	r3, [pc, #136]	@ (80023e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002360:	f7ff f9de 	bl	8001720 <HAL_PWREx_GetVoltageRange>
 8002364:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002366:	4b1e      	ldr	r3, [pc, #120]	@ (80023e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236a:	4a1d      	ldr	r2, [pc, #116]	@ (80023e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800236c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002370:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002378:	d10b      	bne.n	8002392 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b80      	cmp	r3, #128	@ 0x80
 800237e:	d919      	bls.n	80023b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2ba0      	cmp	r3, #160	@ 0xa0
 8002384:	d902      	bls.n	800238c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002386:	2302      	movs	r3, #2
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	e013      	b.n	80023b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800238c:	2301      	movs	r3, #1
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	e010      	b.n	80023b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b80      	cmp	r3, #128	@ 0x80
 8002396:	d902      	bls.n	800239e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002398:	2303      	movs	r3, #3
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	e00a      	b.n	80023b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b80      	cmp	r3, #128	@ 0x80
 80023a2:	d102      	bne.n	80023aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023a4:	2302      	movs	r3, #2
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	e004      	b.n	80023b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b70      	cmp	r3, #112	@ 0x70
 80023ae:	d101      	bne.n	80023b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023b0:	2301      	movs	r3, #1
 80023b2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023b4:	4b0b      	ldr	r3, [pc, #44]	@ (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f023 0207 	bic.w	r2, r3, #7
 80023bc:	4909      	ldr	r1, [pc, #36]	@ (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023c4:	4b07      	ldr	r3, [pc, #28]	@ (80023e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d001      	beq.n	80023d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40022000 	.word	0x40022000

080023e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023f0:	2300      	movs	r3, #0
 80023f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023f4:	2300      	movs	r3, #0
 80023f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002400:	2b00      	cmp	r3, #0
 8002402:	d041      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002408:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800240c:	d02a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800240e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002412:	d824      	bhi.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002414:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002418:	d008      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800241a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800241e:	d81e      	bhi.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002424:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002428:	d010      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800242a:	e018      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800242c:	4b86      	ldr	r3, [pc, #536]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a85      	ldr	r2, [pc, #532]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002432:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002436:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002438:	e015      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3304      	adds	r3, #4
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fabb 	bl	80029bc <RCCEx_PLLSAI1_Config>
 8002446:	4603      	mov	r3, r0
 8002448:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800244a:	e00c      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3320      	adds	r3, #32
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fba6 	bl	8002ba4 <RCCEx_PLLSAI2_Config>
 8002458:	4603      	mov	r3, r0
 800245a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800245c:	e003      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	74fb      	strb	r3, [r7, #19]
      break;
 8002462:	e000      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002466:	7cfb      	ldrb	r3, [r7, #19]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10b      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800246c:	4b76      	ldr	r3, [pc, #472]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002472:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800247a:	4973      	ldr	r1, [pc, #460]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002482:	e001      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d041      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002498:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800249c:	d02a      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800249e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80024a2:	d824      	bhi.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024a8:	d008      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024ae:	d81e      	bhi.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80024b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b8:	d010      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024ba:	e018      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024bc:	4b62      	ldr	r3, [pc, #392]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a61      	ldr	r2, [pc, #388]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024c8:	e015      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 fa73 	bl	80029bc <RCCEx_PLLSAI1_Config>
 80024d6:	4603      	mov	r3, r0
 80024d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024da:	e00c      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3320      	adds	r3, #32
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fb5e 	bl	8002ba4 <RCCEx_PLLSAI2_Config>
 80024e8:	4603      	mov	r3, r0
 80024ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024ec:	e003      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	74fb      	strb	r3, [r7, #19]
      break;
 80024f2:	e000      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80024f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10b      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024fc:	4b52      	ldr	r3, [pc, #328]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002502:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800250a:	494f      	ldr	r1, [pc, #316]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002512:	e001      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80a0 	beq.w	8002666 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800252a:	4b47      	ldr	r3, [pc, #284]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800253a:	2300      	movs	r3, #0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00d      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002540:	4b41      	ldr	r3, [pc, #260]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002544:	4a40      	ldr	r2, [pc, #256]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800254a:	6593      	str	r3, [r2, #88]	@ 0x58
 800254c:	4b3e      	ldr	r3, [pc, #248]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002558:	2301      	movs	r3, #1
 800255a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800255c:	4b3b      	ldr	r3, [pc, #236]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a3a      	ldr	r2, [pc, #232]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002562:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002566:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002568:	f7fe fd7c 	bl	8001064 <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800256e:	e009      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002570:	f7fe fd78 	bl	8001064 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d902      	bls.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	74fb      	strb	r3, [r7, #19]
        break;
 8002582:	e005      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002584:	4b31      	ldr	r3, [pc, #196]	@ (800264c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0ef      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d15c      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002596:	4b2c      	ldr	r3, [pc, #176]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01f      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d019      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025b4:	4b24      	ldr	r3, [pc, #144]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025c0:	4b21      	ldr	r3, [pc, #132]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c6:	4a20      	ldr	r2, [pc, #128]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025e0:	4a19      	ldr	r2, [pc, #100]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f2:	f7fe fd37 	bl	8001064 <HAL_GetTick>
 80025f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f8:	e00b      	b.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7fe fd33 	bl	8001064 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d902      	bls.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	74fb      	strb	r3, [r7, #19]
            break;
 8002610:	e006      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002612:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ec      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10c      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002626:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002636:	4904      	ldr	r1, [pc, #16]	@ (8002648 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800263e:	e009      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002640:	7cfb      	ldrb	r3, [r7, #19]
 8002642:	74bb      	strb	r3, [r7, #18]
 8002644:	e006      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002646:	bf00      	nop
 8002648:	40021000 	.word	0x40021000
 800264c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002654:	7c7b      	ldrb	r3, [r7, #17]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d105      	bne.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800265a:	4b9e      	ldr	r3, [pc, #632]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265e:	4a9d      	ldr	r2, [pc, #628]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002660:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002664:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002672:	4b98      	ldr	r3, [pc, #608]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002678:	f023 0203 	bic.w	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002680:	4994      	ldr	r1, [pc, #592]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00a      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002694:	4b8f      	ldr	r3, [pc, #572]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269a:	f023 020c 	bic.w	r2, r3, #12
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a2:	498c      	ldr	r1, [pc, #560]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026b6:	4b87      	ldr	r3, [pc, #540]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c4:	4983      	ldr	r1, [pc, #524]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026d8:	4b7e      	ldr	r3, [pc, #504]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e6:	497b      	ldr	r1, [pc, #492]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026fa:	4b76      	ldr	r3, [pc, #472]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002700:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002708:	4972      	ldr	r1, [pc, #456]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800271c:	4b6d      	ldr	r3, [pc, #436]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002722:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272a:	496a      	ldr	r1, [pc, #424]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800273e:	4b65      	ldr	r3, [pc, #404]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002744:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274c:	4961      	ldr	r1, [pc, #388]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002760:	4b5c      	ldr	r3, [pc, #368]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002766:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800276e:	4959      	ldr	r1, [pc, #356]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002782:	4b54      	ldr	r3, [pc, #336]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002788:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002790:	4950      	ldr	r1, [pc, #320]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027a4:	4b4b      	ldr	r3, [pc, #300]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b2:	4948      	ldr	r1, [pc, #288]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027c6:	4b43      	ldr	r3, [pc, #268]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d4:	493f      	ldr	r1, [pc, #252]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d028      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027e8:	4b3a      	ldr	r3, [pc, #232]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027f6:	4937      	ldr	r1, [pc, #220]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002802:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002806:	d106      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002808:	4b32      	ldr	r3, [pc, #200]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4a31      	ldr	r2, [pc, #196]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002812:	60d3      	str	r3, [r2, #12]
 8002814:	e011      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800281a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800281e:	d10c      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3304      	adds	r3, #4
 8002824:	2101      	movs	r1, #1
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f8c8 	bl	80029bc <RCCEx_PLLSAI1_Config>
 800282c:	4603      	mov	r3, r0
 800282e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002836:	7cfb      	ldrb	r3, [r7, #19]
 8002838:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d028      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002846:	4b23      	ldr	r3, [pc, #140]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002854:	491f      	ldr	r1, [pc, #124]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002860:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002864:	d106      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002866:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	4a1a      	ldr	r2, [pc, #104]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002870:	60d3      	str	r3, [r2, #12]
 8002872:	e011      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002878:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800287c:	d10c      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3304      	adds	r3, #4
 8002882:	2101      	movs	r1, #1
 8002884:	4618      	mov	r0, r3
 8002886:	f000 f899 	bl	80029bc <RCCEx_PLLSAI1_Config>
 800288a:	4603      	mov	r3, r0
 800288c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800288e:	7cfb      	ldrb	r3, [r7, #19]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002894:	7cfb      	ldrb	r3, [r7, #19]
 8002896:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d02b      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028a4:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028b2:	4908      	ldr	r1, [pc, #32]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028c2:	d109      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c4:	4b03      	ldr	r3, [pc, #12]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a02      	ldr	r2, [pc, #8]	@ (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ce:	60d3      	str	r3, [r2, #12]
 80028d0:	e014      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80028d2:	bf00      	nop
 80028d4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028e0:	d10c      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3304      	adds	r3, #4
 80028e6:	2101      	movs	r1, #1
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f867 	bl	80029bc <RCCEx_PLLSAI1_Config>
 80028ee:	4603      	mov	r3, r0
 80028f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028f2:	7cfb      	ldrb	r3, [r7, #19]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d02f      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002908:	4b2b      	ldr	r3, [pc, #172]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002916:	4928      	ldr	r1, [pc, #160]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002922:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002926:	d10d      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3304      	adds	r3, #4
 800292c:	2102      	movs	r1, #2
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f844 	bl	80029bc <RCCEx_PLLSAI1_Config>
 8002934:	4603      	mov	r3, r0
 8002936:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002938:	7cfb      	ldrb	r3, [r7, #19]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d014      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800293e:	7cfb      	ldrb	r3, [r7, #19]
 8002940:	74bb      	strb	r3, [r7, #18]
 8002942:	e011      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002948:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800294c:	d10c      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3320      	adds	r3, #32
 8002952:	2102      	movs	r1, #2
 8002954:	4618      	mov	r0, r3
 8002956:	f000 f925 	bl	8002ba4 <RCCEx_PLLSAI2_Config>
 800295a:	4603      	mov	r3, r0
 800295c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800295e:	7cfb      	ldrb	r3, [r7, #19]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00a      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002974:	4b10      	ldr	r3, [pc, #64]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002982:	490d      	ldr	r1, [pc, #52]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002996:	4b08      	ldr	r3, [pc, #32]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800299c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80029a6:	4904      	ldr	r1, [pc, #16]	@ (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80029ae:	7cbb      	ldrb	r3, [r7, #18]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000

080029bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029ca:	4b75      	ldr	r3, [pc, #468]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d018      	beq.n	8002a08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80029d6:	4b72      	ldr	r3, [pc, #456]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f003 0203 	and.w	r2, r3, #3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d10d      	bne.n	8002a02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
       ||
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d009      	beq.n	8002a02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80029ee:	4b6c      	ldr	r3, [pc, #432]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
       ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d047      	beq.n	8002a92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
 8002a06:	e044      	b.n	8002a92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d018      	beq.n	8002a42 <RCCEx_PLLSAI1_Config+0x86>
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d825      	bhi.n	8002a60 <RCCEx_PLLSAI1_Config+0xa4>
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d002      	beq.n	8002a1e <RCCEx_PLLSAI1_Config+0x62>
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d009      	beq.n	8002a30 <RCCEx_PLLSAI1_Config+0x74>
 8002a1c:	e020      	b.n	8002a60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a1e:	4b60      	ldr	r3, [pc, #384]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d11d      	bne.n	8002a66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a2e:	e01a      	b.n	8002a66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a30:	4b5b      	ldr	r3, [pc, #364]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d116      	bne.n	8002a6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a40:	e013      	b.n	8002a6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a42:	4b57      	ldr	r3, [pc, #348]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10f      	bne.n	8002a6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a4e:	4b54      	ldr	r3, [pc, #336]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a5e:	e006      	b.n	8002a6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      break;
 8002a64:	e004      	b.n	8002a70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a66:	bf00      	nop
 8002a68:	e002      	b.n	8002a70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e000      	b.n	8002a70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10d      	bne.n	8002a92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6819      	ldr	r1, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	4944      	ldr	r1, [pc, #272]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d17d      	bne.n	8002b94 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a98:	4b41      	ldr	r3, [pc, #260]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a40      	ldr	r2, [pc, #256]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002aa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa4:	f7fe fade 	bl	8001064 <HAL_GetTick>
 8002aa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002aaa:	e009      	b.n	8002ac0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002aac:	f7fe fada 	bl	8001064 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d902      	bls.n	8002ac0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	73fb      	strb	r3, [r7, #15]
        break;
 8002abe:	e005      	b.n	8002acc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ac0:	4b37      	ldr	r3, [pc, #220]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1ef      	bne.n	8002aac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d160      	bne.n	8002b94 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d111      	bne.n	8002afc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ad8:	4b31      	ldr	r3, [pc, #196]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6892      	ldr	r2, [r2, #8]
 8002ae8:	0211      	lsls	r1, r2, #8
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68d2      	ldr	r2, [r2, #12]
 8002aee:	0912      	lsrs	r2, r2, #4
 8002af0:	0452      	lsls	r2, r2, #17
 8002af2:	430a      	orrs	r2, r1
 8002af4:	492a      	ldr	r1, [pc, #168]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	610b      	str	r3, [r1, #16]
 8002afa:	e027      	b.n	8002b4c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d112      	bne.n	8002b28 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b02:	4b27      	ldr	r3, [pc, #156]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002b0a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6892      	ldr	r2, [r2, #8]
 8002b12:	0211      	lsls	r1, r2, #8
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6912      	ldr	r2, [r2, #16]
 8002b18:	0852      	lsrs	r2, r2, #1
 8002b1a:	3a01      	subs	r2, #1
 8002b1c:	0552      	lsls	r2, r2, #21
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	491f      	ldr	r1, [pc, #124]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	610b      	str	r3, [r1, #16]
 8002b26:	e011      	b.n	8002b4c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b30:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6892      	ldr	r2, [r2, #8]
 8002b38:	0211      	lsls	r1, r2, #8
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6952      	ldr	r2, [r2, #20]
 8002b3e:	0852      	lsrs	r2, r2, #1
 8002b40:	3a01      	subs	r2, #1
 8002b42:	0652      	lsls	r2, r2, #25
 8002b44:	430a      	orrs	r2, r1
 8002b46:	4916      	ldr	r1, [pc, #88]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a13      	ldr	r2, [pc, #76]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b58:	f7fe fa84 	bl	8001064 <HAL_GetTick>
 8002b5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b5e:	e009      	b.n	8002b74 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b60:	f7fe fa80 	bl	8001064 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d902      	bls.n	8002b74 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	73fb      	strb	r3, [r7, #15]
          break;
 8002b72:	e005      	b.n	8002b80 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b74:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0ef      	beq.n	8002b60 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d106      	bne.n	8002b94 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	4904      	ldr	r1, [pc, #16]	@ (8002ba0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d018      	beq.n	8002bf0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bbe:	4b67      	ldr	r3, [pc, #412]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f003 0203 	and.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d10d      	bne.n	8002bea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
       ||
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002bd6:	4b61      	ldr	r3, [pc, #388]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	091b      	lsrs	r3, r3, #4
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
       ||
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d047      	beq.n	8002c7a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
 8002bee:	e044      	b.n	8002c7a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b03      	cmp	r3, #3
 8002bf6:	d018      	beq.n	8002c2a <RCCEx_PLLSAI2_Config+0x86>
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d825      	bhi.n	8002c48 <RCCEx_PLLSAI2_Config+0xa4>
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d002      	beq.n	8002c06 <RCCEx_PLLSAI2_Config+0x62>
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d009      	beq.n	8002c18 <RCCEx_PLLSAI2_Config+0x74>
 8002c04:	e020      	b.n	8002c48 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c06:	4b55      	ldr	r3, [pc, #340]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d11d      	bne.n	8002c4e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c16:	e01a      	b.n	8002c4e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c18:	4b50      	ldr	r3, [pc, #320]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d116      	bne.n	8002c52 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c28:	e013      	b.n	8002c52 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c2a:	4b4c      	ldr	r3, [pc, #304]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10f      	bne.n	8002c56 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c36:	4b49      	ldr	r3, [pc, #292]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d109      	bne.n	8002c56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c46:	e006      	b.n	8002c56 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c4c:	e004      	b.n	8002c58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e002      	b.n	8002c58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c52:	bf00      	nop
 8002c54:	e000      	b.n	8002c58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002c56:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10d      	bne.n	8002c7a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6819      	ldr	r1, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	430b      	orrs	r3, r1
 8002c74:	4939      	ldr	r1, [pc, #228]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d167      	bne.n	8002d50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c80:	4b36      	ldr	r3, [pc, #216]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a35      	ldr	r2, [pc, #212]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c8c:	f7fe f9ea 	bl	8001064 <HAL_GetTick>
 8002c90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c92:	e009      	b.n	8002ca8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c94:	f7fe f9e6 	bl	8001064 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d902      	bls.n	8002ca8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ca6:	e005      	b.n	8002cb4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ca8:	4b2c      	ldr	r3, [pc, #176]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1ef      	bne.n	8002c94 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d14a      	bne.n	8002d50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d111      	bne.n	8002ce4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cc0:	4b26      	ldr	r3, [pc, #152]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6892      	ldr	r2, [r2, #8]
 8002cd0:	0211      	lsls	r1, r2, #8
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68d2      	ldr	r2, [r2, #12]
 8002cd6:	0912      	lsrs	r2, r2, #4
 8002cd8:	0452      	lsls	r2, r2, #17
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	491f      	ldr	r1, [pc, #124]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	614b      	str	r3, [r1, #20]
 8002ce2:	e011      	b.n	8002d08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002cec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6892      	ldr	r2, [r2, #8]
 8002cf4:	0211      	lsls	r1, r2, #8
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6912      	ldr	r2, [r2, #16]
 8002cfa:	0852      	lsrs	r2, r2, #1
 8002cfc:	3a01      	subs	r2, #1
 8002cfe:	0652      	lsls	r2, r2, #25
 8002d00:	430a      	orrs	r2, r1
 8002d02:	4916      	ldr	r1, [pc, #88]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d08:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a13      	ldr	r2, [pc, #76]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d14:	f7fe f9a6 	bl	8001064 <HAL_GetTick>
 8002d18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d1a:	e009      	b.n	8002d30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d1c:	f7fe f9a2 	bl	8001064 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d902      	bls.n	8002d30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	73fb      	strb	r3, [r7, #15]
          break;
 8002d2e:	e005      	b.n	8002d3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d30:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0ef      	beq.n	8002d1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d106      	bne.n	8002d50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002d42:	4b06      	ldr	r3, [pc, #24]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4904      	ldr	r1, [pc, #16]	@ (8002d5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40021000 	.word	0x40021000

08002d60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e049      	b.n	8002e06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd fff8 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4610      	mov	r0, r2
 8002da0:	f000 fb7a 	bl	8003498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e049      	b.n	8002eb4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d106      	bne.n	8002e3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f841 	bl	8002ebc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	f000 fb23 	bl	8003498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <HAL_TIM_PWM_Start+0x24>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	bf14      	ite	ne
 8002eec:	2301      	movne	r3, #1
 8002eee:	2300      	moveq	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	e03c      	b.n	8002f6e <HAL_TIM_PWM_Start+0x9e>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d109      	bne.n	8002f0e <HAL_TIM_PWM_Start+0x3e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	bf14      	ite	ne
 8002f06:	2301      	movne	r3, #1
 8002f08:	2300      	moveq	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	e02f      	b.n	8002f6e <HAL_TIM_PWM_Start+0x9e>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d109      	bne.n	8002f28 <HAL_TIM_PWM_Start+0x58>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	bf14      	ite	ne
 8002f20:	2301      	movne	r3, #1
 8002f22:	2300      	moveq	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e022      	b.n	8002f6e <HAL_TIM_PWM_Start+0x9e>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	d109      	bne.n	8002f42 <HAL_TIM_PWM_Start+0x72>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	bf14      	ite	ne
 8002f3a:	2301      	movne	r3, #1
 8002f3c:	2300      	moveq	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	e015      	b.n	8002f6e <HAL_TIM_PWM_Start+0x9e>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b10      	cmp	r3, #16
 8002f46:	d109      	bne.n	8002f5c <HAL_TIM_PWM_Start+0x8c>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	bf14      	ite	ne
 8002f54:	2301      	movne	r3, #1
 8002f56:	2300      	moveq	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	e008      	b.n	8002f6e <HAL_TIM_PWM_Start+0x9e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	bf14      	ite	ne
 8002f68:	2301      	movne	r3, #1
 8002f6a:	2300      	moveq	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e09c      	b.n	80030b0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d104      	bne.n	8002f86 <HAL_TIM_PWM_Start+0xb6>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f84:	e023      	b.n	8002fce <HAL_TIM_PWM_Start+0xfe>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d104      	bne.n	8002f96 <HAL_TIM_PWM_Start+0xc6>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f94:	e01b      	b.n	8002fce <HAL_TIM_PWM_Start+0xfe>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_PWM_Start+0xd6>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fa4:	e013      	b.n	8002fce <HAL_TIM_PWM_Start+0xfe>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b0c      	cmp	r3, #12
 8002faa:	d104      	bne.n	8002fb6 <HAL_TIM_PWM_Start+0xe6>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fb4:	e00b      	b.n	8002fce <HAL_TIM_PWM_Start+0xfe>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	d104      	bne.n	8002fc6 <HAL_TIM_PWM_Start+0xf6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fc4:	e003      	b.n	8002fce <HAL_TIM_PWM_Start+0xfe>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	6839      	ldr	r1, [r7, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fe74 	bl	8003cc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a35      	ldr	r2, [pc, #212]	@ (80030b8 <HAL_TIM_PWM_Start+0x1e8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <HAL_TIM_PWM_Start+0x13e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a34      	ldr	r2, [pc, #208]	@ (80030bc <HAL_TIM_PWM_Start+0x1ec>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d00e      	beq.n	800300e <HAL_TIM_PWM_Start+0x13e>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a32      	ldr	r2, [pc, #200]	@ (80030c0 <HAL_TIM_PWM_Start+0x1f0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d009      	beq.n	800300e <HAL_TIM_PWM_Start+0x13e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a31      	ldr	r2, [pc, #196]	@ (80030c4 <HAL_TIM_PWM_Start+0x1f4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d004      	beq.n	800300e <HAL_TIM_PWM_Start+0x13e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a2f      	ldr	r2, [pc, #188]	@ (80030c8 <HAL_TIM_PWM_Start+0x1f8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d101      	bne.n	8003012 <HAL_TIM_PWM_Start+0x142>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_TIM_PWM_Start+0x144>
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d007      	beq.n	8003028 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003026:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a22      	ldr	r2, [pc, #136]	@ (80030b8 <HAL_TIM_PWM_Start+0x1e8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d01d      	beq.n	800306e <HAL_TIM_PWM_Start+0x19e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800303a:	d018      	beq.n	800306e <HAL_TIM_PWM_Start+0x19e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a22      	ldr	r2, [pc, #136]	@ (80030cc <HAL_TIM_PWM_Start+0x1fc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d013      	beq.n	800306e <HAL_TIM_PWM_Start+0x19e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a21      	ldr	r2, [pc, #132]	@ (80030d0 <HAL_TIM_PWM_Start+0x200>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00e      	beq.n	800306e <HAL_TIM_PWM_Start+0x19e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1f      	ldr	r2, [pc, #124]	@ (80030d4 <HAL_TIM_PWM_Start+0x204>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d009      	beq.n	800306e <HAL_TIM_PWM_Start+0x19e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a17      	ldr	r2, [pc, #92]	@ (80030bc <HAL_TIM_PWM_Start+0x1ec>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d004      	beq.n	800306e <HAL_TIM_PWM_Start+0x19e>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a15      	ldr	r2, [pc, #84]	@ (80030c0 <HAL_TIM_PWM_Start+0x1f0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d115      	bne.n	800309a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	4b18      	ldr	r3, [pc, #96]	@ (80030d8 <HAL_TIM_PWM_Start+0x208>)
 8003076:	4013      	ands	r3, r2
 8003078:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b06      	cmp	r3, #6
 800307e:	d015      	beq.n	80030ac <HAL_TIM_PWM_Start+0x1dc>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003086:	d011      	beq.n	80030ac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0201 	orr.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003098:	e008      	b.n	80030ac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	e000      	b.n	80030ae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40012c00 	.word	0x40012c00
 80030bc:	40013400 	.word	0x40013400
 80030c0:	40014000 	.word	0x40014000
 80030c4:	40014400 	.word	0x40014400
 80030c8:	40014800 	.word	0x40014800
 80030cc:	40000400 	.word	0x40000400
 80030d0:	40000800 	.word	0x40000800
 80030d4:	40000c00 	.word	0x40000c00
 80030d8:	00010007 	.word	0x00010007

080030dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e0ff      	b.n	80032fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b14      	cmp	r3, #20
 8003106:	f200 80f0 	bhi.w	80032ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800310a:	a201      	add	r2, pc, #4	@ (adr r2, 8003110 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003110:	08003165 	.word	0x08003165
 8003114:	080032eb 	.word	0x080032eb
 8003118:	080032eb 	.word	0x080032eb
 800311c:	080032eb 	.word	0x080032eb
 8003120:	080031a5 	.word	0x080031a5
 8003124:	080032eb 	.word	0x080032eb
 8003128:	080032eb 	.word	0x080032eb
 800312c:	080032eb 	.word	0x080032eb
 8003130:	080031e7 	.word	0x080031e7
 8003134:	080032eb 	.word	0x080032eb
 8003138:	080032eb 	.word	0x080032eb
 800313c:	080032eb 	.word	0x080032eb
 8003140:	08003227 	.word	0x08003227
 8003144:	080032eb 	.word	0x080032eb
 8003148:	080032eb 	.word	0x080032eb
 800314c:	080032eb 	.word	0x080032eb
 8003150:	08003269 	.word	0x08003269
 8003154:	080032eb 	.word	0x080032eb
 8003158:	080032eb 	.word	0x080032eb
 800315c:	080032eb 	.word	0x080032eb
 8003160:	080032a9 	.word	0x080032a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fa3a 	bl	80035e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0208 	orr.w	r2, r2, #8
 800317e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0204 	bic.w	r2, r2, #4
 800318e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6999      	ldr	r1, [r3, #24]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	619a      	str	r2, [r3, #24]
      break;
 80031a2:	e0a5      	b.n	80032f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 faaa 	bl	8003704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6999      	ldr	r1, [r3, #24]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	021a      	lsls	r2, r3, #8
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	619a      	str	r2, [r3, #24]
      break;
 80031e4:	e084      	b.n	80032f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fb13 	bl	8003818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0208 	orr.w	r2, r2, #8
 8003200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0204 	bic.w	r2, r2, #4
 8003210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69d9      	ldr	r1, [r3, #28]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	61da      	str	r2, [r3, #28]
      break;
 8003224:	e064      	b.n	80032f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fb7b 	bl	8003928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69d9      	ldr	r1, [r3, #28]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	021a      	lsls	r2, r3, #8
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	61da      	str	r2, [r3, #28]
      break;
 8003266:	e043      	b.n	80032f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fbc4 	bl	80039fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0208 	orr.w	r2, r2, #8
 8003282:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0204 	bic.w	r2, r2, #4
 8003292:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	691a      	ldr	r2, [r3, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80032a6:	e023      	b.n	80032f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fc08 	bl	8003ac4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	021a      	lsls	r2, r3, #8
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80032e8:	e002      	b.n	80032f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	75fb      	strb	r3, [r7, #23]
      break;
 80032ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop

08003304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_TIM_ConfigClockSource+0x1c>
 800331c:	2302      	movs	r3, #2
 800331e:	e0b6      	b.n	800348e <HAL_TIM_ConfigClockSource+0x18a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800333e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800334a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800335c:	d03e      	beq.n	80033dc <HAL_TIM_ConfigClockSource+0xd8>
 800335e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003362:	f200 8087 	bhi.w	8003474 <HAL_TIM_ConfigClockSource+0x170>
 8003366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800336a:	f000 8086 	beq.w	800347a <HAL_TIM_ConfigClockSource+0x176>
 800336e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003372:	d87f      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x170>
 8003374:	2b70      	cmp	r3, #112	@ 0x70
 8003376:	d01a      	beq.n	80033ae <HAL_TIM_ConfigClockSource+0xaa>
 8003378:	2b70      	cmp	r3, #112	@ 0x70
 800337a:	d87b      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x170>
 800337c:	2b60      	cmp	r3, #96	@ 0x60
 800337e:	d050      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x11e>
 8003380:	2b60      	cmp	r3, #96	@ 0x60
 8003382:	d877      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x170>
 8003384:	2b50      	cmp	r3, #80	@ 0x50
 8003386:	d03c      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0xfe>
 8003388:	2b50      	cmp	r3, #80	@ 0x50
 800338a:	d873      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x170>
 800338c:	2b40      	cmp	r3, #64	@ 0x40
 800338e:	d058      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x13e>
 8003390:	2b40      	cmp	r3, #64	@ 0x40
 8003392:	d86f      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x170>
 8003394:	2b30      	cmp	r3, #48	@ 0x30
 8003396:	d064      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x15e>
 8003398:	2b30      	cmp	r3, #48	@ 0x30
 800339a:	d86b      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x170>
 800339c:	2b20      	cmp	r3, #32
 800339e:	d060      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x15e>
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d867      	bhi.n	8003474 <HAL_TIM_ConfigClockSource+0x170>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d05c      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x15e>
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d05a      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x15e>
 80033ac:	e062      	b.n	8003474 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033be:	f000 fc61 	bl	8003c84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80033d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	609a      	str	r2, [r3, #8]
      break;
 80033da:	e04f      	b.n	800347c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033ec:	f000 fc4a 	bl	8003c84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033fe:	609a      	str	r2, [r3, #8]
      break;
 8003400:	e03c      	b.n	800347c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800340e:	461a      	mov	r2, r3
 8003410:	f000 fbbe 	bl	8003b90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2150      	movs	r1, #80	@ 0x50
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fc17 	bl	8003c4e <TIM_ITRx_SetConfig>
      break;
 8003420:	e02c      	b.n	800347c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800342e:	461a      	mov	r2, r3
 8003430:	f000 fbdd 	bl	8003bee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2160      	movs	r1, #96	@ 0x60
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fc07 	bl	8003c4e <TIM_ITRx_SetConfig>
      break;
 8003440:	e01c      	b.n	800347c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800344e:	461a      	mov	r2, r3
 8003450:	f000 fb9e 	bl	8003b90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2140      	movs	r1, #64	@ 0x40
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fbf7 	bl	8003c4e <TIM_ITRx_SetConfig>
      break;
 8003460:	e00c      	b.n	800347c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4619      	mov	r1, r3
 800346c:	4610      	mov	r0, r2
 800346e:	f000 fbee 	bl	8003c4e <TIM_ITRx_SetConfig>
      break;
 8003472:	e003      	b.n	800347c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
      break;
 8003478:	e000      	b.n	800347c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800347a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800348c:	7bfb      	ldrb	r3, [r7, #15]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a46      	ldr	r2, [pc, #280]	@ (80035c4 <TIM_Base_SetConfig+0x12c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d013      	beq.n	80034d8 <TIM_Base_SetConfig+0x40>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b6:	d00f      	beq.n	80034d8 <TIM_Base_SetConfig+0x40>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a43      	ldr	r2, [pc, #268]	@ (80035c8 <TIM_Base_SetConfig+0x130>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00b      	beq.n	80034d8 <TIM_Base_SetConfig+0x40>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a42      	ldr	r2, [pc, #264]	@ (80035cc <TIM_Base_SetConfig+0x134>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d007      	beq.n	80034d8 <TIM_Base_SetConfig+0x40>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a41      	ldr	r2, [pc, #260]	@ (80035d0 <TIM_Base_SetConfig+0x138>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d003      	beq.n	80034d8 <TIM_Base_SetConfig+0x40>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a40      	ldr	r2, [pc, #256]	@ (80035d4 <TIM_Base_SetConfig+0x13c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d108      	bne.n	80034ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a35      	ldr	r2, [pc, #212]	@ (80035c4 <TIM_Base_SetConfig+0x12c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d01f      	beq.n	8003532 <TIM_Base_SetConfig+0x9a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f8:	d01b      	beq.n	8003532 <TIM_Base_SetConfig+0x9a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a32      	ldr	r2, [pc, #200]	@ (80035c8 <TIM_Base_SetConfig+0x130>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d017      	beq.n	8003532 <TIM_Base_SetConfig+0x9a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a31      	ldr	r2, [pc, #196]	@ (80035cc <TIM_Base_SetConfig+0x134>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <TIM_Base_SetConfig+0x9a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a30      	ldr	r2, [pc, #192]	@ (80035d0 <TIM_Base_SetConfig+0x138>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00f      	beq.n	8003532 <TIM_Base_SetConfig+0x9a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a2f      	ldr	r2, [pc, #188]	@ (80035d4 <TIM_Base_SetConfig+0x13c>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00b      	beq.n	8003532 <TIM_Base_SetConfig+0x9a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a2e      	ldr	r2, [pc, #184]	@ (80035d8 <TIM_Base_SetConfig+0x140>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d007      	beq.n	8003532 <TIM_Base_SetConfig+0x9a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a2d      	ldr	r2, [pc, #180]	@ (80035dc <TIM_Base_SetConfig+0x144>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d003      	beq.n	8003532 <TIM_Base_SetConfig+0x9a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a2c      	ldr	r2, [pc, #176]	@ (80035e0 <TIM_Base_SetConfig+0x148>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d108      	bne.n	8003544 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a16      	ldr	r2, [pc, #88]	@ (80035c4 <TIM_Base_SetConfig+0x12c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d00f      	beq.n	8003590 <TIM_Base_SetConfig+0xf8>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a18      	ldr	r2, [pc, #96]	@ (80035d4 <TIM_Base_SetConfig+0x13c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00b      	beq.n	8003590 <TIM_Base_SetConfig+0xf8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a17      	ldr	r2, [pc, #92]	@ (80035d8 <TIM_Base_SetConfig+0x140>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d007      	beq.n	8003590 <TIM_Base_SetConfig+0xf8>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a16      	ldr	r2, [pc, #88]	@ (80035dc <TIM_Base_SetConfig+0x144>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <TIM_Base_SetConfig+0xf8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a15      	ldr	r2, [pc, #84]	@ (80035e0 <TIM_Base_SetConfig+0x148>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d103      	bne.n	8003598 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d105      	bne.n	80035b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f023 0201 	bic.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	611a      	str	r2, [r3, #16]
  }
}
 80035b6:	bf00      	nop
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40012c00 	.word	0x40012c00
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800
 80035d0:	40000c00 	.word	0x40000c00
 80035d4:	40013400 	.word	0x40013400
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40014400 	.word	0x40014400
 80035e0:	40014800 	.word	0x40014800

080035e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f023 0201 	bic.w	r2, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0303 	bic.w	r3, r3, #3
 800361e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f023 0302 	bic.w	r3, r3, #2
 8003630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a2c      	ldr	r2, [pc, #176]	@ (80036f0 <TIM_OC1_SetConfig+0x10c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00f      	beq.n	8003664 <TIM_OC1_SetConfig+0x80>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a2b      	ldr	r2, [pc, #172]	@ (80036f4 <TIM_OC1_SetConfig+0x110>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00b      	beq.n	8003664 <TIM_OC1_SetConfig+0x80>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a2a      	ldr	r2, [pc, #168]	@ (80036f8 <TIM_OC1_SetConfig+0x114>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d007      	beq.n	8003664 <TIM_OC1_SetConfig+0x80>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a29      	ldr	r2, [pc, #164]	@ (80036fc <TIM_OC1_SetConfig+0x118>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d003      	beq.n	8003664 <TIM_OC1_SetConfig+0x80>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a28      	ldr	r2, [pc, #160]	@ (8003700 <TIM_OC1_SetConfig+0x11c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d10c      	bne.n	800367e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f023 0308 	bic.w	r3, r3, #8
 800366a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	4313      	orrs	r3, r2
 8003674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f023 0304 	bic.w	r3, r3, #4
 800367c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a1b      	ldr	r2, [pc, #108]	@ (80036f0 <TIM_OC1_SetConfig+0x10c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00f      	beq.n	80036a6 <TIM_OC1_SetConfig+0xc2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1a      	ldr	r2, [pc, #104]	@ (80036f4 <TIM_OC1_SetConfig+0x110>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00b      	beq.n	80036a6 <TIM_OC1_SetConfig+0xc2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a19      	ldr	r2, [pc, #100]	@ (80036f8 <TIM_OC1_SetConfig+0x114>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d007      	beq.n	80036a6 <TIM_OC1_SetConfig+0xc2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a18      	ldr	r2, [pc, #96]	@ (80036fc <TIM_OC1_SetConfig+0x118>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d003      	beq.n	80036a6 <TIM_OC1_SetConfig+0xc2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a17      	ldr	r2, [pc, #92]	@ (8003700 <TIM_OC1_SetConfig+0x11c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d111      	bne.n	80036ca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	621a      	str	r2, [r3, #32]
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	40013400 	.word	0x40013400
 80036f8:	40014000 	.word	0x40014000
 80036fc:	40014400 	.word	0x40014400
 8003700:	40014800 	.word	0x40014800

08003704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f023 0210 	bic.w	r2, r3, #16
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003732:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800373e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f023 0320 	bic.w	r3, r3, #32
 8003752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a28      	ldr	r2, [pc, #160]	@ (8003804 <TIM_OC2_SetConfig+0x100>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d003      	beq.n	8003770 <TIM_OC2_SetConfig+0x6c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a27      	ldr	r2, [pc, #156]	@ (8003808 <TIM_OC2_SetConfig+0x104>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d10d      	bne.n	800378c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800378a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a1d      	ldr	r2, [pc, #116]	@ (8003804 <TIM_OC2_SetConfig+0x100>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d00f      	beq.n	80037b4 <TIM_OC2_SetConfig+0xb0>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a1c      	ldr	r2, [pc, #112]	@ (8003808 <TIM_OC2_SetConfig+0x104>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00b      	beq.n	80037b4 <TIM_OC2_SetConfig+0xb0>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a1b      	ldr	r2, [pc, #108]	@ (800380c <TIM_OC2_SetConfig+0x108>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d007      	beq.n	80037b4 <TIM_OC2_SetConfig+0xb0>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003810 <TIM_OC2_SetConfig+0x10c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d003      	beq.n	80037b4 <TIM_OC2_SetConfig+0xb0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a19      	ldr	r2, [pc, #100]	@ (8003814 <TIM_OC2_SetConfig+0x110>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d113      	bne.n	80037dc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	621a      	str	r2, [r3, #32]
}
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40012c00 	.word	0x40012c00
 8003808:	40013400 	.word	0x40013400
 800380c:	40014000 	.word	0x40014000
 8003810:	40014400 	.word	0x40014400
 8003814:	40014800 	.word	0x40014800

08003818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800384a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 0303 	bic.w	r3, r3, #3
 8003852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a27      	ldr	r2, [pc, #156]	@ (8003914 <TIM_OC3_SetConfig+0xfc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d003      	beq.n	8003882 <TIM_OC3_SetConfig+0x6a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a26      	ldr	r2, [pc, #152]	@ (8003918 <TIM_OC3_SetConfig+0x100>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d10d      	bne.n	800389e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003888:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800389c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003914 <TIM_OC3_SetConfig+0xfc>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00f      	beq.n	80038c6 <TIM_OC3_SetConfig+0xae>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003918 <TIM_OC3_SetConfig+0x100>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00b      	beq.n	80038c6 <TIM_OC3_SetConfig+0xae>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a1a      	ldr	r2, [pc, #104]	@ (800391c <TIM_OC3_SetConfig+0x104>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d007      	beq.n	80038c6 <TIM_OC3_SetConfig+0xae>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a19      	ldr	r2, [pc, #100]	@ (8003920 <TIM_OC3_SetConfig+0x108>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d003      	beq.n	80038c6 <TIM_OC3_SetConfig+0xae>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a18      	ldr	r2, [pc, #96]	@ (8003924 <TIM_OC3_SetConfig+0x10c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d113      	bne.n	80038ee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	621a      	str	r2, [r3, #32]
}
 8003908:	bf00      	nop
 800390a:	371c      	adds	r7, #28
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	40012c00 	.word	0x40012c00
 8003918:	40013400 	.word	0x40013400
 800391c:	40014000 	.word	0x40014000
 8003920:	40014400 	.word	0x40014400
 8003924:	40014800 	.word	0x40014800

08003928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800395a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	031b      	lsls	r3, r3, #12
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a18      	ldr	r2, [pc, #96]	@ (80039e8 <TIM_OC4_SetConfig+0xc0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00f      	beq.n	80039ac <TIM_OC4_SetConfig+0x84>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a17      	ldr	r2, [pc, #92]	@ (80039ec <TIM_OC4_SetConfig+0xc4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00b      	beq.n	80039ac <TIM_OC4_SetConfig+0x84>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a16      	ldr	r2, [pc, #88]	@ (80039f0 <TIM_OC4_SetConfig+0xc8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d007      	beq.n	80039ac <TIM_OC4_SetConfig+0x84>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a15      	ldr	r2, [pc, #84]	@ (80039f4 <TIM_OC4_SetConfig+0xcc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d003      	beq.n	80039ac <TIM_OC4_SetConfig+0x84>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a14      	ldr	r2, [pc, #80]	@ (80039f8 <TIM_OC4_SetConfig+0xd0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d109      	bne.n	80039c0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	019b      	lsls	r3, r3, #6
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	621a      	str	r2, [r3, #32]
}
 80039da:	bf00      	nop
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40012c00 	.word	0x40012c00
 80039ec:	40013400 	.word	0x40013400
 80039f0:	40014000 	.word	0x40014000
 80039f4:	40014400 	.word	0x40014400
 80039f8:	40014800 	.word	0x40014800

080039fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003a40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	041b      	lsls	r3, r3, #16
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a17      	ldr	r2, [pc, #92]	@ (8003ab0 <TIM_OC5_SetConfig+0xb4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00f      	beq.n	8003a76 <TIM_OC5_SetConfig+0x7a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a16      	ldr	r2, [pc, #88]	@ (8003ab4 <TIM_OC5_SetConfig+0xb8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00b      	beq.n	8003a76 <TIM_OC5_SetConfig+0x7a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a15      	ldr	r2, [pc, #84]	@ (8003ab8 <TIM_OC5_SetConfig+0xbc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d007      	beq.n	8003a76 <TIM_OC5_SetConfig+0x7a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a14      	ldr	r2, [pc, #80]	@ (8003abc <TIM_OC5_SetConfig+0xc0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d003      	beq.n	8003a76 <TIM_OC5_SetConfig+0x7a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a13      	ldr	r2, [pc, #76]	@ (8003ac0 <TIM_OC5_SetConfig+0xc4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d109      	bne.n	8003a8a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	621a      	str	r2, [r3, #32]
}
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	40012c00 	.word	0x40012c00
 8003ab4:	40013400 	.word	0x40013400
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40014400 	.word	0x40014400
 8003ac0:	40014800 	.word	0x40014800

08003ac4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003af2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	021b      	lsls	r3, r3, #8
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	051b      	lsls	r3, r3, #20
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a18      	ldr	r2, [pc, #96]	@ (8003b7c <TIM_OC6_SetConfig+0xb8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d00f      	beq.n	8003b40 <TIM_OC6_SetConfig+0x7c>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a17      	ldr	r2, [pc, #92]	@ (8003b80 <TIM_OC6_SetConfig+0xbc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00b      	beq.n	8003b40 <TIM_OC6_SetConfig+0x7c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a16      	ldr	r2, [pc, #88]	@ (8003b84 <TIM_OC6_SetConfig+0xc0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d007      	beq.n	8003b40 <TIM_OC6_SetConfig+0x7c>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a15      	ldr	r2, [pc, #84]	@ (8003b88 <TIM_OC6_SetConfig+0xc4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d003      	beq.n	8003b40 <TIM_OC6_SetConfig+0x7c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a14      	ldr	r2, [pc, #80]	@ (8003b8c <TIM_OC6_SetConfig+0xc8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d109      	bne.n	8003b54 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	029b      	lsls	r3, r3, #10
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	621a      	str	r2, [r3, #32]
}
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40013400 	.word	0x40013400
 8003b84:	40014000 	.word	0x40014000
 8003b88:	40014400 	.word	0x40014400
 8003b8c:	40014800 	.word	0x40014800

08003b90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f023 0201 	bic.w	r2, r3, #1
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f023 030a 	bic.w	r3, r3, #10
 8003bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	621a      	str	r2, [r3, #32]
}
 8003be2:	bf00      	nop
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b087      	sub	sp, #28
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	f023 0210 	bic.w	r2, r3, #16
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	031b      	lsls	r3, r3, #12
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	621a      	str	r2, [r3, #32]
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b085      	sub	sp, #20
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f043 0307 	orr.w	r3, r3, #7
 8003c70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	609a      	str	r2, [r3, #8]
}
 8003c78:	bf00      	nop
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	021a      	lsls	r2, r3, #8
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	609a      	str	r2, [r3, #8]
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a1a      	ldr	r2, [r3, #32]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	401a      	ands	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a1a      	ldr	r2, [r3, #32]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f003 031f 	and.w	r3, r3, #31
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	621a      	str	r2, [r3, #32]
}
 8003d02:	bf00      	nop
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
	...

08003d10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e068      	b.n	8003dfa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d004      	beq.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2d      	ldr	r2, [pc, #180]	@ (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d108      	bne.n	8003d6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003d62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d01d      	beq.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d9a:	d018      	beq.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d013      	beq.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1a      	ldr	r2, [pc, #104]	@ (8003e14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00e      	beq.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a18      	ldr	r2, [pc, #96]	@ (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d009      	beq.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a13      	ldr	r2, [pc, #76]	@ (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d004      	beq.n	8003dce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a14      	ldr	r2, [pc, #80]	@ (8003e1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d10c      	bne.n	8003de8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40012c00 	.word	0x40012c00
 8003e0c:	40013400 	.word	0x40013400
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40000800 	.word	0x40000800
 8003e18:	40000c00 	.word	0x40000c00
 8003e1c:	40014000 	.word	0x40014000

08003e20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e065      	b.n	8003f08 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	041b      	lsls	r3, r3, #16
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a16      	ldr	r2, [pc, #88]	@ (8003f14 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d004      	beq.n	8003eca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a14      	ldr	r2, [pc, #80]	@ (8003f18 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d115      	bne.n	8003ef6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed4:	051b      	lsls	r3, r3, #20
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr
 8003f14:	40012c00 	.word	0x40012c00
 8003f18:	40013400 	.word	0x40013400

08003f1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e040      	b.n	8003fb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fc fe72 	bl	8000c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2224      	movs	r2, #36	@ 0x24
 8003f48:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fedc 	bl	8004d20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fc21 	bl	80047b0 <UART_SetConfig>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e01b      	b.n	8003fb0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 0201 	orr.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 ff5b 	bl	8004e64 <UART_CheckIdleState>
 8003fae:	4603      	mov	r3, r0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08a      	sub	sp, #40	@ 0x28
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d177      	bne.n	80040c0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_UART_Transmit+0x24>
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e070      	b.n	80040c2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2221      	movs	r2, #33	@ 0x21
 8003fec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fee:	f7fd f839 	bl	8001064 <HAL_GetTick>
 8003ff2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	88fa      	ldrh	r2, [r7, #6]
 8003ff8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	88fa      	ldrh	r2, [r7, #6]
 8004000:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800400c:	d108      	bne.n	8004020 <HAL_UART_Transmit+0x68>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d104      	bne.n	8004020 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	e003      	b.n	8004028 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004024:	2300      	movs	r3, #0
 8004026:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004028:	e02f      	b.n	800408a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2200      	movs	r2, #0
 8004032:	2180      	movs	r1, #128	@ 0x80
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 ffbd 	bl	8004fb4 <UART_WaitOnFlagUntilTimeout>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d004      	beq.n	800404a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2220      	movs	r2, #32
 8004044:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e03b      	b.n	80040c2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10b      	bne.n	8004068 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	881a      	ldrh	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800405c:	b292      	uxth	r2, r2
 800405e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	3302      	adds	r3, #2
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	e007      	b.n	8004078 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	781a      	ldrb	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	3301      	adds	r3, #1
 8004076:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1c9      	bne.n	800402a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2200      	movs	r2, #0
 800409e:	2140      	movs	r1, #64	@ 0x40
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 ff87 	bl	8004fb4 <UART_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e005      	b.n	80040c2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	e000      	b.n	80040c2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80040c0:	2302      	movs	r3, #2
  }
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08a      	sub	sp, #40	@ 0x28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	4613      	mov	r3, r2
 80040d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d137      	bne.n	8004154 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <HAL_UART_Receive_IT+0x24>
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e030      	b.n	8004156 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a18      	ldr	r2, [pc, #96]	@ (8004160 <HAL_UART_Receive_IT+0x94>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d01f      	beq.n	8004144 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d018      	beq.n	8004144 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	613b      	str	r3, [r7, #16]
   return(result);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004126:	627b      	str	r3, [r7, #36]	@ 0x24
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004130:	623b      	str	r3, [r7, #32]
 8004132:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	69f9      	ldr	r1, [r7, #28]
 8004136:	6a3a      	ldr	r2, [r7, #32]
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	61bb      	str	r3, [r7, #24]
   return(result);
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e6      	bne.n	8004112 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	461a      	mov	r2, r3
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 ffa0 	bl	8005090 <UART_Start_Receive_IT>
 8004150:	4603      	mov	r3, r0
 8004152:	e000      	b.n	8004156 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004154:	2302      	movs	r3, #2
  }
}
 8004156:	4618      	mov	r0, r3
 8004158:	3728      	adds	r7, #40	@ 0x28
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	40008000 	.word	0x40008000

08004164 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b0ba      	sub	sp, #232	@ 0xe8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800418a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800418e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004192:	4013      	ands	r3, r2
 8004194:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004198:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d115      	bne.n	80041cc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00f      	beq.n	80041cc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041b0:	f003 0320 	and.w	r3, r3, #32
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d009      	beq.n	80041cc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 82ca 	beq.w	8004756 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	4798      	blx	r3
      }
      return;
 80041ca:	e2c4      	b.n	8004756 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80041cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 8117 	beq.w	8004404 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80041d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80041e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80041e6:	4b85      	ldr	r3, [pc, #532]	@ (80043fc <HAL_UART_IRQHandler+0x298>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 810a 	beq.w	8004404 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80041f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d011      	beq.n	8004220 <HAL_UART_IRQHandler+0xbc>
 80041fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00b      	beq.n	8004220 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2201      	movs	r2, #1
 800420e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004216:	f043 0201 	orr.w	r2, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d011      	beq.n	8004250 <HAL_UART_IRQHandler+0xec>
 800422c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00b      	beq.n	8004250 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2202      	movs	r2, #2
 800423e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004246:	f043 0204 	orr.w	r2, r3, #4
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d011      	beq.n	8004280 <HAL_UART_IRQHandler+0x11c>
 800425c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00b      	beq.n	8004280 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2204      	movs	r2, #4
 800426e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004276:	f043 0202 	orr.w	r2, r3, #2
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d017      	beq.n	80042bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800428c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d105      	bne.n	80042a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800429c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00b      	beq.n	80042bc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2208      	movs	r2, #8
 80042aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042b2:	f043 0208 	orr.w	r2, r3, #8
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d012      	beq.n	80042ee <HAL_UART_IRQHandler+0x18a>
 80042c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00c      	beq.n	80042ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042e4:	f043 0220 	orr.w	r2, r3, #32
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8230 	beq.w	800475a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80042fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00d      	beq.n	8004322 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	d007      	beq.n	8004322 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004328:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004336:	2b40      	cmp	r3, #64	@ 0x40
 8004338:	d005      	beq.n	8004346 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800433a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800433e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004342:	2b00      	cmp	r3, #0
 8004344:	d04f      	beq.n	80043e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 ff68 	bl	800521c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004356:	2b40      	cmp	r3, #64	@ 0x40
 8004358:	d141      	bne.n	80043de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3308      	adds	r3, #8
 8004360:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004370:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004374:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004378:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3308      	adds	r3, #8
 8004382:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004386:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800438a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004392:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800439e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1d9      	bne.n	800435a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d013      	beq.n	80043d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b2:	4a13      	ldr	r2, [pc, #76]	@ (8004400 <HAL_UART_IRQHandler+0x29c>)
 80043b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fc ffad 	bl	800131a <HAL_DMA_Abort_IT>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d017      	beq.n	80043f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80043d0:	4610      	mov	r0, r2
 80043d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d4:	e00f      	b.n	80043f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f9d4 	bl	8004784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043dc:	e00b      	b.n	80043f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f9d0 	bl	8004784 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e4:	e007      	b.n	80043f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f9cc 	bl	8004784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80043f4:	e1b1      	b.n	800475a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f6:	bf00      	nop
    return;
 80043f8:	e1af      	b.n	800475a <HAL_UART_IRQHandler+0x5f6>
 80043fa:	bf00      	nop
 80043fc:	04000120 	.word	0x04000120
 8004400:	080052e5 	.word	0x080052e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004408:	2b01      	cmp	r3, #1
 800440a:	f040 816a 	bne.w	80046e2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800440e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 8163 	beq.w	80046e2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800441c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 815c 	beq.w	80046e2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2210      	movs	r2, #16
 8004430:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443c:	2b40      	cmp	r3, #64	@ 0x40
 800443e:	f040 80d4 	bne.w	80045ea <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800444e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80ad 	beq.w	80045b2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800445e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004462:	429a      	cmp	r2, r3
 8004464:	f080 80a5 	bcs.w	80045b2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800446e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b00      	cmp	r3, #0
 8004480:	f040 8086 	bne.w	8004590 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004490:	e853 3f00 	ldrex	r3, [r3]
 8004494:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004498:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800449c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80044ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80044b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80044ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80044be:	e841 2300 	strex	r3, r2, [r1]
 80044c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80044c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1da      	bne.n	8004484 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	3308      	adds	r3, #8
 80044d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80044de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044e0:	f023 0301 	bic.w	r3, r3, #1
 80044e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3308      	adds	r3, #8
 80044ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80044f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80044f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80044fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004504:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e1      	bne.n	80044ce <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3308      	adds	r3, #8
 8004510:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800451a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800451c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004520:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3308      	adds	r3, #8
 800452a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800452e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004530:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004534:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800453c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e3      	bne.n	800450a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800455e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004560:	f023 0310 	bic.w	r3, r3, #16
 8004564:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004572:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004574:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004578:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e4      	bne.n	8004550 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800458a:	4618      	mov	r0, r3
 800458c:	f7fc fe87 	bl	800129e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	4619      	mov	r1, r3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f8f4 	bl	8004798 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80045b0:	e0d5      	b.n	800475e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80045b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045bc:	429a      	cmp	r2, r3
 80045be:	f040 80ce 	bne.w	800475e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	f040 80c5 	bne.w	800475e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80045e0:	4619      	mov	r1, r3
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f8d8 	bl	8004798 <HAL_UARTEx_RxEventCallback>
      return;
 80045e8:	e0b9      	b.n	800475e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80ab 	beq.w	8004762 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800460c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 80a6 	beq.w	8004762 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461e:	e853 3f00 	ldrex	r3, [r3]
 8004622:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004626:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800462a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004638:	647b      	str	r3, [r7, #68]	@ 0x44
 800463a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800463e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004640:	e841 2300 	strex	r3, r2, [r1]
 8004644:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e4      	bne.n	8004616 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3308      	adds	r3, #8
 8004652:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	e853 3f00 	ldrex	r3, [r3]
 800465a:	623b      	str	r3, [r7, #32]
   return(result);
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	f023 0301 	bic.w	r3, r3, #1
 8004662:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3308      	adds	r3, #8
 800466c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004670:	633a      	str	r2, [r7, #48]	@ 0x30
 8004672:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004676:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800467e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e3      	bne.n	800464c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f023 0310 	bic.w	r3, r3, #16
 80046ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	461a      	mov	r2, r3
 80046b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80046ba:	61fb      	str	r3, [r7, #28]
 80046bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	69b9      	ldr	r1, [r7, #24]
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	617b      	str	r3, [r7, #20]
   return(result);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e4      	bne.n	8004698 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2202      	movs	r2, #2
 80046d2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046d8:	4619      	mov	r1, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f85c 	bl	8004798 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046e0:	e03f      	b.n	8004762 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00e      	beq.n	800470c <HAL_UART_IRQHandler+0x5a8>
 80046ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d008      	beq.n	800470c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004702:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 ffe9 	bl	80056dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800470a:	e02d      	b.n	8004768 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800470c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00e      	beq.n	8004736 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800471c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004720:	2b00      	cmp	r3, #0
 8004722:	d008      	beq.n	8004736 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01c      	beq.n	8004766 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	4798      	blx	r3
    }
    return;
 8004734:	e017      	b.n	8004766 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800473a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d012      	beq.n	8004768 <HAL_UART_IRQHandler+0x604>
 8004742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00c      	beq.n	8004768 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fdde 	bl	8005310 <UART_EndTransmit_IT>
    return;
 8004754:	e008      	b.n	8004768 <HAL_UART_IRQHandler+0x604>
      return;
 8004756:	bf00      	nop
 8004758:	e006      	b.n	8004768 <HAL_UART_IRQHandler+0x604>
    return;
 800475a:	bf00      	nop
 800475c:	e004      	b.n	8004768 <HAL_UART_IRQHandler+0x604>
      return;
 800475e:	bf00      	nop
 8004760:	e002      	b.n	8004768 <HAL_UART_IRQHandler+0x604>
      return;
 8004762:	bf00      	nop
 8004764:	e000      	b.n	8004768 <HAL_UART_IRQHandler+0x604>
    return;
 8004766:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004768:	37e8      	adds	r7, #232	@ 0xe8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop

08004770 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	460b      	mov	r3, r1
 80047a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b4:	b08a      	sub	sp, #40	@ 0x28
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	689a      	ldr	r2, [r3, #8]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	431a      	orrs	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4ba4      	ldr	r3, [pc, #656]	@ (8004a70 <UART_SetConfig+0x2c0>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	6812      	ldr	r2, [r2, #0]
 80047e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047e8:	430b      	orrs	r3, r1
 80047ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a99      	ldr	r2, [pc, #612]	@ (8004a74 <UART_SetConfig+0x2c4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d004      	beq.n	800481c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004818:	4313      	orrs	r3, r2
 800481a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800482c:	430a      	orrs	r2, r1
 800482e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a90      	ldr	r2, [pc, #576]	@ (8004a78 <UART_SetConfig+0x2c8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d126      	bne.n	8004888 <UART_SetConfig+0xd8>
 800483a:	4b90      	ldr	r3, [pc, #576]	@ (8004a7c <UART_SetConfig+0x2cc>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004840:	f003 0303 	and.w	r3, r3, #3
 8004844:	2b03      	cmp	r3, #3
 8004846:	d81b      	bhi.n	8004880 <UART_SetConfig+0xd0>
 8004848:	a201      	add	r2, pc, #4	@ (adr r2, 8004850 <UART_SetConfig+0xa0>)
 800484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484e:	bf00      	nop
 8004850:	08004861 	.word	0x08004861
 8004854:	08004871 	.word	0x08004871
 8004858:	08004869 	.word	0x08004869
 800485c:	08004879 	.word	0x08004879
 8004860:	2301      	movs	r3, #1
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004866:	e116      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004868:	2302      	movs	r3, #2
 800486a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486e:	e112      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004870:	2304      	movs	r3, #4
 8004872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004876:	e10e      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004878:	2308      	movs	r3, #8
 800487a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800487e:	e10a      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004880:	2310      	movs	r3, #16
 8004882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004886:	e106      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a7c      	ldr	r2, [pc, #496]	@ (8004a80 <UART_SetConfig+0x2d0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d138      	bne.n	8004904 <UART_SetConfig+0x154>
 8004892:	4b7a      	ldr	r3, [pc, #488]	@ (8004a7c <UART_SetConfig+0x2cc>)
 8004894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004898:	f003 030c 	and.w	r3, r3, #12
 800489c:	2b0c      	cmp	r3, #12
 800489e:	d82d      	bhi.n	80048fc <UART_SetConfig+0x14c>
 80048a0:	a201      	add	r2, pc, #4	@ (adr r2, 80048a8 <UART_SetConfig+0xf8>)
 80048a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a6:	bf00      	nop
 80048a8:	080048dd 	.word	0x080048dd
 80048ac:	080048fd 	.word	0x080048fd
 80048b0:	080048fd 	.word	0x080048fd
 80048b4:	080048fd 	.word	0x080048fd
 80048b8:	080048ed 	.word	0x080048ed
 80048bc:	080048fd 	.word	0x080048fd
 80048c0:	080048fd 	.word	0x080048fd
 80048c4:	080048fd 	.word	0x080048fd
 80048c8:	080048e5 	.word	0x080048e5
 80048cc:	080048fd 	.word	0x080048fd
 80048d0:	080048fd 	.word	0x080048fd
 80048d4:	080048fd 	.word	0x080048fd
 80048d8:	080048f5 	.word	0x080048f5
 80048dc:	2300      	movs	r3, #0
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e2:	e0d8      	b.n	8004a96 <UART_SetConfig+0x2e6>
 80048e4:	2302      	movs	r3, #2
 80048e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ea:	e0d4      	b.n	8004a96 <UART_SetConfig+0x2e6>
 80048ec:	2304      	movs	r3, #4
 80048ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f2:	e0d0      	b.n	8004a96 <UART_SetConfig+0x2e6>
 80048f4:	2308      	movs	r3, #8
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048fa:	e0cc      	b.n	8004a96 <UART_SetConfig+0x2e6>
 80048fc:	2310      	movs	r3, #16
 80048fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004902:	e0c8      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a5e      	ldr	r2, [pc, #376]	@ (8004a84 <UART_SetConfig+0x2d4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d125      	bne.n	800495a <UART_SetConfig+0x1aa>
 800490e:	4b5b      	ldr	r3, [pc, #364]	@ (8004a7c <UART_SetConfig+0x2cc>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004914:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004918:	2b30      	cmp	r3, #48	@ 0x30
 800491a:	d016      	beq.n	800494a <UART_SetConfig+0x19a>
 800491c:	2b30      	cmp	r3, #48	@ 0x30
 800491e:	d818      	bhi.n	8004952 <UART_SetConfig+0x1a2>
 8004920:	2b20      	cmp	r3, #32
 8004922:	d00a      	beq.n	800493a <UART_SetConfig+0x18a>
 8004924:	2b20      	cmp	r3, #32
 8004926:	d814      	bhi.n	8004952 <UART_SetConfig+0x1a2>
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <UART_SetConfig+0x182>
 800492c:	2b10      	cmp	r3, #16
 800492e:	d008      	beq.n	8004942 <UART_SetConfig+0x192>
 8004930:	e00f      	b.n	8004952 <UART_SetConfig+0x1a2>
 8004932:	2300      	movs	r3, #0
 8004934:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004938:	e0ad      	b.n	8004a96 <UART_SetConfig+0x2e6>
 800493a:	2302      	movs	r3, #2
 800493c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004940:	e0a9      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004942:	2304      	movs	r3, #4
 8004944:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004948:	e0a5      	b.n	8004a96 <UART_SetConfig+0x2e6>
 800494a:	2308      	movs	r3, #8
 800494c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004950:	e0a1      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004952:	2310      	movs	r3, #16
 8004954:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004958:	e09d      	b.n	8004a96 <UART_SetConfig+0x2e6>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a4a      	ldr	r2, [pc, #296]	@ (8004a88 <UART_SetConfig+0x2d8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d125      	bne.n	80049b0 <UART_SetConfig+0x200>
 8004964:	4b45      	ldr	r3, [pc, #276]	@ (8004a7c <UART_SetConfig+0x2cc>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800496e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004970:	d016      	beq.n	80049a0 <UART_SetConfig+0x1f0>
 8004972:	2bc0      	cmp	r3, #192	@ 0xc0
 8004974:	d818      	bhi.n	80049a8 <UART_SetConfig+0x1f8>
 8004976:	2b80      	cmp	r3, #128	@ 0x80
 8004978:	d00a      	beq.n	8004990 <UART_SetConfig+0x1e0>
 800497a:	2b80      	cmp	r3, #128	@ 0x80
 800497c:	d814      	bhi.n	80049a8 <UART_SetConfig+0x1f8>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <UART_SetConfig+0x1d8>
 8004982:	2b40      	cmp	r3, #64	@ 0x40
 8004984:	d008      	beq.n	8004998 <UART_SetConfig+0x1e8>
 8004986:	e00f      	b.n	80049a8 <UART_SetConfig+0x1f8>
 8004988:	2300      	movs	r3, #0
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800498e:	e082      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004990:	2302      	movs	r3, #2
 8004992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004996:	e07e      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004998:	2304      	movs	r3, #4
 800499a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800499e:	e07a      	b.n	8004a96 <UART_SetConfig+0x2e6>
 80049a0:	2308      	movs	r3, #8
 80049a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a6:	e076      	b.n	8004a96 <UART_SetConfig+0x2e6>
 80049a8:	2310      	movs	r3, #16
 80049aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ae:	e072      	b.n	8004a96 <UART_SetConfig+0x2e6>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a35      	ldr	r2, [pc, #212]	@ (8004a8c <UART_SetConfig+0x2dc>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d12a      	bne.n	8004a10 <UART_SetConfig+0x260>
 80049ba:	4b30      	ldr	r3, [pc, #192]	@ (8004a7c <UART_SetConfig+0x2cc>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049c8:	d01a      	beq.n	8004a00 <UART_SetConfig+0x250>
 80049ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049ce:	d81b      	bhi.n	8004a08 <UART_SetConfig+0x258>
 80049d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049d4:	d00c      	beq.n	80049f0 <UART_SetConfig+0x240>
 80049d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049da:	d815      	bhi.n	8004a08 <UART_SetConfig+0x258>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <UART_SetConfig+0x238>
 80049e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049e4:	d008      	beq.n	80049f8 <UART_SetConfig+0x248>
 80049e6:	e00f      	b.n	8004a08 <UART_SetConfig+0x258>
 80049e8:	2300      	movs	r3, #0
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ee:	e052      	b.n	8004a96 <UART_SetConfig+0x2e6>
 80049f0:	2302      	movs	r3, #2
 80049f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f6:	e04e      	b.n	8004a96 <UART_SetConfig+0x2e6>
 80049f8:	2304      	movs	r3, #4
 80049fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fe:	e04a      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004a00:	2308      	movs	r3, #8
 8004a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a06:	e046      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a0e:	e042      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a17      	ldr	r2, [pc, #92]	@ (8004a74 <UART_SetConfig+0x2c4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d13a      	bne.n	8004a90 <UART_SetConfig+0x2e0>
 8004a1a:	4b18      	ldr	r3, [pc, #96]	@ (8004a7c <UART_SetConfig+0x2cc>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a28:	d01a      	beq.n	8004a60 <UART_SetConfig+0x2b0>
 8004a2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a2e:	d81b      	bhi.n	8004a68 <UART_SetConfig+0x2b8>
 8004a30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a34:	d00c      	beq.n	8004a50 <UART_SetConfig+0x2a0>
 8004a36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a3a:	d815      	bhi.n	8004a68 <UART_SetConfig+0x2b8>
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <UART_SetConfig+0x298>
 8004a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a44:	d008      	beq.n	8004a58 <UART_SetConfig+0x2a8>
 8004a46:	e00f      	b.n	8004a68 <UART_SetConfig+0x2b8>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a4e:	e022      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004a50:	2302      	movs	r3, #2
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a56:	e01e      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a5e:	e01a      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004a60:	2308      	movs	r3, #8
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a66:	e016      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004a68:	2310      	movs	r3, #16
 8004a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6e:	e012      	b.n	8004a96 <UART_SetConfig+0x2e6>
 8004a70:	efff69f3 	.word	0xefff69f3
 8004a74:	40008000 	.word	0x40008000
 8004a78:	40013800 	.word	0x40013800
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	40004400 	.word	0x40004400
 8004a84:	40004800 	.word	0x40004800
 8004a88:	40004c00 	.word	0x40004c00
 8004a8c:	40005000 	.word	0x40005000
 8004a90:	2310      	movs	r3, #16
 8004a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a9f      	ldr	r2, [pc, #636]	@ (8004d18 <UART_SetConfig+0x568>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d17a      	bne.n	8004b96 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004aa0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d824      	bhi.n	8004af2 <UART_SetConfig+0x342>
 8004aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab0 <UART_SetConfig+0x300>)
 8004aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aae:	bf00      	nop
 8004ab0:	08004ad5 	.word	0x08004ad5
 8004ab4:	08004af3 	.word	0x08004af3
 8004ab8:	08004add 	.word	0x08004add
 8004abc:	08004af3 	.word	0x08004af3
 8004ac0:	08004ae3 	.word	0x08004ae3
 8004ac4:	08004af3 	.word	0x08004af3
 8004ac8:	08004af3 	.word	0x08004af3
 8004acc:	08004af3 	.word	0x08004af3
 8004ad0:	08004aeb 	.word	0x08004aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad4:	f7fd fbfc 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8004ad8:	61f8      	str	r0, [r7, #28]
        break;
 8004ada:	e010      	b.n	8004afe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004adc:	4b8f      	ldr	r3, [pc, #572]	@ (8004d1c <UART_SetConfig+0x56c>)
 8004ade:	61fb      	str	r3, [r7, #28]
        break;
 8004ae0:	e00d      	b.n	8004afe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ae2:	f7fd fb5d 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 8004ae6:	61f8      	str	r0, [r7, #28]
        break;
 8004ae8:	e009      	b.n	8004afe <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aee:	61fb      	str	r3, [r7, #28]
        break;
 8004af0:	e005      	b.n	8004afe <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004afc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80fb 	beq.w	8004cfc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	4413      	add	r3, r2
 8004b10:	69fa      	ldr	r2, [r7, #28]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d305      	bcc.n	8004b22 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b1c:	69fa      	ldr	r2, [r7, #28]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d903      	bls.n	8004b2a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b28:	e0e8      	b.n	8004cfc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	461c      	mov	r4, r3
 8004b30:	4615      	mov	r5, r2
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	f04f 0300 	mov.w	r3, #0
 8004b3a:	022b      	lsls	r3, r5, #8
 8004b3c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b40:	0222      	lsls	r2, r4, #8
 8004b42:	68f9      	ldr	r1, [r7, #12]
 8004b44:	6849      	ldr	r1, [r1, #4]
 8004b46:	0849      	lsrs	r1, r1, #1
 8004b48:	2000      	movs	r0, #0
 8004b4a:	4688      	mov	r8, r1
 8004b4c:	4681      	mov	r9, r0
 8004b4e:	eb12 0a08 	adds.w	sl, r2, r8
 8004b52:	eb43 0b09 	adc.w	fp, r3, r9
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	603b      	str	r3, [r7, #0]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b64:	4650      	mov	r0, sl
 8004b66:	4659      	mov	r1, fp
 8004b68:	f7fb fb2e 	bl	80001c8 <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4613      	mov	r3, r2
 8004b72:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b7a:	d308      	bcc.n	8004b8e <UART_SetConfig+0x3de>
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b82:	d204      	bcs.n	8004b8e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	60da      	str	r2, [r3, #12]
 8004b8c:	e0b6      	b.n	8004cfc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b94:	e0b2      	b.n	8004cfc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b9e:	d15e      	bne.n	8004c5e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d828      	bhi.n	8004bfa <UART_SetConfig+0x44a>
 8004ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb0 <UART_SetConfig+0x400>)
 8004baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bae:	bf00      	nop
 8004bb0:	08004bd5 	.word	0x08004bd5
 8004bb4:	08004bdd 	.word	0x08004bdd
 8004bb8:	08004be5 	.word	0x08004be5
 8004bbc:	08004bfb 	.word	0x08004bfb
 8004bc0:	08004beb 	.word	0x08004beb
 8004bc4:	08004bfb 	.word	0x08004bfb
 8004bc8:	08004bfb 	.word	0x08004bfb
 8004bcc:	08004bfb 	.word	0x08004bfb
 8004bd0:	08004bf3 	.word	0x08004bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd4:	f7fd fb7c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8004bd8:	61f8      	str	r0, [r7, #28]
        break;
 8004bda:	e014      	b.n	8004c06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bdc:	f7fd fb8e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 8004be0:	61f8      	str	r0, [r7, #28]
        break;
 8004be2:	e010      	b.n	8004c06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be4:	4b4d      	ldr	r3, [pc, #308]	@ (8004d1c <UART_SetConfig+0x56c>)
 8004be6:	61fb      	str	r3, [r7, #28]
        break;
 8004be8:	e00d      	b.n	8004c06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bea:	f7fd fad9 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 8004bee:	61f8      	str	r0, [r7, #28]
        break;
 8004bf0:	e009      	b.n	8004c06 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bf6:	61fb      	str	r3, [r7, #28]
        break;
 8004bf8:	e005      	b.n	8004c06 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d077      	beq.n	8004cfc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	005a      	lsls	r2, r3, #1
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	441a      	add	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c20:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	2b0f      	cmp	r3, #15
 8004c26:	d916      	bls.n	8004c56 <UART_SetConfig+0x4a6>
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c2e:	d212      	bcs.n	8004c56 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	f023 030f 	bic.w	r3, r3, #15
 8004c38:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	085b      	lsrs	r3, r3, #1
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	8afb      	ldrh	r3, [r7, #22]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	8afa      	ldrh	r2, [r7, #22]
 8004c52:	60da      	str	r2, [r3, #12]
 8004c54:	e052      	b.n	8004cfc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c5c:	e04e      	b.n	8004cfc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d827      	bhi.n	8004cb6 <UART_SetConfig+0x506>
 8004c66:	a201      	add	r2, pc, #4	@ (adr r2, 8004c6c <UART_SetConfig+0x4bc>)
 8004c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6c:	08004c91 	.word	0x08004c91
 8004c70:	08004c99 	.word	0x08004c99
 8004c74:	08004ca1 	.word	0x08004ca1
 8004c78:	08004cb7 	.word	0x08004cb7
 8004c7c:	08004ca7 	.word	0x08004ca7
 8004c80:	08004cb7 	.word	0x08004cb7
 8004c84:	08004cb7 	.word	0x08004cb7
 8004c88:	08004cb7 	.word	0x08004cb7
 8004c8c:	08004caf 	.word	0x08004caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c90:	f7fd fb1e 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8004c94:	61f8      	str	r0, [r7, #28]
        break;
 8004c96:	e014      	b.n	8004cc2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c98:	f7fd fb30 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 8004c9c:	61f8      	str	r0, [r7, #28]
        break;
 8004c9e:	e010      	b.n	8004cc2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8004d1c <UART_SetConfig+0x56c>)
 8004ca2:	61fb      	str	r3, [r7, #28]
        break;
 8004ca4:	e00d      	b.n	8004cc2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ca6:	f7fd fa7b 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 8004caa:	61f8      	str	r0, [r7, #28]
        break;
 8004cac:	e009      	b.n	8004cc2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cb2:	61fb      	str	r3, [r7, #28]
        break;
 8004cb4:	e005      	b.n	8004cc2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004cc0:	bf00      	nop
    }

    if (pclk != 0U)
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d019      	beq.n	8004cfc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	085a      	lsrs	r2, r3, #1
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	441a      	add	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cda:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	2b0f      	cmp	r3, #15
 8004ce0:	d909      	bls.n	8004cf6 <UART_SetConfig+0x546>
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce8:	d205      	bcs.n	8004cf6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60da      	str	r2, [r3, #12]
 8004cf4:	e002      	b.n	8004cfc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d08:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3728      	adds	r7, #40	@ 0x28
 8004d10:	46bd      	mov	sp, r7
 8004d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d16:	bf00      	nop
 8004d18:	40008000 	.word	0x40008000
 8004d1c:	00f42400 	.word	0x00f42400

08004d20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4e:	f003 0301 	and.w	r3, r3, #1
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d01a      	beq.n	8004e36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e1e:	d10a      	bne.n	8004e36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00a      	beq.n	8004e58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	605a      	str	r2, [r3, #4]
  }
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b098      	sub	sp, #96	@ 0x60
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e74:	f7fc f8f6 	bl	8001064 <HAL_GetTick>
 8004e78:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d12e      	bne.n	8004ee6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e88:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e90:	2200      	movs	r2, #0
 8004e92:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f88c 	bl	8004fb4 <UART_WaitOnFlagUntilTimeout>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d021      	beq.n	8004ee6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eaa:	e853 3f00 	ldrex	r3, [r3]
 8004eae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eb6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ec0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ec2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ec6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ec8:	e841 2300 	strex	r3, r2, [r1]
 8004ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1e6      	bne.n	8004ea2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e062      	b.n	8004fac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d149      	bne.n	8004f88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ef4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004efc:	2200      	movs	r2, #0
 8004efe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f856 	bl	8004fb4 <UART_WaitOnFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d03c      	beq.n	8004f88 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	623b      	str	r3, [r7, #32]
   return(result);
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f34:	e841 2300 	strex	r3, r2, [r1]
 8004f38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e6      	bne.n	8004f0e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3308      	adds	r3, #8
 8004f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0301 	bic.w	r3, r3, #1
 8004f56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f60:	61fa      	str	r2, [r7, #28]
 8004f62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	69b9      	ldr	r1, [r7, #24]
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e5      	bne.n	8004f40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e011      	b.n	8004fac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3758      	adds	r7, #88	@ 0x58
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	603b      	str	r3, [r7, #0]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc4:	e04f      	b.n	8005066 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fcc:	d04b      	beq.n	8005066 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fce:	f7fc f849 	bl	8001064 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d302      	bcc.n	8004fe4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e04e      	b.n	8005086 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d037      	beq.n	8005066 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2b80      	cmp	r3, #128	@ 0x80
 8004ffa:	d034      	beq.n	8005066 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b40      	cmp	r3, #64	@ 0x40
 8005000:	d031      	beq.n	8005066 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b08      	cmp	r3, #8
 800500e:	d110      	bne.n	8005032 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2208      	movs	r2, #8
 8005016:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 f8ff 	bl	800521c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2208      	movs	r2, #8
 8005022:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e029      	b.n	8005086 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800503c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005040:	d111      	bne.n	8005066 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800504a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f8e5 	bl	800521c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2220      	movs	r2, #32
 8005056:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e00f      	b.n	8005086 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	429a      	cmp	r2, r3
 8005074:	bf0c      	ite	eq
 8005076:	2301      	moveq	r3, #1
 8005078:	2300      	movne	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	461a      	mov	r2, r3
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	429a      	cmp	r2, r3
 8005082:	d0a0      	beq.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005090:	b480      	push	{r7}
 8005092:	b097      	sub	sp, #92	@ 0x5c
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	4613      	mov	r3, r2
 800509c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	88fa      	ldrh	r2, [r7, #6]
 80050a8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	88fa      	ldrh	r2, [r7, #6]
 80050b0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050c2:	d10e      	bne.n	80050e2 <UART_Start_Receive_IT+0x52>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d105      	bne.n	80050d8 <UART_Start_Receive_IT+0x48>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80050d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80050d6:	e02d      	b.n	8005134 <UART_Start_Receive_IT+0xa4>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	22ff      	movs	r2, #255	@ 0xff
 80050dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80050e0:	e028      	b.n	8005134 <UART_Start_Receive_IT+0xa4>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10d      	bne.n	8005106 <UART_Start_Receive_IT+0x76>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d104      	bne.n	80050fc <UART_Start_Receive_IT+0x6c>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	22ff      	movs	r2, #255	@ 0xff
 80050f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80050fa:	e01b      	b.n	8005134 <UART_Start_Receive_IT+0xa4>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	227f      	movs	r2, #127	@ 0x7f
 8005100:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005104:	e016      	b.n	8005134 <UART_Start_Receive_IT+0xa4>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800510e:	d10d      	bne.n	800512c <UART_Start_Receive_IT+0x9c>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d104      	bne.n	8005122 <UART_Start_Receive_IT+0x92>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	227f      	movs	r2, #127	@ 0x7f
 800511c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005120:	e008      	b.n	8005134 <UART_Start_Receive_IT+0xa4>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	223f      	movs	r2, #63	@ 0x3f
 8005126:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800512a:	e003      	b.n	8005134 <UART_Start_Receive_IT+0xa4>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2222      	movs	r2, #34	@ 0x22
 8005140:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3308      	adds	r3, #8
 800514a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	657b      	str	r3, [r7, #84]	@ 0x54
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3308      	adds	r3, #8
 8005162:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005164:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005166:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800516a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e5      	bne.n	8005144 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005180:	d107      	bne.n	8005192 <UART_Start_Receive_IT+0x102>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4a21      	ldr	r2, [pc, #132]	@ (8005214 <UART_Start_Receive_IT+0x184>)
 800518e:	669a      	str	r2, [r3, #104]	@ 0x68
 8005190:	e002      	b.n	8005198 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4a20      	ldr	r2, [pc, #128]	@ (8005218 <UART_Start_Receive_IT+0x188>)
 8005196:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d019      	beq.n	80051d4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80051b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051be:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051c6:	e841 2300 	strex	r3, r2, [r1]
 80051ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80051cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e6      	bne.n	80051a0 <UART_Start_Receive_IT+0x110>
 80051d2:	e018      	b.n	8005206 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	e853 3f00 	ldrex	r3, [r3]
 80051e0:	613b      	str	r3, [r7, #16]
   return(result);
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f043 0320 	orr.w	r3, r3, #32
 80051e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051f2:	623b      	str	r3, [r7, #32]
 80051f4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	69f9      	ldr	r1, [r7, #28]
 80051f8:	6a3a      	ldr	r2, [r7, #32]
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e6      	bne.n	80051d4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	375c      	adds	r7, #92	@ 0x5c
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	08005521 	.word	0x08005521
 8005218:	08005365 	.word	0x08005365

0800521c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800521c:	b480      	push	{r7}
 800521e:	b095      	sub	sp, #84	@ 0x54
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800522a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005234:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005238:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	461a      	mov	r2, r3
 8005240:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005242:	643b      	str	r3, [r7, #64]	@ 0x40
 8005244:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005246:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005248:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800524a:	e841 2300 	strex	r3, r2, [r1]
 800524e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1e6      	bne.n	8005224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3308      	adds	r3, #8
 800525c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	61fb      	str	r3, [r7, #28]
   return(result);
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f023 0301 	bic.w	r3, r3, #1
 800526c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	3308      	adds	r3, #8
 8005274:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005276:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005278:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800527c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e5      	bne.n	8005256 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800528e:	2b01      	cmp	r3, #1
 8005290:	d118      	bne.n	80052c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	60bb      	str	r3, [r7, #8]
   return(result);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f023 0310 	bic.w	r3, r3, #16
 80052a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052b0:	61bb      	str	r3, [r7, #24]
 80052b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	6979      	ldr	r1, [r7, #20]
 80052b6:	69ba      	ldr	r2, [r7, #24]
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	613b      	str	r3, [r7, #16]
   return(result);
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e6      	bne.n	8005292 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80052d8:	bf00      	nop
 80052da:	3754      	adds	r7, #84	@ 0x54
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f7ff fa3e 	bl	8004784 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005308:	bf00      	nop
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	60bb      	str	r3, [r7, #8]
   return(result);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800532c:	61fb      	str	r3, [r7, #28]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6979      	ldr	r1, [r7, #20]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	613b      	str	r3, [r7, #16]
   return(result);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e6      	bne.n	8005318 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff fa0a 	bl	8004770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800535c:	bf00      	nop
 800535e:	3720      	adds	r7, #32
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b09c      	sub	sp, #112	@ 0x70
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005372:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800537c:	2b22      	cmp	r3, #34	@ 0x22
 800537e:	f040 80be 	bne.w	80054fe <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005388:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800538c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005390:	b2d9      	uxtb	r1, r3
 8005392:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005396:	b2da      	uxtb	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800539c:	400a      	ands	r2, r1
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f040 80a3 	bne.w	8005512 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80053f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e6      	bne.n	80053cc <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3308      	adds	r3, #8
 8005404:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800540e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	667b      	str	r3, [r7, #100]	@ 0x64
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3308      	adds	r3, #8
 800541c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800541e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005420:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005424:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800542c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1e5      	bne.n	80053fe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a34      	ldr	r2, [pc, #208]	@ (800551c <UART_RxISR_8BIT+0x1b8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d01f      	beq.n	8005490 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d018      	beq.n	8005490 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	623b      	str	r3, [r7, #32]
   return(result);
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005472:	663b      	str	r3, [r7, #96]	@ 0x60
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800547c:	633b      	str	r3, [r7, #48]	@ 0x30
 800547e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800548a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e6      	bne.n	800545e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005494:	2b01      	cmp	r3, #1
 8005496:	d12e      	bne.n	80054f6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	e853 3f00 	ldrex	r3, [r3]
 80054aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0310 	bic.w	r3, r3, #16
 80054b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	461a      	mov	r2, r3
 80054ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054bc:	61fb      	str	r3, [r7, #28]
 80054be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c0:	69b9      	ldr	r1, [r7, #24]
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	e841 2300 	strex	r3, r2, [r1]
 80054c8:	617b      	str	r3, [r7, #20]
   return(result);
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e6      	bne.n	800549e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	2b10      	cmp	r3, #16
 80054dc:	d103      	bne.n	80054e6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2210      	movs	r2, #16
 80054e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80054ec:	4619      	mov	r1, r3
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff f952 	bl	8004798 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054f4:	e00d      	b.n	8005512 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fb faf4 	bl	8000ae4 <HAL_UART_RxCpltCallback>
}
 80054fc:	e009      	b.n	8005512 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	8b1b      	ldrh	r3, [r3, #24]
 8005504:	b29a      	uxth	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0208 	orr.w	r2, r2, #8
 800550e:	b292      	uxth	r2, r2
 8005510:	831a      	strh	r2, [r3, #24]
}
 8005512:	bf00      	nop
 8005514:	3770      	adds	r7, #112	@ 0x70
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40008000 	.word	0x40008000

08005520 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b09c      	sub	sp, #112	@ 0x70
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800552e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005538:	2b22      	cmp	r3, #34	@ 0x22
 800553a:	f040 80be 	bne.w	80056ba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005544:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800554e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005552:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005556:	4013      	ands	r3, r2
 8005558:	b29a      	uxth	r2, r3
 800555a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800555c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005562:	1c9a      	adds	r2, r3, #2
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800556e:	b29b      	uxth	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	f040 80a3 	bne.w	80056ce <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005596:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005598:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800559c:	667b      	str	r3, [r7, #100]	@ 0x64
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80055a8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80055b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e6      	bne.n	8005588 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3308      	adds	r3, #8
 80055c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055cc:	f023 0301 	bic.w	r3, r3, #1
 80055d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3308      	adds	r3, #8
 80055d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80055da:	643a      	str	r2, [r7, #64]	@ 0x40
 80055dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e5      	bne.n	80055ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a34      	ldr	r2, [pc, #208]	@ (80056d8 <UART_RxISR_16BIT+0x1b8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d01f      	beq.n	800564c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d018      	beq.n	800564c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	61fb      	str	r3, [r7, #28]
   return(result);
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800562e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800563a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800563e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e6      	bne.n	800561a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005650:	2b01      	cmp	r3, #1
 8005652:	d12e      	bne.n	80056b2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	e853 3f00 	ldrex	r3, [r3]
 8005666:	60bb      	str	r3, [r7, #8]
   return(result);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f023 0310 	bic.w	r3, r3, #16
 800566e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567c:	6979      	ldr	r1, [r7, #20]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	e841 2300 	strex	r3, r2, [r1]
 8005684:	613b      	str	r3, [r7, #16]
   return(result);
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1e6      	bne.n	800565a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b10      	cmp	r3, #16
 8005698:	d103      	bne.n	80056a2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2210      	movs	r2, #16
 80056a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80056a8:	4619      	mov	r1, r3
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff f874 	bl	8004798 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056b0:	e00d      	b.n	80056ce <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fb fa16 	bl	8000ae4 <HAL_UART_RxCpltCallback>
}
 80056b8:	e009      	b.n	80056ce <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	8b1b      	ldrh	r3, [r3, #24]
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0208 	orr.w	r2, r2, #8
 80056ca:	b292      	uxth	r2, r2
 80056cc:	831a      	strh	r2, [r3, #24]
}
 80056ce:	bf00      	nop
 80056d0:	3770      	adds	r7, #112	@ 0x70
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	40008000 	.word	0x40008000

080056dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <atoi>:
 80056f0:	220a      	movs	r2, #10
 80056f2:	2100      	movs	r1, #0
 80056f4:	f000 b87a 	b.w	80057ec <strtol>

080056f8 <_strtol_l.constprop.0>:
 80056f8:	2b24      	cmp	r3, #36	@ 0x24
 80056fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056fe:	4686      	mov	lr, r0
 8005700:	4690      	mov	r8, r2
 8005702:	d801      	bhi.n	8005708 <_strtol_l.constprop.0+0x10>
 8005704:	2b01      	cmp	r3, #1
 8005706:	d106      	bne.n	8005716 <_strtol_l.constprop.0+0x1e>
 8005708:	f000 f896 	bl	8005838 <__errno>
 800570c:	2316      	movs	r3, #22
 800570e:	6003      	str	r3, [r0, #0]
 8005710:	2000      	movs	r0, #0
 8005712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005716:	4834      	ldr	r0, [pc, #208]	@ (80057e8 <_strtol_l.constprop.0+0xf0>)
 8005718:	460d      	mov	r5, r1
 800571a:	462a      	mov	r2, r5
 800571c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005720:	5d06      	ldrb	r6, [r0, r4]
 8005722:	f016 0608 	ands.w	r6, r6, #8
 8005726:	d1f8      	bne.n	800571a <_strtol_l.constprop.0+0x22>
 8005728:	2c2d      	cmp	r4, #45	@ 0x2d
 800572a:	d12d      	bne.n	8005788 <_strtol_l.constprop.0+0x90>
 800572c:	782c      	ldrb	r4, [r5, #0]
 800572e:	2601      	movs	r6, #1
 8005730:	1c95      	adds	r5, r2, #2
 8005732:	f033 0210 	bics.w	r2, r3, #16
 8005736:	d109      	bne.n	800574c <_strtol_l.constprop.0+0x54>
 8005738:	2c30      	cmp	r4, #48	@ 0x30
 800573a:	d12a      	bne.n	8005792 <_strtol_l.constprop.0+0x9a>
 800573c:	782a      	ldrb	r2, [r5, #0]
 800573e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005742:	2a58      	cmp	r2, #88	@ 0x58
 8005744:	d125      	bne.n	8005792 <_strtol_l.constprop.0+0x9a>
 8005746:	786c      	ldrb	r4, [r5, #1]
 8005748:	2310      	movs	r3, #16
 800574a:	3502      	adds	r5, #2
 800574c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005750:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8005754:	2200      	movs	r2, #0
 8005756:	fbbc f9f3 	udiv	r9, ip, r3
 800575a:	4610      	mov	r0, r2
 800575c:	fb03 ca19 	mls	sl, r3, r9, ip
 8005760:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005764:	2f09      	cmp	r7, #9
 8005766:	d81b      	bhi.n	80057a0 <_strtol_l.constprop.0+0xa8>
 8005768:	463c      	mov	r4, r7
 800576a:	42a3      	cmp	r3, r4
 800576c:	dd27      	ble.n	80057be <_strtol_l.constprop.0+0xc6>
 800576e:	1c57      	adds	r7, r2, #1
 8005770:	d007      	beq.n	8005782 <_strtol_l.constprop.0+0x8a>
 8005772:	4581      	cmp	r9, r0
 8005774:	d320      	bcc.n	80057b8 <_strtol_l.constprop.0+0xc0>
 8005776:	d101      	bne.n	800577c <_strtol_l.constprop.0+0x84>
 8005778:	45a2      	cmp	sl, r4
 800577a:	db1d      	blt.n	80057b8 <_strtol_l.constprop.0+0xc0>
 800577c:	fb00 4003 	mla	r0, r0, r3, r4
 8005780:	2201      	movs	r2, #1
 8005782:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005786:	e7eb      	b.n	8005760 <_strtol_l.constprop.0+0x68>
 8005788:	2c2b      	cmp	r4, #43	@ 0x2b
 800578a:	bf04      	itt	eq
 800578c:	782c      	ldrbeq	r4, [r5, #0]
 800578e:	1c95      	addeq	r5, r2, #2
 8005790:	e7cf      	b.n	8005732 <_strtol_l.constprop.0+0x3a>
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1da      	bne.n	800574c <_strtol_l.constprop.0+0x54>
 8005796:	2c30      	cmp	r4, #48	@ 0x30
 8005798:	bf0c      	ite	eq
 800579a:	2308      	moveq	r3, #8
 800579c:	230a      	movne	r3, #10
 800579e:	e7d5      	b.n	800574c <_strtol_l.constprop.0+0x54>
 80057a0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80057a4:	2f19      	cmp	r7, #25
 80057a6:	d801      	bhi.n	80057ac <_strtol_l.constprop.0+0xb4>
 80057a8:	3c37      	subs	r4, #55	@ 0x37
 80057aa:	e7de      	b.n	800576a <_strtol_l.constprop.0+0x72>
 80057ac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80057b0:	2f19      	cmp	r7, #25
 80057b2:	d804      	bhi.n	80057be <_strtol_l.constprop.0+0xc6>
 80057b4:	3c57      	subs	r4, #87	@ 0x57
 80057b6:	e7d8      	b.n	800576a <_strtol_l.constprop.0+0x72>
 80057b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057bc:	e7e1      	b.n	8005782 <_strtol_l.constprop.0+0x8a>
 80057be:	1c53      	adds	r3, r2, #1
 80057c0:	d108      	bne.n	80057d4 <_strtol_l.constprop.0+0xdc>
 80057c2:	2322      	movs	r3, #34	@ 0x22
 80057c4:	f8ce 3000 	str.w	r3, [lr]
 80057c8:	4660      	mov	r0, ip
 80057ca:	f1b8 0f00 	cmp.w	r8, #0
 80057ce:	d0a0      	beq.n	8005712 <_strtol_l.constprop.0+0x1a>
 80057d0:	1e69      	subs	r1, r5, #1
 80057d2:	e006      	b.n	80057e2 <_strtol_l.constprop.0+0xea>
 80057d4:	b106      	cbz	r6, 80057d8 <_strtol_l.constprop.0+0xe0>
 80057d6:	4240      	negs	r0, r0
 80057d8:	f1b8 0f00 	cmp.w	r8, #0
 80057dc:	d099      	beq.n	8005712 <_strtol_l.constprop.0+0x1a>
 80057de:	2a00      	cmp	r2, #0
 80057e0:	d1f6      	bne.n	80057d0 <_strtol_l.constprop.0+0xd8>
 80057e2:	f8c8 1000 	str.w	r1, [r8]
 80057e6:	e794      	b.n	8005712 <_strtol_l.constprop.0+0x1a>
 80057e8:	080058ed 	.word	0x080058ed

080057ec <strtol>:
 80057ec:	4613      	mov	r3, r2
 80057ee:	460a      	mov	r2, r1
 80057f0:	4601      	mov	r1, r0
 80057f2:	4802      	ldr	r0, [pc, #8]	@ (80057fc <strtol+0x10>)
 80057f4:	6800      	ldr	r0, [r0, #0]
 80057f6:	f7ff bf7f 	b.w	80056f8 <_strtol_l.constprop.0>
 80057fa:	bf00      	nop
 80057fc:	2000000c 	.word	0x2000000c

08005800 <memset>:
 8005800:	4402      	add	r2, r0
 8005802:	4603      	mov	r3, r0
 8005804:	4293      	cmp	r3, r2
 8005806:	d100      	bne.n	800580a <memset+0xa>
 8005808:	4770      	bx	lr
 800580a:	f803 1b01 	strb.w	r1, [r3], #1
 800580e:	e7f9      	b.n	8005804 <memset+0x4>

08005810 <strncpy>:
 8005810:	b510      	push	{r4, lr}
 8005812:	3901      	subs	r1, #1
 8005814:	4603      	mov	r3, r0
 8005816:	b132      	cbz	r2, 8005826 <strncpy+0x16>
 8005818:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800581c:	f803 4b01 	strb.w	r4, [r3], #1
 8005820:	3a01      	subs	r2, #1
 8005822:	2c00      	cmp	r4, #0
 8005824:	d1f7      	bne.n	8005816 <strncpy+0x6>
 8005826:	441a      	add	r2, r3
 8005828:	2100      	movs	r1, #0
 800582a:	4293      	cmp	r3, r2
 800582c:	d100      	bne.n	8005830 <strncpy+0x20>
 800582e:	bd10      	pop	{r4, pc}
 8005830:	f803 1b01 	strb.w	r1, [r3], #1
 8005834:	e7f9      	b.n	800582a <strncpy+0x1a>
	...

08005838 <__errno>:
 8005838:	4b01      	ldr	r3, [pc, #4]	@ (8005840 <__errno+0x8>)
 800583a:	6818      	ldr	r0, [r3, #0]
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	2000000c 	.word	0x2000000c

08005844 <__libc_init_array>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	4d0d      	ldr	r5, [pc, #52]	@ (800587c <__libc_init_array+0x38>)
 8005848:	4c0d      	ldr	r4, [pc, #52]	@ (8005880 <__libc_init_array+0x3c>)
 800584a:	1b64      	subs	r4, r4, r5
 800584c:	10a4      	asrs	r4, r4, #2
 800584e:	2600      	movs	r6, #0
 8005850:	42a6      	cmp	r6, r4
 8005852:	d109      	bne.n	8005868 <__libc_init_array+0x24>
 8005854:	4d0b      	ldr	r5, [pc, #44]	@ (8005884 <__libc_init_array+0x40>)
 8005856:	4c0c      	ldr	r4, [pc, #48]	@ (8005888 <__libc_init_array+0x44>)
 8005858:	f000 f818 	bl	800588c <_init>
 800585c:	1b64      	subs	r4, r4, r5
 800585e:	10a4      	asrs	r4, r4, #2
 8005860:	2600      	movs	r6, #0
 8005862:	42a6      	cmp	r6, r4
 8005864:	d105      	bne.n	8005872 <__libc_init_array+0x2e>
 8005866:	bd70      	pop	{r4, r5, r6, pc}
 8005868:	f855 3b04 	ldr.w	r3, [r5], #4
 800586c:	4798      	blx	r3
 800586e:	3601      	adds	r6, #1
 8005870:	e7ee      	b.n	8005850 <__libc_init_array+0xc>
 8005872:	f855 3b04 	ldr.w	r3, [r5], #4
 8005876:	4798      	blx	r3
 8005878:	3601      	adds	r6, #1
 800587a:	e7f2      	b.n	8005862 <__libc_init_array+0x1e>
 800587c:	080059f8 	.word	0x080059f8
 8005880:	080059f8 	.word	0x080059f8
 8005884:	080059f8 	.word	0x080059f8
 8005888:	080059fc 	.word	0x080059fc

0800588c <_init>:
 800588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588e:	bf00      	nop
 8005890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005892:	bc08      	pop	{r3}
 8005894:	469e      	mov	lr, r3
 8005896:	4770      	bx	lr

08005898 <_fini>:
 8005898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589a:	bf00      	nop
 800589c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800589e:	bc08      	pop	{r3}
 80058a0:	469e      	mov	lr, r3
 80058a2:	4770      	bx	lr
