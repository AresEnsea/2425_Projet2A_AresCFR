
cfr_mot2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055ec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005774  08005774  00006774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058c0  080058c0  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080058c0  080058c0  000068c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058c8  080058c8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058c8  080058c8  000068c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058cc  080058cc  000068cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080058d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000005c  0800592c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  0800592c  00007368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011514  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000247e  00000000  00000000  000185a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  0001aa20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c13  00000000  00000000  0001b990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026eca  00000000  00000000  0001c5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a72  00000000  00000000  0004346d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2565  00000000  00000000  00055edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148444  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042fc  00000000  00000000  00148488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0014c784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800575c 	.word	0x0800575c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	0800575c 	.word	0x0800575c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fcc9 	bl	8000e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f857 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 fa33 	bl	8000930 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ca:	f000 f8d1 	bl	8000670 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004ce:	f000 f9ad 	bl	800082c <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 80004d2:	f000 f8a1 	bl	8000618 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 80004d6:	f000 f8fb 	bl	80006d0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //PB10 TIM2 CH3
 80004da:	2108      	movs	r1, #8
 80004dc:	481f      	ldr	r0, [pc, #124]	@ (800055c <main+0xa4>)
 80004de:	f002 fc5f 	bl	8002da0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //PA 8 TIM1 CH1
 80004e2:	2100      	movs	r1, #0
 80004e4:	481e      	ldr	r0, [pc, #120]	@ (8000560 <main+0xa8>)
 80004e6:	f002 fc5b 	bl	8002da0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); //PB11 TIM2 CH4
 80004ea:	210c      	movs	r1, #12
 80004ec:	481b      	ldr	r0, [pc, #108]	@ (800055c <main+0xa4>)
 80004ee:	f002 fc57 	bl	8002da0 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&hlpuart1,(uint8_t*)rx_data, 11);  // Start receiving data initially
 80004f2:	220b      	movs	r2, #11
 80004f4:	491b      	ldr	r1, [pc, #108]	@ (8000564 <main+0xac>)
 80004f6:	481c      	ldr	r0, [pc, #112]	@ (8000568 <main+0xb0>)
 80004f8:	f003 fd50 	bl	8003f9c <HAL_UART_Receive_IT>
  {


	  // Extraire les 4 premiers octets pour le moteur Maxon droit
	  char mot_maxon_dataD[5];
	  strncpy(mot_maxon_dataD, (char *)rx_data, 4);
 80004fc:	f107 0308 	add.w	r3, r7, #8
 8000500:	2204      	movs	r2, #4
 8000502:	4918      	ldr	r1, [pc, #96]	@ (8000564 <main+0xac>)
 8000504:	4618      	mov	r0, r3
 8000506:	f005 f8eb 	bl	80056e0 <strncpy>
	  mot_maxon_dataD[4] = '\0'; // Null terminate
 800050a:	2300      	movs	r3, #0
 800050c:	733b      	strb	r3, [r7, #12]
	  int mot_maxon_valueD = atoi(mot_maxon_dataD);
 800050e:	f107 0308 	add.w	r3, r7, #8
 8000512:	4618      	mov	r0, r3
 8000514:	f005 f854 	bl	80055c0 <atoi>
 8000518:	6178      	str	r0, [r7, #20]
	  mot_maxonD(mot_maxon_valueD);
 800051a:	6978      	ldr	r0, [r7, #20]
 800051c:	f000 fa94 	bl	8000a48 <mot_maxonD>

	  // Extraire les octets 5 à 8 pour le moteur gauche
	  char mot_maxon_dataG[5];
	  strncpy(mot_maxon_dataG, (char *)&rx_data[4], 4);
 8000520:	463b      	mov	r3, r7
 8000522:	2204      	movs	r2, #4
 8000524:	4911      	ldr	r1, [pc, #68]	@ (800056c <main+0xb4>)
 8000526:	4618      	mov	r0, r3
 8000528:	f005 f8da 	bl	80056e0 <strncpy>
	  mot_maxon_dataG[4] = '\0'; // Null terminate
 800052c:	2300      	movs	r3, #0
 800052e:	713b      	strb	r3, [r7, #4]
	  int mot_maxon_valueG = atoi(mot_maxon_dataG);
 8000530:	463b      	mov	r3, r7
 8000532:	4618      	mov	r0, r3
 8000534:	f005 f844 	bl	80055c0 <atoi>
 8000538:	6138      	str	r0, [r7, #16]
	  mot_maxonG(mot_maxon_valueG);
 800053a:	6938      	ldr	r0, [r7, #16]
 800053c:	f000 fa9e 	bl	8000a7c <mot_maxonG>
//	  servo_goal_data[4] = '\0'; // Null terminate
//	  int servo_goal_value = atoi(servo_goal_data);
//	  reach_goal_servo(servo_goal_value);

	  // Transmission pour debug
	  HAL_UART_Transmit(&huart2, (uint8_t *)rx_data, sizeof(rx_data), HAL_MAX_DELAY);
 8000540:	f04f 33ff 	mov.w	r3, #4294967295
 8000544:	220b      	movs	r2, #11
 8000546:	4907      	ldr	r1, [pc, #28]	@ (8000564 <main+0xac>)
 8000548:	4809      	ldr	r0, [pc, #36]	@ (8000570 <main+0xb8>)
 800054a:	f003 fc9d 	bl	8003e88 <HAL_UART_Transmit>

	  // Réactiver la réception des données
	  HAL_UART_Receive_IT(&hlpuart1, rx_data, sizeof(rx_data));
 800054e:	220b      	movs	r2, #11
 8000550:	4904      	ldr	r1, [pc, #16]	@ (8000564 <main+0xac>)
 8000552:	4805      	ldr	r0, [pc, #20]	@ (8000568 <main+0xb0>)
 8000554:	f003 fd22 	bl	8003f9c <HAL_UART_Receive_IT>
  {
 8000558:	bf00      	nop
 800055a:	e7cf      	b.n	80004fc <main+0x44>
 800055c:	200001d4 	.word	0x200001d4
 8000560:	20000188 	.word	0x20000188
 8000564:	20000220 	.word	0x20000220
 8000568:	20000078 	.word	0x20000078
 800056c:	20000224 	.word	0x20000224
 8000570:	20000100 	.word	0x20000100

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b096      	sub	sp, #88	@ 0x58
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	2244      	movs	r2, #68	@ 0x44
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f005 f8a4 	bl	80056d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000596:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800059a:	f001 f837 	bl	800160c <HAL_PWREx_ControlVoltageScaling>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a4:	f000 fa4a 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b2:	2310      	movs	r3, #16
 80005b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ba:	2302      	movs	r3, #2
 80005bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005be:	2301      	movs	r3, #1
 80005c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005c2:	230a      	movs	r3, #10
 80005c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005c6:	2307      	movs	r3, #7
 80005c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 f86e 	bl	80016b8 <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005e2:	f000 fa2b 	bl	8000a3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ea:	2303      	movs	r3, #3
 80005ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	2104      	movs	r1, #4
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fc35 	bl	8001e70 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800060c:	f000 fa16 	bl	8000a3c <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3758      	adds	r7, #88	@ 0x58
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800061c:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 800061e:	4a13      	ldr	r2, [pc, #76]	@ (800066c <MX_LPUART1_UART_Init+0x54>)
 8000620:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000622:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000628:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b09      	ldr	r3, [pc, #36]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_LPUART1_UART_Init+0x50>)
 8000656:	f003 fbc9 	bl	8003dec <HAL_UART_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000660:	f000 f9ec 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000078 	.word	0x20000078
 800066c:	40008000 	.word	0x40008000

08000670 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000674:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 8000676:	4a15      	ldr	r2, [pc, #84]	@ (80006cc <MX_USART2_UART_Init+0x5c>)
 8000678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067a:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 800067c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 8000696:	220c      	movs	r2, #12
 8000698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069a:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ac:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <MX_USART2_UART_Init+0x58>)
 80006b4:	f003 fb9a 	bl	8003dec <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006be:	f000 f9bd 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000100 	.word	0x20000100
 80006cc:	40004400 	.word	0x40004400

080006d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b09a      	sub	sp, #104	@ 0x68
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]
 80006e0:	609a      	str	r2, [r3, #8]
 80006e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
 8000700:	615a      	str	r2, [r3, #20]
 8000702:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	222c      	movs	r2, #44	@ 0x2c
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f004 ffe0 	bl	80056d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000710:	4b44      	ldr	r3, [pc, #272]	@ (8000824 <MX_TIM1_Init+0x154>)
 8000712:	4a45      	ldr	r2, [pc, #276]	@ (8000828 <MX_TIM1_Init+0x158>)
 8000714:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1600-1;
 8000716:	4b43      	ldr	r3, [pc, #268]	@ (8000824 <MX_TIM1_Init+0x154>)
 8000718:	f240 623f 	movw	r2, #1599	@ 0x63f
 800071c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b41      	ldr	r3, [pc, #260]	@ (8000824 <MX_TIM1_Init+0x154>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000724:	4b3f      	ldr	r3, [pc, #252]	@ (8000824 <MX_TIM1_Init+0x154>)
 8000726:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800072a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072c:	4b3d      	ldr	r3, [pc, #244]	@ (8000824 <MX_TIM1_Init+0x154>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000732:	4b3c      	ldr	r3, [pc, #240]	@ (8000824 <MX_TIM1_Init+0x154>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000738:	4b3a      	ldr	r3, [pc, #232]	@ (8000824 <MX_TIM1_Init+0x154>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800073e:	4839      	ldr	r0, [pc, #228]	@ (8000824 <MX_TIM1_Init+0x154>)
 8000740:	f002 fa76 	bl	8002c30 <HAL_TIM_Base_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800074a:	f000 f977 	bl	8000a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000752:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000754:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000758:	4619      	mov	r1, r3
 800075a:	4832      	ldr	r0, [pc, #200]	@ (8000824 <MX_TIM1_Init+0x154>)
 800075c:	f002 fd3a 	bl	80031d4 <HAL_TIM_ConfigClockSource>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000766:	f000 f969 	bl	8000a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800076a:	482e      	ldr	r0, [pc, #184]	@ (8000824 <MX_TIM1_Init+0x154>)
 800076c:	f002 fab7 	bl	8002cde <HAL_TIM_PWM_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8000776:	f000 f961 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800077e:	2300      	movs	r3, #0
 8000780:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000786:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800078a:	4619      	mov	r1, r3
 800078c:	4825      	ldr	r0, [pc, #148]	@ (8000824 <MX_TIM1_Init+0x154>)
 800078e:	f003 fa27 	bl	8003be0 <HAL_TIMEx_MasterConfigSynchronization>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000798:	f000 f950 	bl	8000a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800079c:	2360      	movs	r3, #96	@ 0x60
 800079e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007a8:	2300      	movs	r3, #0
 80007aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	4818      	ldr	r0, [pc, #96]	@ (8000824 <MX_TIM1_Init+0x154>)
 80007c2:	f002 fbf3 	bl	8002fac <HAL_TIM_PWM_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80007cc:	f000 f936 	bl	8000a3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4807      	ldr	r0, [pc, #28]	@ (8000824 <MX_TIM1_Init+0x154>)
 8000806:	f003 fa73 	bl	8003cf0 <HAL_TIMEx_ConfigBreakDeadTime>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000810:	f000 f914 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000814:	4803      	ldr	r0, [pc, #12]	@ (8000824 <MX_TIM1_Init+0x154>)
 8000816:	f000 fa4b 	bl	8000cb0 <HAL_TIM_MspPostInit>

}
 800081a:	bf00      	nop
 800081c:	3768      	adds	r7, #104	@ 0x68
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000188 	.word	0x20000188
 8000828:	40012c00 	.word	0x40012c00

0800082c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08e      	sub	sp, #56	@ 0x38
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000832:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000840:	f107 031c 	add.w	r3, r7, #28
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
 800085a:	615a      	str	r2, [r3, #20]
 800085c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800085e:	4b33      	ldr	r3, [pc, #204]	@ (800092c <MX_TIM2_Init+0x100>)
 8000860:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000864:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000866:	4b31      	ldr	r3, [pc, #196]	@ (800092c <MX_TIM2_Init+0x100>)
 8000868:	224f      	movs	r2, #79	@ 0x4f
 800086a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086c:	4b2f      	ldr	r3, [pc, #188]	@ (800092c <MX_TIM2_Init+0x100>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000872:	4b2e      	ldr	r3, [pc, #184]	@ (800092c <MX_TIM2_Init+0x100>)
 8000874:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000878:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087a:	4b2c      	ldr	r3, [pc, #176]	@ (800092c <MX_TIM2_Init+0x100>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000880:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <MX_TIM2_Init+0x100>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000886:	4829      	ldr	r0, [pc, #164]	@ (800092c <MX_TIM2_Init+0x100>)
 8000888:	f002 f9d2 	bl	8002c30 <HAL_TIM_Base_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000892:	f000 f8d3 	bl	8000a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000896:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800089a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800089c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4822      	ldr	r0, [pc, #136]	@ (800092c <MX_TIM2_Init+0x100>)
 80008a4:	f002 fc96 	bl	80031d4 <HAL_TIM_ConfigClockSource>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80008ae:	f000 f8c5 	bl	8000a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008b2:	481e      	ldr	r0, [pc, #120]	@ (800092c <MX_TIM2_Init+0x100>)
 80008b4:	f002 fa13 	bl	8002cde <HAL_TIM_PWM_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008be:	f000 f8bd 	bl	8000a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4816      	ldr	r0, [pc, #88]	@ (800092c <MX_TIM2_Init+0x100>)
 80008d2:	f003 f985 	bl	8003be0 <HAL_TIMEx_MasterConfigSynchronization>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008dc:	f000 f8ae 	bl	8000a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e0:	2360      	movs	r3, #96	@ 0x60
 80008e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	2208      	movs	r2, #8
 80008f4:	4619      	mov	r1, r3
 80008f6:	480d      	ldr	r0, [pc, #52]	@ (800092c <MX_TIM2_Init+0x100>)
 80008f8:	f002 fb58 	bl	8002fac <HAL_TIM_PWM_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000902:	f000 f89b 	bl	8000a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000906:	463b      	mov	r3, r7
 8000908:	220c      	movs	r2, #12
 800090a:	4619      	mov	r1, r3
 800090c:	4807      	ldr	r0, [pc, #28]	@ (800092c <MX_TIM2_Init+0x100>)
 800090e:	f002 fb4d 	bl	8002fac <HAL_TIM_PWM_ConfigChannel>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000918:	f000 f890 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800091c:	4803      	ldr	r0, [pc, #12]	@ (800092c <MX_TIM2_Init+0x100>)
 800091e:	f000 f9c7 	bl	8000cb0 <HAL_TIM_MspPostInit>

}
 8000922:	bf00      	nop
 8000924:	3738      	adds	r7, #56	@ 0x38
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200001d4 	.word	0x200001d4

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	@ 0x28
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	4b35      	ldr	r3, [pc, #212]	@ (8000a1c <MX_GPIO_Init+0xec>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094a:	4a34      	ldr	r2, [pc, #208]	@ (8000a1c <MX_GPIO_Init+0xec>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000952:	4b32      	ldr	r3, [pc, #200]	@ (8000a1c <MX_GPIO_Init+0xec>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a1c <MX_GPIO_Init+0xec>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	4a2e      	ldr	r2, [pc, #184]	@ (8000a1c <MX_GPIO_Init+0xec>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096a:	4b2c      	ldr	r3, [pc, #176]	@ (8000a1c <MX_GPIO_Init+0xec>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b29      	ldr	r3, [pc, #164]	@ (8000a1c <MX_GPIO_Init+0xec>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	4a28      	ldr	r2, [pc, #160]	@ (8000a1c <MX_GPIO_Init+0xec>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000982:	4b26      	ldr	r3, [pc, #152]	@ (8000a1c <MX_GPIO_Init+0xec>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b23      	ldr	r3, [pc, #140]	@ (8000a1c <MX_GPIO_Init+0xec>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000992:	4a22      	ldr	r2, [pc, #136]	@ (8000a1c <MX_GPIO_Init+0xec>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099a:	4b20      	ldr	r3, [pc, #128]	@ (8000a1c <MX_GPIO_Init+0xec>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2120      	movs	r1, #32
 80009aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ae:	f000 fe07 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2130      	movs	r1, #48	@ 0x30
 80009b6:	481a      	ldr	r0, [pc, #104]	@ (8000a20 <MX_GPIO_Init+0xf0>)
 80009b8:	f000 fe02 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	4814      	ldr	r0, [pc, #80]	@ (8000a24 <MX_GPIO_Init+0xf4>)
 80009d4:	f000 fc4a 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009d8:	2320      	movs	r3, #32
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009dc:	2301      	movs	r3, #1
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	4619      	mov	r1, r3
 80009ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f2:	f000 fc3b 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009f6:	2330      	movs	r3, #48	@ 0x30
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4804      	ldr	r0, [pc, #16]	@ (8000a20 <MX_GPIO_Init+0xf0>)
 8000a0e:	f000 fc2d 	bl	800126c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	@ 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	48000400 	.word	0x48000400
 8000a24:	48000800 	.word	0x48000800

08000a28 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

}
 8000a30:	bf00      	nop
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <Error_Handler+0x8>

08000a48 <mot_maxonD>:
#include "main.h"

extern TIM_HandleTypeDef htim2;

// Code fonctionnel final pour contrôler le moteur
void mot_maxonD(int result){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1); // Moteur droit
 8000a50:	2201      	movs	r2, #1
 8000a52:	2110      	movs	r1, #16
 8000a54:	4807      	ldr	r0, [pc, #28]	@ (8000a74 <mot_maxonD+0x2c>)
 8000a56:	f000 fdb3 	bl	80015c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <mot_maxonD+0x2c>)
 8000a60:	f000 fdae 	bl	80015c0 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result);
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <mot_maxonD+0x30>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	48000400 	.word	0x48000400
 8000a78:	200001d4 	.word	0x200001d4

08000a7c <mot_maxonG>:

void mot_maxonG(int result){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1); // enable droit
 8000a84:	2201      	movs	r2, #1
 8000a86:	2110      	movs	r1, #16
 8000a88:	4807      	ldr	r0, [pc, #28]	@ (8000aa8 <mot_maxonG+0x2c>)
 8000a8a:	f000 fd99 	bl	80015c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1); // enablegauche
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2120      	movs	r1, #32
 8000a92:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <mot_maxonG+0x2c>)
 8000a94:	f000 fd94 	bl	80015c0 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result);
 8000a98:	4b04      	ldr	r3, [pc, #16]	@ (8000aac <mot_maxonG+0x30>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	48000400 	.word	0x48000400
 8000aac:	200001d4 	.word	0x200001d4

08000ab0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <HAL_MspInit+0x44>)
 8000ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aba:	4a0e      	ldr	r2, [pc, #56]	@ (8000af4 <HAL_MspInit+0x44>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <HAL_MspInit+0x44>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <HAL_MspInit+0x44>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad2:	4a08      	ldr	r2, [pc, #32]	@ (8000af4 <HAL_MspInit+0x44>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_MspInit+0x44>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b0ae      	sub	sp, #184	@ 0xb8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	2288      	movs	r2, #136	@ 0x88
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f004 fdd9 	bl	80056d0 <memset>
  if(huart->Instance==LPUART1)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a46      	ldr	r2, [pc, #280]	@ (8000c3c <HAL_UART_MspInit+0x144>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d143      	bne.n	8000bb0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b28:	2320      	movs	r3, #32
 8000b2a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 fbbf 	bl	80022b8 <HAL_RCCEx_PeriphCLKConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b40:	f7ff ff7c 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b44:	4b3e      	ldr	r3, [pc, #248]	@ (8000c40 <HAL_UART_MspInit+0x148>)
 8000b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b48:	4a3d      	ldr	r2, [pc, #244]	@ (8000c40 <HAL_UART_MspInit+0x148>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000b50:	4b3b      	ldr	r3, [pc, #236]	@ (8000c40 <HAL_UART_MspInit+0x148>)
 8000b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	61bb      	str	r3, [r7, #24]
 8000b5a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5c:	4b38      	ldr	r3, [pc, #224]	@ (8000c40 <HAL_UART_MspInit+0x148>)
 8000b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b60:	4a37      	ldr	r2, [pc, #220]	@ (8000c40 <HAL_UART_MspInit+0x148>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b68:	4b35      	ldr	r3, [pc, #212]	@ (8000c40 <HAL_UART_MspInit+0x148>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b74:	2303      	movs	r3, #3
 8000b76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b92:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b96:	4619      	mov	r1, r3
 8000b98:	482a      	ldr	r0, [pc, #168]	@ (8000c44 <HAL_UART_MspInit+0x14c>)
 8000b9a:	f000 fb67 	bl	800126c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	2046      	movs	r0, #70	@ 0x46
 8000ba4:	f000 faad 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000ba8:	2046      	movs	r0, #70	@ 0x46
 8000baa:	f000 fac6 	bl	800113a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bae:	e040      	b.n	8000c32 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a24      	ldr	r2, [pc, #144]	@ (8000c48 <HAL_UART_MspInit+0x150>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d13b      	bne.n	8000c32 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f001 fb76 	bl	80022b8 <HAL_RCCEx_PeriphCLKConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8000bd2:	f7ff ff33 	bl	8000a3c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <HAL_UART_MspInit+0x148>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bda:	4a19      	ldr	r2, [pc, #100]	@ (8000c40 <HAL_UART_MspInit+0x148>)
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000be2:	4b17      	ldr	r3, [pc, #92]	@ (8000c40 <HAL_UART_MspInit+0x148>)
 8000be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <HAL_UART_MspInit+0x148>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf2:	4a13      	ldr	r2, [pc, #76]	@ (8000c40 <HAL_UART_MspInit+0x148>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <HAL_UART_MspInit+0x148>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c06:	230c      	movs	r3, #12
 8000c08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c2e:	f000 fb1d 	bl	800126c <HAL_GPIO_Init>
}
 8000c32:	bf00      	nop
 8000c34:	37b8      	adds	r7, #184	@ 0xb8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40008000 	.word	0x40008000
 8000c40:	40021000 	.word	0x40021000
 8000c44:	48000800 	.word	0x48000800
 8000c48:	40004400 	.word	0x40004400

08000c4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a13      	ldr	r2, [pc, #76]	@ (8000ca8 <HAL_TIM_Base_MspInit+0x5c>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d10c      	bne.n	8000c78 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <HAL_TIM_Base_MspInit+0x60>)
 8000c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c62:	4a12      	ldr	r2, [pc, #72]	@ (8000cac <HAL_TIM_Base_MspInit+0x60>)
 8000c64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c68:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <HAL_TIM_Base_MspInit+0x60>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c76:	e010      	b.n	8000c9a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c80:	d10b      	bne.n	8000c9a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c82:	4b0a      	ldr	r3, [pc, #40]	@ (8000cac <HAL_TIM_Base_MspInit+0x60>)
 8000c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c86:	4a09      	ldr	r2, [pc, #36]	@ (8000cac <HAL_TIM_Base_MspInit+0x60>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c8e:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <HAL_TIM_Base_MspInit+0x60>)
 8000c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
}
 8000c9a:	bf00      	nop
 8000c9c:	3714      	adds	r7, #20
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40012c00 	.word	0x40012c00
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	@ 0x28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a23      	ldr	r2, [pc, #140]	@ (8000d5c <HAL_TIM_MspPostInit+0xac>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d11e      	bne.n	8000d10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b23      	ldr	r3, [pc, #140]	@ (8000d60 <HAL_TIM_MspPostInit+0xb0>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd6:	4a22      	ldr	r2, [pc, #136]	@ (8000d60 <HAL_TIM_MspPostInit+0xb0>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cde:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <HAL_TIM_MspPostInit+0xb0>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0a:	f000 faaf 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d0e:	e021      	b.n	8000d54 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d18:	d11c      	bne.n	8000d54 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <HAL_TIM_MspPostInit+0xb0>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	4a10      	ldr	r2, [pc, #64]	@ (8000d60 <HAL_TIM_MspPostInit+0xb0>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <HAL_TIM_MspPostInit+0xb0>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d32:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d44:	2301      	movs	r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <HAL_TIM_MspPostInit+0xb4>)
 8000d50:	f000 fa8c 	bl	800126c <HAL_GPIO_Init>
}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	@ 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40012c00 	.word	0x40012c00
 8000d60:	40021000 	.word	0x40021000
 8000d64:	48000400 	.word	0x48000400

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <NMI_Handler+0x4>

08000d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <MemManage_Handler+0x4>

08000d80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbe:	f000 f8a5 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000dcc:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <LPUART1_IRQHandler+0x10>)
 8000dce:	f003 f931 	bl	8004034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000078 	.word	0x20000078

08000ddc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e04:	f7ff ffea 	bl	8000ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e08:	480c      	ldr	r0, [pc, #48]	@ (8000e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e0a:	490d      	ldr	r1, [pc, #52]	@ (8000e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e44 <LoopForever+0xe>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e20:	4c0a      	ldr	r4, [pc, #40]	@ (8000e4c <LoopForever+0x16>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f004 fc71 	bl	8005714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e32:	f7ff fb41 	bl	80004b8 <main>

08000e36 <LoopForever>:

LoopForever:
    b LoopForever
 8000e36:	e7fe      	b.n	8000e36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e44:	080058d0 	.word	0x080058d0
  ldr r2, =_sbss
 8000e48:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e4c:	20000368 	.word	0x20000368

08000e50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC1_2_IRQHandler>
	...

08000e54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e90 <HAL_Init+0x3c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a0b      	ldr	r2, [pc, #44]	@ (8000e90 <HAL_Init+0x3c>)
 8000e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	f000 f93e 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e70:	2000      	movs	r0, #0
 8000e72:	f000 f80f 	bl	8000e94 <HAL_InitTick>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d002      	beq.n	8000e82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	e001      	b.n	8000e86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e82:	f7ff fe15 	bl	8000ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e86:	79fb      	ldrb	r3, [r7, #7]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40022000 	.word	0x40022000

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ea0:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <HAL_InitTick+0x6c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d023      	beq.n	8000ef0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ea8:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <HAL_InitTick+0x70>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <HAL_InitTick+0x6c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f949 	bl	8001156 <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10f      	bne.n	8000eea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b0f      	cmp	r3, #15
 8000ece:	d809      	bhi.n	8000ee4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 f913 	bl	8001102 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000edc:	4a0a      	ldr	r2, [pc, #40]	@ (8000f08 <HAL_InitTick+0x74>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	e007      	b.n	8000ef4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	e004      	b.n	8000ef4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
 8000eee:	e001      	b.n	8000ef4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000004 	.word	0x20000004

08000f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	2000022c 	.word	0x2000022c

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	2000022c 	.word	0x2000022c

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4907      	ldr	r1, [pc, #28]	@ (8000fe8 <__NVIC_EnableIRQ+0x38>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	@ (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	@ (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	@ 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	@ 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010b8:	d301      	bcc.n	80010be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00f      	b.n	80010de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010be:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <SysTick_Config+0x40>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c6:	210f      	movs	r1, #15
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f7ff ff8e 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <SysTick_Config+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <SysTick_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff29 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff3e 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ff8e 	bl	8001040 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff5d 	bl	8000fec <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff31 	bl	8000fb0 <__NVIC_EnableIRQ>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffa2 	bl	80010a8 <SysTick_Config>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800116e:	b480      	push	{r7}
 8001170:	b085      	sub	sp, #20
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d008      	beq.n	8001198 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2204      	movs	r2, #4
 800118a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e022      	b.n	80011de <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 020e 	bic.w	r2, r2, #14
 80011a6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011bc:	f003 021c 	and.w	r2, r3, #28
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c4:	2101      	movs	r1, #1
 80011c6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ca:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d005      	beq.n	800120e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2204      	movs	r2, #4
 8001206:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e029      	b.n	8001262 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 020e 	bic.w	r2, r2, #14
 800121c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0201 	bic.w	r2, r2, #1
 800122c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001232:	f003 021c 	and.w	r2, r3, #28
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	2101      	movs	r1, #1
 800123c:	fa01 f202 	lsl.w	r2, r1, r2
 8001240:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	4798      	blx	r3
    }
  }
  return status;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127a:	e17f      	b.n	800157c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	2101      	movs	r1, #1
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	fa01 f303 	lsl.w	r3, r1, r3
 8001288:	4013      	ands	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8171 	beq.w	8001576 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b01      	cmp	r3, #1
 800129e:	d005      	beq.n	80012ac <HAL_GPIO_Init+0x40>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d130      	bne.n	800130e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012e2:	2201      	movs	r2, #1
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	091b      	lsrs	r3, r3, #4
 80012f8:	f003 0201 	and.w	r2, r3, #1
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b03      	cmp	r3, #3
 8001318:	d118      	bne.n	800134c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001320:	2201      	movs	r2, #1
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	08db      	lsrs	r3, r3, #3
 8001336:	f003 0201 	and.w	r2, r3, #1
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b03      	cmp	r3, #3
 8001356:	d017      	beq.n	8001388 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d123      	bne.n	80013dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	08da      	lsrs	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3208      	adds	r2, #8
 800139c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	220f      	movs	r2, #15
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	6939      	ldr	r1, [r7, #16]
 80013d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0203 	and.w	r2, r3, #3
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80ac 	beq.w	8001576 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	4b5f      	ldr	r3, [pc, #380]	@ (800159c <HAL_GPIO_Init+0x330>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001422:	4a5e      	ldr	r2, [pc, #376]	@ (800159c <HAL_GPIO_Init+0x330>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6613      	str	r3, [r2, #96]	@ 0x60
 800142a:	4b5c      	ldr	r3, [pc, #368]	@ (800159c <HAL_GPIO_Init+0x330>)
 800142c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001436:	4a5a      	ldr	r2, [pc, #360]	@ (80015a0 <HAL_GPIO_Init+0x334>)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	3302      	adds	r3, #2
 800143e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	220f      	movs	r2, #15
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001460:	d025      	beq.n	80014ae <HAL_GPIO_Init+0x242>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4f      	ldr	r2, [pc, #316]	@ (80015a4 <HAL_GPIO_Init+0x338>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d01f      	beq.n	80014aa <HAL_GPIO_Init+0x23e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4e      	ldr	r2, [pc, #312]	@ (80015a8 <HAL_GPIO_Init+0x33c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d019      	beq.n	80014a6 <HAL_GPIO_Init+0x23a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4d      	ldr	r2, [pc, #308]	@ (80015ac <HAL_GPIO_Init+0x340>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0x236>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4c      	ldr	r2, [pc, #304]	@ (80015b0 <HAL_GPIO_Init+0x344>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00d      	beq.n	800149e <HAL_GPIO_Init+0x232>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4b      	ldr	r2, [pc, #300]	@ (80015b4 <HAL_GPIO_Init+0x348>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d007      	beq.n	800149a <HAL_GPIO_Init+0x22e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4a      	ldr	r2, [pc, #296]	@ (80015b8 <HAL_GPIO_Init+0x34c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_GPIO_Init+0x22a>
 8001492:	2306      	movs	r3, #6
 8001494:	e00c      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 8001496:	2307      	movs	r3, #7
 8001498:	e00a      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 800149a:	2305      	movs	r3, #5
 800149c:	e008      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 800149e:	2304      	movs	r3, #4
 80014a0:	e006      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 80014a2:	2303      	movs	r3, #3
 80014a4:	e004      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e002      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <HAL_GPIO_Init+0x244>
 80014ae:	2300      	movs	r3, #0
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	f002 0203 	and.w	r2, r2, #3
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	4093      	lsls	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014c0:	4937      	ldr	r1, [pc, #220]	@ (80015a0 <HAL_GPIO_Init+0x334>)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ce:	4b3b      	ldr	r3, [pc, #236]	@ (80015bc <HAL_GPIO_Init+0x350>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014f2:	4a32      	ldr	r2, [pc, #200]	@ (80015bc <HAL_GPIO_Init+0x350>)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014f8:	4b30      	ldr	r3, [pc, #192]	@ (80015bc <HAL_GPIO_Init+0x350>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800151c:	4a27      	ldr	r2, [pc, #156]	@ (80015bc <HAL_GPIO_Init+0x350>)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001522:	4b26      	ldr	r3, [pc, #152]	@ (80015bc <HAL_GPIO_Init+0x350>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001546:	4a1d      	ldr	r2, [pc, #116]	@ (80015bc <HAL_GPIO_Init+0x350>)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800154c:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <HAL_GPIO_Init+0x350>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	43db      	mvns	r3, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001570:	4a12      	ldr	r2, [pc, #72]	@ (80015bc <HAL_GPIO_Init+0x350>)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa22 f303 	lsr.w	r3, r2, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	f47f ae78 	bne.w	800127c <HAL_GPIO_Init+0x10>
  }
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	371c      	adds	r7, #28
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
 80015a0:	40010000 	.word	0x40010000
 80015a4:	48000400 	.word	0x48000400
 80015a8:	48000800 	.word	0x48000800
 80015ac:	48000c00 	.word	0x48000c00
 80015b0:	48001000 	.word	0x48001000
 80015b4:	48001400 	.word	0x48001400
 80015b8:	48001800 	.word	0x48001800
 80015bc:	40010400 	.word	0x40010400

080015c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
 80015cc:	4613      	mov	r3, r2
 80015ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d0:	787b      	ldrb	r3, [r7, #1]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015d6:	887a      	ldrh	r2, [r7, #2]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015dc:	e002      	b.n	80015e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015f4:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <HAL_PWREx_GetVoltageRange+0x18>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40007000 	.word	0x40007000

0800160c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800161a:	d130      	bne.n	800167e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800161c:	4b23      	ldr	r3, [pc, #140]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001628:	d038      	beq.n	800169c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800162a:	4b20      	ldr	r3, [pc, #128]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001632:	4a1e      	ldr	r2, [pc, #120]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001634:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001638:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800163a:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2232      	movs	r2, #50	@ 0x32
 8001640:	fb02 f303 	mul.w	r3, r2, r3
 8001644:	4a1b      	ldr	r2, [pc, #108]	@ (80016b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	0c9b      	lsrs	r3, r3, #18
 800164c:	3301      	adds	r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001650:	e002      	b.n	8001658 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3b01      	subs	r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001658:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001660:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001664:	d102      	bne.n	800166c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f2      	bne.n	8001652 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800166c:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001678:	d110      	bne.n	800169c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e00f      	b.n	800169e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800167e:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800168a:	d007      	beq.n	800169c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800168c:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001694:	4a05      	ldr	r2, [pc, #20]	@ (80016ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001696:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800169a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40007000 	.word	0x40007000
 80016b0:	20000000 	.word	0x20000000
 80016b4:	431bde83 	.word	0x431bde83

080016b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e3ca      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ca:	4b97      	ldr	r3, [pc, #604]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
 80016d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016d4:	4b94      	ldr	r3, [pc, #592]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 80e4 	beq.w	80018b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <HAL_RCC_OscConfig+0x4a>
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	2b0c      	cmp	r3, #12
 80016f6:	f040 808b 	bne.w	8001810 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	f040 8087 	bne.w	8001810 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001702:	4b89      	ldr	r3, [pc, #548]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <HAL_RCC_OscConfig+0x62>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e3a2      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1a      	ldr	r2, [r3, #32]
 800171e:	4b82      	ldr	r3, [pc, #520]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d004      	beq.n	8001734 <HAL_RCC_OscConfig+0x7c>
 800172a:	4b7f      	ldr	r3, [pc, #508]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001732:	e005      	b.n	8001740 <HAL_RCC_OscConfig+0x88>
 8001734:	4b7c      	ldr	r3, [pc, #496]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001736:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800173a:	091b      	lsrs	r3, r3, #4
 800173c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001740:	4293      	cmp	r3, r2
 8001742:	d223      	bcs.n	800178c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fd55 	bl	80021f8 <RCC_SetFlashLatencyFromMSIRange>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e383      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001758:	4b73      	ldr	r3, [pc, #460]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a72      	ldr	r2, [pc, #456]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800175e:	f043 0308 	orr.w	r3, r3, #8
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b70      	ldr	r3, [pc, #448]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	496d      	ldr	r1, [pc, #436]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001776:	4b6c      	ldr	r3, [pc, #432]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	4968      	ldr	r1, [pc, #416]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]
 800178a:	e025      	b.n	80017d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800178c:	4b66      	ldr	r3, [pc, #408]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a65      	ldr	r2, [pc, #404]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001792:	f043 0308 	orr.w	r3, r3, #8
 8001796:	6013      	str	r3, [r2, #0]
 8001798:	4b63      	ldr	r3, [pc, #396]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4960      	ldr	r1, [pc, #384]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	495b      	ldr	r1, [pc, #364]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d109      	bne.n	80017d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fd15 	bl	80021f8 <RCC_SetFlashLatencyFromMSIRange>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e343      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017d8:	f000 fc4a 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 80017dc:	4602      	mov	r2, r0
 80017de:	4b52      	ldr	r3, [pc, #328]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	4950      	ldr	r1, [pc, #320]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 80017ea:	5ccb      	ldrb	r3, [r1, r3]
 80017ec:	f003 031f 	and.w	r3, r3, #31
 80017f0:	fa22 f303 	lsr.w	r3, r2, r3
 80017f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001930 <HAL_RCC_OscConfig+0x278>)
 80017f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fb49 	bl	8000e94 <HAL_InitTick>
 8001802:	4603      	mov	r3, r0
 8001804:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d052      	beq.n	80018b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	e327      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d032      	beq.n	800187e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001818:	4b43      	ldr	r3, [pc, #268]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a42      	ldr	r2, [pc, #264]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001824:	f7ff fb86 	bl	8000f34 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800182c:	f7ff fb82 	bl	8000f34 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e310      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800183e:	4b3a      	ldr	r3, [pc, #232]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800184a:	4b37      	ldr	r3, [pc, #220]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a36      	ldr	r2, [pc, #216]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001850:	f043 0308 	orr.w	r3, r3, #8
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4b34      	ldr	r3, [pc, #208]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4931      	ldr	r1, [pc, #196]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001864:	4313      	orrs	r3, r2
 8001866:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001868:	4b2f      	ldr	r3, [pc, #188]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	492c      	ldr	r1, [pc, #176]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
 800187c:	e01a      	b.n	80018b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800187e:	4b2a      	ldr	r3, [pc, #168]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a29      	ldr	r2, [pc, #164]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001884:	f023 0301 	bic.w	r3, r3, #1
 8001888:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800188a:	f7ff fb53 	bl	8000f34 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001892:	f7ff fb4f 	bl	8000f34 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e2dd      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018a4:	4b20      	ldr	r3, [pc, #128]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f0      	bne.n	8001892 <HAL_RCC_OscConfig+0x1da>
 80018b0:	e000      	b.n	80018b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d074      	beq.n	80019aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d005      	beq.n	80018d2 <HAL_RCC_OscConfig+0x21a>
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	2b0c      	cmp	r3, #12
 80018ca:	d10e      	bne.n	80018ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d10b      	bne.n	80018ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d2:	4b15      	ldr	r3, [pc, #84]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d064      	beq.n	80019a8 <HAL_RCC_OscConfig+0x2f0>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d160      	bne.n	80019a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e2ba      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x24a>
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 80018fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	e026      	b.n	8001950 <HAL_RCC_OscConfig+0x298>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800190a:	d115      	bne.n	8001938 <HAL_RCC_OscConfig+0x280>
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a05      	ldr	r2, [pc, #20]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 8001912:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b03      	ldr	r3, [pc, #12]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a02      	ldr	r2, [pc, #8]	@ (8001928 <HAL_RCC_OscConfig+0x270>)
 800191e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	e014      	b.n	8001950 <HAL_RCC_OscConfig+0x298>
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	08005774 	.word	0x08005774
 8001930:	20000000 	.word	0x20000000
 8001934:	20000004 	.word	0x20000004
 8001938:	4ba0      	ldr	r3, [pc, #640]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a9f      	ldr	r2, [pc, #636]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 800193e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b9d      	ldr	r3, [pc, #628]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a9c      	ldr	r2, [pc, #624]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800194e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff faec 	bl	8000f34 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001960:	f7ff fae8 	bl	8000f34 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b64      	cmp	r3, #100	@ 0x64
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e276      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001972:	4b92      	ldr	r3, [pc, #584]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x2a8>
 800197e:	e014      	b.n	80019aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff fad8 	bl	8000f34 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001988:	f7ff fad4 	bl	8000f34 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	@ 0x64
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e262      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800199a:	4b88      	ldr	r3, [pc, #544]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x2d0>
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d060      	beq.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_OscConfig+0x310>
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2b0c      	cmp	r3, #12
 80019c0:	d119      	bne.n	80019f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d116      	bne.n	80019f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c8:	4b7c      	ldr	r3, [pc, #496]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_OscConfig+0x328>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e23f      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e0:	4b76      	ldr	r3, [pc, #472]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	061b      	lsls	r3, r3, #24
 80019ee:	4973      	ldr	r1, [pc, #460]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f4:	e040      	b.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d023      	beq.n	8001a46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019fe:	4b6f      	ldr	r3, [pc, #444]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6e      	ldr	r2, [pc, #440]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fa93 	bl	8000f34 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a12:	f7ff fa8f 	bl	8000f34 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e21d      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a24:	4b65      	ldr	r3, [pc, #404]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a30:	4b62      	ldr	r3, [pc, #392]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	061b      	lsls	r3, r3, #24
 8001a3e:	495f      	ldr	r1, [pc, #380]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
 8001a44:	e018      	b.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a46:	4b5d      	ldr	r3, [pc, #372]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a5c      	ldr	r2, [pc, #368]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a52:	f7ff fa6f 	bl	8000f34 <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5a:	f7ff fa6b 	bl	8000f34 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e1f9      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a6c:	4b53      	ldr	r3, [pc, #332]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1f0      	bne.n	8001a5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d03c      	beq.n	8001afe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d01c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8c:	4b4b      	ldr	r3, [pc, #300]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a92:	4a4a      	ldr	r2, [pc, #296]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fa4a 	bl	8000f34 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa4:	f7ff fa46 	bl	8000f34 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e1d4      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ab6:	4b41      	ldr	r3, [pc, #260]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0ef      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x3ec>
 8001ac4:	e01b      	b.n	8001afe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001acc:	4a3b      	ldr	r2, [pc, #236]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001ace:	f023 0301 	bic.w	r3, r3, #1
 8001ad2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fa2d 	bl	8000f34 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ade:	f7ff fa29 	bl	8000f34 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e1b7      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001af0:	4b32      	ldr	r3, [pc, #200]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1ef      	bne.n	8001ade <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 80a6 	beq.w	8001c58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b10:	4b2a      	ldr	r3, [pc, #168]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10d      	bne.n	8001b38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b1c:	4b27      	ldr	r3, [pc, #156]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b20:	4a26      	ldr	r2, [pc, #152]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b28:	4b24      	ldr	r3, [pc, #144]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b34:	2301      	movs	r3, #1
 8001b36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b38:	4b21      	ldr	r3, [pc, #132]	@ (8001bc0 <HAL_RCC_OscConfig+0x508>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d118      	bne.n	8001b76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b44:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc0 <HAL_RCC_OscConfig+0x508>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc0 <HAL_RCC_OscConfig+0x508>)
 8001b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b50:	f7ff f9f0 	bl	8000f34 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b58:	f7ff f9ec 	bl	8000f34 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e17a      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <HAL_RCC_OscConfig+0x508>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d108      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4d8>
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b84:	4a0d      	ldr	r2, [pc, #52]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b8e:	e029      	b.n	8001be4 <HAL_RCC_OscConfig+0x52c>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b05      	cmp	r3, #5
 8001b96:	d115      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x50c>
 8001b98:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b9e:	4a07      	ldr	r2, [pc, #28]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bae:	4a03      	ldr	r2, [pc, #12]	@ (8001bbc <HAL_RCC_OscConfig+0x504>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bb8:	e014      	b.n	8001be4 <HAL_RCC_OscConfig+0x52c>
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	4b9c      	ldr	r3, [pc, #624]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bca:	4a9b      	ldr	r2, [pc, #620]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bd4:	4b98      	ldr	r3, [pc, #608]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bda:	4a97      	ldr	r2, [pc, #604]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001bdc:	f023 0304 	bic.w	r3, r3, #4
 8001be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d016      	beq.n	8001c1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bec:	f7ff f9a2 	bl	8000f34 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf4:	f7ff f99e 	bl	8000f34 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e12a      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c0a:	4b8b      	ldr	r3, [pc, #556]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0ed      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x53c>
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1a:	f7ff f98b 	bl	8000f34 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c20:	e00a      	b.n	8001c38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7ff f987 	bl	8000f34 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e113      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c38:	4b7f      	ldr	r3, [pc, #508]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1ed      	bne.n	8001c22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c46:	7ffb      	ldrb	r3, [r7, #31]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d105      	bne.n	8001c58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4c:	4b7a      	ldr	r3, [pc, #488]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c50:	4a79      	ldr	r2, [pc, #484]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001c52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c56:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80fe 	beq.w	8001e5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	f040 80d0 	bne.w	8001e0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c6c:	4b72      	ldr	r3, [pc, #456]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0203 	and.w	r2, r3, #3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d130      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d127      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d11f      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001cac:	2a07      	cmp	r2, #7
 8001cae:	bf14      	ite	ne
 8001cb0:	2201      	movne	r2, #1
 8001cb2:	2200      	moveq	r2, #0
 8001cb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d113      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc4:	085b      	lsrs	r3, r3, #1
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d109      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	085b      	lsrs	r3, r3, #1
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d06e      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b0c      	cmp	r3, #12
 8001ce6:	d069      	beq.n	8001dbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ce8:	4b53      	ldr	r3, [pc, #332]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d105      	bne.n	8001d00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cf4:	4b50      	ldr	r3, [pc, #320]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0ad      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d04:	4b4c      	ldr	r3, [pc, #304]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a4b      	ldr	r2, [pc, #300]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d10:	f7ff f910 	bl	8000f34 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff f90c 	bl	8000f34 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e09a      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2a:	4b43      	ldr	r3, [pc, #268]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d36:	4b40      	ldr	r3, [pc, #256]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	4b40      	ldr	r3, [pc, #256]	@ (8001e3c <HAL_RCC_OscConfig+0x784>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d46:	3a01      	subs	r2, #1
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	4311      	orrs	r1, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d50:	0212      	lsls	r2, r2, #8
 8001d52:	4311      	orrs	r1, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d58:	0852      	lsrs	r2, r2, #1
 8001d5a:	3a01      	subs	r2, #1
 8001d5c:	0552      	lsls	r2, r2, #21
 8001d5e:	4311      	orrs	r1, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d64:	0852      	lsrs	r2, r2, #1
 8001d66:	3a01      	subs	r2, #1
 8001d68:	0652      	lsls	r2, r2, #25
 8001d6a:	4311      	orrs	r1, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d70:	0912      	lsrs	r2, r2, #4
 8001d72:	0452      	lsls	r2, r2, #17
 8001d74:	430a      	orrs	r2, r1
 8001d76:	4930      	ldr	r1, [pc, #192]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2d      	ldr	r2, [pc, #180]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d88:	4b2b      	ldr	r3, [pc, #172]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4a2a      	ldr	r2, [pc, #168]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001d8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d94:	f7ff f8ce 	bl	8000f34 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff f8ca 	bl	8000f34 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e058      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dae:	4b22      	ldr	r3, [pc, #136]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dba:	e050      	b.n	8001e5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e04f      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d148      	bne.n	8001e5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a19      	ldr	r2, [pc, #100]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001dd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dd8:	4b17      	ldr	r3, [pc, #92]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4a16      	ldr	r2, [pc, #88]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001dde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001de2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001de4:	f7ff f8a6 	bl	8000f34 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff f8a2 	bl	8000f34 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e030      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x734>
 8001e0a:	e028      	b.n	8001e5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2b0c      	cmp	r3, #12
 8001e10:	d023      	beq.n	8001e5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a08      	ldr	r2, [pc, #32]	@ (8001e38 <HAL_RCC_OscConfig+0x780>)
 8001e18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1e:	f7ff f889 	bl	8000f34 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e24:	e00c      	b.n	8001e40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e26:	f7ff f885 	bl	8000f34 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d905      	bls.n	8001e40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e013      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e40:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <HAL_RCC_OscConfig+0x7b0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1ec      	bne.n	8001e26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e4c:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_RCC_OscConfig+0x7b0>)
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	4905      	ldr	r1, [pc, #20]	@ (8001e68 <HAL_RCC_OscConfig+0x7b0>)
 8001e52:	4b06      	ldr	r3, [pc, #24]	@ (8001e6c <HAL_RCC_OscConfig+0x7b4>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	60cb      	str	r3, [r1, #12]
 8001e58:	e001      	b.n	8001e5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3720      	adds	r7, #32
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	feeefffc 	.word	0xfeeefffc

08001e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0e7      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e84:	4b75      	ldr	r3, [pc, #468]	@ (800205c <HAL_RCC_ClockConfig+0x1ec>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d910      	bls.n	8001eb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b72      	ldr	r3, [pc, #456]	@ (800205c <HAL_RCC_ClockConfig+0x1ec>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 0207 	bic.w	r2, r3, #7
 8001e9a:	4970      	ldr	r1, [pc, #448]	@ (800205c <HAL_RCC_ClockConfig+0x1ec>)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b6e      	ldr	r3, [pc, #440]	@ (800205c <HAL_RCC_ClockConfig+0x1ec>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0cf      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d010      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	4b66      	ldr	r3, [pc, #408]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d908      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed0:	4b63      	ldr	r3, [pc, #396]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4960      	ldr	r1, [pc, #384]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d04c      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b03      	cmp	r3, #3
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef6:	4b5a      	ldr	r3, [pc, #360]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d121      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e0a6      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0e:	4b54      	ldr	r3, [pc, #336]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d115      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e09a      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d107      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f26:	4b4e      	ldr	r3, [pc, #312]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e08e      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f36:	4b4a      	ldr	r3, [pc, #296]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e086      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f46:	4b46      	ldr	r3, [pc, #280]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f023 0203 	bic.w	r2, r3, #3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	4943      	ldr	r1, [pc, #268]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f58:	f7fe ffec 	bl	8000f34 <HAL_GetTick>
 8001f5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f60:	f7fe ffe8 	bl	8000f34 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e06e      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f76:	4b3a      	ldr	r3, [pc, #232]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 020c 	and.w	r2, r3, #12
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d1eb      	bne.n	8001f60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d010      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	4b31      	ldr	r3, [pc, #196]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d208      	bcs.n	8001fb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	492b      	ldr	r1, [pc, #172]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb6:	4b29      	ldr	r3, [pc, #164]	@ (800205c <HAL_RCC_ClockConfig+0x1ec>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d210      	bcs.n	8001fe6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc4:	4b25      	ldr	r3, [pc, #148]	@ (800205c <HAL_RCC_ClockConfig+0x1ec>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f023 0207 	bic.w	r2, r3, #7
 8001fcc:	4923      	ldr	r1, [pc, #140]	@ (800205c <HAL_RCC_ClockConfig+0x1ec>)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd4:	4b21      	ldr	r3, [pc, #132]	@ (800205c <HAL_RCC_ClockConfig+0x1ec>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e036      	b.n	8002054 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	4918      	ldr	r1, [pc, #96]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8002000:	4313      	orrs	r3, r2
 8002002:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d009      	beq.n	8002024 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002010:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4910      	ldr	r1, [pc, #64]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002024:	f000 f824 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b0d      	ldr	r3, [pc, #52]	@ (8002060 <HAL_RCC_ClockConfig+0x1f0>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	091b      	lsrs	r3, r3, #4
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	490b      	ldr	r1, [pc, #44]	@ (8002064 <HAL_RCC_ClockConfig+0x1f4>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
 8002040:	4a09      	ldr	r2, [pc, #36]	@ (8002068 <HAL_RCC_ClockConfig+0x1f8>)
 8002042:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002044:	4b09      	ldr	r3, [pc, #36]	@ (800206c <HAL_RCC_ClockConfig+0x1fc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe ff23 	bl	8000e94 <HAL_InitTick>
 800204e:	4603      	mov	r3, r0
 8002050:	72fb      	strb	r3, [r7, #11]

  return status;
 8002052:	7afb      	ldrb	r3, [r7, #11]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40022000 	.word	0x40022000
 8002060:	40021000 	.word	0x40021000
 8002064:	08005774 	.word	0x08005774
 8002068:	20000000 	.word	0x20000000
 800206c:	20000004 	.word	0x20000004

08002070 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	@ 0x24
 8002074:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800207e:	4b3e      	ldr	r3, [pc, #248]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002088:	4b3b      	ldr	r3, [pc, #236]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d121      	bne.n	80020e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d11e      	bne.n	80020e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020a4:	4b34      	ldr	r3, [pc, #208]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d107      	bne.n	80020c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020b0:	4b31      	ldr	r3, [pc, #196]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	f003 030f 	and.w	r3, r3, #15
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	e005      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	091b      	lsrs	r3, r3, #4
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020cc:	4a2b      	ldr	r2, [pc, #172]	@ (800217c <HAL_RCC_GetSysClockFreq+0x10c>)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10d      	bne.n	80020f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d102      	bne.n	80020ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020e8:	4b25      	ldr	r3, [pc, #148]	@ (8002180 <HAL_RCC_GetSysClockFreq+0x110>)
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	e004      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020f4:	4b23      	ldr	r3, [pc, #140]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x114>)
 80020f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	2b0c      	cmp	r3, #12
 80020fc:	d134      	bne.n	8002168 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d003      	beq.n	8002116 <HAL_RCC_GetSysClockFreq+0xa6>
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d003      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0xac>
 8002114:	e005      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002116:	4b1a      	ldr	r3, [pc, #104]	@ (8002180 <HAL_RCC_GetSysClockFreq+0x110>)
 8002118:	617b      	str	r3, [r7, #20]
      break;
 800211a:	e005      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800211c:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x114>)
 800211e:	617b      	str	r3, [r7, #20]
      break;
 8002120:	e002      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	617b      	str	r3, [r7, #20]
      break;
 8002126:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002128:	4b13      	ldr	r3, [pc, #76]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	3301      	adds	r3, #1
 8002134:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	0a1b      	lsrs	r3, r3, #8
 800213c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	fb03 f202 	mul.w	r2, r3, r2
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	fbb2 f3f3 	udiv	r3, r2, r3
 800214c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800214e:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <HAL_RCC_GetSysClockFreq+0x108>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	0e5b      	lsrs	r3, r3, #25
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	3301      	adds	r3, #1
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	fbb2 f3f3 	udiv	r3, r2, r3
 8002166:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002168:	69bb      	ldr	r3, [r7, #24]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3724      	adds	r7, #36	@ 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	0800578c 	.word	0x0800578c
 8002180:	00f42400 	.word	0x00f42400
 8002184:	007a1200 	.word	0x007a1200

08002188 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800218c:	4b03      	ldr	r3, [pc, #12]	@ (800219c <HAL_RCC_GetHCLKFreq+0x14>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	20000000 	.word	0x20000000

080021a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021a4:	f7ff fff0 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	4904      	ldr	r1, [pc, #16]	@ (80021c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021b6:	5ccb      	ldrb	r3, [r1, r3]
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08005784 	.word	0x08005784

080021cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021d0:	f7ff ffda 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021d4:	4602      	mov	r2, r0
 80021d6:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	0adb      	lsrs	r3, r3, #11
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	4904      	ldr	r1, [pc, #16]	@ (80021f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021e2:	5ccb      	ldrb	r3, [r1, r3]
 80021e4:	f003 031f 	and.w	r3, r3, #31
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	08005784 	.word	0x08005784

080021f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002200:	2300      	movs	r3, #0
 8002202:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002204:	4b2a      	ldr	r3, [pc, #168]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002210:	f7ff f9ee 	bl	80015f0 <HAL_PWREx_GetVoltageRange>
 8002214:	6178      	str	r0, [r7, #20]
 8002216:	e014      	b.n	8002242 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002218:	4b25      	ldr	r3, [pc, #148]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800221c:	4a24      	ldr	r2, [pc, #144]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002222:	6593      	str	r3, [r2, #88]	@ 0x58
 8002224:	4b22      	ldr	r3, [pc, #136]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002230:	f7ff f9de 	bl	80015f0 <HAL_PWREx_GetVoltageRange>
 8002234:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002236:	4b1e      	ldr	r3, [pc, #120]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223a:	4a1d      	ldr	r2, [pc, #116]	@ (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002240:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002248:	d10b      	bne.n	8002262 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b80      	cmp	r3, #128	@ 0x80
 800224e:	d919      	bls.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2ba0      	cmp	r3, #160	@ 0xa0
 8002254:	d902      	bls.n	800225c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002256:	2302      	movs	r3, #2
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	e013      	b.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800225c:	2301      	movs	r3, #1
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	e010      	b.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b80      	cmp	r3, #128	@ 0x80
 8002266:	d902      	bls.n	800226e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002268:	2303      	movs	r3, #3
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	e00a      	b.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b80      	cmp	r3, #128	@ 0x80
 8002272:	d102      	bne.n	800227a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002274:	2302      	movs	r3, #2
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	e004      	b.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b70      	cmp	r3, #112	@ 0x70
 800227e:	d101      	bne.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002280:	2301      	movs	r3, #1
 8002282:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 0207 	bic.w	r2, r3, #7
 800228c:	4909      	ldr	r1, [pc, #36]	@ (80022b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002294:	4b07      	ldr	r3, [pc, #28]	@ (80022b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d001      	beq.n	80022a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40022000 	.word	0x40022000

080022b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022c0:	2300      	movs	r3, #0
 80022c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022c4:	2300      	movs	r3, #0
 80022c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d041      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022dc:	d02a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80022e2:	d824      	bhi.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022e8:	d008      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022ee:	d81e      	bhi.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022f8:	d010      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022fa:	e018      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022fc:	4b86      	ldr	r3, [pc, #536]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	4a85      	ldr	r2, [pc, #532]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002302:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002306:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002308:	e015      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3304      	adds	r3, #4
 800230e:	2100      	movs	r1, #0
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fabb 	bl	800288c <RCCEx_PLLSAI1_Config>
 8002316:	4603      	mov	r3, r0
 8002318:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800231a:	e00c      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3320      	adds	r3, #32
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fba6 	bl	8002a74 <RCCEx_PLLSAI2_Config>
 8002328:	4603      	mov	r3, r0
 800232a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800232c:	e003      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	74fb      	strb	r3, [r7, #19]
      break;
 8002332:	e000      	b.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002334:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10b      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800233c:	4b76      	ldr	r3, [pc, #472]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002342:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800234a:	4973      	ldr	r1, [pc, #460]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234c:	4313      	orrs	r3, r2
 800234e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002352:	e001      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d041      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002368:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800236c:	d02a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800236e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002372:	d824      	bhi.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002374:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002378:	d008      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800237a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800237e:	d81e      	bhi.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002388:	d010      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800238a:	e018      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800238c:	4b62      	ldr	r3, [pc, #392]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	4a61      	ldr	r2, [pc, #388]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002396:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002398:	e015      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3304      	adds	r3, #4
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 fa73 	bl	800288c <RCCEx_PLLSAI1_Config>
 80023a6:	4603      	mov	r3, r0
 80023a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023aa:	e00c      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3320      	adds	r3, #32
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fb5e 	bl	8002a74 <RCCEx_PLLSAI2_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023bc:	e003      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	74fb      	strb	r3, [r7, #19]
      break;
 80023c2:	e000      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023c6:	7cfb      	ldrb	r3, [r7, #19]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10b      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023cc:	4b52      	ldr	r3, [pc, #328]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023da:	494f      	ldr	r1, [pc, #316]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023e2:	e001      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80a0 	beq.w	8002536 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023fa:	4b47      	ldr	r3, [pc, #284]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800240a:	2300      	movs	r3, #0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00d      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002410:	4b41      	ldr	r3, [pc, #260]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002414:	4a40      	ldr	r2, [pc, #256]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800241a:	6593      	str	r3, [r2, #88]	@ 0x58
 800241c:	4b3e      	ldr	r3, [pc, #248]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002428:	2301      	movs	r3, #1
 800242a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800242c:	4b3b      	ldr	r3, [pc, #236]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a3a      	ldr	r2, [pc, #232]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002436:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002438:	f7fe fd7c 	bl	8000f34 <HAL_GetTick>
 800243c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800243e:	e009      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002440:	f7fe fd78 	bl	8000f34 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d902      	bls.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	74fb      	strb	r3, [r7, #19]
        break;
 8002452:	e005      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002454:	4b31      	ldr	r3, [pc, #196]	@ (800251c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ef      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d15c      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002466:	4b2c      	ldr	r3, [pc, #176]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002470:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01f      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	429a      	cmp	r2, r3
 8002482:	d019      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002484:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800248e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002490:	4b21      	ldr	r3, [pc, #132]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002496:	4a20      	ldr	r2, [pc, #128]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800249c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024b0:	4a19      	ldr	r2, [pc, #100]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d016      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c2:	f7fe fd37 	bl	8000f34 <HAL_GetTick>
 80024c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c8:	e00b      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7fe fd33 	bl	8000f34 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d8:	4293      	cmp	r3, r2
 80024da:	d902      	bls.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	74fb      	strb	r3, [r7, #19]
            break;
 80024e0:	e006      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0ec      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024f0:	7cfb      	ldrb	r3, [r7, #19]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10c      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024f6:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002506:	4904      	ldr	r1, [pc, #16]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800250e:	e009      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	74bb      	strb	r3, [r7, #18]
 8002514:	e006      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000
 800251c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002524:	7c7b      	ldrb	r3, [r7, #17]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d105      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800252a:	4b9e      	ldr	r3, [pc, #632]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252e:	4a9d      	ldr	r2, [pc, #628]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002530:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002534:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002542:	4b98      	ldr	r3, [pc, #608]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002548:	f023 0203 	bic.w	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002550:	4994      	ldr	r1, [pc, #592]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00a      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002564:	4b8f      	ldr	r3, [pc, #572]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256a:	f023 020c 	bic.w	r2, r3, #12
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002572:	498c      	ldr	r1, [pc, #560]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002574:	4313      	orrs	r3, r2
 8002576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00a      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002586:	4b87      	ldr	r3, [pc, #540]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800258c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002594:	4983      	ldr	r1, [pc, #524]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002596:	4313      	orrs	r3, r2
 8002598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00a      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025a8:	4b7e      	ldr	r3, [pc, #504]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	497b      	ldr	r1, [pc, #492]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0310 	and.w	r3, r3, #16
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00a      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025ca:	4b76      	ldr	r3, [pc, #472]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d8:	4972      	ldr	r1, [pc, #456]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00a      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025ec:	4b6d      	ldr	r3, [pc, #436]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fa:	496a      	ldr	r1, [pc, #424]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00a      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800260e:	4b65      	ldr	r3, [pc, #404]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002614:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800261c:	4961      	ldr	r1, [pc, #388]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00a      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002630:	4b5c      	ldr	r3, [pc, #368]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002636:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263e:	4959      	ldr	r1, [pc, #356]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00a      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002652:	4b54      	ldr	r3, [pc, #336]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002658:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002660:	4950      	ldr	r1, [pc, #320]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002674:	4b4b      	ldr	r3, [pc, #300]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800267a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002682:	4948      	ldr	r1, [pc, #288]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002696:	4b43      	ldr	r3, [pc, #268]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a4:	493f      	ldr	r1, [pc, #252]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d028      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026b8:	4b3a      	ldr	r3, [pc, #232]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026c6:	4937      	ldr	r1, [pc, #220]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026d6:	d106      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d8:	4b32      	ldr	r3, [pc, #200]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	4a31      	ldr	r2, [pc, #196]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026e2:	60d3      	str	r3, [r2, #12]
 80026e4:	e011      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026ee:	d10c      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3304      	adds	r3, #4
 80026f4:	2101      	movs	r1, #1
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f8c8 	bl	800288c <RCCEx_PLLSAI1_Config>
 80026fc:	4603      	mov	r3, r0
 80026fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002700:	7cfb      	ldrb	r3, [r7, #19]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d028      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002716:	4b23      	ldr	r3, [pc, #140]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002724:	491f      	ldr	r1, [pc, #124]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002730:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002734:	d106      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002736:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	4a1a      	ldr	r2, [pc, #104]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002740:	60d3      	str	r3, [r2, #12]
 8002742:	e011      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002748:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800274c:	d10c      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	2101      	movs	r1, #1
 8002754:	4618      	mov	r0, r3
 8002756:	f000 f899 	bl	800288c <RCCEx_PLLSAI1_Config>
 800275a:	4603      	mov	r3, r0
 800275c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800275e:	7cfb      	ldrb	r3, [r7, #19]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d02b      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002782:	4908      	ldr	r1, [pc, #32]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800278e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002792:	d109      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002794:	4b03      	ldr	r3, [pc, #12]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a02      	ldr	r2, [pc, #8]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800279e:	60d3      	str	r3, [r2, #12]
 80027a0:	e014      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80027a2:	bf00      	nop
 80027a4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027b0:	d10c      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2101      	movs	r1, #1
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 f867 	bl	800288c <RCCEx_PLLSAI1_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d02f      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027e6:	4928      	ldr	r1, [pc, #160]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027f6:	d10d      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3304      	adds	r3, #4
 80027fc:	2102      	movs	r1, #2
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f844 	bl	800288c <RCCEx_PLLSAI1_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d014      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800280e:	7cfb      	ldrb	r3, [r7, #19]
 8002810:	74bb      	strb	r3, [r7, #18]
 8002812:	e011      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002818:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800281c:	d10c      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3320      	adds	r3, #32
 8002822:	2102      	movs	r1, #2
 8002824:	4618      	mov	r0, r3
 8002826:	f000 f925 	bl	8002a74 <RCCEx_PLLSAI2_Config>
 800282a:	4603      	mov	r3, r0
 800282c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800282e:	7cfb      	ldrb	r3, [r7, #19]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002844:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002852:	490d      	ldr	r1, [pc, #52]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00b      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002866:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002876:	4904      	ldr	r1, [pc, #16]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800287e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40021000 	.word	0x40021000

0800288c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800289a:	4b75      	ldr	r3, [pc, #468]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d018      	beq.n	80028d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028a6:	4b72      	ldr	r3, [pc, #456]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f003 0203 	and.w	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d10d      	bne.n	80028d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
       ||
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d009      	beq.n	80028d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028be:	4b6c      	ldr	r3, [pc, #432]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
       ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d047      	beq.n	8002962 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	73fb      	strb	r3, [r7, #15]
 80028d6:	e044      	b.n	8002962 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d018      	beq.n	8002912 <RCCEx_PLLSAI1_Config+0x86>
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d825      	bhi.n	8002930 <RCCEx_PLLSAI1_Config+0xa4>
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d002      	beq.n	80028ee <RCCEx_PLLSAI1_Config+0x62>
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d009      	beq.n	8002900 <RCCEx_PLLSAI1_Config+0x74>
 80028ec:	e020      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028ee:	4b60      	ldr	r3, [pc, #384]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d11d      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028fe:	e01a      	b.n	8002936 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002900:	4b5b      	ldr	r3, [pc, #364]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d116      	bne.n	800293a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002910:	e013      	b.n	800293a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002912:	4b57      	ldr	r3, [pc, #348]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10f      	bne.n	800293e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800291e:	4b54      	ldr	r3, [pc, #336]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800292e:	e006      	b.n	800293e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
      break;
 8002934:	e004      	b.n	8002940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002936:	bf00      	nop
 8002938:	e002      	b.n	8002940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800293a:	bf00      	nop
 800293c:	e000      	b.n	8002940 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800293e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10d      	bne.n	8002962 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002946:	4b4a      	ldr	r3, [pc, #296]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6819      	ldr	r1, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	3b01      	subs	r3, #1
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	430b      	orrs	r3, r1
 800295c:	4944      	ldr	r1, [pc, #272]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295e:	4313      	orrs	r3, r2
 8002960:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d17d      	bne.n	8002a64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002968:	4b41      	ldr	r3, [pc, #260]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a40      	ldr	r2, [pc, #256]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 800296e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002974:	f7fe fade 	bl	8000f34 <HAL_GetTick>
 8002978:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800297a:	e009      	b.n	8002990 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800297c:	f7fe fada 	bl	8000f34 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d902      	bls.n	8002990 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	73fb      	strb	r3, [r7, #15]
        break;
 800298e:	e005      	b.n	800299c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002990:	4b37      	ldr	r3, [pc, #220]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1ef      	bne.n	800297c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d160      	bne.n	8002a64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d111      	bne.n	80029cc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a8:	4b31      	ldr	r3, [pc, #196]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80029b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6892      	ldr	r2, [r2, #8]
 80029b8:	0211      	lsls	r1, r2, #8
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68d2      	ldr	r2, [r2, #12]
 80029be:	0912      	lsrs	r2, r2, #4
 80029c0:	0452      	lsls	r2, r2, #17
 80029c2:	430a      	orrs	r2, r1
 80029c4:	492a      	ldr	r1, [pc, #168]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	610b      	str	r3, [r1, #16]
 80029ca:	e027      	b.n	8002a1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d112      	bne.n	80029f8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029d2:	4b27      	ldr	r3, [pc, #156]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80029da:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6892      	ldr	r2, [r2, #8]
 80029e2:	0211      	lsls	r1, r2, #8
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6912      	ldr	r2, [r2, #16]
 80029e8:	0852      	lsrs	r2, r2, #1
 80029ea:	3a01      	subs	r2, #1
 80029ec:	0552      	lsls	r2, r2, #21
 80029ee:	430a      	orrs	r2, r1
 80029f0:	491f      	ldr	r1, [pc, #124]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	610b      	str	r3, [r1, #16]
 80029f6:	e011      	b.n	8002a1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002a00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6892      	ldr	r2, [r2, #8]
 8002a08:	0211      	lsls	r1, r2, #8
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6952      	ldr	r2, [r2, #20]
 8002a0e:	0852      	lsrs	r2, r2, #1
 8002a10:	3a01      	subs	r2, #1
 8002a12:	0652      	lsls	r2, r2, #25
 8002a14:	430a      	orrs	r2, r1
 8002a16:	4916      	ldr	r1, [pc, #88]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a1c:	4b14      	ldr	r3, [pc, #80]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a13      	ldr	r2, [pc, #76]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a22:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a28:	f7fe fa84 	bl	8000f34 <HAL_GetTick>
 8002a2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a2e:	e009      	b.n	8002a44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a30:	f7fe fa80 	bl	8000f34 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d902      	bls.n	8002a44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	73fb      	strb	r3, [r7, #15]
          break;
 8002a42:	e005      	b.n	8002a50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a44:	4b0a      	ldr	r3, [pc, #40]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0ef      	beq.n	8002a30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d106      	bne.n	8002a64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a56:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	4904      	ldr	r1, [pc, #16]	@ (8002a70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000

08002a74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a82:	4b6a      	ldr	r3, [pc, #424]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d018      	beq.n	8002ac0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a8e:	4b67      	ldr	r3, [pc, #412]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0203 	and.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d10d      	bne.n	8002aba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
       ||
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002aa6:	4b61      	ldr	r3, [pc, #388]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	091b      	lsrs	r3, r3, #4
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d047      	beq.n	8002b4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
 8002abe:	e044      	b.n	8002b4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d018      	beq.n	8002afa <RCCEx_PLLSAI2_Config+0x86>
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d825      	bhi.n	8002b18 <RCCEx_PLLSAI2_Config+0xa4>
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d002      	beq.n	8002ad6 <RCCEx_PLLSAI2_Config+0x62>
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d009      	beq.n	8002ae8 <RCCEx_PLLSAI2_Config+0x74>
 8002ad4:	e020      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ad6:	4b55      	ldr	r3, [pc, #340]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d11d      	bne.n	8002b1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae6:	e01a      	b.n	8002b1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ae8:	4b50      	ldr	r3, [pc, #320]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d116      	bne.n	8002b22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af8:	e013      	b.n	8002b22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002afa:	4b4c      	ldr	r3, [pc, #304]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10f      	bne.n	8002b26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b06:	4b49      	ldr	r3, [pc, #292]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b16:	e006      	b.n	8002b26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b1c:	e004      	b.n	8002b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b1e:	bf00      	nop
 8002b20:	e002      	b.n	8002b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b22:	bf00      	nop
 8002b24:	e000      	b.n	8002b28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b26:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10d      	bne.n	8002b4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6819      	ldr	r1, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	430b      	orrs	r3, r1
 8002b44:	4939      	ldr	r1, [pc, #228]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d167      	bne.n	8002c20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b50:	4b36      	ldr	r3, [pc, #216]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a35      	ldr	r2, [pc, #212]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5c:	f7fe f9ea 	bl	8000f34 <HAL_GetTick>
 8002b60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b62:	e009      	b.n	8002b78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b64:	f7fe f9e6 	bl	8000f34 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d902      	bls.n	8002b78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	73fb      	strb	r3, [r7, #15]
        break;
 8002b76:	e005      	b.n	8002b84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b78:	4b2c      	ldr	r3, [pc, #176]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1ef      	bne.n	8002b64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d14a      	bne.n	8002c20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d111      	bne.n	8002bb4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b90:	4b26      	ldr	r3, [pc, #152]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6892      	ldr	r2, [r2, #8]
 8002ba0:	0211      	lsls	r1, r2, #8
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68d2      	ldr	r2, [r2, #12]
 8002ba6:	0912      	lsrs	r2, r2, #4
 8002ba8:	0452      	lsls	r2, r2, #17
 8002baa:	430a      	orrs	r2, r1
 8002bac:	491f      	ldr	r1, [pc, #124]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	614b      	str	r3, [r1, #20]
 8002bb2:	e011      	b.n	8002bd8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002bbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6892      	ldr	r2, [r2, #8]
 8002bc4:	0211      	lsls	r1, r2, #8
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6912      	ldr	r2, [r2, #16]
 8002bca:	0852      	lsrs	r2, r2, #1
 8002bcc:	3a01      	subs	r2, #1
 8002bce:	0652      	lsls	r2, r2, #25
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	4916      	ldr	r1, [pc, #88]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bd8:	4b14      	ldr	r3, [pc, #80]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a13      	ldr	r2, [pc, #76]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be4:	f7fe f9a6 	bl	8000f34 <HAL_GetTick>
 8002be8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bea:	e009      	b.n	8002c00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bec:	f7fe f9a2 	bl	8000f34 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d902      	bls.n	8002c00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	73fb      	strb	r3, [r7, #15]
          break;
 8002bfe:	e005      	b.n	8002c0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c00:	4b0a      	ldr	r3, [pc, #40]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ef      	beq.n	8002bec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c12:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	4904      	ldr	r1, [pc, #16]	@ (8002c2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000

08002c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e049      	b.n	8002cd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fd fff8 	bl	8000c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f000 fb7a 	bl	8003368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e049      	b.n	8002d84 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d106      	bne.n	8002d0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f841 	bl	8002d8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	f000 fb23 	bl	8003368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d109      	bne.n	8002dc4 <HAL_TIM_PWM_Start+0x24>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	bf14      	ite	ne
 8002dbc:	2301      	movne	r3, #1
 8002dbe:	2300      	moveq	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e03c      	b.n	8002e3e <HAL_TIM_PWM_Start+0x9e>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d109      	bne.n	8002dde <HAL_TIM_PWM_Start+0x3e>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	bf14      	ite	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	2300      	moveq	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	e02f      	b.n	8002e3e <HAL_TIM_PWM_Start+0x9e>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d109      	bne.n	8002df8 <HAL_TIM_PWM_Start+0x58>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e022      	b.n	8002e3e <HAL_TIM_PWM_Start+0x9e>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	d109      	bne.n	8002e12 <HAL_TIM_PWM_Start+0x72>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	bf14      	ite	ne
 8002e0a:	2301      	movne	r3, #1
 8002e0c:	2300      	moveq	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	e015      	b.n	8002e3e <HAL_TIM_PWM_Start+0x9e>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b10      	cmp	r3, #16
 8002e16:	d109      	bne.n	8002e2c <HAL_TIM_PWM_Start+0x8c>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e008      	b.n	8002e3e <HAL_TIM_PWM_Start+0x9e>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e09c      	b.n	8002f80 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d104      	bne.n	8002e56 <HAL_TIM_PWM_Start+0xb6>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e54:	e023      	b.n	8002e9e <HAL_TIM_PWM_Start+0xfe>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d104      	bne.n	8002e66 <HAL_TIM_PWM_Start+0xc6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e64:	e01b      	b.n	8002e9e <HAL_TIM_PWM_Start+0xfe>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d104      	bne.n	8002e76 <HAL_TIM_PWM_Start+0xd6>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e74:	e013      	b.n	8002e9e <HAL_TIM_PWM_Start+0xfe>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b0c      	cmp	r3, #12
 8002e7a:	d104      	bne.n	8002e86 <HAL_TIM_PWM_Start+0xe6>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e84:	e00b      	b.n	8002e9e <HAL_TIM_PWM_Start+0xfe>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	d104      	bne.n	8002e96 <HAL_TIM_PWM_Start+0xf6>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e94:	e003      	b.n	8002e9e <HAL_TIM_PWM_Start+0xfe>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2202      	movs	r2, #2
 8002e9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	6839      	ldr	r1, [r7, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fe74 	bl	8003b94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a35      	ldr	r2, [pc, #212]	@ (8002f88 <HAL_TIM_PWM_Start+0x1e8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d013      	beq.n	8002ede <HAL_TIM_PWM_Start+0x13e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a34      	ldr	r2, [pc, #208]	@ (8002f8c <HAL_TIM_PWM_Start+0x1ec>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00e      	beq.n	8002ede <HAL_TIM_PWM_Start+0x13e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a32      	ldr	r2, [pc, #200]	@ (8002f90 <HAL_TIM_PWM_Start+0x1f0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d009      	beq.n	8002ede <HAL_TIM_PWM_Start+0x13e>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a31      	ldr	r2, [pc, #196]	@ (8002f94 <HAL_TIM_PWM_Start+0x1f4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d004      	beq.n	8002ede <HAL_TIM_PWM_Start+0x13e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2f      	ldr	r2, [pc, #188]	@ (8002f98 <HAL_TIM_PWM_Start+0x1f8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d101      	bne.n	8002ee2 <HAL_TIM_PWM_Start+0x142>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_TIM_PWM_Start+0x144>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ef6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a22      	ldr	r2, [pc, #136]	@ (8002f88 <HAL_TIM_PWM_Start+0x1e8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01d      	beq.n	8002f3e <HAL_TIM_PWM_Start+0x19e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f0a:	d018      	beq.n	8002f3e <HAL_TIM_PWM_Start+0x19e>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a22      	ldr	r2, [pc, #136]	@ (8002f9c <HAL_TIM_PWM_Start+0x1fc>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_TIM_PWM_Start+0x19e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a21      	ldr	r2, [pc, #132]	@ (8002fa0 <HAL_TIM_PWM_Start+0x200>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00e      	beq.n	8002f3e <HAL_TIM_PWM_Start+0x19e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1f      	ldr	r2, [pc, #124]	@ (8002fa4 <HAL_TIM_PWM_Start+0x204>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d009      	beq.n	8002f3e <HAL_TIM_PWM_Start+0x19e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a17      	ldr	r2, [pc, #92]	@ (8002f8c <HAL_TIM_PWM_Start+0x1ec>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_TIM_PWM_Start+0x19e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a15      	ldr	r2, [pc, #84]	@ (8002f90 <HAL_TIM_PWM_Start+0x1f0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d115      	bne.n	8002f6a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	4b18      	ldr	r3, [pc, #96]	@ (8002fa8 <HAL_TIM_PWM_Start+0x208>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b06      	cmp	r3, #6
 8002f4e:	d015      	beq.n	8002f7c <HAL_TIM_PWM_Start+0x1dc>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f56:	d011      	beq.n	8002f7c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f68:	e008      	b.n	8002f7c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	e000      	b.n	8002f7e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40012c00 	.word	0x40012c00
 8002f8c:	40013400 	.word	0x40013400
 8002f90:	40014000 	.word	0x40014000
 8002f94:	40014400 	.word	0x40014400
 8002f98:	40014800 	.word	0x40014800
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40000800 	.word	0x40000800
 8002fa4:	40000c00 	.word	0x40000c00
 8002fa8:	00010007 	.word	0x00010007

08002fac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e0ff      	b.n	80031ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b14      	cmp	r3, #20
 8002fd6:	f200 80f0 	bhi.w	80031ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002fda:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe0:	08003035 	.word	0x08003035
 8002fe4:	080031bb 	.word	0x080031bb
 8002fe8:	080031bb 	.word	0x080031bb
 8002fec:	080031bb 	.word	0x080031bb
 8002ff0:	08003075 	.word	0x08003075
 8002ff4:	080031bb 	.word	0x080031bb
 8002ff8:	080031bb 	.word	0x080031bb
 8002ffc:	080031bb 	.word	0x080031bb
 8003000:	080030b7 	.word	0x080030b7
 8003004:	080031bb 	.word	0x080031bb
 8003008:	080031bb 	.word	0x080031bb
 800300c:	080031bb 	.word	0x080031bb
 8003010:	080030f7 	.word	0x080030f7
 8003014:	080031bb 	.word	0x080031bb
 8003018:	080031bb 	.word	0x080031bb
 800301c:	080031bb 	.word	0x080031bb
 8003020:	08003139 	.word	0x08003139
 8003024:	080031bb 	.word	0x080031bb
 8003028:	080031bb 	.word	0x080031bb
 800302c:	080031bb 	.word	0x080031bb
 8003030:	08003179 	.word	0x08003179
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fa3a 	bl	80034b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0208 	orr.w	r2, r2, #8
 800304e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699a      	ldr	r2, [r3, #24]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0204 	bic.w	r2, r2, #4
 800305e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6999      	ldr	r1, [r3, #24]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	619a      	str	r2, [r3, #24]
      break;
 8003072:	e0a5      	b.n	80031c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 faaa 	bl	80035d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699a      	ldr	r2, [r3, #24]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800308e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800309e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6999      	ldr	r1, [r3, #24]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	021a      	lsls	r2, r3, #8
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	619a      	str	r2, [r3, #24]
      break;
 80030b4:	e084      	b.n	80031c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 fb13 	bl	80036e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	69da      	ldr	r2, [r3, #28]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 0208 	orr.w	r2, r2, #8
 80030d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0204 	bic.w	r2, r2, #4
 80030e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69d9      	ldr	r1, [r3, #28]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	61da      	str	r2, [r3, #28]
      break;
 80030f4:	e064      	b.n	80031c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fb7b 	bl	80037f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69da      	ldr	r2, [r3, #28]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	69da      	ldr	r2, [r3, #28]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69d9      	ldr	r1, [r3, #28]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	021a      	lsls	r2, r3, #8
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	61da      	str	r2, [r3, #28]
      break;
 8003136:	e043      	b.n	80031c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fbc4 	bl	80038cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f042 0208 	orr.w	r2, r2, #8
 8003152:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0204 	bic.w	r2, r2, #4
 8003162:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003176:	e023      	b.n	80031c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fc08 	bl	8003994 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003192:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	021a      	lsls	r2, r3, #8
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80031b8:	e002      	b.n	80031c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
      break;
 80031be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop

080031d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_TIM_ConfigClockSource+0x1c>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e0b6      	b.n	800335e <HAL_TIM_ConfigClockSource+0x18a>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800320e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800321a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800322c:	d03e      	beq.n	80032ac <HAL_TIM_ConfigClockSource+0xd8>
 800322e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003232:	f200 8087 	bhi.w	8003344 <HAL_TIM_ConfigClockSource+0x170>
 8003236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800323a:	f000 8086 	beq.w	800334a <HAL_TIM_ConfigClockSource+0x176>
 800323e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003242:	d87f      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x170>
 8003244:	2b70      	cmp	r3, #112	@ 0x70
 8003246:	d01a      	beq.n	800327e <HAL_TIM_ConfigClockSource+0xaa>
 8003248:	2b70      	cmp	r3, #112	@ 0x70
 800324a:	d87b      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x170>
 800324c:	2b60      	cmp	r3, #96	@ 0x60
 800324e:	d050      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x11e>
 8003250:	2b60      	cmp	r3, #96	@ 0x60
 8003252:	d877      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x170>
 8003254:	2b50      	cmp	r3, #80	@ 0x50
 8003256:	d03c      	beq.n	80032d2 <HAL_TIM_ConfigClockSource+0xfe>
 8003258:	2b50      	cmp	r3, #80	@ 0x50
 800325a:	d873      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x170>
 800325c:	2b40      	cmp	r3, #64	@ 0x40
 800325e:	d058      	beq.n	8003312 <HAL_TIM_ConfigClockSource+0x13e>
 8003260:	2b40      	cmp	r3, #64	@ 0x40
 8003262:	d86f      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x170>
 8003264:	2b30      	cmp	r3, #48	@ 0x30
 8003266:	d064      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x15e>
 8003268:	2b30      	cmp	r3, #48	@ 0x30
 800326a:	d86b      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x170>
 800326c:	2b20      	cmp	r3, #32
 800326e:	d060      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x15e>
 8003270:	2b20      	cmp	r3, #32
 8003272:	d867      	bhi.n	8003344 <HAL_TIM_ConfigClockSource+0x170>
 8003274:	2b00      	cmp	r3, #0
 8003276:	d05c      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x15e>
 8003278:	2b10      	cmp	r3, #16
 800327a:	d05a      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x15e>
 800327c:	e062      	b.n	8003344 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800328e:	f000 fc61 	bl	8003b54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	609a      	str	r2, [r3, #8]
      break;
 80032aa:	e04f      	b.n	800334c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032bc:	f000 fc4a 	bl	8003b54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032ce:	609a      	str	r2, [r3, #8]
      break;
 80032d0:	e03c      	b.n	800334c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032de:	461a      	mov	r2, r3
 80032e0:	f000 fbbe 	bl	8003a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2150      	movs	r1, #80	@ 0x50
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 fc17 	bl	8003b1e <TIM_ITRx_SetConfig>
      break;
 80032f0:	e02c      	b.n	800334c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032fe:	461a      	mov	r2, r3
 8003300:	f000 fbdd 	bl	8003abe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2160      	movs	r1, #96	@ 0x60
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fc07 	bl	8003b1e <TIM_ITRx_SetConfig>
      break;
 8003310:	e01c      	b.n	800334c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800331e:	461a      	mov	r2, r3
 8003320:	f000 fb9e 	bl	8003a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2140      	movs	r1, #64	@ 0x40
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fbf7 	bl	8003b1e <TIM_ITRx_SetConfig>
      break;
 8003330:	e00c      	b.n	800334c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4619      	mov	r1, r3
 800333c:	4610      	mov	r0, r2
 800333e:	f000 fbee 	bl	8003b1e <TIM_ITRx_SetConfig>
      break;
 8003342:	e003      	b.n	800334c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
      break;
 8003348:	e000      	b.n	800334c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800334a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800335c:	7bfb      	ldrb	r3, [r7, #15]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a46      	ldr	r2, [pc, #280]	@ (8003494 <TIM_Base_SetConfig+0x12c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d013      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003386:	d00f      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a43      	ldr	r2, [pc, #268]	@ (8003498 <TIM_Base_SetConfig+0x130>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00b      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a42      	ldr	r2, [pc, #264]	@ (800349c <TIM_Base_SetConfig+0x134>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d007      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a41      	ldr	r2, [pc, #260]	@ (80034a0 <TIM_Base_SetConfig+0x138>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d003      	beq.n	80033a8 <TIM_Base_SetConfig+0x40>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a40      	ldr	r2, [pc, #256]	@ (80034a4 <TIM_Base_SetConfig+0x13c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d108      	bne.n	80033ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a35      	ldr	r2, [pc, #212]	@ (8003494 <TIM_Base_SetConfig+0x12c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01f      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033c8:	d01b      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a32      	ldr	r2, [pc, #200]	@ (8003498 <TIM_Base_SetConfig+0x130>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d017      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a31      	ldr	r2, [pc, #196]	@ (800349c <TIM_Base_SetConfig+0x134>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a30      	ldr	r2, [pc, #192]	@ (80034a0 <TIM_Base_SetConfig+0x138>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00f      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2f      	ldr	r2, [pc, #188]	@ (80034a4 <TIM_Base_SetConfig+0x13c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00b      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a2e      	ldr	r2, [pc, #184]	@ (80034a8 <TIM_Base_SetConfig+0x140>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d007      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a2d      	ldr	r2, [pc, #180]	@ (80034ac <TIM_Base_SetConfig+0x144>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d003      	beq.n	8003402 <TIM_Base_SetConfig+0x9a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a2c      	ldr	r2, [pc, #176]	@ (80034b0 <TIM_Base_SetConfig+0x148>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d108      	bne.n	8003414 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a16      	ldr	r2, [pc, #88]	@ (8003494 <TIM_Base_SetConfig+0x12c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00f      	beq.n	8003460 <TIM_Base_SetConfig+0xf8>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a18      	ldr	r2, [pc, #96]	@ (80034a4 <TIM_Base_SetConfig+0x13c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00b      	beq.n	8003460 <TIM_Base_SetConfig+0xf8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a17      	ldr	r2, [pc, #92]	@ (80034a8 <TIM_Base_SetConfig+0x140>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d007      	beq.n	8003460 <TIM_Base_SetConfig+0xf8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a16      	ldr	r2, [pc, #88]	@ (80034ac <TIM_Base_SetConfig+0x144>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d003      	beq.n	8003460 <TIM_Base_SetConfig+0xf8>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a15      	ldr	r2, [pc, #84]	@ (80034b0 <TIM_Base_SetConfig+0x148>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d103      	bne.n	8003468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	691a      	ldr	r2, [r3, #16]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b01      	cmp	r3, #1
 8003478:	d105      	bne.n	8003486 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f023 0201 	bic.w	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	611a      	str	r2, [r3, #16]
  }
}
 8003486:	bf00      	nop
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	40012c00 	.word	0x40012c00
 8003498:	40000400 	.word	0x40000400
 800349c:	40000800 	.word	0x40000800
 80034a0:	40000c00 	.word	0x40000c00
 80034a4:	40013400 	.word	0x40013400
 80034a8:	40014000 	.word	0x40014000
 80034ac:	40014400 	.word	0x40014400
 80034b0:	40014800 	.word	0x40014800

080034b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f023 0201 	bic.w	r2, r3, #1
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0303 	bic.w	r3, r3, #3
 80034ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f023 0302 	bic.w	r3, r3, #2
 8003500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a2c      	ldr	r2, [pc, #176]	@ (80035c0 <TIM_OC1_SetConfig+0x10c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d00f      	beq.n	8003534 <TIM_OC1_SetConfig+0x80>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a2b      	ldr	r2, [pc, #172]	@ (80035c4 <TIM_OC1_SetConfig+0x110>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00b      	beq.n	8003534 <TIM_OC1_SetConfig+0x80>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a2a      	ldr	r2, [pc, #168]	@ (80035c8 <TIM_OC1_SetConfig+0x114>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d007      	beq.n	8003534 <TIM_OC1_SetConfig+0x80>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a29      	ldr	r2, [pc, #164]	@ (80035cc <TIM_OC1_SetConfig+0x118>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d003      	beq.n	8003534 <TIM_OC1_SetConfig+0x80>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a28      	ldr	r2, [pc, #160]	@ (80035d0 <TIM_OC1_SetConfig+0x11c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d10c      	bne.n	800354e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f023 0308 	bic.w	r3, r3, #8
 800353a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f023 0304 	bic.w	r3, r3, #4
 800354c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a1b      	ldr	r2, [pc, #108]	@ (80035c0 <TIM_OC1_SetConfig+0x10c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00f      	beq.n	8003576 <TIM_OC1_SetConfig+0xc2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a1a      	ldr	r2, [pc, #104]	@ (80035c4 <TIM_OC1_SetConfig+0x110>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d00b      	beq.n	8003576 <TIM_OC1_SetConfig+0xc2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a19      	ldr	r2, [pc, #100]	@ (80035c8 <TIM_OC1_SetConfig+0x114>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d007      	beq.n	8003576 <TIM_OC1_SetConfig+0xc2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a18      	ldr	r2, [pc, #96]	@ (80035cc <TIM_OC1_SetConfig+0x118>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d003      	beq.n	8003576 <TIM_OC1_SetConfig+0xc2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a17      	ldr	r2, [pc, #92]	@ (80035d0 <TIM_OC1_SetConfig+0x11c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d111      	bne.n	800359a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800357c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	621a      	str	r2, [r3, #32]
}
 80035b4:	bf00      	nop
 80035b6:	371c      	adds	r7, #28
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	40012c00 	.word	0x40012c00
 80035c4:	40013400 	.word	0x40013400
 80035c8:	40014000 	.word	0x40014000
 80035cc:	40014400 	.word	0x40014400
 80035d0:	40014800 	.word	0x40014800

080035d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	f023 0210 	bic.w	r2, r3, #16
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800360e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f023 0320 	bic.w	r3, r3, #32
 8003622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a28      	ldr	r2, [pc, #160]	@ (80036d4 <TIM_OC2_SetConfig+0x100>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d003      	beq.n	8003640 <TIM_OC2_SetConfig+0x6c>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a27      	ldr	r2, [pc, #156]	@ (80036d8 <TIM_OC2_SetConfig+0x104>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d10d      	bne.n	800365c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800365a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a1d      	ldr	r2, [pc, #116]	@ (80036d4 <TIM_OC2_SetConfig+0x100>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00f      	beq.n	8003684 <TIM_OC2_SetConfig+0xb0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a1c      	ldr	r2, [pc, #112]	@ (80036d8 <TIM_OC2_SetConfig+0x104>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00b      	beq.n	8003684 <TIM_OC2_SetConfig+0xb0>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a1b      	ldr	r2, [pc, #108]	@ (80036dc <TIM_OC2_SetConfig+0x108>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d007      	beq.n	8003684 <TIM_OC2_SetConfig+0xb0>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a1a      	ldr	r2, [pc, #104]	@ (80036e0 <TIM_OC2_SetConfig+0x10c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d003      	beq.n	8003684 <TIM_OC2_SetConfig+0xb0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a19      	ldr	r2, [pc, #100]	@ (80036e4 <TIM_OC2_SetConfig+0x110>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d113      	bne.n	80036ac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800368a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003692:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40012c00 	.word	0x40012c00
 80036d8:	40013400 	.word	0x40013400
 80036dc:	40014000 	.word	0x40014000
 80036e0:	40014400 	.word	0x40014400
 80036e4:	40014800 	.word	0x40014800

080036e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800371a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a27      	ldr	r2, [pc, #156]	@ (80037e4 <TIM_OC3_SetConfig+0xfc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d003      	beq.n	8003752 <TIM_OC3_SetConfig+0x6a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a26      	ldr	r2, [pc, #152]	@ (80037e8 <TIM_OC3_SetConfig+0x100>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d10d      	bne.n	800376e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800376c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a1c      	ldr	r2, [pc, #112]	@ (80037e4 <TIM_OC3_SetConfig+0xfc>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00f      	beq.n	8003796 <TIM_OC3_SetConfig+0xae>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a1b      	ldr	r2, [pc, #108]	@ (80037e8 <TIM_OC3_SetConfig+0x100>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00b      	beq.n	8003796 <TIM_OC3_SetConfig+0xae>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a1a      	ldr	r2, [pc, #104]	@ (80037ec <TIM_OC3_SetConfig+0x104>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d007      	beq.n	8003796 <TIM_OC3_SetConfig+0xae>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a19      	ldr	r2, [pc, #100]	@ (80037f0 <TIM_OC3_SetConfig+0x108>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d003      	beq.n	8003796 <TIM_OC3_SetConfig+0xae>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a18      	ldr	r2, [pc, #96]	@ (80037f4 <TIM_OC3_SetConfig+0x10c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d113      	bne.n	80037be <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800379c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	621a      	str	r2, [r3, #32]
}
 80037d8:	bf00      	nop
 80037da:	371c      	adds	r7, #28
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	40012c00 	.word	0x40012c00
 80037e8:	40013400 	.word	0x40013400
 80037ec:	40014000 	.word	0x40014000
 80037f0:	40014400 	.word	0x40014400
 80037f4:	40014800 	.word	0x40014800

080037f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800382a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	021b      	lsls	r3, r3, #8
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	031b      	lsls	r3, r3, #12
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a18      	ldr	r2, [pc, #96]	@ (80038b8 <TIM_OC4_SetConfig+0xc0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00f      	beq.n	800387c <TIM_OC4_SetConfig+0x84>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a17      	ldr	r2, [pc, #92]	@ (80038bc <TIM_OC4_SetConfig+0xc4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00b      	beq.n	800387c <TIM_OC4_SetConfig+0x84>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a16      	ldr	r2, [pc, #88]	@ (80038c0 <TIM_OC4_SetConfig+0xc8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d007      	beq.n	800387c <TIM_OC4_SetConfig+0x84>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a15      	ldr	r2, [pc, #84]	@ (80038c4 <TIM_OC4_SetConfig+0xcc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d003      	beq.n	800387c <TIM_OC4_SetConfig+0x84>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a14      	ldr	r2, [pc, #80]	@ (80038c8 <TIM_OC4_SetConfig+0xd0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d109      	bne.n	8003890 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003882:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	019b      	lsls	r3, r3, #6
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	621a      	str	r2, [r3, #32]
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40012c00 	.word	0x40012c00
 80038bc:	40013400 	.word	0x40013400
 80038c0:	40014000 	.word	0x40014000
 80038c4:	40014400 	.word	0x40014400
 80038c8:	40014800 	.word	0x40014800

080038cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003910:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	041b      	lsls	r3, r3, #16
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a17      	ldr	r2, [pc, #92]	@ (8003980 <TIM_OC5_SetConfig+0xb4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d00f      	beq.n	8003946 <TIM_OC5_SetConfig+0x7a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a16      	ldr	r2, [pc, #88]	@ (8003984 <TIM_OC5_SetConfig+0xb8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00b      	beq.n	8003946 <TIM_OC5_SetConfig+0x7a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a15      	ldr	r2, [pc, #84]	@ (8003988 <TIM_OC5_SetConfig+0xbc>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d007      	beq.n	8003946 <TIM_OC5_SetConfig+0x7a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a14      	ldr	r2, [pc, #80]	@ (800398c <TIM_OC5_SetConfig+0xc0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d003      	beq.n	8003946 <TIM_OC5_SetConfig+0x7a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a13      	ldr	r2, [pc, #76]	@ (8003990 <TIM_OC5_SetConfig+0xc4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d109      	bne.n	800395a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800394c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	021b      	lsls	r3, r3, #8
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	621a      	str	r2, [r3, #32]
}
 8003974:	bf00      	nop
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	40012c00 	.word	0x40012c00
 8003984:	40013400 	.word	0x40013400
 8003988:	40014000 	.word	0x40014000
 800398c:	40014400 	.word	0x40014400
 8003990:	40014800 	.word	0x40014800

08003994 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80039da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	051b      	lsls	r3, r3, #20
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a18      	ldr	r2, [pc, #96]	@ (8003a4c <TIM_OC6_SetConfig+0xb8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00f      	beq.n	8003a10 <TIM_OC6_SetConfig+0x7c>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a17      	ldr	r2, [pc, #92]	@ (8003a50 <TIM_OC6_SetConfig+0xbc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00b      	beq.n	8003a10 <TIM_OC6_SetConfig+0x7c>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a16      	ldr	r2, [pc, #88]	@ (8003a54 <TIM_OC6_SetConfig+0xc0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d007      	beq.n	8003a10 <TIM_OC6_SetConfig+0x7c>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a15      	ldr	r2, [pc, #84]	@ (8003a58 <TIM_OC6_SetConfig+0xc4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d003      	beq.n	8003a10 <TIM_OC6_SetConfig+0x7c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a14      	ldr	r2, [pc, #80]	@ (8003a5c <TIM_OC6_SetConfig+0xc8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d109      	bne.n	8003a24 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	029b      	lsls	r3, r3, #10
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	621a      	str	r2, [r3, #32]
}
 8003a3e:	bf00      	nop
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40013400 	.word	0x40013400
 8003a54:	40014000 	.word	0x40014000
 8003a58:	40014400 	.word	0x40014400
 8003a5c:	40014800 	.word	0x40014800

08003a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f023 0201 	bic.w	r2, r3, #1
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f023 030a 	bic.w	r3, r3, #10
 8003a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b087      	sub	sp, #28
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f023 0210 	bic.w	r2, r3, #16
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ae8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	031b      	lsls	r3, r3, #12
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003afa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	621a      	str	r2, [r3, #32]
}
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b085      	sub	sp, #20
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f043 0307 	orr.w	r3, r3, #7
 8003b40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	609a      	str	r2, [r3, #8]
}
 8003b48:	bf00      	nop
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	021a      	lsls	r2, r3, #8
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	609a      	str	r2, [r3, #8]
}
 8003b88:	bf00      	nop
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f003 031f 	and.w	r3, r3, #31
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6a1a      	ldr	r2, [r3, #32]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	401a      	ands	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a1a      	ldr	r2, [r3, #32]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f003 031f 	and.w	r3, r3, #31
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	621a      	str	r2, [r3, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
	...

08003be0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e068      	b.n	8003cca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a2e      	ldr	r2, [pc, #184]	@ (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d004      	beq.n	8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a2d      	ldr	r2, [pc, #180]	@ (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d108      	bne.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003c32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d01d      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c6a:	d018      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d013      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ce4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00e      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a18      	ldr	r2, [pc, #96]	@ (8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d009      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a13      	ldr	r2, [pc, #76]	@ (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d004      	beq.n	8003c9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a14      	ldr	r2, [pc, #80]	@ (8003cec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d10c      	bne.n	8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40012c00 	.word	0x40012c00
 8003cdc:	40013400 	.word	0x40013400
 8003ce0:	40000400 	.word	0x40000400
 8003ce4:	40000800 	.word	0x40000800
 8003ce8:	40000c00 	.word	0x40000c00
 8003cec:	40014000 	.word	0x40014000

08003cf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e065      	b.n	8003dd8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	041b      	lsls	r3, r3, #16
 8003d82:	4313      	orrs	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a16      	ldr	r2, [pc, #88]	@ (8003de4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d004      	beq.n	8003d9a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a14      	ldr	r2, [pc, #80]	@ (8003de8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d115      	bne.n	8003dc6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	051b      	lsls	r3, r3, #20
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40013400 	.word	0x40013400

08003dec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e040      	b.n	8003e80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fc fe72 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2224      	movs	r2, #36	@ 0x24
 8003e18:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0201 	bic.w	r2, r2, #1
 8003e28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fedc 	bl	8004bf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fc21 	bl	8004680 <UART_SetConfig>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d101      	bne.n	8003e48 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e01b      	b.n	8003e80 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 ff5b 	bl	8004d34 <UART_CheckIdleState>
 8003e7e:	4603      	mov	r3, r0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	@ 0x28
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	4613      	mov	r3, r2
 8003e96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d177      	bne.n	8003f90 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_UART_Transmit+0x24>
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e070      	b.n	8003f92 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2221      	movs	r2, #33	@ 0x21
 8003ebc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ebe:	f7fd f839 	bl	8000f34 <HAL_GetTick>
 8003ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	88fa      	ldrh	r2, [r7, #6]
 8003ec8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003edc:	d108      	bne.n	8003ef0 <HAL_UART_Transmit+0x68>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d104      	bne.n	8003ef0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	e003      	b.n	8003ef8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ef8:	e02f      	b.n	8003f5a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2200      	movs	r2, #0
 8003f02:	2180      	movs	r1, #128	@ 0x80
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 ffbd 	bl	8004e84 <UART_WaitOnFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2220      	movs	r2, #32
 8003f14:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e03b      	b.n	8003f92 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10b      	bne.n	8003f38 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	881a      	ldrh	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f2c:	b292      	uxth	r2, r2
 8003f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	3302      	adds	r3, #2
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	e007      	b.n	8003f48 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	781a      	ldrb	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3301      	adds	r3, #1
 8003f46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1c9      	bne.n	8003efa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2140      	movs	r1, #64	@ 0x40
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 ff87 	bl	8004e84 <UART_WaitOnFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e005      	b.n	8003f92 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e000      	b.n	8003f92 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
  }
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3720      	adds	r7, #32
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	@ 0x28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fb0:	2b20      	cmp	r3, #32
 8003fb2:	d137      	bne.n	8004024 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <HAL_UART_Receive_IT+0x24>
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e030      	b.n	8004026 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a18      	ldr	r2, [pc, #96]	@ (8004030 <HAL_UART_Receive_IT+0x94>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d01f      	beq.n	8004014 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d018      	beq.n	8004014 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004000:	623b      	str	r3, [r7, #32]
 8004002:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	69f9      	ldr	r1, [r7, #28]
 8004006:	6a3a      	ldr	r2, [r7, #32]
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	61bb      	str	r3, [r7, #24]
   return(result);
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e6      	bne.n	8003fe2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004014:	88fb      	ldrh	r3, [r7, #6]
 8004016:	461a      	mov	r2, r3
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 ffa0 	bl	8004f60 <UART_Start_Receive_IT>
 8004020:	4603      	mov	r3, r0
 8004022:	e000      	b.n	8004026 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004024:	2302      	movs	r3, #2
  }
}
 8004026:	4618      	mov	r0, r3
 8004028:	3728      	adds	r7, #40	@ 0x28
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40008000 	.word	0x40008000

08004034 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b0ba      	sub	sp, #232	@ 0xe8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	69db      	ldr	r3, [r3, #28]
 8004042:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800405a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800405e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004062:	4013      	ands	r3, r2
 8004064:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004068:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d115      	bne.n	800409c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00f      	beq.n	800409c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800407c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b00      	cmp	r3, #0
 8004086:	d009      	beq.n	800409c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800408c:	2b00      	cmp	r3, #0
 800408e:	f000 82ca 	beq.w	8004626 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	4798      	blx	r3
      }
      return;
 800409a:	e2c4      	b.n	8004626 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800409c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8117 	beq.w	80042d4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80040a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d106      	bne.n	80040c0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80040b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80040b6:	4b85      	ldr	r3, [pc, #532]	@ (80042cc <HAL_UART_IRQHandler+0x298>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 810a 	beq.w	80042d4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80040c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d011      	beq.n	80040f0 <HAL_UART_IRQHandler+0xbc>
 80040cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00b      	beq.n	80040f0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2201      	movs	r2, #1
 80040de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040e6:	f043 0201 	orr.w	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d011      	beq.n	8004120 <HAL_UART_IRQHandler+0xec>
 80040fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00b      	beq.n	8004120 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2202      	movs	r2, #2
 800410e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004116:	f043 0204 	orr.w	r2, r3, #4
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d011      	beq.n	8004150 <HAL_UART_IRQHandler+0x11c>
 800412c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00b      	beq.n	8004150 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2204      	movs	r2, #4
 800413e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004146:	f043 0202 	orr.w	r2, r3, #2
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d017      	beq.n	800418c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800415c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d105      	bne.n	8004174 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800416c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00b      	beq.n	800418c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2208      	movs	r2, #8
 800417a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004182:	f043 0208 	orr.w	r2, r3, #8
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800418c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004194:	2b00      	cmp	r3, #0
 8004196:	d012      	beq.n	80041be <HAL_UART_IRQHandler+0x18a>
 8004198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800419c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00c      	beq.n	80041be <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041b4:	f043 0220 	orr.w	r2, r3, #32
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8230 	beq.w	800462a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00d      	beq.n	80041f2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d007      	beq.n	80041f2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004206:	2b40      	cmp	r3, #64	@ 0x40
 8004208:	d005      	beq.n	8004216 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800420a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800420e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004212:	2b00      	cmp	r3, #0
 8004214:	d04f      	beq.n	80042b6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 ff68 	bl	80050ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004226:	2b40      	cmp	r3, #64	@ 0x40
 8004228:	d141      	bne.n	80042ae <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3308      	adds	r3, #8
 8004230:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004238:	e853 3f00 	ldrex	r3, [r3]
 800423c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004240:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004248:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	3308      	adds	r3, #8
 8004252:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004256:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800425a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004262:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800426e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1d9      	bne.n	800422a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800427a:	2b00      	cmp	r3, #0
 800427c:	d013      	beq.n	80042a6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004282:	4a13      	ldr	r2, [pc, #76]	@ (80042d0 <HAL_UART_IRQHandler+0x29c>)
 8004284:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800428a:	4618      	mov	r0, r3
 800428c:	f7fc ffad 	bl	80011ea <HAL_DMA_Abort_IT>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d017      	beq.n	80042c6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800429a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80042a0:	4610      	mov	r0, r2
 80042a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042a4:	e00f      	b.n	80042c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f9d4 	bl	8004654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ac:	e00b      	b.n	80042c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f9d0 	bl	8004654 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b4:	e007      	b.n	80042c6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f9cc 	bl	8004654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80042c4:	e1b1      	b.n	800462a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042c6:	bf00      	nop
    return;
 80042c8:	e1af      	b.n	800462a <HAL_UART_IRQHandler+0x5f6>
 80042ca:	bf00      	nop
 80042cc:	04000120 	.word	0x04000120
 80042d0:	080051b5 	.word	0x080051b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042d8:	2b01      	cmp	r3, #1
 80042da:	f040 816a 	bne.w	80045b2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 8163 	beq.w	80045b2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 815c 	beq.w	80045b2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2210      	movs	r2, #16
 8004300:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800430c:	2b40      	cmp	r3, #64	@ 0x40
 800430e:	f040 80d4 	bne.w	80044ba <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800431e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 80ad 	beq.w	8004482 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800432e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004332:	429a      	cmp	r2, r3
 8004334:	f080 80a5 	bcs.w	8004482 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800433e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	f040 8086 	bne.w	8004460 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004368:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800436c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004370:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800437e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004382:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004386:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800438a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004396:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1da      	bne.n	8004354 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3308      	adds	r3, #8
 80043a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80043ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043b0:	f023 0301 	bic.w	r3, r3, #1
 80043b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3308      	adds	r3, #8
 80043be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80043c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80043c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80043ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80043d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e1      	bne.n	800439e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3308      	adds	r3, #8
 80043e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80043ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3308      	adds	r3, #8
 80043fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80043fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004400:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004402:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004404:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004406:	e841 2300 	strex	r3, r2, [r1]
 800440a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800440c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1e3      	bne.n	80043da <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2220      	movs	r2, #32
 8004416:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800442e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004430:	f023 0310 	bic.w	r3, r3, #16
 8004434:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004442:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004444:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004448:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e4      	bne.n	8004420 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445a:	4618      	mov	r0, r3
 800445c:	f7fc fe87 	bl	800116e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004472:	b29b      	uxth	r3, r3
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	b29b      	uxth	r3, r3
 8004478:	4619      	mov	r1, r3
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f8f4 	bl	8004668 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004480:	e0d5      	b.n	800462e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004488:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800448c:	429a      	cmp	r2, r3
 800448e:	f040 80ce 	bne.w	800462e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b20      	cmp	r3, #32
 80044a0:	f040 80c5 	bne.w	800462e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044b0:	4619      	mov	r1, r3
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f8d8 	bl	8004668 <HAL_UARTEx_RxEventCallback>
      return;
 80044b8:	e0b9      	b.n	800462e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80ab 	beq.w	8004632 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80044dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80a6 	beq.w	8004632 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ee:	e853 3f00 	ldrex	r3, [r3]
 80044f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004508:	647b      	str	r3, [r7, #68]	@ 0x44
 800450a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800450e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e4      	bne.n	80044e6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3308      	adds	r3, #8
 8004522:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	623b      	str	r3, [r7, #32]
   return(result);
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	f023 0301 	bic.w	r3, r3, #1
 8004532:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3308      	adds	r3, #8
 800453c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004540:	633a      	str	r2, [r7, #48]	@ 0x30
 8004542:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800454e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e3      	bne.n	800451c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2220      	movs	r2, #32
 8004558:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	e853 3f00 	ldrex	r3, [r3]
 8004574:	60fb      	str	r3, [r7, #12]
   return(result);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f023 0310 	bic.w	r3, r3, #16
 800457c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800458a:	61fb      	str	r3, [r7, #28]
 800458c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	69b9      	ldr	r1, [r7, #24]
 8004590:	69fa      	ldr	r2, [r7, #28]
 8004592:	e841 2300 	strex	r3, r2, [r1]
 8004596:	617b      	str	r3, [r7, #20]
   return(result);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e4      	bne.n	8004568 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2202      	movs	r2, #2
 80045a2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045a8:	4619      	mov	r1, r3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f85c 	bl	8004668 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045b0:	e03f      	b.n	8004632 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80045b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00e      	beq.n	80045dc <HAL_UART_IRQHandler+0x5a8>
 80045be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d008      	beq.n	80045dc <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80045d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 ffe9 	bl	80055ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80045da:	e02d      	b.n	8004638 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00e      	beq.n	8004606 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80045e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d008      	beq.n	8004606 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01c      	beq.n	8004636 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	4798      	blx	r3
    }
    return;
 8004604:	e017      	b.n	8004636 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800460a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800460e:	2b00      	cmp	r3, #0
 8004610:	d012      	beq.n	8004638 <HAL_UART_IRQHandler+0x604>
 8004612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00c      	beq.n	8004638 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fdde 	bl	80051e0 <UART_EndTransmit_IT>
    return;
 8004624:	e008      	b.n	8004638 <HAL_UART_IRQHandler+0x604>
      return;
 8004626:	bf00      	nop
 8004628:	e006      	b.n	8004638 <HAL_UART_IRQHandler+0x604>
    return;
 800462a:	bf00      	nop
 800462c:	e004      	b.n	8004638 <HAL_UART_IRQHandler+0x604>
      return;
 800462e:	bf00      	nop
 8004630:	e002      	b.n	8004638 <HAL_UART_IRQHandler+0x604>
      return;
 8004632:	bf00      	nop
 8004634:	e000      	b.n	8004638 <HAL_UART_IRQHandler+0x604>
    return;
 8004636:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004638:	37e8      	adds	r7, #232	@ 0xe8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop

08004640 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	460b      	mov	r3, r1
 8004672:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004684:	b08a      	sub	sp, #40	@ 0x28
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	431a      	orrs	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	431a      	orrs	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	69db      	ldr	r3, [r3, #28]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	4ba4      	ldr	r3, [pc, #656]	@ (8004940 <UART_SetConfig+0x2c0>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	6812      	ldr	r2, [r2, #0]
 80046b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046b8:	430b      	orrs	r3, r1
 80046ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a99      	ldr	r2, [pc, #612]	@ (8004944 <UART_SetConfig+0x2c4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d004      	beq.n	80046ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e8:	4313      	orrs	r3, r2
 80046ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046fc:	430a      	orrs	r2, r1
 80046fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a90      	ldr	r2, [pc, #576]	@ (8004948 <UART_SetConfig+0x2c8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d126      	bne.n	8004758 <UART_SetConfig+0xd8>
 800470a:	4b90      	ldr	r3, [pc, #576]	@ (800494c <UART_SetConfig+0x2cc>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004710:	f003 0303 	and.w	r3, r3, #3
 8004714:	2b03      	cmp	r3, #3
 8004716:	d81b      	bhi.n	8004750 <UART_SetConfig+0xd0>
 8004718:	a201      	add	r2, pc, #4	@ (adr r2, 8004720 <UART_SetConfig+0xa0>)
 800471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471e:	bf00      	nop
 8004720:	08004731 	.word	0x08004731
 8004724:	08004741 	.word	0x08004741
 8004728:	08004739 	.word	0x08004739
 800472c:	08004749 	.word	0x08004749
 8004730:	2301      	movs	r3, #1
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004736:	e116      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004738:	2302      	movs	r3, #2
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473e:	e112      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004740:	2304      	movs	r3, #4
 8004742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004746:	e10e      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004748:	2308      	movs	r3, #8
 800474a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474e:	e10a      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004750:	2310      	movs	r3, #16
 8004752:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004756:	e106      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a7c      	ldr	r2, [pc, #496]	@ (8004950 <UART_SetConfig+0x2d0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d138      	bne.n	80047d4 <UART_SetConfig+0x154>
 8004762:	4b7a      	ldr	r3, [pc, #488]	@ (800494c <UART_SetConfig+0x2cc>)
 8004764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004768:	f003 030c 	and.w	r3, r3, #12
 800476c:	2b0c      	cmp	r3, #12
 800476e:	d82d      	bhi.n	80047cc <UART_SetConfig+0x14c>
 8004770:	a201      	add	r2, pc, #4	@ (adr r2, 8004778 <UART_SetConfig+0xf8>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	080047ad 	.word	0x080047ad
 800477c:	080047cd 	.word	0x080047cd
 8004780:	080047cd 	.word	0x080047cd
 8004784:	080047cd 	.word	0x080047cd
 8004788:	080047bd 	.word	0x080047bd
 800478c:	080047cd 	.word	0x080047cd
 8004790:	080047cd 	.word	0x080047cd
 8004794:	080047cd 	.word	0x080047cd
 8004798:	080047b5 	.word	0x080047b5
 800479c:	080047cd 	.word	0x080047cd
 80047a0:	080047cd 	.word	0x080047cd
 80047a4:	080047cd 	.word	0x080047cd
 80047a8:	080047c5 	.word	0x080047c5
 80047ac:	2300      	movs	r3, #0
 80047ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b2:	e0d8      	b.n	8004966 <UART_SetConfig+0x2e6>
 80047b4:	2302      	movs	r3, #2
 80047b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ba:	e0d4      	b.n	8004966 <UART_SetConfig+0x2e6>
 80047bc:	2304      	movs	r3, #4
 80047be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c2:	e0d0      	b.n	8004966 <UART_SetConfig+0x2e6>
 80047c4:	2308      	movs	r3, #8
 80047c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ca:	e0cc      	b.n	8004966 <UART_SetConfig+0x2e6>
 80047cc:	2310      	movs	r3, #16
 80047ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047d2:	e0c8      	b.n	8004966 <UART_SetConfig+0x2e6>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a5e      	ldr	r2, [pc, #376]	@ (8004954 <UART_SetConfig+0x2d4>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d125      	bne.n	800482a <UART_SetConfig+0x1aa>
 80047de:	4b5b      	ldr	r3, [pc, #364]	@ (800494c <UART_SetConfig+0x2cc>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047e8:	2b30      	cmp	r3, #48	@ 0x30
 80047ea:	d016      	beq.n	800481a <UART_SetConfig+0x19a>
 80047ec:	2b30      	cmp	r3, #48	@ 0x30
 80047ee:	d818      	bhi.n	8004822 <UART_SetConfig+0x1a2>
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d00a      	beq.n	800480a <UART_SetConfig+0x18a>
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d814      	bhi.n	8004822 <UART_SetConfig+0x1a2>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <UART_SetConfig+0x182>
 80047fc:	2b10      	cmp	r3, #16
 80047fe:	d008      	beq.n	8004812 <UART_SetConfig+0x192>
 8004800:	e00f      	b.n	8004822 <UART_SetConfig+0x1a2>
 8004802:	2300      	movs	r3, #0
 8004804:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004808:	e0ad      	b.n	8004966 <UART_SetConfig+0x2e6>
 800480a:	2302      	movs	r3, #2
 800480c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004810:	e0a9      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004812:	2304      	movs	r3, #4
 8004814:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004818:	e0a5      	b.n	8004966 <UART_SetConfig+0x2e6>
 800481a:	2308      	movs	r3, #8
 800481c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004820:	e0a1      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004822:	2310      	movs	r3, #16
 8004824:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004828:	e09d      	b.n	8004966 <UART_SetConfig+0x2e6>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a4a      	ldr	r2, [pc, #296]	@ (8004958 <UART_SetConfig+0x2d8>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d125      	bne.n	8004880 <UART_SetConfig+0x200>
 8004834:	4b45      	ldr	r3, [pc, #276]	@ (800494c <UART_SetConfig+0x2cc>)
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800483e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004840:	d016      	beq.n	8004870 <UART_SetConfig+0x1f0>
 8004842:	2bc0      	cmp	r3, #192	@ 0xc0
 8004844:	d818      	bhi.n	8004878 <UART_SetConfig+0x1f8>
 8004846:	2b80      	cmp	r3, #128	@ 0x80
 8004848:	d00a      	beq.n	8004860 <UART_SetConfig+0x1e0>
 800484a:	2b80      	cmp	r3, #128	@ 0x80
 800484c:	d814      	bhi.n	8004878 <UART_SetConfig+0x1f8>
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <UART_SetConfig+0x1d8>
 8004852:	2b40      	cmp	r3, #64	@ 0x40
 8004854:	d008      	beq.n	8004868 <UART_SetConfig+0x1e8>
 8004856:	e00f      	b.n	8004878 <UART_SetConfig+0x1f8>
 8004858:	2300      	movs	r3, #0
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485e:	e082      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004860:	2302      	movs	r3, #2
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004866:	e07e      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004868:	2304      	movs	r3, #4
 800486a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800486e:	e07a      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004870:	2308      	movs	r3, #8
 8004872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004876:	e076      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004878:	2310      	movs	r3, #16
 800487a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800487e:	e072      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a35      	ldr	r2, [pc, #212]	@ (800495c <UART_SetConfig+0x2dc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d12a      	bne.n	80048e0 <UART_SetConfig+0x260>
 800488a:	4b30      	ldr	r3, [pc, #192]	@ (800494c <UART_SetConfig+0x2cc>)
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004890:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004894:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004898:	d01a      	beq.n	80048d0 <UART_SetConfig+0x250>
 800489a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800489e:	d81b      	bhi.n	80048d8 <UART_SetConfig+0x258>
 80048a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a4:	d00c      	beq.n	80048c0 <UART_SetConfig+0x240>
 80048a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048aa:	d815      	bhi.n	80048d8 <UART_SetConfig+0x258>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <UART_SetConfig+0x238>
 80048b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048b4:	d008      	beq.n	80048c8 <UART_SetConfig+0x248>
 80048b6:	e00f      	b.n	80048d8 <UART_SetConfig+0x258>
 80048b8:	2300      	movs	r3, #0
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048be:	e052      	b.n	8004966 <UART_SetConfig+0x2e6>
 80048c0:	2302      	movs	r3, #2
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048c6:	e04e      	b.n	8004966 <UART_SetConfig+0x2e6>
 80048c8:	2304      	movs	r3, #4
 80048ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ce:	e04a      	b.n	8004966 <UART_SetConfig+0x2e6>
 80048d0:	2308      	movs	r3, #8
 80048d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048d6:	e046      	b.n	8004966 <UART_SetConfig+0x2e6>
 80048d8:	2310      	movs	r3, #16
 80048da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048de:	e042      	b.n	8004966 <UART_SetConfig+0x2e6>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a17      	ldr	r2, [pc, #92]	@ (8004944 <UART_SetConfig+0x2c4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d13a      	bne.n	8004960 <UART_SetConfig+0x2e0>
 80048ea:	4b18      	ldr	r3, [pc, #96]	@ (800494c <UART_SetConfig+0x2cc>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048f8:	d01a      	beq.n	8004930 <UART_SetConfig+0x2b0>
 80048fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048fe:	d81b      	bhi.n	8004938 <UART_SetConfig+0x2b8>
 8004900:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004904:	d00c      	beq.n	8004920 <UART_SetConfig+0x2a0>
 8004906:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800490a:	d815      	bhi.n	8004938 <UART_SetConfig+0x2b8>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <UART_SetConfig+0x298>
 8004910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004914:	d008      	beq.n	8004928 <UART_SetConfig+0x2a8>
 8004916:	e00f      	b.n	8004938 <UART_SetConfig+0x2b8>
 8004918:	2300      	movs	r3, #0
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800491e:	e022      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004920:	2302      	movs	r3, #2
 8004922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004926:	e01e      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004928:	2304      	movs	r3, #4
 800492a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800492e:	e01a      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004930:	2308      	movs	r3, #8
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004936:	e016      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004938:	2310      	movs	r3, #16
 800493a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800493e:	e012      	b.n	8004966 <UART_SetConfig+0x2e6>
 8004940:	efff69f3 	.word	0xefff69f3
 8004944:	40008000 	.word	0x40008000
 8004948:	40013800 	.word	0x40013800
 800494c:	40021000 	.word	0x40021000
 8004950:	40004400 	.word	0x40004400
 8004954:	40004800 	.word	0x40004800
 8004958:	40004c00 	.word	0x40004c00
 800495c:	40005000 	.word	0x40005000
 8004960:	2310      	movs	r3, #16
 8004962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a9f      	ldr	r2, [pc, #636]	@ (8004be8 <UART_SetConfig+0x568>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d17a      	bne.n	8004a66 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004970:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004974:	2b08      	cmp	r3, #8
 8004976:	d824      	bhi.n	80049c2 <UART_SetConfig+0x342>
 8004978:	a201      	add	r2, pc, #4	@ (adr r2, 8004980 <UART_SetConfig+0x300>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	080049a5 	.word	0x080049a5
 8004984:	080049c3 	.word	0x080049c3
 8004988:	080049ad 	.word	0x080049ad
 800498c:	080049c3 	.word	0x080049c3
 8004990:	080049b3 	.word	0x080049b3
 8004994:	080049c3 	.word	0x080049c3
 8004998:	080049c3 	.word	0x080049c3
 800499c:	080049c3 	.word	0x080049c3
 80049a0:	080049bb 	.word	0x080049bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a4:	f7fd fbfc 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 80049a8:	61f8      	str	r0, [r7, #28]
        break;
 80049aa:	e010      	b.n	80049ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ac:	4b8f      	ldr	r3, [pc, #572]	@ (8004bec <UART_SetConfig+0x56c>)
 80049ae:	61fb      	str	r3, [r7, #28]
        break;
 80049b0:	e00d      	b.n	80049ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b2:	f7fd fb5d 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 80049b6:	61f8      	str	r0, [r7, #28]
        break;
 80049b8:	e009      	b.n	80049ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049be:	61fb      	str	r3, [r7, #28]
        break;
 80049c0:	e005      	b.n	80049ce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 80fb 	beq.w	8004bcc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	4613      	mov	r3, r2
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	4413      	add	r3, r2
 80049e0:	69fa      	ldr	r2, [r7, #28]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d305      	bcc.n	80049f2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049ec:	69fa      	ldr	r2, [r7, #28]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d903      	bls.n	80049fa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049f8:	e0e8      	b.n	8004bcc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	2200      	movs	r2, #0
 80049fe:	461c      	mov	r4, r3
 8004a00:	4615      	mov	r5, r2
 8004a02:	f04f 0200 	mov.w	r2, #0
 8004a06:	f04f 0300 	mov.w	r3, #0
 8004a0a:	022b      	lsls	r3, r5, #8
 8004a0c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004a10:	0222      	lsls	r2, r4, #8
 8004a12:	68f9      	ldr	r1, [r7, #12]
 8004a14:	6849      	ldr	r1, [r1, #4]
 8004a16:	0849      	lsrs	r1, r1, #1
 8004a18:	2000      	movs	r0, #0
 8004a1a:	4688      	mov	r8, r1
 8004a1c:	4681      	mov	r9, r0
 8004a1e:	eb12 0a08 	adds.w	sl, r2, r8
 8004a22:	eb43 0b09 	adc.w	fp, r3, r9
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	603b      	str	r3, [r7, #0]
 8004a2e:	607a      	str	r2, [r7, #4]
 8004a30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a34:	4650      	mov	r0, sl
 8004a36:	4659      	mov	r1, fp
 8004a38:	f7fb fbc6 	bl	80001c8 <__aeabi_uldivmod>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4613      	mov	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a4a:	d308      	bcc.n	8004a5e <UART_SetConfig+0x3de>
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a52:	d204      	bcs.n	8004a5e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	60da      	str	r2, [r3, #12]
 8004a5c:	e0b6      	b.n	8004bcc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a64:	e0b2      	b.n	8004bcc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a6e:	d15e      	bne.n	8004b2e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d828      	bhi.n	8004aca <UART_SetConfig+0x44a>
 8004a78:	a201      	add	r2, pc, #4	@ (adr r2, 8004a80 <UART_SetConfig+0x400>)
 8004a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7e:	bf00      	nop
 8004a80:	08004aa5 	.word	0x08004aa5
 8004a84:	08004aad 	.word	0x08004aad
 8004a88:	08004ab5 	.word	0x08004ab5
 8004a8c:	08004acb 	.word	0x08004acb
 8004a90:	08004abb 	.word	0x08004abb
 8004a94:	08004acb 	.word	0x08004acb
 8004a98:	08004acb 	.word	0x08004acb
 8004a9c:	08004acb 	.word	0x08004acb
 8004aa0:	08004ac3 	.word	0x08004ac3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aa4:	f7fd fb7c 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 8004aa8:	61f8      	str	r0, [r7, #28]
        break;
 8004aaa:	e014      	b.n	8004ad6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aac:	f7fd fb8e 	bl	80021cc <HAL_RCC_GetPCLK2Freq>
 8004ab0:	61f8      	str	r0, [r7, #28]
        break;
 8004ab2:	e010      	b.n	8004ad6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ab4:	4b4d      	ldr	r3, [pc, #308]	@ (8004bec <UART_SetConfig+0x56c>)
 8004ab6:	61fb      	str	r3, [r7, #28]
        break;
 8004ab8:	e00d      	b.n	8004ad6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aba:	f7fd fad9 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 8004abe:	61f8      	str	r0, [r7, #28]
        break;
 8004ac0:	e009      	b.n	8004ad6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ac6:	61fb      	str	r3, [r7, #28]
        break;
 8004ac8:	e005      	b.n	8004ad6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004aca:	2300      	movs	r3, #0
 8004acc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ad4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d077      	beq.n	8004bcc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	005a      	lsls	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	441a      	add	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b0f      	cmp	r3, #15
 8004af6:	d916      	bls.n	8004b26 <UART_SetConfig+0x4a6>
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004afe:	d212      	bcs.n	8004b26 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f023 030f 	bic.w	r3, r3, #15
 8004b08:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	085b      	lsrs	r3, r3, #1
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	8afb      	ldrh	r3, [r7, #22]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	8afa      	ldrh	r2, [r7, #22]
 8004b22:	60da      	str	r2, [r3, #12]
 8004b24:	e052      	b.n	8004bcc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b2c:	e04e      	b.n	8004bcc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d827      	bhi.n	8004b86 <UART_SetConfig+0x506>
 8004b36:	a201      	add	r2, pc, #4	@ (adr r2, 8004b3c <UART_SetConfig+0x4bc>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004b61 	.word	0x08004b61
 8004b40:	08004b69 	.word	0x08004b69
 8004b44:	08004b71 	.word	0x08004b71
 8004b48:	08004b87 	.word	0x08004b87
 8004b4c:	08004b77 	.word	0x08004b77
 8004b50:	08004b87 	.word	0x08004b87
 8004b54:	08004b87 	.word	0x08004b87
 8004b58:	08004b87 	.word	0x08004b87
 8004b5c:	08004b7f 	.word	0x08004b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b60:	f7fd fb1e 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 8004b64:	61f8      	str	r0, [r7, #28]
        break;
 8004b66:	e014      	b.n	8004b92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b68:	f7fd fb30 	bl	80021cc <HAL_RCC_GetPCLK2Freq>
 8004b6c:	61f8      	str	r0, [r7, #28]
        break;
 8004b6e:	e010      	b.n	8004b92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b70:	4b1e      	ldr	r3, [pc, #120]	@ (8004bec <UART_SetConfig+0x56c>)
 8004b72:	61fb      	str	r3, [r7, #28]
        break;
 8004b74:	e00d      	b.n	8004b92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b76:	f7fd fa7b 	bl	8002070 <HAL_RCC_GetSysClockFreq>
 8004b7a:	61f8      	str	r0, [r7, #28]
        break;
 8004b7c:	e009      	b.n	8004b92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b82:	61fb      	str	r3, [r7, #28]
        break;
 8004b84:	e005      	b.n	8004b92 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b86:	2300      	movs	r3, #0
 8004b88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b90:	bf00      	nop
    }

    if (pclk != 0U)
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d019      	beq.n	8004bcc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	085a      	lsrs	r2, r3, #1
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	441a      	add	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004baa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2b0f      	cmp	r3, #15
 8004bb0:	d909      	bls.n	8004bc6 <UART_SetConfig+0x546>
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb8:	d205      	bcs.n	8004bc6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	60da      	str	r2, [r3, #12]
 8004bc4:	e002      	b.n	8004bcc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004bd8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3728      	adds	r7, #40	@ 0x28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004be6:	bf00      	nop
 8004be8:	40008000 	.word	0x40008000
 8004bec:	00f42400 	.word	0x00f42400

08004bf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01a      	beq.n	8004d06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cee:	d10a      	bne.n	8004d06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	605a      	str	r2, [r3, #4]
  }
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b098      	sub	sp, #96	@ 0x60
 8004d38:	af02      	add	r7, sp, #8
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d44:	f7fc f8f6 	bl	8000f34 <HAL_GetTick>
 8004d48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d12e      	bne.n	8004db6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d60:	2200      	movs	r2, #0
 8004d62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f88c 	bl	8004e84 <UART_WaitOnFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d021      	beq.n	8004db6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d86:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e6      	bne.n	8004d72 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e062      	b.n	8004e7c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	2b04      	cmp	r3, #4
 8004dc2:	d149      	bne.n	8004e58 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f856 	bl	8004e84 <UART_WaitOnFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d03c      	beq.n	8004e58 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	623b      	str	r3, [r7, #32]
   return(result);
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e6      	bne.n	8004dde <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3308      	adds	r3, #8
 8004e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0301 	bic.w	r3, r3, #1
 8004e26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e30:	61fa      	str	r2, [r7, #28]
 8004e32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e34:	69b9      	ldr	r1, [r7, #24]
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	e841 2300 	strex	r3, r2, [r1]
 8004e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1e5      	bne.n	8004e10 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e011      	b.n	8004e7c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3758      	adds	r7, #88	@ 0x58
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	603b      	str	r3, [r7, #0]
 8004e90:	4613      	mov	r3, r2
 8004e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e94:	e04f      	b.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d04b      	beq.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9e:	f7fc f849 	bl	8000f34 <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d302      	bcc.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e04e      	b.n	8004f56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d037      	beq.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b80      	cmp	r3, #128	@ 0x80
 8004eca:	d034      	beq.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b40      	cmp	r3, #64	@ 0x40
 8004ed0:	d031      	beq.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d110      	bne.n	8004f02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2208      	movs	r2, #8
 8004ee6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f8ff 	bl	80050ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2208      	movs	r2, #8
 8004ef2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e029      	b.n	8004f56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f10:	d111      	bne.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 f8e5 	bl	80050ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e00f      	b.n	8004f56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	bf0c      	ite	eq
 8004f46:	2301      	moveq	r3, #1
 8004f48:	2300      	movne	r3, #0
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d0a0      	beq.n	8004e96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b097      	sub	sp, #92	@ 0x5c
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	88fa      	ldrh	r2, [r7, #6]
 8004f78:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	88fa      	ldrh	r2, [r7, #6]
 8004f80:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f92:	d10e      	bne.n	8004fb2 <UART_Start_Receive_IT+0x52>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d105      	bne.n	8004fa8 <UART_Start_Receive_IT+0x48>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004fa2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004fa6:	e02d      	b.n	8005004 <UART_Start_Receive_IT+0xa4>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	22ff      	movs	r2, #255	@ 0xff
 8004fac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004fb0:	e028      	b.n	8005004 <UART_Start_Receive_IT+0xa4>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10d      	bne.n	8004fd6 <UART_Start_Receive_IT+0x76>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d104      	bne.n	8004fcc <UART_Start_Receive_IT+0x6c>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	22ff      	movs	r2, #255	@ 0xff
 8004fc6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004fca:	e01b      	b.n	8005004 <UART_Start_Receive_IT+0xa4>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	227f      	movs	r2, #127	@ 0x7f
 8004fd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004fd4:	e016      	b.n	8005004 <UART_Start_Receive_IT+0xa4>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fde:	d10d      	bne.n	8004ffc <UART_Start_Receive_IT+0x9c>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d104      	bne.n	8004ff2 <UART_Start_Receive_IT+0x92>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	227f      	movs	r2, #127	@ 0x7f
 8004fec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ff0:	e008      	b.n	8005004 <UART_Start_Receive_IT+0xa4>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	223f      	movs	r2, #63	@ 0x3f
 8004ff6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ffa:	e003      	b.n	8005004 <UART_Start_Receive_IT+0xa4>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2222      	movs	r2, #34	@ 0x22
 8005010:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3308      	adds	r3, #8
 800501a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800501e:	e853 3f00 	ldrex	r3, [r3]
 8005022:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005026:	f043 0301 	orr.w	r3, r3, #1
 800502a:	657b      	str	r3, [r7, #84]	@ 0x54
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3308      	adds	r3, #8
 8005032:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005034:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005036:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005038:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800503a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800503c:	e841 2300 	strex	r3, r2, [r1]
 8005040:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1e5      	bne.n	8005014 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005050:	d107      	bne.n	8005062 <UART_Start_Receive_IT+0x102>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4a21      	ldr	r2, [pc, #132]	@ (80050e4 <UART_Start_Receive_IT+0x184>)
 800505e:	669a      	str	r2, [r3, #104]	@ 0x68
 8005060:	e002      	b.n	8005068 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4a20      	ldr	r2, [pc, #128]	@ (80050e8 <UART_Start_Receive_IT+0x188>)
 8005066:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d019      	beq.n	80050a4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005084:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800508e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005090:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005094:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800509c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e6      	bne.n	8005070 <UART_Start_Receive_IT+0x110>
 80050a2:	e018      	b.n	80050d6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	613b      	str	r3, [r7, #16]
   return(result);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f043 0320 	orr.w	r3, r3, #32
 80050b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	461a      	mov	r2, r3
 80050c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050c2:	623b      	str	r3, [r7, #32]
 80050c4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	69f9      	ldr	r1, [r7, #28]
 80050c8:	6a3a      	ldr	r2, [r7, #32]
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e6      	bne.n	80050a4 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	375c      	adds	r7, #92	@ 0x5c
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	080053f1 	.word	0x080053f1
 80050e8:	08005235 	.word	0x08005235

080050ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b095      	sub	sp, #84	@ 0x54
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fc:	e853 3f00 	ldrex	r3, [r3]
 8005100:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005104:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005108:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005112:	643b      	str	r3, [r7, #64]	@ 0x40
 8005114:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005118:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800511a:	e841 2300 	strex	r3, r2, [r1]
 800511e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e6      	bne.n	80050f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3308      	adds	r3, #8
 800512c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	61fb      	str	r3, [r7, #28]
   return(result);
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	f023 0301 	bic.w	r3, r3, #1
 800513c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3308      	adds	r3, #8
 8005144:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005146:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005148:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800514c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800514e:	e841 2300 	strex	r3, r2, [r1]
 8005152:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1e5      	bne.n	8005126 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800515e:	2b01      	cmp	r3, #1
 8005160:	d118      	bne.n	8005194 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	e853 3f00 	ldrex	r3, [r3]
 800516e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f023 0310 	bic.w	r3, r3, #16
 8005176:	647b      	str	r3, [r7, #68]	@ 0x44
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	461a      	mov	r2, r3
 800517e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005184:	6979      	ldr	r1, [r7, #20]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	e841 2300 	strex	r3, r2, [r1]
 800518c:	613b      	str	r3, [r7, #16]
   return(result);
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e6      	bne.n	8005162 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80051a8:	bf00      	nop
 80051aa:	3754      	adds	r7, #84	@ 0x54
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f7ff fa3e 	bl	8004654 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051fc:	61fb      	str	r3, [r7, #28]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	61bb      	str	r3, [r7, #24]
 8005208:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	6979      	ldr	r1, [r7, #20]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	613b      	str	r3, [r7, #16]
   return(result);
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e6      	bne.n	80051e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2220      	movs	r2, #32
 800521e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7ff fa0a 	bl	8004640 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800522c:	bf00      	nop
 800522e:	3720      	adds	r7, #32
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b09c      	sub	sp, #112	@ 0x70
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005242:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800524c:	2b22      	cmp	r3, #34	@ 0x22
 800524e:	f040 80be 	bne.w	80053ce <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005258:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800525c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005260:	b2d9      	uxtb	r1, r3
 8005262:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005266:	b2da      	uxtb	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526c:	400a      	ands	r2, r1
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	f040 80a3 	bne.w	80053e2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80052aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80052bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80052c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e6      	bne.n	800529c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3308      	adds	r3, #8
 80052d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e0:	f023 0301 	bic.w	r3, r3, #1
 80052e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3308      	adds	r3, #8
 80052ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80052ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80052f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052f6:	e841 2300 	strex	r3, r2, [r1]
 80052fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1e5      	bne.n	80052ce <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2220      	movs	r2, #32
 8005306:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a34      	ldr	r2, [pc, #208]	@ (80053ec <UART_RxISR_8BIT+0x1b8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d01f      	beq.n	8005360 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d018      	beq.n	8005360 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	623b      	str	r3, [r7, #32]
   return(result);
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005342:	663b      	str	r3, [r7, #96]	@ 0x60
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800534c:	633b      	str	r3, [r7, #48]	@ 0x30
 800534e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005350:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005354:	e841 2300 	strex	r3, r2, [r1]
 8005358:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800535a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e6      	bne.n	800532e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005364:	2b01      	cmp	r3, #1
 8005366:	d12e      	bne.n	80053c6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	e853 3f00 	ldrex	r3, [r3]
 800537a:	60fb      	str	r3, [r7, #12]
   return(result);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0310 	bic.w	r3, r3, #16
 8005382:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	461a      	mov	r2, r3
 800538a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800538c:	61fb      	str	r3, [r7, #28]
 800538e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005390:	69b9      	ldr	r1, [r7, #24]
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	e841 2300 	strex	r3, r2, [r1]
 8005398:	617b      	str	r3, [r7, #20]
   return(result);
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e6      	bne.n	800536e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f003 0310 	and.w	r3, r3, #16
 80053aa:	2b10      	cmp	r3, #16
 80053ac:	d103      	bne.n	80053b6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2210      	movs	r2, #16
 80053b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80053bc:	4619      	mov	r1, r3
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7ff f952 	bl	8004668 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053c4:	e00d      	b.n	80053e2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fb fb2e 	bl	8000a28 <HAL_UART_RxCpltCallback>
}
 80053cc:	e009      	b.n	80053e2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	8b1b      	ldrh	r3, [r3, #24]
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0208 	orr.w	r2, r2, #8
 80053de:	b292      	uxth	r2, r2
 80053e0:	831a      	strh	r2, [r3, #24]
}
 80053e2:	bf00      	nop
 80053e4:	3770      	adds	r7, #112	@ 0x70
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40008000 	.word	0x40008000

080053f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b09c      	sub	sp, #112	@ 0x70
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80053fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005408:	2b22      	cmp	r3, #34	@ 0x22
 800540a:	f040 80be 	bne.w	800558a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005414:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800541e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005422:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005426:	4013      	ands	r3, r2
 8005428:	b29a      	uxth	r2, r3
 800542a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800542c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005432:	1c9a      	adds	r2, r3, #2
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	f040 80a3 	bne.w	800559e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005468:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800546c:	667b      	str	r3, [r7, #100]	@ 0x64
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005476:	657b      	str	r3, [r7, #84]	@ 0x54
 8005478:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800547c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e6      	bne.n	8005458 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3308      	adds	r3, #8
 8005490:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800549a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549c:	f023 0301 	bic.w	r3, r3, #1
 80054a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3308      	adds	r3, #8
 80054a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80054aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80054ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e5      	bne.n	800548a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a34      	ldr	r2, [pc, #208]	@ (80055a8 <UART_RxISR_16BIT+0x1b8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d01f      	beq.n	800551c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d018      	beq.n	800551c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80054fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005508:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800550a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800550e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e6      	bne.n	80054ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005520:	2b01      	cmp	r3, #1
 8005522:	d12e      	bne.n	8005582 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	60bb      	str	r3, [r7, #8]
   return(result);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f023 0310 	bic.w	r3, r3, #16
 800553e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6979      	ldr	r1, [r7, #20]
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	613b      	str	r3, [r7, #16]
   return(result);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e6      	bne.n	800552a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f003 0310 	and.w	r3, r3, #16
 8005566:	2b10      	cmp	r3, #16
 8005568:	d103      	bne.n	8005572 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2210      	movs	r2, #16
 8005570:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005578:	4619      	mov	r1, r3
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff f874 	bl	8004668 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005580:	e00d      	b.n	800559e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fb fa50 	bl	8000a28 <HAL_UART_RxCpltCallback>
}
 8005588:	e009      	b.n	800559e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	8b1b      	ldrh	r3, [r3, #24]
 8005590:	b29a      	uxth	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0208 	orr.w	r2, r2, #8
 800559a:	b292      	uxth	r2, r2
 800559c:	831a      	strh	r2, [r3, #24]
}
 800559e:	bf00      	nop
 80055a0:	3770      	adds	r7, #112	@ 0x70
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	40008000 	.word	0x40008000

080055ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <atoi>:
 80055c0:	220a      	movs	r2, #10
 80055c2:	2100      	movs	r1, #0
 80055c4:	f000 b87a 	b.w	80056bc <strtol>

080055c8 <_strtol_l.constprop.0>:
 80055c8:	2b24      	cmp	r3, #36	@ 0x24
 80055ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ce:	4686      	mov	lr, r0
 80055d0:	4690      	mov	r8, r2
 80055d2:	d801      	bhi.n	80055d8 <_strtol_l.constprop.0+0x10>
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d106      	bne.n	80055e6 <_strtol_l.constprop.0+0x1e>
 80055d8:	f000 f896 	bl	8005708 <__errno>
 80055dc:	2316      	movs	r3, #22
 80055de:	6003      	str	r3, [r0, #0]
 80055e0:	2000      	movs	r0, #0
 80055e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e6:	4834      	ldr	r0, [pc, #208]	@ (80056b8 <_strtol_l.constprop.0+0xf0>)
 80055e8:	460d      	mov	r5, r1
 80055ea:	462a      	mov	r2, r5
 80055ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80055f0:	5d06      	ldrb	r6, [r0, r4]
 80055f2:	f016 0608 	ands.w	r6, r6, #8
 80055f6:	d1f8      	bne.n	80055ea <_strtol_l.constprop.0+0x22>
 80055f8:	2c2d      	cmp	r4, #45	@ 0x2d
 80055fa:	d12d      	bne.n	8005658 <_strtol_l.constprop.0+0x90>
 80055fc:	782c      	ldrb	r4, [r5, #0]
 80055fe:	2601      	movs	r6, #1
 8005600:	1c95      	adds	r5, r2, #2
 8005602:	f033 0210 	bics.w	r2, r3, #16
 8005606:	d109      	bne.n	800561c <_strtol_l.constprop.0+0x54>
 8005608:	2c30      	cmp	r4, #48	@ 0x30
 800560a:	d12a      	bne.n	8005662 <_strtol_l.constprop.0+0x9a>
 800560c:	782a      	ldrb	r2, [r5, #0]
 800560e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005612:	2a58      	cmp	r2, #88	@ 0x58
 8005614:	d125      	bne.n	8005662 <_strtol_l.constprop.0+0x9a>
 8005616:	786c      	ldrb	r4, [r5, #1]
 8005618:	2310      	movs	r3, #16
 800561a:	3502      	adds	r5, #2
 800561c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005620:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005624:	2200      	movs	r2, #0
 8005626:	fbbc f9f3 	udiv	r9, ip, r3
 800562a:	4610      	mov	r0, r2
 800562c:	fb03 ca19 	mls	sl, r3, r9, ip
 8005630:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005634:	2f09      	cmp	r7, #9
 8005636:	d81b      	bhi.n	8005670 <_strtol_l.constprop.0+0xa8>
 8005638:	463c      	mov	r4, r7
 800563a:	42a3      	cmp	r3, r4
 800563c:	dd27      	ble.n	800568e <_strtol_l.constprop.0+0xc6>
 800563e:	1c57      	adds	r7, r2, #1
 8005640:	d007      	beq.n	8005652 <_strtol_l.constprop.0+0x8a>
 8005642:	4581      	cmp	r9, r0
 8005644:	d320      	bcc.n	8005688 <_strtol_l.constprop.0+0xc0>
 8005646:	d101      	bne.n	800564c <_strtol_l.constprop.0+0x84>
 8005648:	45a2      	cmp	sl, r4
 800564a:	db1d      	blt.n	8005688 <_strtol_l.constprop.0+0xc0>
 800564c:	fb00 4003 	mla	r0, r0, r3, r4
 8005650:	2201      	movs	r2, #1
 8005652:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005656:	e7eb      	b.n	8005630 <_strtol_l.constprop.0+0x68>
 8005658:	2c2b      	cmp	r4, #43	@ 0x2b
 800565a:	bf04      	itt	eq
 800565c:	782c      	ldrbeq	r4, [r5, #0]
 800565e:	1c95      	addeq	r5, r2, #2
 8005660:	e7cf      	b.n	8005602 <_strtol_l.constprop.0+0x3a>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1da      	bne.n	800561c <_strtol_l.constprop.0+0x54>
 8005666:	2c30      	cmp	r4, #48	@ 0x30
 8005668:	bf0c      	ite	eq
 800566a:	2308      	moveq	r3, #8
 800566c:	230a      	movne	r3, #10
 800566e:	e7d5      	b.n	800561c <_strtol_l.constprop.0+0x54>
 8005670:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005674:	2f19      	cmp	r7, #25
 8005676:	d801      	bhi.n	800567c <_strtol_l.constprop.0+0xb4>
 8005678:	3c37      	subs	r4, #55	@ 0x37
 800567a:	e7de      	b.n	800563a <_strtol_l.constprop.0+0x72>
 800567c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005680:	2f19      	cmp	r7, #25
 8005682:	d804      	bhi.n	800568e <_strtol_l.constprop.0+0xc6>
 8005684:	3c57      	subs	r4, #87	@ 0x57
 8005686:	e7d8      	b.n	800563a <_strtol_l.constprop.0+0x72>
 8005688:	f04f 32ff 	mov.w	r2, #4294967295
 800568c:	e7e1      	b.n	8005652 <_strtol_l.constprop.0+0x8a>
 800568e:	1c53      	adds	r3, r2, #1
 8005690:	d108      	bne.n	80056a4 <_strtol_l.constprop.0+0xdc>
 8005692:	2322      	movs	r3, #34	@ 0x22
 8005694:	f8ce 3000 	str.w	r3, [lr]
 8005698:	4660      	mov	r0, ip
 800569a:	f1b8 0f00 	cmp.w	r8, #0
 800569e:	d0a0      	beq.n	80055e2 <_strtol_l.constprop.0+0x1a>
 80056a0:	1e69      	subs	r1, r5, #1
 80056a2:	e006      	b.n	80056b2 <_strtol_l.constprop.0+0xea>
 80056a4:	b106      	cbz	r6, 80056a8 <_strtol_l.constprop.0+0xe0>
 80056a6:	4240      	negs	r0, r0
 80056a8:	f1b8 0f00 	cmp.w	r8, #0
 80056ac:	d099      	beq.n	80055e2 <_strtol_l.constprop.0+0x1a>
 80056ae:	2a00      	cmp	r2, #0
 80056b0:	d1f6      	bne.n	80056a0 <_strtol_l.constprop.0+0xd8>
 80056b2:	f8c8 1000 	str.w	r1, [r8]
 80056b6:	e794      	b.n	80055e2 <_strtol_l.constprop.0+0x1a>
 80056b8:	080057bd 	.word	0x080057bd

080056bc <strtol>:
 80056bc:	4613      	mov	r3, r2
 80056be:	460a      	mov	r2, r1
 80056c0:	4601      	mov	r1, r0
 80056c2:	4802      	ldr	r0, [pc, #8]	@ (80056cc <strtol+0x10>)
 80056c4:	6800      	ldr	r0, [r0, #0]
 80056c6:	f7ff bf7f 	b.w	80055c8 <_strtol_l.constprop.0>
 80056ca:	bf00      	nop
 80056cc:	2000000c 	.word	0x2000000c

080056d0 <memset>:
 80056d0:	4402      	add	r2, r0
 80056d2:	4603      	mov	r3, r0
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d100      	bne.n	80056da <memset+0xa>
 80056d8:	4770      	bx	lr
 80056da:	f803 1b01 	strb.w	r1, [r3], #1
 80056de:	e7f9      	b.n	80056d4 <memset+0x4>

080056e0 <strncpy>:
 80056e0:	b510      	push	{r4, lr}
 80056e2:	3901      	subs	r1, #1
 80056e4:	4603      	mov	r3, r0
 80056e6:	b132      	cbz	r2, 80056f6 <strncpy+0x16>
 80056e8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80056ec:	f803 4b01 	strb.w	r4, [r3], #1
 80056f0:	3a01      	subs	r2, #1
 80056f2:	2c00      	cmp	r4, #0
 80056f4:	d1f7      	bne.n	80056e6 <strncpy+0x6>
 80056f6:	441a      	add	r2, r3
 80056f8:	2100      	movs	r1, #0
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d100      	bne.n	8005700 <strncpy+0x20>
 80056fe:	bd10      	pop	{r4, pc}
 8005700:	f803 1b01 	strb.w	r1, [r3], #1
 8005704:	e7f9      	b.n	80056fa <strncpy+0x1a>
	...

08005708 <__errno>:
 8005708:	4b01      	ldr	r3, [pc, #4]	@ (8005710 <__errno+0x8>)
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	2000000c 	.word	0x2000000c

08005714 <__libc_init_array>:
 8005714:	b570      	push	{r4, r5, r6, lr}
 8005716:	4d0d      	ldr	r5, [pc, #52]	@ (800574c <__libc_init_array+0x38>)
 8005718:	4c0d      	ldr	r4, [pc, #52]	@ (8005750 <__libc_init_array+0x3c>)
 800571a:	1b64      	subs	r4, r4, r5
 800571c:	10a4      	asrs	r4, r4, #2
 800571e:	2600      	movs	r6, #0
 8005720:	42a6      	cmp	r6, r4
 8005722:	d109      	bne.n	8005738 <__libc_init_array+0x24>
 8005724:	4d0b      	ldr	r5, [pc, #44]	@ (8005754 <__libc_init_array+0x40>)
 8005726:	4c0c      	ldr	r4, [pc, #48]	@ (8005758 <__libc_init_array+0x44>)
 8005728:	f000 f818 	bl	800575c <_init>
 800572c:	1b64      	subs	r4, r4, r5
 800572e:	10a4      	asrs	r4, r4, #2
 8005730:	2600      	movs	r6, #0
 8005732:	42a6      	cmp	r6, r4
 8005734:	d105      	bne.n	8005742 <__libc_init_array+0x2e>
 8005736:	bd70      	pop	{r4, r5, r6, pc}
 8005738:	f855 3b04 	ldr.w	r3, [r5], #4
 800573c:	4798      	blx	r3
 800573e:	3601      	adds	r6, #1
 8005740:	e7ee      	b.n	8005720 <__libc_init_array+0xc>
 8005742:	f855 3b04 	ldr.w	r3, [r5], #4
 8005746:	4798      	blx	r3
 8005748:	3601      	adds	r6, #1
 800574a:	e7f2      	b.n	8005732 <__libc_init_array+0x1e>
 800574c:	080058c8 	.word	0x080058c8
 8005750:	080058c8 	.word	0x080058c8
 8005754:	080058c8 	.word	0x080058c8
 8005758:	080058cc 	.word	0x080058cc

0800575c <_init>:
 800575c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800575e:	bf00      	nop
 8005760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005762:	bc08      	pop	{r3}
 8005764:	469e      	mov	lr, r3
 8005766:	4770      	bx	lr

08005768 <_fini>:
 8005768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576a:	bf00      	nop
 800576c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800576e:	bc08      	pop	{r3}
 8005770:	469e      	mov	lr, r3
 8005772:	4770      	bx	lr
