
stepper_ares.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005694  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005750  08005750  00006750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800582c  0800582c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  0800582c  0800582c  0000682c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005834  08005834  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005834  08005834  00006834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005838  08005838  00006838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800583c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08005848  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08005848  0000715c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a64  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237c  00000000  00000000  00017a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00019e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b61  00000000  00000000  0001ac80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bce  00000000  00000000  0001b7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c2a  00000000  00000000  000343af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a11df  00000000  00000000  00045fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e71b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003458  00000000  00000000  000e71fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ea654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005738 	.word	0x08005738

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005738 	.word	0x08005738

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fcbe 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f8a6 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 fa9c 	bl	8000b64 <MX_GPIO_Init>
  MX_TIM1_Init();
 800062c:	f000 f900 	bl	8000830 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000630:	f000 f9ca 	bl	80009c8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000634:	f000 fa48 	bl	8000ac8 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);//enable
 8000638:	23a0      	movs	r3, #160	@ 0xa0
 800063a:	05db      	lsls	r3, r3, #23
 800063c:	2200      	movs	r2, #0
 800063e:	2120      	movs	r1, #32
 8000640:	0018      	movs	r0, r3
 8000642:	f001 f841 	bl	80016c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000646:	23a0      	movs	r3, #160	@ 0xa0
 8000648:	05db      	lsls	r3, r3, #23
 800064a:	2200      	movs	r2, #0
 800064c:	2110      	movs	r1, #16
 800064e:	0018      	movs	r0, r3
 8000650:	f001 f83a 	bl	80016c8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);//enable
 8000654:	2380      	movs	r3, #128	@ 0x80
 8000656:	0099      	lsls	r1, r3, #2
 8000658:	23a0      	movs	r3, #160	@ 0xa0
 800065a:	05db      	lsls	r3, r3, #23
 800065c:	2200      	movs	r2, #0
 800065e:	0018      	movs	r0, r3
 8000660:	f001 f832 	bl	80016c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000664:	4b3e      	ldr	r3, [pc, #248]	@ (8000760 <main+0x144>)
 8000666:	2200      	movs	r2, #0
 8000668:	2140      	movs	r1, #64	@ 0x40
 800066a:	0018      	movs	r0, r3
 800066c:	f001 f82c 	bl	80016c8 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000670:	4b3c      	ldr	r3, [pc, #240]	@ (8000764 <main+0x148>)
 8000672:	2100      	movs	r1, #0
 8000674:	0018      	movs	r0, r3
 8000676:	f001 ffc5 	bl	8002604 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800067a:	4b3b      	ldr	r3, [pc, #236]	@ (8000768 <main+0x14c>)
 800067c:	2108      	movs	r1, #8
 800067e:	0018      	movs	r0, r3
 8000680:	f001 ffc0 	bl	8002604 <HAL_TIM_PWM_Start>

	HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_data, 2);
 8000684:	4939      	ldr	r1, [pc, #228]	@ (800076c <main+0x150>)
 8000686:	4b3a      	ldr	r3, [pc, #232]	@ (8000770 <main+0x154>)
 8000688:	2202      	movs	r2, #2
 800068a:	0018      	movs	r0, r3
 800068c:	f002 ffec 	bl	8003668 <HAL_UART_Receive_IT>
//		char value_step_char[2];
//		value_step_char[0] = rx_data[0];
//		value_step_char[1] = '\0';
//		int value_step = atoi(value_step_char);

		if (rx_data[0] == 0)
 8000690:	4b36      	ldr	r3, [pc, #216]	@ (800076c <main+0x150>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d10b      	bne.n	80006b0 <main+0x94>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000698:	23a0      	movs	r3, #160	@ 0xa0
 800069a:	05db      	lsls	r3, r3, #23
 800069c:	2200      	movs	r2, #0
 800069e:	2110      	movs	r1, #16
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 f811 	bl	80016c8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80006a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000764 <main+0x148>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2200      	movs	r2, #0
 80006ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ae:	e7ef      	b.n	8000690 <main+0x74>
		}
		else if (rx_data[0] == 1)
 80006b0:	4b2e      	ldr	r3, [pc, #184]	@ (800076c <main+0x150>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d10c      	bne.n	80006d2 <main+0xb6>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006b8:	23a0      	movs	r3, #160	@ 0xa0
 80006ba:	05db      	lsls	r3, r3, #23
 80006bc:	2200      	movs	r2, #0
 80006be:	2110      	movs	r1, #16
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 f801 	bl	80016c8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 499);
 80006c6:	4b27      	ldr	r3, [pc, #156]	@ (8000764 <main+0x148>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	22f4      	movs	r2, #244	@ 0xf4
 80006cc:	32ff      	adds	r2, #255	@ 0xff
 80006ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80006d0:	e7de      	b.n	8000690 <main+0x74>
		}
		else if (rx_data[0] == 2)
 80006d2:	4b26      	ldr	r3, [pc, #152]	@ (800076c <main+0x150>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d10c      	bne.n	80006f4 <main+0xd8>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80006da:	23a0      	movs	r3, #160	@ 0xa0
 80006dc:	05db      	lsls	r3, r3, #23
 80006de:	2201      	movs	r2, #1
 80006e0:	2110      	movs	r1, #16
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 fff0 	bl	80016c8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 499);
 80006e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <main+0x148>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	22f4      	movs	r2, #244	@ 0xf4
 80006ee:	32ff      	adds	r2, #255	@ 0xff
 80006f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006f2:	e7cd      	b.n	8000690 <main+0x74>
		}
		else if (rx_data[1] == 0)
 80006f4:	4b1d      	ldr	r3, [pc, #116]	@ (800076c <main+0x150>)
 80006f6:	785b      	ldrb	r3, [r3, #1]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d10c      	bne.n	8000716 <main+0xfa>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80006fc:	2380      	movs	r3, #128	@ 0x80
 80006fe:	0099      	lsls	r1, r3, #2
 8000700:	23a0      	movs	r3, #160	@ 0xa0
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	2200      	movs	r2, #0
 8000706:	0018      	movs	r0, r3
 8000708:	f000 ffde 	bl	80016c8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800070c:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <main+0x14c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2200      	movs	r2, #0
 8000712:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000714:	e7bc      	b.n	8000690 <main+0x74>
		}
		else if (rx_data[1] == 1)
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <main+0x150>)
 8000718:	785b      	ldrb	r3, [r3, #1]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d10d      	bne.n	800073a <main+0x11e>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800071e:	2380      	movs	r3, #128	@ 0x80
 8000720:	0099      	lsls	r1, r3, #2
 8000722:	23a0      	movs	r3, #160	@ 0xa0
 8000724:	05db      	lsls	r3, r3, #23
 8000726:	2200      	movs	r2, #0
 8000728:	0018      	movs	r0, r3
 800072a:	f000 ffcd 	bl	80016c8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 499);
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <main+0x14c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	22f4      	movs	r2, #244	@ 0xf4
 8000734:	32ff      	adds	r2, #255	@ 0xff
 8000736:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000738:	e7aa      	b.n	8000690 <main+0x74>
		}
		else if (rx_data[1] == 2)
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <main+0x150>)
 800073c:	785b      	ldrb	r3, [r3, #1]
 800073e:	2b02      	cmp	r3, #2
 8000740:	d1a6      	bne.n	8000690 <main+0x74>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000742:	2380      	movs	r3, #128	@ 0x80
 8000744:	0099      	lsls	r1, r3, #2
 8000746:	23a0      	movs	r3, #160	@ 0xa0
 8000748:	05db      	lsls	r3, r3, #23
 800074a:	2201      	movs	r2, #1
 800074c:	0018      	movs	r0, r3
 800074e:	f000 ffbb 	bl	80016c8 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 499);
 8000752:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <main+0x14c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	22f4      	movs	r2, #244	@ 0xf4
 8000758:	32ff      	adds	r2, #255	@ 0xff
 800075a:	63da      	str	r2, [r3, #60]	@ 0x3c
		if (rx_data[0] == 0)
 800075c:	e798      	b.n	8000690 <main+0x74>
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	50000800 	.word	0x50000800
 8000764:	20000074 	.word	0x20000074
 8000768:	20000028 	.word	0x20000028
 800076c:	20000154 	.word	0x20000154
 8000770:	200000c0 	.word	0x200000c0

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b093      	sub	sp, #76	@ 0x4c
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	2410      	movs	r4, #16
 800077c:	193b      	adds	r3, r7, r4
 800077e:	0018      	movs	r0, r3
 8000780:	2338      	movs	r3, #56	@ 0x38
 8000782:	001a      	movs	r2, r3
 8000784:	2100      	movs	r1, #0
 8000786:	f004 ffab 	bl	80056e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078a:	003b      	movs	r3, r7
 800078c:	0018      	movs	r0, r3
 800078e:	2310      	movs	r3, #16
 8000790:	001a      	movs	r2, r3
 8000792:	2100      	movs	r1, #0
 8000794:	f004 ffa4 	bl	80056e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000798:	2380      	movs	r3, #128	@ 0x80
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	0018      	movs	r0, r3
 800079e:	f000 ffb1 	bl	8001704 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a2:	193b      	adds	r3, r7, r4
 80007a4:	2202      	movs	r2, #2
 80007a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	2280      	movs	r2, #128	@ 0x80
 80007ac:	0052      	lsls	r2, r2, #1
 80007ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007b0:	0021      	movs	r1, r4
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2240      	movs	r2, #64	@ 0x40
 80007bc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2202      	movs	r2, #2
 80007c2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2202      	movs	r2, #2
 80007c8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007ca:	187b      	adds	r3, r7, r1
 80007cc:	2200      	movs	r2, #0
 80007ce:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2209      	movs	r2, #9
 80007d4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2280      	movs	r2, #128	@ 0x80
 80007da:	0292      	lsls	r2, r2, #10
 80007dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	22a0      	movs	r2, #160	@ 0xa0
 80007e2:	0512      	lsls	r2, r2, #20
 80007e4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2280      	movs	r2, #128	@ 0x80
 80007ea:	05d2      	lsls	r2, r2, #23
 80007ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 ffd3 	bl	800179c <HAL_RCC_OscConfig>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007fa:	f000 fa35 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	003b      	movs	r3, r7
 8000800:	2207      	movs	r2, #7
 8000802:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000804:	003b      	movs	r3, r7
 8000806:	2202      	movs	r2, #2
 8000808:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	003b      	movs	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000810:	003b      	movs	r3, r7
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000816:	003b      	movs	r3, r7
 8000818:	2101      	movs	r1, #1
 800081a:	0018      	movs	r0, r3
 800081c:	f001 fad8 	bl	8001dd0 <HAL_RCC_ClockConfig>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000824:	f000 fa20 	bl	8000c68 <Error_Handler>
  }
}
 8000828:	46c0      	nop			@ (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b013      	add	sp, #76	@ 0x4c
 800082e:	bd90      	pop	{r4, r7, pc}

08000830 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b09c      	sub	sp, #112	@ 0x70
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	2360      	movs	r3, #96	@ 0x60
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	0018      	movs	r0, r3
 800083c:	2310      	movs	r3, #16
 800083e:	001a      	movs	r2, r3
 8000840:	2100      	movs	r1, #0
 8000842:	f004 ff4d 	bl	80056e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000846:	2354      	movs	r3, #84	@ 0x54
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	0018      	movs	r0, r3
 800084c:	230c      	movs	r3, #12
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f004 ff45 	bl	80056e0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000856:	2338      	movs	r3, #56	@ 0x38
 8000858:	18fb      	adds	r3, r7, r3
 800085a:	0018      	movs	r0, r3
 800085c:	231c      	movs	r3, #28
 800085e:	001a      	movs	r2, r3
 8000860:	2100      	movs	r1, #0
 8000862:	f004 ff3d 	bl	80056e0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	0018      	movs	r0, r3
 800086a:	2334      	movs	r3, #52	@ 0x34
 800086c:	001a      	movs	r2, r3
 800086e:	2100      	movs	r1, #0
 8000870:	f004 ff36 	bl	80056e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000874:	4b51      	ldr	r3, [pc, #324]	@ (80009bc <MX_TIM1_Init+0x18c>)
 8000876:	4a52      	ldr	r2, [pc, #328]	@ (80009c0 <MX_TIM1_Init+0x190>)
 8000878:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 239;
 800087a:	4b50      	ldr	r3, [pc, #320]	@ (80009bc <MX_TIM1_Init+0x18c>)
 800087c:	22ef      	movs	r2, #239	@ 0xef
 800087e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b4e      	ldr	r3, [pc, #312]	@ (80009bc <MX_TIM1_Init+0x18c>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000886:	4b4d      	ldr	r3, [pc, #308]	@ (80009bc <MX_TIM1_Init+0x18c>)
 8000888:	4a4e      	ldr	r2, [pc, #312]	@ (80009c4 <MX_TIM1_Init+0x194>)
 800088a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	4b4b      	ldr	r3, [pc, #300]	@ (80009bc <MX_TIM1_Init+0x18c>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000892:	4b4a      	ldr	r3, [pc, #296]	@ (80009bc <MX_TIM1_Init+0x18c>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000898:	4b48      	ldr	r3, [pc, #288]	@ (80009bc <MX_TIM1_Init+0x18c>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800089e:	4b47      	ldr	r3, [pc, #284]	@ (80009bc <MX_TIM1_Init+0x18c>)
 80008a0:	0018      	movs	r0, r3
 80008a2:	f001 fdf7 	bl	8002494 <HAL_TIM_Base_Init>
 80008a6:	1e03      	subs	r3, r0, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80008aa:	f000 f9dd 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ae:	2160      	movs	r1, #96	@ 0x60
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2280      	movs	r2, #128	@ 0x80
 80008b4:	0152      	lsls	r2, r2, #5
 80008b6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008b8:	187a      	adds	r2, r7, r1
 80008ba:	4b40      	ldr	r3, [pc, #256]	@ (80009bc <MX_TIM1_Init+0x18c>)
 80008bc:	0011      	movs	r1, r2
 80008be:	0018      	movs	r0, r3
 80008c0:	f002 f88a 	bl	80029d8 <HAL_TIM_ConfigClockSource>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80008c8:	f000 f9ce 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008cc:	4b3b      	ldr	r3, [pc, #236]	@ (80009bc <MX_TIM1_Init+0x18c>)
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 fe38 	bl	8002544 <HAL_TIM_PWM_Init>
 80008d4:	1e03      	subs	r3, r0, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80008d8:	f000 f9c6 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008dc:	2154      	movs	r1, #84	@ 0x54
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f0:	187a      	adds	r2, r7, r1
 80008f2:	4b32      	ldr	r3, [pc, #200]	@ (80009bc <MX_TIM1_Init+0x18c>)
 80008f4:	0011      	movs	r1, r2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f002 fd56 	bl	80033a8 <HAL_TIMEx_MasterConfigSynchronization>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000900:	f000 f9b2 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000904:	2138      	movs	r1, #56	@ 0x38
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2260      	movs	r2, #96	@ 0x60
 800090a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000930:	1879      	adds	r1, r7, r1
 8000932:	4b22      	ldr	r3, [pc, #136]	@ (80009bc <MX_TIM1_Init+0x18c>)
 8000934:	2208      	movs	r2, #8
 8000936:	0018      	movs	r0, r3
 8000938:	f001 ff4e 	bl	80027d8 <HAL_TIM_PWM_ConfigChannel>
 800093c:	1e03      	subs	r3, r0, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000940:	f000 f992 	bl	8000c68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2280      	movs	r2, #128	@ 0x80
 8000966:	0192      	lsls	r2, r2, #6
 8000968:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2280      	movs	r2, #128	@ 0x80
 8000980:	0492      	lsls	r2, r2, #18
 8000982:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2200      	movs	r2, #0
 8000988:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000996:	1d3a      	adds	r2, r7, #4
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <MX_TIM1_Init+0x18c>)
 800099a:	0011      	movs	r1, r2
 800099c:	0018      	movs	r0, r3
 800099e:	f002 fd71 	bl	8003484 <HAL_TIMEx_ConfigBreakDeadTime>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80009a6:	f000 f95f 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009aa:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <MX_TIM1_Init+0x18c>)
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 f9cf 	bl	8000d50 <HAL_TIM_MspPostInit>

}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b01c      	add	sp, #112	@ 0x70
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			@ (mov r8, r8)
 80009bc:	20000028 	.word	0x20000028
 80009c0:	40012c00 	.word	0x40012c00
 80009c4:	000003e7 	.word	0x000003e7

080009c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08e      	sub	sp, #56	@ 0x38
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ce:	2328      	movs	r3, #40	@ 0x28
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	0018      	movs	r0, r3
 80009d4:	2310      	movs	r3, #16
 80009d6:	001a      	movs	r2, r3
 80009d8:	2100      	movs	r1, #0
 80009da:	f004 fe81 	bl	80056e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009de:	231c      	movs	r3, #28
 80009e0:	18fb      	adds	r3, r7, r3
 80009e2:	0018      	movs	r0, r3
 80009e4:	230c      	movs	r3, #12
 80009e6:	001a      	movs	r2, r3
 80009e8:	2100      	movs	r1, #0
 80009ea:	f004 fe79 	bl	80056e0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ee:	003b      	movs	r3, r7
 80009f0:	0018      	movs	r0, r3
 80009f2:	231c      	movs	r3, #28
 80009f4:	001a      	movs	r2, r3
 80009f6:	2100      	movs	r1, #0
 80009f8:	f004 fe72 	bl	80056e0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009fc:	4b2f      	ldr	r3, [pc, #188]	@ (8000abc <MX_TIM3_Init+0xf4>)
 80009fe:	4a30      	ldr	r2, [pc, #192]	@ (8000ac0 <MX_TIM3_Init+0xf8>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 239;
 8000a02:	4b2e      	ldr	r3, [pc, #184]	@ (8000abc <MX_TIM3_Init+0xf4>)
 8000a04:	22ef      	movs	r2, #239	@ 0xef
 8000a06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b2c      	ldr	r3, [pc, #176]	@ (8000abc <MX_TIM3_Init+0xf4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000abc <MX_TIM3_Init+0xf4>)
 8000a10:	4a2c      	ldr	r2, [pc, #176]	@ (8000ac4 <MX_TIM3_Init+0xfc>)
 8000a12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b29      	ldr	r3, [pc, #164]	@ (8000abc <MX_TIM3_Init+0xf4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a1a:	4b28      	ldr	r3, [pc, #160]	@ (8000abc <MX_TIM3_Init+0xf4>)
 8000a1c:	2280      	movs	r2, #128	@ 0x80
 8000a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a20:	4b26      	ldr	r3, [pc, #152]	@ (8000abc <MX_TIM3_Init+0xf4>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f001 fd36 	bl	8002494 <HAL_TIM_Base_Init>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000a2c:	f000 f91c 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a30:	2128      	movs	r1, #40	@ 0x28
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	2280      	movs	r2, #128	@ 0x80
 8000a36:	0152      	lsls	r2, r2, #5
 8000a38:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a3a:	187a      	adds	r2, r7, r1
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <MX_TIM3_Init+0xf4>)
 8000a3e:	0011      	movs	r1, r2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f001 ffc9 	bl	80029d8 <HAL_TIM_ConfigClockSource>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000a4a:	f000 f90d 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <MX_TIM3_Init+0xf4>)
 8000a50:	0018      	movs	r0, r3
 8000a52:	f001 fd77 	bl	8002544 <HAL_TIM_PWM_Init>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a5a:	f000 f905 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5e:	211c      	movs	r1, #28
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a6c:	187a      	adds	r2, r7, r1
 8000a6e:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <MX_TIM3_Init+0xf4>)
 8000a70:	0011      	movs	r1, r2
 8000a72:	0018      	movs	r0, r3
 8000a74:	f002 fc98 	bl	80033a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000a7c:	f000 f8f4 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a80:	003b      	movs	r3, r7
 8000a82:	2260      	movs	r2, #96	@ 0x60
 8000a84:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a86:	003b      	movs	r3, r7
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8c:	003b      	movs	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a92:	003b      	movs	r3, r7
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a98:	0039      	movs	r1, r7
 8000a9a:	4b08      	ldr	r3, [pc, #32]	@ (8000abc <MX_TIM3_Init+0xf4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f001 fe9a 	bl	80027d8 <HAL_TIM_PWM_ConfigChannel>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000aa8:	f000 f8de 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aac:	4b03      	ldr	r3, [pc, #12]	@ (8000abc <MX_TIM3_Init+0xf4>)
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 f94e 	bl	8000d50 <HAL_TIM_MspPostInit>

}
 8000ab4:	46c0      	nop			@ (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b00e      	add	sp, #56	@ 0x38
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000074 	.word	0x20000074
 8000ac0:	40000400 	.word	0x40000400
 8000ac4:	000003e7 	.word	0x000003e7

08000ac8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000acc:	4b23      	ldr	r3, [pc, #140]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000ace:	4a24      	ldr	r2, [pc, #144]	@ (8000b60 <MX_USART1_UART_Init+0x98>)
 8000ad0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ad2:	4b22      	ldr	r3, [pc, #136]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000ad4:	22e1      	movs	r2, #225	@ 0xe1
 8000ad6:	0252      	lsls	r2, r2, #9
 8000ad8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ada:	4b20      	ldr	r3, [pc, #128]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000aee:	220c      	movs	r2, #12
 8000af0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af8:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b10:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000b12:	0018      	movs	r0, r3
 8000b14:	f002 fd52 	bl	80035bc <HAL_UART_Init>
 8000b18:	1e03      	subs	r3, r0, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b1c:	f000 f8a4 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b20:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000b22:	2100      	movs	r1, #0
 8000b24:	0018      	movs	r0, r3
 8000b26:	f004 fcfb 	bl	8005520 <HAL_UARTEx_SetTxFifoThreshold>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b2e:	f000 f89b 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b32:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000b34:	2100      	movs	r1, #0
 8000b36:	0018      	movs	r0, r3
 8000b38:	f004 fd32 	bl	80055a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b40:	f000 f892 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <MX_USART1_UART_Init+0x94>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f004 fcb0 	bl	80054ac <HAL_UARTEx_DisableFifoMode>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b50:	f000 f88a 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b54:	46c0      	nop			@ (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	200000c0 	.word	0x200000c0
 8000b60:	40013800 	.word	0x40013800

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b089      	sub	sp, #36	@ 0x24
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	240c      	movs	r4, #12
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	0018      	movs	r0, r3
 8000b70:	2314      	movs	r3, #20
 8000b72:	001a      	movs	r2, r3
 8000b74:	2100      	movs	r1, #0
 8000b76:	f004 fdb3 	bl	80056e0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c34 <MX_GPIO_Init+0xd0>)
 8000b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c34 <MX_GPIO_Init+0xd0>)
 8000b80:	2104      	movs	r1, #4
 8000b82:	430a      	orrs	r2, r1
 8000b84:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b86:	4b2b      	ldr	r3, [pc, #172]	@ (8000c34 <MX_GPIO_Init+0xd0>)
 8000b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b8a:	2204      	movs	r2, #4
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	4b28      	ldr	r3, [pc, #160]	@ (8000c34 <MX_GPIO_Init+0xd0>)
 8000b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b96:	4b27      	ldr	r3, [pc, #156]	@ (8000c34 <MX_GPIO_Init+0xd0>)
 8000b98:	2101      	movs	r1, #1
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b9e:	4b25      	ldr	r3, [pc, #148]	@ (8000c34 <MX_GPIO_Init+0xd0>)
 8000ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	4b22      	ldr	r3, [pc, #136]	@ (8000c34 <MX_GPIO_Init+0xd0>)
 8000bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bae:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <MX_GPIO_Init+0xd0>)
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <MX_GPIO_Init+0xd0>)
 8000bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bba:	2202      	movs	r2, #2
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, dir2_Pin|EN2_Pin|dir1_Pin, GPIO_PIN_RESET);
 8000bc2:	238c      	movs	r3, #140	@ 0x8c
 8000bc4:	0099      	lsls	r1, r3, #2
 8000bc6:	23a0      	movs	r3, #160	@ 0xa0
 8000bc8:	05db      	lsls	r3, r3, #23
 8000bca:	2200      	movs	r2, #0
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f000 fd7b 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000bd2:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <MX_GPIO_Init+0xd4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2140      	movs	r1, #64	@ 0x40
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 fd75 	bl	80016c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : dir2_Pin EN2_Pin dir1_Pin */
  GPIO_InitStruct.Pin = dir2_Pin|EN2_Pin|dir1_Pin;
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	228c      	movs	r2, #140	@ 0x8c
 8000be2:	0092      	lsls	r2, r2, #2
 8000be4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	2201      	movs	r2, #1
 8000bea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	193a      	adds	r2, r7, r4
 8000bfa:	23a0      	movs	r3, #160	@ 0xa0
 8000bfc:	05db      	lsls	r3, r3, #23
 8000bfe:	0011      	movs	r1, r2
 8000c00:	0018      	movs	r0, r3
 8000c02:	f000 fbfd 	bl	8001400 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN1_Pin */
  GPIO_InitStruct.Pin = EN1_Pin;
 8000c06:	0021      	movs	r1, r4
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2240      	movs	r2, #64	@ 0x40
 8000c0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2201      	movs	r2, #1
 8000c12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN1_GPIO_Port, &GPIO_InitStruct);
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	4a05      	ldr	r2, [pc, #20]	@ (8000c38 <MX_GPIO_Init+0xd4>)
 8000c24:	0019      	movs	r1, r3
 8000c26:	0010      	movs	r0, r2
 8000c28:	f000 fbea 	bl	8001400 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2c:	46c0      	nop			@ (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b009      	add	sp, #36	@ 0x24
 8000c32:	bd90      	pop	{r4, r7, pc}
 8000c34:	40021000 	.word	0x40021000
 8000c38:	50000800 	.word	0x50000800

08000c3c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	if (huart==&huart1)
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <HAL_UART_RxCpltCallback+0x24>)
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d105      	bne.n	8000c58 <HAL_UART_RxCpltCallback+0x1c>
	{
		HAL_UART_Receive_IT(&huart1, rx_data, 2);  // Relancer la réception
 8000c4c:	4905      	ldr	r1, [pc, #20]	@ (8000c64 <HAL_UART_RxCpltCallback+0x28>)
 8000c4e:	4b04      	ldr	r3, [pc, #16]	@ (8000c60 <HAL_UART_RxCpltCallback+0x24>)
 8000c50:	2202      	movs	r2, #2
 8000c52:	0018      	movs	r0, r3
 8000c54:	f002 fd08 	bl	8003668 <HAL_UART_Receive_IT>
	}
}
 8000c58:	46c0      	nop			@ (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200000c0 	.word	0x200000c0
 8000c64:	20000154 	.word	0x20000154

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c70:	46c0      	nop			@ (mov r8, r8)
 8000c72:	e7fd      	b.n	8000c70 <Error_Handler+0x8>

08000c74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c80:	2101      	movs	r1, #1
 8000c82:	430a      	orrs	r2, r1
 8000c84:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c86:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b09      	ldr	r3, [pc, #36]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c96:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000c98:	2180      	movs	r1, #128	@ 0x80
 8000c9a:	0549      	lsls	r1, r1, #21
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ca0:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <HAL_MspInit+0x44>)
 8000ca2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ca4:	2380      	movs	r3, #128	@ 0x80
 8000ca6:	055b      	lsls	r3, r3, #21
 8000ca8:	4013      	ands	r3, r2
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b093      	sub	sp, #76	@ 0x4c
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc4:	2414      	movs	r4, #20
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	0018      	movs	r0, r3
 8000cca:	2334      	movs	r3, #52	@ 0x34
 8000ccc:	001a      	movs	r2, r3
 8000cce:	2100      	movs	r1, #0
 8000cd0:	f004 fd06 	bl	80056e0 <memset>
  if(htim_base->Instance==TIM1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a1a      	ldr	r2, [pc, #104]	@ (8000d44 <HAL_TIM_Base_MspInit+0x88>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d11d      	bne.n	8000d1a <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	2280      	movs	r2, #128	@ 0x80
 8000ce2:	0392      	lsls	r2, r2, #14
 8000ce4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f001 fa18 	bl	8002124 <HAL_RCCEx_PeriphCLKConfig>
 8000cf4:	1e03      	subs	r3, r0, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000cf8:	f7ff ffb6 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <HAL_TIM_Base_MspInit+0x8c>)
 8000cfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <HAL_TIM_Base_MspInit+0x8c>)
 8000d02:	2180      	movs	r1, #128	@ 0x80
 8000d04:	0109      	lsls	r1, r1, #4
 8000d06:	430a      	orrs	r2, r1
 8000d08:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d48 <HAL_TIM_Base_MspInit+0x8c>)
 8000d0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d0e:	2380      	movs	r3, #128	@ 0x80
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d18:	e010      	b.n	8000d3c <HAL_TIM_Base_MspInit+0x80>
  else if(htim_base->Instance==TIM3)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d4c <HAL_TIM_Base_MspInit+0x90>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d10b      	bne.n	8000d3c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <HAL_TIM_Base_MspInit+0x8c>)
 8000d26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d28:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <HAL_TIM_Base_MspInit+0x8c>)
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d30:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <HAL_TIM_Base_MspInit+0x8c>)
 8000d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d34:	2202      	movs	r2, #2
 8000d36:	4013      	ands	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
}
 8000d3c:	46c0      	nop			@ (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b013      	add	sp, #76	@ 0x4c
 8000d42:	bd90      	pop	{r4, r7, pc}
 8000d44:	40012c00 	.word	0x40012c00
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40000400 	.word	0x40000400

08000d50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b08b      	sub	sp, #44	@ 0x2c
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	2414      	movs	r4, #20
 8000d5a:	193b      	adds	r3, r7, r4
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	2314      	movs	r3, #20
 8000d60:	001a      	movs	r2, r3
 8000d62:	2100      	movs	r1, #0
 8000d64:	f004 fcbc 	bl	80056e0 <memset>
  if(htim->Instance==TIM1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a29      	ldr	r2, [pc, #164]	@ (8000e14 <HAL_TIM_MspPostInit+0xc4>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d124      	bne.n	8000dbc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b29      	ldr	r3, [pc, #164]	@ (8000e18 <HAL_TIM_MspPostInit+0xc8>)
 8000d74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d76:	4b28      	ldr	r3, [pc, #160]	@ (8000e18 <HAL_TIM_MspPostInit+0xc8>)
 8000d78:	2101      	movs	r1, #1
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d7e:	4b26      	ldr	r3, [pc, #152]	@ (8000e18 <HAL_TIM_MspPostInit+0xc8>)
 8000d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d82:	2201      	movs	r2, #1
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = step1_Pin;
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	2280      	movs	r2, #128	@ 0x80
 8000d8e:	00d2      	lsls	r2, r2, #3
 8000d90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	0021      	movs	r1, r4
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2202      	movs	r2, #2
 8000d98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2202      	movs	r2, #2
 8000daa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(step1_GPIO_Port, &GPIO_InitStruct);
 8000dac:	187a      	adds	r2, r7, r1
 8000dae:	23a0      	movs	r3, #160	@ 0xa0
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f000 fb23 	bl	8001400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000dba:	e027      	b.n	8000e0c <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a16      	ldr	r2, [pc, #88]	@ (8000e1c <HAL_TIM_MspPostInit+0xcc>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d122      	bne.n	8000e0c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b14      	ldr	r3, [pc, #80]	@ (8000e18 <HAL_TIM_MspPostInit+0xc8>)
 8000dc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dca:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <HAL_TIM_MspPostInit+0xc8>)
 8000dcc:	2101      	movs	r1, #1
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dd2:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <HAL_TIM_MspPostInit+0xc8>)
 8000dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = step2_Pin;
 8000dde:	2114      	movs	r1, #20
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2240      	movs	r2, #64	@ 0x40
 8000de4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2202      	movs	r2, #2
 8000dea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(step2_GPIO_Port, &GPIO_InitStruct);
 8000dfe:	187a      	adds	r2, r7, r1
 8000e00:	23a0      	movs	r3, #160	@ 0xa0
 8000e02:	05db      	lsls	r3, r3, #23
 8000e04:	0011      	movs	r1, r2
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 fafa 	bl	8001400 <HAL_GPIO_Init>
}
 8000e0c:	46c0      	nop			@ (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b00b      	add	sp, #44	@ 0x2c
 8000e12:	bd90      	pop	{r4, r7, pc}
 8000e14:	40012c00 	.word	0x40012c00
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40000400 	.word	0x40000400

08000e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b097      	sub	sp, #92	@ 0x5c
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	2344      	movs	r3, #68	@ 0x44
 8000e2a:	18fb      	adds	r3, r7, r3
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	2314      	movs	r3, #20
 8000e30:	001a      	movs	r2, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	f004 fc54 	bl	80056e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e38:	2410      	movs	r4, #16
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	2334      	movs	r3, #52	@ 0x34
 8000e40:	001a      	movs	r2, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	f004 fc4c 	bl	80056e0 <memset>
  if(huart->Instance==USART1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a26      	ldr	r2, [pc, #152]	@ (8000ee8 <HAL_UART_MspInit+0xc8>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d145      	bne.n	8000ede <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	2201      	movs	r2, #1
 8000e56:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	0018      	movs	r0, r3
 8000e62:	f001 f95f 	bl	8002124 <HAL_RCCEx_PeriphCLKConfig>
 8000e66:	1e03      	subs	r3, r0, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e6a:	f7ff fefd 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <HAL_UART_MspInit+0xcc>)
 8000e70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e72:	4b1e      	ldr	r3, [pc, #120]	@ (8000eec <HAL_UART_MspInit+0xcc>)
 8000e74:	2180      	movs	r1, #128	@ 0x80
 8000e76:	01c9      	lsls	r1, r1, #7
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eec <HAL_UART_MspInit+0xcc>)
 8000e7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e80:	2380      	movs	r3, #128	@ 0x80
 8000e82:	01db      	lsls	r3, r3, #7
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <HAL_UART_MspInit+0xcc>)
 8000e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e8e:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <HAL_UART_MspInit+0xcc>)
 8000e90:	2102      	movs	r1, #2
 8000e92:	430a      	orrs	r2, r1
 8000e94:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e96:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <HAL_UART_MspInit+0xcc>)
 8000e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ea2:	2144      	movs	r1, #68	@ 0x44
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	22c0      	movs	r2, #192	@ 0xc0
 8000ea8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2202      	movs	r2, #2
 8000eae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <HAL_UART_MspInit+0xd0>)
 8000ec6:	0019      	movs	r1, r3
 8000ec8:	0010      	movs	r0, r2
 8000eca:	f000 fa99 	bl	8001400 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	201b      	movs	r0, #27
 8000ed4:	f000 f996 	bl	8001204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ed8:	201b      	movs	r0, #27
 8000eda:	f000 f9a8 	bl	800122e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b017      	add	sp, #92	@ 0x5c
 8000ee4:	bd90      	pop	{r4, r7, pc}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	40013800 	.word	0x40013800
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	50000400 	.word	0x50000400

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef8:	46c0      	nop			@ (mov r8, r8)
 8000efa:	e7fd      	b.n	8000ef8 <NMI_Handler+0x4>

08000efc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f00:	46c0      	nop			@ (mov r8, r8)
 8000f02:	e7fd      	b.n	8000f00 <HardFault_Handler+0x4>

08000f04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f08:	46c0      	nop			@ (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1c:	f000 f8aa 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f20:	46c0      	nop			@ (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f2c:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <USART1_IRQHandler+0x14>)
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f002 fbf8 	bl	8003724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	200000c0 	.word	0x200000c0

08000f40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f44:	46c0      	nop			@ (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f4c:	480d      	ldr	r0, [pc, #52]	@ (8000f84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f4e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f50:	f7ff fff6 	bl	8000f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	@ (8000f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	@ (8000f90 <LoopForever+0xe>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f98 <LoopForever+0x16>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f7a:	f004 fbb9 	bl	80056f0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f7e:	f7ff fb4d 	bl	800061c <main>

08000f82 <LoopForever>:

LoopForever:
  b LoopForever
 8000f82:	e7fe      	b.n	8000f82 <LoopForever>
  ldr   r0, =_estack
 8000f84:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f90:	0800583c 	.word	0x0800583c
  ldr r2, =_sbss
 8000f94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f98:	2000015c 	.word	0x2000015c

08000f9c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC1_COMP_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <HAL_Init+0x3c>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <HAL_Init+0x3c>)
 8000fb2:	2180      	movs	r1, #128	@ 0x80
 8000fb4:	0049      	lsls	r1, r1, #1
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fba:	2003      	movs	r0, #3
 8000fbc:	f000 f810 	bl	8000fe0 <HAL_InitTick>
 8000fc0:	1e03      	subs	r3, r0, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000fc4:	1dfb      	adds	r3, r7, #7
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e001      	b.n	8000fd0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f7ff fe52 	bl	8000c74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	781b      	ldrb	r3, [r3, #0]
}
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b002      	add	sp, #8
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe8:	230f      	movs	r3, #15
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8001068 <HAL_InitTick+0x88>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d02b      	beq.n	8001050 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800106c <HAL_InitTick+0x8c>)
 8000ffa:	681c      	ldr	r4, [r3, #0]
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8001068 <HAL_InitTick+0x88>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	0019      	movs	r1, r3
 8001002:	23fa      	movs	r3, #250	@ 0xfa
 8001004:	0098      	lsls	r0, r3, #2
 8001006:	f7ff f87d 	bl	8000104 <__udivsi3>
 800100a:	0003      	movs	r3, r0
 800100c:	0019      	movs	r1, r3
 800100e:	0020      	movs	r0, r4
 8001010:	f7ff f878 	bl	8000104 <__udivsi3>
 8001014:	0003      	movs	r3, r0
 8001016:	0018      	movs	r0, r3
 8001018:	f000 f919 	bl	800124e <HAL_SYSTICK_Config>
 800101c:	1e03      	subs	r3, r0, #0
 800101e:	d112      	bne.n	8001046 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b03      	cmp	r3, #3
 8001024:	d80a      	bhi.n	800103c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	2301      	movs	r3, #1
 800102a:	425b      	negs	r3, r3
 800102c:	2200      	movs	r2, #0
 800102e:	0018      	movs	r0, r3
 8001030:	f000 f8e8 	bl	8001204 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001034:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <HAL_InitTick+0x90>)
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	e00d      	b.n	8001058 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800103c:	230f      	movs	r3, #15
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	2201      	movs	r2, #1
 8001042:	701a      	strb	r2, [r3, #0]
 8001044:	e008      	b.n	8001058 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001046:	230f      	movs	r3, #15
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
 800104e:	e003      	b.n	8001058 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001050:	230f      	movs	r3, #15
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001058:	230f      	movs	r3, #15
 800105a:	18fb      	adds	r3, r7, r3
 800105c:	781b      	ldrb	r3, [r3, #0]
}
 800105e:	0018      	movs	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	b005      	add	sp, #20
 8001064:	bd90      	pop	{r4, r7, pc}
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	20000008 	.word	0x20000008
 800106c:	20000000 	.word	0x20000000
 8001070:	20000004 	.word	0x20000004

08001074 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001078:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <HAL_IncTick+0x1c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	001a      	movs	r2, r3
 800107e:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <HAL_IncTick+0x20>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	18d2      	adds	r2, r2, r3
 8001084:	4b03      	ldr	r3, [pc, #12]	@ (8001094 <HAL_IncTick+0x20>)
 8001086:	601a      	str	r2, [r3, #0]
}
 8001088:	46c0      	nop			@ (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	46c0      	nop			@ (mov r8, r8)
 8001090:	20000008 	.word	0x20000008
 8001094:	20000158 	.word	0x20000158

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b02      	ldr	r3, [pc, #8]	@ (80010a8 <HAL_GetTick+0x10>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	0018      	movs	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	20000158 	.word	0x20000158

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	0002      	movs	r2, r0
 80010b4:	1dfb      	adds	r3, r7, #7
 80010b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	1dfb      	adds	r3, r7, #7
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80010be:	d809      	bhi.n	80010d4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	001a      	movs	r2, r3
 80010c6:	231f      	movs	r3, #31
 80010c8:	401a      	ands	r2, r3
 80010ca:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <__NVIC_EnableIRQ+0x30>)
 80010cc:	2101      	movs	r1, #1
 80010ce:	4091      	lsls	r1, r2
 80010d0:	000a      	movs	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80010d4:	46c0      	nop			@ (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b002      	add	sp, #8
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	0002      	movs	r2, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	1dfb      	adds	r3, r7, #7
 80010ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80010f4:	d828      	bhi.n	8001148 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010f6:	4a2f      	ldr	r2, [pc, #188]	@ (80011b4 <__NVIC_SetPriority+0xd4>)
 80010f8:	1dfb      	adds	r3, r7, #7
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b25b      	sxtb	r3, r3
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	33c0      	adds	r3, #192	@ 0xc0
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	589b      	ldr	r3, [r3, r2]
 8001106:	1dfa      	adds	r2, r7, #7
 8001108:	7812      	ldrb	r2, [r2, #0]
 800110a:	0011      	movs	r1, r2
 800110c:	2203      	movs	r2, #3
 800110e:	400a      	ands	r2, r1
 8001110:	00d2      	lsls	r2, r2, #3
 8001112:	21ff      	movs	r1, #255	@ 0xff
 8001114:	4091      	lsls	r1, r2
 8001116:	000a      	movs	r2, r1
 8001118:	43d2      	mvns	r2, r2
 800111a:	401a      	ands	r2, r3
 800111c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	019b      	lsls	r3, r3, #6
 8001122:	22ff      	movs	r2, #255	@ 0xff
 8001124:	401a      	ands	r2, r3
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	0018      	movs	r0, r3
 800112c:	2303      	movs	r3, #3
 800112e:	4003      	ands	r3, r0
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001134:	481f      	ldr	r0, [pc, #124]	@ (80011b4 <__NVIC_SetPriority+0xd4>)
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b25b      	sxtb	r3, r3
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	430a      	orrs	r2, r1
 8001140:	33c0      	adds	r3, #192	@ 0xc0
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001146:	e031      	b.n	80011ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001148:	4a1b      	ldr	r2, [pc, #108]	@ (80011b8 <__NVIC_SetPriority+0xd8>)
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	0019      	movs	r1, r3
 8001150:	230f      	movs	r3, #15
 8001152:	400b      	ands	r3, r1
 8001154:	3b08      	subs	r3, #8
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3306      	adds	r3, #6
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	18d3      	adds	r3, r2, r3
 800115e:	3304      	adds	r3, #4
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	1dfa      	adds	r2, r7, #7
 8001164:	7812      	ldrb	r2, [r2, #0]
 8001166:	0011      	movs	r1, r2
 8001168:	2203      	movs	r2, #3
 800116a:	400a      	ands	r2, r1
 800116c:	00d2      	lsls	r2, r2, #3
 800116e:	21ff      	movs	r1, #255	@ 0xff
 8001170:	4091      	lsls	r1, r2
 8001172:	000a      	movs	r2, r1
 8001174:	43d2      	mvns	r2, r2
 8001176:	401a      	ands	r2, r3
 8001178:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	019b      	lsls	r3, r3, #6
 800117e:	22ff      	movs	r2, #255	@ 0xff
 8001180:	401a      	ands	r2, r3
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	0018      	movs	r0, r3
 8001188:	2303      	movs	r3, #3
 800118a:	4003      	ands	r3, r0
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001190:	4809      	ldr	r0, [pc, #36]	@ (80011b8 <__NVIC_SetPriority+0xd8>)
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	001c      	movs	r4, r3
 8001198:	230f      	movs	r3, #15
 800119a:	4023      	ands	r3, r4
 800119c:	3b08      	subs	r3, #8
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	430a      	orrs	r2, r1
 80011a2:	3306      	adds	r3, #6
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	18c3      	adds	r3, r0, r3
 80011a8:	3304      	adds	r3, #4
 80011aa:	601a      	str	r2, [r3, #0]
}
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b003      	add	sp, #12
 80011b2:	bd90      	pop	{r4, r7, pc}
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	1e5a      	subs	r2, r3, #1
 80011c8:	2380      	movs	r3, #128	@ 0x80
 80011ca:	045b      	lsls	r3, r3, #17
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d301      	bcc.n	80011d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d0:	2301      	movs	r3, #1
 80011d2:	e010      	b.n	80011f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001200 <SysTick_Config+0x44>)
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	3a01      	subs	r2, #1
 80011da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011dc:	2301      	movs	r3, #1
 80011de:	425b      	negs	r3, r3
 80011e0:	2103      	movs	r1, #3
 80011e2:	0018      	movs	r0, r3
 80011e4:	f7ff ff7c 	bl	80010e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <SysTick_Config+0x44>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ee:	4b04      	ldr	r3, [pc, #16]	@ (8001200 <SysTick_Config+0x44>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	0018      	movs	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b002      	add	sp, #8
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			@ (mov r8, r8)
 8001200:	e000e010 	.word	0xe000e010

08001204 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	210f      	movs	r1, #15
 8001210:	187b      	adds	r3, r7, r1
 8001212:	1c02      	adds	r2, r0, #0
 8001214:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	187b      	adds	r3, r7, r1
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b25b      	sxtb	r3, r3
 800121e:	0011      	movs	r1, r2
 8001220:	0018      	movs	r0, r3
 8001222:	f7ff ff5d 	bl	80010e0 <__NVIC_SetPriority>
}
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	46bd      	mov	sp, r7
 800122a:	b004      	add	sp, #16
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	0002      	movs	r2, r0
 8001236:	1dfb      	adds	r3, r7, #7
 8001238:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b25b      	sxtb	r3, r3
 8001240:	0018      	movs	r0, r3
 8001242:	f7ff ff33 	bl	80010ac <__NVIC_EnableIRQ>
}
 8001246:	46c0      	nop			@ (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b002      	add	sp, #8
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	0018      	movs	r0, r3
 800125a:	f7ff ffaf 	bl	80011bc <SysTick_Config>
 800125e:	0003      	movs	r3, r0
}
 8001260:	0018      	movs	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	b002      	add	sp, #8
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e050      	b.n	800131c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2225      	movs	r2, #37	@ 0x25
 800127e:	5c9b      	ldrb	r3, [r3, r2]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d008      	beq.n	8001298 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2204      	movs	r2, #4
 800128a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2224      	movs	r2, #36	@ 0x24
 8001290:	2100      	movs	r1, #0
 8001292:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e041      	b.n	800131c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	210e      	movs	r1, #14
 80012a4:	438a      	bics	r2, r1
 80012a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	491c      	ldr	r1, [pc, #112]	@ (8001324 <HAL_DMA_Abort+0xbc>)
 80012b4:	400a      	ands	r2, r1
 80012b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2101      	movs	r1, #1
 80012c4:	438a      	bics	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80012c8:	4b17      	ldr	r3, [pc, #92]	@ (8001328 <HAL_DMA_Abort+0xc0>)
 80012ca:	6859      	ldr	r1, [r3, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	221c      	movs	r2, #28
 80012d2:	4013      	ands	r3, r2
 80012d4:	2201      	movs	r2, #1
 80012d6:	409a      	lsls	r2, r3
 80012d8:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <HAL_DMA_Abort+0xc0>)
 80012da:	430a      	orrs	r2, r1
 80012dc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80012e6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00c      	beq.n	800130a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012fa:	490a      	ldr	r1, [pc, #40]	@ (8001324 <HAL_DMA_Abort+0xbc>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001308:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2225      	movs	r2, #37	@ 0x25
 800130e:	2101      	movs	r1, #1
 8001310:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2224      	movs	r2, #36	@ 0x24
 8001316:	2100      	movs	r1, #0
 8001318:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	b002      	add	sp, #8
 8001322:	bd80      	pop	{r7, pc}
 8001324:	fffffeff 	.word	0xfffffeff
 8001328:	40020000 	.word	0x40020000

0800132c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001334:	210f      	movs	r1, #15
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2225      	movs	r2, #37	@ 0x25
 8001340:	5c9b      	ldrb	r3, [r3, r2]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d006      	beq.n	8001356 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2204      	movs	r2, #4
 800134c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800134e:	187b      	adds	r3, r7, r1
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	e049      	b.n	80013ea <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	210e      	movs	r1, #14
 8001362:	438a      	bics	r2, r1
 8001364:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2101      	movs	r1, #1
 8001372:	438a      	bics	r2, r1
 8001374:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001380:	491d      	ldr	r1, [pc, #116]	@ (80013f8 <HAL_DMA_Abort_IT+0xcc>)
 8001382:	400a      	ands	r2, r1
 8001384:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001386:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <HAL_DMA_Abort_IT+0xd0>)
 8001388:	6859      	ldr	r1, [r3, #4]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138e:	221c      	movs	r2, #28
 8001390:	4013      	ands	r3, r2
 8001392:	2201      	movs	r2, #1
 8001394:	409a      	lsls	r2, r3
 8001396:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <HAL_DMA_Abort_IT+0xd0>)
 8001398:	430a      	orrs	r2, r1
 800139a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80013a4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00c      	beq.n	80013c8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013b8:	490f      	ldr	r1, [pc, #60]	@ (80013f8 <HAL_DMA_Abort_IT+0xcc>)
 80013ba:	400a      	ands	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80013c6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2225      	movs	r2, #37	@ 0x25
 80013cc:	2101      	movs	r1, #1
 80013ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2224      	movs	r2, #36	@ 0x24
 80013d4:	2100      	movs	r1, #0
 80013d6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	0010      	movs	r0, r2
 80013e8:	4798      	blx	r3
    }
  }
  return status;
 80013ea:	230f      	movs	r3, #15
 80013ec:	18fb      	adds	r3, r7, r3
 80013ee:	781b      	ldrb	r3, [r3, #0]
}
 80013f0:	0018      	movs	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b004      	add	sp, #16
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	fffffeff 	.word	0xfffffeff
 80013fc:	40020000 	.word	0x40020000

08001400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140e:	e147      	b.n	80016a0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2101      	movs	r1, #1
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	4091      	lsls	r1, r2
 800141a:	000a      	movs	r2, r1
 800141c:	4013      	ands	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d100      	bne.n	8001428 <HAL_GPIO_Init+0x28>
 8001426:	e138      	b.n	800169a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2203      	movs	r2, #3
 800142e:	4013      	ands	r3, r2
 8001430:	2b01      	cmp	r3, #1
 8001432:	d005      	beq.n	8001440 <HAL_GPIO_Init+0x40>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2203      	movs	r2, #3
 800143a:	4013      	ands	r3, r2
 800143c:	2b02      	cmp	r3, #2
 800143e:	d130      	bne.n	80014a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	2203      	movs	r2, #3
 800144c:	409a      	lsls	r2, r3
 800144e:	0013      	movs	r3, r2
 8001450:	43da      	mvns	r2, r3
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	409a      	lsls	r2, r3
 8001462:	0013      	movs	r3, r2
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001476:	2201      	movs	r2, #1
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
 800147c:	0013      	movs	r3, r2
 800147e:	43da      	mvns	r2, r3
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	2201      	movs	r2, #1
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
 8001494:	0013      	movs	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2203      	movs	r2, #3
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d017      	beq.n	80014de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	2203      	movs	r2, #3
 80014ba:	409a      	lsls	r2, r3
 80014bc:	0013      	movs	r3, r2
 80014be:	43da      	mvns	r2, r3
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	409a      	lsls	r2, r3
 80014d0:	0013      	movs	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2203      	movs	r2, #3
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d123      	bne.n	8001532 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	08da      	lsrs	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3208      	adds	r2, #8
 80014f2:	0092      	lsls	r2, r2, #2
 80014f4:	58d3      	ldr	r3, [r2, r3]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	2207      	movs	r2, #7
 80014fc:	4013      	ands	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	220f      	movs	r2, #15
 8001502:	409a      	lsls	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	43da      	mvns	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	691a      	ldr	r2, [r3, #16]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2107      	movs	r1, #7
 8001516:	400b      	ands	r3, r1
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	409a      	lsls	r2, r3
 800151c:	0013      	movs	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	08da      	lsrs	r2, r3, #3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3208      	adds	r2, #8
 800152c:	0092      	lsls	r2, r2, #2
 800152e:	6939      	ldr	r1, [r7, #16]
 8001530:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	2203      	movs	r2, #3
 800153e:	409a      	lsls	r2, r3
 8001540:	0013      	movs	r3, r2
 8001542:	43da      	mvns	r2, r3
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4013      	ands	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2203      	movs	r2, #3
 8001550:	401a      	ands	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	409a      	lsls	r2, r3
 8001558:	0013      	movs	r3, r2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	23c0      	movs	r3, #192	@ 0xc0
 800156c:	029b      	lsls	r3, r3, #10
 800156e:	4013      	ands	r3, r2
 8001570:	d100      	bne.n	8001574 <HAL_GPIO_Init+0x174>
 8001572:	e092      	b.n	800169a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001574:	4a50      	ldr	r2, [pc, #320]	@ (80016b8 <HAL_GPIO_Init+0x2b8>)
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	089b      	lsrs	r3, r3, #2
 800157a:	3318      	adds	r3, #24
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	589b      	ldr	r3, [r3, r2]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	2203      	movs	r2, #3
 8001586:	4013      	ands	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	220f      	movs	r2, #15
 800158c:	409a      	lsls	r2, r3
 800158e:	0013      	movs	r3, r2
 8001590:	43da      	mvns	r2, r3
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	23a0      	movs	r3, #160	@ 0xa0
 800159c:	05db      	lsls	r3, r3, #23
 800159e:	429a      	cmp	r2, r3
 80015a0:	d013      	beq.n	80015ca <HAL_GPIO_Init+0x1ca>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a45      	ldr	r2, [pc, #276]	@ (80016bc <HAL_GPIO_Init+0x2bc>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d00d      	beq.n	80015c6 <HAL_GPIO_Init+0x1c6>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a44      	ldr	r2, [pc, #272]	@ (80016c0 <HAL_GPIO_Init+0x2c0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d007      	beq.n	80015c2 <HAL_GPIO_Init+0x1c2>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a43      	ldr	r2, [pc, #268]	@ (80016c4 <HAL_GPIO_Init+0x2c4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d101      	bne.n	80015be <HAL_GPIO_Init+0x1be>
 80015ba:	2303      	movs	r3, #3
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x1cc>
 80015be:	2305      	movs	r3, #5
 80015c0:	e004      	b.n	80015cc <HAL_GPIO_Init+0x1cc>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e002      	b.n	80015cc <HAL_GPIO_Init+0x1cc>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <HAL_GPIO_Init+0x1cc>
 80015ca:	2300      	movs	r3, #0
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	2103      	movs	r1, #3
 80015d0:	400a      	ands	r2, r1
 80015d2:	00d2      	lsls	r2, r2, #3
 80015d4:	4093      	lsls	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80015dc:	4936      	ldr	r1, [pc, #216]	@ (80016b8 <HAL_GPIO_Init+0x2b8>)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3318      	adds	r3, #24
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015ea:	4b33      	ldr	r3, [pc, #204]	@ (80016b8 <HAL_GPIO_Init+0x2b8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	43da      	mvns	r2, r3
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	2380      	movs	r3, #128	@ 0x80
 8001600:	035b      	lsls	r3, r3, #13
 8001602:	4013      	ands	r3, r2
 8001604:	d003      	beq.n	800160e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800160e:	4b2a      	ldr	r3, [pc, #168]	@ (80016b8 <HAL_GPIO_Init+0x2b8>)
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001614:	4b28      	ldr	r3, [pc, #160]	@ (80016b8 <HAL_GPIO_Init+0x2b8>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	43da      	mvns	r2, r3
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	039b      	lsls	r3, r3, #14
 800162c:	4013      	ands	r3, r2
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001638:	4b1f      	ldr	r3, [pc, #124]	@ (80016b8 <HAL_GPIO_Init+0x2b8>)
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800163e:	4a1e      	ldr	r2, [pc, #120]	@ (80016b8 <HAL_GPIO_Init+0x2b8>)
 8001640:	2384      	movs	r3, #132	@ 0x84
 8001642:	58d3      	ldr	r3, [r2, r3]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43da      	mvns	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	2380      	movs	r3, #128	@ 0x80
 8001656:	029b      	lsls	r3, r3, #10
 8001658:	4013      	ands	r3, r2
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001664:	4914      	ldr	r1, [pc, #80]	@ (80016b8 <HAL_GPIO_Init+0x2b8>)
 8001666:	2284      	movs	r2, #132	@ 0x84
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800166c:	4a12      	ldr	r2, [pc, #72]	@ (80016b8 <HAL_GPIO_Init+0x2b8>)
 800166e:	2380      	movs	r3, #128	@ 0x80
 8001670:	58d3      	ldr	r3, [r2, r3]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43da      	mvns	r2, r3
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	2380      	movs	r3, #128	@ 0x80
 8001684:	025b      	lsls	r3, r3, #9
 8001686:	4013      	ands	r3, r2
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001692:	4909      	ldr	r1, [pc, #36]	@ (80016b8 <HAL_GPIO_Init+0x2b8>)
 8001694:	2280      	movs	r2, #128	@ 0x80
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	40da      	lsrs	r2, r3
 80016a8:	1e13      	subs	r3, r2, #0
 80016aa:	d000      	beq.n	80016ae <HAL_GPIO_Init+0x2ae>
 80016ac:	e6b0      	b.n	8001410 <HAL_GPIO_Init+0x10>
  }
}
 80016ae:	46c0      	nop			@ (mov r8, r8)
 80016b0:	46c0      	nop			@ (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b006      	add	sp, #24
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40021800 	.word	0x40021800
 80016bc:	50000400 	.word	0x50000400
 80016c0:	50000800 	.word	0x50000800
 80016c4:	50000c00 	.word	0x50000c00

080016c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	0008      	movs	r0, r1
 80016d2:	0011      	movs	r1, r2
 80016d4:	1cbb      	adds	r3, r7, #2
 80016d6:	1c02      	adds	r2, r0, #0
 80016d8:	801a      	strh	r2, [r3, #0]
 80016da:	1c7b      	adds	r3, r7, #1
 80016dc:	1c0a      	adds	r2, r1, #0
 80016de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016e0:	1c7b      	adds	r3, r7, #1
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d004      	beq.n	80016f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016e8:	1cbb      	adds	r3, r7, #2
 80016ea:	881a      	ldrh	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016f0:	e003      	b.n	80016fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016f2:	1cbb      	adds	r3, r7, #2
 80016f4:	881a      	ldrh	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016fa:	46c0      	nop			@ (mov r8, r8)
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b002      	add	sp, #8
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800170c:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a19      	ldr	r2, [pc, #100]	@ (8001778 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001712:	4013      	ands	r3, r2
 8001714:	0019      	movs	r1, r3
 8001716:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	2380      	movs	r3, #128	@ 0x80
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	429a      	cmp	r2, r3
 8001726:	d11f      	bne.n	8001768 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	0013      	movs	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	189b      	adds	r3, r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4912      	ldr	r1, [pc, #72]	@ (8001780 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001736:	0018      	movs	r0, r3
 8001738:	f7fe fce4 	bl	8000104 <__udivsi3>
 800173c:	0003      	movs	r3, r0
 800173e:	3301      	adds	r3, #1
 8001740:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001742:	e008      	b.n	8001756 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3b01      	subs	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	e001      	b.n	8001756 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e009      	b.n	800176a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001756:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001758:	695a      	ldr	r2, [r3, #20]
 800175a:	2380      	movs	r3, #128	@ 0x80
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	401a      	ands	r2, r3
 8001760:	2380      	movs	r3, #128	@ 0x80
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	429a      	cmp	r2, r3
 8001766:	d0ed      	beq.n	8001744 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	0018      	movs	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	b004      	add	sp, #16
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	40007000 	.word	0x40007000
 8001778:	fffff9ff 	.word	0xfffff9ff
 800177c:	20000000 	.word	0x20000000
 8001780:	000f4240 	.word	0x000f4240

08001784 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001788:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <LL_RCC_GetAPB1Prescaler+0x14>)
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	23e0      	movs	r3, #224	@ 0xe0
 800178e:	01db      	lsls	r3, r3, #7
 8001790:	4013      	ands	r3, r2
}
 8001792:	0018      	movs	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e2fe      	b.n	8001dac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2201      	movs	r2, #1
 80017b4:	4013      	ands	r3, r2
 80017b6:	d100      	bne.n	80017ba <HAL_RCC_OscConfig+0x1e>
 80017b8:	e07c      	b.n	80018b4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ba:	4bc3      	ldr	r3, [pc, #780]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2238      	movs	r2, #56	@ 0x38
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017c4:	4bc0      	ldr	r3, [pc, #768]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2203      	movs	r2, #3
 80017ca:	4013      	ands	r3, r2
 80017cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b10      	cmp	r3, #16
 80017d2:	d102      	bne.n	80017da <HAL_RCC_OscConfig+0x3e>
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d002      	beq.n	80017e0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d10b      	bne.n	80017f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	4bb9      	ldr	r3, [pc, #740]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2380      	movs	r3, #128	@ 0x80
 80017e6:	029b      	lsls	r3, r3, #10
 80017e8:	4013      	ands	r3, r2
 80017ea:	d062      	beq.n	80018b2 <HAL_RCC_OscConfig+0x116>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d15e      	bne.n	80018b2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e2d9      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	2380      	movs	r3, #128	@ 0x80
 80017fe:	025b      	lsls	r3, r3, #9
 8001800:	429a      	cmp	r2, r3
 8001802:	d107      	bne.n	8001814 <HAL_RCC_OscConfig+0x78>
 8001804:	4bb0      	ldr	r3, [pc, #704]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4baf      	ldr	r3, [pc, #700]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 800180a:	2180      	movs	r1, #128	@ 0x80
 800180c:	0249      	lsls	r1, r1, #9
 800180e:	430a      	orrs	r2, r1
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	e020      	b.n	8001856 <HAL_RCC_OscConfig+0xba>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	23a0      	movs	r3, #160	@ 0xa0
 800181a:	02db      	lsls	r3, r3, #11
 800181c:	429a      	cmp	r2, r3
 800181e:	d10e      	bne.n	800183e <HAL_RCC_OscConfig+0xa2>
 8001820:	4ba9      	ldr	r3, [pc, #676]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4ba8      	ldr	r3, [pc, #672]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001826:	2180      	movs	r1, #128	@ 0x80
 8001828:	02c9      	lsls	r1, r1, #11
 800182a:	430a      	orrs	r2, r1
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	4ba6      	ldr	r3, [pc, #664]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4ba5      	ldr	r3, [pc, #660]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001834:	2180      	movs	r1, #128	@ 0x80
 8001836:	0249      	lsls	r1, r1, #9
 8001838:	430a      	orrs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	e00b      	b.n	8001856 <HAL_RCC_OscConfig+0xba>
 800183e:	4ba2      	ldr	r3, [pc, #648]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4ba1      	ldr	r3, [pc, #644]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001844:	49a1      	ldr	r1, [pc, #644]	@ (8001acc <HAL_RCC_OscConfig+0x330>)
 8001846:	400a      	ands	r2, r1
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	4b9f      	ldr	r3, [pc, #636]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b9e      	ldr	r3, [pc, #632]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001850:	499f      	ldr	r1, [pc, #636]	@ (8001ad0 <HAL_RCC_OscConfig+0x334>)
 8001852:	400a      	ands	r2, r1
 8001854:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d014      	beq.n	8001888 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185e:	f7ff fc1b 	bl	8001098 <HAL_GetTick>
 8001862:	0003      	movs	r3, r0
 8001864:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff fc16 	bl	8001098 <HAL_GetTick>
 800186c:	0002      	movs	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	@ 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e298      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187a:	4b93      	ldr	r3, [pc, #588]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	2380      	movs	r3, #128	@ 0x80
 8001880:	029b      	lsls	r3, r3, #10
 8001882:	4013      	ands	r3, r2
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0xcc>
 8001886:	e015      	b.n	80018b4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff fc06 	bl	8001098 <HAL_GetTick>
 800188c:	0003      	movs	r3, r0
 800188e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001892:	f7ff fc01 	bl	8001098 <HAL_GetTick>
 8001896:	0002      	movs	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b64      	cmp	r3, #100	@ 0x64
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e283      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a4:	4b88      	ldr	r3, [pc, #544]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2380      	movs	r3, #128	@ 0x80
 80018aa:	029b      	lsls	r3, r3, #10
 80018ac:	4013      	ands	r3, r2
 80018ae:	d1f0      	bne.n	8001892 <HAL_RCC_OscConfig+0xf6>
 80018b0:	e000      	b.n	80018b4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2202      	movs	r2, #2
 80018ba:	4013      	ands	r3, r2
 80018bc:	d100      	bne.n	80018c0 <HAL_RCC_OscConfig+0x124>
 80018be:	e099      	b.n	80019f4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c0:	4b81      	ldr	r3, [pc, #516]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2238      	movs	r2, #56	@ 0x38
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ca:	4b7f      	ldr	r3, [pc, #508]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2203      	movs	r2, #3
 80018d0:	4013      	ands	r3, r2
 80018d2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	2b10      	cmp	r3, #16
 80018d8:	d102      	bne.n	80018e0 <HAL_RCC_OscConfig+0x144>
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d002      	beq.n	80018e6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d135      	bne.n	8001952 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e6:	4b78      	ldr	r3, [pc, #480]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	2380      	movs	r3, #128	@ 0x80
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4013      	ands	r3, r2
 80018f0:	d005      	beq.n	80018fe <HAL_RCC_OscConfig+0x162>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e256      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fe:	4b72      	ldr	r3, [pc, #456]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4a74      	ldr	r2, [pc, #464]	@ (8001ad4 <HAL_RCC_OscConfig+0x338>)
 8001904:	4013      	ands	r3, r2
 8001906:	0019      	movs	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	021a      	lsls	r2, r3, #8
 800190e:	4b6e      	ldr	r3, [pc, #440]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001910:	430a      	orrs	r2, r1
 8001912:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d112      	bne.n	8001940 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800191a:	4b6b      	ldr	r3, [pc, #428]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ad8 <HAL_RCC_OscConfig+0x33c>)
 8001920:	4013      	ands	r3, r2
 8001922:	0019      	movs	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	4b67      	ldr	r3, [pc, #412]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 800192a:	430a      	orrs	r2, r1
 800192c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800192e:	4b66      	ldr	r3, [pc, #408]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	0adb      	lsrs	r3, r3, #11
 8001934:	2207      	movs	r2, #7
 8001936:	4013      	ands	r3, r2
 8001938:	4a68      	ldr	r2, [pc, #416]	@ (8001adc <HAL_RCC_OscConfig+0x340>)
 800193a:	40da      	lsrs	r2, r3
 800193c:	4b68      	ldr	r3, [pc, #416]	@ (8001ae0 <HAL_RCC_OscConfig+0x344>)
 800193e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001940:	4b68      	ldr	r3, [pc, #416]	@ (8001ae4 <HAL_RCC_OscConfig+0x348>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	0018      	movs	r0, r3
 8001946:	f7ff fb4b 	bl	8000fe0 <HAL_InitTick>
 800194a:	1e03      	subs	r3, r0, #0
 800194c:	d051      	beq.n	80019f2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e22c      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d030      	beq.n	80019bc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800195a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a5e      	ldr	r2, [pc, #376]	@ (8001ad8 <HAL_RCC_OscConfig+0x33c>)
 8001960:	4013      	ands	r3, r2
 8001962:	0019      	movs	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	4b57      	ldr	r3, [pc, #348]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 800196a:	430a      	orrs	r2, r1
 800196c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800196e:	4b56      	ldr	r3, [pc, #344]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	4b55      	ldr	r3, [pc, #340]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001974:	2180      	movs	r1, #128	@ 0x80
 8001976:	0049      	lsls	r1, r1, #1
 8001978:	430a      	orrs	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff fb8c 	bl	8001098 <HAL_GetTick>
 8001980:	0003      	movs	r3, r0
 8001982:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001986:	f7ff fb87 	bl	8001098 <HAL_GetTick>
 800198a:	0002      	movs	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e209      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001998:	4b4b      	ldr	r3, [pc, #300]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	2380      	movs	r3, #128	@ 0x80
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4013      	ands	r3, r2
 80019a2:	d0f0      	beq.n	8001986 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a4:	4b48      	ldr	r3, [pc, #288]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4a4a      	ldr	r2, [pc, #296]	@ (8001ad4 <HAL_RCC_OscConfig+0x338>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	021a      	lsls	r2, r3, #8
 80019b4:	4b44      	ldr	r3, [pc, #272]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 80019b6:	430a      	orrs	r2, r1
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	e01b      	b.n	80019f4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80019bc:	4b42      	ldr	r3, [pc, #264]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b41      	ldr	r3, [pc, #260]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 80019c2:	4949      	ldr	r1, [pc, #292]	@ (8001ae8 <HAL_RCC_OscConfig+0x34c>)
 80019c4:	400a      	ands	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff fb66 	bl	8001098 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d2:	f7ff fb61 	bl	8001098 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e1e3      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019e4:	4b38      	ldr	r3, [pc, #224]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2380      	movs	r3, #128	@ 0x80
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	4013      	ands	r3, r2
 80019ee:	d1f0      	bne.n	80019d2 <HAL_RCC_OscConfig+0x236>
 80019f0:	e000      	b.n	80019f4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2208      	movs	r2, #8
 80019fa:	4013      	ands	r3, r2
 80019fc:	d047      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019fe:	4b32      	ldr	r3, [pc, #200]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2238      	movs	r2, #56	@ 0x38
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b18      	cmp	r3, #24
 8001a08:	d10a      	bne.n	8001a20 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0e:	2202      	movs	r2, #2
 8001a10:	4013      	ands	r3, r2
 8001a12:	d03c      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2f2>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d138      	bne.n	8001a8e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e1c5      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d019      	beq.n	8001a5c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a28:	4b27      	ldr	r3, [pc, #156]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a2c:	4b26      	ldr	r3, [pc, #152]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001a2e:	2101      	movs	r1, #1
 8001a30:	430a      	orrs	r2, r1
 8001a32:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff fb30 	bl	8001098 <HAL_GetTick>
 8001a38:	0003      	movs	r3, r0
 8001a3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fb2b 	bl	8001098 <HAL_GetTick>
 8001a42:	0002      	movs	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e1ad      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a50:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a54:	2202      	movs	r2, #2
 8001a56:	4013      	ands	r3, r2
 8001a58:	d0f1      	beq.n	8001a3e <HAL_RCC_OscConfig+0x2a2>
 8001a5a:	e018      	b.n	8001a8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a60:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001a62:	2101      	movs	r1, #1
 8001a64:	438a      	bics	r2, r1
 8001a66:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a68:	f7ff fb16 	bl	8001098 <HAL_GetTick>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a72:	f7ff fb11 	bl	8001098 <HAL_GetTick>
 8001a76:	0002      	movs	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e193      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a84:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a88:	2202      	movs	r2, #2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d1f1      	bne.n	8001a72 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2204      	movs	r2, #4
 8001a94:	4013      	ands	r3, r2
 8001a96:	d100      	bne.n	8001a9a <HAL_RCC_OscConfig+0x2fe>
 8001a98:	e0c6      	b.n	8001c28 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9a:	231f      	movs	r3, #31
 8001a9c:	18fb      	adds	r3, r7, r3
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2238      	movs	r2, #56	@ 0x38
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	2b20      	cmp	r3, #32
 8001aac:	d11e      	bne.n	8001aec <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_RCC_OscConfig+0x32c>)
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d100      	bne.n	8001aba <HAL_RCC_OscConfig+0x31e>
 8001ab8:	e0b6      	b.n	8001c28 <HAL_RCC_OscConfig+0x48c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d000      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x328>
 8001ac2:	e0b1      	b.n	8001c28 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e171      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	fffeffff 	.word	0xfffeffff
 8001ad0:	fffbffff 	.word	0xfffbffff
 8001ad4:	ffff80ff 	.word	0xffff80ff
 8001ad8:	ffffc7ff 	.word	0xffffc7ff
 8001adc:	00f42400 	.word	0x00f42400
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	20000004 	.word	0x20000004
 8001ae8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001aec:	4bb1      	ldr	r3, [pc, #708]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001aee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	055b      	lsls	r3, r3, #21
 8001af4:	4013      	ands	r3, r2
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_OscConfig+0x360>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x362>
 8001afc:	2300      	movs	r3, #0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d011      	beq.n	8001b26 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	4bac      	ldr	r3, [pc, #688]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001b04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b06:	4bab      	ldr	r3, [pc, #684]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001b08:	2180      	movs	r1, #128	@ 0x80
 8001b0a:	0549      	lsls	r1, r1, #21
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b10:	4ba8      	ldr	r3, [pc, #672]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001b12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b14:	2380      	movs	r3, #128	@ 0x80
 8001b16:	055b      	lsls	r3, r3, #21
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b1e:	231f      	movs	r3, #31
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b26:	4ba4      	ldr	r3, [pc, #656]	@ (8001db8 <HAL_RCC_OscConfig+0x61c>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	2380      	movs	r3, #128	@ 0x80
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d11a      	bne.n	8001b68 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b32:	4ba1      	ldr	r3, [pc, #644]	@ (8001db8 <HAL_RCC_OscConfig+0x61c>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4ba0      	ldr	r3, [pc, #640]	@ (8001db8 <HAL_RCC_OscConfig+0x61c>)
 8001b38:	2180      	movs	r1, #128	@ 0x80
 8001b3a:	0049      	lsls	r1, r1, #1
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b40:	f7ff faaa 	bl	8001098 <HAL_GetTick>
 8001b44:	0003      	movs	r3, r0
 8001b46:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4a:	f7ff faa5 	bl	8001098 <HAL_GetTick>
 8001b4e:	0002      	movs	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e127      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b5c:	4b96      	ldr	r3, [pc, #600]	@ (8001db8 <HAL_RCC_OscConfig+0x61c>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	2380      	movs	r3, #128	@ 0x80
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4013      	ands	r3, r2
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0x3e2>
 8001b70:	4b90      	ldr	r3, [pc, #576]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001b72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b74:	4b8f      	ldr	r3, [pc, #572]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001b76:	2101      	movs	r1, #1
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b7c:	e01c      	b.n	8001bb8 <HAL_RCC_OscConfig+0x41c>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b05      	cmp	r3, #5
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x404>
 8001b86:	4b8b      	ldr	r3, [pc, #556]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001b88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b8a:	4b8a      	ldr	r3, [pc, #552]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b92:	4b88      	ldr	r3, [pc, #544]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001b94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b96:	4b87      	ldr	r3, [pc, #540]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001b98:	2101      	movs	r1, #1
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001b9e:	e00b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x41c>
 8001ba0:	4b84      	ldr	r3, [pc, #528]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001ba2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ba4:	4b83      	ldr	r3, [pc, #524]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	438a      	bics	r2, r1
 8001baa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bac:	4b81      	ldr	r3, [pc, #516]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001bae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bb0:	4b80      	ldr	r3, [pc, #512]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001bb2:	2104      	movs	r1, #4
 8001bb4:	438a      	bics	r2, r1
 8001bb6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d014      	beq.n	8001bea <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fa6a 	bl	8001098 <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc8:	e009      	b.n	8001bde <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7ff fa65 	bl	8001098 <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	4a79      	ldr	r2, [pc, #484]	@ (8001dbc <HAL_RCC_OscConfig+0x620>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0e6      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bde:	4b75      	ldr	r3, [pc, #468]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be2:	2202      	movs	r2, #2
 8001be4:	4013      	ands	r3, r2
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x42e>
 8001be8:	e013      	b.n	8001c12 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7ff fa55 	bl	8001098 <HAL_GetTick>
 8001bee:	0003      	movs	r3, r0
 8001bf0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf2:	e009      	b.n	8001c08 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fa50 	bl	8001098 <HAL_GetTick>
 8001bf8:	0002      	movs	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	4a6f      	ldr	r2, [pc, #444]	@ (8001dbc <HAL_RCC_OscConfig+0x620>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e0d1      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c08:	4b6a      	ldr	r3, [pc, #424]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c12:	231f      	movs	r3, #31
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d105      	bne.n	8001c28 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c1c:	4b65      	ldr	r3, [pc, #404]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001c1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c20:	4b64      	ldr	r3, [pc, #400]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001c22:	4967      	ldr	r1, [pc, #412]	@ (8001dc0 <HAL_RCC_OscConfig+0x624>)
 8001c24:	400a      	ands	r2, r1
 8001c26:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d100      	bne.n	8001c32 <HAL_RCC_OscConfig+0x496>
 8001c30:	e0bb      	b.n	8001daa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c32:	4b60      	ldr	r3, [pc, #384]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2238      	movs	r2, #56	@ 0x38
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b10      	cmp	r3, #16
 8001c3c:	d100      	bne.n	8001c40 <HAL_RCC_OscConfig+0x4a4>
 8001c3e:	e07b      	b.n	8001d38 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d156      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c48:	4b5a      	ldr	r3, [pc, #360]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b59      	ldr	r3, [pc, #356]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001c4e:	495d      	ldr	r1, [pc, #372]	@ (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001c50:	400a      	ands	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff fa20 	bl	8001098 <HAL_GetTick>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7ff fa1b 	bl	8001098 <HAL_GetTick>
 8001c62:	0002      	movs	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e09d      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c70:	4b50      	ldr	r3, [pc, #320]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	@ 0x80
 8001c76:	049b      	lsls	r3, r3, #18
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d1f0      	bne.n	8001c5e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c7c:	4b4d      	ldr	r3, [pc, #308]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	4a51      	ldr	r2, [pc, #324]	@ (8001dc8 <HAL_RCC_OscConfig+0x62c>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1a      	ldr	r2, [r3, #32]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	4b42      	ldr	r3, [pc, #264]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001cac:	430a      	orrs	r2, r1
 8001cae:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb0:	4b40      	ldr	r3, [pc, #256]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b3f      	ldr	r3, [pc, #252]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001cb6:	2180      	movs	r1, #128	@ 0x80
 8001cb8:	0449      	lsls	r1, r1, #17
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	4b3c      	ldr	r3, [pc, #240]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001cc4:	2180      	movs	r1, #128	@ 0x80
 8001cc6:	0549      	lsls	r1, r1, #21
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff f9e4 	bl	8001098 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd6:	f7ff f9df 	bl	8001098 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e061      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce8:	4b32      	ldr	r3, [pc, #200]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	@ 0x80
 8001cee:	049b      	lsls	r3, r3, #18
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x53a>
 8001cf4:	e059      	b.n	8001daa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	4b2e      	ldr	r3, [pc, #184]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001cfc:	4931      	ldr	r1, [pc, #196]	@ (8001dc4 <HAL_RCC_OscConfig+0x628>)
 8001cfe:	400a      	ands	r2, r1
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7ff f9c9 	bl	8001098 <HAL_GetTick>
 8001d06:	0003      	movs	r3, r0
 8001d08:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7ff f9c4 	bl	8001098 <HAL_GetTick>
 8001d10:	0002      	movs	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e046      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d1e:	4b25      	ldr	r3, [pc, #148]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	2380      	movs	r3, #128	@ 0x80
 8001d24:	049b      	lsls	r3, r3, #18
 8001d26:	4013      	ands	r3, r2
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d2a:	4b22      	ldr	r3, [pc, #136]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	4b21      	ldr	r3, [pc, #132]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001d30:	4926      	ldr	r1, [pc, #152]	@ (8001dcc <HAL_RCC_OscConfig+0x630>)
 8001d32:	400a      	ands	r2, r1
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	e038      	b.n	8001daa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e033      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d44:	4b1b      	ldr	r3, [pc, #108]	@ (8001db4 <HAL_RCC_OscConfig+0x618>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	401a      	ands	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d126      	bne.n	8001da6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2270      	movs	r2, #112	@ 0x70
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d11f      	bne.n	8001da6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	23fe      	movs	r3, #254	@ 0xfe
 8001d6a:	01db      	lsls	r3, r3, #7
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d72:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d116      	bne.n	8001da6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	23f8      	movs	r3, #248	@ 0xf8
 8001d7c:	039b      	lsls	r3, r3, #14
 8001d7e:	401a      	ands	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d10e      	bne.n	8001da6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	23e0      	movs	r3, #224	@ 0xe0
 8001d8c:	051b      	lsls	r3, r3, #20
 8001d8e:	401a      	ands	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	0f5b      	lsrs	r3, r3, #29
 8001d9c:	075a      	lsls	r2, r3, #29
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	0018      	movs	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b008      	add	sp, #32
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40007000 	.word	0x40007000
 8001dbc:	00001388 	.word	0x00001388
 8001dc0:	efffffff 	.word	0xefffffff
 8001dc4:	feffffff 	.word	0xfeffffff
 8001dc8:	11c1808c 	.word	0x11c1808c
 8001dcc:	eefefffc 	.word	0xeefefffc

08001dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0e9      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de4:	4b76      	ldr	r3, [pc, #472]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2207      	movs	r2, #7
 8001dea:	4013      	ands	r3, r2
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d91e      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b73      	ldr	r3, [pc, #460]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2207      	movs	r2, #7
 8001df8:	4393      	bics	r3, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	4b70      	ldr	r3, [pc, #448]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e04:	f7ff f948 	bl	8001098 <HAL_GetTick>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e0c:	e009      	b.n	8001e22 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0e:	f7ff f943 	bl	8001098 <HAL_GetTick>
 8001e12:	0002      	movs	r2, r0
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	4a6a      	ldr	r2, [pc, #424]	@ (8001fc4 <HAL_RCC_ClockConfig+0x1f4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e0ca      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e22:	4b67      	ldr	r3, [pc, #412]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2207      	movs	r2, #7
 8001e28:	4013      	ands	r3, r2
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2202      	movs	r2, #2
 8001e36:	4013      	ands	r3, r2
 8001e38:	d015      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2204      	movs	r2, #4
 8001e40:	4013      	ands	r3, r2
 8001e42:	d006      	beq.n	8001e52 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e44:	4b60      	ldr	r3, [pc, #384]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	4b5f      	ldr	r3, [pc, #380]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4a:	21e0      	movs	r1, #224	@ 0xe0
 8001e4c:	01c9      	lsls	r1, r1, #7
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e52:	4b5d      	ldr	r3, [pc, #372]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	4a5d      	ldr	r2, [pc, #372]	@ (8001fcc <HAL_RCC_ClockConfig+0x1fc>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	4b59      	ldr	r3, [pc, #356]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e62:	430a      	orrs	r2, r1
 8001e64:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d057      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d107      	bne.n	8001e88 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e78:	4b53      	ldr	r3, [pc, #332]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	029b      	lsls	r3, r3, #10
 8001e80:	4013      	ands	r3, r2
 8001e82:	d12b      	bne.n	8001edc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e097      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e90:	4b4d      	ldr	r3, [pc, #308]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2380      	movs	r3, #128	@ 0x80
 8001e96:	049b      	lsls	r3, r3, #18
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d11f      	bne.n	8001edc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e08b      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea8:	4b47      	ldr	r3, [pc, #284]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2380      	movs	r3, #128	@ 0x80
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d113      	bne.n	8001edc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e07f      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ec0:	4b41      	ldr	r3, [pc, #260]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d108      	bne.n	8001edc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e074      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ece:	4b3e      	ldr	r3, [pc, #248]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e06d      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001edc:	4b3a      	ldr	r3, [pc, #232]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2207      	movs	r2, #7
 8001ee2:	4393      	bics	r3, r2
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	4b37      	ldr	r3, [pc, #220]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001eec:	430a      	orrs	r2, r1
 8001eee:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef0:	f7ff f8d2 	bl	8001098 <HAL_GetTick>
 8001ef4:	0003      	movs	r3, r0
 8001ef6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef8:	e009      	b.n	8001f0e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001efa:	f7ff f8cd 	bl	8001098 <HAL_GetTick>
 8001efe:	0002      	movs	r2, r0
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	4a2f      	ldr	r2, [pc, #188]	@ (8001fc4 <HAL_RCC_ClockConfig+0x1f4>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e054      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2238      	movs	r2, #56	@ 0x38
 8001f14:	401a      	ands	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d1ec      	bne.n	8001efa <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f20:	4b27      	ldr	r3, [pc, #156]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2207      	movs	r2, #7
 8001f26:	4013      	ands	r3, r2
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d21e      	bcs.n	8001f6c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2e:	4b24      	ldr	r3, [pc, #144]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2207      	movs	r2, #7
 8001f34:	4393      	bics	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	4b21      	ldr	r3, [pc, #132]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f40:	f7ff f8aa 	bl	8001098 <HAL_GetTick>
 8001f44:	0003      	movs	r3, r0
 8001f46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f48:	e009      	b.n	8001f5e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4a:	f7ff f8a5 	bl	8001098 <HAL_GetTick>
 8001f4e:	0002      	movs	r2, r0
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	4a1b      	ldr	r2, [pc, #108]	@ (8001fc4 <HAL_RCC_ClockConfig+0x1f4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e02c      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f5e:	4b18      	ldr	r3, [pc, #96]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2207      	movs	r2, #7
 8001f64:	4013      	ands	r3, r2
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d1ee      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2204      	movs	r2, #4
 8001f72:	4013      	ands	r3, r2
 8001f74:	d009      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f76:	4b14      	ldr	r3, [pc, #80]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	4a15      	ldr	r2, [pc, #84]	@ (8001fd0 <HAL_RCC_ClockConfig+0x200>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	0019      	movs	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f86:	430a      	orrs	r2, r1
 8001f88:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f8a:	f000 f829 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8001f8e:	0001      	movs	r1, r0
 8001f90:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	220f      	movs	r2, #15
 8001f98:	401a      	ands	r2, r3
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <HAL_RCC_ClockConfig+0x204>)
 8001f9c:	0092      	lsls	r2, r2, #2
 8001f9e:	58d3      	ldr	r3, [r2, r3]
 8001fa0:	221f      	movs	r2, #31
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	000a      	movs	r2, r1
 8001fa6:	40da      	lsrs	r2, r3
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <HAL_RCC_ClockConfig+0x208>)
 8001faa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <HAL_RCC_ClockConfig+0x20c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f7ff f815 	bl	8000fe0 <HAL_InitTick>
 8001fb6:	0003      	movs	r3, r0
}
 8001fb8:	0018      	movs	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b004      	add	sp, #16
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40022000 	.word	0x40022000
 8001fc4:	00001388 	.word	0x00001388
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	fffff0ff 	.word	0xfffff0ff
 8001fd0:	ffff8fff 	.word	0xffff8fff
 8001fd4:	08005750 	.word	0x08005750
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	20000004 	.word	0x20000004

08001fe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe6:	4b3c      	ldr	r3, [pc, #240]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2238      	movs	r2, #56	@ 0x38
 8001fec:	4013      	ands	r3, r2
 8001fee:	d10f      	bne.n	8002010 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ff0:	4b39      	ldr	r3, [pc, #228]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0adb      	lsrs	r3, r3, #11
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	0013      	movs	r3, r2
 8002000:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002002:	6839      	ldr	r1, [r7, #0]
 8002004:	4835      	ldr	r0, [pc, #212]	@ (80020dc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002006:	f7fe f87d 	bl	8000104 <__udivsi3>
 800200a:	0003      	movs	r3, r0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	e05d      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002010:	4b31      	ldr	r3, [pc, #196]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2238      	movs	r2, #56	@ 0x38
 8002016:	4013      	ands	r3, r2
 8002018:	2b08      	cmp	r3, #8
 800201a:	d102      	bne.n	8002022 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800201c:	4b30      	ldr	r3, [pc, #192]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x100>)
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	e054      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002022:	4b2d      	ldr	r3, [pc, #180]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2238      	movs	r2, #56	@ 0x38
 8002028:	4013      	ands	r3, r2
 800202a:	2b10      	cmp	r3, #16
 800202c:	d138      	bne.n	80020a0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800202e:	4b2a      	ldr	r3, [pc, #168]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2203      	movs	r2, #3
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002038:	4b27      	ldr	r3, [pc, #156]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	2207      	movs	r2, #7
 8002040:	4013      	ands	r3, r2
 8002042:	3301      	adds	r3, #1
 8002044:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d10d      	bne.n	8002068 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	4824      	ldr	r0, [pc, #144]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002050:	f7fe f858 	bl	8000104 <__udivsi3>
 8002054:	0003      	movs	r3, r0
 8002056:	0019      	movs	r1, r3
 8002058:	4b1f      	ldr	r3, [pc, #124]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	0a1b      	lsrs	r3, r3, #8
 800205e:	227f      	movs	r2, #127	@ 0x7f
 8002060:	4013      	ands	r3, r2
 8002062:	434b      	muls	r3, r1
 8002064:	617b      	str	r3, [r7, #20]
        break;
 8002066:	e00d      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	481c      	ldr	r0, [pc, #112]	@ (80020dc <HAL_RCC_GetSysClockFreq+0xfc>)
 800206c:	f7fe f84a 	bl	8000104 <__udivsi3>
 8002070:	0003      	movs	r3, r0
 8002072:	0019      	movs	r1, r3
 8002074:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	227f      	movs	r2, #127	@ 0x7f
 800207c:	4013      	ands	r3, r2
 800207e:	434b      	muls	r3, r1
 8002080:	617b      	str	r3, [r7, #20]
        break;
 8002082:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002084:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	0f5b      	lsrs	r3, r3, #29
 800208a:	2207      	movs	r2, #7
 800208c:	4013      	ands	r3, r2
 800208e:	3301      	adds	r3, #1
 8002090:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	6978      	ldr	r0, [r7, #20]
 8002096:	f7fe f835 	bl	8000104 <__udivsi3>
 800209a:	0003      	movs	r3, r0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	e015      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020a0:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2238      	movs	r2, #56	@ 0x38
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b20      	cmp	r3, #32
 80020aa:	d103      	bne.n	80020b4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80020ac:	2380      	movs	r3, #128	@ 0x80
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	e00b      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020b4:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2238      	movs	r2, #56	@ 0x38
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b18      	cmp	r3, #24
 80020be:	d103      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020c0:	23fa      	movs	r3, #250	@ 0xfa
 80020c2:	01db      	lsls	r3, r3, #7
 80020c4:	613b      	str	r3, [r7, #16]
 80020c6:	e001      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020cc:	693b      	ldr	r3, [r7, #16]
}
 80020ce:	0018      	movs	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b006      	add	sp, #24
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			@ (mov r8, r8)
 80020d8:	40021000 	.word	0x40021000
 80020dc:	00f42400 	.word	0x00f42400
 80020e0:	007a1200 	.word	0x007a1200

080020e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e8:	4b02      	ldr	r3, [pc, #8]	@ (80020f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ea:	681b      	ldr	r3, [r3, #0]
}
 80020ec:	0018      	movs	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			@ (mov r8, r8)
 80020f4:	20000000 	.word	0x20000000

080020f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f8:	b5b0      	push	{r4, r5, r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80020fc:	f7ff fff2 	bl	80020e4 <HAL_RCC_GetHCLKFreq>
 8002100:	0004      	movs	r4, r0
 8002102:	f7ff fb3f 	bl	8001784 <LL_RCC_GetAPB1Prescaler>
 8002106:	0003      	movs	r3, r0
 8002108:	0b1a      	lsrs	r2, r3, #12
 800210a:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <HAL_RCC_GetPCLK1Freq+0x28>)
 800210c:	0092      	lsls	r2, r2, #2
 800210e:	58d3      	ldr	r3, [r2, r3]
 8002110:	221f      	movs	r2, #31
 8002112:	4013      	ands	r3, r2
 8002114:	40dc      	lsrs	r4, r3
 8002116:	0023      	movs	r3, r4
}
 8002118:	0018      	movs	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	bdb0      	pop	{r4, r5, r7, pc}
 800211e:	46c0      	nop			@ (mov r8, r8)
 8002120:	08005790 	.word	0x08005790

08002124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800212c:	2313      	movs	r3, #19
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002134:	2312      	movs	r3, #18
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	2380      	movs	r3, #128	@ 0x80
 8002142:	029b      	lsls	r3, r3, #10
 8002144:	4013      	ands	r3, r2
 8002146:	d100      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002148:	e0a3      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214a:	2011      	movs	r0, #17
 800214c:	183b      	adds	r3, r7, r0
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002152:	4bc3      	ldr	r3, [pc, #780]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002154:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002156:	2380      	movs	r3, #128	@ 0x80
 8002158:	055b      	lsls	r3, r3, #21
 800215a:	4013      	ands	r3, r2
 800215c:	d110      	bne.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	4bc0      	ldr	r3, [pc, #768]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002162:	4bbf      	ldr	r3, [pc, #764]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002164:	2180      	movs	r1, #128	@ 0x80
 8002166:	0549      	lsls	r1, r1, #21
 8002168:	430a      	orrs	r2, r1
 800216a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800216c:	4bbc      	ldr	r3, [pc, #752]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800216e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002170:	2380      	movs	r3, #128	@ 0x80
 8002172:	055b      	lsls	r3, r3, #21
 8002174:	4013      	ands	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217a:	183b      	adds	r3, r7, r0
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002180:	4bb8      	ldr	r3, [pc, #736]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4bb7      	ldr	r3, [pc, #732]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002186:	2180      	movs	r1, #128	@ 0x80
 8002188:	0049      	lsls	r1, r1, #1
 800218a:	430a      	orrs	r2, r1
 800218c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800218e:	f7fe ff83 	bl	8001098 <HAL_GetTick>
 8002192:	0003      	movs	r3, r0
 8002194:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002196:	e00b      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002198:	f7fe ff7e 	bl	8001098 <HAL_GetTick>
 800219c:	0002      	movs	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d904      	bls.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80021a6:	2313      	movs	r3, #19
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	2203      	movs	r2, #3
 80021ac:	701a      	strb	r2, [r3, #0]
        break;
 80021ae:	e005      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021b0:	4bac      	ldr	r3, [pc, #688]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2380      	movs	r3, #128	@ 0x80
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	d0ed      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80021bc:	2313      	movs	r3, #19
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d154      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021c6:	4ba6      	ldr	r3, [pc, #664]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021ca:	23c0      	movs	r3, #192	@ 0xc0
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4013      	ands	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d019      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d014      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021e2:	4b9f      	ldr	r3, [pc, #636]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e6:	4aa0      	ldr	r2, [pc, #640]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021ec:	4b9c      	ldr	r3, [pc, #624]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021f0:	4b9b      	ldr	r3, [pc, #620]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021f2:	2180      	movs	r1, #128	@ 0x80
 80021f4:	0249      	lsls	r1, r1, #9
 80021f6:	430a      	orrs	r2, r1
 80021f8:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021fa:	4b99      	ldr	r3, [pc, #612]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021fe:	4b98      	ldr	r3, [pc, #608]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002200:	499a      	ldr	r1, [pc, #616]	@ (800246c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002202:	400a      	ands	r2, r1
 8002204:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002206:	4b96      	ldr	r3, [pc, #600]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2201      	movs	r2, #1
 8002210:	4013      	ands	r3, r2
 8002212:	d016      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7fe ff40 	bl	8001098 <HAL_GetTick>
 8002218:	0003      	movs	r3, r0
 800221a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221c:	e00c      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7fe ff3b 	bl	8001098 <HAL_GetTick>
 8002222:	0002      	movs	r2, r0
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	4a91      	ldr	r2, [pc, #580]	@ (8002470 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d904      	bls.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800222e:	2313      	movs	r3, #19
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	2203      	movs	r2, #3
 8002234:	701a      	strb	r2, [r3, #0]
            break;
 8002236:	e004      	b.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002238:	4b89      	ldr	r3, [pc, #548]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800223a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223c:	2202      	movs	r2, #2
 800223e:	4013      	ands	r3, r2
 8002240:	d0ed      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002242:	2313      	movs	r3, #19
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10a      	bne.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800224c:	4b84      	ldr	r3, [pc, #528]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800224e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002250:	4a85      	ldr	r2, [pc, #532]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002252:	4013      	ands	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800225a:	4b81      	ldr	r3, [pc, #516]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800225c:	430a      	orrs	r2, r1
 800225e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002260:	e00c      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002262:	2312      	movs	r3, #18
 8002264:	18fb      	adds	r3, r7, r3
 8002266:	2213      	movs	r2, #19
 8002268:	18ba      	adds	r2, r7, r2
 800226a:	7812      	ldrb	r2, [r2, #0]
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	e005      	b.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002270:	2312      	movs	r3, #18
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2213      	movs	r2, #19
 8002276:	18ba      	adds	r2, r7, r2
 8002278:	7812      	ldrb	r2, [r2, #0]
 800227a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800227c:	2311      	movs	r3, #17
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d105      	bne.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002286:	4b76      	ldr	r3, [pc, #472]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002288:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800228a:	4b75      	ldr	r3, [pc, #468]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800228c:	4979      	ldr	r1, [pc, #484]	@ (8002474 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 800228e:	400a      	ands	r2, r1
 8002290:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2201      	movs	r2, #1
 8002298:	4013      	ands	r3, r2
 800229a:	d009      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800229c:	4b70      	ldr	r3, [pc, #448]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800229e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a0:	2203      	movs	r2, #3
 80022a2:	4393      	bics	r3, r2
 80022a4:	0019      	movs	r1, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ac:	430a      	orrs	r2, r1
 80022ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2202      	movs	r2, #2
 80022b6:	4013      	ands	r3, r2
 80022b8:	d009      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ba:	4b69      	ldr	r3, [pc, #420]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022be:	220c      	movs	r2, #12
 80022c0:	4393      	bics	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	4b65      	ldr	r3, [pc, #404]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2210      	movs	r2, #16
 80022d4:	4013      	ands	r3, r2
 80022d6:	d009      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022d8:	4b61      	ldr	r3, [pc, #388]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022dc:	4a66      	ldr	r2, [pc, #408]	@ (8002478 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80022de:	4013      	ands	r3, r2
 80022e0:	0019      	movs	r1, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	4b5e      	ldr	r3, [pc, #376]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022e8:	430a      	orrs	r2, r1
 80022ea:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	2380      	movs	r3, #128	@ 0x80
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4013      	ands	r3, r2
 80022f6:	d009      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022f8:	4b59      	ldr	r3, [pc, #356]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fc:	4a5f      	ldr	r2, [pc, #380]	@ (800247c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80022fe:	4013      	ands	r3, r2
 8002300:	0019      	movs	r1, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	4b56      	ldr	r3, [pc, #344]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002308:	430a      	orrs	r2, r1
 800230a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2380      	movs	r3, #128	@ 0x80
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4013      	ands	r3, r2
 8002316:	d009      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002318:	4b51      	ldr	r3, [pc, #324]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800231a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231c:	4a58      	ldr	r2, [pc, #352]	@ (8002480 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800231e:	4013      	ands	r3, r2
 8002320:	0019      	movs	r1, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69da      	ldr	r2, [r3, #28]
 8002326:	4b4e      	ldr	r3, [pc, #312]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002328:	430a      	orrs	r2, r1
 800232a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2220      	movs	r2, #32
 8002332:	4013      	ands	r3, r2
 8002334:	d009      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002336:	4b4a      	ldr	r3, [pc, #296]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233a:	4a52      	ldr	r2, [pc, #328]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800233c:	4013      	ands	r3, r2
 800233e:	0019      	movs	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	4b46      	ldr	r3, [pc, #280]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002346:	430a      	orrs	r2, r1
 8002348:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	2380      	movs	r3, #128	@ 0x80
 8002350:	01db      	lsls	r3, r3, #7
 8002352:	4013      	ands	r3, r2
 8002354:	d015      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002356:	4b42      	ldr	r3, [pc, #264]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	0899      	lsrs	r1, r3, #2
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1a      	ldr	r2, [r3, #32]
 8002362:	4b3f      	ldr	r3, [pc, #252]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002364:	430a      	orrs	r2, r1
 8002366:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1a      	ldr	r2, [r3, #32]
 800236c:	2380      	movs	r3, #128	@ 0x80
 800236e:	05db      	lsls	r3, r3, #23
 8002370:	429a      	cmp	r2, r3
 8002372:	d106      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002374:	4b3a      	ldr	r3, [pc, #232]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	4b39      	ldr	r3, [pc, #228]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800237a:	2180      	movs	r1, #128	@ 0x80
 800237c:	0249      	lsls	r1, r1, #9
 800237e:	430a      	orrs	r2, r1
 8002380:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	2380      	movs	r3, #128	@ 0x80
 8002388:	031b      	lsls	r3, r3, #12
 800238a:	4013      	ands	r3, r2
 800238c:	d009      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800238e:	4b34      	ldr	r3, [pc, #208]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002392:	2240      	movs	r2, #64	@ 0x40
 8002394:	4393      	bics	r3, r2
 8002396:	0019      	movs	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800239c:	4b30      	ldr	r3, [pc, #192]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239e:	430a      	orrs	r2, r1
 80023a0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	2380      	movs	r3, #128	@ 0x80
 80023a8:	039b      	lsls	r3, r3, #14
 80023aa:	4013      	ands	r3, r2
 80023ac:	d016      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80023ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b2:	4a35      	ldr	r2, [pc, #212]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023bc:	4b28      	ldr	r3, [pc, #160]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023be:	430a      	orrs	r2, r1
 80023c0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023c6:	2380      	movs	r3, #128	@ 0x80
 80023c8:	03db      	lsls	r3, r3, #15
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d106      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023ce:	4b24      	ldr	r3, [pc, #144]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	4b23      	ldr	r3, [pc, #140]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023d4:	2180      	movs	r1, #128	@ 0x80
 80023d6:	0449      	lsls	r1, r1, #17
 80023d8:	430a      	orrs	r2, r1
 80023da:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2380      	movs	r3, #128	@ 0x80
 80023e2:	03db      	lsls	r3, r3, #15
 80023e4:	4013      	ands	r3, r2
 80023e6:	d016      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80023e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ec:	4a27      	ldr	r2, [pc, #156]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x368>)
 80023ee:	4013      	ands	r3, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f8:	430a      	orrs	r2, r1
 80023fa:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002400:	2380      	movs	r3, #128	@ 0x80
 8002402:	045b      	lsls	r3, r3, #17
 8002404:	429a      	cmp	r2, r3
 8002406:	d106      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002408:	4b15      	ldr	r3, [pc, #84]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	4b14      	ldr	r3, [pc, #80]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800240e:	2180      	movs	r1, #128	@ 0x80
 8002410:	0449      	lsls	r1, r1, #17
 8002412:	430a      	orrs	r2, r1
 8002414:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	2380      	movs	r3, #128	@ 0x80
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	4013      	ands	r3, r2
 8002420:	d016      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002422:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002426:	4a1a      	ldr	r2, [pc, #104]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002428:	4013      	ands	r3, r2
 800242a:	0019      	movs	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	4b0b      	ldr	r3, [pc, #44]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002432:	430a      	orrs	r2, r1
 8002434:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695a      	ldr	r2, [r3, #20]
 800243a:	2380      	movs	r3, #128	@ 0x80
 800243c:	01db      	lsls	r3, r3, #7
 800243e:	429a      	cmp	r2, r3
 8002440:	d106      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002442:	4b07      	ldr	r3, [pc, #28]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002448:	2180      	movs	r1, #128	@ 0x80
 800244a:	0249      	lsls	r1, r1, #9
 800244c:	430a      	orrs	r2, r1
 800244e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002450:	2312      	movs	r3, #18
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	781b      	ldrb	r3, [r3, #0]
}
 8002456:	0018      	movs	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	b006      	add	sp, #24
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	40021000 	.word	0x40021000
 8002464:	40007000 	.word	0x40007000
 8002468:	fffffcff 	.word	0xfffffcff
 800246c:	fffeffff 	.word	0xfffeffff
 8002470:	00001388 	.word	0x00001388
 8002474:	efffffff 	.word	0xefffffff
 8002478:	fffff3ff 	.word	0xfffff3ff
 800247c:	fff3ffff 	.word	0xfff3ffff
 8002480:	ffcfffff 	.word	0xffcfffff
 8002484:	ffffcfff 	.word	0xffffcfff
 8002488:	ffbfffff 	.word	0xffbfffff
 800248c:	feffffff 	.word	0xfeffffff
 8002490:	ffff3fff 	.word	0xffff3fff

08002494 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e04a      	b.n	800253c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	223d      	movs	r2, #61	@ 0x3d
 80024aa:	5c9b      	ldrb	r3, [r3, r2]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d107      	bne.n	80024c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	223c      	movs	r2, #60	@ 0x3c
 80024b6:	2100      	movs	r1, #0
 80024b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	0018      	movs	r0, r3
 80024be:	f7fe fbfd 	bl	8000cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	223d      	movs	r2, #61	@ 0x3d
 80024c6:	2102      	movs	r1, #2
 80024c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	3304      	adds	r3, #4
 80024d2:	0019      	movs	r1, r3
 80024d4:	0010      	movs	r0, r2
 80024d6:	f000 fb55 	bl	8002b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2248      	movs	r2, #72	@ 0x48
 80024de:	2101      	movs	r1, #1
 80024e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	223e      	movs	r2, #62	@ 0x3e
 80024e6:	2101      	movs	r1, #1
 80024e8:	5499      	strb	r1, [r3, r2]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	223f      	movs	r2, #63	@ 0x3f
 80024ee:	2101      	movs	r1, #1
 80024f0:	5499      	strb	r1, [r3, r2]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2240      	movs	r2, #64	@ 0x40
 80024f6:	2101      	movs	r1, #1
 80024f8:	5499      	strb	r1, [r3, r2]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2241      	movs	r2, #65	@ 0x41
 80024fe:	2101      	movs	r1, #1
 8002500:	5499      	strb	r1, [r3, r2]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2242      	movs	r2, #66	@ 0x42
 8002506:	2101      	movs	r1, #1
 8002508:	5499      	strb	r1, [r3, r2]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2243      	movs	r2, #67	@ 0x43
 800250e:	2101      	movs	r1, #1
 8002510:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2244      	movs	r2, #68	@ 0x44
 8002516:	2101      	movs	r1, #1
 8002518:	5499      	strb	r1, [r3, r2]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2245      	movs	r2, #69	@ 0x45
 800251e:	2101      	movs	r1, #1
 8002520:	5499      	strb	r1, [r3, r2]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2246      	movs	r2, #70	@ 0x46
 8002526:	2101      	movs	r1, #1
 8002528:	5499      	strb	r1, [r3, r2]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2247      	movs	r2, #71	@ 0x47
 800252e:	2101      	movs	r1, #1
 8002530:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	223d      	movs	r2, #61	@ 0x3d
 8002536:	2101      	movs	r1, #1
 8002538:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	0018      	movs	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	b002      	add	sp, #8
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e04a      	b.n	80025ec <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	223d      	movs	r2, #61	@ 0x3d
 800255a:	5c9b      	ldrb	r3, [r3, r2]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d107      	bne.n	8002572 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	223c      	movs	r2, #60	@ 0x3c
 8002566:	2100      	movs	r1, #0
 8002568:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0018      	movs	r0, r3
 800256e:	f000 f841 	bl	80025f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	223d      	movs	r2, #61	@ 0x3d
 8002576:	2102      	movs	r1, #2
 8002578:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3304      	adds	r3, #4
 8002582:	0019      	movs	r1, r3
 8002584:	0010      	movs	r0, r2
 8002586:	f000 fafd 	bl	8002b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2248      	movs	r2, #72	@ 0x48
 800258e:	2101      	movs	r1, #1
 8002590:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	223e      	movs	r2, #62	@ 0x3e
 8002596:	2101      	movs	r1, #1
 8002598:	5499      	strb	r1, [r3, r2]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	223f      	movs	r2, #63	@ 0x3f
 800259e:	2101      	movs	r1, #1
 80025a0:	5499      	strb	r1, [r3, r2]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2240      	movs	r2, #64	@ 0x40
 80025a6:	2101      	movs	r1, #1
 80025a8:	5499      	strb	r1, [r3, r2]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2241      	movs	r2, #65	@ 0x41
 80025ae:	2101      	movs	r1, #1
 80025b0:	5499      	strb	r1, [r3, r2]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2242      	movs	r2, #66	@ 0x42
 80025b6:	2101      	movs	r1, #1
 80025b8:	5499      	strb	r1, [r3, r2]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2243      	movs	r2, #67	@ 0x43
 80025be:	2101      	movs	r1, #1
 80025c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2244      	movs	r2, #68	@ 0x44
 80025c6:	2101      	movs	r1, #1
 80025c8:	5499      	strb	r1, [r3, r2]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2245      	movs	r2, #69	@ 0x45
 80025ce:	2101      	movs	r1, #1
 80025d0:	5499      	strb	r1, [r3, r2]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2246      	movs	r2, #70	@ 0x46
 80025d6:	2101      	movs	r1, #1
 80025d8:	5499      	strb	r1, [r3, r2]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2247      	movs	r2, #71	@ 0x47
 80025de:	2101      	movs	r1, #1
 80025e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	223d      	movs	r2, #61	@ 0x3d
 80025e6:	2101      	movs	r1, #1
 80025e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b002      	add	sp, #8
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025fc:	46c0      	nop			@ (mov r8, r8)
 80025fe:	46bd      	mov	sp, r7
 8002600:	b002      	add	sp, #8
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d108      	bne.n	8002626 <HAL_TIM_PWM_Start+0x22>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	223e      	movs	r2, #62	@ 0x3e
 8002618:	5c9b      	ldrb	r3, [r3, r2]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	1e5a      	subs	r2, r3, #1
 8002620:	4193      	sbcs	r3, r2
 8002622:	b2db      	uxtb	r3, r3
 8002624:	e037      	b.n	8002696 <HAL_TIM_PWM_Start+0x92>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b04      	cmp	r3, #4
 800262a:	d108      	bne.n	800263e <HAL_TIM_PWM_Start+0x3a>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	223f      	movs	r2, #63	@ 0x3f
 8002630:	5c9b      	ldrb	r3, [r3, r2]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	1e5a      	subs	r2, r3, #1
 8002638:	4193      	sbcs	r3, r2
 800263a:	b2db      	uxtb	r3, r3
 800263c:	e02b      	b.n	8002696 <HAL_TIM_PWM_Start+0x92>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b08      	cmp	r3, #8
 8002642:	d108      	bne.n	8002656 <HAL_TIM_PWM_Start+0x52>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2240      	movs	r2, #64	@ 0x40
 8002648:	5c9b      	ldrb	r3, [r3, r2]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	1e5a      	subs	r2, r3, #1
 8002650:	4193      	sbcs	r3, r2
 8002652:	b2db      	uxtb	r3, r3
 8002654:	e01f      	b.n	8002696 <HAL_TIM_PWM_Start+0x92>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b0c      	cmp	r3, #12
 800265a:	d108      	bne.n	800266e <HAL_TIM_PWM_Start+0x6a>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2241      	movs	r2, #65	@ 0x41
 8002660:	5c9b      	ldrb	r3, [r3, r2]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	4193      	sbcs	r3, r2
 800266a:	b2db      	uxtb	r3, r3
 800266c:	e013      	b.n	8002696 <HAL_TIM_PWM_Start+0x92>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b10      	cmp	r3, #16
 8002672:	d108      	bne.n	8002686 <HAL_TIM_PWM_Start+0x82>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2242      	movs	r2, #66	@ 0x42
 8002678:	5c9b      	ldrb	r3, [r3, r2]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	3b01      	subs	r3, #1
 800267e:	1e5a      	subs	r2, r3, #1
 8002680:	4193      	sbcs	r3, r2
 8002682:	b2db      	uxtb	r3, r3
 8002684:	e007      	b.n	8002696 <HAL_TIM_PWM_Start+0x92>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2243      	movs	r2, #67	@ 0x43
 800268a:	5c9b      	ldrb	r3, [r3, r2]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	3b01      	subs	r3, #1
 8002690:	1e5a      	subs	r2, r3, #1
 8002692:	4193      	sbcs	r3, r2
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e08b      	b.n	80027b6 <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d104      	bne.n	80026ae <HAL_TIM_PWM_Start+0xaa>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	223e      	movs	r2, #62	@ 0x3e
 80026a8:	2102      	movs	r1, #2
 80026aa:	5499      	strb	r1, [r3, r2]
 80026ac:	e023      	b.n	80026f6 <HAL_TIM_PWM_Start+0xf2>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d104      	bne.n	80026be <HAL_TIM_PWM_Start+0xba>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	223f      	movs	r2, #63	@ 0x3f
 80026b8:	2102      	movs	r1, #2
 80026ba:	5499      	strb	r1, [r3, r2]
 80026bc:	e01b      	b.n	80026f6 <HAL_TIM_PWM_Start+0xf2>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d104      	bne.n	80026ce <HAL_TIM_PWM_Start+0xca>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2240      	movs	r2, #64	@ 0x40
 80026c8:	2102      	movs	r1, #2
 80026ca:	5499      	strb	r1, [r3, r2]
 80026cc:	e013      	b.n	80026f6 <HAL_TIM_PWM_Start+0xf2>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b0c      	cmp	r3, #12
 80026d2:	d104      	bne.n	80026de <HAL_TIM_PWM_Start+0xda>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2241      	movs	r2, #65	@ 0x41
 80026d8:	2102      	movs	r1, #2
 80026da:	5499      	strb	r1, [r3, r2]
 80026dc:	e00b      	b.n	80026f6 <HAL_TIM_PWM_Start+0xf2>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2b10      	cmp	r3, #16
 80026e2:	d104      	bne.n	80026ee <HAL_TIM_PWM_Start+0xea>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2242      	movs	r2, #66	@ 0x42
 80026e8:	2102      	movs	r1, #2
 80026ea:	5499      	strb	r1, [r3, r2]
 80026ec:	e003      	b.n	80026f6 <HAL_TIM_PWM_Start+0xf2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2243      	movs	r2, #67	@ 0x43
 80026f2:	2102      	movs	r1, #2
 80026f4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6839      	ldr	r1, [r7, #0]
 80026fc:	2201      	movs	r2, #1
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 fe2e 	bl	8003360 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a2d      	ldr	r2, [pc, #180]	@ (80027c0 <HAL_TIM_PWM_Start+0x1bc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00e      	beq.n	800272c <HAL_TIM_PWM_Start+0x128>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a2c      	ldr	r2, [pc, #176]	@ (80027c4 <HAL_TIM_PWM_Start+0x1c0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d009      	beq.n	800272c <HAL_TIM_PWM_Start+0x128>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a2a      	ldr	r2, [pc, #168]	@ (80027c8 <HAL_TIM_PWM_Start+0x1c4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d004      	beq.n	800272c <HAL_TIM_PWM_Start+0x128>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a29      	ldr	r2, [pc, #164]	@ (80027cc <HAL_TIM_PWM_Start+0x1c8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d101      	bne.n	8002730 <HAL_TIM_PWM_Start+0x12c>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <HAL_TIM_PWM_Start+0x12e>
 8002730:	2300      	movs	r3, #0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d008      	beq.n	8002748 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2180      	movs	r1, #128	@ 0x80
 8002742:	0209      	lsls	r1, r1, #8
 8002744:	430a      	orrs	r2, r1
 8002746:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1c      	ldr	r2, [pc, #112]	@ (80027c0 <HAL_TIM_PWM_Start+0x1bc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d00f      	beq.n	8002772 <HAL_TIM_PWM_Start+0x16e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	2380      	movs	r3, #128	@ 0x80
 8002758:	05db      	lsls	r3, r3, #23
 800275a:	429a      	cmp	r2, r3
 800275c:	d009      	beq.n	8002772 <HAL_TIM_PWM_Start+0x16e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1b      	ldr	r2, [pc, #108]	@ (80027d0 <HAL_TIM_PWM_Start+0x1cc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d004      	beq.n	8002772 <HAL_TIM_PWM_Start+0x16e>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a15      	ldr	r2, [pc, #84]	@ (80027c4 <HAL_TIM_PWM_Start+0x1c0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d116      	bne.n	80027a0 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4a16      	ldr	r2, [pc, #88]	@ (80027d4 <HAL_TIM_PWM_Start+0x1d0>)
 800277a:	4013      	ands	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b06      	cmp	r3, #6
 8002782:	d016      	beq.n	80027b2 <HAL_TIM_PWM_Start+0x1ae>
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	2380      	movs	r3, #128	@ 0x80
 8002788:	025b      	lsls	r3, r3, #9
 800278a:	429a      	cmp	r2, r3
 800278c:	d011      	beq.n	80027b2 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2101      	movs	r1, #1
 800279a:	430a      	orrs	r2, r1
 800279c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800279e:	e008      	b.n	80027b2 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2101      	movs	r1, #1
 80027ac:	430a      	orrs	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e000      	b.n	80027b4 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	0018      	movs	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b004      	add	sp, #16
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	46c0      	nop			@ (mov r8, r8)
 80027c0:	40012c00 	.word	0x40012c00
 80027c4:	40014000 	.word	0x40014000
 80027c8:	40014400 	.word	0x40014400
 80027cc:	40014800 	.word	0x40014800
 80027d0:	40000400 	.word	0x40000400
 80027d4:	00010007 	.word	0x00010007

080027d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e4:	2317      	movs	r3, #23
 80027e6:	18fb      	adds	r3, r7, r3
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	223c      	movs	r2, #60	@ 0x3c
 80027f0:	5c9b      	ldrb	r3, [r3, r2]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_TIM_PWM_ConfigChannel+0x22>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e0e5      	b.n	80029c6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	223c      	movs	r2, #60	@ 0x3c
 80027fe:	2101      	movs	r1, #1
 8002800:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b14      	cmp	r3, #20
 8002806:	d900      	bls.n	800280a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002808:	e0d1      	b.n	80029ae <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	009a      	lsls	r2, r3, #2
 800280e:	4b70      	ldr	r3, [pc, #448]	@ (80029d0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002810:	18d3      	adds	r3, r2, r3
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	0011      	movs	r1, r2
 800281e:	0018      	movs	r0, r3
 8002820:	f000 fa3e 	bl	8002ca0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2108      	movs	r1, #8
 8002830:	430a      	orrs	r2, r1
 8002832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699a      	ldr	r2, [r3, #24]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2104      	movs	r1, #4
 8002840:	438a      	bics	r2, r1
 8002842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6999      	ldr	r1, [r3, #24]
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	619a      	str	r2, [r3, #24]
      break;
 8002856:	e0af      	b.n	80029b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	0011      	movs	r1, r2
 8002860:	0018      	movs	r0, r3
 8002862:	f000 faa7 	bl	8002db4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699a      	ldr	r2, [r3, #24]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2180      	movs	r1, #128	@ 0x80
 8002872:	0109      	lsls	r1, r1, #4
 8002874:	430a      	orrs	r2, r1
 8002876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699a      	ldr	r2, [r3, #24]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4954      	ldr	r1, [pc, #336]	@ (80029d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002884:	400a      	ands	r2, r1
 8002886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6999      	ldr	r1, [r3, #24]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	021a      	lsls	r2, r3, #8
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	619a      	str	r2, [r3, #24]
      break;
 800289c:	e08c      	b.n	80029b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	0011      	movs	r1, r2
 80028a6:	0018      	movs	r0, r3
 80028a8:	f000 fb08 	bl	8002ebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	69da      	ldr	r2, [r3, #28]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2108      	movs	r1, #8
 80028b8:	430a      	orrs	r2, r1
 80028ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69da      	ldr	r2, [r3, #28]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2104      	movs	r1, #4
 80028c8:	438a      	bics	r2, r1
 80028ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	69d9      	ldr	r1, [r3, #28]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	691a      	ldr	r2, [r3, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	61da      	str	r2, [r3, #28]
      break;
 80028de:	e06b      	b.n	80029b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68ba      	ldr	r2, [r7, #8]
 80028e6:	0011      	movs	r1, r2
 80028e8:	0018      	movs	r0, r3
 80028ea:	f000 fb6f 	bl	8002fcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	69da      	ldr	r2, [r3, #28]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2180      	movs	r1, #128	@ 0x80
 80028fa:	0109      	lsls	r1, r1, #4
 80028fc:	430a      	orrs	r2, r1
 80028fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	69da      	ldr	r2, [r3, #28]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4932      	ldr	r1, [pc, #200]	@ (80029d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800290c:	400a      	ands	r2, r1
 800290e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69d9      	ldr	r1, [r3, #28]
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	021a      	lsls	r2, r3, #8
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	61da      	str	r2, [r3, #28]
      break;
 8002924:	e048      	b.n	80029b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	0011      	movs	r1, r2
 800292e:	0018      	movs	r0, r3
 8002930:	f000 fbb6 	bl	80030a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2108      	movs	r1, #8
 8002940:	430a      	orrs	r2, r1
 8002942:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2104      	movs	r1, #4
 8002950:	438a      	bics	r2, r1
 8002952:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002966:	e027      	b.n	80029b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	0011      	movs	r1, r2
 8002970:	0018      	movs	r0, r3
 8002972:	f000 fbf5 	bl	8003160 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2180      	movs	r1, #128	@ 0x80
 8002982:	0109      	lsls	r1, r1, #4
 8002984:	430a      	orrs	r2, r1
 8002986:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4910      	ldr	r1, [pc, #64]	@ (80029d4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002994:	400a      	ands	r2, r1
 8002996:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	021a      	lsls	r2, r3, #8
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80029ac:	e004      	b.n	80029b8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80029ae:	2317      	movs	r3, #23
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	2201      	movs	r2, #1
 80029b4:	701a      	strb	r2, [r3, #0]
      break;
 80029b6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	223c      	movs	r2, #60	@ 0x3c
 80029bc:	2100      	movs	r1, #0
 80029be:	5499      	strb	r1, [r3, r2]

  return status;
 80029c0:	2317      	movs	r3, #23
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	781b      	ldrb	r3, [r3, #0]
}
 80029c6:	0018      	movs	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b006      	add	sp, #24
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	080057b0 	.word	0x080057b0
 80029d4:	fffffbff 	.word	0xfffffbff

080029d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029e2:	230f      	movs	r3, #15
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	223c      	movs	r2, #60	@ 0x3c
 80029ee:	5c9b      	ldrb	r3, [r3, r2]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_TIM_ConfigClockSource+0x20>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e0bc      	b.n	8002b72 <HAL_TIM_ConfigClockSource+0x19a>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	223c      	movs	r2, #60	@ 0x3c
 80029fc:	2101      	movs	r1, #1
 80029fe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	223d      	movs	r2, #61	@ 0x3d
 8002a04:	2102      	movs	r1, #2
 8002a06:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4a5a      	ldr	r2, [pc, #360]	@ (8002b7c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4a59      	ldr	r2, [pc, #356]	@ (8002b80 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2280      	movs	r2, #128	@ 0x80
 8002a2e:	0192      	lsls	r2, r2, #6
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d040      	beq.n	8002ab6 <HAL_TIM_ConfigClockSource+0xde>
 8002a34:	2280      	movs	r2, #128	@ 0x80
 8002a36:	0192      	lsls	r2, r2, #6
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d900      	bls.n	8002a3e <HAL_TIM_ConfigClockSource+0x66>
 8002a3c:	e088      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x178>
 8002a3e:	2280      	movs	r2, #128	@ 0x80
 8002a40:	0152      	lsls	r2, r2, #5
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d100      	bne.n	8002a48 <HAL_TIM_ConfigClockSource+0x70>
 8002a46:	e088      	b.n	8002b5a <HAL_TIM_ConfigClockSource+0x182>
 8002a48:	2280      	movs	r2, #128	@ 0x80
 8002a4a:	0152      	lsls	r2, r2, #5
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d900      	bls.n	8002a52 <HAL_TIM_ConfigClockSource+0x7a>
 8002a50:	e07e      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x178>
 8002a52:	2b70      	cmp	r3, #112	@ 0x70
 8002a54:	d018      	beq.n	8002a88 <HAL_TIM_ConfigClockSource+0xb0>
 8002a56:	d900      	bls.n	8002a5a <HAL_TIM_ConfigClockSource+0x82>
 8002a58:	e07a      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x178>
 8002a5a:	2b60      	cmp	r3, #96	@ 0x60
 8002a5c:	d04f      	beq.n	8002afe <HAL_TIM_ConfigClockSource+0x126>
 8002a5e:	d900      	bls.n	8002a62 <HAL_TIM_ConfigClockSource+0x8a>
 8002a60:	e076      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x178>
 8002a62:	2b50      	cmp	r3, #80	@ 0x50
 8002a64:	d03b      	beq.n	8002ade <HAL_TIM_ConfigClockSource+0x106>
 8002a66:	d900      	bls.n	8002a6a <HAL_TIM_ConfigClockSource+0x92>
 8002a68:	e072      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x178>
 8002a6a:	2b40      	cmp	r3, #64	@ 0x40
 8002a6c:	d057      	beq.n	8002b1e <HAL_TIM_ConfigClockSource+0x146>
 8002a6e:	d900      	bls.n	8002a72 <HAL_TIM_ConfigClockSource+0x9a>
 8002a70:	e06e      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x178>
 8002a72:	2b30      	cmp	r3, #48	@ 0x30
 8002a74:	d063      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x166>
 8002a76:	d86b      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x178>
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d060      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x166>
 8002a7c:	d868      	bhi.n	8002b50 <HAL_TIM_ConfigClockSource+0x178>
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d05d      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x166>
 8002a82:	2b10      	cmp	r3, #16
 8002a84:	d05b      	beq.n	8002b3e <HAL_TIM_ConfigClockSource+0x166>
 8002a86:	e063      	b.n	8002b50 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a98:	f000 fc42 	bl	8003320 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2277      	movs	r2, #119	@ 0x77
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	609a      	str	r2, [r3, #8]
      break;
 8002ab4:	e052      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ac6:	f000 fc2b 	bl	8003320 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2180      	movs	r1, #128	@ 0x80
 8002ad6:	01c9      	lsls	r1, r1, #7
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	609a      	str	r2, [r3, #8]
      break;
 8002adc:	e03e      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aea:	001a      	movs	r2, r3
 8002aec:	f000 fb9c 	bl	8003228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2150      	movs	r1, #80	@ 0x50
 8002af6:	0018      	movs	r0, r3
 8002af8:	f000 fbf6 	bl	80032e8 <TIM_ITRx_SetConfig>
      break;
 8002afc:	e02e      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b0a:	001a      	movs	r2, r3
 8002b0c:	f000 fbba 	bl	8003284 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2160      	movs	r1, #96	@ 0x60
 8002b16:	0018      	movs	r0, r3
 8002b18:	f000 fbe6 	bl	80032e8 <TIM_ITRx_SetConfig>
      break;
 8002b1c:	e01e      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b2a:	001a      	movs	r2, r3
 8002b2c:	f000 fb7c 	bl	8003228 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2140      	movs	r1, #64	@ 0x40
 8002b36:	0018      	movs	r0, r3
 8002b38:	f000 fbd6 	bl	80032e8 <TIM_ITRx_SetConfig>
      break;
 8002b3c:	e00e      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	0019      	movs	r1, r3
 8002b48:	0010      	movs	r0, r2
 8002b4a:	f000 fbcd 	bl	80032e8 <TIM_ITRx_SetConfig>
      break;
 8002b4e:	e005      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002b50:	230f      	movs	r3, #15
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	2201      	movs	r2, #1
 8002b56:	701a      	strb	r2, [r3, #0]
      break;
 8002b58:	e000      	b.n	8002b5c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002b5a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	223d      	movs	r2, #61	@ 0x3d
 8002b60:	2101      	movs	r1, #1
 8002b62:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	223c      	movs	r2, #60	@ 0x3c
 8002b68:	2100      	movs	r1, #0
 8002b6a:	5499      	strb	r1, [r3, r2]

  return status;
 8002b6c:	230f      	movs	r3, #15
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	781b      	ldrb	r3, [r3, #0]
}
 8002b72:	0018      	movs	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b004      	add	sp, #16
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	ffceff88 	.word	0xffceff88
 8002b80:	ffff00ff 	.word	0xffff00ff

08002b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a3b      	ldr	r2, [pc, #236]	@ (8002c84 <TIM_Base_SetConfig+0x100>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d008      	beq.n	8002bae <TIM_Base_SetConfig+0x2a>
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	05db      	lsls	r3, r3, #23
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d003      	beq.n	8002bae <TIM_Base_SetConfig+0x2a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a37      	ldr	r2, [pc, #220]	@ (8002c88 <TIM_Base_SetConfig+0x104>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d108      	bne.n	8002bc0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2270      	movs	r2, #112	@ 0x70
 8002bb2:	4393      	bics	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a30      	ldr	r2, [pc, #192]	@ (8002c84 <TIM_Base_SetConfig+0x100>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d018      	beq.n	8002bfa <TIM_Base_SetConfig+0x76>
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	2380      	movs	r3, #128	@ 0x80
 8002bcc:	05db      	lsls	r3, r3, #23
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d013      	beq.n	8002bfa <TIM_Base_SetConfig+0x76>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8002c88 <TIM_Base_SetConfig+0x104>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00f      	beq.n	8002bfa <TIM_Base_SetConfig+0x76>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8002c8c <TIM_Base_SetConfig+0x108>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00b      	beq.n	8002bfa <TIM_Base_SetConfig+0x76>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a2a      	ldr	r2, [pc, #168]	@ (8002c90 <TIM_Base_SetConfig+0x10c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <TIM_Base_SetConfig+0x76>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a29      	ldr	r2, [pc, #164]	@ (8002c94 <TIM_Base_SetConfig+0x110>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d003      	beq.n	8002bfa <TIM_Base_SetConfig+0x76>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a28      	ldr	r2, [pc, #160]	@ (8002c98 <TIM_Base_SetConfig+0x114>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d108      	bne.n	8002c0c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a27      	ldr	r2, [pc, #156]	@ (8002c9c <TIM_Base_SetConfig+0x118>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2280      	movs	r2, #128	@ 0x80
 8002c10:	4393      	bics	r3, r2
 8002c12:	001a      	movs	r2, r3
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a13      	ldr	r2, [pc, #76]	@ (8002c84 <TIM_Base_SetConfig+0x100>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00b      	beq.n	8002c52 <TIM_Base_SetConfig+0xce>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a14      	ldr	r2, [pc, #80]	@ (8002c90 <TIM_Base_SetConfig+0x10c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d007      	beq.n	8002c52 <TIM_Base_SetConfig+0xce>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a13      	ldr	r2, [pc, #76]	@ (8002c94 <TIM_Base_SetConfig+0x110>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d003      	beq.n	8002c52 <TIM_Base_SetConfig+0xce>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a12      	ldr	r2, [pc, #72]	@ (8002c98 <TIM_Base_SetConfig+0x114>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d103      	bne.n	8002c5a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	691a      	ldr	r2, [r3, #16]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	2201      	movs	r2, #1
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d106      	bne.n	8002c7a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2201      	movs	r2, #1
 8002c72:	4393      	bics	r3, r2
 8002c74:	001a      	movs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	611a      	str	r2, [r3, #16]
  }
}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b004      	add	sp, #16
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			@ (mov r8, r8)
 8002c84:	40012c00 	.word	0x40012c00
 8002c88:	40000400 	.word	0x40000400
 8002c8c:	40002000 	.word	0x40002000
 8002c90:	40014000 	.word	0x40014000
 8002c94:	40014400 	.word	0x40014400
 8002c98:	40014800 	.word	0x40014800
 8002c9c:	fffffcff 	.word	0xfffffcff

08002ca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	4393      	bics	r3, r2
 8002cb8:	001a      	movs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4a32      	ldr	r2, [pc, #200]	@ (8002d98 <TIM_OC1_SetConfig+0xf8>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	4393      	bics	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	4393      	bics	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a28      	ldr	r2, [pc, #160]	@ (8002d9c <TIM_OC1_SetConfig+0xfc>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d00b      	beq.n	8002d16 <TIM_OC1_SetConfig+0x76>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a27      	ldr	r2, [pc, #156]	@ (8002da0 <TIM_OC1_SetConfig+0x100>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d007      	beq.n	8002d16 <TIM_OC1_SetConfig+0x76>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a26      	ldr	r2, [pc, #152]	@ (8002da4 <TIM_OC1_SetConfig+0x104>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d003      	beq.n	8002d16 <TIM_OC1_SetConfig+0x76>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a25      	ldr	r2, [pc, #148]	@ (8002da8 <TIM_OC1_SetConfig+0x108>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d10c      	bne.n	8002d30 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2208      	movs	r2, #8
 8002d1a:	4393      	bics	r3, r2
 8002d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	4393      	bics	r3, r2
 8002d2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a1a      	ldr	r2, [pc, #104]	@ (8002d9c <TIM_OC1_SetConfig+0xfc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00b      	beq.n	8002d50 <TIM_OC1_SetConfig+0xb0>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a19      	ldr	r2, [pc, #100]	@ (8002da0 <TIM_OC1_SetConfig+0x100>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d007      	beq.n	8002d50 <TIM_OC1_SetConfig+0xb0>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a18      	ldr	r2, [pc, #96]	@ (8002da4 <TIM_OC1_SetConfig+0x104>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d003      	beq.n	8002d50 <TIM_OC1_SetConfig+0xb0>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a17      	ldr	r2, [pc, #92]	@ (8002da8 <TIM_OC1_SetConfig+0x108>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d111      	bne.n	8002d74 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4a16      	ldr	r2, [pc, #88]	@ (8002dac <TIM_OC1_SetConfig+0x10c>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4a15      	ldr	r2, [pc, #84]	@ (8002db0 <TIM_OC1_SetConfig+0x110>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	621a      	str	r2, [r3, #32]
}
 8002d8e:	46c0      	nop			@ (mov r8, r8)
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b006      	add	sp, #24
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	fffeff8f 	.word	0xfffeff8f
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40014000 	.word	0x40014000
 8002da4:	40014400 	.word	0x40014400
 8002da8:	40014800 	.word	0x40014800
 8002dac:	fffffeff 	.word	0xfffffeff
 8002db0:	fffffdff 	.word	0xfffffdff

08002db4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	2210      	movs	r2, #16
 8002dca:	4393      	bics	r3, r2
 8002dcc:	001a      	movs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4a2e      	ldr	r2, [pc, #184]	@ (8002e9c <TIM_OC2_SetConfig+0xe8>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea0 <TIM_OC2_SetConfig+0xec>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	4393      	bics	r3, r2
 8002e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a24      	ldr	r2, [pc, #144]	@ (8002ea4 <TIM_OC2_SetConfig+0xf0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d10d      	bne.n	8002e32 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2280      	movs	r2, #128	@ 0x80
 8002e1a:	4393      	bics	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2240      	movs	r2, #64	@ 0x40
 8002e2e:	4393      	bics	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea4 <TIM_OC2_SetConfig+0xf0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00b      	beq.n	8002e52 <TIM_OC2_SetConfig+0x9e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea8 <TIM_OC2_SetConfig+0xf4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <TIM_OC2_SetConfig+0x9e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a19      	ldr	r2, [pc, #100]	@ (8002eac <TIM_OC2_SetConfig+0xf8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d003      	beq.n	8002e52 <TIM_OC2_SetConfig+0x9e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a18      	ldr	r2, [pc, #96]	@ (8002eb0 <TIM_OC2_SetConfig+0xfc>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d113      	bne.n	8002e7a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4a17      	ldr	r2, [pc, #92]	@ (8002eb4 <TIM_OC2_SetConfig+0x100>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4a16      	ldr	r2, [pc, #88]	@ (8002eb8 <TIM_OC2_SetConfig+0x104>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	621a      	str	r2, [r3, #32]
}
 8002e94:	46c0      	nop			@ (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b006      	add	sp, #24
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	feff8fff 	.word	0xfeff8fff
 8002ea0:	fffffcff 	.word	0xfffffcff
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	40014000 	.word	0x40014000
 8002eac:	40014400 	.word	0x40014400
 8002eb0:	40014800 	.word	0x40014800
 8002eb4:	fffffbff 	.word	0xfffffbff
 8002eb8:	fffff7ff 	.word	0xfffff7ff

08002ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4a33      	ldr	r2, [pc, #204]	@ (8002fa0 <TIM_OC3_SetConfig+0xe4>)
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4a2f      	ldr	r2, [pc, #188]	@ (8002fa4 <TIM_OC3_SetConfig+0xe8>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2203      	movs	r2, #3
 8002ef0:	4393      	bics	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	4a29      	ldr	r2, [pc, #164]	@ (8002fa8 <TIM_OC3_SetConfig+0xec>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a25      	ldr	r2, [pc, #148]	@ (8002fac <TIM_OC3_SetConfig+0xf0>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10d      	bne.n	8002f36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	4a24      	ldr	r2, [pc, #144]	@ (8002fb0 <TIM_OC3_SetConfig+0xf4>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	4a20      	ldr	r2, [pc, #128]	@ (8002fb4 <TIM_OC3_SetConfig+0xf8>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a1c      	ldr	r2, [pc, #112]	@ (8002fac <TIM_OC3_SetConfig+0xf0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00b      	beq.n	8002f56 <TIM_OC3_SetConfig+0x9a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb8 <TIM_OC3_SetConfig+0xfc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <TIM_OC3_SetConfig+0x9a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a1c      	ldr	r2, [pc, #112]	@ (8002fbc <TIM_OC3_SetConfig+0x100>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d003      	beq.n	8002f56 <TIM_OC3_SetConfig+0x9a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a1b      	ldr	r2, [pc, #108]	@ (8002fc0 <TIM_OC3_SetConfig+0x104>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d113      	bne.n	8002f7e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4a1a      	ldr	r2, [pc, #104]	@ (8002fc4 <TIM_OC3_SetConfig+0x108>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4a19      	ldr	r2, [pc, #100]	@ (8002fc8 <TIM_OC3_SetConfig+0x10c>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	621a      	str	r2, [r3, #32]
}
 8002f98:	46c0      	nop			@ (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b006      	add	sp, #24
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	fffffeff 	.word	0xfffffeff
 8002fa4:	fffeff8f 	.word	0xfffeff8f
 8002fa8:	fffffdff 	.word	0xfffffdff
 8002fac:	40012c00 	.word	0x40012c00
 8002fb0:	fffff7ff 	.word	0xfffff7ff
 8002fb4:	fffffbff 	.word	0xfffffbff
 8002fb8:	40014000 	.word	0x40014000
 8002fbc:	40014400 	.word	0x40014400
 8002fc0:	40014800 	.word	0x40014800
 8002fc4:	ffffefff 	.word	0xffffefff
 8002fc8:	ffffdfff 	.word	0xffffdfff

08002fcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	4a26      	ldr	r2, [pc, #152]	@ (800307c <TIM_OC4_SetConfig+0xb0>)
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4a22      	ldr	r2, [pc, #136]	@ (8003080 <TIM_OC4_SetConfig+0xb4>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a21      	ldr	r2, [pc, #132]	@ (8003084 <TIM_OC4_SetConfig+0xb8>)
 8003000:	4013      	ands	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4313      	orrs	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4a1d      	ldr	r2, [pc, #116]	@ (8003088 <TIM_OC4_SetConfig+0xbc>)
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	031b      	lsls	r3, r3, #12
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a19      	ldr	r2, [pc, #100]	@ (800308c <TIM_OC4_SetConfig+0xc0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00b      	beq.n	8003044 <TIM_OC4_SetConfig+0x78>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a18      	ldr	r2, [pc, #96]	@ (8003090 <TIM_OC4_SetConfig+0xc4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d007      	beq.n	8003044 <TIM_OC4_SetConfig+0x78>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a17      	ldr	r2, [pc, #92]	@ (8003094 <TIM_OC4_SetConfig+0xc8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d003      	beq.n	8003044 <TIM_OC4_SetConfig+0x78>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a16      	ldr	r2, [pc, #88]	@ (8003098 <TIM_OC4_SetConfig+0xcc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d109      	bne.n	8003058 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	4a15      	ldr	r2, [pc, #84]	@ (800309c <TIM_OC4_SetConfig+0xd0>)
 8003048:	4013      	ands	r3, r2
 800304a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	019b      	lsls	r3, r3, #6
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	621a      	str	r2, [r3, #32]
}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	b006      	add	sp, #24
 8003078:	bd80      	pop	{r7, pc}
 800307a:	46c0      	nop			@ (mov r8, r8)
 800307c:	ffffefff 	.word	0xffffefff
 8003080:	feff8fff 	.word	0xfeff8fff
 8003084:	fffffcff 	.word	0xfffffcff
 8003088:	ffffdfff 	.word	0xffffdfff
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40014000 	.word	0x40014000
 8003094:	40014400 	.word	0x40014400
 8003098:	40014800 	.word	0x40014800
 800309c:	ffffbfff 	.word	0xffffbfff

080030a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4a23      	ldr	r2, [pc, #140]	@ (8003144 <TIM_OC5_SetConfig+0xa4>)
 80030b6:	401a      	ands	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4a1f      	ldr	r2, [pc, #124]	@ (8003148 <TIM_OC5_SetConfig+0xa8>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4a1b      	ldr	r2, [pc, #108]	@ (800314c <TIM_OC5_SetConfig+0xac>)
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	041b      	lsls	r3, r3, #16
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a17      	ldr	r2, [pc, #92]	@ (8003150 <TIM_OC5_SetConfig+0xb0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00b      	beq.n	800310e <TIM_OC5_SetConfig+0x6e>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a16      	ldr	r2, [pc, #88]	@ (8003154 <TIM_OC5_SetConfig+0xb4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d007      	beq.n	800310e <TIM_OC5_SetConfig+0x6e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a15      	ldr	r2, [pc, #84]	@ (8003158 <TIM_OC5_SetConfig+0xb8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d003      	beq.n	800310e <TIM_OC5_SetConfig+0x6e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a14      	ldr	r2, [pc, #80]	@ (800315c <TIM_OC5_SetConfig+0xbc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d109      	bne.n	8003122 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	4a0c      	ldr	r2, [pc, #48]	@ (8003144 <TIM_OC5_SetConfig+0xa4>)
 8003112:	4013      	ands	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	621a      	str	r2, [r3, #32]
}
 800313c:	46c0      	nop			@ (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b006      	add	sp, #24
 8003142:	bd80      	pop	{r7, pc}
 8003144:	fffeffff 	.word	0xfffeffff
 8003148:	fffeff8f 	.word	0xfffeff8f
 800314c:	fffdffff 	.word	0xfffdffff
 8003150:	40012c00 	.word	0x40012c00
 8003154:	40014000 	.word	0x40014000
 8003158:	40014400 	.word	0x40014400
 800315c:	40014800 	.word	0x40014800

08003160 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4a24      	ldr	r2, [pc, #144]	@ (8003208 <TIM_OC6_SetConfig+0xa8>)
 8003176:	401a      	ands	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4a20      	ldr	r2, [pc, #128]	@ (800320c <TIM_OC6_SetConfig+0xac>)
 800318c:	4013      	ands	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4a1c      	ldr	r2, [pc, #112]	@ (8003210 <TIM_OC6_SetConfig+0xb0>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	051b      	lsls	r3, r3, #20
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a18      	ldr	r2, [pc, #96]	@ (8003214 <TIM_OC6_SetConfig+0xb4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00b      	beq.n	80031d0 <TIM_OC6_SetConfig+0x70>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a17      	ldr	r2, [pc, #92]	@ (8003218 <TIM_OC6_SetConfig+0xb8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d007      	beq.n	80031d0 <TIM_OC6_SetConfig+0x70>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a16      	ldr	r2, [pc, #88]	@ (800321c <TIM_OC6_SetConfig+0xbc>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d003      	beq.n	80031d0 <TIM_OC6_SetConfig+0x70>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a15      	ldr	r2, [pc, #84]	@ (8003220 <TIM_OC6_SetConfig+0xc0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d109      	bne.n	80031e4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	4a14      	ldr	r2, [pc, #80]	@ (8003224 <TIM_OC6_SetConfig+0xc4>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	029b      	lsls	r3, r3, #10
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	621a      	str	r2, [r3, #32]
}
 80031fe:	46c0      	nop			@ (mov r8, r8)
 8003200:	46bd      	mov	sp, r7
 8003202:	b006      	add	sp, #24
 8003204:	bd80      	pop	{r7, pc}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	ffefffff 	.word	0xffefffff
 800320c:	feff8fff 	.word	0xfeff8fff
 8003210:	ffdfffff 	.word	0xffdfffff
 8003214:	40012c00 	.word	0x40012c00
 8003218:	40014000 	.word	0x40014000
 800321c:	40014400 	.word	0x40014400
 8003220:	40014800 	.word	0x40014800
 8003224:	fffbffff 	.word	0xfffbffff

08003228 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	2201      	movs	r2, #1
 8003240:	4393      	bics	r3, r2
 8003242:	001a      	movs	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	22f0      	movs	r2, #240	@ 0xf0
 8003252:	4393      	bics	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	220a      	movs	r2, #10
 8003264:	4393      	bics	r3, r2
 8003266:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	621a      	str	r2, [r3, #32]
}
 800327c:	46c0      	nop			@ (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	b006      	add	sp, #24
 8003282:	bd80      	pop	{r7, pc}

08003284 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	2210      	movs	r2, #16
 800329c:	4393      	bics	r3, r2
 800329e:	001a      	movs	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4a0d      	ldr	r2, [pc, #52]	@ (80032e4 <TIM_TI2_ConfigInputStage+0x60>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	031b      	lsls	r3, r3, #12
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	22a0      	movs	r2, #160	@ 0xa0
 80032c0:	4393      	bics	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	621a      	str	r2, [r3, #32]
}
 80032da:	46c0      	nop			@ (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	b006      	add	sp, #24
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			@ (mov r8, r8)
 80032e4:	ffff0fff 	.word	0xffff0fff

080032e8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a08      	ldr	r2, [pc, #32]	@ (800331c <TIM_ITRx_SetConfig+0x34>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	2207      	movs	r2, #7
 8003308:	4313      	orrs	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	609a      	str	r2, [r3, #8]
}
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	46bd      	mov	sp, r7
 8003316:	b004      	add	sp, #16
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			@ (mov r8, r8)
 800331c:	ffcfff8f 	.word	0xffcfff8f

08003320 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	4a09      	ldr	r2, [pc, #36]	@ (800335c <TIM_ETR_SetConfig+0x3c>)
 8003338:	4013      	ands	r3, r2
 800333a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	021a      	lsls	r2, r3, #8
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	431a      	orrs	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4313      	orrs	r3, r2
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	697a      	ldr	r2, [r7, #20]
 8003352:	609a      	str	r2, [r3, #8]
}
 8003354:	46c0      	nop			@ (mov r8, r8)
 8003356:	46bd      	mov	sp, r7
 8003358:	b006      	add	sp, #24
 800335a:	bd80      	pop	{r7, pc}
 800335c:	ffff00ff 	.word	0xffff00ff

08003360 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	221f      	movs	r2, #31
 8003370:	4013      	ands	r3, r2
 8003372:	2201      	movs	r2, #1
 8003374:	409a      	lsls	r2, r3
 8003376:	0013      	movs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	43d2      	mvns	r2, r2
 8003382:	401a      	ands	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a1a      	ldr	r2, [r3, #32]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	211f      	movs	r1, #31
 8003390:	400b      	ands	r3, r1
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4099      	lsls	r1, r3
 8003396:	000b      	movs	r3, r1
 8003398:	431a      	orrs	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	621a      	str	r2, [r3, #32]
}
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b006      	add	sp, #24
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	223c      	movs	r2, #60	@ 0x3c
 80033b6:	5c9b      	ldrb	r3, [r3, r2]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033bc:	2302      	movs	r3, #2
 80033be:	e055      	b.n	800346c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	223c      	movs	r2, #60	@ 0x3c
 80033c4:	2101      	movs	r1, #1
 80033c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	223d      	movs	r2, #61	@ 0x3d
 80033cc:	2102      	movs	r1, #2
 80033ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a23      	ldr	r2, [pc, #140]	@ (8003474 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d108      	bne.n	80033fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a22      	ldr	r2, [pc, #136]	@ (8003478 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2270      	movs	r2, #112	@ 0x70
 8003400:	4393      	bics	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a16      	ldr	r2, [pc, #88]	@ (8003474 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00f      	beq.n	8003440 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	2380      	movs	r3, #128	@ 0x80
 8003426:	05db      	lsls	r3, r3, #23
 8003428:	429a      	cmp	r2, r3
 800342a:	d009      	beq.n	8003440 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a12      	ldr	r2, [pc, #72]	@ (800347c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d004      	beq.n	8003440 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a11      	ldr	r2, [pc, #68]	@ (8003480 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d10c      	bne.n	800345a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2280      	movs	r2, #128	@ 0x80
 8003444:	4393      	bics	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	4313      	orrs	r3, r2
 8003450:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68ba      	ldr	r2, [r7, #8]
 8003458:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	223d      	movs	r2, #61	@ 0x3d
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	223c      	movs	r2, #60	@ 0x3c
 8003466:	2100      	movs	r1, #0
 8003468:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	0018      	movs	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	b004      	add	sp, #16
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40012c00 	.word	0x40012c00
 8003478:	ff0fffff 	.word	0xff0fffff
 800347c:	40000400 	.word	0x40000400
 8003480:	40014000 	.word	0x40014000

08003484 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	223c      	movs	r2, #60	@ 0x3c
 8003496:	5c9b      	ldrb	r3, [r3, r2]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800349c:	2302      	movs	r3, #2
 800349e:	e06f      	b.n	8003580 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	223c      	movs	r2, #60	@ 0x3c
 80034a4:	2101      	movs	r1, #1
 80034a6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	22ff      	movs	r2, #255	@ 0xff
 80034ac:	4393      	bics	r3, r2
 80034ae:	001a      	movs	r2, r3
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4a33      	ldr	r2, [pc, #204]	@ (8003588 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80034bc:	401a      	ands	r2, r3
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4a30      	ldr	r2, [pc, #192]	@ (800358c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80034ca:	401a      	ands	r2, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4a2e      	ldr	r2, [pc, #184]	@ (8003590 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80034d8:	401a      	ands	r2, r3
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003594 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80034e6:	401a      	ands	r2, r3
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a29      	ldr	r2, [pc, #164]	@ (8003598 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80034f4:	401a      	ands	r2, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4a26      	ldr	r2, [pc, #152]	@ (800359c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003502:	401a      	ands	r2, r3
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4a24      	ldr	r2, [pc, #144]	@ (80035a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003510:	401a      	ands	r2, r3
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	041b      	lsls	r3, r3, #16
 8003518:	4313      	orrs	r3, r2
 800351a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a21      	ldr	r2, [pc, #132]	@ (80035a4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003520:	401a      	ands	r2, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1e      	ldr	r2, [pc, #120]	@ (80035a8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d11c      	bne.n	800356e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4a1d      	ldr	r2, [pc, #116]	@ (80035ac <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003538:	401a      	ands	r2, r3
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800353e:	051b      	lsls	r3, r3, #20
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4a1a      	ldr	r2, [pc, #104]	@ (80035b0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003548:	401a      	ands	r2, r3
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4a17      	ldr	r2, [pc, #92]	@ (80035b4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003556:	401a      	ands	r2, r3
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	4313      	orrs	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	4a15      	ldr	r2, [pc, #84]	@ (80035b8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003564:	401a      	ands	r2, r3
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	223c      	movs	r2, #60	@ 0x3c
 800357a:	2100      	movs	r1, #0
 800357c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	b004      	add	sp, #16
 8003586:	bd80      	pop	{r7, pc}
 8003588:	fffffcff 	.word	0xfffffcff
 800358c:	fffffbff 	.word	0xfffffbff
 8003590:	fffff7ff 	.word	0xfffff7ff
 8003594:	ffffefff 	.word	0xffffefff
 8003598:	ffffdfff 	.word	0xffffdfff
 800359c:	ffffbfff 	.word	0xffffbfff
 80035a0:	fff0ffff 	.word	0xfff0ffff
 80035a4:	efffffff 	.word	0xefffffff
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	ff0fffff 	.word	0xff0fffff
 80035b0:	feffffff 	.word	0xfeffffff
 80035b4:	fdffffff 	.word	0xfdffffff
 80035b8:	dfffffff 	.word	0xdfffffff

080035bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e046      	b.n	800365c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2288      	movs	r2, #136	@ 0x88
 80035d2:	589b      	ldr	r3, [r3, r2]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d107      	bne.n	80035e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2284      	movs	r2, #132	@ 0x84
 80035dc:	2100      	movs	r1, #0
 80035de:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	0018      	movs	r0, r3
 80035e4:	f7fd fc1c 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2288      	movs	r2, #136	@ 0x88
 80035ec:	2124      	movs	r1, #36	@ 0x24
 80035ee:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2101      	movs	r1, #1
 80035fc:	438a      	bics	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	0018      	movs	r0, r3
 800360c:	f000 fe8a 	bl	8004324 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	0018      	movs	r0, r3
 8003614:	f000 fbc8 	bl	8003da8 <UART_SetConfig>
 8003618:	0003      	movs	r3, r0
 800361a:	2b01      	cmp	r3, #1
 800361c:	d101      	bne.n	8003622 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e01c      	b.n	800365c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	490d      	ldr	r1, [pc, #52]	@ (8003664 <HAL_UART_Init+0xa8>)
 800362e:	400a      	ands	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	212a      	movs	r1, #42	@ 0x2a
 800363e:	438a      	bics	r2, r1
 8003640:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2101      	movs	r1, #1
 800364e:	430a      	orrs	r2, r1
 8003650:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	0018      	movs	r0, r3
 8003656:	f000 ff19 	bl	800448c <UART_CheckIdleState>
 800365a:	0003      	movs	r3, r0
}
 800365c:	0018      	movs	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	b002      	add	sp, #8
 8003662:	bd80      	pop	{r7, pc}
 8003664:	ffffb7ff 	.word	0xffffb7ff

08003668 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	1dbb      	adds	r3, r7, #6
 8003674:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	228c      	movs	r2, #140	@ 0x8c
 800367a:	589b      	ldr	r3, [r3, r2]
 800367c:	2b20      	cmp	r3, #32
 800367e:	d14a      	bne.n	8003716 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_UART_Receive_IT+0x26>
 8003686:	1dbb      	adds	r3, r7, #6
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e042      	b.n	8003718 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	2380      	movs	r3, #128	@ 0x80
 8003698:	015b      	lsls	r3, r3, #5
 800369a:	429a      	cmp	r2, r3
 800369c:	d109      	bne.n	80036b2 <HAL_UART_Receive_IT+0x4a>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d105      	bne.n	80036b2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2201      	movs	r2, #1
 80036aa:	4013      	ands	r3, r2
 80036ac:	d001      	beq.n	80036b2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e032      	b.n	8003718 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a18      	ldr	r2, [pc, #96]	@ (8003720 <HAL_UART_Receive_IT+0xb8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d020      	beq.n	8003704 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	2380      	movs	r3, #128	@ 0x80
 80036ca:	041b      	lsls	r3, r3, #16
 80036cc:	4013      	ands	r3, r2
 80036ce:	d019      	beq.n	8003704 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d0:	f3ef 8310 	mrs	r3, PRIMASK
 80036d4:	613b      	str	r3, [r7, #16]
  return(result);
 80036d6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	2301      	movs	r3, #1
 80036dc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f383 8810 	msr	PRIMASK, r3
}
 80036e4:	46c0      	nop			@ (mov r8, r8)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2180      	movs	r1, #128	@ 0x80
 80036f2:	04c9      	lsls	r1, r1, #19
 80036f4:	430a      	orrs	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f383 8810 	msr	PRIMASK, r3
}
 8003702:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003704:	1dbb      	adds	r3, r7, #6
 8003706:	881a      	ldrh	r2, [r3, #0]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	0018      	movs	r0, r3
 800370e:	f000 ffd7 	bl	80046c0 <UART_Start_Receive_IT>
 8003712:	0003      	movs	r3, r0
 8003714:	e000      	b.n	8003718 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8003716:	2302      	movs	r3, #2
  }
}
 8003718:	0018      	movs	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	b008      	add	sp, #32
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40008000 	.word	0x40008000

08003724 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003724:	b5b0      	push	{r4, r5, r7, lr}
 8003726:	b0aa      	sub	sp, #168	@ 0xa8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	22a4      	movs	r2, #164	@ 0xa4
 8003734:	18b9      	adds	r1, r7, r2
 8003736:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	20a0      	movs	r0, #160	@ 0xa0
 8003740:	1839      	adds	r1, r7, r0
 8003742:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	249c      	movs	r4, #156	@ 0x9c
 800374c:	1939      	adds	r1, r7, r4
 800374e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003750:	0011      	movs	r1, r2
 8003752:	18bb      	adds	r3, r7, r2
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4aa2      	ldr	r2, [pc, #648]	@ (80039e0 <HAL_UART_IRQHandler+0x2bc>)
 8003758:	4013      	ands	r3, r2
 800375a:	2298      	movs	r2, #152	@ 0x98
 800375c:	18bd      	adds	r5, r7, r2
 800375e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003760:	18bb      	adds	r3, r7, r2
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d11a      	bne.n	800379e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003768:	187b      	adds	r3, r7, r1
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2220      	movs	r2, #32
 800376e:	4013      	ands	r3, r2
 8003770:	d015      	beq.n	800379e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003772:	183b      	adds	r3, r7, r0
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2220      	movs	r2, #32
 8003778:	4013      	ands	r3, r2
 800377a:	d105      	bne.n	8003788 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800377c:	193b      	adds	r3, r7, r4
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	2380      	movs	r3, #128	@ 0x80
 8003782:	055b      	lsls	r3, r3, #21
 8003784:	4013      	ands	r3, r2
 8003786:	d00a      	beq.n	800379e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800378c:	2b00      	cmp	r3, #0
 800378e:	d100      	bne.n	8003792 <HAL_UART_IRQHandler+0x6e>
 8003790:	e2dc      	b.n	8003d4c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	0010      	movs	r0, r2
 800379a:	4798      	blx	r3
      }
      return;
 800379c:	e2d6      	b.n	8003d4c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800379e:	2398      	movs	r3, #152	@ 0x98
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d100      	bne.n	80037aa <HAL_UART_IRQHandler+0x86>
 80037a8:	e122      	b.n	80039f0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80037aa:	239c      	movs	r3, #156	@ 0x9c
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a8c      	ldr	r2, [pc, #560]	@ (80039e4 <HAL_UART_IRQHandler+0x2c0>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	d106      	bne.n	80037c4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80037b6:	23a0      	movs	r3, #160	@ 0xa0
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a8a      	ldr	r2, [pc, #552]	@ (80039e8 <HAL_UART_IRQHandler+0x2c4>)
 80037be:	4013      	ands	r3, r2
 80037c0:	d100      	bne.n	80037c4 <HAL_UART_IRQHandler+0xa0>
 80037c2:	e115      	b.n	80039f0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037c4:	23a4      	movs	r3, #164	@ 0xa4
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2201      	movs	r2, #1
 80037cc:	4013      	ands	r3, r2
 80037ce:	d012      	beq.n	80037f6 <HAL_UART_IRQHandler+0xd2>
 80037d0:	23a0      	movs	r3, #160	@ 0xa0
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	2380      	movs	r3, #128	@ 0x80
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	4013      	ands	r3, r2
 80037dc:	d00b      	beq.n	80037f6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2201      	movs	r2, #1
 80037e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2290      	movs	r2, #144	@ 0x90
 80037ea:	589b      	ldr	r3, [r3, r2]
 80037ec:	2201      	movs	r2, #1
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2190      	movs	r1, #144	@ 0x90
 80037f4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037f6:	23a4      	movs	r3, #164	@ 0xa4
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2202      	movs	r2, #2
 80037fe:	4013      	ands	r3, r2
 8003800:	d011      	beq.n	8003826 <HAL_UART_IRQHandler+0x102>
 8003802:	239c      	movs	r3, #156	@ 0x9c
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2201      	movs	r2, #1
 800380a:	4013      	ands	r3, r2
 800380c:	d00b      	beq.n	8003826 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2202      	movs	r2, #2
 8003814:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2290      	movs	r2, #144	@ 0x90
 800381a:	589b      	ldr	r3, [r3, r2]
 800381c:	2204      	movs	r2, #4
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2190      	movs	r1, #144	@ 0x90
 8003824:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003826:	23a4      	movs	r3, #164	@ 0xa4
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2204      	movs	r2, #4
 800382e:	4013      	ands	r3, r2
 8003830:	d011      	beq.n	8003856 <HAL_UART_IRQHandler+0x132>
 8003832:	239c      	movs	r3, #156	@ 0x9c
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2201      	movs	r2, #1
 800383a:	4013      	ands	r3, r2
 800383c:	d00b      	beq.n	8003856 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2204      	movs	r2, #4
 8003844:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2290      	movs	r2, #144	@ 0x90
 800384a:	589b      	ldr	r3, [r3, r2]
 800384c:	2202      	movs	r2, #2
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2190      	movs	r1, #144	@ 0x90
 8003854:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003856:	23a4      	movs	r3, #164	@ 0xa4
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2208      	movs	r2, #8
 800385e:	4013      	ands	r3, r2
 8003860:	d017      	beq.n	8003892 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003862:	23a0      	movs	r3, #160	@ 0xa0
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2220      	movs	r2, #32
 800386a:	4013      	ands	r3, r2
 800386c:	d105      	bne.n	800387a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800386e:	239c      	movs	r3, #156	@ 0x9c
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a5b      	ldr	r2, [pc, #364]	@ (80039e4 <HAL_UART_IRQHandler+0x2c0>)
 8003876:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003878:	d00b      	beq.n	8003892 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2208      	movs	r2, #8
 8003880:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2290      	movs	r2, #144	@ 0x90
 8003886:	589b      	ldr	r3, [r3, r2]
 8003888:	2208      	movs	r2, #8
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2190      	movs	r1, #144	@ 0x90
 8003890:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003892:	23a4      	movs	r3, #164	@ 0xa4
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	2380      	movs	r3, #128	@ 0x80
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	4013      	ands	r3, r2
 800389e:	d013      	beq.n	80038c8 <HAL_UART_IRQHandler+0x1a4>
 80038a0:	23a0      	movs	r3, #160	@ 0xa0
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	2380      	movs	r3, #128	@ 0x80
 80038a8:	04db      	lsls	r3, r3, #19
 80038aa:	4013      	ands	r3, r2
 80038ac:	d00c      	beq.n	80038c8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2280      	movs	r2, #128	@ 0x80
 80038b4:	0112      	lsls	r2, r2, #4
 80038b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2290      	movs	r2, #144	@ 0x90
 80038bc:	589b      	ldr	r3, [r3, r2]
 80038be:	2220      	movs	r2, #32
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2190      	movs	r1, #144	@ 0x90
 80038c6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2290      	movs	r2, #144	@ 0x90
 80038cc:	589b      	ldr	r3, [r3, r2]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d100      	bne.n	80038d4 <HAL_UART_IRQHandler+0x1b0>
 80038d2:	e23d      	b.n	8003d50 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038d4:	23a4      	movs	r3, #164	@ 0xa4
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2220      	movs	r2, #32
 80038dc:	4013      	ands	r3, r2
 80038de:	d015      	beq.n	800390c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80038e0:	23a0      	movs	r3, #160	@ 0xa0
 80038e2:	18fb      	adds	r3, r7, r3
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2220      	movs	r2, #32
 80038e8:	4013      	ands	r3, r2
 80038ea:	d106      	bne.n	80038fa <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80038ec:	239c      	movs	r3, #156	@ 0x9c
 80038ee:	18fb      	adds	r3, r7, r3
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	2380      	movs	r3, #128	@ 0x80
 80038f4:	055b      	lsls	r3, r3, #21
 80038f6:	4013      	ands	r3, r2
 80038f8:	d008      	beq.n	800390c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d004      	beq.n	800390c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	0010      	movs	r0, r2
 800390a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2290      	movs	r2, #144	@ 0x90
 8003910:	589b      	ldr	r3, [r3, r2]
 8003912:	2194      	movs	r1, #148	@ 0x94
 8003914:	187a      	adds	r2, r7, r1
 8003916:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2240      	movs	r2, #64	@ 0x40
 8003920:	4013      	ands	r3, r2
 8003922:	2b40      	cmp	r3, #64	@ 0x40
 8003924:	d004      	beq.n	8003930 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003926:	187b      	adds	r3, r7, r1
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2228      	movs	r2, #40	@ 0x28
 800392c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800392e:	d04c      	beq.n	80039ca <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	0018      	movs	r0, r3
 8003934:	f000 ffe8 	bl	8004908 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2240      	movs	r2, #64	@ 0x40
 8003940:	4013      	ands	r3, r2
 8003942:	2b40      	cmp	r3, #64	@ 0x40
 8003944:	d13c      	bne.n	80039c0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003946:	f3ef 8310 	mrs	r3, PRIMASK
 800394a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800394c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800394e:	2090      	movs	r0, #144	@ 0x90
 8003950:	183a      	adds	r2, r7, r0
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	2301      	movs	r3, #1
 8003956:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003958:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800395a:	f383 8810 	msr	PRIMASK, r3
}
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2140      	movs	r1, #64	@ 0x40
 800396c:	438a      	bics	r2, r1
 800396e:	609a      	str	r2, [r3, #8]
 8003970:	183b      	adds	r3, r7, r0
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003976:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003978:	f383 8810 	msr	PRIMASK, r3
}
 800397c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2280      	movs	r2, #128	@ 0x80
 8003982:	589b      	ldr	r3, [r3, r2]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d016      	beq.n	80039b6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2280      	movs	r2, #128	@ 0x80
 800398c:	589b      	ldr	r3, [r3, r2]
 800398e:	4a17      	ldr	r2, [pc, #92]	@ (80039ec <HAL_UART_IRQHandler+0x2c8>)
 8003990:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2280      	movs	r2, #128	@ 0x80
 8003996:	589b      	ldr	r3, [r3, r2]
 8003998:	0018      	movs	r0, r3
 800399a:	f7fd fcc7 	bl	800132c <HAL_DMA_Abort_IT>
 800399e:	1e03      	subs	r3, r0, #0
 80039a0:	d01c      	beq.n	80039dc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2280      	movs	r2, #128	@ 0x80
 80039a6:	589b      	ldr	r3, [r3, r2]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	2180      	movs	r1, #128	@ 0x80
 80039ae:	5852      	ldr	r2, [r2, r1]
 80039b0:	0010      	movs	r0, r2
 80039b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b4:	e012      	b.n	80039dc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	0018      	movs	r0, r3
 80039ba:	f000 f9e1 	bl	8003d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039be:	e00d      	b.n	80039dc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f000 f9dc 	bl	8003d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c8:	e008      	b.n	80039dc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	0018      	movs	r0, r3
 80039ce:	f000 f9d7 	bl	8003d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2290      	movs	r2, #144	@ 0x90
 80039d6:	2100      	movs	r1, #0
 80039d8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80039da:	e1b9      	b.n	8003d50 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039dc:	46c0      	nop			@ (mov r8, r8)
    return;
 80039de:	e1b7      	b.n	8003d50 <HAL_UART_IRQHandler+0x62c>
 80039e0:	0000080f 	.word	0x0000080f
 80039e4:	10000001 	.word	0x10000001
 80039e8:	04000120 	.word	0x04000120
 80039ec:	080049d5 	.word	0x080049d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d000      	beq.n	80039fa <HAL_UART_IRQHandler+0x2d6>
 80039f8:	e13e      	b.n	8003c78 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80039fa:	23a4      	movs	r3, #164	@ 0xa4
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2210      	movs	r2, #16
 8003a02:	4013      	ands	r3, r2
 8003a04:	d100      	bne.n	8003a08 <HAL_UART_IRQHandler+0x2e4>
 8003a06:	e137      	b.n	8003c78 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a08:	23a0      	movs	r3, #160	@ 0xa0
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2210      	movs	r2, #16
 8003a10:	4013      	ands	r3, r2
 8003a12:	d100      	bne.n	8003a16 <HAL_UART_IRQHandler+0x2f2>
 8003a14:	e130      	b.n	8003c78 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2210      	movs	r2, #16
 8003a1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2240      	movs	r2, #64	@ 0x40
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b40      	cmp	r3, #64	@ 0x40
 8003a2a:	d000      	beq.n	8003a2e <HAL_UART_IRQHandler+0x30a>
 8003a2c:	e0a4      	b.n	8003b78 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2280      	movs	r2, #128	@ 0x80
 8003a32:	589b      	ldr	r3, [r3, r2]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	217e      	movs	r1, #126	@ 0x7e
 8003a3a:	187b      	adds	r3, r7, r1
 8003a3c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003a3e:	187b      	adds	r3, r7, r1
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d100      	bne.n	8003a48 <HAL_UART_IRQHandler+0x324>
 8003a46:	e185      	b.n	8003d54 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	225c      	movs	r2, #92	@ 0x5c
 8003a4c:	5a9b      	ldrh	r3, [r3, r2]
 8003a4e:	187a      	adds	r2, r7, r1
 8003a50:	8812      	ldrh	r2, [r2, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d300      	bcc.n	8003a58 <HAL_UART_IRQHandler+0x334>
 8003a56:	e17d      	b.n	8003d54 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	187a      	adds	r2, r7, r1
 8003a5c:	215e      	movs	r1, #94	@ 0x5e
 8003a5e:	8812      	ldrh	r2, [r2, #0]
 8003a60:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2280      	movs	r2, #128	@ 0x80
 8003a66:	589b      	ldr	r3, [r3, r2]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d170      	bne.n	8003b54 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a72:	f3ef 8310 	mrs	r3, PRIMASK
 8003a76:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a82:	f383 8810 	msr	PRIMASK, r3
}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	49b4      	ldr	r1, [pc, #720]	@ (8003d64 <HAL_UART_IRQHandler+0x640>)
 8003a94:	400a      	ands	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a9e:	f383 8810 	msr	PRIMASK, r3
}
 8003aa2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aac:	677b      	str	r3, [r7, #116]	@ 0x74
 8003aae:	2301      	movs	r3, #1
 8003ab0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ab4:	f383 8810 	msr	PRIMASK, r3
}
 8003ab8:	46c0      	nop			@ (mov r8, r8)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	438a      	bics	r2, r1
 8003ac8:	609a      	str	r2, [r3, #8]
 8003aca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003acc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ace:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ad0:	f383 8810 	msr	PRIMASK, r3
}
 8003ad4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8003ada:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003adc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ade:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ae6:	f383 8810 	msr	PRIMASK, r3
}
 8003aea:	46c0      	nop			@ (mov r8, r8)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2140      	movs	r1, #64	@ 0x40
 8003af8:	438a      	bics	r2, r1
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003afe:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b02:	f383 8810 	msr	PRIMASK, r3
}
 8003b06:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	228c      	movs	r2, #140	@ 0x8c
 8003b0c:	2120      	movs	r1, #32
 8003b0e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b16:	f3ef 8310 	mrs	r3, PRIMASK
 8003b1a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b20:	2301      	movs	r3, #1
 8003b22:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b26:	f383 8810 	msr	PRIMASK, r3
}
 8003b2a:	46c0      	nop			@ (mov r8, r8)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2110      	movs	r1, #16
 8003b38:	438a      	bics	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]
 8003b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b42:	f383 8810 	msr	PRIMASK, r3
}
 8003b46:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2280      	movs	r2, #128	@ 0x80
 8003b4c:	589b      	ldr	r3, [r3, r2]
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f7fd fb8a 	bl	8001268 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	225c      	movs	r2, #92	@ 0x5c
 8003b5e:	5a9a      	ldrh	r2, [r3, r2]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	215e      	movs	r1, #94	@ 0x5e
 8003b64:	5a5b      	ldrh	r3, [r3, r1]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	0011      	movs	r1, r2
 8003b70:	0018      	movs	r0, r3
 8003b72:	f000 f90d 	bl	8003d90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b76:	e0ed      	b.n	8003d54 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	225c      	movs	r2, #92	@ 0x5c
 8003b7c:	5a99      	ldrh	r1, [r3, r2]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	225e      	movs	r2, #94	@ 0x5e
 8003b82:	5a9b      	ldrh	r3, [r3, r2]
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	208e      	movs	r0, #142	@ 0x8e
 8003b88:	183b      	adds	r3, r7, r0
 8003b8a:	1a8a      	subs	r2, r1, r2
 8003b8c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	225e      	movs	r2, #94	@ 0x5e
 8003b92:	5a9b      	ldrh	r3, [r3, r2]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d100      	bne.n	8003b9c <HAL_UART_IRQHandler+0x478>
 8003b9a:	e0dd      	b.n	8003d58 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003b9c:	183b      	adds	r3, r7, r0
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d100      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x482>
 8003ba4:	e0d8      	b.n	8003d58 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8003baa:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bac:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bae:	2488      	movs	r4, #136	@ 0x88
 8003bb0:	193a      	adds	r2, r7, r4
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f383 8810 	msr	PRIMASK, r3
}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4967      	ldr	r1, [pc, #412]	@ (8003d68 <HAL_UART_IRQHandler+0x644>)
 8003bcc:	400a      	ands	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	193b      	adds	r3, r7, r4
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f383 8810 	msr	PRIMASK, r3
}
 8003bdc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bde:	f3ef 8310 	mrs	r3, PRIMASK
 8003be2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003be4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003be6:	2484      	movs	r4, #132	@ 0x84
 8003be8:	193a      	adds	r2, r7, r4
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	2301      	movs	r3, #1
 8003bee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f383 8810 	msr	PRIMASK, r3
}
 8003bf6:	46c0      	nop			@ (mov r8, r8)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	495a      	ldr	r1, [pc, #360]	@ (8003d6c <HAL_UART_IRQHandler+0x648>)
 8003c04:	400a      	ands	r2, r1
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	193b      	adds	r3, r7, r4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	f383 8810 	msr	PRIMASK, r3
}
 8003c14:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	228c      	movs	r2, #140	@ 0x8c
 8003c1a:	2120      	movs	r1, #32
 8003c1c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c32:	2480      	movs	r4, #128	@ 0x80
 8003c34:	193a      	adds	r2, r7, r4
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	2301      	movs	r3, #1
 8003c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3e:	f383 8810 	msr	PRIMASK, r3
}
 8003c42:	46c0      	nop			@ (mov r8, r8)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2110      	movs	r1, #16
 8003c50:	438a      	bics	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	193b      	adds	r3, r7, r4
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5c:	f383 8810 	msr	PRIMASK, r3
}
 8003c60:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c68:	183b      	adds	r3, r7, r0
 8003c6a:	881a      	ldrh	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	0011      	movs	r1, r2
 8003c70:	0018      	movs	r0, r3
 8003c72:	f000 f88d 	bl	8003d90 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c76:	e06f      	b.n	8003d58 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c78:	23a4      	movs	r3, #164	@ 0xa4
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	2380      	movs	r3, #128	@ 0x80
 8003c80:	035b      	lsls	r3, r3, #13
 8003c82:	4013      	ands	r3, r2
 8003c84:	d010      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x584>
 8003c86:	239c      	movs	r3, #156	@ 0x9c
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	2380      	movs	r3, #128	@ 0x80
 8003c8e:	03db      	lsls	r3, r3, #15
 8003c90:	4013      	ands	r3, r2
 8003c92:	d009      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2280      	movs	r2, #128	@ 0x80
 8003c9a:	0352      	lsls	r2, r2, #13
 8003c9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f001 fbeb 	bl	800547c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ca6:	e05a      	b.n	8003d5e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003ca8:	23a4      	movs	r3, #164	@ 0xa4
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2280      	movs	r2, #128	@ 0x80
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d016      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003cb4:	23a0      	movs	r3, #160	@ 0xa0
 8003cb6:	18fb      	adds	r3, r7, r3
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2280      	movs	r2, #128	@ 0x80
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d106      	bne.n	8003cce <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003cc0:	239c      	movs	r3, #156	@ 0x9c
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	2380      	movs	r3, #128	@ 0x80
 8003cc8:	041b      	lsls	r3, r3, #16
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d009      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d042      	beq.n	8003d5c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	0010      	movs	r0, r2
 8003cde:	4798      	blx	r3
    }
    return;
 8003ce0:	e03c      	b.n	8003d5c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ce2:	23a4      	movs	r3, #164	@ 0xa4
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2240      	movs	r2, #64	@ 0x40
 8003cea:	4013      	ands	r3, r2
 8003cec:	d00a      	beq.n	8003d04 <HAL_UART_IRQHandler+0x5e0>
 8003cee:	23a0      	movs	r3, #160	@ 0xa0
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2240      	movs	r2, #64	@ 0x40
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f000 fe80 	bl	8004a02 <UART_EndTransmit_IT>
    return;
 8003d02:	e02c      	b.n	8003d5e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003d04:	23a4      	movs	r3, #164	@ 0xa4
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	2380      	movs	r3, #128	@ 0x80
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d00b      	beq.n	8003d2a <HAL_UART_IRQHandler+0x606>
 8003d12:	23a0      	movs	r3, #160	@ 0xa0
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	2380      	movs	r3, #128	@ 0x80
 8003d1a:	05db      	lsls	r3, r3, #23
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d004      	beq.n	8003d2a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	0018      	movs	r0, r3
 8003d24:	f001 fbba 	bl	800549c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d28:	e019      	b.n	8003d5e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003d2a:	23a4      	movs	r3, #164	@ 0xa4
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	2380      	movs	r3, #128	@ 0x80
 8003d32:	045b      	lsls	r3, r3, #17
 8003d34:	4013      	ands	r3, r2
 8003d36:	d012      	beq.n	8003d5e <HAL_UART_IRQHandler+0x63a>
 8003d38:	23a0      	movs	r3, #160	@ 0xa0
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	da0d      	bge.n	8003d5e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	0018      	movs	r0, r3
 8003d46:	f001 fba1 	bl	800548c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d4a:	e008      	b.n	8003d5e <HAL_UART_IRQHandler+0x63a>
      return;
 8003d4c:	46c0      	nop			@ (mov r8, r8)
 8003d4e:	e006      	b.n	8003d5e <HAL_UART_IRQHandler+0x63a>
    return;
 8003d50:	46c0      	nop			@ (mov r8, r8)
 8003d52:	e004      	b.n	8003d5e <HAL_UART_IRQHandler+0x63a>
      return;
 8003d54:	46c0      	nop			@ (mov r8, r8)
 8003d56:	e002      	b.n	8003d5e <HAL_UART_IRQHandler+0x63a>
      return;
 8003d58:	46c0      	nop			@ (mov r8, r8)
 8003d5a:	e000      	b.n	8003d5e <HAL_UART_IRQHandler+0x63a>
    return;
 8003d5c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b02a      	add	sp, #168	@ 0xa8
 8003d62:	bdb0      	pop	{r4, r5, r7, pc}
 8003d64:	fffffeff 	.word	0xfffffeff
 8003d68:	fffffedf 	.word	0xfffffedf
 8003d6c:	effffffe 	.word	0xeffffffe

08003d70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d78:	46c0      	nop			@ (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b002      	add	sp, #8
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d88:	46c0      	nop			@ (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b002      	add	sp, #8
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	000a      	movs	r2, r1
 8003d9a:	1cbb      	adds	r3, r7, #2
 8003d9c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b002      	add	sp, #8
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da8:	b5b0      	push	{r4, r5, r7, lr}
 8003daa:	b090      	sub	sp, #64	@ 0x40
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003db0:	231a      	movs	r3, #26
 8003db2:	2220      	movs	r2, #32
 8003db4:	189b      	adds	r3, r3, r2
 8003db6:	19db      	adds	r3, r3, r7
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4aaf      	ldr	r2, [pc, #700]	@ (8004098 <UART_SetConfig+0x2f0>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	0019      	movs	r1, r3
 8003de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003de6:	430b      	orrs	r3, r1
 8003de8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4aaa      	ldr	r2, [pc, #680]	@ (800409c <UART_SetConfig+0x2f4>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	0018      	movs	r0, r3
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	68d9      	ldr	r1, [r3, #12]
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	0003      	movs	r3, r0
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4aa4      	ldr	r2, [pc, #656]	@ (80040a0 <UART_SetConfig+0x2f8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4a9f      	ldr	r2, [pc, #636]	@ (80040a4 <UART_SetConfig+0x2fc>)
 8003e26:	4013      	ands	r3, r2
 8003e28:	0019      	movs	r1, r3
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e30:	430b      	orrs	r3, r1
 8003e32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3a:	220f      	movs	r2, #15
 8003e3c:	4393      	bics	r3, r2
 8003e3e:	0018      	movs	r0, r3
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	0003      	movs	r3, r0
 8003e4a:	430b      	orrs	r3, r1
 8003e4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a95      	ldr	r2, [pc, #596]	@ (80040a8 <UART_SetConfig+0x300>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d131      	bne.n	8003ebc <UART_SetConfig+0x114>
 8003e58:	4b94      	ldr	r3, [pc, #592]	@ (80040ac <UART_SetConfig+0x304>)
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d01d      	beq.n	8003ea0 <UART_SetConfig+0xf8>
 8003e64:	d823      	bhi.n	8003eae <UART_SetConfig+0x106>
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d00c      	beq.n	8003e84 <UART_SetConfig+0xdc>
 8003e6a:	d820      	bhi.n	8003eae <UART_SetConfig+0x106>
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <UART_SetConfig+0xce>
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d00e      	beq.n	8003e92 <UART_SetConfig+0xea>
 8003e74:	e01b      	b.n	8003eae <UART_SetConfig+0x106>
 8003e76:	231b      	movs	r3, #27
 8003e78:	2220      	movs	r2, #32
 8003e7a:	189b      	adds	r3, r3, r2
 8003e7c:	19db      	adds	r3, r3, r7
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
 8003e82:	e0b4      	b.n	8003fee <UART_SetConfig+0x246>
 8003e84:	231b      	movs	r3, #27
 8003e86:	2220      	movs	r2, #32
 8003e88:	189b      	adds	r3, r3, r2
 8003e8a:	19db      	adds	r3, r3, r7
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	701a      	strb	r2, [r3, #0]
 8003e90:	e0ad      	b.n	8003fee <UART_SetConfig+0x246>
 8003e92:	231b      	movs	r3, #27
 8003e94:	2220      	movs	r2, #32
 8003e96:	189b      	adds	r3, r3, r2
 8003e98:	19db      	adds	r3, r3, r7
 8003e9a:	2204      	movs	r2, #4
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	e0a6      	b.n	8003fee <UART_SetConfig+0x246>
 8003ea0:	231b      	movs	r3, #27
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	189b      	adds	r3, r3, r2
 8003ea6:	19db      	adds	r3, r3, r7
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	e09f      	b.n	8003fee <UART_SetConfig+0x246>
 8003eae:	231b      	movs	r3, #27
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	189b      	adds	r3, r3, r2
 8003eb4:	19db      	adds	r3, r3, r7
 8003eb6:	2210      	movs	r2, #16
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	e098      	b.n	8003fee <UART_SetConfig+0x246>
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a7b      	ldr	r2, [pc, #492]	@ (80040b0 <UART_SetConfig+0x308>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d131      	bne.n	8003f2a <UART_SetConfig+0x182>
 8003ec6:	4b79      	ldr	r3, [pc, #484]	@ (80040ac <UART_SetConfig+0x304>)
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eca:	220c      	movs	r2, #12
 8003ecc:	4013      	ands	r3, r2
 8003ece:	2b0c      	cmp	r3, #12
 8003ed0:	d01d      	beq.n	8003f0e <UART_SetConfig+0x166>
 8003ed2:	d823      	bhi.n	8003f1c <UART_SetConfig+0x174>
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d00c      	beq.n	8003ef2 <UART_SetConfig+0x14a>
 8003ed8:	d820      	bhi.n	8003f1c <UART_SetConfig+0x174>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <UART_SetConfig+0x13c>
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d00e      	beq.n	8003f00 <UART_SetConfig+0x158>
 8003ee2:	e01b      	b.n	8003f1c <UART_SetConfig+0x174>
 8003ee4:	231b      	movs	r3, #27
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	189b      	adds	r3, r3, r2
 8003eea:	19db      	adds	r3, r3, r7
 8003eec:	2200      	movs	r2, #0
 8003eee:	701a      	strb	r2, [r3, #0]
 8003ef0:	e07d      	b.n	8003fee <UART_SetConfig+0x246>
 8003ef2:	231b      	movs	r3, #27
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	189b      	adds	r3, r3, r2
 8003ef8:	19db      	adds	r3, r3, r7
 8003efa:	2202      	movs	r2, #2
 8003efc:	701a      	strb	r2, [r3, #0]
 8003efe:	e076      	b.n	8003fee <UART_SetConfig+0x246>
 8003f00:	231b      	movs	r3, #27
 8003f02:	2220      	movs	r2, #32
 8003f04:	189b      	adds	r3, r3, r2
 8003f06:	19db      	adds	r3, r3, r7
 8003f08:	2204      	movs	r2, #4
 8003f0a:	701a      	strb	r2, [r3, #0]
 8003f0c:	e06f      	b.n	8003fee <UART_SetConfig+0x246>
 8003f0e:	231b      	movs	r3, #27
 8003f10:	2220      	movs	r2, #32
 8003f12:	189b      	adds	r3, r3, r2
 8003f14:	19db      	adds	r3, r3, r7
 8003f16:	2208      	movs	r2, #8
 8003f18:	701a      	strb	r2, [r3, #0]
 8003f1a:	e068      	b.n	8003fee <UART_SetConfig+0x246>
 8003f1c:	231b      	movs	r3, #27
 8003f1e:	2220      	movs	r2, #32
 8003f20:	189b      	adds	r3, r3, r2
 8003f22:	19db      	adds	r3, r3, r7
 8003f24:	2210      	movs	r2, #16
 8003f26:	701a      	strb	r2, [r3, #0]
 8003f28:	e061      	b.n	8003fee <UART_SetConfig+0x246>
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a61      	ldr	r2, [pc, #388]	@ (80040b4 <UART_SetConfig+0x30c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d106      	bne.n	8003f42 <UART_SetConfig+0x19a>
 8003f34:	231b      	movs	r3, #27
 8003f36:	2220      	movs	r2, #32
 8003f38:	189b      	adds	r3, r3, r2
 8003f3a:	19db      	adds	r3, r3, r7
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	701a      	strb	r2, [r3, #0]
 8003f40:	e055      	b.n	8003fee <UART_SetConfig+0x246>
 8003f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a5c      	ldr	r2, [pc, #368]	@ (80040b8 <UART_SetConfig+0x310>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d106      	bne.n	8003f5a <UART_SetConfig+0x1b2>
 8003f4c:	231b      	movs	r3, #27
 8003f4e:	2220      	movs	r2, #32
 8003f50:	189b      	adds	r3, r3, r2
 8003f52:	19db      	adds	r3, r3, r7
 8003f54:	2200      	movs	r2, #0
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	e049      	b.n	8003fee <UART_SetConfig+0x246>
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a50      	ldr	r2, [pc, #320]	@ (80040a0 <UART_SetConfig+0x2f8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d13e      	bne.n	8003fe2 <UART_SetConfig+0x23a>
 8003f64:	4b51      	ldr	r3, [pc, #324]	@ (80040ac <UART_SetConfig+0x304>)
 8003f66:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003f68:	23c0      	movs	r3, #192	@ 0xc0
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	22c0      	movs	r2, #192	@ 0xc0
 8003f70:	0112      	lsls	r2, r2, #4
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d027      	beq.n	8003fc6 <UART_SetConfig+0x21e>
 8003f76:	22c0      	movs	r2, #192	@ 0xc0
 8003f78:	0112      	lsls	r2, r2, #4
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d82a      	bhi.n	8003fd4 <UART_SetConfig+0x22c>
 8003f7e:	2280      	movs	r2, #128	@ 0x80
 8003f80:	0112      	lsls	r2, r2, #4
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d011      	beq.n	8003faa <UART_SetConfig+0x202>
 8003f86:	2280      	movs	r2, #128	@ 0x80
 8003f88:	0112      	lsls	r2, r2, #4
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d822      	bhi.n	8003fd4 <UART_SetConfig+0x22c>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d004      	beq.n	8003f9c <UART_SetConfig+0x1f4>
 8003f92:	2280      	movs	r2, #128	@ 0x80
 8003f94:	00d2      	lsls	r2, r2, #3
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00e      	beq.n	8003fb8 <UART_SetConfig+0x210>
 8003f9a:	e01b      	b.n	8003fd4 <UART_SetConfig+0x22c>
 8003f9c:	231b      	movs	r3, #27
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	189b      	adds	r3, r3, r2
 8003fa2:	19db      	adds	r3, r3, r7
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	e021      	b.n	8003fee <UART_SetConfig+0x246>
 8003faa:	231b      	movs	r3, #27
 8003fac:	2220      	movs	r2, #32
 8003fae:	189b      	adds	r3, r3, r2
 8003fb0:	19db      	adds	r3, r3, r7
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	e01a      	b.n	8003fee <UART_SetConfig+0x246>
 8003fb8:	231b      	movs	r3, #27
 8003fba:	2220      	movs	r2, #32
 8003fbc:	189b      	adds	r3, r3, r2
 8003fbe:	19db      	adds	r3, r3, r7
 8003fc0:	2204      	movs	r2, #4
 8003fc2:	701a      	strb	r2, [r3, #0]
 8003fc4:	e013      	b.n	8003fee <UART_SetConfig+0x246>
 8003fc6:	231b      	movs	r3, #27
 8003fc8:	2220      	movs	r2, #32
 8003fca:	189b      	adds	r3, r3, r2
 8003fcc:	19db      	adds	r3, r3, r7
 8003fce:	2208      	movs	r2, #8
 8003fd0:	701a      	strb	r2, [r3, #0]
 8003fd2:	e00c      	b.n	8003fee <UART_SetConfig+0x246>
 8003fd4:	231b      	movs	r3, #27
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	189b      	adds	r3, r3, r2
 8003fda:	19db      	adds	r3, r3, r7
 8003fdc:	2210      	movs	r2, #16
 8003fde:	701a      	strb	r2, [r3, #0]
 8003fe0:	e005      	b.n	8003fee <UART_SetConfig+0x246>
 8003fe2:	231b      	movs	r3, #27
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	189b      	adds	r3, r3, r2
 8003fe8:	19db      	adds	r3, r3, r7
 8003fea:	2210      	movs	r2, #16
 8003fec:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a2b      	ldr	r2, [pc, #172]	@ (80040a0 <UART_SetConfig+0x2f8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d000      	beq.n	8003ffa <UART_SetConfig+0x252>
 8003ff8:	e0a9      	b.n	800414e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ffa:	231b      	movs	r3, #27
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	189b      	adds	r3, r3, r2
 8004000:	19db      	adds	r3, r3, r7
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b08      	cmp	r3, #8
 8004006:	d015      	beq.n	8004034 <UART_SetConfig+0x28c>
 8004008:	dc18      	bgt.n	800403c <UART_SetConfig+0x294>
 800400a:	2b04      	cmp	r3, #4
 800400c:	d00d      	beq.n	800402a <UART_SetConfig+0x282>
 800400e:	dc15      	bgt.n	800403c <UART_SetConfig+0x294>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <UART_SetConfig+0x272>
 8004014:	2b02      	cmp	r3, #2
 8004016:	d005      	beq.n	8004024 <UART_SetConfig+0x27c>
 8004018:	e010      	b.n	800403c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800401a:	f7fe f86d 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 800401e:	0003      	movs	r3, r0
 8004020:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004022:	e014      	b.n	800404e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004024:	4b25      	ldr	r3, [pc, #148]	@ (80040bc <UART_SetConfig+0x314>)
 8004026:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004028:	e011      	b.n	800404e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402a:	f7fd ffd9 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 800402e:	0003      	movs	r3, r0
 8004030:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004032:	e00c      	b.n	800404e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004034:	2380      	movs	r3, #128	@ 0x80
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800403a:	e008      	b.n	800404e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004040:	231a      	movs	r3, #26
 8004042:	2220      	movs	r2, #32
 8004044:	189b      	adds	r3, r3, r2
 8004046:	19db      	adds	r3, r3, r7
 8004048:	2201      	movs	r2, #1
 800404a:	701a      	strb	r2, [r3, #0]
        break;
 800404c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800404e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004050:	2b00      	cmp	r3, #0
 8004052:	d100      	bne.n	8004056 <UART_SetConfig+0x2ae>
 8004054:	e14b      	b.n	80042ee <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800405a:	4b19      	ldr	r3, [pc, #100]	@ (80040c0 <UART_SetConfig+0x318>)
 800405c:	0052      	lsls	r2, r2, #1
 800405e:	5ad3      	ldrh	r3, [r2, r3]
 8004060:	0019      	movs	r1, r3
 8004062:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004064:	f7fc f84e 	bl	8000104 <__udivsi3>
 8004068:	0003      	movs	r3, r0
 800406a:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	0013      	movs	r3, r2
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	189b      	adds	r3, r3, r2
 8004076:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004078:	429a      	cmp	r2, r3
 800407a:	d305      	bcc.n	8004088 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800407c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004082:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004084:	429a      	cmp	r2, r3
 8004086:	d91d      	bls.n	80040c4 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004088:	231a      	movs	r3, #26
 800408a:	2220      	movs	r2, #32
 800408c:	189b      	adds	r3, r3, r2
 800408e:	19db      	adds	r3, r3, r7
 8004090:	2201      	movs	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	e12b      	b.n	80042ee <UART_SetConfig+0x546>
 8004096:	46c0      	nop			@ (mov r8, r8)
 8004098:	cfff69f3 	.word	0xcfff69f3
 800409c:	ffffcfff 	.word	0xffffcfff
 80040a0:	40008000 	.word	0x40008000
 80040a4:	11fff4ff 	.word	0x11fff4ff
 80040a8:	40013800 	.word	0x40013800
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40004400 	.word	0x40004400
 80040b4:	40004800 	.word	0x40004800
 80040b8:	40004c00 	.word	0x40004c00
 80040bc:	00f42400 	.word	0x00f42400
 80040c0:	08005804 	.word	0x08005804
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c6:	61bb      	str	r3, [r7, #24]
 80040c8:	2300      	movs	r3, #0
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040d0:	4b92      	ldr	r3, [pc, #584]	@ (800431c <UART_SetConfig+0x574>)
 80040d2:	0052      	lsls	r2, r2, #1
 80040d4:	5ad3      	ldrh	r3, [r2, r3]
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	69b8      	ldr	r0, [r7, #24]
 80040e2:	69f9      	ldr	r1, [r7, #28]
 80040e4:	f7fc f984 	bl	80003f0 <__aeabi_uldivmod>
 80040e8:	0002      	movs	r2, r0
 80040ea:	000b      	movs	r3, r1
 80040ec:	0e11      	lsrs	r1, r2, #24
 80040ee:	021d      	lsls	r5, r3, #8
 80040f0:	430d      	orrs	r5, r1
 80040f2:	0214      	lsls	r4, r2, #8
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	085b      	lsrs	r3, r3, #1
 80040fa:	60bb      	str	r3, [r7, #8]
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68b8      	ldr	r0, [r7, #8]
 8004102:	68f9      	ldr	r1, [r7, #12]
 8004104:	1900      	adds	r0, r0, r4
 8004106:	4169      	adcs	r1, r5
 8004108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	603b      	str	r3, [r7, #0]
 800410e:	2300      	movs	r3, #0
 8004110:	607b      	str	r3, [r7, #4]
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f7fc f96b 	bl	80003f0 <__aeabi_uldivmod>
 800411a:	0002      	movs	r2, r0
 800411c:	000b      	movs	r3, r1
 800411e:	0013      	movs	r3, r2
 8004120:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004124:	23c0      	movs	r3, #192	@ 0xc0
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	429a      	cmp	r2, r3
 800412a:	d309      	bcc.n	8004140 <UART_SetConfig+0x398>
 800412c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800412e:	2380      	movs	r3, #128	@ 0x80
 8004130:	035b      	lsls	r3, r3, #13
 8004132:	429a      	cmp	r2, r3
 8004134:	d204      	bcs.n	8004140 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800413c:	60da      	str	r2, [r3, #12]
 800413e:	e0d6      	b.n	80042ee <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004140:	231a      	movs	r3, #26
 8004142:	2220      	movs	r2, #32
 8004144:	189b      	adds	r3, r3, r2
 8004146:	19db      	adds	r3, r3, r7
 8004148:	2201      	movs	r2, #1
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	e0cf      	b.n	80042ee <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800414e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004150:	69da      	ldr	r2, [r3, #28]
 8004152:	2380      	movs	r3, #128	@ 0x80
 8004154:	021b      	lsls	r3, r3, #8
 8004156:	429a      	cmp	r2, r3
 8004158:	d000      	beq.n	800415c <UART_SetConfig+0x3b4>
 800415a:	e070      	b.n	800423e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800415c:	231b      	movs	r3, #27
 800415e:	2220      	movs	r2, #32
 8004160:	189b      	adds	r3, r3, r2
 8004162:	19db      	adds	r3, r3, r7
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b08      	cmp	r3, #8
 8004168:	d015      	beq.n	8004196 <UART_SetConfig+0x3ee>
 800416a:	dc18      	bgt.n	800419e <UART_SetConfig+0x3f6>
 800416c:	2b04      	cmp	r3, #4
 800416e:	d00d      	beq.n	800418c <UART_SetConfig+0x3e4>
 8004170:	dc15      	bgt.n	800419e <UART_SetConfig+0x3f6>
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <UART_SetConfig+0x3d4>
 8004176:	2b02      	cmp	r3, #2
 8004178:	d005      	beq.n	8004186 <UART_SetConfig+0x3de>
 800417a:	e010      	b.n	800419e <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800417c:	f7fd ffbc 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 8004180:	0003      	movs	r3, r0
 8004182:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004184:	e014      	b.n	80041b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004186:	4b66      	ldr	r3, [pc, #408]	@ (8004320 <UART_SetConfig+0x578>)
 8004188:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800418a:	e011      	b.n	80041b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800418c:	f7fd ff28 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8004190:	0003      	movs	r3, r0
 8004192:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004194:	e00c      	b.n	80041b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004196:	2380      	movs	r3, #128	@ 0x80
 8004198:	021b      	lsls	r3, r3, #8
 800419a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800419c:	e008      	b.n	80041b0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80041a2:	231a      	movs	r3, #26
 80041a4:	2220      	movs	r2, #32
 80041a6:	189b      	adds	r3, r3, r2
 80041a8:	19db      	adds	r3, r3, r7
 80041aa:	2201      	movs	r2, #1
 80041ac:	701a      	strb	r2, [r3, #0]
        break;
 80041ae:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d100      	bne.n	80041b8 <UART_SetConfig+0x410>
 80041b6:	e09a      	b.n	80042ee <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041bc:	4b57      	ldr	r3, [pc, #348]	@ (800431c <UART_SetConfig+0x574>)
 80041be:	0052      	lsls	r2, r2, #1
 80041c0:	5ad3      	ldrh	r3, [r2, r3]
 80041c2:	0019      	movs	r1, r3
 80041c4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80041c6:	f7fb ff9d 	bl	8000104 <__udivsi3>
 80041ca:	0003      	movs	r3, r0
 80041cc:	005a      	lsls	r2, r3, #1
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	085b      	lsrs	r3, r3, #1
 80041d4:	18d2      	adds	r2, r2, r3
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	0019      	movs	r1, r3
 80041dc:	0010      	movs	r0, r2
 80041de:	f7fb ff91 	bl	8000104 <__udivsi3>
 80041e2:	0003      	movs	r3, r0
 80041e4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e8:	2b0f      	cmp	r3, #15
 80041ea:	d921      	bls.n	8004230 <UART_SetConfig+0x488>
 80041ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041ee:	2380      	movs	r3, #128	@ 0x80
 80041f0:	025b      	lsls	r3, r3, #9
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d21c      	bcs.n	8004230 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	200e      	movs	r0, #14
 80041fc:	2420      	movs	r4, #32
 80041fe:	1903      	adds	r3, r0, r4
 8004200:	19db      	adds	r3, r3, r7
 8004202:	210f      	movs	r1, #15
 8004204:	438a      	bics	r2, r1
 8004206:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	b29b      	uxth	r3, r3
 800420e:	2207      	movs	r2, #7
 8004210:	4013      	ands	r3, r2
 8004212:	b299      	uxth	r1, r3
 8004214:	1903      	adds	r3, r0, r4
 8004216:	19db      	adds	r3, r3, r7
 8004218:	1902      	adds	r2, r0, r4
 800421a:	19d2      	adds	r2, r2, r7
 800421c:	8812      	ldrh	r2, [r2, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	1902      	adds	r2, r0, r4
 8004228:	19d2      	adds	r2, r2, r7
 800422a:	8812      	ldrh	r2, [r2, #0]
 800422c:	60da      	str	r2, [r3, #12]
 800422e:	e05e      	b.n	80042ee <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004230:	231a      	movs	r3, #26
 8004232:	2220      	movs	r2, #32
 8004234:	189b      	adds	r3, r3, r2
 8004236:	19db      	adds	r3, r3, r7
 8004238:	2201      	movs	r2, #1
 800423a:	701a      	strb	r2, [r3, #0]
 800423c:	e057      	b.n	80042ee <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800423e:	231b      	movs	r3, #27
 8004240:	2220      	movs	r2, #32
 8004242:	189b      	adds	r3, r3, r2
 8004244:	19db      	adds	r3, r3, r7
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b08      	cmp	r3, #8
 800424a:	d015      	beq.n	8004278 <UART_SetConfig+0x4d0>
 800424c:	dc18      	bgt.n	8004280 <UART_SetConfig+0x4d8>
 800424e:	2b04      	cmp	r3, #4
 8004250:	d00d      	beq.n	800426e <UART_SetConfig+0x4c6>
 8004252:	dc15      	bgt.n	8004280 <UART_SetConfig+0x4d8>
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <UART_SetConfig+0x4b6>
 8004258:	2b02      	cmp	r3, #2
 800425a:	d005      	beq.n	8004268 <UART_SetConfig+0x4c0>
 800425c:	e010      	b.n	8004280 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800425e:	f7fd ff4b 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 8004262:	0003      	movs	r3, r0
 8004264:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004266:	e014      	b.n	8004292 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004268:	4b2d      	ldr	r3, [pc, #180]	@ (8004320 <UART_SetConfig+0x578>)
 800426a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800426c:	e011      	b.n	8004292 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800426e:	f7fd feb7 	bl	8001fe0 <HAL_RCC_GetSysClockFreq>
 8004272:	0003      	movs	r3, r0
 8004274:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004276:	e00c      	b.n	8004292 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004278:	2380      	movs	r3, #128	@ 0x80
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800427e:	e008      	b.n	8004292 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004284:	231a      	movs	r3, #26
 8004286:	2220      	movs	r2, #32
 8004288:	189b      	adds	r3, r3, r2
 800428a:	19db      	adds	r3, r3, r7
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
        break;
 8004290:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004294:	2b00      	cmp	r3, #0
 8004296:	d02a      	beq.n	80042ee <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800429c:	4b1f      	ldr	r3, [pc, #124]	@ (800431c <UART_SetConfig+0x574>)
 800429e:	0052      	lsls	r2, r2, #1
 80042a0:	5ad3      	ldrh	r3, [r2, r3]
 80042a2:	0019      	movs	r1, r3
 80042a4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80042a6:	f7fb ff2d 	bl	8000104 <__udivsi3>
 80042aa:	0003      	movs	r3, r0
 80042ac:	001a      	movs	r2, r3
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	085b      	lsrs	r3, r3, #1
 80042b4:	18d2      	adds	r2, r2, r3
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	0019      	movs	r1, r3
 80042bc:	0010      	movs	r0, r2
 80042be:	f7fb ff21 	bl	8000104 <__udivsi3>
 80042c2:	0003      	movs	r3, r0
 80042c4:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c8:	2b0f      	cmp	r3, #15
 80042ca:	d90a      	bls.n	80042e2 <UART_SetConfig+0x53a>
 80042cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ce:	2380      	movs	r3, #128	@ 0x80
 80042d0:	025b      	lsls	r3, r3, #9
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d205      	bcs.n	80042e2 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	b29a      	uxth	r2, r3
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	60da      	str	r2, [r3, #12]
 80042e0:	e005      	b.n	80042ee <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80042e2:	231a      	movs	r3, #26
 80042e4:	2220      	movs	r2, #32
 80042e6:	189b      	adds	r3, r3, r2
 80042e8:	19db      	adds	r3, r3, r7
 80042ea:	2201      	movs	r2, #1
 80042ec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	226a      	movs	r2, #106	@ 0x6a
 80042f2:	2101      	movs	r1, #1
 80042f4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	2268      	movs	r2, #104	@ 0x68
 80042fa:	2101      	movs	r1, #1
 80042fc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004300:	2200      	movs	r2, #0
 8004302:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004306:	2200      	movs	r2, #0
 8004308:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800430a:	231a      	movs	r3, #26
 800430c:	2220      	movs	r2, #32
 800430e:	189b      	adds	r3, r3, r2
 8004310:	19db      	adds	r3, r3, r7
 8004312:	781b      	ldrb	r3, [r3, #0]
}
 8004314:	0018      	movs	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	b010      	add	sp, #64	@ 0x40
 800431a:	bdb0      	pop	{r4, r5, r7, pc}
 800431c:	08005804 	.word	0x08005804
 8004320:	00f42400 	.word	0x00f42400

08004324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004330:	2208      	movs	r2, #8
 8004332:	4013      	ands	r3, r2
 8004334:	d00b      	beq.n	800434e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	4a4a      	ldr	r2, [pc, #296]	@ (8004468 <UART_AdvFeatureConfig+0x144>)
 800433e:	4013      	ands	r3, r2
 8004340:	0019      	movs	r1, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004352:	2201      	movs	r2, #1
 8004354:	4013      	ands	r3, r2
 8004356:	d00b      	beq.n	8004370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	4a43      	ldr	r2, [pc, #268]	@ (800446c <UART_AdvFeatureConfig+0x148>)
 8004360:	4013      	ands	r3, r2
 8004362:	0019      	movs	r1, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004374:	2202      	movs	r2, #2
 8004376:	4013      	ands	r3, r2
 8004378:	d00b      	beq.n	8004392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4a3b      	ldr	r2, [pc, #236]	@ (8004470 <UART_AdvFeatureConfig+0x14c>)
 8004382:	4013      	ands	r3, r2
 8004384:	0019      	movs	r1, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004396:	2204      	movs	r2, #4
 8004398:	4013      	ands	r3, r2
 800439a:	d00b      	beq.n	80043b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	4a34      	ldr	r2, [pc, #208]	@ (8004474 <UART_AdvFeatureConfig+0x150>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	0019      	movs	r1, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b8:	2210      	movs	r2, #16
 80043ba:	4013      	ands	r3, r2
 80043bc:	d00b      	beq.n	80043d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	4a2c      	ldr	r2, [pc, #176]	@ (8004478 <UART_AdvFeatureConfig+0x154>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	0019      	movs	r1, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043da:	2220      	movs	r2, #32
 80043dc:	4013      	ands	r3, r2
 80043de:	d00b      	beq.n	80043f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	4a25      	ldr	r2, [pc, #148]	@ (800447c <UART_AdvFeatureConfig+0x158>)
 80043e8:	4013      	ands	r3, r2
 80043ea:	0019      	movs	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fc:	2240      	movs	r2, #64	@ 0x40
 80043fe:	4013      	ands	r3, r2
 8004400:	d01d      	beq.n	800443e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	4a1d      	ldr	r2, [pc, #116]	@ (8004480 <UART_AdvFeatureConfig+0x15c>)
 800440a:	4013      	ands	r3, r2
 800440c:	0019      	movs	r1, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800441e:	2380      	movs	r3, #128	@ 0x80
 8004420:	035b      	lsls	r3, r3, #13
 8004422:	429a      	cmp	r2, r3
 8004424:	d10b      	bne.n	800443e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4a15      	ldr	r2, [pc, #84]	@ (8004484 <UART_AdvFeatureConfig+0x160>)
 800442e:	4013      	ands	r3, r2
 8004430:	0019      	movs	r1, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004442:	2280      	movs	r2, #128	@ 0x80
 8004444:	4013      	ands	r3, r2
 8004446:	d00b      	beq.n	8004460 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4a0e      	ldr	r2, [pc, #56]	@ (8004488 <UART_AdvFeatureConfig+0x164>)
 8004450:	4013      	ands	r3, r2
 8004452:	0019      	movs	r1, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	605a      	str	r2, [r3, #4]
  }
}
 8004460:	46c0      	nop			@ (mov r8, r8)
 8004462:	46bd      	mov	sp, r7
 8004464:	b002      	add	sp, #8
 8004466:	bd80      	pop	{r7, pc}
 8004468:	ffff7fff 	.word	0xffff7fff
 800446c:	fffdffff 	.word	0xfffdffff
 8004470:	fffeffff 	.word	0xfffeffff
 8004474:	fffbffff 	.word	0xfffbffff
 8004478:	ffffefff 	.word	0xffffefff
 800447c:	ffffdfff 	.word	0xffffdfff
 8004480:	ffefffff 	.word	0xffefffff
 8004484:	ff9fffff 	.word	0xff9fffff
 8004488:	fff7ffff 	.word	0xfff7ffff

0800448c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b092      	sub	sp, #72	@ 0x48
 8004490:	af02      	add	r7, sp, #8
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2290      	movs	r2, #144	@ 0x90
 8004498:	2100      	movs	r1, #0
 800449a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800449c:	f7fc fdfc 	bl	8001098 <HAL_GetTick>
 80044a0:	0003      	movs	r3, r0
 80044a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2208      	movs	r2, #8
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d12d      	bne.n	800450e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b4:	2280      	movs	r2, #128	@ 0x80
 80044b6:	0391      	lsls	r1, r2, #14
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	4a47      	ldr	r2, [pc, #284]	@ (80045d8 <UART_CheckIdleState+0x14c>)
 80044bc:	9200      	str	r2, [sp, #0]
 80044be:	2200      	movs	r2, #0
 80044c0:	f000 f88e 	bl	80045e0 <UART_WaitOnFlagUntilTimeout>
 80044c4:	1e03      	subs	r3, r0, #0
 80044c6:	d022      	beq.n	800450e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044c8:	f3ef 8310 	mrs	r3, PRIMASK
 80044cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80044d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044d2:	2301      	movs	r3, #1
 80044d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d8:	f383 8810 	msr	PRIMASK, r3
}
 80044dc:	46c0      	nop			@ (mov r8, r8)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2180      	movs	r1, #128	@ 0x80
 80044ea:	438a      	bics	r2, r1
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f4:	f383 8810 	msr	PRIMASK, r3
}
 80044f8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2288      	movs	r2, #136	@ 0x88
 80044fe:	2120      	movs	r1, #32
 8004500:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2284      	movs	r2, #132	@ 0x84
 8004506:	2100      	movs	r1, #0
 8004508:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e060      	b.n	80045d0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2204      	movs	r2, #4
 8004516:	4013      	ands	r3, r2
 8004518:	2b04      	cmp	r3, #4
 800451a:	d146      	bne.n	80045aa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800451c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800451e:	2280      	movs	r2, #128	@ 0x80
 8004520:	03d1      	lsls	r1, r2, #15
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	4a2c      	ldr	r2, [pc, #176]	@ (80045d8 <UART_CheckIdleState+0x14c>)
 8004526:	9200      	str	r2, [sp, #0]
 8004528:	2200      	movs	r2, #0
 800452a:	f000 f859 	bl	80045e0 <UART_WaitOnFlagUntilTimeout>
 800452e:	1e03      	subs	r3, r0, #0
 8004530:	d03b      	beq.n	80045aa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004532:	f3ef 8310 	mrs	r3, PRIMASK
 8004536:	60fb      	str	r3, [r7, #12]
  return(result);
 8004538:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800453a:	637b      	str	r3, [r7, #52]	@ 0x34
 800453c:	2301      	movs	r3, #1
 800453e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f383 8810 	msr	PRIMASK, r3
}
 8004546:	46c0      	nop			@ (mov r8, r8)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4922      	ldr	r1, [pc, #136]	@ (80045dc <UART_CheckIdleState+0x150>)
 8004554:	400a      	ands	r2, r1
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800455a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f383 8810 	msr	PRIMASK, r3
}
 8004562:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004564:	f3ef 8310 	mrs	r3, PRIMASK
 8004568:	61bb      	str	r3, [r7, #24]
  return(result);
 800456a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456c:	633b      	str	r3, [r7, #48]	@ 0x30
 800456e:	2301      	movs	r3, #1
 8004570:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	f383 8810 	msr	PRIMASK, r3
}
 8004578:	46c0      	nop			@ (mov r8, r8)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2101      	movs	r1, #1
 8004586:	438a      	bics	r2, r1
 8004588:	609a      	str	r2, [r3, #8]
 800458a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	f383 8810 	msr	PRIMASK, r3
}
 8004594:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	228c      	movs	r2, #140	@ 0x8c
 800459a:	2120      	movs	r1, #32
 800459c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2284      	movs	r2, #132	@ 0x84
 80045a2:	2100      	movs	r1, #0
 80045a4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e012      	b.n	80045d0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2288      	movs	r2, #136	@ 0x88
 80045ae:	2120      	movs	r1, #32
 80045b0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	228c      	movs	r2, #140	@ 0x8c
 80045b6:	2120      	movs	r1, #32
 80045b8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2284      	movs	r2, #132	@ 0x84
 80045ca:	2100      	movs	r1, #0
 80045cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	0018      	movs	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	b010      	add	sp, #64	@ 0x40
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	01ffffff 	.word	0x01ffffff
 80045dc:	fffffedf 	.word	0xfffffedf

080045e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	1dfb      	adds	r3, r7, #7
 80045ee:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045f0:	e051      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	3301      	adds	r3, #1
 80045f6:	d04e      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f8:	f7fc fd4e 	bl	8001098 <HAL_GetTick>
 80045fc:	0002      	movs	r2, r0
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	429a      	cmp	r2, r3
 8004606:	d302      	bcc.n	800460e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e051      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2204      	movs	r2, #4
 800461a:	4013      	ands	r3, r2
 800461c:	d03b      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb6>
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b80      	cmp	r3, #128	@ 0x80
 8004622:	d038      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b40      	cmp	r3, #64	@ 0x40
 8004628:	d035      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	2208      	movs	r2, #8
 8004632:	4013      	ands	r3, r2
 8004634:	2b08      	cmp	r3, #8
 8004636:	d111      	bne.n	800465c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2208      	movs	r2, #8
 800463e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	0018      	movs	r0, r3
 8004644:	f000 f960 	bl	8004908 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2290      	movs	r2, #144	@ 0x90
 800464c:	2108      	movs	r1, #8
 800464e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2284      	movs	r2, #132	@ 0x84
 8004654:	2100      	movs	r1, #0
 8004656:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e02c      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69da      	ldr	r2, [r3, #28]
 8004662:	2380      	movs	r3, #128	@ 0x80
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	401a      	ands	r2, r3
 8004668:	2380      	movs	r3, #128	@ 0x80
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	429a      	cmp	r2, r3
 800466e:	d112      	bne.n	8004696 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2280      	movs	r2, #128	@ 0x80
 8004676:	0112      	lsls	r2, r2, #4
 8004678:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	0018      	movs	r0, r3
 800467e:	f000 f943 	bl	8004908 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2290      	movs	r2, #144	@ 0x90
 8004686:	2120      	movs	r1, #32
 8004688:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2284      	movs	r2, #132	@ 0x84
 800468e:	2100      	movs	r1, #0
 8004690:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e00f      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	4013      	ands	r3, r2
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	425a      	negs	r2, r3
 80046a6:	4153      	adcs	r3, r2
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	001a      	movs	r2, r3
 80046ac:	1dfb      	adds	r3, r7, #7
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d09e      	beq.n	80045f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b004      	add	sp, #16
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b098      	sub	sp, #96	@ 0x60
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	1dbb      	adds	r3, r7, #6
 80046cc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	1dba      	adds	r2, r7, #6
 80046d8:	215c      	movs	r1, #92	@ 0x5c
 80046da:	8812      	ldrh	r2, [r2, #0]
 80046dc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1dba      	adds	r2, r7, #6
 80046e2:	215e      	movs	r1, #94	@ 0x5e
 80046e4:	8812      	ldrh	r2, [r2, #0]
 80046e6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	2380      	movs	r3, #128	@ 0x80
 80046f4:	015b      	lsls	r3, r3, #5
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d10d      	bne.n	8004716 <UART_Start_Receive_IT+0x56>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d104      	bne.n	800470c <UART_Start_Receive_IT+0x4c>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2260      	movs	r2, #96	@ 0x60
 8004706:	497b      	ldr	r1, [pc, #492]	@ (80048f4 <UART_Start_Receive_IT+0x234>)
 8004708:	5299      	strh	r1, [r3, r2]
 800470a:	e02e      	b.n	800476a <UART_Start_Receive_IT+0xaa>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2260      	movs	r2, #96	@ 0x60
 8004710:	21ff      	movs	r1, #255	@ 0xff
 8004712:	5299      	strh	r1, [r3, r2]
 8004714:	e029      	b.n	800476a <UART_Start_Receive_IT+0xaa>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10d      	bne.n	800473a <UART_Start_Receive_IT+0x7a>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d104      	bne.n	8004730 <UART_Start_Receive_IT+0x70>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2260      	movs	r2, #96	@ 0x60
 800472a:	21ff      	movs	r1, #255	@ 0xff
 800472c:	5299      	strh	r1, [r3, r2]
 800472e:	e01c      	b.n	800476a <UART_Start_Receive_IT+0xaa>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2260      	movs	r2, #96	@ 0x60
 8004734:	217f      	movs	r1, #127	@ 0x7f
 8004736:	5299      	strh	r1, [r3, r2]
 8004738:	e017      	b.n	800476a <UART_Start_Receive_IT+0xaa>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	2380      	movs	r3, #128	@ 0x80
 8004740:	055b      	lsls	r3, r3, #21
 8004742:	429a      	cmp	r2, r3
 8004744:	d10d      	bne.n	8004762 <UART_Start_Receive_IT+0xa2>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <UART_Start_Receive_IT+0x98>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2260      	movs	r2, #96	@ 0x60
 8004752:	217f      	movs	r1, #127	@ 0x7f
 8004754:	5299      	strh	r1, [r3, r2]
 8004756:	e008      	b.n	800476a <UART_Start_Receive_IT+0xaa>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2260      	movs	r2, #96	@ 0x60
 800475c:	213f      	movs	r1, #63	@ 0x3f
 800475e:	5299      	strh	r1, [r3, r2]
 8004760:	e003      	b.n	800476a <UART_Start_Receive_IT+0xaa>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2260      	movs	r2, #96	@ 0x60
 8004766:	2100      	movs	r1, #0
 8004768:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2290      	movs	r2, #144	@ 0x90
 800476e:	2100      	movs	r1, #0
 8004770:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	228c      	movs	r2, #140	@ 0x8c
 8004776:	2122      	movs	r1, #34	@ 0x22
 8004778:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800477a:	f3ef 8310 	mrs	r3, PRIMASK
 800477e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8004780:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004782:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004784:	2301      	movs	r3, #1
 8004786:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004788:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800478a:	f383 8810 	msr	PRIMASK, r3
}
 800478e:	46c0      	nop			@ (mov r8, r8)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2101      	movs	r1, #1
 800479c:	430a      	orrs	r2, r1
 800479e:	609a      	str	r2, [r3, #8]
 80047a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047a6:	f383 8810 	msr	PRIMASK, r3
}
 80047aa:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80047b0:	2380      	movs	r3, #128	@ 0x80
 80047b2:	059b      	lsls	r3, r3, #22
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d150      	bne.n	800485a <UART_Start_Receive_IT+0x19a>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2268      	movs	r2, #104	@ 0x68
 80047bc:	5a9b      	ldrh	r3, [r3, r2]
 80047be:	1dba      	adds	r2, r7, #6
 80047c0:	8812      	ldrh	r2, [r2, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d349      	bcc.n	800485a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	2380      	movs	r3, #128	@ 0x80
 80047cc:	015b      	lsls	r3, r3, #5
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d107      	bne.n	80047e2 <UART_Start_Receive_IT+0x122>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4a46      	ldr	r2, [pc, #280]	@ (80048f8 <UART_Start_Receive_IT+0x238>)
 80047de:	675a      	str	r2, [r3, #116]	@ 0x74
 80047e0:	e002      	b.n	80047e8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4a45      	ldr	r2, [pc, #276]	@ (80048fc <UART_Start_Receive_IT+0x23c>)
 80047e6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d019      	beq.n	8004824 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047f0:	f3ef 8310 	mrs	r3, PRIMASK
 80047f4:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80047f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047fa:	2301      	movs	r3, #1
 80047fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004800:	f383 8810 	msr	PRIMASK, r3
}
 8004804:	46c0      	nop			@ (mov r8, r8)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2180      	movs	r1, #128	@ 0x80
 8004812:	0049      	lsls	r1, r1, #1
 8004814:	430a      	orrs	r2, r1
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800481a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800481c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800481e:	f383 8810 	msr	PRIMASK, r3
}
 8004822:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004824:	f3ef 8310 	mrs	r3, PRIMASK
 8004828:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800482a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800482c:	657b      	str	r3, [r7, #84]	@ 0x54
 800482e:	2301      	movs	r3, #1
 8004830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004834:	f383 8810 	msr	PRIMASK, r3
}
 8004838:	46c0      	nop			@ (mov r8, r8)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2180      	movs	r1, #128	@ 0x80
 8004846:	0549      	lsls	r1, r1, #21
 8004848:	430a      	orrs	r2, r1
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800484e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004852:	f383 8810 	msr	PRIMASK, r3
}
 8004856:	46c0      	nop			@ (mov r8, r8)
 8004858:	e047      	b.n	80048ea <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	2380      	movs	r3, #128	@ 0x80
 8004860:	015b      	lsls	r3, r3, #5
 8004862:	429a      	cmp	r2, r3
 8004864:	d107      	bne.n	8004876 <UART_Start_Receive_IT+0x1b6>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d103      	bne.n	8004876 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4a23      	ldr	r2, [pc, #140]	@ (8004900 <UART_Start_Receive_IT+0x240>)
 8004872:	675a      	str	r2, [r3, #116]	@ 0x74
 8004874:	e002      	b.n	800487c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4a22      	ldr	r2, [pc, #136]	@ (8004904 <UART_Start_Receive_IT+0x244>)
 800487a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d019      	beq.n	80048b8 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004884:	f3ef 8310 	mrs	r3, PRIMASK
 8004888:	61fb      	str	r3, [r7, #28]
  return(result);
 800488a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800488c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800488e:	2301      	movs	r3, #1
 8004890:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f383 8810 	msr	PRIMASK, r3
}
 8004898:	46c0      	nop			@ (mov r8, r8)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2190      	movs	r1, #144	@ 0x90
 80048a6:	0049      	lsls	r1, r1, #1
 80048a8:	430a      	orrs	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	f383 8810 	msr	PRIMASK, r3
}
 80048b6:	e018      	b.n	80048ea <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b8:	f3ef 8310 	mrs	r3, PRIMASK
 80048bc:	613b      	str	r3, [r7, #16]
  return(result);
 80048be:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80048c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80048c2:	2301      	movs	r3, #1
 80048c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f383 8810 	msr	PRIMASK, r3
}
 80048cc:	46c0      	nop			@ (mov r8, r8)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2120      	movs	r1, #32
 80048da:	430a      	orrs	r2, r1
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	f383 8810 	msr	PRIMASK, r3
}
 80048e8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	0018      	movs	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	b018      	add	sp, #96	@ 0x60
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	000001ff 	.word	0x000001ff
 80048f8:	08005125 	.word	0x08005125
 80048fc:	08004de5 	.word	0x08004de5
 8004900:	08004c21 	.word	0x08004c21
 8004904:	08004a5d 	.word	0x08004a5d

08004908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08e      	sub	sp, #56	@ 0x38
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004910:	f3ef 8310 	mrs	r3, PRIMASK
 8004914:	617b      	str	r3, [r7, #20]
  return(result);
 8004916:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004918:	637b      	str	r3, [r7, #52]	@ 0x34
 800491a:	2301      	movs	r3, #1
 800491c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	f383 8810 	msr	PRIMASK, r3
}
 8004924:	46c0      	nop			@ (mov r8, r8)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4926      	ldr	r1, [pc, #152]	@ (80049cc <UART_EndRxTransfer+0xc4>)
 8004932:	400a      	ands	r2, r1
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004938:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	f383 8810 	msr	PRIMASK, r3
}
 8004940:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004942:	f3ef 8310 	mrs	r3, PRIMASK
 8004946:	623b      	str	r3, [r7, #32]
  return(result);
 8004948:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800494a:	633b      	str	r3, [r7, #48]	@ 0x30
 800494c:	2301      	movs	r3, #1
 800494e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	f383 8810 	msr	PRIMASK, r3
}
 8004956:	46c0      	nop			@ (mov r8, r8)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	491b      	ldr	r1, [pc, #108]	@ (80049d0 <UART_EndRxTransfer+0xc8>)
 8004964:	400a      	ands	r2, r1
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800496e:	f383 8810 	msr	PRIMASK, r3
}
 8004972:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004978:	2b01      	cmp	r3, #1
 800497a:	d118      	bne.n	80049ae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800497c:	f3ef 8310 	mrs	r3, PRIMASK
 8004980:	60bb      	str	r3, [r7, #8]
  return(result);
 8004982:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004984:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004986:	2301      	movs	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f383 8810 	msr	PRIMASK, r3
}
 8004990:	46c0      	nop			@ (mov r8, r8)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2110      	movs	r1, #16
 800499e:	438a      	bics	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f383 8810 	msr	PRIMASK, r3
}
 80049ac:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	228c      	movs	r2, #140	@ 0x8c
 80049b2:	2120      	movs	r1, #32
 80049b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80049c2:	46c0      	nop			@ (mov r8, r8)
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b00e      	add	sp, #56	@ 0x38
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	46c0      	nop			@ (mov r8, r8)
 80049cc:	fffffedf 	.word	0xfffffedf
 80049d0:	effffffe 	.word	0xeffffffe

080049d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	225e      	movs	r2, #94	@ 0x5e
 80049e6:	2100      	movs	r1, #0
 80049e8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2256      	movs	r2, #86	@ 0x56
 80049ee:	2100      	movs	r1, #0
 80049f0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	0018      	movs	r0, r3
 80049f6:	f7ff f9c3 	bl	8003d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049fa:	46c0      	nop			@ (mov r8, r8)
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b004      	add	sp, #16
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b086      	sub	sp, #24
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a10:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	2301      	movs	r3, #1
 8004a16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f383 8810 	msr	PRIMASK, r3
}
 8004a1e:	46c0      	nop			@ (mov r8, r8)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2140      	movs	r1, #64	@ 0x40
 8004a2c:	438a      	bics	r2, r1
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f383 8810 	msr	PRIMASK, r3
}
 8004a3a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2288      	movs	r2, #136	@ 0x88
 8004a40:	2120      	movs	r1, #32
 8004a42:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f7ff f98f 	bl	8003d70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a52:	46c0      	nop			@ (mov r8, r8)
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b006      	add	sp, #24
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b094      	sub	sp, #80	@ 0x50
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004a64:	204e      	movs	r0, #78	@ 0x4e
 8004a66:	183b      	adds	r3, r7, r0
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	2160      	movs	r1, #96	@ 0x60
 8004a6c:	5a52      	ldrh	r2, [r2, r1]
 8004a6e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	228c      	movs	r2, #140	@ 0x8c
 8004a74:	589b      	ldr	r3, [r3, r2]
 8004a76:	2b22      	cmp	r3, #34	@ 0x22
 8004a78:	d000      	beq.n	8004a7c <UART_RxISR_8BIT+0x20>
 8004a7a:	e0bf      	b.n	8004bfc <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a82:	214c      	movs	r1, #76	@ 0x4c
 8004a84:	187b      	adds	r3, r7, r1
 8004a86:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004a88:	187b      	adds	r3, r7, r1
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	183b      	adds	r3, r7, r0
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	b2d9      	uxtb	r1, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a98:	400a      	ands	r2, r1
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	225e      	movs	r2, #94	@ 0x5e
 8004aac:	5a9b      	ldrh	r3, [r3, r2]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b299      	uxth	r1, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	225e      	movs	r2, #94	@ 0x5e
 8004ab8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	225e      	movs	r2, #94	@ 0x5e
 8004abe:	5a9b      	ldrh	r3, [r3, r2]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d000      	beq.n	8004ac8 <UART_RxISR_8BIT+0x6c>
 8004ac6:	e0a1      	b.n	8004c0c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8004acc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad8:	f383 8810 	msr	PRIMASK, r3
}
 8004adc:	46c0      	nop			@ (mov r8, r8)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	494a      	ldr	r1, [pc, #296]	@ (8004c14 <UART_RxISR_8BIT+0x1b8>)
 8004aea:	400a      	ands	r2, r1
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af4:	f383 8810 	msr	PRIMASK, r3
}
 8004af8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004afa:	f3ef 8310 	mrs	r3, PRIMASK
 8004afe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b04:	2301      	movs	r3, #1
 8004b06:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b0a:	f383 8810 	msr	PRIMASK, r3
}
 8004b0e:	46c0      	nop			@ (mov r8, r8)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	438a      	bics	r2, r1
 8004b1e:	609a      	str	r2, [r3, #8]
 8004b20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b22:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b26:	f383 8810 	msr	PRIMASK, r3
}
 8004b2a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	228c      	movs	r2, #140	@ 0x8c
 8004b30:	2120      	movs	r1, #32
 8004b32:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a34      	ldr	r2, [pc, #208]	@ (8004c18 <UART_RxISR_8BIT+0x1bc>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01f      	beq.n	8004b8a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	2380      	movs	r3, #128	@ 0x80
 8004b52:	041b      	lsls	r3, r3, #16
 8004b54:	4013      	ands	r3, r2
 8004b56:	d018      	beq.n	8004b8a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b58:	f3ef 8310 	mrs	r3, PRIMASK
 8004b5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b5e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b62:	2301      	movs	r3, #1
 8004b64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	f383 8810 	msr	PRIMASK, r3
}
 8004b6c:	46c0      	nop			@ (mov r8, r8)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4928      	ldr	r1, [pc, #160]	@ (8004c1c <UART_RxISR_8BIT+0x1c0>)
 8004b7a:	400a      	ands	r2, r1
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	f383 8810 	msr	PRIMASK, r3
}
 8004b88:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d12f      	bne.n	8004bf2 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b98:	f3ef 8310 	mrs	r3, PRIMASK
 8004b9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b9e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f383 8810 	msr	PRIMASK, r3
}
 8004bac:	46c0      	nop			@ (mov r8, r8)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2110      	movs	r1, #16
 8004bba:	438a      	bics	r2, r1
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f383 8810 	msr	PRIMASK, r3
}
 8004bc8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	2210      	movs	r2, #16
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b10      	cmp	r3, #16
 8004bd6:	d103      	bne.n	8004be0 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2210      	movs	r2, #16
 8004bde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	225c      	movs	r2, #92	@ 0x5c
 8004be4:	5a9a      	ldrh	r2, [r3, r2]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	0011      	movs	r1, r2
 8004bea:	0018      	movs	r0, r3
 8004bec:	f7ff f8d0 	bl	8003d90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004bf0:	e00c      	b.n	8004c0c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f7fc f821 	bl	8000c3c <HAL_UART_RxCpltCallback>
}
 8004bfa:	e007      	b.n	8004c0c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699a      	ldr	r2, [r3, #24]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2108      	movs	r1, #8
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	619a      	str	r2, [r3, #24]
}
 8004c0c:	46c0      	nop			@ (mov r8, r8)
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	b014      	add	sp, #80	@ 0x50
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	fffffedf 	.word	0xfffffedf
 8004c18:	40008000 	.word	0x40008000
 8004c1c:	fbffffff 	.word	0xfbffffff

08004c20 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b094      	sub	sp, #80	@ 0x50
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004c28:	204e      	movs	r0, #78	@ 0x4e
 8004c2a:	183b      	adds	r3, r7, r0
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	2160      	movs	r1, #96	@ 0x60
 8004c30:	5a52      	ldrh	r2, [r2, r1]
 8004c32:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	228c      	movs	r2, #140	@ 0x8c
 8004c38:	589b      	ldr	r3, [r3, r2]
 8004c3a:	2b22      	cmp	r3, #34	@ 0x22
 8004c3c:	d000      	beq.n	8004c40 <UART_RxISR_16BIT+0x20>
 8004c3e:	e0bf      	b.n	8004dc0 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c46:	214c      	movs	r1, #76	@ 0x4c
 8004c48:	187b      	adds	r3, r7, r1
 8004c4a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c50:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004c52:	187b      	adds	r3, r7, r1
 8004c54:	183a      	adds	r2, r7, r0
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	8812      	ldrh	r2, [r2, #0]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c60:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c66:	1c9a      	adds	r2, r3, #2
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	225e      	movs	r2, #94	@ 0x5e
 8004c70:	5a9b      	ldrh	r3, [r3, r2]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	3b01      	subs	r3, #1
 8004c76:	b299      	uxth	r1, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	225e      	movs	r2, #94	@ 0x5e
 8004c7c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	225e      	movs	r2, #94	@ 0x5e
 8004c82:	5a9b      	ldrh	r3, [r3, r2]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d000      	beq.n	8004c8c <UART_RxISR_16BIT+0x6c>
 8004c8a:	e0a1      	b.n	8004dd0 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c90:	623b      	str	r3, [r7, #32]
  return(result);
 8004c92:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c96:	2301      	movs	r3, #1
 8004c98:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ca0:	46c0      	nop			@ (mov r8, r8)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	494a      	ldr	r1, [pc, #296]	@ (8004dd8 <UART_RxISR_16BIT+0x1b8>)
 8004cae:	400a      	ands	r2, r1
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb8:	f383 8810 	msr	PRIMASK, r3
}
 8004cbc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cc8:	2301      	movs	r3, #1
 8004cca:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cce:	f383 8810 	msr	PRIMASK, r3
}
 8004cd2:	46c0      	nop			@ (mov r8, r8)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2101      	movs	r1, #1
 8004ce0:	438a      	bics	r2, r1
 8004ce2:	609a      	str	r2, [r3, #8]
 8004ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cea:	f383 8810 	msr	PRIMASK, r3
}
 8004cee:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	228c      	movs	r2, #140	@ 0x8c
 8004cf4:	2120      	movs	r1, #32
 8004cf6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a34      	ldr	r2, [pc, #208]	@ (8004ddc <UART_RxISR_16BIT+0x1bc>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d01f      	beq.n	8004d4e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	2380      	movs	r3, #128	@ 0x80
 8004d16:	041b      	lsls	r3, r3, #16
 8004d18:	4013      	ands	r3, r2
 8004d1a:	d018      	beq.n	8004d4e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d20:	617b      	str	r3, [r7, #20]
  return(result);
 8004d22:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d26:	2301      	movs	r3, #1
 8004d28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	f383 8810 	msr	PRIMASK, r3
}
 8004d30:	46c0      	nop			@ (mov r8, r8)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4928      	ldr	r1, [pc, #160]	@ (8004de0 <UART_RxISR_16BIT+0x1c0>)
 8004d3e:	400a      	ands	r2, r1
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	f383 8810 	msr	PRIMASK, r3
}
 8004d4c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d12f      	bne.n	8004db6 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d60:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d62:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d66:	2301      	movs	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f383 8810 	msr	PRIMASK, r3
}
 8004d70:	46c0      	nop			@ (mov r8, r8)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2110      	movs	r1, #16
 8004d7e:	438a      	bics	r2, r1
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f383 8810 	msr	PRIMASK, r3
}
 8004d8c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	2210      	movs	r2, #16
 8004d96:	4013      	ands	r3, r2
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d103      	bne.n	8004da4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2210      	movs	r2, #16
 8004da2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	225c      	movs	r2, #92	@ 0x5c
 8004da8:	5a9a      	ldrh	r2, [r3, r2]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	0011      	movs	r1, r2
 8004dae:	0018      	movs	r0, r3
 8004db0:	f7fe ffee 	bl	8003d90 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004db4:	e00c      	b.n	8004dd0 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	0018      	movs	r0, r3
 8004dba:	f7fb ff3f 	bl	8000c3c <HAL_UART_RxCpltCallback>
}
 8004dbe:	e007      	b.n	8004dd0 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2108      	movs	r1, #8
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	619a      	str	r2, [r3, #24]
}
 8004dd0:	46c0      	nop			@ (mov r8, r8)
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	b014      	add	sp, #80	@ 0x50
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	fffffedf 	.word	0xfffffedf
 8004ddc:	40008000 	.word	0x40008000
 8004de0:	fbffffff 	.word	0xfbffffff

08004de4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b0a0      	sub	sp, #128	@ 0x80
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004dec:	237a      	movs	r3, #122	@ 0x7a
 8004dee:	18fb      	adds	r3, r7, r3
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	2160      	movs	r1, #96	@ 0x60
 8004df4:	5a52      	ldrh	r2, [r2, r1]
 8004df6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	228c      	movs	r2, #140	@ 0x8c
 8004e14:	589b      	ldr	r3, [r3, r2]
 8004e16:	2b22      	cmp	r3, #34	@ 0x22
 8004e18:	d000      	beq.n	8004e1c <UART_RxISR_8BIT_FIFOEN+0x38>
 8004e1a:	e16a      	b.n	80050f2 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004e1c:	236e      	movs	r3, #110	@ 0x6e
 8004e1e:	18fb      	adds	r3, r7, r3
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	2168      	movs	r1, #104	@ 0x68
 8004e24:	5a52      	ldrh	r2, [r2, r1]
 8004e26:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004e28:	e111      	b.n	800504e <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e30:	216c      	movs	r1, #108	@ 0x6c
 8004e32:	187b      	adds	r3, r7, r1
 8004e34:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e36:	187b      	adds	r3, r7, r1
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	237a      	movs	r3, #122	@ 0x7a
 8004e3e:	18fb      	adds	r3, r7, r3
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	b2d9      	uxtb	r1, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e48:	400a      	ands	r2, r1
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e52:	1c5a      	adds	r2, r3, #1
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	225e      	movs	r2, #94	@ 0x5e
 8004e5c:	5a9b      	ldrh	r3, [r3, r2]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b299      	uxth	r1, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	225e      	movs	r2, #94	@ 0x5e
 8004e68:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004e72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e74:	2207      	movs	r2, #7
 8004e76:	4013      	ands	r3, r2
 8004e78:	d049      	beq.n	8004f0e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	4013      	ands	r3, r2
 8004e80:	d010      	beq.n	8004ea4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004e82:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004e84:	2380      	movs	r3, #128	@ 0x80
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d00b      	beq.n	8004ea4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2201      	movs	r2, #1
 8004e92:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2290      	movs	r2, #144	@ 0x90
 8004e98:	589b      	ldr	r3, [r3, r2]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2190      	movs	r1, #144	@ 0x90
 8004ea2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ea4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	d00f      	beq.n	8004ecc <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004eac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004eae:	2201      	movs	r2, #1
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d00b      	beq.n	8004ecc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2290      	movs	r2, #144	@ 0x90
 8004ec0:	589b      	ldr	r3, [r3, r2]
 8004ec2:	2204      	movs	r2, #4
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2190      	movs	r1, #144	@ 0x90
 8004eca:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ecc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ece:	2204      	movs	r2, #4
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	d00f      	beq.n	8004ef4 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004ed4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d00b      	beq.n	8004ef4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2204      	movs	r2, #4
 8004ee2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2290      	movs	r2, #144	@ 0x90
 8004ee8:	589b      	ldr	r3, [r3, r2]
 8004eea:	2202      	movs	r2, #2
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2190      	movs	r1, #144	@ 0x90
 8004ef2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2290      	movs	r2, #144	@ 0x90
 8004ef8:	589b      	ldr	r3, [r3, r2]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	0018      	movs	r0, r3
 8004f02:	f7fe ff3d 	bl	8003d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2290      	movs	r2, #144	@ 0x90
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	225e      	movs	r2, #94	@ 0x5e
 8004f12:	5a9b      	ldrh	r3, [r3, r2]
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d000      	beq.n	8004f1c <UART_RxISR_8BIT_FIFOEN+0x138>
 8004f1a:	e098      	b.n	800504e <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f20:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8004f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f26:	2301      	movs	r3, #1
 8004f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f2c:	f383 8810 	msr	PRIMASK, r3
}
 8004f30:	46c0      	nop			@ (mov r8, r8)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4973      	ldr	r1, [pc, #460]	@ (800510c <UART_RxISR_8BIT_FIFOEN+0x328>)
 8004f3e:	400a      	ands	r2, r1
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f44:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f48:	f383 8810 	msr	PRIMASK, r3
}
 8004f4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f52:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8004f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f56:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f58:	2301      	movs	r3, #1
 8004f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f5e:	f383 8810 	msr	PRIMASK, r3
}
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4968      	ldr	r1, [pc, #416]	@ (8005110 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8004f70:	400a      	ands	r2, r1
 8004f72:	609a      	str	r2, [r3, #8]
 8004f74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f7a:	f383 8810 	msr	PRIMASK, r3
}
 8004f7e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	228c      	movs	r2, #140	@ 0x8c
 8004f84:	2120      	movs	r1, #32
 8004f86:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a5e      	ldr	r2, [pc, #376]	@ (8005114 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01f      	beq.n	8004fde <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	2380      	movs	r3, #128	@ 0x80
 8004fa6:	041b      	lsls	r3, r3, #16
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d018      	beq.n	8004fde <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fac:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fb4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbc:	f383 8810 	msr	PRIMASK, r3
}
 8004fc0:	46c0      	nop			@ (mov r8, r8)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4952      	ldr	r1, [pc, #328]	@ (8005118 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8004fce:	400a      	ands	r2, r1
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fd4:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd8:	f383 8810 	msr	PRIMASK, r3
}
 8004fdc:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d12f      	bne.n	8005046 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fec:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff0:	623b      	str	r3, [r7, #32]
  return(result);
 8004ff2:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	f383 8810 	msr	PRIMASK, r3
}
 8005000:	46c0      	nop			@ (mov r8, r8)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2110      	movs	r1, #16
 800500e:	438a      	bics	r2, r1
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005014:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005018:	f383 8810 	msr	PRIMASK, r3
}
 800501c:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	2210      	movs	r2, #16
 8005026:	4013      	ands	r3, r2
 8005028:	2b10      	cmp	r3, #16
 800502a:	d103      	bne.n	8005034 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2210      	movs	r2, #16
 8005032:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	225c      	movs	r2, #92	@ 0x5c
 8005038:	5a9a      	ldrh	r2, [r3, r2]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0011      	movs	r1, r2
 800503e:	0018      	movs	r0, r3
 8005040:	f7fe fea6 	bl	8003d90 <HAL_UARTEx_RxEventCallback>
 8005044:	e003      	b.n	800504e <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	0018      	movs	r0, r3
 800504a:	f7fb fdf7 	bl	8000c3c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800504e:	236e      	movs	r3, #110	@ 0x6e
 8005050:	18fb      	adds	r3, r7, r3
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d004      	beq.n	8005062 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8005058:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800505a:	2220      	movs	r2, #32
 800505c:	4013      	ands	r3, r2
 800505e:	d000      	beq.n	8005062 <UART_RxISR_8BIT_FIFOEN+0x27e>
 8005060:	e6e3      	b.n	8004e2a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005062:	205a      	movs	r0, #90	@ 0x5a
 8005064:	183b      	adds	r3, r7, r0
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	215e      	movs	r1, #94	@ 0x5e
 800506a:	5a52      	ldrh	r2, [r2, r1]
 800506c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800506e:	0001      	movs	r1, r0
 8005070:	187b      	adds	r3, r7, r1
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d044      	beq.n	8005102 <UART_RxISR_8BIT_FIFOEN+0x31e>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2268      	movs	r2, #104	@ 0x68
 800507c:	5a9b      	ldrh	r3, [r3, r2]
 800507e:	187a      	adds	r2, r7, r1
 8005080:	8812      	ldrh	r2, [r2, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d23d      	bcs.n	8005102 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005086:	f3ef 8310 	mrs	r3, PRIMASK
 800508a:	60bb      	str	r3, [r7, #8]
  return(result);
 800508c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800508e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005090:	2301      	movs	r3, #1
 8005092:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f383 8810 	msr	PRIMASK, r3
}
 800509a:	46c0      	nop			@ (mov r8, r8)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689a      	ldr	r2, [r3, #8]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	491d      	ldr	r1, [pc, #116]	@ (800511c <UART_RxISR_8BIT_FIFOEN+0x338>)
 80050a8:	400a      	ands	r2, r1
 80050aa:	609a      	str	r2, [r3, #8]
 80050ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f383 8810 	msr	PRIMASK, r3
}
 80050b6:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a19      	ldr	r2, [pc, #100]	@ (8005120 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 80050bc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050be:	f3ef 8310 	mrs	r3, PRIMASK
 80050c2:	617b      	str	r3, [r7, #20]
  return(result);
 80050c4:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80050c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80050c8:	2301      	movs	r3, #1
 80050ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	f383 8810 	msr	PRIMASK, r3
}
 80050d2:	46c0      	nop			@ (mov r8, r8)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2120      	movs	r1, #32
 80050e0:	430a      	orrs	r2, r1
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	f383 8810 	msr	PRIMASK, r3
}
 80050ee:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050f0:	e007      	b.n	8005102 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699a      	ldr	r2, [r3, #24]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2108      	movs	r1, #8
 80050fe:	430a      	orrs	r2, r1
 8005100:	619a      	str	r2, [r3, #24]
}
 8005102:	46c0      	nop			@ (mov r8, r8)
 8005104:	46bd      	mov	sp, r7
 8005106:	b020      	add	sp, #128	@ 0x80
 8005108:	bd80      	pop	{r7, pc}
 800510a:	46c0      	nop			@ (mov r8, r8)
 800510c:	fffffeff 	.word	0xfffffeff
 8005110:	effffffe 	.word	0xeffffffe
 8005114:	40008000 	.word	0x40008000
 8005118:	fbffffff 	.word	0xfbffffff
 800511c:	efffffff 	.word	0xefffffff
 8005120:	08004a5d 	.word	0x08004a5d

08005124 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b0a2      	sub	sp, #136	@ 0x88
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800512c:	2382      	movs	r3, #130	@ 0x82
 800512e:	18fb      	adds	r3, r7, r3
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	2160      	movs	r1, #96	@ 0x60
 8005134:	5a52      	ldrh	r2, [r2, r1]
 8005136:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	2284      	movs	r2, #132	@ 0x84
 8005140:	18ba      	adds	r2, r7, r2
 8005142:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	228c      	movs	r2, #140	@ 0x8c
 8005158:	589b      	ldr	r3, [r3, r2]
 800515a:	2b22      	cmp	r3, #34	@ 0x22
 800515c:	d000      	beq.n	8005160 <UART_RxISR_16BIT_FIFOEN+0x3c>
 800515e:	e174      	b.n	800544a <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005160:	2376      	movs	r3, #118	@ 0x76
 8005162:	18fb      	adds	r3, r7, r3
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	2168      	movs	r1, #104	@ 0x68
 8005168:	5a52      	ldrh	r2, [r2, r1]
 800516a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800516c:	e119      	b.n	80053a2 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005174:	2174      	movs	r1, #116	@ 0x74
 8005176:	187b      	adds	r3, r7, r1
 8005178:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800517e:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005180:	187b      	adds	r3, r7, r1
 8005182:	2282      	movs	r2, #130	@ 0x82
 8005184:	18ba      	adds	r2, r7, r2
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	8812      	ldrh	r2, [r2, #0]
 800518a:	4013      	ands	r3, r2
 800518c:	b29a      	uxth	r2, r3
 800518e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005190:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005196:	1c9a      	adds	r2, r3, #2
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	225e      	movs	r2, #94	@ 0x5e
 80051a0:	5a9b      	ldrh	r3, [r3, r2]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b299      	uxth	r1, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	225e      	movs	r2, #94	@ 0x5e
 80051ac:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	69db      	ldr	r3, [r3, #28]
 80051b4:	2184      	movs	r1, #132	@ 0x84
 80051b6:	187a      	adds	r2, r7, r1
 80051b8:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80051ba:	187b      	adds	r3, r7, r1
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2207      	movs	r2, #7
 80051c0:	4013      	ands	r3, r2
 80051c2:	d04e      	beq.n	8005262 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051c4:	187b      	adds	r3, r7, r1
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2201      	movs	r2, #1
 80051ca:	4013      	ands	r3, r2
 80051cc:	d010      	beq.n	80051f0 <UART_RxISR_16BIT_FIFOEN+0xcc>
 80051ce:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80051d0:	2380      	movs	r3, #128	@ 0x80
 80051d2:	005b      	lsls	r3, r3, #1
 80051d4:	4013      	ands	r3, r2
 80051d6:	d00b      	beq.n	80051f0 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2201      	movs	r2, #1
 80051de:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2290      	movs	r2, #144	@ 0x90
 80051e4:	589b      	ldr	r3, [r3, r2]
 80051e6:	2201      	movs	r2, #1
 80051e8:	431a      	orrs	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2190      	movs	r1, #144	@ 0x90
 80051ee:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051f0:	2384      	movs	r3, #132	@ 0x84
 80051f2:	18fb      	adds	r3, r7, r3
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2202      	movs	r2, #2
 80051f8:	4013      	ands	r3, r2
 80051fa:	d00f      	beq.n	800521c <UART_RxISR_16BIT_FIFOEN+0xf8>
 80051fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051fe:	2201      	movs	r2, #1
 8005200:	4013      	ands	r3, r2
 8005202:	d00b      	beq.n	800521c <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2202      	movs	r2, #2
 800520a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2290      	movs	r2, #144	@ 0x90
 8005210:	589b      	ldr	r3, [r3, r2]
 8005212:	2204      	movs	r2, #4
 8005214:	431a      	orrs	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2190      	movs	r1, #144	@ 0x90
 800521a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800521c:	2384      	movs	r3, #132	@ 0x84
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2204      	movs	r2, #4
 8005224:	4013      	ands	r3, r2
 8005226:	d00f      	beq.n	8005248 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005228:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800522a:	2201      	movs	r2, #1
 800522c:	4013      	ands	r3, r2
 800522e:	d00b      	beq.n	8005248 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2204      	movs	r2, #4
 8005236:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2290      	movs	r2, #144	@ 0x90
 800523c:	589b      	ldr	r3, [r3, r2]
 800523e:	2202      	movs	r2, #2
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2190      	movs	r1, #144	@ 0x90
 8005246:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2290      	movs	r2, #144	@ 0x90
 800524c:	589b      	ldr	r3, [r3, r2]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	0018      	movs	r0, r3
 8005256:	f7fe fd93 	bl	8003d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2290      	movs	r2, #144	@ 0x90
 800525e:	2100      	movs	r1, #0
 8005260:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	225e      	movs	r2, #94	@ 0x5e
 8005266:	5a9b      	ldrh	r3, [r3, r2]
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d000      	beq.n	8005270 <UART_RxISR_16BIT_FIFOEN+0x14c>
 800526e:	e098      	b.n	80053a2 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005270:	f3ef 8310 	mrs	r3, PRIMASK
 8005274:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005278:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800527a:	2301      	movs	r3, #1
 800527c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800527e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005280:	f383 8810 	msr	PRIMASK, r3
}
 8005284:	46c0      	nop			@ (mov r8, r8)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4974      	ldr	r1, [pc, #464]	@ (8005464 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8005292:	400a      	ands	r2, r1
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005298:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800529c:	f383 8810 	msr	PRIMASK, r3
}
 80052a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052a2:	f3ef 8310 	mrs	r3, PRIMASK
 80052a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80052a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052ac:	2301      	movs	r3, #1
 80052ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052b2:	f383 8810 	msr	PRIMASK, r3
}
 80052b6:	46c0      	nop			@ (mov r8, r8)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4969      	ldr	r1, [pc, #420]	@ (8005468 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80052c4:	400a      	ands	r2, r1
 80052c6:	609a      	str	r2, [r3, #8]
 80052c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052ca:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052ce:	f383 8810 	msr	PRIMASK, r3
}
 80052d2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	228c      	movs	r2, #140	@ 0x8c
 80052d8:	2120      	movs	r1, #32
 80052da:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a5f      	ldr	r2, [pc, #380]	@ (800546c <UART_RxISR_16BIT_FIFOEN+0x348>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d01f      	beq.n	8005332 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	2380      	movs	r3, #128	@ 0x80
 80052fa:	041b      	lsls	r3, r3, #16
 80052fc:	4013      	ands	r3, r2
 80052fe:	d018      	beq.n	8005332 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005300:	f3ef 8310 	mrs	r3, PRIMASK
 8005304:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005308:	667b      	str	r3, [r7, #100]	@ 0x64
 800530a:	2301      	movs	r3, #1
 800530c:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800530e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005310:	f383 8810 	msr	PRIMASK, r3
}
 8005314:	46c0      	nop			@ (mov r8, r8)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4953      	ldr	r1, [pc, #332]	@ (8005470 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8005322:	400a      	ands	r2, r1
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005328:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532c:	f383 8810 	msr	PRIMASK, r3
}
 8005330:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005336:	2b01      	cmp	r3, #1
 8005338:	d12f      	bne.n	800539a <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005340:	f3ef 8310 	mrs	r3, PRIMASK
 8005344:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005348:	663b      	str	r3, [r7, #96]	@ 0x60
 800534a:	2301      	movs	r3, #1
 800534c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005350:	f383 8810 	msr	PRIMASK, r3
}
 8005354:	46c0      	nop			@ (mov r8, r8)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2110      	movs	r1, #16
 8005362:	438a      	bics	r2, r1
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800536a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800536c:	f383 8810 	msr	PRIMASK, r3
}
 8005370:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	2210      	movs	r2, #16
 800537a:	4013      	ands	r3, r2
 800537c:	2b10      	cmp	r3, #16
 800537e:	d103      	bne.n	8005388 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2210      	movs	r2, #16
 8005386:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	225c      	movs	r2, #92	@ 0x5c
 800538c:	5a9a      	ldrh	r2, [r3, r2]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	0011      	movs	r1, r2
 8005392:	0018      	movs	r0, r3
 8005394:	f7fe fcfc 	bl	8003d90 <HAL_UARTEx_RxEventCallback>
 8005398:	e003      	b.n	80053a2 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	0018      	movs	r0, r3
 800539e:	f7fb fc4d 	bl	8000c3c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80053a2:	2376      	movs	r3, #118	@ 0x76
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d006      	beq.n	80053ba <UART_RxISR_16BIT_FIFOEN+0x296>
 80053ac:	2384      	movs	r3, #132	@ 0x84
 80053ae:	18fb      	adds	r3, r7, r3
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2220      	movs	r2, #32
 80053b4:	4013      	ands	r3, r2
 80053b6:	d000      	beq.n	80053ba <UART_RxISR_16BIT_FIFOEN+0x296>
 80053b8:	e6d9      	b.n	800516e <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80053ba:	205e      	movs	r0, #94	@ 0x5e
 80053bc:	183b      	adds	r3, r7, r0
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	215e      	movs	r1, #94	@ 0x5e
 80053c2:	5a52      	ldrh	r2, [r2, r1]
 80053c4:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80053c6:	0001      	movs	r1, r0
 80053c8:	187b      	adds	r3, r7, r1
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d044      	beq.n	800545a <UART_RxISR_16BIT_FIFOEN+0x336>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2268      	movs	r2, #104	@ 0x68
 80053d4:	5a9b      	ldrh	r3, [r3, r2]
 80053d6:	187a      	adds	r2, r7, r1
 80053d8:	8812      	ldrh	r2, [r2, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d23d      	bcs.n	800545a <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053de:	f3ef 8310 	mrs	r3, PRIMASK
 80053e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80053e4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80053e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053e8:	2301      	movs	r3, #1
 80053ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f383 8810 	msr	PRIMASK, r3
}
 80053f2:	46c0      	nop			@ (mov r8, r8)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	491d      	ldr	r1, [pc, #116]	@ (8005474 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8005400:	400a      	ands	r2, r1
 8005402:	609a      	str	r2, [r3, #8]
 8005404:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005406:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f383 8810 	msr	PRIMASK, r3
}
 800540e:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a19      	ldr	r2, [pc, #100]	@ (8005478 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8005414:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005416:	f3ef 8310 	mrs	r3, PRIMASK
 800541a:	61bb      	str	r3, [r7, #24]
  return(result);
 800541c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800541e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005420:	2301      	movs	r3, #1
 8005422:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f383 8810 	msr	PRIMASK, r3
}
 800542a:	46c0      	nop			@ (mov r8, r8)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2120      	movs	r1, #32
 8005438:	430a      	orrs	r2, r1
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800543e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	f383 8810 	msr	PRIMASK, r3
}
 8005446:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005448:	e007      	b.n	800545a <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	699a      	ldr	r2, [r3, #24]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2108      	movs	r1, #8
 8005456:	430a      	orrs	r2, r1
 8005458:	619a      	str	r2, [r3, #24]
}
 800545a:	46c0      	nop			@ (mov r8, r8)
 800545c:	46bd      	mov	sp, r7
 800545e:	b022      	add	sp, #136	@ 0x88
 8005460:	bd80      	pop	{r7, pc}
 8005462:	46c0      	nop			@ (mov r8, r8)
 8005464:	fffffeff 	.word	0xfffffeff
 8005468:	effffffe 	.word	0xeffffffe
 800546c:	40008000 	.word	0x40008000
 8005470:	fbffffff 	.word	0xfbffffff
 8005474:	efffffff 	.word	0xefffffff
 8005478:	08004c21 	.word	0x08004c21

0800547c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005484:	46c0      	nop			@ (mov r8, r8)
 8005486:	46bd      	mov	sp, r7
 8005488:	b002      	add	sp, #8
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005494:	46c0      	nop			@ (mov r8, r8)
 8005496:	46bd      	mov	sp, r7
 8005498:	b002      	add	sp, #8
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80054a4:	46c0      	nop			@ (mov r8, r8)
 80054a6:	46bd      	mov	sp, r7
 80054a8:	b002      	add	sp, #8
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2284      	movs	r2, #132	@ 0x84
 80054b8:	5c9b      	ldrb	r3, [r3, r2]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80054be:	2302      	movs	r3, #2
 80054c0:	e027      	b.n	8005512 <HAL_UARTEx_DisableFifoMode+0x66>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2284      	movs	r2, #132	@ 0x84
 80054c6:	2101      	movs	r1, #1
 80054c8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2288      	movs	r2, #136	@ 0x88
 80054ce:	2124      	movs	r1, #36	@ 0x24
 80054d0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2101      	movs	r1, #1
 80054e6:	438a      	bics	r2, r1
 80054e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4a0b      	ldr	r2, [pc, #44]	@ (800551c <HAL_UARTEx_DisableFifoMode+0x70>)
 80054ee:	4013      	ands	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2288      	movs	r2, #136	@ 0x88
 8005504:	2120      	movs	r1, #32
 8005506:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2284      	movs	r2, #132	@ 0x84
 800550c:	2100      	movs	r1, #0
 800550e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	0018      	movs	r0, r3
 8005514:	46bd      	mov	sp, r7
 8005516:	b004      	add	sp, #16
 8005518:	bd80      	pop	{r7, pc}
 800551a:	46c0      	nop			@ (mov r8, r8)
 800551c:	dfffffff 	.word	0xdfffffff

08005520 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2284      	movs	r2, #132	@ 0x84
 800552e:	5c9b      	ldrb	r3, [r3, r2]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005534:	2302      	movs	r3, #2
 8005536:	e02e      	b.n	8005596 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2284      	movs	r2, #132	@ 0x84
 800553c:	2101      	movs	r1, #1
 800553e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2288      	movs	r2, #136	@ 0x88
 8005544:	2124      	movs	r1, #36	@ 0x24
 8005546:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2101      	movs	r1, #1
 800555c:	438a      	bics	r2, r1
 800555e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	08d9      	lsrs	r1, r3, #3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	0018      	movs	r0, r3
 8005578:	f000 f854 	bl	8005624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2288      	movs	r2, #136	@ 0x88
 8005588:	2120      	movs	r1, #32
 800558a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2284      	movs	r2, #132	@ 0x84
 8005590:	2100      	movs	r1, #0
 8005592:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	0018      	movs	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	b004      	add	sp, #16
 800559c:	bd80      	pop	{r7, pc}
	...

080055a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2284      	movs	r2, #132	@ 0x84
 80055ae:	5c9b      	ldrb	r3, [r3, r2]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e02f      	b.n	8005618 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2284      	movs	r2, #132	@ 0x84
 80055bc:	2101      	movs	r1, #1
 80055be:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2288      	movs	r2, #136	@ 0x88
 80055c4:	2124      	movs	r1, #36	@ 0x24
 80055c6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2101      	movs	r1, #1
 80055dc:	438a      	bics	r2, r1
 80055de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	4a0e      	ldr	r2, [pc, #56]	@ (8005620 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	0019      	movs	r1, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	0018      	movs	r0, r3
 80055fa:	f000 f813 	bl	8005624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2288      	movs	r2, #136	@ 0x88
 800560a:	2120      	movs	r1, #32
 800560c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2284      	movs	r2, #132	@ 0x84
 8005612:	2100      	movs	r1, #0
 8005614:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	0018      	movs	r0, r3
 800561a:	46bd      	mov	sp, r7
 800561c:	b004      	add	sp, #16
 800561e:	bd80      	pop	{r7, pc}
 8005620:	f1ffffff 	.word	0xf1ffffff

08005624 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005630:	2b00      	cmp	r3, #0
 8005632:	d108      	bne.n	8005646 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	226a      	movs	r2, #106	@ 0x6a
 8005638:	2101      	movs	r1, #1
 800563a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2268      	movs	r2, #104	@ 0x68
 8005640:	2101      	movs	r1, #1
 8005642:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005644:	e043      	b.n	80056ce <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005646:	260f      	movs	r6, #15
 8005648:	19bb      	adds	r3, r7, r6
 800564a:	2208      	movs	r2, #8
 800564c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800564e:	200e      	movs	r0, #14
 8005650:	183b      	adds	r3, r7, r0
 8005652:	2208      	movs	r2, #8
 8005654:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	0e5b      	lsrs	r3, r3, #25
 800565e:	b2da      	uxtb	r2, r3
 8005660:	240d      	movs	r4, #13
 8005662:	193b      	adds	r3, r7, r4
 8005664:	2107      	movs	r1, #7
 8005666:	400a      	ands	r2, r1
 8005668:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	0f5b      	lsrs	r3, r3, #29
 8005672:	b2da      	uxtb	r2, r3
 8005674:	250c      	movs	r5, #12
 8005676:	197b      	adds	r3, r7, r5
 8005678:	2107      	movs	r1, #7
 800567a:	400a      	ands	r2, r1
 800567c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800567e:	183b      	adds	r3, r7, r0
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	197a      	adds	r2, r7, r5
 8005684:	7812      	ldrb	r2, [r2, #0]
 8005686:	4914      	ldr	r1, [pc, #80]	@ (80056d8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005688:	5c8a      	ldrb	r2, [r1, r2]
 800568a:	435a      	muls	r2, r3
 800568c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800568e:	197b      	adds	r3, r7, r5
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	4a12      	ldr	r2, [pc, #72]	@ (80056dc <UARTEx_SetNbDataToProcess+0xb8>)
 8005694:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005696:	0019      	movs	r1, r3
 8005698:	f7fa fdbe 	bl	8000218 <__divsi3>
 800569c:	0003      	movs	r3, r0
 800569e:	b299      	uxth	r1, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	226a      	movs	r2, #106	@ 0x6a
 80056a4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056a6:	19bb      	adds	r3, r7, r6
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	193a      	adds	r2, r7, r4
 80056ac:	7812      	ldrb	r2, [r2, #0]
 80056ae:	490a      	ldr	r1, [pc, #40]	@ (80056d8 <UARTEx_SetNbDataToProcess+0xb4>)
 80056b0:	5c8a      	ldrb	r2, [r1, r2]
 80056b2:	435a      	muls	r2, r3
 80056b4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80056b6:	193b      	adds	r3, r7, r4
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	4a08      	ldr	r2, [pc, #32]	@ (80056dc <UARTEx_SetNbDataToProcess+0xb8>)
 80056bc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056be:	0019      	movs	r1, r3
 80056c0:	f7fa fdaa 	bl	8000218 <__divsi3>
 80056c4:	0003      	movs	r3, r0
 80056c6:	b299      	uxth	r1, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2268      	movs	r2, #104	@ 0x68
 80056cc:	5299      	strh	r1, [r3, r2]
}
 80056ce:	46c0      	nop			@ (mov r8, r8)
 80056d0:	46bd      	mov	sp, r7
 80056d2:	b005      	add	sp, #20
 80056d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056d6:	46c0      	nop			@ (mov r8, r8)
 80056d8:	0800581c 	.word	0x0800581c
 80056dc:	08005824 	.word	0x08005824

080056e0 <memset>:
 80056e0:	0003      	movs	r3, r0
 80056e2:	1882      	adds	r2, r0, r2
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d100      	bne.n	80056ea <memset+0xa>
 80056e8:	4770      	bx	lr
 80056ea:	7019      	strb	r1, [r3, #0]
 80056ec:	3301      	adds	r3, #1
 80056ee:	e7f9      	b.n	80056e4 <memset+0x4>

080056f0 <__libc_init_array>:
 80056f0:	b570      	push	{r4, r5, r6, lr}
 80056f2:	2600      	movs	r6, #0
 80056f4:	4c0c      	ldr	r4, [pc, #48]	@ (8005728 <__libc_init_array+0x38>)
 80056f6:	4d0d      	ldr	r5, [pc, #52]	@ (800572c <__libc_init_array+0x3c>)
 80056f8:	1b64      	subs	r4, r4, r5
 80056fa:	10a4      	asrs	r4, r4, #2
 80056fc:	42a6      	cmp	r6, r4
 80056fe:	d109      	bne.n	8005714 <__libc_init_array+0x24>
 8005700:	2600      	movs	r6, #0
 8005702:	f000 f819 	bl	8005738 <_init>
 8005706:	4c0a      	ldr	r4, [pc, #40]	@ (8005730 <__libc_init_array+0x40>)
 8005708:	4d0a      	ldr	r5, [pc, #40]	@ (8005734 <__libc_init_array+0x44>)
 800570a:	1b64      	subs	r4, r4, r5
 800570c:	10a4      	asrs	r4, r4, #2
 800570e:	42a6      	cmp	r6, r4
 8005710:	d105      	bne.n	800571e <__libc_init_array+0x2e>
 8005712:	bd70      	pop	{r4, r5, r6, pc}
 8005714:	00b3      	lsls	r3, r6, #2
 8005716:	58eb      	ldr	r3, [r5, r3]
 8005718:	4798      	blx	r3
 800571a:	3601      	adds	r6, #1
 800571c:	e7ee      	b.n	80056fc <__libc_init_array+0xc>
 800571e:	00b3      	lsls	r3, r6, #2
 8005720:	58eb      	ldr	r3, [r5, r3]
 8005722:	4798      	blx	r3
 8005724:	3601      	adds	r6, #1
 8005726:	e7f2      	b.n	800570e <__libc_init_array+0x1e>
 8005728:	08005834 	.word	0x08005834
 800572c:	08005834 	.word	0x08005834
 8005730:	08005838 	.word	0x08005838
 8005734:	08005834 	.word	0x08005834

08005738 <_init>:
 8005738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573a:	46c0      	nop			@ (mov r8, r8)
 800573c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573e:	bc08      	pop	{r3}
 8005740:	469e      	mov	lr, r3
 8005742:	4770      	bx	lr

08005744 <_fini>:
 8005744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005746:	46c0      	nop			@ (mov r8, r8)
 8005748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574a:	bc08      	pop	{r3}
 800574c:	469e      	mov	lr, r3
 800574e:	4770      	bx	lr
