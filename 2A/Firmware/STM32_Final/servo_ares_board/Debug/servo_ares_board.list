
servo_ares_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005420  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080054dc  080054dc  000064dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055b8  080055b8  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080055b8  080055b8  000065b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055c0  080055c0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055c0  080055c0  000065c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055c4  080055c4  000065c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080055c8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000000c  080055d4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  080055d4  00007290  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000faae  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002080  00000000  00000000  00016ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00018b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afe  00000000  00000000  00019950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189b8  00000000  00000000  0001a44e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011124  00000000  00000000  00032e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0f24  00000000  00000000  00043f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4e4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032ac  00000000  00000000  000e4e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e8140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080054c4 	.word	0x080054c4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080054c4 	.word	0x080054c4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000622:	f000 ff59 	bl	80014d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000626:	f000 f91f 	bl	8000868 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800062a:	f000 fc9b 	bl	8000f64 <MX_GPIO_Init>
	MX_TIM2_Init();
 800062e:	f000 fa2f 	bl	8000a90 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8000632:	f000 fbfb 	bl	8000e2c <MX_USART1_UART_Init>
	MX_TIM3_Init();
 8000636:	f000 faab 	bl	8000b90 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 800063a:	f000 fc45 	bl	8000ec8 <MX_USART2_UART_Init>
	MX_TIM15_Init();
 800063e:	f000 fb31 	bl	8000ca4 <MX_TIM15_Init>
	MX_TIM1_Init();
 8000642:	f000 f959 	bl	80008f8 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);//PA7
 8000646:	4b7b      	ldr	r3, [pc, #492]	@ (8000834 <main+0x218>)
 8000648:	2104      	movs	r1, #4
 800064a:	0018      	movs	r0, r3
 800064c:	f002 f986 	bl	800295c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//PB0
 8000650:	4b78      	ldr	r3, [pc, #480]	@ (8000834 <main+0x218>)
 8000652:	2108      	movs	r1, #8
 8000654:	0018      	movs	r0, r3
 8000656:	f002 f981 	bl	800295c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);//PB10
 800065a:	4b77      	ldr	r3, [pc, #476]	@ (8000838 <main+0x21c>)
 800065c:	2108      	movs	r1, #8
 800065e:	0018      	movs	r0, r3
 8000660:	f002 f97c 	bl	800295c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);//PB14
 8000664:	4b75      	ldr	r3, [pc, #468]	@ (800083c <main+0x220>)
 8000666:	2100      	movs	r1, #0
 8000668:	0018      	movs	r0, r3
 800066a:	f002 f977 	bl	800295c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//PB15
 800066e:	4b73      	ldr	r3, [pc, #460]	@ (800083c <main+0x220>)
 8000670:	2104      	movs	r1, #4
 8000672:	0018      	movs	r0, r3
 8000674:	f002 f972 	bl	800295c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);//PA8
 8000678:	4b71      	ldr	r3, [pc, #452]	@ (8000840 <main+0x224>)
 800067a:	2100      	movs	r1, #0
 800067c:	0018      	movs	r0, r3
 800067e:	f002 f96d 	bl	800295c <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart1, (uint8_t *)rx_data, sizeof(rx_data));
 8000682:	4970      	ldr	r1, [pc, #448]	@ (8000844 <main+0x228>)
 8000684:	4b70      	ldr	r3, [pc, #448]	@ (8000848 <main+0x22c>)
 8000686:	220c      	movs	r2, #12
 8000688:	0018      	movs	r0, r3
 800068a:	f003 fa3d 	bl	8003b08 <HAL_UART_Receive_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		//debug
		char message[14]={0};; // 12 caractères de rx_data + 2 pour "\r\n"
 800068e:	003b      	movs	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	3304      	adds	r3, #4
 8000696:	220a      	movs	r2, #10
 8000698:	2100      	movs	r1, #0
 800069a:	0018      	movs	r0, r3
 800069c:	f004 fee6 	bl	800546c <memset>
		memcpy(message, rx_data, 12); // Copier rx_data dans message
 80006a0:	003b      	movs	r3, r7
 80006a2:	4a68      	ldr	r2, [pc, #416]	@ (8000844 <main+0x228>)
 80006a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006a6:	c313      	stmia	r3!, {r0, r1, r4}
		message[12] = '\r'; // Ajouter retour chariot
 80006a8:	003b      	movs	r3, r7
 80006aa:	220d      	movs	r2, #13
 80006ac:	731a      	strb	r2, [r3, #12]
		message[13] = '\n'; // Ajouter nouvelle ligne
 80006ae:	003b      	movs	r3, r7
 80006b0:	220a      	movs	r2, #10
 80006b2:	735a      	strb	r2, [r3, #13]
		HAL_UART_Transmit(&huart2, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);
 80006b4:	2301      	movs	r3, #1
 80006b6:	425b      	negs	r3, r3
 80006b8:	0039      	movs	r1, r7
 80006ba:	4864      	ldr	r0, [pc, #400]	@ (800084c <main+0x230>)
 80006bc:	220e      	movs	r2, #14
 80006be:	f003 f97f 	bl	80039c0 <HAL_UART_Transmit>

		// Set all to '0' for 1 second
		memset(rx_data, '0', sizeof(rx_data)); // Fill rx_data with '0'
 80006c2:	4b60      	ldr	r3, [pc, #384]	@ (8000844 <main+0x228>)
 80006c4:	220c      	movs	r2, #12
 80006c6:	2130      	movs	r1, #48	@ 0x30
 80006c8:	0018      	movs	r0, r3
 80006ca:	f004 fecf 	bl	800546c <memset>

		//première pince
		if (rx_data[0] == '0') { // PA7 (TIM3 Channel 2) milieu
 80006ce:	4b5d      	ldr	r3, [pc, #372]	@ (8000844 <main+0x228>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b30      	cmp	r3, #48	@ 0x30
 80006d4:	d104      	bne.n	80006e0 <main+0xc4>
			TIM3->CCR2 = SERVO_MAX_M;
 80006d6:	4b5e      	ldr	r3, [pc, #376]	@ (8000850 <main+0x234>)
 80006d8:	22fa      	movs	r2, #250	@ 0xfa
 80006da:	00d2      	lsls	r2, r2, #3
 80006dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80006de:	e003      	b.n	80006e8 <main+0xcc>
		} else {
			TIM3->CCR2 = SERVO_MIN_M;
 80006e0:	4b5b      	ldr	r3, [pc, #364]	@ (8000850 <main+0x234>)
 80006e2:	2296      	movs	r2, #150	@ 0x96
 80006e4:	00d2      	lsls	r2, r2, #3
 80006e6:	639a      	str	r2, [r3, #56]	@ 0x38
		}
		if (rx_data[1] == '0') { // PB0 (TIM3 Channel 3) droit
 80006e8:	4b56      	ldr	r3, [pc, #344]	@ (8000844 <main+0x228>)
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	2b30      	cmp	r3, #48	@ 0x30
 80006ee:	d104      	bne.n	80006fa <main+0xde>
			TIM3->CCR3 = SERVO_MIN_D;
 80006f0:	4b57      	ldr	r3, [pc, #348]	@ (8000850 <main+0x234>)
 80006f2:	22fa      	movs	r2, #250	@ 0xfa
 80006f4:	0092      	lsls	r2, r2, #2
 80006f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006f8:	e002      	b.n	8000700 <main+0xe4>
		} else {
			TIM3->CCR3 = SERVO_MAX_D;
 80006fa:	4b55      	ldr	r3, [pc, #340]	@ (8000850 <main+0x234>)
 80006fc:	4a55      	ldr	r2, [pc, #340]	@ (8000854 <main+0x238>)
 80006fe:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
		HAL_Delay(100); // delai pour que les 2 pinces ne se touchent pas
 8000700:	2064      	movs	r0, #100	@ 0x64
 8000702:	f000 ff6f 	bl	80015e4 <HAL_Delay>
		if (rx_data[2] == '0') { // PB10 (TIM2 Channel 3)gauche
 8000706:	4b4f      	ldr	r3, [pc, #316]	@ (8000844 <main+0x228>)
 8000708:	789b      	ldrb	r3, [r3, #2]
 800070a:	2b30      	cmp	r3, #48	@ 0x30
 800070c:	d104      	bne.n	8000718 <main+0xfc>
			TIM2->CCR3 = SERVO_MAX_G;
 800070e:	2380      	movs	r3, #128	@ 0x80
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	4a51      	ldr	r2, [pc, #324]	@ (8000858 <main+0x23c>)
 8000714:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000716:	e004      	b.n	8000722 <main+0x106>
		} else {
			TIM2->CCR3 = SERVO_MIN_G;
 8000718:	2380      	movs	r3, #128	@ 0x80
 800071a:	05db      	lsls	r3, r3, #23
 800071c:	2296      	movs	r2, #150	@ 0x96
 800071e:	00d2      	lsls	r2, r2, #3
 8000720:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
		//deuxieme pince
		if (rx_data[3] == '0') { // PB14 milieu
 8000722:	4b48      	ldr	r3, [pc, #288]	@ (8000844 <main+0x228>)
 8000724:	78db      	ldrb	r3, [r3, #3]
 8000726:	2b30      	cmp	r3, #48	@ 0x30
 8000728:	d104      	bne.n	8000734 <main+0x118>
			TIM15->CCR1 = SERVO_MAX_M;
 800072a:	4b4c      	ldr	r3, [pc, #304]	@ (800085c <main+0x240>)
 800072c:	22fa      	movs	r2, #250	@ 0xfa
 800072e:	00d2      	lsls	r2, r2, #3
 8000730:	635a      	str	r2, [r3, #52]	@ 0x34
 8000732:	e003      	b.n	800073c <main+0x120>
		} else {
			TIM15->CCR1 = SERVO_MIN_M;
 8000734:	4b49      	ldr	r3, [pc, #292]	@ (800085c <main+0x240>)
 8000736:	2296      	movs	r2, #150	@ 0x96
 8000738:	00d2      	lsls	r2, r2, #3
 800073a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
		if (rx_data[4] == '0') { // PB15 droit
 800073c:	4b41      	ldr	r3, [pc, #260]	@ (8000844 <main+0x228>)
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	2b30      	cmp	r3, #48	@ 0x30
 8000742:	d104      	bne.n	800074e <main+0x132>
			TIM15->CCR2 = SERVO_MIN_D;
 8000744:	4b45      	ldr	r3, [pc, #276]	@ (800085c <main+0x240>)
 8000746:	22fa      	movs	r2, #250	@ 0xfa
 8000748:	0092      	lsls	r2, r2, #2
 800074a:	639a      	str	r2, [r3, #56]	@ 0x38
 800074c:	e002      	b.n	8000754 <main+0x138>
		} else {
			TIM15->CCR2 = SERVO_MAX_D;
 800074e:	4b43      	ldr	r3, [pc, #268]	@ (800085c <main+0x240>)
 8000750:	4a40      	ldr	r2, [pc, #256]	@ (8000854 <main+0x238>)
 8000752:	639a      	str	r2, [r3, #56]	@ 0x38
		}
		HAL_Delay(100); // delai pour que les 2 pinces ne se touchent pas
 8000754:	2064      	movs	r0, #100	@ 0x64
 8000756:	f000 ff45 	bl	80015e4 <HAL_Delay>
		if (rx_data[5] == '0') { // PA8 gauche
 800075a:	4b3a      	ldr	r3, [pc, #232]	@ (8000844 <main+0x228>)
 800075c:	795b      	ldrb	r3, [r3, #5]
 800075e:	2b30      	cmp	r3, #48	@ 0x30
 8000760:	d103      	bne.n	800076a <main+0x14e>
			TIM1->CCR1 = SERVO_MAX_G;
 8000762:	4b3f      	ldr	r3, [pc, #252]	@ (8000860 <main+0x244>)
 8000764:	4a3c      	ldr	r2, [pc, #240]	@ (8000858 <main+0x23c>)
 8000766:	635a      	str	r2, [r3, #52]	@ 0x34
 8000768:	e003      	b.n	8000772 <main+0x156>
		} else {
			TIM1->CCR1 = SERVO_MIN_G;
 800076a:	4b3d      	ldr	r3, [pc, #244]	@ (8000860 <main+0x244>)
 800076c:	2296      	movs	r2, #150	@ 0x96
 800076e:	00d2      	lsls	r2, r2, #3
 8000770:	635a      	str	r2, [r3, #52]	@ 0x34
		}

		HAL_Delay(5000);
 8000772:	4b3c      	ldr	r3, [pc, #240]	@ (8000864 <main+0x248>)
 8000774:	0018      	movs	r0, r3
 8000776:	f000 ff35 	bl	80015e4 <HAL_Delay>

		// Set all to '1' for 1 second
		memset(rx_data, '1', sizeof(rx_data)); // Fill rx_data with '1'
 800077a:	4b32      	ldr	r3, [pc, #200]	@ (8000844 <main+0x228>)
 800077c:	220c      	movs	r2, #12
 800077e:	2131      	movs	r1, #49	@ 0x31
 8000780:	0018      	movs	r0, r3
 8000782:	f004 fe73 	bl	800546c <memset>

		//première pince
		if (rx_data[0] == '0') { // PA7 (TIM3 Channel 2)
 8000786:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <main+0x228>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b30      	cmp	r3, #48	@ 0x30
 800078c:	d104      	bne.n	8000798 <main+0x17c>
			TIM3->CCR2 = SERVO_MAX_M;
 800078e:	4b30      	ldr	r3, [pc, #192]	@ (8000850 <main+0x234>)
 8000790:	22fa      	movs	r2, #250	@ 0xfa
 8000792:	00d2      	lsls	r2, r2, #3
 8000794:	639a      	str	r2, [r3, #56]	@ 0x38
 8000796:	e003      	b.n	80007a0 <main+0x184>
		} else {
			TIM3->CCR2 = SERVO_MIN_M;
 8000798:	4b2d      	ldr	r3, [pc, #180]	@ (8000850 <main+0x234>)
 800079a:	2296      	movs	r2, #150	@ 0x96
 800079c:	00d2      	lsls	r2, r2, #3
 800079e:	639a      	str	r2, [r3, #56]	@ 0x38
		}
		HAL_Delay(100);
 80007a0:	2064      	movs	r0, #100	@ 0x64
 80007a2:	f000 ff1f 	bl	80015e4 <HAL_Delay>
		if (rx_data[1] == '0') { // PB0 (TIM3 Channel 3)
 80007a6:	4b27      	ldr	r3, [pc, #156]	@ (8000844 <main+0x228>)
 80007a8:	785b      	ldrb	r3, [r3, #1]
 80007aa:	2b30      	cmp	r3, #48	@ 0x30
 80007ac:	d104      	bne.n	80007b8 <main+0x19c>
			TIM3->CCR3 = SERVO_MIN_D;
 80007ae:	4b28      	ldr	r3, [pc, #160]	@ (8000850 <main+0x234>)
 80007b0:	22fa      	movs	r2, #250	@ 0xfa
 80007b2:	0092      	lsls	r2, r2, #2
 80007b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007b6:	e002      	b.n	80007be <main+0x1a2>
		} else {
			TIM3->CCR3 = SERVO_MAX_D;
 80007b8:	4b25      	ldr	r3, [pc, #148]	@ (8000850 <main+0x234>)
 80007ba:	4a26      	ldr	r2, [pc, #152]	@ (8000854 <main+0x238>)
 80007bc:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
		if (rx_data[2] == '0') { // PB10 (TIM2 Channel 3)
 80007be:	4b21      	ldr	r3, [pc, #132]	@ (8000844 <main+0x228>)
 80007c0:	789b      	ldrb	r3, [r3, #2]
 80007c2:	2b30      	cmp	r3, #48	@ 0x30
 80007c4:	d104      	bne.n	80007d0 <main+0x1b4>
			TIM2->CCR3 = SERVO_MAX_G;
 80007c6:	2380      	movs	r3, #128	@ 0x80
 80007c8:	05db      	lsls	r3, r3, #23
 80007ca:	4a23      	ldr	r2, [pc, #140]	@ (8000858 <main+0x23c>)
 80007cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007ce:	e004      	b.n	80007da <main+0x1be>
		} else {
			TIM2->CCR3 = SERVO_MIN_G;
 80007d0:	2380      	movs	r3, #128	@ 0x80
 80007d2:	05db      	lsls	r3, r3, #23
 80007d4:	2296      	movs	r2, #150	@ 0x96
 80007d6:	00d2      	lsls	r2, r2, #3
 80007d8:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
		//deuxieme pince
		if (rx_data[3] == '0') { // PB14 milieu
 80007da:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <main+0x228>)
 80007dc:	78db      	ldrb	r3, [r3, #3]
 80007de:	2b30      	cmp	r3, #48	@ 0x30
 80007e0:	d104      	bne.n	80007ec <main+0x1d0>
			TIM15->CCR1 = SERVO_MAX_M;
 80007e2:	4b1e      	ldr	r3, [pc, #120]	@ (800085c <main+0x240>)
 80007e4:	22fa      	movs	r2, #250	@ 0xfa
 80007e6:	00d2      	lsls	r2, r2, #3
 80007e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ea:	e003      	b.n	80007f4 <main+0x1d8>
		} else {
			TIM15->CCR1 = SERVO_MIN_M;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <main+0x240>)
 80007ee:	2296      	movs	r2, #150	@ 0x96
 80007f0:	00d2      	lsls	r2, r2, #3
 80007f2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
		HAL_Delay(100); // delai pour que les 2 pinces ne se touchent pas
 80007f4:	2064      	movs	r0, #100	@ 0x64
 80007f6:	f000 fef5 	bl	80015e4 <HAL_Delay>
		if (rx_data[4] == '0') { // PB15 droit
 80007fa:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <main+0x228>)
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	2b30      	cmp	r3, #48	@ 0x30
 8000800:	d104      	bne.n	800080c <main+0x1f0>
			TIM15->CCR2 = SERVO_MIN_D;
 8000802:	4b16      	ldr	r3, [pc, #88]	@ (800085c <main+0x240>)
 8000804:	22fa      	movs	r2, #250	@ 0xfa
 8000806:	0092      	lsls	r2, r2, #2
 8000808:	639a      	str	r2, [r3, #56]	@ 0x38
 800080a:	e002      	b.n	8000812 <main+0x1f6>
		} else {
			TIM15->CCR2 = SERVO_MAX_D;
 800080c:	4b13      	ldr	r3, [pc, #76]	@ (800085c <main+0x240>)
 800080e:	4a11      	ldr	r2, [pc, #68]	@ (8000854 <main+0x238>)
 8000810:	639a      	str	r2, [r3, #56]	@ 0x38
		}

		if (rx_data[5] == '0') { // PA8 gauche
 8000812:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <main+0x228>)
 8000814:	795b      	ldrb	r3, [r3, #5]
 8000816:	2b30      	cmp	r3, #48	@ 0x30
 8000818:	d103      	bne.n	8000822 <main+0x206>
			TIM1->CCR1 = SERVO_MAX_G;
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <main+0x244>)
 800081c:	4a0e      	ldr	r2, [pc, #56]	@ (8000858 <main+0x23c>)
 800081e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000820:	e003      	b.n	800082a <main+0x20e>
		} else {
			TIM1->CCR1 = SERVO_MIN_G;
 8000822:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <main+0x244>)
 8000824:	2296      	movs	r2, #150	@ 0x96
 8000826:	00d2      	lsls	r2, r2, #3
 8000828:	635a      	str	r2, [r3, #52]	@ 0x34
		}

		HAL_Delay(5000);
 800082a:	4b0e      	ldr	r3, [pc, #56]	@ (8000864 <main+0x248>)
 800082c:	0018      	movs	r0, r3
 800082e:	f000 fed9 	bl	80015e4 <HAL_Delay>
	{
 8000832:	e72c      	b.n	800068e <main+0x72>
 8000834:	200000c0 	.word	0x200000c0
 8000838:	20000074 	.word	0x20000074
 800083c:	2000010c 	.word	0x2000010c
 8000840:	20000028 	.word	0x20000028
 8000844:	20000280 	.word	0x20000280
 8000848:	20000158 	.word	0x20000158
 800084c:	200001ec 	.word	0x200001ec
 8000850:	40000400 	.word	0x40000400
 8000854:	0000076c 	.word	0x0000076c
 8000858:	00000898 	.word	0x00000898
 800085c:	40014000 	.word	0x40014000
 8000860:	40012c00 	.word	0x40012c00
 8000864:	00001388 	.word	0x00001388

08000868 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b093      	sub	sp, #76	@ 0x4c
 800086c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	2410      	movs	r4, #16
 8000870:	193b      	adds	r3, r7, r4
 8000872:	0018      	movs	r0, r3
 8000874:	2338      	movs	r3, #56	@ 0x38
 8000876:	001a      	movs	r2, r3
 8000878:	2100      	movs	r1, #0
 800087a:	f004 fdf7 	bl	800546c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087e:	003b      	movs	r3, r7
 8000880:	0018      	movs	r0, r3
 8000882:	2310      	movs	r3, #16
 8000884:	001a      	movs	r2, r3
 8000886:	2100      	movs	r1, #0
 8000888:	f004 fdf0 	bl	800546c <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800088c:	2380      	movs	r3, #128	@ 0x80
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	0018      	movs	r0, r3
 8000892:	f001 f8e3 	bl	8001a5c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000896:	193b      	adds	r3, r7, r4
 8000898:	2202      	movs	r2, #2
 800089a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800089c:	193b      	adds	r3, r7, r4
 800089e:	2280      	movs	r2, #128	@ 0x80
 80008a0:	0052      	lsls	r2, r2, #1
 80008a2:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2240      	movs	r2, #64	@ 0x40
 80008ae:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	0018      	movs	r0, r3
 80008ba:	f001 f91b 	bl	8001af4 <HAL_RCC_OscConfig>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0x5e>
	{
		Error_Handler();
 80008c2:	f000 fb87 	bl	8000fd4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c6:	003b      	movs	r3, r7
 80008c8:	2207      	movs	r2, #7
 80008ca:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008cc:	003b      	movs	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	003b      	movs	r3, r7
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d8:	003b      	movs	r3, r7
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008de:	003b      	movs	r3, r7
 80008e0:	2100      	movs	r1, #0
 80008e2:	0018      	movs	r0, r3
 80008e4:	f001 fc20 	bl	8002128 <HAL_RCC_ClockConfig>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x88>
	{
		Error_Handler();
 80008ec:	f000 fb72 	bl	8000fd4 <Error_Handler>
	}
}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b013      	add	sp, #76	@ 0x4c
 80008f6:	bd90      	pop	{r4, r7, pc}

080008f8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b09c      	sub	sp, #112	@ 0x70
 80008fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	2360      	movs	r3, #96	@ 0x60
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	0018      	movs	r0, r3
 8000904:	2310      	movs	r3, #16
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f004 fdaf 	bl	800546c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090e:	2354      	movs	r3, #84	@ 0x54
 8000910:	18fb      	adds	r3, r7, r3
 8000912:	0018      	movs	r0, r3
 8000914:	230c      	movs	r3, #12
 8000916:	001a      	movs	r2, r3
 8000918:	2100      	movs	r1, #0
 800091a:	f004 fda7 	bl	800546c <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 800091e:	2338      	movs	r3, #56	@ 0x38
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	0018      	movs	r0, r3
 8000924:	231c      	movs	r3, #28
 8000926:	001a      	movs	r2, r3
 8000928:	2100      	movs	r1, #0
 800092a:	f004 fd9f 	bl	800546c <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	0018      	movs	r0, r3
 8000932:	2334      	movs	r3, #52	@ 0x34
 8000934:	001a      	movs	r2, r3
 8000936:	2100      	movs	r1, #0
 8000938:	f004 fd98 	bl	800546c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800093c:	4b51      	ldr	r3, [pc, #324]	@ (8000a84 <MX_TIM1_Init+0x18c>)
 800093e:	4a52      	ldr	r2, [pc, #328]	@ (8000a88 <MX_TIM1_Init+0x190>)
 8000940:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 16-1;
 8000942:	4b50      	ldr	r3, [pc, #320]	@ (8000a84 <MX_TIM1_Init+0x18c>)
 8000944:	220f      	movs	r2, #15
 8000946:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b4e      	ldr	r3, [pc, #312]	@ (8000a84 <MX_TIM1_Init+0x18c>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 3002-1;
 800094e:	4b4d      	ldr	r3, [pc, #308]	@ (8000a84 <MX_TIM1_Init+0x18c>)
 8000950:	4a4e      	ldr	r2, [pc, #312]	@ (8000a8c <MX_TIM1_Init+0x194>)
 8000952:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000954:	4b4b      	ldr	r3, [pc, #300]	@ (8000a84 <MX_TIM1_Init+0x18c>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800095a:	4b4a      	ldr	r3, [pc, #296]	@ (8000a84 <MX_TIM1_Init+0x18c>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000960:	4b48      	ldr	r3, [pc, #288]	@ (8000a84 <MX_TIM1_Init+0x18c>)
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000966:	4b47      	ldr	r3, [pc, #284]	@ (8000a84 <MX_TIM1_Init+0x18c>)
 8000968:	0018      	movs	r0, r3
 800096a:	f001 ff3f 	bl	80027ec <HAL_TIM_Base_Init>
 800096e:	1e03      	subs	r3, r0, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM1_Init+0x7e>
	{
		Error_Handler();
 8000972:	f000 fb2f 	bl	8000fd4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000976:	2160      	movs	r1, #96	@ 0x60
 8000978:	187b      	adds	r3, r7, r1
 800097a:	2280      	movs	r2, #128	@ 0x80
 800097c:	0152      	lsls	r2, r2, #5
 800097e:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000980:	187a      	adds	r2, r7, r1
 8000982:	4b40      	ldr	r3, [pc, #256]	@ (8000a84 <MX_TIM1_Init+0x18c>)
 8000984:	0011      	movs	r1, r2
 8000986:	0018      	movs	r0, r3
 8000988:	f002 f9d2 	bl	8002d30 <HAL_TIM_ConfigClockSource>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0x9c>
	{
		Error_Handler();
 8000990:	f000 fb20 	bl	8000fd4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000994:	4b3b      	ldr	r3, [pc, #236]	@ (8000a84 <MX_TIM1_Init+0x18c>)
 8000996:	0018      	movs	r0, r3
 8000998:	f001 ff80 	bl	800289c <HAL_TIM_PWM_Init>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM1_Init+0xac>
	{
		Error_Handler();
 80009a0:	f000 fb18 	bl	8000fd4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a4:	2154      	movs	r1, #84	@ 0x54
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2200      	movs	r2, #0
 80009b0:	605a      	str	r2, [r3, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b8:	187a      	adds	r2, r7, r1
 80009ba:	4b32      	ldr	r3, [pc, #200]	@ (8000a84 <MX_TIM1_Init+0x18c>)
 80009bc:	0011      	movs	r1, r2
 80009be:	0018      	movs	r0, r3
 80009c0:	f002 fe9e 	bl	8003700 <HAL_TIMEx_MasterConfigSynchronization>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0xd4>
	{
		Error_Handler();
 80009c8:	f000 fb04 	bl	8000fd4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009cc:	2138      	movs	r1, #56	@ 0x38
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2260      	movs	r2, #96	@ 0x60
 80009d2:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f8:	1879      	adds	r1, r7, r1
 80009fa:	4b22      	ldr	r3, [pc, #136]	@ (8000a84 <MX_TIM1_Init+0x18c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	0018      	movs	r0, r3
 8000a00:	f002 f896 	bl	8002b30 <HAL_TIM_PWM_ConfigChannel>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0x114>
	{
		Error_Handler();
 8000a08:	f000 fae4 	bl	8000fd4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2280      	movs	r2, #128	@ 0x80
 8000a2e:	0192      	lsls	r2, r2, #6
 8000a30:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2280      	movs	r2, #128	@ 0x80
 8000a48:	0492      	lsls	r2, r2, #18
 8000a4a:	625a      	str	r2, [r3, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	629a      	str	r2, [r3, #40]	@ 0x28
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2200      	movs	r2, #0
 8000a56:	62da      	str	r2, [r3, #44]	@ 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a5e:	1d3a      	adds	r2, r7, #4
 8000a60:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <MX_TIM1_Init+0x18c>)
 8000a62:	0011      	movs	r1, r2
 8000a64:	0018      	movs	r0, r3
 8000a66:	f002 feb9 	bl	80037dc <HAL_TIMEx_ConfigBreakDeadTime>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0x17a>
	{
		Error_Handler();
 8000a6e:	f000 fab1 	bl	8000fd4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000a72:	4b04      	ldr	r3, [pc, #16]	@ (8000a84 <MX_TIM1_Init+0x18c>)
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 fb5b 	bl	8001130 <HAL_TIM_MspPostInit>

}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b01c      	add	sp, #112	@ 0x70
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	20000028 	.word	0x20000028
 8000a88:	40012c00 	.word	0x40012c00
 8000a8c:	00000bb9 	.word	0x00000bb9

08000a90 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	@ 0x38
 8000a94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a96:	2328      	movs	r3, #40	@ 0x28
 8000a98:	18fb      	adds	r3, r7, r3
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	001a      	movs	r2, r3
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	f004 fce3 	bl	800546c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa6:	231c      	movs	r3, #28
 8000aa8:	18fb      	adds	r3, r7, r3
 8000aaa:	0018      	movs	r0, r3
 8000aac:	230c      	movs	r3, #12
 8000aae:	001a      	movs	r2, r3
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	f004 fcdb 	bl	800546c <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab6:	003b      	movs	r3, r7
 8000ab8:	0018      	movs	r0, r3
 8000aba:	231c      	movs	r3, #28
 8000abc:	001a      	movs	r2, r3
 8000abe:	2100      	movs	r1, #0
 8000ac0:	f004 fcd4 	bl	800546c <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000ac4:	4b30      	ldr	r3, [pc, #192]	@ (8000b88 <MX_TIM2_Init+0xf8>)
 8000ac6:	2280      	movs	r2, #128	@ 0x80
 8000ac8:	05d2      	lsls	r2, r2, #23
 8000aca:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 16-1;
 8000acc:	4b2e      	ldr	r3, [pc, #184]	@ (8000b88 <MX_TIM2_Init+0xf8>)
 8000ace:	220f      	movs	r2, #15
 8000ad0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b88 <MX_TIM2_Init+0xf8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 3002-1;
 8000ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b88 <MX_TIM2_Init+0xf8>)
 8000ada:	4a2c      	ldr	r2, [pc, #176]	@ (8000b8c <MX_TIM2_Init+0xfc>)
 8000adc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ade:	4b2a      	ldr	r3, [pc, #168]	@ (8000b88 <MX_TIM2_Init+0xf8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ae4:	4b28      	ldr	r3, [pc, #160]	@ (8000b88 <MX_TIM2_Init+0xf8>)
 8000ae6:	2280      	movs	r2, #128	@ 0x80
 8000ae8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aea:	4b27      	ldr	r3, [pc, #156]	@ (8000b88 <MX_TIM2_Init+0xf8>)
 8000aec:	0018      	movs	r0, r3
 8000aee:	f001 fe7d 	bl	80027ec <HAL_TIM_Base_Init>
 8000af2:	1e03      	subs	r3, r0, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8000af6:	f000 fa6d 	bl	8000fd4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afa:	2128      	movs	r1, #40	@ 0x28
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2280      	movs	r2, #128	@ 0x80
 8000b00:	0152      	lsls	r2, r2, #5
 8000b02:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b04:	187a      	adds	r2, r7, r1
 8000b06:	4b20      	ldr	r3, [pc, #128]	@ (8000b88 <MX_TIM2_Init+0xf8>)
 8000b08:	0011      	movs	r1, r2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f002 f910 	bl	8002d30 <HAL_TIM_ConfigClockSource>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM2_Init+0x88>
	{
		Error_Handler();
 8000b14:	f000 fa5e 	bl	8000fd4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b18:	4b1b      	ldr	r3, [pc, #108]	@ (8000b88 <MX_TIM2_Init+0xf8>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f001 febe 	bl	800289c <HAL_TIM_PWM_Init>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM2_Init+0x98>
	{
		Error_Handler();
 8000b24:	f000 fa56 	bl	8000fd4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b28:	211c      	movs	r1, #28
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b36:	187a      	adds	r2, r7, r1
 8000b38:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <MX_TIM2_Init+0xf8>)
 8000b3a:	0011      	movs	r1, r2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f002 fddf 	bl	8003700 <HAL_TIMEx_MasterConfigSynchronization>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM2_Init+0xba>
	{
		Error_Handler();
 8000b46:	f000 fa45 	bl	8000fd4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b4a:	003b      	movs	r3, r7
 8000b4c:	2260      	movs	r2, #96	@ 0x60
 8000b4e:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8000b50:	003b      	movs	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b56:	003b      	movs	r3, r7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5c:	003b      	movs	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b62:	0039      	movs	r1, r7
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <MX_TIM2_Init+0xf8>)
 8000b66:	2208      	movs	r2, #8
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f001 ffe1 	bl	8002b30 <HAL_TIM_PWM_ConfigChannel>
 8000b6e:	1e03      	subs	r3, r0, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM2_Init+0xe6>
	{
		Error_Handler();
 8000b72:	f000 fa2f 	bl	8000fd4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000b76:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <MX_TIM2_Init+0xf8>)
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 fad9 	bl	8001130 <HAL_TIM_MspPostInit>

}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b00e      	add	sp, #56	@ 0x38
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	20000074 	.word	0x20000074
 8000b8c:	00000bb9 	.word	0x00000bb9

08000b90 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08e      	sub	sp, #56	@ 0x38
 8000b94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b96:	2328      	movs	r3, #40	@ 0x28
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	2310      	movs	r3, #16
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	f004 fc63 	bl	800546c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba6:	231c      	movs	r3, #28
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	0018      	movs	r0, r3
 8000bac:	230c      	movs	r3, #12
 8000bae:	001a      	movs	r2, r3
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f004 fc5b 	bl	800546c <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb6:	003b      	movs	r3, r7
 8000bb8:	0018      	movs	r0, r3
 8000bba:	231c      	movs	r3, #28
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f004 fc54 	bl	800546c <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000bc4:	4b34      	ldr	r3, [pc, #208]	@ (8000c98 <MX_TIM3_Init+0x108>)
 8000bc6:	4a35      	ldr	r2, [pc, #212]	@ (8000c9c <MX_TIM3_Init+0x10c>)
 8000bc8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 16-1;
 8000bca:	4b33      	ldr	r3, [pc, #204]	@ (8000c98 <MX_TIM3_Init+0x108>)
 8000bcc:	220f      	movs	r2, #15
 8000bce:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b31      	ldr	r3, [pc, #196]	@ (8000c98 <MX_TIM3_Init+0x108>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 3002-1;
 8000bd6:	4b30      	ldr	r3, [pc, #192]	@ (8000c98 <MX_TIM3_Init+0x108>)
 8000bd8:	4a31      	ldr	r2, [pc, #196]	@ (8000ca0 <MX_TIM3_Init+0x110>)
 8000bda:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8000c98 <MX_TIM3_Init+0x108>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000be2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c98 <MX_TIM3_Init+0x108>)
 8000be4:	2280      	movs	r2, #128	@ 0x80
 8000be6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000be8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c98 <MX_TIM3_Init+0x108>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f001 fdfe 	bl	80027ec <HAL_TIM_Base_Init>
 8000bf0:	1e03      	subs	r3, r0, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8000bf4:	f000 f9ee 	bl	8000fd4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf8:	2128      	movs	r1, #40	@ 0x28
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2280      	movs	r2, #128	@ 0x80
 8000bfe:	0152      	lsls	r2, r2, #5
 8000c00:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c02:	187a      	adds	r2, r7, r1
 8000c04:	4b24      	ldr	r3, [pc, #144]	@ (8000c98 <MX_TIM3_Init+0x108>)
 8000c06:	0011      	movs	r1, r2
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f002 f891 	bl	8002d30 <HAL_TIM_ConfigClockSource>
 8000c0e:	1e03      	subs	r3, r0, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM3_Init+0x86>
	{
		Error_Handler();
 8000c12:	f000 f9df 	bl	8000fd4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c16:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <MX_TIM3_Init+0x108>)
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f001 fe3f 	bl	800289c <HAL_TIM_PWM_Init>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM3_Init+0x96>
	{
		Error_Handler();
 8000c22:	f000 f9d7 	bl	8000fd4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c26:	211c      	movs	r1, #28
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c34:	187a      	adds	r2, r7, r1
 8000c36:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <MX_TIM3_Init+0x108>)
 8000c38:	0011      	movs	r1, r2
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f002 fd60 	bl	8003700 <HAL_TIMEx_MasterConfigSynchronization>
 8000c40:	1e03      	subs	r3, r0, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM3_Init+0xb8>
	{
		Error_Handler();
 8000c44:	f000 f9c6 	bl	8000fd4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c48:	003b      	movs	r3, r7
 8000c4a:	2260      	movs	r2, #96	@ 0x60
 8000c4c:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8000c4e:	003b      	movs	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c54:	003b      	movs	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c5a:	003b      	movs	r3, r7
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c60:	0039      	movs	r1, r7
 8000c62:	4b0d      	ldr	r3, [pc, #52]	@ (8000c98 <MX_TIM3_Init+0x108>)
 8000c64:	2204      	movs	r2, #4
 8000c66:	0018      	movs	r0, r3
 8000c68:	f001 ff62 	bl	8002b30 <HAL_TIM_PWM_ConfigChannel>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM3_Init+0xe4>
	{
		Error_Handler();
 8000c70:	f000 f9b0 	bl	8000fd4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c74:	0039      	movs	r1, r7
 8000c76:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <MX_TIM3_Init+0x108>)
 8000c78:	2208      	movs	r2, #8
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f001 ff58 	bl	8002b30 <HAL_TIM_PWM_ConfigChannel>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM3_Init+0xf8>
	{
		Error_Handler();
 8000c84:	f000 f9a6 	bl	8000fd4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000c88:	4b03      	ldr	r3, [pc, #12]	@ (8000c98 <MX_TIM3_Init+0x108>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 fa50 	bl	8001130 <HAL_TIM_MspPostInit>

}
 8000c90:	46c0      	nop			@ (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b00e      	add	sp, #56	@ 0x38
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200000c0 	.word	0x200000c0
 8000c9c:	40000400 	.word	0x40000400
 8000ca0:	00000bb9 	.word	0x00000bb9

08000ca4 <MX_TIM15_Init>:
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM15_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b09c      	sub	sp, #112	@ 0x70
 8000ca8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000caa:	2360      	movs	r3, #96	@ 0x60
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	0018      	movs	r0, r3
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f004 fbd9 	bl	800546c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cba:	2354      	movs	r3, #84	@ 0x54
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	230c      	movs	r3, #12
 8000cc2:	001a      	movs	r2, r3
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	f004 fbd1 	bl	800546c <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000cca:	2338      	movs	r3, #56	@ 0x38
 8000ccc:	18fb      	adds	r3, r7, r3
 8000cce:	0018      	movs	r0, r3
 8000cd0:	231c      	movs	r3, #28
 8000cd2:	001a      	movs	r2, r3
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	f004 fbc9 	bl	800546c <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	0018      	movs	r0, r3
 8000cde:	2334      	movs	r3, #52	@ 0x34
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	f004 fbc2 	bl	800546c <memset>

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8000ce8:	4b4d      	ldr	r3, [pc, #308]	@ (8000e20 <MX_TIM15_Init+0x17c>)
 8000cea:	4a4e      	ldr	r2, [pc, #312]	@ (8000e24 <MX_TIM15_Init+0x180>)
 8000cec:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 16-1;
 8000cee:	4b4c      	ldr	r3, [pc, #304]	@ (8000e20 <MX_TIM15_Init+0x17c>)
 8000cf0:	220f      	movs	r2, #15
 8000cf2:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b4a      	ldr	r3, [pc, #296]	@ (8000e20 <MX_TIM15_Init+0x17c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 3002-1;
 8000cfa:	4b49      	ldr	r3, [pc, #292]	@ (8000e20 <MX_TIM15_Init+0x17c>)
 8000cfc:	4a4a      	ldr	r2, [pc, #296]	@ (8000e28 <MX_TIM15_Init+0x184>)
 8000cfe:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d00:	4b47      	ldr	r3, [pc, #284]	@ (8000e20 <MX_TIM15_Init+0x17c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8000d06:	4b46      	ldr	r3, [pc, #280]	@ (8000e20 <MX_TIM15_Init+0x17c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d0c:	4b44      	ldr	r3, [pc, #272]	@ (8000e20 <MX_TIM15_Init+0x17c>)
 8000d0e:	2280      	movs	r2, #128	@ 0x80
 8000d10:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d12:	4b43      	ldr	r3, [pc, #268]	@ (8000e20 <MX_TIM15_Init+0x17c>)
 8000d14:	0018      	movs	r0, r3
 8000d16:	f001 fd69 	bl	80027ec <HAL_TIM_Base_Init>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM15_Init+0x7e>
	{
		Error_Handler();
 8000d1e:	f000 f959 	bl	8000fd4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d22:	2160      	movs	r1, #96	@ 0x60
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2280      	movs	r2, #128	@ 0x80
 8000d28:	0152      	lsls	r2, r2, #5
 8000d2a:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d2c:	187a      	adds	r2, r7, r1
 8000d2e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e20 <MX_TIM15_Init+0x17c>)
 8000d30:	0011      	movs	r1, r2
 8000d32:	0018      	movs	r0, r3
 8000d34:	f001 fffc 	bl	8002d30 <HAL_TIM_ConfigClockSource>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM15_Init+0x9c>
	{
		Error_Handler();
 8000d3c:	f000 f94a 	bl	8000fd4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000d40:	4b37      	ldr	r3, [pc, #220]	@ (8000e20 <MX_TIM15_Init+0x17c>)
 8000d42:	0018      	movs	r0, r3
 8000d44:	f001 fdaa 	bl	800289c <HAL_TIM_PWM_Init>
 8000d48:	1e03      	subs	r3, r0, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM15_Init+0xac>
	{
		Error_Handler();
 8000d4c:	f000 f942 	bl	8000fd4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d50:	2154      	movs	r1, #84	@ 0x54
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d5e:	187a      	adds	r2, r7, r1
 8000d60:	4b2f      	ldr	r3, [pc, #188]	@ (8000e20 <MX_TIM15_Init+0x17c>)
 8000d62:	0011      	movs	r1, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f002 fccb 	bl	8003700 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM15_Init+0xce>
	{
		Error_Handler();
 8000d6e:	f000 f931 	bl	8000fd4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d72:	2138      	movs	r1, #56	@ 0x38
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	2260      	movs	r2, #96	@ 0x60
 8000d78:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d9e:	1879      	adds	r1, r7, r1
 8000da0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e20 <MX_TIM15_Init+0x17c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	0018      	movs	r0, r3
 8000da6:	f001 fec3 	bl	8002b30 <HAL_TIM_PWM_ConfigChannel>
 8000daa:	1e03      	subs	r3, r0, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM15_Init+0x10e>
	{
		Error_Handler();
 8000dae:	f000 f911 	bl	8000fd4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000db2:	2338      	movs	r3, #56	@ 0x38
 8000db4:	18f9      	adds	r1, r7, r3
 8000db6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <MX_TIM15_Init+0x17c>)
 8000db8:	2204      	movs	r2, #4
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f001 feb8 	bl	8002b30 <HAL_TIM_PWM_ConfigChannel>
 8000dc0:	1e03      	subs	r3, r0, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM15_Init+0x124>
	{
		Error_Handler();
 8000dc4:	f000 f906 	bl	8000fd4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dce:	1d3b      	adds	r3, r7, #4
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2280      	movs	r2, #128	@ 0x80
 8000dea:	0192      	lsls	r2, r2, #6
 8000dec:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2200      	movs	r2, #0
 8000df8:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000dfa:	1d3a      	adds	r2, r7, #4
 8000dfc:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <MX_TIM15_Init+0x17c>)
 8000dfe:	0011      	movs	r1, r2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f002 fceb 	bl	80037dc <HAL_TIMEx_ConfigBreakDeadTime>
 8000e06:	1e03      	subs	r3, r0, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM15_Init+0x16a>
	{
		Error_Handler();
 8000e0a:	f000 f8e3 	bl	8000fd4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */
	HAL_TIM_MspPostInit(&htim15);
 8000e0e:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <MX_TIM15_Init+0x17c>)
 8000e10:	0018      	movs	r0, r3
 8000e12:	f000 f98d 	bl	8001130 <HAL_TIM_MspPostInit>

}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b01c      	add	sp, #112	@ 0x70
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	2000010c 	.word	0x2000010c
 8000e24:	40014000 	.word	0x40014000
 8000e28:	00000bb9 	.word	0x00000bb9

08000e2c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000e30:	4b23      	ldr	r3, [pc, #140]	@ (8000ec0 <MX_USART1_UART_Init+0x94>)
 8000e32:	4a24      	ldr	r2, [pc, #144]	@ (8000ec4 <MX_USART1_UART_Init+0x98>)
 8000e34:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000e36:	4b22      	ldr	r3, [pc, #136]	@ (8000ec0 <MX_USART1_UART_Init+0x94>)
 8000e38:	22e1      	movs	r2, #225	@ 0xe1
 8000e3a:	0252      	lsls	r2, r2, #9
 8000e3c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ec0 <MX_USART1_UART_Init+0x94>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec0 <MX_USART1_UART_Init+0x94>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <MX_USART1_UART_Init+0x94>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec0 <MX_USART1_UART_Init+0x94>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <MX_USART1_UART_Init+0x94>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ec0 <MX_USART1_UART_Init+0x94>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e62:	4b17      	ldr	r3, [pc, #92]	@ (8000ec0 <MX_USART1_UART_Init+0x94>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e68:	4b15      	ldr	r3, [pc, #84]	@ (8000ec0 <MX_USART1_UART_Init+0x94>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <MX_USART1_UART_Init+0x94>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e74:	4b12      	ldr	r3, [pc, #72]	@ (8000ec0 <MX_USART1_UART_Init+0x94>)
 8000e76:	0018      	movs	r0, r3
 8000e78:	f002 fd4c 	bl	8003914 <HAL_UART_Init>
 8000e7c:	1e03      	subs	r3, r0, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_USART1_UART_Init+0x58>
	{
		Error_Handler();
 8000e80:	f000 f8a8 	bl	8000fd4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <MX_USART1_UART_Init+0x94>)
 8000e86:	2100      	movs	r1, #0
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f004 fa0f 	bl	80052ac <HAL_UARTEx_SetTxFifoThreshold>
 8000e8e:	1e03      	subs	r3, r0, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USART1_UART_Init+0x6a>
	{
		Error_Handler();
 8000e92:	f000 f89f 	bl	8000fd4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <MX_USART1_UART_Init+0x94>)
 8000e98:	2100      	movs	r1, #0
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f004 fa46 	bl	800532c <HAL_UARTEx_SetRxFifoThreshold>
 8000ea0:	1e03      	subs	r3, r0, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_USART1_UART_Init+0x7c>
	{
		Error_Handler();
 8000ea4:	f000 f896 	bl	8000fd4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ea8:	4b05      	ldr	r3, [pc, #20]	@ (8000ec0 <MX_USART1_UART_Init+0x94>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f004 f9c4 	bl	8005238 <HAL_UARTEx_DisableFifoMode>
 8000eb0:	1e03      	subs	r3, r0, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_USART1_UART_Init+0x8c>
	{
		Error_Handler();
 8000eb4:	f000 f88e 	bl	8000fd4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000eb8:	46c0      	nop			@ (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			@ (mov r8, r8)
 8000ec0:	20000158 	.word	0x20000158
 8000ec4:	40013800 	.word	0x40013800

08000ec8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ecc:	4b23      	ldr	r3, [pc, #140]	@ (8000f5c <MX_USART2_UART_Init+0x94>)
 8000ece:	4a24      	ldr	r2, [pc, #144]	@ (8000f60 <MX_USART2_UART_Init+0x98>)
 8000ed0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ed2:	4b22      	ldr	r3, [pc, #136]	@ (8000f5c <MX_USART2_UART_Init+0x94>)
 8000ed4:	22e1      	movs	r2, #225	@ 0xe1
 8000ed6:	0252      	lsls	r2, r2, #9
 8000ed8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eda:	4b20      	ldr	r3, [pc, #128]	@ (8000f5c <MX_USART2_UART_Init+0x94>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <MX_USART2_UART_Init+0x94>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f5c <MX_USART2_UART_Init+0x94>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <MX_USART2_UART_Init+0x94>)
 8000eee:	220c      	movs	r2, #12
 8000ef0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <MX_USART2_UART_Init+0x94>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <MX_USART2_UART_Init+0x94>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000efe:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <MX_USART2_UART_Init+0x94>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f04:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <MX_USART2_UART_Init+0x94>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	625a      	str	r2, [r3, #36]	@ 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <MX_USART2_UART_Init+0x94>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <MX_USART2_UART_Init+0x94>)
 8000f12:	0018      	movs	r0, r3
 8000f14:	f002 fcfe 	bl	8003914 <HAL_UART_Init>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_USART2_UART_Init+0x58>
	{
		Error_Handler();
 8000f1c:	f000 f85a 	bl	8000fd4 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f20:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <MX_USART2_UART_Init+0x94>)
 8000f22:	2100      	movs	r1, #0
 8000f24:	0018      	movs	r0, r3
 8000f26:	f004 f9c1 	bl	80052ac <HAL_UARTEx_SetTxFifoThreshold>
 8000f2a:	1e03      	subs	r3, r0, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_USART2_UART_Init+0x6a>
	{
		Error_Handler();
 8000f2e:	f000 f851 	bl	8000fd4 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <MX_USART2_UART_Init+0x94>)
 8000f34:	2100      	movs	r1, #0
 8000f36:	0018      	movs	r0, r3
 8000f38:	f004 f9f8 	bl	800532c <HAL_UARTEx_SetRxFifoThreshold>
 8000f3c:	1e03      	subs	r3, r0, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_USART2_UART_Init+0x7c>
	{
		Error_Handler();
 8000f40:	f000 f848 	bl	8000fd4 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <MX_USART2_UART_Init+0x94>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f004 f976 	bl	8005238 <HAL_UARTEx_DisableFifoMode>
 8000f4c:	1e03      	subs	r3, r0, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_USART2_UART_Init+0x8c>
	{
		Error_Handler();
 8000f50:	f000 f840 	bl	8000fd4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000f54:	46c0      	nop			@ (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	200001ec 	.word	0x200001ec
 8000f60:	40004400 	.word	0x40004400

08000f64 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa4 <MX_GPIO_Init+0x40>)
 8000f6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <MX_GPIO_Init+0x40>)
 8000f70:	2101      	movs	r1, #1
 8000f72:	430a      	orrs	r2, r1
 8000f74:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f76:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa4 <MX_GPIO_Init+0x40>)
 8000f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <MX_GPIO_Init+0x40>)
 8000f84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f86:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <MX_GPIO_Init+0x40>)
 8000f88:	2102      	movs	r1, #2
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f8e:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <MX_GPIO_Init+0x40>)
 8000f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f92:	2202      	movs	r2, #2
 8000f94:	4013      	ands	r3, r2
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b002      	add	sp, #8
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <HAL_UART_RxCpltCallback+0x24>)
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d105      	bne.n	8000fc4 <HAL_UART_RxCpltCallback+0x1c>
		// Réactiver la réception immédiatement
		HAL_UART_Receive_IT(&huart1, (uint8_t *)rx_data, sizeof(rx_data));
 8000fb8:	4905      	ldr	r1, [pc, #20]	@ (8000fd0 <HAL_UART_RxCpltCallback+0x28>)
 8000fba:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <HAL_UART_RxCpltCallback+0x24>)
 8000fbc:	220c      	movs	r2, #12
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f002 fda2 	bl	8003b08 <HAL_UART_Receive_IT>
	}
}
 8000fc4:	46c0      	nop			@ (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b002      	add	sp, #8
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000158 	.word	0x20000158
 8000fd0:	20000280 	.word	0x20000280

08000fd4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000fdc:	46c0      	nop			@ (mov r8, r8)
 8000fde:	e7fd      	b.n	8000fdc <Error_Handler+0x8>

08000fe0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <HAL_MspInit+0x44>)
 8000fe8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fea:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <HAL_MspInit+0x44>)
 8000fec:	2101      	movs	r1, #1
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <HAL_MspInit+0x44>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <HAL_MspInit+0x44>)
 8001000:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <HAL_MspInit+0x44>)
 8001004:	2180      	movs	r1, #128	@ 0x80
 8001006:	0549      	lsls	r1, r1, #21
 8001008:	430a      	orrs	r2, r1
 800100a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <HAL_MspInit+0x44>)
 800100e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	055b      	lsls	r3, r3, #21
 8001014:	4013      	ands	r3, r2
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	46c0      	nop			@ (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b095      	sub	sp, #84	@ 0x54
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001030:	241c      	movs	r4, #28
 8001032:	193b      	adds	r3, r7, r4
 8001034:	0018      	movs	r0, r3
 8001036:	2334      	movs	r3, #52	@ 0x34
 8001038:	001a      	movs	r2, r3
 800103a:	2100      	movs	r1, #0
 800103c:	f004 fa16 	bl	800546c <memset>
  if(htim_base->Instance==TIM1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a36      	ldr	r2, [pc, #216]	@ (8001120 <HAL_TIM_Base_MspInit+0xf8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d11d      	bne.n	8001086 <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800104a:	193b      	adds	r3, r7, r4
 800104c:	2280      	movs	r2, #128	@ 0x80
 800104e:	0392      	lsls	r2, r2, #14
 8001050:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001052:	193b      	adds	r3, r7, r4
 8001054:	2200      	movs	r2, #0
 8001056:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001058:	193b      	adds	r3, r7, r4
 800105a:	0018      	movs	r0, r3
 800105c:	f001 fa0e 	bl	800247c <HAL_RCCEx_PeriphCLKConfig>
 8001060:	1e03      	subs	r3, r0, #0
 8001062:	d001      	beq.n	8001068 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8001064:	f7ff ffb6 	bl	8000fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001068:	4b2e      	ldr	r3, [pc, #184]	@ (8001124 <HAL_TIM_Base_MspInit+0xfc>)
 800106a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800106c:	4b2d      	ldr	r3, [pc, #180]	@ (8001124 <HAL_TIM_Base_MspInit+0xfc>)
 800106e:	2180      	movs	r1, #128	@ 0x80
 8001070:	0109      	lsls	r1, r1, #4
 8001072:	430a      	orrs	r2, r1
 8001074:	641a      	str	r2, [r3, #64]	@ 0x40
 8001076:	4b2b      	ldr	r3, [pc, #172]	@ (8001124 <HAL_TIM_Base_MspInit+0xfc>)
 8001078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800107a:	2380      	movs	r3, #128	@ 0x80
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
 8001082:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001084:	e047      	b.n	8001116 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM2)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	2380      	movs	r3, #128	@ 0x80
 800108c:	05db      	lsls	r3, r3, #23
 800108e:	429a      	cmp	r2, r3
 8001090:	d10c      	bne.n	80010ac <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001092:	4b24      	ldr	r3, [pc, #144]	@ (8001124 <HAL_TIM_Base_MspInit+0xfc>)
 8001094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001096:	4b23      	ldr	r3, [pc, #140]	@ (8001124 <HAL_TIM_Base_MspInit+0xfc>)
 8001098:	2101      	movs	r1, #1
 800109a:	430a      	orrs	r2, r1
 800109c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800109e:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <HAL_TIM_Base_MspInit+0xfc>)
 80010a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010a2:	2201      	movs	r2, #1
 80010a4:	4013      	ands	r3, r2
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697b      	ldr	r3, [r7, #20]
}
 80010aa:	e034      	b.n	8001116 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM3)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001128 <HAL_TIM_Base_MspInit+0x100>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d10c      	bne.n	80010d0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <HAL_TIM_Base_MspInit+0xfc>)
 80010b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <HAL_TIM_Base_MspInit+0xfc>)
 80010bc:	2102      	movs	r1, #2
 80010be:	430a      	orrs	r2, r1
 80010c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010c2:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <HAL_TIM_Base_MspInit+0xfc>)
 80010c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010c6:	2202      	movs	r2, #2
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
}
 80010ce:	e022      	b.n	8001116 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM15)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a15      	ldr	r2, [pc, #84]	@ (800112c <HAL_TIM_Base_MspInit+0x104>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d11d      	bne.n	8001116 <HAL_TIM_Base_MspInit+0xee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM15;
 80010da:	211c      	movs	r1, #28
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2280      	movs	r2, #128	@ 0x80
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLKSOURCE_PCLK1;
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2200      	movs	r2, #0
 80010e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	0018      	movs	r0, r3
 80010ee:	f001 f9c5 	bl	800247c <HAL_RCCEx_PeriphCLKConfig>
 80010f2:	1e03      	subs	r3, r0, #0
 80010f4:	d001      	beq.n	80010fa <HAL_TIM_Base_MspInit+0xd2>
      Error_Handler();
 80010f6:	f7ff ff6d 	bl	8000fd4 <Error_Handler>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80010fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <HAL_TIM_Base_MspInit+0xfc>)
 80010fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010fe:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <HAL_TIM_Base_MspInit+0xfc>)
 8001100:	2180      	movs	r1, #128	@ 0x80
 8001102:	0249      	lsls	r1, r1, #9
 8001104:	430a      	orrs	r2, r1
 8001106:	641a      	str	r2, [r3, #64]	@ 0x40
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_TIM_Base_MspInit+0xfc>)
 800110a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800110c:	2380      	movs	r3, #128	@ 0x80
 800110e:	025b      	lsls	r3, r3, #9
 8001110:	4013      	ands	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
}
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b015      	add	sp, #84	@ 0x54
 800111c:	bd90      	pop	{r4, r7, pc}
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	40012c00 	.word	0x40012c00
 8001124:	40021000 	.word	0x40021000
 8001128:	40000400 	.word	0x40000400
 800112c:	40014000 	.word	0x40014000

08001130 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001130:	b590      	push	{r4, r7, lr}
 8001132:	b08d      	sub	sp, #52	@ 0x34
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	241c      	movs	r4, #28
 800113a:	193b      	adds	r3, r7, r4
 800113c:	0018      	movs	r0, r3
 800113e:	2314      	movs	r3, #20
 8001140:	001a      	movs	r2, r3
 8001142:	2100      	movs	r1, #0
 8001144:	f004 f992 	bl	800546c <memset>
  if(htim->Instance==TIM1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a64      	ldr	r2, [pc, #400]	@ (80012e0 <HAL_TIM_MspPostInit+0x1b0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d124      	bne.n	800119c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b64      	ldr	r3, [pc, #400]	@ (80012e4 <HAL_TIM_MspPostInit+0x1b4>)
 8001154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001156:	4b63      	ldr	r3, [pc, #396]	@ (80012e4 <HAL_TIM_MspPostInit+0x1b4>)
 8001158:	2101      	movs	r1, #1
 800115a:	430a      	orrs	r2, r1
 800115c:	635a      	str	r2, [r3, #52]	@ 0x34
 800115e:	4b61      	ldr	r3, [pc, #388]	@ (80012e4 <HAL_TIM_MspPostInit+0x1b4>)
 8001160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001162:	2201      	movs	r2, #1
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800116a:	193b      	adds	r3, r7, r4
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	0052      	lsls	r2, r2, #1
 8001170:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	0021      	movs	r1, r4
 8001174:	187b      	adds	r3, r7, r1
 8001176:	2202      	movs	r2, #2
 8001178:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	187b      	adds	r3, r7, r1
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2202      	movs	r2, #2
 800118a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	187a      	adds	r2, r7, r1
 800118e:	23a0      	movs	r3, #160	@ 0xa0
 8001190:	05db      	lsls	r3, r3, #23
 8001192:	0011      	movs	r1, r2
 8001194:	0018      	movs	r0, r3
 8001196:	f000 fafd 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800119a:	e09c      	b.n	80012d6 <HAL_TIM_MspPostInit+0x1a6>
  else if(htim->Instance==TIM2)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	2380      	movs	r3, #128	@ 0x80
 80011a2:	05db      	lsls	r3, r3, #23
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d123      	bne.n	80011f0 <HAL_TIM_MspPostInit+0xc0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	4b4e      	ldr	r3, [pc, #312]	@ (80012e4 <HAL_TIM_MspPostInit+0x1b4>)
 80011aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011ac:	4b4d      	ldr	r3, [pc, #308]	@ (80012e4 <HAL_TIM_MspPostInit+0x1b4>)
 80011ae:	2102      	movs	r1, #2
 80011b0:	430a      	orrs	r2, r1
 80011b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80011b4:	4b4b      	ldr	r3, [pc, #300]	@ (80012e4 <HAL_TIM_MspPostInit+0x1b4>)
 80011b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011b8:	2202      	movs	r2, #2
 80011ba:	4013      	ands	r3, r2
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011c0:	211c      	movs	r1, #28
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	2280      	movs	r2, #128	@ 0x80
 80011c6:	00d2      	lsls	r2, r2, #3
 80011c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	187b      	adds	r3, r7, r1
 80011cc:	2202      	movs	r2, #2
 80011ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	2202      	movs	r2, #2
 80011e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	187b      	adds	r3, r7, r1
 80011e4:	4a40      	ldr	r2, [pc, #256]	@ (80012e8 <HAL_TIM_MspPostInit+0x1b8>)
 80011e6:	0019      	movs	r1, r3
 80011e8:	0010      	movs	r0, r2
 80011ea:	f000 fad3 	bl	8001794 <HAL_GPIO_Init>
}
 80011ee:	e072      	b.n	80012d6 <HAL_TIM_MspPostInit+0x1a6>
  else if(htim->Instance==TIM3)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a3d      	ldr	r2, [pc, #244]	@ (80012ec <HAL_TIM_MspPostInit+0x1bc>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d145      	bne.n	8001286 <HAL_TIM_MspPostInit+0x156>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4b3a      	ldr	r3, [pc, #232]	@ (80012e4 <HAL_TIM_MspPostInit+0x1b4>)
 80011fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011fe:	4b39      	ldr	r3, [pc, #228]	@ (80012e4 <HAL_TIM_MspPostInit+0x1b4>)
 8001200:	2101      	movs	r1, #1
 8001202:	430a      	orrs	r2, r1
 8001204:	635a      	str	r2, [r3, #52]	@ 0x34
 8001206:	4b37      	ldr	r3, [pc, #220]	@ (80012e4 <HAL_TIM_MspPostInit+0x1b4>)
 8001208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800120a:	2201      	movs	r2, #1
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	4b34      	ldr	r3, [pc, #208]	@ (80012e4 <HAL_TIM_MspPostInit+0x1b4>)
 8001214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001216:	4b33      	ldr	r3, [pc, #204]	@ (80012e4 <HAL_TIM_MspPostInit+0x1b4>)
 8001218:	2102      	movs	r1, #2
 800121a:	430a      	orrs	r2, r1
 800121c:	635a      	str	r2, [r3, #52]	@ 0x34
 800121e:	4b31      	ldr	r3, [pc, #196]	@ (80012e4 <HAL_TIM_MspPostInit+0x1b4>)
 8001220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001222:	2202      	movs	r2, #2
 8001224:	4013      	ands	r3, r2
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800122a:	241c      	movs	r4, #28
 800122c:	193b      	adds	r3, r7, r4
 800122e:	2280      	movs	r2, #128	@ 0x80
 8001230:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	193b      	adds	r3, r7, r4
 8001234:	2202      	movs	r2, #2
 8001236:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	193b      	adds	r3, r7, r4
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	193b      	adds	r3, r7, r4
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001244:	193b      	adds	r3, r7, r4
 8001246:	2201      	movs	r2, #1
 8001248:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	193a      	adds	r2, r7, r4
 800124c:	23a0      	movs	r3, #160	@ 0xa0
 800124e:	05db      	lsls	r3, r3, #23
 8001250:	0011      	movs	r1, r2
 8001252:	0018      	movs	r0, r3
 8001254:	f000 fa9e 	bl	8001794 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001258:	0021      	movs	r1, r4
 800125a:	187b      	adds	r3, r7, r1
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	187b      	adds	r3, r7, r1
 8001262:	2202      	movs	r2, #2
 8001264:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	187b      	adds	r3, r7, r1
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	187b      	adds	r3, r7, r1
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001272:	187b      	adds	r3, r7, r1
 8001274:	2201      	movs	r2, #1
 8001276:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	187b      	adds	r3, r7, r1
 800127a:	4a1b      	ldr	r2, [pc, #108]	@ (80012e8 <HAL_TIM_MspPostInit+0x1b8>)
 800127c:	0019      	movs	r1, r3
 800127e:	0010      	movs	r0, r2
 8001280:	f000 fa88 	bl	8001794 <HAL_GPIO_Init>
}
 8001284:	e027      	b.n	80012d6 <HAL_TIM_MspPostInit+0x1a6>
  else if(htim->Instance==TIM15)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a19      	ldr	r2, [pc, #100]	@ (80012f0 <HAL_TIM_MspPostInit+0x1c0>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d122      	bne.n	80012d6 <HAL_TIM_MspPostInit+0x1a6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <HAL_TIM_MspPostInit+0x1b4>)
 8001292:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001294:	4b13      	ldr	r3, [pc, #76]	@ (80012e4 <HAL_TIM_MspPostInit+0x1b4>)
 8001296:	2102      	movs	r1, #2
 8001298:	430a      	orrs	r2, r1
 800129a:	635a      	str	r2, [r3, #52]	@ 0x34
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <HAL_TIM_MspPostInit+0x1b4>)
 800129e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012a0:	2202      	movs	r2, #2
 80012a2:	4013      	ands	r3, r2
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80012a8:	211c      	movs	r1, #28
 80012aa:	187b      	adds	r3, r7, r1
 80012ac:	22c0      	movs	r2, #192	@ 0xc0
 80012ae:	0212      	lsls	r2, r2, #8
 80012b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	187b      	adds	r3, r7, r1
 80012b4:	2202      	movs	r2, #2
 80012b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	2205      	movs	r2, #5
 80012c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	4a06      	ldr	r2, [pc, #24]	@ (80012e8 <HAL_TIM_MspPostInit+0x1b8>)
 80012ce:	0019      	movs	r1, r3
 80012d0:	0010      	movs	r0, r2
 80012d2:	f000 fa5f 	bl	8001794 <HAL_GPIO_Init>
}
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b00d      	add	sp, #52	@ 0x34
 80012dc:	bd90      	pop	{r4, r7, pc}
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	40012c00 	.word	0x40012c00
 80012e4:	40021000 	.word	0x40021000
 80012e8:	50000400 	.word	0x50000400
 80012ec:	40000400 	.word	0x40000400
 80012f0:	40014000 	.word	0x40014000

080012f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b099      	sub	sp, #100	@ 0x64
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	234c      	movs	r3, #76	@ 0x4c
 80012fe:	18fb      	adds	r3, r7, r3
 8001300:	0018      	movs	r0, r3
 8001302:	2314      	movs	r3, #20
 8001304:	001a      	movs	r2, r3
 8001306:	2100      	movs	r1, #0
 8001308:	f004 f8b0 	bl	800546c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800130c:	2418      	movs	r4, #24
 800130e:	193b      	adds	r3, r7, r4
 8001310:	0018      	movs	r0, r3
 8001312:	2334      	movs	r3, #52	@ 0x34
 8001314:	001a      	movs	r2, r3
 8001316:	2100      	movs	r1, #0
 8001318:	f004 f8a8 	bl	800546c <memset>
  if(huart->Instance==USART1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a45      	ldr	r2, [pc, #276]	@ (8001438 <HAL_UART_MspInit+0x144>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d13e      	bne.n	80013a4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001326:	193b      	adds	r3, r7, r4
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800132c:	193b      	adds	r3, r7, r4
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001332:	193b      	adds	r3, r7, r4
 8001334:	0018      	movs	r0, r3
 8001336:	f001 f8a1 	bl	800247c <HAL_RCCEx_PeriphCLKConfig>
 800133a:	1e03      	subs	r3, r0, #0
 800133c:	d001      	beq.n	8001342 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800133e:	f7ff fe49 	bl	8000fd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001342:	4b3e      	ldr	r3, [pc, #248]	@ (800143c <HAL_UART_MspInit+0x148>)
 8001344:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001346:	4b3d      	ldr	r3, [pc, #244]	@ (800143c <HAL_UART_MspInit+0x148>)
 8001348:	2180      	movs	r1, #128	@ 0x80
 800134a:	01c9      	lsls	r1, r1, #7
 800134c:	430a      	orrs	r2, r1
 800134e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001350:	4b3a      	ldr	r3, [pc, #232]	@ (800143c <HAL_UART_MspInit+0x148>)
 8001352:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001354:	2380      	movs	r3, #128	@ 0x80
 8001356:	01db      	lsls	r3, r3, #7
 8001358:	4013      	ands	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135e:	4b37      	ldr	r3, [pc, #220]	@ (800143c <HAL_UART_MspInit+0x148>)
 8001360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001362:	4b36      	ldr	r3, [pc, #216]	@ (800143c <HAL_UART_MspInit+0x148>)
 8001364:	2102      	movs	r1, #2
 8001366:	430a      	orrs	r2, r1
 8001368:	635a      	str	r2, [r3, #52]	@ 0x34
 800136a:	4b34      	ldr	r3, [pc, #208]	@ (800143c <HAL_UART_MspInit+0x148>)
 800136c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800136e:	2202      	movs	r2, #2
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001376:	214c      	movs	r1, #76	@ 0x4c
 8001378:	187b      	adds	r3, r7, r1
 800137a:	22c0      	movs	r2, #192	@ 0xc0
 800137c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	187b      	adds	r3, r7, r1
 8001380:	2202      	movs	r2, #2
 8001382:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	187b      	adds	r3, r7, r1
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	187b      	adds	r3, r7, r1
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001390:	187b      	adds	r3, r7, r1
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001396:	187b      	adds	r3, r7, r1
 8001398:	4a29      	ldr	r2, [pc, #164]	@ (8001440 <HAL_UART_MspInit+0x14c>)
 800139a:	0019      	movs	r1, r3
 800139c:	0010      	movs	r0, r2
 800139e:	f000 f9f9 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013a2:	e044      	b.n	800142e <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a26      	ldr	r2, [pc, #152]	@ (8001444 <HAL_UART_MspInit+0x150>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d13f      	bne.n	800142e <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013ae:	2118      	movs	r1, #24
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	2202      	movs	r2, #2
 80013b4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013b6:	187b      	adds	r3, r7, r1
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013bc:	187b      	adds	r3, r7, r1
 80013be:	0018      	movs	r0, r3
 80013c0:	f001 f85c 	bl	800247c <HAL_RCCEx_PeriphCLKConfig>
 80013c4:	1e03      	subs	r3, r0, #0
 80013c6:	d001      	beq.n	80013cc <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80013c8:	f7ff fe04 	bl	8000fd4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013cc:	4b1b      	ldr	r3, [pc, #108]	@ (800143c <HAL_UART_MspInit+0x148>)
 80013ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <HAL_UART_MspInit+0x148>)
 80013d2:	2180      	movs	r1, #128	@ 0x80
 80013d4:	0289      	lsls	r1, r1, #10
 80013d6:	430a      	orrs	r2, r1
 80013d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80013da:	4b18      	ldr	r3, [pc, #96]	@ (800143c <HAL_UART_MspInit+0x148>)
 80013dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80013de:	2380      	movs	r3, #128	@ 0x80
 80013e0:	029b      	lsls	r3, r3, #10
 80013e2:	4013      	ands	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4b14      	ldr	r3, [pc, #80]	@ (800143c <HAL_UART_MspInit+0x148>)
 80013ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013ec:	4b13      	ldr	r3, [pc, #76]	@ (800143c <HAL_UART_MspInit+0x148>)
 80013ee:	2101      	movs	r1, #1
 80013f0:	430a      	orrs	r2, r1
 80013f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80013f4:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_UART_MspInit+0x148>)
 80013f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013f8:	2201      	movs	r2, #1
 80013fa:	4013      	ands	r3, r2
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001400:	214c      	movs	r1, #76	@ 0x4c
 8001402:	187b      	adds	r3, r7, r1
 8001404:	220c      	movs	r2, #12
 8001406:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001408:	187b      	adds	r3, r7, r1
 800140a:	2202      	movs	r2, #2
 800140c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	187b      	adds	r3, r7, r1
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	187b      	adds	r3, r7, r1
 8001416:	2200      	movs	r2, #0
 8001418:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800141a:	187b      	adds	r3, r7, r1
 800141c:	2201      	movs	r2, #1
 800141e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	187a      	adds	r2, r7, r1
 8001422:	23a0      	movs	r3, #160	@ 0xa0
 8001424:	05db      	lsls	r3, r3, #23
 8001426:	0011      	movs	r1, r2
 8001428:	0018      	movs	r0, r3
 800142a:	f000 f9b3 	bl	8001794 <HAL_GPIO_Init>
}
 800142e:	46c0      	nop			@ (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b019      	add	sp, #100	@ 0x64
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	40013800 	.word	0x40013800
 800143c:	40021000 	.word	0x40021000
 8001440:	50000400 	.word	0x50000400
 8001444:	40004400 	.word	0x40004400

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800144c:	46c0      	nop			@ (mov r8, r8)
 800144e:	e7fd      	b.n	800144c <NMI_Handler+0x4>

08001450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001454:	46c0      	nop			@ (mov r8, r8)
 8001456:	e7fd      	b.n	8001454 <HardFault_Handler+0x4>

08001458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800145c:	46c0      	nop			@ (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001470:	f000 f89c 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001474:	46c0      	nop			@ (mov r8, r8)
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001484:	480d      	ldr	r0, [pc, #52]	@ (80014bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001486:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001488:	f7ff fff7 	bl	800147a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800148c:	480c      	ldr	r0, [pc, #48]	@ (80014c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800148e:	490d      	ldr	r1, [pc, #52]	@ (80014c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001490:	4a0d      	ldr	r2, [pc, #52]	@ (80014c8 <LoopForever+0xe>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a0a      	ldr	r2, [pc, #40]	@ (80014cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a4:	4c0a      	ldr	r4, [pc, #40]	@ (80014d0 <LoopForever+0x16>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80014b2:	f003 ffe3 	bl	800547c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80014b6:	f7ff f8b1 	bl	800061c <main>

080014ba <LoopForever>:

LoopForever:
  b LoopForever
 80014ba:	e7fe      	b.n	80014ba <LoopForever>
  ldr   r0, =_estack
 80014bc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014c8:	080055c8 	.word	0x080055c8
  ldr r2, =_sbss
 80014cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014d0:	20000290 	.word	0x20000290

080014d4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC1_COMP_IRQHandler>
	...

080014d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <HAL_Init+0x3c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <HAL_Init+0x3c>)
 80014ea:	2180      	movs	r1, #128	@ 0x80
 80014ec:	0049      	lsls	r1, r1, #1
 80014ee:	430a      	orrs	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014f2:	2003      	movs	r0, #3
 80014f4:	f000 f810 	bl	8001518 <HAL_InitTick>
 80014f8:	1e03      	subs	r3, r0, #0
 80014fa:	d003      	beq.n	8001504 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80014fc:	1dfb      	adds	r3, r7, #7
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	e001      	b.n	8001508 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001504:	f7ff fd6c 	bl	8000fe0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001508:	1dfb      	adds	r3, r7, #7
 800150a:	781b      	ldrb	r3, [r3, #0]
}
 800150c:	0018      	movs	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	b002      	add	sp, #8
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40022000 	.word	0x40022000

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001520:	230f      	movs	r3, #15
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001528:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <HAL_InitTick+0x88>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d02b      	beq.n	8001588 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001530:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <HAL_InitTick+0x8c>)
 8001532:	681c      	ldr	r4, [r3, #0]
 8001534:	4b1a      	ldr	r3, [pc, #104]	@ (80015a0 <HAL_InitTick+0x88>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	0019      	movs	r1, r3
 800153a:	23fa      	movs	r3, #250	@ 0xfa
 800153c:	0098      	lsls	r0, r3, #2
 800153e:	f7fe fde1 	bl	8000104 <__udivsi3>
 8001542:	0003      	movs	r3, r0
 8001544:	0019      	movs	r1, r3
 8001546:	0020      	movs	r0, r4
 8001548:	f7fe fddc 	bl	8000104 <__udivsi3>
 800154c:	0003      	movs	r3, r0
 800154e:	0018      	movs	r0, r3
 8001550:	f000 f913 	bl	800177a <HAL_SYSTICK_Config>
 8001554:	1e03      	subs	r3, r0, #0
 8001556:	d112      	bne.n	800157e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b03      	cmp	r3, #3
 800155c:	d80a      	bhi.n	8001574 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	2301      	movs	r3, #1
 8001562:	425b      	negs	r3, r3
 8001564:	2200      	movs	r2, #0
 8001566:	0018      	movs	r0, r3
 8001568:	f000 f8f2 	bl	8001750 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800156c:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <HAL_InitTick+0x90>)
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e00d      	b.n	8001590 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001574:	230f      	movs	r3, #15
 8001576:	18fb      	adds	r3, r7, r3
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	e008      	b.n	8001590 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800157e:	230f      	movs	r3, #15
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	e003      	b.n	8001590 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001588:	230f      	movs	r3, #15
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001590:	230f      	movs	r3, #15
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	781b      	ldrb	r3, [r3, #0]
}
 8001596:	0018      	movs	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	b005      	add	sp, #20
 800159c:	bd90      	pop	{r4, r7, pc}
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000004 	.word	0x20000004

080015ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <HAL_IncTick+0x1c>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	001a      	movs	r2, r3
 80015b6:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <HAL_IncTick+0x20>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	18d2      	adds	r2, r2, r3
 80015bc:	4b03      	ldr	r3, [pc, #12]	@ (80015cc <HAL_IncTick+0x20>)
 80015be:	601a      	str	r2, [r3, #0]
}
 80015c0:	46c0      	nop			@ (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			@ (mov r8, r8)
 80015c8:	20000008 	.word	0x20000008
 80015cc:	2000028c 	.word	0x2000028c

080015d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  return uwTick;
 80015d4:	4b02      	ldr	r3, [pc, #8]	@ (80015e0 <HAL_GetTick+0x10>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	0018      	movs	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			@ (mov r8, r8)
 80015e0:	2000028c 	.word	0x2000028c

080015e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015ec:	f7ff fff0 	bl	80015d0 <HAL_GetTick>
 80015f0:	0003      	movs	r3, r0
 80015f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3301      	adds	r3, #1
 80015fc:	d005      	beq.n	800160a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <HAL_Delay+0x44>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	001a      	movs	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	189b      	adds	r3, r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800160a:	46c0      	nop			@ (mov r8, r8)
 800160c:	f7ff ffe0 	bl	80015d0 <HAL_GetTick>
 8001610:	0002      	movs	r2, r0
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	68fa      	ldr	r2, [r7, #12]
 8001618:	429a      	cmp	r2, r3
 800161a:	d8f7      	bhi.n	800160c <HAL_Delay+0x28>
  {
  }
}
 800161c:	46c0      	nop			@ (mov r8, r8)
 800161e:	46c0      	nop			@ (mov r8, r8)
 8001620:	46bd      	mov	sp, r7
 8001622:	b004      	add	sp, #16
 8001624:	bd80      	pop	{r7, pc}
 8001626:	46c0      	nop			@ (mov r8, r8)
 8001628:	20000008 	.word	0x20000008

0800162c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	0002      	movs	r2, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001640:	d828      	bhi.n	8001694 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001642:	4a2f      	ldr	r2, [pc, #188]	@ (8001700 <__NVIC_SetPriority+0xd4>)
 8001644:	1dfb      	adds	r3, r7, #7
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b25b      	sxtb	r3, r3
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	33c0      	adds	r3, #192	@ 0xc0
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	589b      	ldr	r3, [r3, r2]
 8001652:	1dfa      	adds	r2, r7, #7
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	0011      	movs	r1, r2
 8001658:	2203      	movs	r2, #3
 800165a:	400a      	ands	r2, r1
 800165c:	00d2      	lsls	r2, r2, #3
 800165e:	21ff      	movs	r1, #255	@ 0xff
 8001660:	4091      	lsls	r1, r2
 8001662:	000a      	movs	r2, r1
 8001664:	43d2      	mvns	r2, r2
 8001666:	401a      	ands	r2, r3
 8001668:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	019b      	lsls	r3, r3, #6
 800166e:	22ff      	movs	r2, #255	@ 0xff
 8001670:	401a      	ands	r2, r3
 8001672:	1dfb      	adds	r3, r7, #7
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	0018      	movs	r0, r3
 8001678:	2303      	movs	r3, #3
 800167a:	4003      	ands	r3, r0
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001680:	481f      	ldr	r0, [pc, #124]	@ (8001700 <__NVIC_SetPriority+0xd4>)
 8001682:	1dfb      	adds	r3, r7, #7
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	b25b      	sxtb	r3, r3
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	430a      	orrs	r2, r1
 800168c:	33c0      	adds	r3, #192	@ 0xc0
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001692:	e031      	b.n	80016f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001694:	4a1b      	ldr	r2, [pc, #108]	@ (8001704 <__NVIC_SetPriority+0xd8>)
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	0019      	movs	r1, r3
 800169c:	230f      	movs	r3, #15
 800169e:	400b      	ands	r3, r1
 80016a0:	3b08      	subs	r3, #8
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3306      	adds	r3, #6
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	18d3      	adds	r3, r2, r3
 80016aa:	3304      	adds	r3, #4
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	1dfa      	adds	r2, r7, #7
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	0011      	movs	r1, r2
 80016b4:	2203      	movs	r2, #3
 80016b6:	400a      	ands	r2, r1
 80016b8:	00d2      	lsls	r2, r2, #3
 80016ba:	21ff      	movs	r1, #255	@ 0xff
 80016bc:	4091      	lsls	r1, r2
 80016be:	000a      	movs	r2, r1
 80016c0:	43d2      	mvns	r2, r2
 80016c2:	401a      	ands	r2, r3
 80016c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	019b      	lsls	r3, r3, #6
 80016ca:	22ff      	movs	r2, #255	@ 0xff
 80016cc:	401a      	ands	r2, r3
 80016ce:	1dfb      	adds	r3, r7, #7
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	0018      	movs	r0, r3
 80016d4:	2303      	movs	r3, #3
 80016d6:	4003      	ands	r3, r0
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016dc:	4809      	ldr	r0, [pc, #36]	@ (8001704 <__NVIC_SetPriority+0xd8>)
 80016de:	1dfb      	adds	r3, r7, #7
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	001c      	movs	r4, r3
 80016e4:	230f      	movs	r3, #15
 80016e6:	4023      	ands	r3, r4
 80016e8:	3b08      	subs	r3, #8
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	430a      	orrs	r2, r1
 80016ee:	3306      	adds	r3, #6
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	18c3      	adds	r3, r0, r3
 80016f4:	3304      	adds	r3, #4
 80016f6:	601a      	str	r2, [r3, #0]
}
 80016f8:	46c0      	nop			@ (mov r8, r8)
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b003      	add	sp, #12
 80016fe:	bd90      	pop	{r4, r7, pc}
 8001700:	e000e100 	.word	0xe000e100
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	1e5a      	subs	r2, r3, #1
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	045b      	lsls	r3, r3, #17
 8001718:	429a      	cmp	r2, r3
 800171a:	d301      	bcc.n	8001720 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171c:	2301      	movs	r3, #1
 800171e:	e010      	b.n	8001742 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001720:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <SysTick_Config+0x44>)
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	3a01      	subs	r2, #1
 8001726:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001728:	2301      	movs	r3, #1
 800172a:	425b      	negs	r3, r3
 800172c:	2103      	movs	r1, #3
 800172e:	0018      	movs	r0, r3
 8001730:	f7ff ff7c 	bl	800162c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001734:	4b05      	ldr	r3, [pc, #20]	@ (800174c <SysTick_Config+0x44>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800173a:	4b04      	ldr	r3, [pc, #16]	@ (800174c <SysTick_Config+0x44>)
 800173c:	2207      	movs	r2, #7
 800173e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001740:	2300      	movs	r3, #0
}
 8001742:	0018      	movs	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	b002      	add	sp, #8
 8001748:	bd80      	pop	{r7, pc}
 800174a:	46c0      	nop			@ (mov r8, r8)
 800174c:	e000e010 	.word	0xe000e010

08001750 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	210f      	movs	r1, #15
 800175c:	187b      	adds	r3, r7, r1
 800175e:	1c02      	adds	r2, r0, #0
 8001760:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	187b      	adds	r3, r7, r1
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b25b      	sxtb	r3, r3
 800176a:	0011      	movs	r1, r2
 800176c:	0018      	movs	r0, r3
 800176e:	f7ff ff5d 	bl	800162c <__NVIC_SetPriority>
}
 8001772:	46c0      	nop			@ (mov r8, r8)
 8001774:	46bd      	mov	sp, r7
 8001776:	b004      	add	sp, #16
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	0018      	movs	r0, r3
 8001786:	f7ff ffbf 	bl	8001708 <SysTick_Config>
 800178a:	0003      	movs	r3, r0
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a2:	e147      	b.n	8001a34 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2101      	movs	r1, #1
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4091      	lsls	r1, r2
 80017ae:	000a      	movs	r2, r1
 80017b0:	4013      	ands	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d100      	bne.n	80017bc <HAL_GPIO_Init+0x28>
 80017ba:	e138      	b.n	8001a2e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2203      	movs	r2, #3
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d005      	beq.n	80017d4 <HAL_GPIO_Init+0x40>
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2203      	movs	r2, #3
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d130      	bne.n	8001836 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	409a      	lsls	r2, r3
 80017e2:	0013      	movs	r3, r2
 80017e4:	43da      	mvns	r2, r3
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68da      	ldr	r2, [r3, #12]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	409a      	lsls	r2, r3
 80017f6:	0013      	movs	r3, r2
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800180a:	2201      	movs	r2, #1
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
 8001810:	0013      	movs	r3, r2
 8001812:	43da      	mvns	r2, r3
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	091b      	lsrs	r3, r3, #4
 8001820:	2201      	movs	r2, #1
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2203      	movs	r2, #3
 800183c:	4013      	ands	r3, r2
 800183e:	2b03      	cmp	r3, #3
 8001840:	d017      	beq.n	8001872 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	2203      	movs	r2, #3
 800184e:	409a      	lsls	r2, r3
 8001850:	0013      	movs	r3, r2
 8001852:	43da      	mvns	r2, r3
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	409a      	lsls	r2, r3
 8001864:	0013      	movs	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2203      	movs	r2, #3
 8001878:	4013      	ands	r3, r2
 800187a:	2b02      	cmp	r3, #2
 800187c:	d123      	bne.n	80018c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	08da      	lsrs	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	3208      	adds	r2, #8
 8001886:	0092      	lsls	r2, r2, #2
 8001888:	58d3      	ldr	r3, [r2, r3]
 800188a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	2207      	movs	r2, #7
 8001890:	4013      	ands	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	220f      	movs	r2, #15
 8001896:	409a      	lsls	r2, r3
 8001898:	0013      	movs	r3, r2
 800189a:	43da      	mvns	r2, r3
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	691a      	ldr	r2, [r3, #16]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2107      	movs	r1, #7
 80018aa:	400b      	ands	r3, r1
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	409a      	lsls	r2, r3
 80018b0:	0013      	movs	r3, r2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	08da      	lsrs	r2, r3, #3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3208      	adds	r2, #8
 80018c0:	0092      	lsls	r2, r2, #2
 80018c2:	6939      	ldr	r1, [r7, #16]
 80018c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	2203      	movs	r2, #3
 80018d2:	409a      	lsls	r2, r3
 80018d4:	0013      	movs	r3, r2
 80018d6:	43da      	mvns	r2, r3
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2203      	movs	r2, #3
 80018e4:	401a      	ands	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	409a      	lsls	r2, r3
 80018ec:	0013      	movs	r3, r2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	23c0      	movs	r3, #192	@ 0xc0
 8001900:	029b      	lsls	r3, r3, #10
 8001902:	4013      	ands	r3, r2
 8001904:	d100      	bne.n	8001908 <HAL_GPIO_Init+0x174>
 8001906:	e092      	b.n	8001a2e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001908:	4a50      	ldr	r2, [pc, #320]	@ (8001a4c <HAL_GPIO_Init+0x2b8>)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3318      	adds	r3, #24
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	589b      	ldr	r3, [r3, r2]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	2203      	movs	r2, #3
 800191a:	4013      	ands	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	220f      	movs	r2, #15
 8001920:	409a      	lsls	r2, r3
 8001922:	0013      	movs	r3, r2
 8001924:	43da      	mvns	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	23a0      	movs	r3, #160	@ 0xa0
 8001930:	05db      	lsls	r3, r3, #23
 8001932:	429a      	cmp	r2, r3
 8001934:	d013      	beq.n	800195e <HAL_GPIO_Init+0x1ca>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a45      	ldr	r2, [pc, #276]	@ (8001a50 <HAL_GPIO_Init+0x2bc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00d      	beq.n	800195a <HAL_GPIO_Init+0x1c6>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a44      	ldr	r2, [pc, #272]	@ (8001a54 <HAL_GPIO_Init+0x2c0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d007      	beq.n	8001956 <HAL_GPIO_Init+0x1c2>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a43      	ldr	r2, [pc, #268]	@ (8001a58 <HAL_GPIO_Init+0x2c4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d101      	bne.n	8001952 <HAL_GPIO_Init+0x1be>
 800194e:	2303      	movs	r3, #3
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x1cc>
 8001952:	2305      	movs	r3, #5
 8001954:	e004      	b.n	8001960 <HAL_GPIO_Init+0x1cc>
 8001956:	2302      	movs	r3, #2
 8001958:	e002      	b.n	8001960 <HAL_GPIO_Init+0x1cc>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <HAL_GPIO_Init+0x1cc>
 800195e:	2300      	movs	r3, #0
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	2103      	movs	r1, #3
 8001964:	400a      	ands	r2, r1
 8001966:	00d2      	lsls	r2, r2, #3
 8001968:	4093      	lsls	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001970:	4936      	ldr	r1, [pc, #216]	@ (8001a4c <HAL_GPIO_Init+0x2b8>)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	089b      	lsrs	r3, r3, #2
 8001976:	3318      	adds	r3, #24
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800197e:	4b33      	ldr	r3, [pc, #204]	@ (8001a4c <HAL_GPIO_Init+0x2b8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43da      	mvns	r2, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	2380      	movs	r3, #128	@ 0x80
 8001994:	035b      	lsls	r3, r3, #13
 8001996:	4013      	ands	r3, r2
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019a2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a4c <HAL_GPIO_Init+0x2b8>)
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80019a8:	4b28      	ldr	r3, [pc, #160]	@ (8001a4c <HAL_GPIO_Init+0x2b8>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43da      	mvns	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	2380      	movs	r3, #128	@ 0x80
 80019be:	039b      	lsls	r3, r3, #14
 80019c0:	4013      	ands	r3, r2
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019cc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a4c <HAL_GPIO_Init+0x2b8>)
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019d2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a4c <HAL_GPIO_Init+0x2b8>)
 80019d4:	2384      	movs	r3, #132	@ 0x84
 80019d6:	58d3      	ldr	r3, [r2, r3]
 80019d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	43da      	mvns	r2, r3
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4013      	ands	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	2380      	movs	r3, #128	@ 0x80
 80019ea:	029b      	lsls	r3, r3, #10
 80019ec:	4013      	ands	r3, r2
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019f8:	4914      	ldr	r1, [pc, #80]	@ (8001a4c <HAL_GPIO_Init+0x2b8>)
 80019fa:	2284      	movs	r2, #132	@ 0x84
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001a00:	4a12      	ldr	r2, [pc, #72]	@ (8001a4c <HAL_GPIO_Init+0x2b8>)
 8001a02:	2380      	movs	r3, #128	@ 0x80
 8001a04:	58d3      	ldr	r3, [r2, r3]
 8001a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	2380      	movs	r3, #128	@ 0x80
 8001a18:	025b      	lsls	r3, r3, #9
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a26:	4909      	ldr	r1, [pc, #36]	@ (8001a4c <HAL_GPIO_Init+0x2b8>)
 8001a28:	2280      	movs	r2, #128	@ 0x80
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	40da      	lsrs	r2, r3
 8001a3c:	1e13      	subs	r3, r2, #0
 8001a3e:	d000      	beq.n	8001a42 <HAL_GPIO_Init+0x2ae>
 8001a40:	e6b0      	b.n	80017a4 <HAL_GPIO_Init+0x10>
  }
}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	46c0      	nop			@ (mov r8, r8)
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b006      	add	sp, #24
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021800 	.word	0x40021800
 8001a50:	50000400 	.word	0x50000400
 8001a54:	50000800 	.word	0x50000800
 8001a58:	50000c00 	.word	0x50000c00

08001a5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001a64:	4b19      	ldr	r3, [pc, #100]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a19      	ldr	r2, [pc, #100]	@ (8001ad0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	2380      	movs	r3, #128	@ 0x80
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d11f      	bne.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001a80:	4b14      	ldr	r3, [pc, #80]	@ (8001ad4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	0013      	movs	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	189b      	adds	r3, r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4912      	ldr	r1, [pc, #72]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f7fe fb38 	bl	8000104 <__udivsi3>
 8001a94:	0003      	movs	r3, r0
 8001a96:	3301      	adds	r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a9a:	e008      	b.n	8001aae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	e001      	b.n	8001aae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e009      	b.n	8001ac2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aae:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	2380      	movs	r3, #128	@ 0x80
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	2380      	movs	r3, #128	@ 0x80
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d0ed      	beq.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b004      	add	sp, #16
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	40007000 	.word	0x40007000
 8001ad0:	fffff9ff 	.word	0xfffff9ff
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	000f4240 	.word	0x000f4240

08001adc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001ae0:	4b03      	ldr	r3, [pc, #12]	@ (8001af0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	23e0      	movs	r3, #224	@ 0xe0
 8001ae6:	01db      	lsls	r3, r3, #7
 8001ae8:	4013      	ands	r3, r2
}
 8001aea:	0018      	movs	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e2fe      	b.n	8002104 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d100      	bne.n	8001b12 <HAL_RCC_OscConfig+0x1e>
 8001b10:	e07c      	b.n	8001c0c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b12:	4bc3      	ldr	r3, [pc, #780]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2238      	movs	r2, #56	@ 0x38
 8001b18:	4013      	ands	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b1c:	4bc0      	ldr	r3, [pc, #768]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2203      	movs	r2, #3
 8001b22:	4013      	ands	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	2b10      	cmp	r3, #16
 8001b2a:	d102      	bne.n	8001b32 <HAL_RCC_OscConfig+0x3e>
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d002      	beq.n	8001b38 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	d10b      	bne.n	8001b50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b38:	4bb9      	ldr	r3, [pc, #740]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	@ 0x80
 8001b3e:	029b      	lsls	r3, r3, #10
 8001b40:	4013      	ands	r3, r2
 8001b42:	d062      	beq.n	8001c0a <HAL_RCC_OscConfig+0x116>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d15e      	bne.n	8001c0a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e2d9      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	2380      	movs	r3, #128	@ 0x80
 8001b56:	025b      	lsls	r3, r3, #9
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d107      	bne.n	8001b6c <HAL_RCC_OscConfig+0x78>
 8001b5c:	4bb0      	ldr	r3, [pc, #704]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4baf      	ldr	r3, [pc, #700]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001b62:	2180      	movs	r1, #128	@ 0x80
 8001b64:	0249      	lsls	r1, r1, #9
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	e020      	b.n	8001bae <HAL_RCC_OscConfig+0xba>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	23a0      	movs	r3, #160	@ 0xa0
 8001b72:	02db      	lsls	r3, r3, #11
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d10e      	bne.n	8001b96 <HAL_RCC_OscConfig+0xa2>
 8001b78:	4ba9      	ldr	r3, [pc, #676]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4ba8      	ldr	r3, [pc, #672]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001b7e:	2180      	movs	r1, #128	@ 0x80
 8001b80:	02c9      	lsls	r1, r1, #11
 8001b82:	430a      	orrs	r2, r1
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	4ba6      	ldr	r3, [pc, #664]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4ba5      	ldr	r3, [pc, #660]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001b8c:	2180      	movs	r1, #128	@ 0x80
 8001b8e:	0249      	lsls	r1, r1, #9
 8001b90:	430a      	orrs	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	e00b      	b.n	8001bae <HAL_RCC_OscConfig+0xba>
 8001b96:	4ba2      	ldr	r3, [pc, #648]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	4ba1      	ldr	r3, [pc, #644]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001b9c:	49a1      	ldr	r1, [pc, #644]	@ (8001e24 <HAL_RCC_OscConfig+0x330>)
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	4b9f      	ldr	r3, [pc, #636]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b9e      	ldr	r3, [pc, #632]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001ba8:	499f      	ldr	r1, [pc, #636]	@ (8001e28 <HAL_RCC_OscConfig+0x334>)
 8001baa:	400a      	ands	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d014      	beq.n	8001be0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fd0b 	bl	80015d0 <HAL_GetTick>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fd06 	bl	80015d0 <HAL_GetTick>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	@ 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e298      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd2:	4b93      	ldr	r3, [pc, #588]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	2380      	movs	r3, #128	@ 0x80
 8001bd8:	029b      	lsls	r3, r3, #10
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0xcc>
 8001bde:	e015      	b.n	8001c0c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff fcf6 	bl	80015d0 <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bea:	f7ff fcf1 	bl	80015d0 <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b64      	cmp	r3, #100	@ 0x64
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e283      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bfc:	4b88      	ldr	r3, [pc, #544]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	029b      	lsls	r3, r3, #10
 8001c04:	4013      	ands	r3, r2
 8001c06:	d1f0      	bne.n	8001bea <HAL_RCC_OscConfig+0xf6>
 8001c08:	e000      	b.n	8001c0c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2202      	movs	r2, #2
 8001c12:	4013      	ands	r3, r2
 8001c14:	d100      	bne.n	8001c18 <HAL_RCC_OscConfig+0x124>
 8001c16:	e099      	b.n	8001d4c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c18:	4b81      	ldr	r3, [pc, #516]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	2238      	movs	r2, #56	@ 0x38
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c22:	4b7f      	ldr	r3, [pc, #508]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2203      	movs	r2, #3
 8001c28:	4013      	ands	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2b10      	cmp	r3, #16
 8001c30:	d102      	bne.n	8001c38 <HAL_RCC_OscConfig+0x144>
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d002      	beq.n	8001c3e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d135      	bne.n	8001caa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c3e:	4b78      	ldr	r3, [pc, #480]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	2380      	movs	r3, #128	@ 0x80
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4013      	ands	r3, r2
 8001c48:	d005      	beq.n	8001c56 <HAL_RCC_OscConfig+0x162>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e256      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c56:	4b72      	ldr	r3, [pc, #456]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	4a74      	ldr	r2, [pc, #464]	@ (8001e2c <HAL_RCC_OscConfig+0x338>)
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	0019      	movs	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	021a      	lsls	r2, r3, #8
 8001c66:	4b6e      	ldr	r3, [pc, #440]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d112      	bne.n	8001c98 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c72:	4b6b      	ldr	r3, [pc, #428]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a6e      	ldr	r2, [pc, #440]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	4b67      	ldr	r3, [pc, #412]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001c82:	430a      	orrs	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001c86:	4b66      	ldr	r3, [pc, #408]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	0adb      	lsrs	r3, r3, #11
 8001c8c:	2207      	movs	r2, #7
 8001c8e:	4013      	ands	r3, r2
 8001c90:	4a68      	ldr	r2, [pc, #416]	@ (8001e34 <HAL_RCC_OscConfig+0x340>)
 8001c92:	40da      	lsrs	r2, r3
 8001c94:	4b68      	ldr	r3, [pc, #416]	@ (8001e38 <HAL_RCC_OscConfig+0x344>)
 8001c96:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c98:	4b68      	ldr	r3, [pc, #416]	@ (8001e3c <HAL_RCC_OscConfig+0x348>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7ff fc3b 	bl	8001518 <HAL_InitTick>
 8001ca2:	1e03      	subs	r3, r0, #0
 8001ca4:	d051      	beq.n	8001d4a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e22c      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d030      	beq.n	8001d14 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cb2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a5e      	ldr	r2, [pc, #376]	@ (8001e30 <HAL_RCC_OscConfig+0x33c>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	0019      	movs	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	4b57      	ldr	r3, [pc, #348]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001cc6:	4b56      	ldr	r3, [pc, #344]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4b55      	ldr	r3, [pc, #340]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001ccc:	2180      	movs	r1, #128	@ 0x80
 8001cce:	0049      	lsls	r1, r1, #1
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fc7c 	bl	80015d0 <HAL_GetTick>
 8001cd8:	0003      	movs	r3, r0
 8001cda:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cde:	f7ff fc77 	bl	80015d0 <HAL_GetTick>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e209      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf0:	4b4b      	ldr	r3, [pc, #300]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	@ 0x80
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfc:	4b48      	ldr	r3, [pc, #288]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4a4a      	ldr	r2, [pc, #296]	@ (8001e2c <HAL_RCC_OscConfig+0x338>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	0019      	movs	r1, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	021a      	lsls	r2, r3, #8
 8001d0c:	4b44      	ldr	r3, [pc, #272]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	e01b      	b.n	8001d4c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001d14:	4b42      	ldr	r3, [pc, #264]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	4b41      	ldr	r3, [pc, #260]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001d1a:	4949      	ldr	r1, [pc, #292]	@ (8001e40 <HAL_RCC_OscConfig+0x34c>)
 8001d1c:	400a      	ands	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff fc56 	bl	80015d0 <HAL_GetTick>
 8001d24:	0003      	movs	r3, r0
 8001d26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2a:	f7ff fc51 	bl	80015d0 <HAL_GetTick>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e1e3      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d3c:	4b38      	ldr	r3, [pc, #224]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2380      	movs	r3, #128	@ 0x80
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4013      	ands	r3, r2
 8001d46:	d1f0      	bne.n	8001d2a <HAL_RCC_OscConfig+0x236>
 8001d48:	e000      	b.n	8001d4c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d4a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2208      	movs	r2, #8
 8001d52:	4013      	ands	r3, r2
 8001d54:	d047      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d56:	4b32      	ldr	r3, [pc, #200]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2238      	movs	r2, #56	@ 0x38
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b18      	cmp	r3, #24
 8001d60:	d10a      	bne.n	8001d78 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001d62:	4b2f      	ldr	r3, [pc, #188]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d66:	2202      	movs	r2, #2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d03c      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2f2>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d138      	bne.n	8001de6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e1c5      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d019      	beq.n	8001db4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001d80:	4b27      	ldr	r3, [pc, #156]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001d82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d84:	4b26      	ldr	r3, [pc, #152]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001d86:	2101      	movs	r1, #1
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fc20 	bl	80015d0 <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d96:	f7ff fc1b 	bl	80015d0 <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e1ad      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001da8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001daa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dac:	2202      	movs	r2, #2
 8001dae:	4013      	ands	r3, r2
 8001db0:	d0f1      	beq.n	8001d96 <HAL_RCC_OscConfig+0x2a2>
 8001db2:	e018      	b.n	8001de6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001db4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001db6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001db8:	4b19      	ldr	r3, [pc, #100]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001dba:	2101      	movs	r1, #1
 8001dbc:	438a      	bics	r2, r1
 8001dbe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fc06 	bl	80015d0 <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dca:	f7ff fc01 	bl	80015d0 <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e193      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ddc:	4b10      	ldr	r3, [pc, #64]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de0:	2202      	movs	r2, #2
 8001de2:	4013      	ands	r3, r2
 8001de4:	d1f1      	bne.n	8001dca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2204      	movs	r2, #4
 8001dec:	4013      	ands	r3, r2
 8001dee:	d100      	bne.n	8001df2 <HAL_RCC_OscConfig+0x2fe>
 8001df0:	e0c6      	b.n	8001f80 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df2:	231f      	movs	r3, #31
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001dfa:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2238      	movs	r2, #56	@ 0x38
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	d11e      	bne.n	8001e44 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_RCC_OscConfig+0x32c>)
 8001e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d100      	bne.n	8001e12 <HAL_RCC_OscConfig+0x31e>
 8001e10:	e0b6      	b.n	8001f80 <HAL_RCC_OscConfig+0x48c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d000      	beq.n	8001e1c <HAL_RCC_OscConfig+0x328>
 8001e1a:	e0b1      	b.n	8001f80 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e171      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
 8001e20:	40021000 	.word	0x40021000
 8001e24:	fffeffff 	.word	0xfffeffff
 8001e28:	fffbffff 	.word	0xfffbffff
 8001e2c:	ffff80ff 	.word	0xffff80ff
 8001e30:	ffffc7ff 	.word	0xffffc7ff
 8001e34:	00f42400 	.word	0x00f42400
 8001e38:	20000000 	.word	0x20000000
 8001e3c:	20000004 	.word	0x20000004
 8001e40:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e44:	4bb1      	ldr	r3, [pc, #708]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001e46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e48:	2380      	movs	r3, #128	@ 0x80
 8001e4a:	055b      	lsls	r3, r3, #21
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_OscConfig+0x360>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_OscConfig+0x362>
 8001e54:	2300      	movs	r3, #0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d011      	beq.n	8001e7e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4bac      	ldr	r3, [pc, #688]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001e5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e5e:	4bab      	ldr	r3, [pc, #684]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001e60:	2180      	movs	r1, #128	@ 0x80
 8001e62:	0549      	lsls	r1, r1, #21
 8001e64:	430a      	orrs	r2, r1
 8001e66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e68:	4ba8      	ldr	r3, [pc, #672]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001e6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e6c:	2380      	movs	r3, #128	@ 0x80
 8001e6e:	055b      	lsls	r3, r3, #21
 8001e70:	4013      	ands	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001e76:	231f      	movs	r3, #31
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e7e:	4ba4      	ldr	r3, [pc, #656]	@ (8002110 <HAL_RCC_OscConfig+0x61c>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	@ 0x80
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4013      	ands	r3, r2
 8001e88:	d11a      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e8a:	4ba1      	ldr	r3, [pc, #644]	@ (8002110 <HAL_RCC_OscConfig+0x61c>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4ba0      	ldr	r3, [pc, #640]	@ (8002110 <HAL_RCC_OscConfig+0x61c>)
 8001e90:	2180      	movs	r1, #128	@ 0x80
 8001e92:	0049      	lsls	r1, r1, #1
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001e98:	f7ff fb9a 	bl	80015d0 <HAL_GetTick>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea2:	f7ff fb95 	bl	80015d0 <HAL_GetTick>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e127      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb4:	4b96      	ldr	r3, [pc, #600]	@ (8002110 <HAL_RCC_OscConfig+0x61c>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2380      	movs	r3, #128	@ 0x80
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x3e2>
 8001ec8:	4b90      	ldr	r3, [pc, #576]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001eca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ecc:	4b8f      	ldr	r3, [pc, #572]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001ece:	2101      	movs	r1, #1
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ed4:	e01c      	b.n	8001f10 <HAL_RCC_OscConfig+0x41c>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b05      	cmp	r3, #5
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x404>
 8001ede:	4b8b      	ldr	r3, [pc, #556]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001ee0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ee2:	4b8a      	ldr	r3, [pc, #552]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001ee4:	2104      	movs	r1, #4
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001eea:	4b88      	ldr	r3, [pc, #544]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001eec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001eee:	4b87      	ldr	r3, [pc, #540]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ef6:	e00b      	b.n	8001f10 <HAL_RCC_OscConfig+0x41c>
 8001ef8:	4b84      	ldr	r3, [pc, #528]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001efa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001efc:	4b83      	ldr	r3, [pc, #524]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001efe:	2101      	movs	r1, #1
 8001f00:	438a      	bics	r2, r1
 8001f02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f04:	4b81      	ldr	r3, [pc, #516]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001f06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f08:	4b80      	ldr	r3, [pc, #512]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001f0a:	2104      	movs	r1, #4
 8001f0c:	438a      	bics	r2, r1
 8001f0e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d014      	beq.n	8001f42 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff fb5a 	bl	80015d0 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f20:	e009      	b.n	8001f36 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f22:	f7ff fb55 	bl	80015d0 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	4a79      	ldr	r2, [pc, #484]	@ (8002114 <HAL_RCC_OscConfig+0x620>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e0e6      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f36:	4b75      	ldr	r3, [pc, #468]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x42e>
 8001f40:	e013      	b.n	8001f6a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7ff fb45 	bl	80015d0 <HAL_GetTick>
 8001f46:	0003      	movs	r3, r0
 8001f48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f4a:	e009      	b.n	8001f60 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4c:	f7ff fb40 	bl	80015d0 <HAL_GetTick>
 8001f50:	0002      	movs	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	4a6f      	ldr	r2, [pc, #444]	@ (8002114 <HAL_RCC_OscConfig+0x620>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e0d1      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f60:	4b6a      	ldr	r3, [pc, #424]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f64:	2202      	movs	r2, #2
 8001f66:	4013      	ands	r3, r2
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001f6a:	231f      	movs	r3, #31
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d105      	bne.n	8001f80 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f74:	4b65      	ldr	r3, [pc, #404]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001f76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f78:	4b64      	ldr	r3, [pc, #400]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001f7a:	4967      	ldr	r1, [pc, #412]	@ (8002118 <HAL_RCC_OscConfig+0x624>)
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d100      	bne.n	8001f8a <HAL_RCC_OscConfig+0x496>
 8001f88:	e0bb      	b.n	8002102 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f8a:	4b60      	ldr	r3, [pc, #384]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2238      	movs	r2, #56	@ 0x38
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b10      	cmp	r3, #16
 8001f94:	d100      	bne.n	8001f98 <HAL_RCC_OscConfig+0x4a4>
 8001f96:	e07b      	b.n	8002090 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d156      	bne.n	800204e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b5a      	ldr	r3, [pc, #360]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b59      	ldr	r3, [pc, #356]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001fa6:	495d      	ldr	r1, [pc, #372]	@ (800211c <HAL_RCC_OscConfig+0x628>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7ff fb10 	bl	80015d0 <HAL_GetTick>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb6:	f7ff fb0b 	bl	80015d0 <HAL_GetTick>
 8001fba:	0002      	movs	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e09d      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc8:	4b50      	ldr	r3, [pc, #320]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	@ 0x80
 8001fce:	049b      	lsls	r3, r3, #18
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d1f0      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd4:	4b4d      	ldr	r3, [pc, #308]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a51      	ldr	r2, [pc, #324]	@ (8002120 <HAL_RCC_OscConfig+0x62c>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	0019      	movs	r1, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1a      	ldr	r2, [r3, #32]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fec:	021b      	lsls	r3, r3, #8
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002000:	431a      	orrs	r2, r3
 8002002:	4b42      	ldr	r3, [pc, #264]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8002004:	430a      	orrs	r2, r1
 8002006:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002008:	4b40      	ldr	r3, [pc, #256]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b3f      	ldr	r3, [pc, #252]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 800200e:	2180      	movs	r1, #128	@ 0x80
 8002010:	0449      	lsls	r1, r1, #17
 8002012:	430a      	orrs	r2, r1
 8002014:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002016:	4b3d      	ldr	r3, [pc, #244]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	4b3c      	ldr	r3, [pc, #240]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 800201c:	2180      	movs	r1, #128	@ 0x80
 800201e:	0549      	lsls	r1, r1, #21
 8002020:	430a      	orrs	r2, r1
 8002022:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002024:	f7ff fad4 	bl	80015d0 <HAL_GetTick>
 8002028:	0003      	movs	r3, r0
 800202a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202e:	f7ff facf 	bl	80015d0 <HAL_GetTick>
 8002032:	0002      	movs	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e061      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002040:	4b32      	ldr	r3, [pc, #200]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	@ 0x80
 8002046:	049b      	lsls	r3, r3, #18
 8002048:	4013      	ands	r3, r2
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x53a>
 800204c:	e059      	b.n	8002102 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204e:	4b2f      	ldr	r3, [pc, #188]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4b2e      	ldr	r3, [pc, #184]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8002054:	4931      	ldr	r1, [pc, #196]	@ (800211c <HAL_RCC_OscConfig+0x628>)
 8002056:	400a      	ands	r2, r1
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205a:	f7ff fab9 	bl	80015d0 <HAL_GetTick>
 800205e:	0003      	movs	r3, r0
 8002060:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002064:	f7ff fab4 	bl	80015d0 <HAL_GetTick>
 8002068:	0002      	movs	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e046      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002076:	4b25      	ldr	r3, [pc, #148]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	@ 0x80
 800207c:	049b      	lsls	r3, r3, #18
 800207e:	4013      	ands	r3, r2
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002082:	4b22      	ldr	r3, [pc, #136]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	4b21      	ldr	r3, [pc, #132]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 8002088:	4926      	ldr	r1, [pc, #152]	@ (8002124 <HAL_RCC_OscConfig+0x630>)
 800208a:	400a      	ands	r2, r1
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	e038      	b.n	8002102 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e033      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800209c:	4b1b      	ldr	r3, [pc, #108]	@ (800210c <HAL_RCC_OscConfig+0x618>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2203      	movs	r2, #3
 80020a6:	401a      	ands	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d126      	bne.n	80020fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2270      	movs	r2, #112	@ 0x70
 80020b4:	401a      	ands	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d11f      	bne.n	80020fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	23fe      	movs	r3, #254	@ 0xfe
 80020c2:	01db      	lsls	r3, r3, #7
 80020c4:	401a      	ands	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ca:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d116      	bne.n	80020fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	23f8      	movs	r3, #248	@ 0xf8
 80020d4:	039b      	lsls	r3, r3, #14
 80020d6:	401a      	ands	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d10e      	bne.n	80020fe <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	23e0      	movs	r3, #224	@ 0xe0
 80020e4:	051b      	lsls	r3, r3, #20
 80020e6:	401a      	ands	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d106      	bne.n	80020fe <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	0f5b      	lsrs	r3, r3, #29
 80020f4:	075a      	lsls	r2, r3, #29
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	0018      	movs	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	b008      	add	sp, #32
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40021000 	.word	0x40021000
 8002110:	40007000 	.word	0x40007000
 8002114:	00001388 	.word	0x00001388
 8002118:	efffffff 	.word	0xefffffff
 800211c:	feffffff 	.word	0xfeffffff
 8002120:	11c1808c 	.word	0x11c1808c
 8002124:	eefefffc 	.word	0xeefefffc

08002128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0e9      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800213c:	4b76      	ldr	r3, [pc, #472]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2207      	movs	r2, #7
 8002142:	4013      	ands	r3, r2
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d91e      	bls.n	8002188 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214a:	4b73      	ldr	r3, [pc, #460]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2207      	movs	r2, #7
 8002150:	4393      	bics	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	4b70      	ldr	r3, [pc, #448]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800215c:	f7ff fa38 	bl	80015d0 <HAL_GetTick>
 8002160:	0003      	movs	r3, r0
 8002162:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002164:	e009      	b.n	800217a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002166:	f7ff fa33 	bl	80015d0 <HAL_GetTick>
 800216a:	0002      	movs	r2, r0
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	4a6a      	ldr	r2, [pc, #424]	@ (800231c <HAL_RCC_ClockConfig+0x1f4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e0ca      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800217a:	4b67      	ldr	r3, [pc, #412]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2207      	movs	r2, #7
 8002180:	4013      	ands	r3, r2
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d1ee      	bne.n	8002166 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2202      	movs	r2, #2
 800218e:	4013      	ands	r3, r2
 8002190:	d015      	beq.n	80021be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2204      	movs	r2, #4
 8002198:	4013      	ands	r3, r2
 800219a:	d006      	beq.n	80021aa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800219c:	4b60      	ldr	r3, [pc, #384]	@ (8002320 <HAL_RCC_ClockConfig+0x1f8>)
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	4b5f      	ldr	r3, [pc, #380]	@ (8002320 <HAL_RCC_ClockConfig+0x1f8>)
 80021a2:	21e0      	movs	r1, #224	@ 0xe0
 80021a4:	01c9      	lsls	r1, r1, #7
 80021a6:	430a      	orrs	r2, r1
 80021a8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002320 <HAL_RCC_ClockConfig+0x1f8>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	4a5d      	ldr	r2, [pc, #372]	@ (8002324 <HAL_RCC_ClockConfig+0x1fc>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	0019      	movs	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	4b59      	ldr	r3, [pc, #356]	@ (8002320 <HAL_RCC_ClockConfig+0x1f8>)
 80021ba:	430a      	orrs	r2, r1
 80021bc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2201      	movs	r2, #1
 80021c4:	4013      	ands	r3, r2
 80021c6:	d057      	beq.n	8002278 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d107      	bne.n	80021e0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d0:	4b53      	ldr	r3, [pc, #332]	@ (8002320 <HAL_RCC_ClockConfig+0x1f8>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	2380      	movs	r3, #128	@ 0x80
 80021d6:	029b      	lsls	r3, r3, #10
 80021d8:	4013      	ands	r3, r2
 80021da:	d12b      	bne.n	8002234 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e097      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d107      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002320 <HAL_RCC_ClockConfig+0x1f8>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	2380      	movs	r3, #128	@ 0x80
 80021ee:	049b      	lsls	r3, r3, #18
 80021f0:	4013      	ands	r3, r2
 80021f2:	d11f      	bne.n	8002234 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e08b      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d107      	bne.n	8002210 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002200:	4b47      	ldr	r3, [pc, #284]	@ (8002320 <HAL_RCC_ClockConfig+0x1f8>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	2380      	movs	r3, #128	@ 0x80
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4013      	ands	r3, r2
 800220a:	d113      	bne.n	8002234 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e07f      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d106      	bne.n	8002226 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002218:	4b41      	ldr	r3, [pc, #260]	@ (8002320 <HAL_RCC_ClockConfig+0x1f8>)
 800221a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800221c:	2202      	movs	r2, #2
 800221e:	4013      	ands	r3, r2
 8002220:	d108      	bne.n	8002234 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e074      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002226:	4b3e      	ldr	r3, [pc, #248]	@ (8002320 <HAL_RCC_ClockConfig+0x1f8>)
 8002228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222a:	2202      	movs	r2, #2
 800222c:	4013      	ands	r3, r2
 800222e:	d101      	bne.n	8002234 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e06d      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002234:	4b3a      	ldr	r3, [pc, #232]	@ (8002320 <HAL_RCC_ClockConfig+0x1f8>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2207      	movs	r2, #7
 800223a:	4393      	bics	r3, r2
 800223c:	0019      	movs	r1, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	4b37      	ldr	r3, [pc, #220]	@ (8002320 <HAL_RCC_ClockConfig+0x1f8>)
 8002244:	430a      	orrs	r2, r1
 8002246:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002248:	f7ff f9c2 	bl	80015d0 <HAL_GetTick>
 800224c:	0003      	movs	r3, r0
 800224e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002250:	e009      	b.n	8002266 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002252:	f7ff f9bd 	bl	80015d0 <HAL_GetTick>
 8002256:	0002      	movs	r2, r0
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	4a2f      	ldr	r2, [pc, #188]	@ (800231c <HAL_RCC_ClockConfig+0x1f4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e054      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002266:	4b2e      	ldr	r3, [pc, #184]	@ (8002320 <HAL_RCC_ClockConfig+0x1f8>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2238      	movs	r2, #56	@ 0x38
 800226c:	401a      	ands	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	429a      	cmp	r2, r3
 8002276:	d1ec      	bne.n	8002252 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002278:	4b27      	ldr	r3, [pc, #156]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2207      	movs	r2, #7
 800227e:	4013      	ands	r3, r2
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d21e      	bcs.n	80022c4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b24      	ldr	r3, [pc, #144]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2207      	movs	r2, #7
 800228c:	4393      	bics	r3, r2
 800228e:	0019      	movs	r1, r3
 8002290:	4b21      	ldr	r3, [pc, #132]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002298:	f7ff f99a 	bl	80015d0 <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022a0:	e009      	b.n	80022b6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a2:	f7ff f995 	bl	80015d0 <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	4a1b      	ldr	r2, [pc, #108]	@ (800231c <HAL_RCC_ClockConfig+0x1f4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e02c      	b.n	8002310 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022b6:	4b18      	ldr	r3, [pc, #96]	@ (8002318 <HAL_RCC_ClockConfig+0x1f0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2207      	movs	r2, #7
 80022bc:	4013      	ands	r3, r2
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d1ee      	bne.n	80022a2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2204      	movs	r2, #4
 80022ca:	4013      	ands	r3, r2
 80022cc:	d009      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80022ce:	4b14      	ldr	r3, [pc, #80]	@ (8002320 <HAL_RCC_ClockConfig+0x1f8>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	4a15      	ldr	r2, [pc, #84]	@ (8002328 <HAL_RCC_ClockConfig+0x200>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	0019      	movs	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	4b10      	ldr	r3, [pc, #64]	@ (8002320 <HAL_RCC_ClockConfig+0x1f8>)
 80022de:	430a      	orrs	r2, r1
 80022e0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80022e2:	f000 f829 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 80022e6:	0001      	movs	r1, r0
 80022e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002320 <HAL_RCC_ClockConfig+0x1f8>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	220f      	movs	r2, #15
 80022f0:	401a      	ands	r2, r3
 80022f2:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <HAL_RCC_ClockConfig+0x204>)
 80022f4:	0092      	lsls	r2, r2, #2
 80022f6:	58d3      	ldr	r3, [r2, r3]
 80022f8:	221f      	movs	r2, #31
 80022fa:	4013      	ands	r3, r2
 80022fc:	000a      	movs	r2, r1
 80022fe:	40da      	lsrs	r2, r3
 8002300:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <HAL_RCC_ClockConfig+0x208>)
 8002302:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <HAL_RCC_ClockConfig+0x20c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0018      	movs	r0, r3
 800230a:	f7ff f905 	bl	8001518 <HAL_InitTick>
 800230e:	0003      	movs	r3, r0
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b004      	add	sp, #16
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40022000 	.word	0x40022000
 800231c:	00001388 	.word	0x00001388
 8002320:	40021000 	.word	0x40021000
 8002324:	fffff0ff 	.word	0xfffff0ff
 8002328:	ffff8fff 	.word	0xffff8fff
 800232c:	080054dc 	.word	0x080054dc
 8002330:	20000000 	.word	0x20000000
 8002334:	20000004 	.word	0x20000004

08002338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800233e:	4b3c      	ldr	r3, [pc, #240]	@ (8002430 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2238      	movs	r2, #56	@ 0x38
 8002344:	4013      	ands	r3, r2
 8002346:	d10f      	bne.n	8002368 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002348:	4b39      	ldr	r3, [pc, #228]	@ (8002430 <HAL_RCC_GetSysClockFreq+0xf8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	0adb      	lsrs	r3, r3, #11
 800234e:	2207      	movs	r2, #7
 8002350:	4013      	ands	r3, r2
 8002352:	2201      	movs	r2, #1
 8002354:	409a      	lsls	r2, r3
 8002356:	0013      	movs	r3, r2
 8002358:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800235a:	6839      	ldr	r1, [r7, #0]
 800235c:	4835      	ldr	r0, [pc, #212]	@ (8002434 <HAL_RCC_GetSysClockFreq+0xfc>)
 800235e:	f7fd fed1 	bl	8000104 <__udivsi3>
 8002362:	0003      	movs	r3, r0
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	e05d      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002368:	4b31      	ldr	r3, [pc, #196]	@ (8002430 <HAL_RCC_GetSysClockFreq+0xf8>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2238      	movs	r2, #56	@ 0x38
 800236e:	4013      	ands	r3, r2
 8002370:	2b08      	cmp	r3, #8
 8002372:	d102      	bne.n	800237a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002374:	4b30      	ldr	r3, [pc, #192]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x100>)
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	e054      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800237a:	4b2d      	ldr	r3, [pc, #180]	@ (8002430 <HAL_RCC_GetSysClockFreq+0xf8>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2238      	movs	r2, #56	@ 0x38
 8002380:	4013      	ands	r3, r2
 8002382:	2b10      	cmp	r3, #16
 8002384:	d138      	bne.n	80023f8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002386:	4b2a      	ldr	r3, [pc, #168]	@ (8002430 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2203      	movs	r2, #3
 800238c:	4013      	ands	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002390:	4b27      	ldr	r3, [pc, #156]	@ (8002430 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	2207      	movs	r2, #7
 8002398:	4013      	ands	r3, r2
 800239a:	3301      	adds	r3, #1
 800239c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d10d      	bne.n	80023c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023a4:	68b9      	ldr	r1, [r7, #8]
 80023a6:	4824      	ldr	r0, [pc, #144]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x100>)
 80023a8:	f7fd feac 	bl	8000104 <__udivsi3>
 80023ac:	0003      	movs	r3, r0
 80023ae:	0019      	movs	r1, r3
 80023b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002430 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	227f      	movs	r2, #127	@ 0x7f
 80023b8:	4013      	ands	r3, r2
 80023ba:	434b      	muls	r3, r1
 80023bc:	617b      	str	r3, [r7, #20]
        break;
 80023be:	e00d      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	481c      	ldr	r0, [pc, #112]	@ (8002434 <HAL_RCC_GetSysClockFreq+0xfc>)
 80023c4:	f7fd fe9e 	bl	8000104 <__udivsi3>
 80023c8:	0003      	movs	r3, r0
 80023ca:	0019      	movs	r1, r3
 80023cc:	4b18      	ldr	r3, [pc, #96]	@ (8002430 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	227f      	movs	r2, #127	@ 0x7f
 80023d4:	4013      	ands	r3, r2
 80023d6:	434b      	muls	r3, r1
 80023d8:	617b      	str	r3, [r7, #20]
        break;
 80023da:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80023dc:	4b14      	ldr	r3, [pc, #80]	@ (8002430 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	0f5b      	lsrs	r3, r3, #29
 80023e2:	2207      	movs	r2, #7
 80023e4:	4013      	ands	r3, r2
 80023e6:	3301      	adds	r3, #1
 80023e8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	6978      	ldr	r0, [r7, #20]
 80023ee:	f7fd fe89 	bl	8000104 <__udivsi3>
 80023f2:	0003      	movs	r3, r0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	e015      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80023f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002430 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2238      	movs	r2, #56	@ 0x38
 80023fe:	4013      	ands	r3, r2
 8002400:	2b20      	cmp	r3, #32
 8002402:	d103      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002404:	2380      	movs	r3, #128	@ 0x80
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	e00b      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800240c:	4b08      	ldr	r3, [pc, #32]	@ (8002430 <HAL_RCC_GetSysClockFreq+0xf8>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2238      	movs	r2, #56	@ 0x38
 8002412:	4013      	ands	r3, r2
 8002414:	2b18      	cmp	r3, #24
 8002416:	d103      	bne.n	8002420 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002418:	23fa      	movs	r3, #250	@ 0xfa
 800241a:	01db      	lsls	r3, r3, #7
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	e001      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002424:	693b      	ldr	r3, [r7, #16]
}
 8002426:	0018      	movs	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	b006      	add	sp, #24
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			@ (mov r8, r8)
 8002430:	40021000 	.word	0x40021000
 8002434:	00f42400 	.word	0x00f42400
 8002438:	007a1200 	.word	0x007a1200

0800243c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002440:	4b02      	ldr	r3, [pc, #8]	@ (800244c <HAL_RCC_GetHCLKFreq+0x10>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	20000000 	.word	0x20000000

08002450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002450:	b5b0      	push	{r4, r5, r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002454:	f7ff fff2 	bl	800243c <HAL_RCC_GetHCLKFreq>
 8002458:	0004      	movs	r4, r0
 800245a:	f7ff fb3f 	bl	8001adc <LL_RCC_GetAPB1Prescaler>
 800245e:	0003      	movs	r3, r0
 8002460:	0b1a      	lsrs	r2, r3, #12
 8002462:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	58d3      	ldr	r3, [r2, r3]
 8002468:	221f      	movs	r2, #31
 800246a:	4013      	ands	r3, r2
 800246c:	40dc      	lsrs	r4, r3
 800246e:	0023      	movs	r3, r4
}
 8002470:	0018      	movs	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	bdb0      	pop	{r4, r5, r7, pc}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	0800551c 	.word	0x0800551c

0800247c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002484:	2313      	movs	r3, #19
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800248c:	2312      	movs	r3, #18
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	2380      	movs	r3, #128	@ 0x80
 800249a:	029b      	lsls	r3, r3, #10
 800249c:	4013      	ands	r3, r2
 800249e:	d100      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80024a0:	e0a3      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a2:	2011      	movs	r0, #17
 80024a4:	183b      	adds	r3, r7, r0
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024aa:	4bc3      	ldr	r3, [pc, #780]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024ae:	2380      	movs	r3, #128	@ 0x80
 80024b0:	055b      	lsls	r3, r3, #21
 80024b2:	4013      	ands	r3, r2
 80024b4:	d110      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b6:	4bc0      	ldr	r3, [pc, #768]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024ba:	4bbf      	ldr	r3, [pc, #764]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024bc:	2180      	movs	r1, #128	@ 0x80
 80024be:	0549      	lsls	r1, r1, #21
 80024c0:	430a      	orrs	r2, r1
 80024c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024c4:	4bbc      	ldr	r3, [pc, #752]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024c8:	2380      	movs	r3, #128	@ 0x80
 80024ca:	055b      	lsls	r3, r3, #21
 80024cc:	4013      	ands	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d2:	183b      	adds	r3, r7, r0
 80024d4:	2201      	movs	r2, #1
 80024d6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d8:	4bb8      	ldr	r3, [pc, #736]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4bb7      	ldr	r3, [pc, #732]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80024de:	2180      	movs	r1, #128	@ 0x80
 80024e0:	0049      	lsls	r1, r1, #1
 80024e2:	430a      	orrs	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024e6:	f7ff f873 	bl	80015d0 <HAL_GetTick>
 80024ea:	0003      	movs	r3, r0
 80024ec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024ee:	e00b      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024f0:	f7ff f86e 	bl	80015d0 <HAL_GetTick>
 80024f4:	0002      	movs	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d904      	bls.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80024fe:	2313      	movs	r3, #19
 8002500:	18fb      	adds	r3, r7, r3
 8002502:	2203      	movs	r2, #3
 8002504:	701a      	strb	r2, [r3, #0]
        break;
 8002506:	e005      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002508:	4bac      	ldr	r3, [pc, #688]	@ (80027bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	2380      	movs	r3, #128	@ 0x80
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4013      	ands	r3, r2
 8002512:	d0ed      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002514:	2313      	movs	r3, #19
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d154      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800251e:	4ba6      	ldr	r3, [pc, #664]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002520:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002522:	23c0      	movs	r3, #192	@ 0xc0
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4013      	ands	r3, r2
 8002528:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d019      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	429a      	cmp	r2, r3
 8002538:	d014      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800253a:	4b9f      	ldr	r3, [pc, #636]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800253c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253e:	4aa0      	ldr	r2, [pc, #640]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002540:	4013      	ands	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002544:	4b9c      	ldr	r3, [pc, #624]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002546:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002548:	4b9b      	ldr	r3, [pc, #620]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800254a:	2180      	movs	r1, #128	@ 0x80
 800254c:	0249      	lsls	r1, r1, #9
 800254e:	430a      	orrs	r2, r1
 8002550:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002552:	4b99      	ldr	r3, [pc, #612]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002554:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002556:	4b98      	ldr	r3, [pc, #608]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002558:	499a      	ldr	r1, [pc, #616]	@ (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800255a:	400a      	ands	r2, r1
 800255c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800255e:	4b96      	ldr	r3, [pc, #600]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2201      	movs	r2, #1
 8002568:	4013      	ands	r3, r2
 800256a:	d016      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256c:	f7ff f830 	bl	80015d0 <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002574:	e00c      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7ff f82b 	bl	80015d0 <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	4a91      	ldr	r2, [pc, #580]	@ (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d904      	bls.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002586:	2313      	movs	r3, #19
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	2203      	movs	r2, #3
 800258c:	701a      	strb	r2, [r3, #0]
            break;
 800258e:	e004      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002590:	4b89      	ldr	r3, [pc, #548]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002594:	2202      	movs	r2, #2
 8002596:	4013      	ands	r3, r2
 8002598:	d0ed      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800259a:	2313      	movs	r3, #19
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025a4:	4b84      	ldr	r3, [pc, #528]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a8:	4a85      	ldr	r2, [pc, #532]	@ (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80025aa:	4013      	ands	r3, r2
 80025ac:	0019      	movs	r1, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025b2:	4b81      	ldr	r3, [pc, #516]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b4:	430a      	orrs	r2, r1
 80025b6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025b8:	e00c      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025ba:	2312      	movs	r3, #18
 80025bc:	18fb      	adds	r3, r7, r3
 80025be:	2213      	movs	r2, #19
 80025c0:	18ba      	adds	r2, r7, r2
 80025c2:	7812      	ldrb	r2, [r2, #0]
 80025c4:	701a      	strb	r2, [r3, #0]
 80025c6:	e005      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c8:	2312      	movs	r3, #18
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	2213      	movs	r2, #19
 80025ce:	18ba      	adds	r2, r7, r2
 80025d0:	7812      	ldrb	r2, [r2, #0]
 80025d2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025d4:	2311      	movs	r3, #17
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d105      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025de:	4b76      	ldr	r3, [pc, #472]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025e2:	4b75      	ldr	r3, [pc, #468]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e4:	4979      	ldr	r1, [pc, #484]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80025e6:	400a      	ands	r2, r1
 80025e8:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2201      	movs	r2, #1
 80025f0:	4013      	ands	r3, r2
 80025f2:	d009      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025f4:	4b70      	ldr	r3, [pc, #448]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f8:	2203      	movs	r2, #3
 80025fa:	4393      	bics	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	4b6d      	ldr	r3, [pc, #436]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002604:	430a      	orrs	r2, r1
 8002606:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2202      	movs	r2, #2
 800260e:	4013      	ands	r3, r2
 8002610:	d009      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002612:	4b69      	ldr	r3, [pc, #420]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002616:	220c      	movs	r2, #12
 8002618:	4393      	bics	r3, r2
 800261a:	0019      	movs	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	4b65      	ldr	r3, [pc, #404]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002622:	430a      	orrs	r2, r1
 8002624:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2210      	movs	r2, #16
 800262c:	4013      	ands	r3, r2
 800262e:	d009      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002630:	4b61      	ldr	r3, [pc, #388]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002634:	4a66      	ldr	r2, [pc, #408]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002636:	4013      	ands	r3, r2
 8002638:	0019      	movs	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	4b5e      	ldr	r3, [pc, #376]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002640:	430a      	orrs	r2, r1
 8002642:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	2380      	movs	r3, #128	@ 0x80
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4013      	ands	r3, r2
 800264e:	d009      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002650:	4b59      	ldr	r3, [pc, #356]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002654:	4a5f      	ldr	r2, [pc, #380]	@ (80027d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002656:	4013      	ands	r3, r2
 8002658:	0019      	movs	r1, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	4b56      	ldr	r3, [pc, #344]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002660:	430a      	orrs	r2, r1
 8002662:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2380      	movs	r3, #128	@ 0x80
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4013      	ands	r3, r2
 800266e:	d009      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002670:	4b51      	ldr	r3, [pc, #324]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002674:	4a58      	ldr	r2, [pc, #352]	@ (80027d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002676:	4013      	ands	r3, r2
 8002678:	0019      	movs	r1, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	69da      	ldr	r2, [r3, #28]
 800267e:	4b4e      	ldr	r3, [pc, #312]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002680:	430a      	orrs	r2, r1
 8002682:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2220      	movs	r2, #32
 800268a:	4013      	ands	r3, r2
 800268c:	d009      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800268e:	4b4a      	ldr	r3, [pc, #296]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002692:	4a52      	ldr	r2, [pc, #328]	@ (80027dc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002694:	4013      	ands	r3, r2
 8002696:	0019      	movs	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	4b46      	ldr	r3, [pc, #280]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800269e:	430a      	orrs	r2, r1
 80026a0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	2380      	movs	r3, #128	@ 0x80
 80026a8:	01db      	lsls	r3, r3, #7
 80026aa:	4013      	ands	r3, r2
 80026ac:	d015      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026ae:	4b42      	ldr	r3, [pc, #264]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	0899      	lsrs	r1, r3, #2
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1a      	ldr	r2, [r3, #32]
 80026ba:	4b3f      	ldr	r3, [pc, #252]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026bc:	430a      	orrs	r2, r1
 80026be:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1a      	ldr	r2, [r3, #32]
 80026c4:	2380      	movs	r3, #128	@ 0x80
 80026c6:	05db      	lsls	r3, r3, #23
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d106      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80026cc:	4b3a      	ldr	r3, [pc, #232]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	4b39      	ldr	r3, [pc, #228]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026d2:	2180      	movs	r1, #128	@ 0x80
 80026d4:	0249      	lsls	r1, r1, #9
 80026d6:	430a      	orrs	r2, r1
 80026d8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	2380      	movs	r3, #128	@ 0x80
 80026e0:	031b      	lsls	r3, r3, #12
 80026e2:	4013      	ands	r3, r2
 80026e4:	d009      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026e6:	4b34      	ldr	r3, [pc, #208]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ea:	2240      	movs	r2, #64	@ 0x40
 80026ec:	4393      	bics	r3, r2
 80026ee:	0019      	movs	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026f4:	4b30      	ldr	r3, [pc, #192]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026f6:	430a      	orrs	r2, r1
 80026f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	2380      	movs	r3, #128	@ 0x80
 8002700:	039b      	lsls	r3, r3, #14
 8002702:	4013      	ands	r3, r2
 8002704:	d016      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002706:	4b2c      	ldr	r3, [pc, #176]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270a:	4a35      	ldr	r2, [pc, #212]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800270c:	4013      	ands	r3, r2
 800270e:	0019      	movs	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002714:	4b28      	ldr	r3, [pc, #160]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002716:	430a      	orrs	r2, r1
 8002718:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800271e:	2380      	movs	r3, #128	@ 0x80
 8002720:	03db      	lsls	r3, r3, #15
 8002722:	429a      	cmp	r2, r3
 8002724:	d106      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002726:	4b24      	ldr	r3, [pc, #144]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	4b23      	ldr	r3, [pc, #140]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800272c:	2180      	movs	r1, #128	@ 0x80
 800272e:	0449      	lsls	r1, r1, #17
 8002730:	430a      	orrs	r2, r1
 8002732:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	2380      	movs	r3, #128	@ 0x80
 800273a:	03db      	lsls	r3, r3, #15
 800273c:	4013      	ands	r3, r2
 800273e:	d016      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002740:	4b1d      	ldr	r3, [pc, #116]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002744:	4a27      	ldr	r2, [pc, #156]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002746:	4013      	ands	r3, r2
 8002748:	0019      	movs	r1, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800274e:	4b1a      	ldr	r3, [pc, #104]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002750:	430a      	orrs	r2, r1
 8002752:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002758:	2380      	movs	r3, #128	@ 0x80
 800275a:	045b      	lsls	r3, r3, #17
 800275c:	429a      	cmp	r2, r3
 800275e:	d106      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002760:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	4b14      	ldr	r3, [pc, #80]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002766:	2180      	movs	r1, #128	@ 0x80
 8002768:	0449      	lsls	r1, r1, #17
 800276a:	430a      	orrs	r2, r1
 800276c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	2380      	movs	r3, #128	@ 0x80
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	4013      	ands	r3, r2
 8002778:	d016      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800277a:	4b0f      	ldr	r3, [pc, #60]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800277c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277e:	4a1a      	ldr	r2, [pc, #104]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002780:	4013      	ands	r3, r2
 8002782:	0019      	movs	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800278a:	430a      	orrs	r2, r1
 800278c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	2380      	movs	r3, #128	@ 0x80
 8002794:	01db      	lsls	r3, r3, #7
 8002796:	429a      	cmp	r2, r3
 8002798:	d106      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800279a:	4b07      	ldr	r3, [pc, #28]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027a0:	2180      	movs	r1, #128	@ 0x80
 80027a2:	0249      	lsls	r1, r1, #9
 80027a4:	430a      	orrs	r2, r1
 80027a6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80027a8:	2312      	movs	r3, #18
 80027aa:	18fb      	adds	r3, r7, r3
 80027ac:	781b      	ldrb	r3, [r3, #0]
}
 80027ae:	0018      	movs	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b006      	add	sp, #24
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			@ (mov r8, r8)
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40007000 	.word	0x40007000
 80027c0:	fffffcff 	.word	0xfffffcff
 80027c4:	fffeffff 	.word	0xfffeffff
 80027c8:	00001388 	.word	0x00001388
 80027cc:	efffffff 	.word	0xefffffff
 80027d0:	fffff3ff 	.word	0xfffff3ff
 80027d4:	fff3ffff 	.word	0xfff3ffff
 80027d8:	ffcfffff 	.word	0xffcfffff
 80027dc:	ffffcfff 	.word	0xffffcfff
 80027e0:	ffbfffff 	.word	0xffbfffff
 80027e4:	feffffff 	.word	0xfeffffff
 80027e8:	ffff3fff 	.word	0xffff3fff

080027ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e04a      	b.n	8002894 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	223d      	movs	r2, #61	@ 0x3d
 8002802:	5c9b      	ldrb	r3, [r3, r2]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d107      	bne.n	800281a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	223c      	movs	r2, #60	@ 0x3c
 800280e:	2100      	movs	r1, #0
 8002810:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	0018      	movs	r0, r3
 8002816:	f7fe fc07 	bl	8001028 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	223d      	movs	r2, #61	@ 0x3d
 800281e:	2102      	movs	r1, #2
 8002820:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3304      	adds	r3, #4
 800282a:	0019      	movs	r1, r3
 800282c:	0010      	movs	r0, r2
 800282e:	f000 fb55 	bl	8002edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2248      	movs	r2, #72	@ 0x48
 8002836:	2101      	movs	r1, #1
 8002838:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	223e      	movs	r2, #62	@ 0x3e
 800283e:	2101      	movs	r1, #1
 8002840:	5499      	strb	r1, [r3, r2]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	223f      	movs	r2, #63	@ 0x3f
 8002846:	2101      	movs	r1, #1
 8002848:	5499      	strb	r1, [r3, r2]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2240      	movs	r2, #64	@ 0x40
 800284e:	2101      	movs	r1, #1
 8002850:	5499      	strb	r1, [r3, r2]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2241      	movs	r2, #65	@ 0x41
 8002856:	2101      	movs	r1, #1
 8002858:	5499      	strb	r1, [r3, r2]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2242      	movs	r2, #66	@ 0x42
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2243      	movs	r2, #67	@ 0x43
 8002866:	2101      	movs	r1, #1
 8002868:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2244      	movs	r2, #68	@ 0x44
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2245      	movs	r2, #69	@ 0x45
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2246      	movs	r2, #70	@ 0x46
 800287e:	2101      	movs	r1, #1
 8002880:	5499      	strb	r1, [r3, r2]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2247      	movs	r2, #71	@ 0x47
 8002886:	2101      	movs	r1, #1
 8002888:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	223d      	movs	r2, #61	@ 0x3d
 800288e:	2101      	movs	r1, #1
 8002890:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b002      	add	sp, #8
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e04a      	b.n	8002944 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	223d      	movs	r2, #61	@ 0x3d
 80028b2:	5c9b      	ldrb	r3, [r3, r2]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d107      	bne.n	80028ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	223c      	movs	r2, #60	@ 0x3c
 80028be:	2100      	movs	r1, #0
 80028c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f000 f841 	bl	800294c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	223d      	movs	r2, #61	@ 0x3d
 80028ce:	2102      	movs	r1, #2
 80028d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3304      	adds	r3, #4
 80028da:	0019      	movs	r1, r3
 80028dc:	0010      	movs	r0, r2
 80028de:	f000 fafd 	bl	8002edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2248      	movs	r2, #72	@ 0x48
 80028e6:	2101      	movs	r1, #1
 80028e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	223e      	movs	r2, #62	@ 0x3e
 80028ee:	2101      	movs	r1, #1
 80028f0:	5499      	strb	r1, [r3, r2]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	223f      	movs	r2, #63	@ 0x3f
 80028f6:	2101      	movs	r1, #1
 80028f8:	5499      	strb	r1, [r3, r2]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2240      	movs	r2, #64	@ 0x40
 80028fe:	2101      	movs	r1, #1
 8002900:	5499      	strb	r1, [r3, r2]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2241      	movs	r2, #65	@ 0x41
 8002906:	2101      	movs	r1, #1
 8002908:	5499      	strb	r1, [r3, r2]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2242      	movs	r2, #66	@ 0x42
 800290e:	2101      	movs	r1, #1
 8002910:	5499      	strb	r1, [r3, r2]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2243      	movs	r2, #67	@ 0x43
 8002916:	2101      	movs	r1, #1
 8002918:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2244      	movs	r2, #68	@ 0x44
 800291e:	2101      	movs	r1, #1
 8002920:	5499      	strb	r1, [r3, r2]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2245      	movs	r2, #69	@ 0x45
 8002926:	2101      	movs	r1, #1
 8002928:	5499      	strb	r1, [r3, r2]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2246      	movs	r2, #70	@ 0x46
 800292e:	2101      	movs	r1, #1
 8002930:	5499      	strb	r1, [r3, r2]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2247      	movs	r2, #71	@ 0x47
 8002936:	2101      	movs	r1, #1
 8002938:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	223d      	movs	r2, #61	@ 0x3d
 800293e:	2101      	movs	r1, #1
 8002940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	0018      	movs	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	b002      	add	sp, #8
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002954:	46c0      	nop			@ (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b002      	add	sp, #8
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d108      	bne.n	800297e <HAL_TIM_PWM_Start+0x22>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	223e      	movs	r2, #62	@ 0x3e
 8002970:	5c9b      	ldrb	r3, [r3, r2]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	1e5a      	subs	r2, r3, #1
 8002978:	4193      	sbcs	r3, r2
 800297a:	b2db      	uxtb	r3, r3
 800297c:	e037      	b.n	80029ee <HAL_TIM_PWM_Start+0x92>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b04      	cmp	r3, #4
 8002982:	d108      	bne.n	8002996 <HAL_TIM_PWM_Start+0x3a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	223f      	movs	r2, #63	@ 0x3f
 8002988:	5c9b      	ldrb	r3, [r3, r2]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	1e5a      	subs	r2, r3, #1
 8002990:	4193      	sbcs	r3, r2
 8002992:	b2db      	uxtb	r3, r3
 8002994:	e02b      	b.n	80029ee <HAL_TIM_PWM_Start+0x92>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d108      	bne.n	80029ae <HAL_TIM_PWM_Start+0x52>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2240      	movs	r2, #64	@ 0x40
 80029a0:	5c9b      	ldrb	r3, [r3, r2]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	1e5a      	subs	r2, r3, #1
 80029a8:	4193      	sbcs	r3, r2
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	e01f      	b.n	80029ee <HAL_TIM_PWM_Start+0x92>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b0c      	cmp	r3, #12
 80029b2:	d108      	bne.n	80029c6 <HAL_TIM_PWM_Start+0x6a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2241      	movs	r2, #65	@ 0x41
 80029b8:	5c9b      	ldrb	r3, [r3, r2]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	1e5a      	subs	r2, r3, #1
 80029c0:	4193      	sbcs	r3, r2
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	e013      	b.n	80029ee <HAL_TIM_PWM_Start+0x92>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b10      	cmp	r3, #16
 80029ca:	d108      	bne.n	80029de <HAL_TIM_PWM_Start+0x82>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2242      	movs	r2, #66	@ 0x42
 80029d0:	5c9b      	ldrb	r3, [r3, r2]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	1e5a      	subs	r2, r3, #1
 80029d8:	4193      	sbcs	r3, r2
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	e007      	b.n	80029ee <HAL_TIM_PWM_Start+0x92>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2243      	movs	r2, #67	@ 0x43
 80029e2:	5c9b      	ldrb	r3, [r3, r2]
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	3b01      	subs	r3, #1
 80029e8:	1e5a      	subs	r2, r3, #1
 80029ea:	4193      	sbcs	r3, r2
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e08b      	b.n	8002b0e <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <HAL_TIM_PWM_Start+0xaa>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	223e      	movs	r2, #62	@ 0x3e
 8002a00:	2102      	movs	r1, #2
 8002a02:	5499      	strb	r1, [r3, r2]
 8002a04:	e023      	b.n	8002a4e <HAL_TIM_PWM_Start+0xf2>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d104      	bne.n	8002a16 <HAL_TIM_PWM_Start+0xba>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	223f      	movs	r2, #63	@ 0x3f
 8002a10:	2102      	movs	r1, #2
 8002a12:	5499      	strb	r1, [r3, r2]
 8002a14:	e01b      	b.n	8002a4e <HAL_TIM_PWM_Start+0xf2>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d104      	bne.n	8002a26 <HAL_TIM_PWM_Start+0xca>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2240      	movs	r2, #64	@ 0x40
 8002a20:	2102      	movs	r1, #2
 8002a22:	5499      	strb	r1, [r3, r2]
 8002a24:	e013      	b.n	8002a4e <HAL_TIM_PWM_Start+0xf2>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b0c      	cmp	r3, #12
 8002a2a:	d104      	bne.n	8002a36 <HAL_TIM_PWM_Start+0xda>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2241      	movs	r2, #65	@ 0x41
 8002a30:	2102      	movs	r1, #2
 8002a32:	5499      	strb	r1, [r3, r2]
 8002a34:	e00b      	b.n	8002a4e <HAL_TIM_PWM_Start+0xf2>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	d104      	bne.n	8002a46 <HAL_TIM_PWM_Start+0xea>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2242      	movs	r2, #66	@ 0x42
 8002a40:	2102      	movs	r1, #2
 8002a42:	5499      	strb	r1, [r3, r2]
 8002a44:	e003      	b.n	8002a4e <HAL_TIM_PWM_Start+0xf2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2243      	movs	r2, #67	@ 0x43
 8002a4a:	2102      	movs	r1, #2
 8002a4c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6839      	ldr	r1, [r7, #0]
 8002a54:	2201      	movs	r2, #1
 8002a56:	0018      	movs	r0, r3
 8002a58:	f000 fe2e 	bl	80036b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2d      	ldr	r2, [pc, #180]	@ (8002b18 <HAL_TIM_PWM_Start+0x1bc>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00e      	beq.n	8002a84 <HAL_TIM_PWM_Start+0x128>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8002b1c <HAL_TIM_PWM_Start+0x1c0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d009      	beq.n	8002a84 <HAL_TIM_PWM_Start+0x128>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a2a      	ldr	r2, [pc, #168]	@ (8002b20 <HAL_TIM_PWM_Start+0x1c4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d004      	beq.n	8002a84 <HAL_TIM_PWM_Start+0x128>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a29      	ldr	r2, [pc, #164]	@ (8002b24 <HAL_TIM_PWM_Start+0x1c8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d101      	bne.n	8002a88 <HAL_TIM_PWM_Start+0x12c>
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <HAL_TIM_PWM_Start+0x12e>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d008      	beq.n	8002aa0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2180      	movs	r1, #128	@ 0x80
 8002a9a:	0209      	lsls	r1, r1, #8
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8002b18 <HAL_TIM_PWM_Start+0x1bc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00f      	beq.n	8002aca <HAL_TIM_PWM_Start+0x16e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	2380      	movs	r3, #128	@ 0x80
 8002ab0:	05db      	lsls	r3, r3, #23
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d009      	beq.n	8002aca <HAL_TIM_PWM_Start+0x16e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1b      	ldr	r2, [pc, #108]	@ (8002b28 <HAL_TIM_PWM_Start+0x1cc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d004      	beq.n	8002aca <HAL_TIM_PWM_Start+0x16e>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a15      	ldr	r2, [pc, #84]	@ (8002b1c <HAL_TIM_PWM_Start+0x1c0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d116      	bne.n	8002af8 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4a16      	ldr	r2, [pc, #88]	@ (8002b2c <HAL_TIM_PWM_Start+0x1d0>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b06      	cmp	r3, #6
 8002ada:	d016      	beq.n	8002b0a <HAL_TIM_PWM_Start+0x1ae>
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	2380      	movs	r3, #128	@ 0x80
 8002ae0:	025b      	lsls	r3, r3, #9
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d011      	beq.n	8002b0a <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2101      	movs	r1, #1
 8002af2:	430a      	orrs	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af6:	e008      	b.n	8002b0a <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2101      	movs	r1, #1
 8002b04:	430a      	orrs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	e000      	b.n	8002b0c <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0a:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	0018      	movs	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b004      	add	sp, #16
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	46c0      	nop			@ (mov r8, r8)
 8002b18:	40012c00 	.word	0x40012c00
 8002b1c:	40014000 	.word	0x40014000
 8002b20:	40014400 	.word	0x40014400
 8002b24:	40014800 	.word	0x40014800
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	00010007 	.word	0x00010007

08002b30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3c:	2317      	movs	r3, #23
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	223c      	movs	r2, #60	@ 0x3c
 8002b48:	5c9b      	ldrb	r3, [r3, r2]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e0e5      	b.n	8002d1e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	223c      	movs	r2, #60	@ 0x3c
 8002b56:	2101      	movs	r1, #1
 8002b58:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b14      	cmp	r3, #20
 8002b5e:	d900      	bls.n	8002b62 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002b60:	e0d1      	b.n	8002d06 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	009a      	lsls	r2, r3, #2
 8002b66:	4b70      	ldr	r3, [pc, #448]	@ (8002d28 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002b68:	18d3      	adds	r3, r2, r3
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	0011      	movs	r1, r2
 8002b76:	0018      	movs	r0, r3
 8002b78:	f000 fa3e 	bl	8002ff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2108      	movs	r1, #8
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2104      	movs	r1, #4
 8002b98:	438a      	bics	r2, r1
 8002b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6999      	ldr	r1, [r3, #24]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	619a      	str	r2, [r3, #24]
      break;
 8002bae:	e0af      	b.n	8002d10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	0011      	movs	r1, r2
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 faa7 	bl	800310c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699a      	ldr	r2, [r3, #24]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2180      	movs	r1, #128	@ 0x80
 8002bca:	0109      	lsls	r1, r1, #4
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4954      	ldr	r1, [pc, #336]	@ (8002d2c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002bdc:	400a      	ands	r2, r1
 8002bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6999      	ldr	r1, [r3, #24]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	021a      	lsls	r2, r3, #8
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	619a      	str	r2, [r3, #24]
      break;
 8002bf4:	e08c      	b.n	8002d10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	0011      	movs	r1, r2
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f000 fb08 	bl	8003214 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2108      	movs	r1, #8
 8002c10:	430a      	orrs	r2, r1
 8002c12:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69da      	ldr	r2, [r3, #28]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2104      	movs	r1, #4
 8002c20:	438a      	bics	r2, r1
 8002c22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69d9      	ldr	r1, [r3, #28]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	61da      	str	r2, [r3, #28]
      break;
 8002c36:	e06b      	b.n	8002d10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	0011      	movs	r1, r2
 8002c40:	0018      	movs	r0, r3
 8002c42:	f000 fb6f 	bl	8003324 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2180      	movs	r1, #128	@ 0x80
 8002c52:	0109      	lsls	r1, r1, #4
 8002c54:	430a      	orrs	r2, r1
 8002c56:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	69da      	ldr	r2, [r3, #28]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4932      	ldr	r1, [pc, #200]	@ (8002d2c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69d9      	ldr	r1, [r3, #28]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	021a      	lsls	r2, r3, #8
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	61da      	str	r2, [r3, #28]
      break;
 8002c7c:	e048      	b.n	8002d10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	0011      	movs	r1, r2
 8002c86:	0018      	movs	r0, r3
 8002c88:	f000 fbb6 	bl	80033f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2108      	movs	r1, #8
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2104      	movs	r1, #4
 8002ca8:	438a      	bics	r2, r1
 8002caa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002cbe:	e027      	b.n	8002d10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	0011      	movs	r1, r2
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f000 fbf5 	bl	80034b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2180      	movs	r1, #128	@ 0x80
 8002cda:	0109      	lsls	r1, r1, #4
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4910      	ldr	r1, [pc, #64]	@ (8002d2c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002cec:	400a      	ands	r2, r1
 8002cee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	021a      	lsls	r2, r3, #8
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d04:	e004      	b.n	8002d10 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002d06:	2317      	movs	r3, #23
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
      break;
 8002d0e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	223c      	movs	r2, #60	@ 0x3c
 8002d14:	2100      	movs	r1, #0
 8002d16:	5499      	strb	r1, [r3, r2]

  return status;
 8002d18:	2317      	movs	r3, #23
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	781b      	ldrb	r3, [r3, #0]
}
 8002d1e:	0018      	movs	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b006      	add	sp, #24
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	0800553c 	.word	0x0800553c
 8002d2c:	fffffbff 	.word	0xfffffbff

08002d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3a:	230f      	movs	r3, #15
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	2200      	movs	r2, #0
 8002d40:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	223c      	movs	r2, #60	@ 0x3c
 8002d46:	5c9b      	ldrb	r3, [r3, r2]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_TIM_ConfigClockSource+0x20>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e0bc      	b.n	8002eca <HAL_TIM_ConfigClockSource+0x19a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	223c      	movs	r2, #60	@ 0x3c
 8002d54:	2101      	movs	r1, #1
 8002d56:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	223d      	movs	r2, #61	@ 0x3d
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ed4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4a59      	ldr	r2, [pc, #356]	@ (8002ed8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2280      	movs	r2, #128	@ 0x80
 8002d86:	0192      	lsls	r2, r2, #6
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d040      	beq.n	8002e0e <HAL_TIM_ConfigClockSource+0xde>
 8002d8c:	2280      	movs	r2, #128	@ 0x80
 8002d8e:	0192      	lsls	r2, r2, #6
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d900      	bls.n	8002d96 <HAL_TIM_ConfigClockSource+0x66>
 8002d94:	e088      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x178>
 8002d96:	2280      	movs	r2, #128	@ 0x80
 8002d98:	0152      	lsls	r2, r2, #5
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d100      	bne.n	8002da0 <HAL_TIM_ConfigClockSource+0x70>
 8002d9e:	e088      	b.n	8002eb2 <HAL_TIM_ConfigClockSource+0x182>
 8002da0:	2280      	movs	r2, #128	@ 0x80
 8002da2:	0152      	lsls	r2, r2, #5
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d900      	bls.n	8002daa <HAL_TIM_ConfigClockSource+0x7a>
 8002da8:	e07e      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x178>
 8002daa:	2b70      	cmp	r3, #112	@ 0x70
 8002dac:	d018      	beq.n	8002de0 <HAL_TIM_ConfigClockSource+0xb0>
 8002dae:	d900      	bls.n	8002db2 <HAL_TIM_ConfigClockSource+0x82>
 8002db0:	e07a      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x178>
 8002db2:	2b60      	cmp	r3, #96	@ 0x60
 8002db4:	d04f      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0x126>
 8002db6:	d900      	bls.n	8002dba <HAL_TIM_ConfigClockSource+0x8a>
 8002db8:	e076      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x178>
 8002dba:	2b50      	cmp	r3, #80	@ 0x50
 8002dbc:	d03b      	beq.n	8002e36 <HAL_TIM_ConfigClockSource+0x106>
 8002dbe:	d900      	bls.n	8002dc2 <HAL_TIM_ConfigClockSource+0x92>
 8002dc0:	e072      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x178>
 8002dc2:	2b40      	cmp	r3, #64	@ 0x40
 8002dc4:	d057      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0x146>
 8002dc6:	d900      	bls.n	8002dca <HAL_TIM_ConfigClockSource+0x9a>
 8002dc8:	e06e      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x178>
 8002dca:	2b30      	cmp	r3, #48	@ 0x30
 8002dcc:	d063      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x166>
 8002dce:	d86b      	bhi.n	8002ea8 <HAL_TIM_ConfigClockSource+0x178>
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d060      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x166>
 8002dd4:	d868      	bhi.n	8002ea8 <HAL_TIM_ConfigClockSource+0x178>
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d05d      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x166>
 8002dda:	2b10      	cmp	r3, #16
 8002ddc:	d05b      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x166>
 8002dde:	e063      	b.n	8002ea8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002df0:	f000 fc42 	bl	8003678 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2277      	movs	r2, #119	@ 0x77
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	609a      	str	r2, [r3, #8]
      break;
 8002e0c:	e052      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e1e:	f000 fc2b 	bl	8003678 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2180      	movs	r1, #128	@ 0x80
 8002e2e:	01c9      	lsls	r1, r1, #7
 8002e30:	430a      	orrs	r2, r1
 8002e32:	609a      	str	r2, [r3, #8]
      break;
 8002e34:	e03e      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e42:	001a      	movs	r2, r3
 8002e44:	f000 fb9c 	bl	8003580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2150      	movs	r1, #80	@ 0x50
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f000 fbf6 	bl	8003640 <TIM_ITRx_SetConfig>
      break;
 8002e54:	e02e      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e62:	001a      	movs	r2, r3
 8002e64:	f000 fbba 	bl	80035dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2160      	movs	r1, #96	@ 0x60
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f000 fbe6 	bl	8003640 <TIM_ITRx_SetConfig>
      break;
 8002e74:	e01e      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e82:	001a      	movs	r2, r3
 8002e84:	f000 fb7c 	bl	8003580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2140      	movs	r1, #64	@ 0x40
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 fbd6 	bl	8003640 <TIM_ITRx_SetConfig>
      break;
 8002e94:	e00e      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	0010      	movs	r0, r2
 8002ea2:	f000 fbcd 	bl	8003640 <TIM_ITRx_SetConfig>
      break;
 8002ea6:	e005      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002ea8:	230f      	movs	r3, #15
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	2201      	movs	r2, #1
 8002eae:	701a      	strb	r2, [r3, #0]
      break;
 8002eb0:	e000      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002eb2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	223d      	movs	r2, #61	@ 0x3d
 8002eb8:	2101      	movs	r1, #1
 8002eba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	223c      	movs	r2, #60	@ 0x3c
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	5499      	strb	r1, [r3, r2]

  return status;
 8002ec4:	230f      	movs	r3, #15
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	781b      	ldrb	r3, [r3, #0]
}
 8002eca:	0018      	movs	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b004      	add	sp, #16
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			@ (mov r8, r8)
 8002ed4:	ffceff88 	.word	0xffceff88
 8002ed8:	ffff00ff 	.word	0xffff00ff

08002edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a3b      	ldr	r2, [pc, #236]	@ (8002fdc <TIM_Base_SetConfig+0x100>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d008      	beq.n	8002f06 <TIM_Base_SetConfig+0x2a>
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	2380      	movs	r3, #128	@ 0x80
 8002ef8:	05db      	lsls	r3, r3, #23
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d003      	beq.n	8002f06 <TIM_Base_SetConfig+0x2a>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a37      	ldr	r2, [pc, #220]	@ (8002fe0 <TIM_Base_SetConfig+0x104>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d108      	bne.n	8002f18 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2270      	movs	r2, #112	@ 0x70
 8002f0a:	4393      	bics	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a30      	ldr	r2, [pc, #192]	@ (8002fdc <TIM_Base_SetConfig+0x100>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d018      	beq.n	8002f52 <TIM_Base_SetConfig+0x76>
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	2380      	movs	r3, #128	@ 0x80
 8002f24:	05db      	lsls	r3, r3, #23
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d013      	beq.n	8002f52 <TIM_Base_SetConfig+0x76>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a2c      	ldr	r2, [pc, #176]	@ (8002fe0 <TIM_Base_SetConfig+0x104>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00f      	beq.n	8002f52 <TIM_Base_SetConfig+0x76>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a2b      	ldr	r2, [pc, #172]	@ (8002fe4 <TIM_Base_SetConfig+0x108>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00b      	beq.n	8002f52 <TIM_Base_SetConfig+0x76>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8002fe8 <TIM_Base_SetConfig+0x10c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d007      	beq.n	8002f52 <TIM_Base_SetConfig+0x76>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a29      	ldr	r2, [pc, #164]	@ (8002fec <TIM_Base_SetConfig+0x110>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d003      	beq.n	8002f52 <TIM_Base_SetConfig+0x76>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a28      	ldr	r2, [pc, #160]	@ (8002ff0 <TIM_Base_SetConfig+0x114>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d108      	bne.n	8002f64 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4a27      	ldr	r2, [pc, #156]	@ (8002ff4 <TIM_Base_SetConfig+0x118>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2280      	movs	r2, #128	@ 0x80
 8002f68:	4393      	bics	r3, r2
 8002f6a:	001a      	movs	r2, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a13      	ldr	r2, [pc, #76]	@ (8002fdc <TIM_Base_SetConfig+0x100>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00b      	beq.n	8002faa <TIM_Base_SetConfig+0xce>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a14      	ldr	r2, [pc, #80]	@ (8002fe8 <TIM_Base_SetConfig+0x10c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d007      	beq.n	8002faa <TIM_Base_SetConfig+0xce>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a13      	ldr	r2, [pc, #76]	@ (8002fec <TIM_Base_SetConfig+0x110>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d003      	beq.n	8002faa <TIM_Base_SetConfig+0xce>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a12      	ldr	r2, [pc, #72]	@ (8002ff0 <TIM_Base_SetConfig+0x114>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d103      	bne.n	8002fb2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d106      	bne.n	8002fd2 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	4393      	bics	r3, r2
 8002fcc:	001a      	movs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	611a      	str	r2, [r3, #16]
  }
}
 8002fd2:	46c0      	nop			@ (mov r8, r8)
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b004      	add	sp, #16
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	40012c00 	.word	0x40012c00
 8002fe0:	40000400 	.word	0x40000400
 8002fe4:	40002000 	.word	0x40002000
 8002fe8:	40014000 	.word	0x40014000
 8002fec:	40014400 	.word	0x40014400
 8002ff0:	40014800 	.word	0x40014800
 8002ff4:	fffffcff 	.word	0xfffffcff

08002ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	2201      	movs	r2, #1
 800300e:	4393      	bics	r3, r2
 8003010:	001a      	movs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	4a32      	ldr	r2, [pc, #200]	@ (80030f0 <TIM_OC1_SetConfig+0xf8>)
 8003026:	4013      	ands	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2203      	movs	r2, #3
 800302e:	4393      	bics	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4313      	orrs	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2202      	movs	r2, #2
 8003040:	4393      	bics	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a28      	ldr	r2, [pc, #160]	@ (80030f4 <TIM_OC1_SetConfig+0xfc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00b      	beq.n	800306e <TIM_OC1_SetConfig+0x76>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a27      	ldr	r2, [pc, #156]	@ (80030f8 <TIM_OC1_SetConfig+0x100>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d007      	beq.n	800306e <TIM_OC1_SetConfig+0x76>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a26      	ldr	r2, [pc, #152]	@ (80030fc <TIM_OC1_SetConfig+0x104>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d003      	beq.n	800306e <TIM_OC1_SetConfig+0x76>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a25      	ldr	r2, [pc, #148]	@ (8003100 <TIM_OC1_SetConfig+0x108>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d10c      	bne.n	8003088 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2208      	movs	r2, #8
 8003072:	4393      	bics	r3, r2
 8003074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2204      	movs	r2, #4
 8003084:	4393      	bics	r3, r2
 8003086:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a1a      	ldr	r2, [pc, #104]	@ (80030f4 <TIM_OC1_SetConfig+0xfc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d00b      	beq.n	80030a8 <TIM_OC1_SetConfig+0xb0>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a19      	ldr	r2, [pc, #100]	@ (80030f8 <TIM_OC1_SetConfig+0x100>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d007      	beq.n	80030a8 <TIM_OC1_SetConfig+0xb0>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a18      	ldr	r2, [pc, #96]	@ (80030fc <TIM_OC1_SetConfig+0x104>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d003      	beq.n	80030a8 <TIM_OC1_SetConfig+0xb0>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a17      	ldr	r2, [pc, #92]	@ (8003100 <TIM_OC1_SetConfig+0x108>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d111      	bne.n	80030cc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4a16      	ldr	r2, [pc, #88]	@ (8003104 <TIM_OC1_SetConfig+0x10c>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4a15      	ldr	r2, [pc, #84]	@ (8003108 <TIM_OC1_SetConfig+0x110>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	621a      	str	r2, [r3, #32]
}
 80030e6:	46c0      	nop			@ (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b006      	add	sp, #24
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			@ (mov r8, r8)
 80030f0:	fffeff8f 	.word	0xfffeff8f
 80030f4:	40012c00 	.word	0x40012c00
 80030f8:	40014000 	.word	0x40014000
 80030fc:	40014400 	.word	0x40014400
 8003100:	40014800 	.word	0x40014800
 8003104:	fffffeff 	.word	0xfffffeff
 8003108:	fffffdff 	.word	0xfffffdff

0800310c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	2210      	movs	r2, #16
 8003122:	4393      	bics	r3, r2
 8003124:	001a      	movs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	4a2e      	ldr	r2, [pc, #184]	@ (80031f4 <TIM_OC2_SetConfig+0xe8>)
 800313a:	4013      	ands	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4a2d      	ldr	r2, [pc, #180]	@ (80031f8 <TIM_OC2_SetConfig+0xec>)
 8003142:	4013      	ands	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2220      	movs	r2, #32
 8003156:	4393      	bics	r3, r2
 8003158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a24      	ldr	r2, [pc, #144]	@ (80031fc <TIM_OC2_SetConfig+0xf0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d10d      	bne.n	800318a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2280      	movs	r2, #128	@ 0x80
 8003172:	4393      	bics	r3, r2
 8003174:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	011b      	lsls	r3, r3, #4
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2240      	movs	r2, #64	@ 0x40
 8003186:	4393      	bics	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1b      	ldr	r2, [pc, #108]	@ (80031fc <TIM_OC2_SetConfig+0xf0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d00b      	beq.n	80031aa <TIM_OC2_SetConfig+0x9e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a1a      	ldr	r2, [pc, #104]	@ (8003200 <TIM_OC2_SetConfig+0xf4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d007      	beq.n	80031aa <TIM_OC2_SetConfig+0x9e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a19      	ldr	r2, [pc, #100]	@ (8003204 <TIM_OC2_SetConfig+0xf8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d003      	beq.n	80031aa <TIM_OC2_SetConfig+0x9e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a18      	ldr	r2, [pc, #96]	@ (8003208 <TIM_OC2_SetConfig+0xfc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d113      	bne.n	80031d2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4a17      	ldr	r2, [pc, #92]	@ (800320c <TIM_OC2_SetConfig+0x100>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4a16      	ldr	r2, [pc, #88]	@ (8003210 <TIM_OC2_SetConfig+0x104>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	621a      	str	r2, [r3, #32]
}
 80031ec:	46c0      	nop			@ (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b006      	add	sp, #24
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	feff8fff 	.word	0xfeff8fff
 80031f8:	fffffcff 	.word	0xfffffcff
 80031fc:	40012c00 	.word	0x40012c00
 8003200:	40014000 	.word	0x40014000
 8003204:	40014400 	.word	0x40014400
 8003208:	40014800 	.word	0x40014800
 800320c:	fffffbff 	.word	0xfffffbff
 8003210:	fffff7ff 	.word	0xfffff7ff

08003214 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	4a33      	ldr	r2, [pc, #204]	@ (80032f8 <TIM_OC3_SetConfig+0xe4>)
 800322a:	401a      	ands	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4a2f      	ldr	r2, [pc, #188]	@ (80032fc <TIM_OC3_SetConfig+0xe8>)
 8003240:	4013      	ands	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2203      	movs	r2, #3
 8003248:	4393      	bics	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	4a29      	ldr	r2, [pc, #164]	@ (8003300 <TIM_OC3_SetConfig+0xec>)
 800325a:	4013      	ands	r3, r2
 800325c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	021b      	lsls	r3, r3, #8
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	4313      	orrs	r3, r2
 8003268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a25      	ldr	r2, [pc, #148]	@ (8003304 <TIM_OC3_SetConfig+0xf0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d10d      	bne.n	800328e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	4a24      	ldr	r2, [pc, #144]	@ (8003308 <TIM_OC3_SetConfig+0xf4>)
 8003276:	4013      	ands	r3, r2
 8003278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4313      	orrs	r3, r2
 8003284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	4a20      	ldr	r2, [pc, #128]	@ (800330c <TIM_OC3_SetConfig+0xf8>)
 800328a:	4013      	ands	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a1c      	ldr	r2, [pc, #112]	@ (8003304 <TIM_OC3_SetConfig+0xf0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d00b      	beq.n	80032ae <TIM_OC3_SetConfig+0x9a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a1d      	ldr	r2, [pc, #116]	@ (8003310 <TIM_OC3_SetConfig+0xfc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d007      	beq.n	80032ae <TIM_OC3_SetConfig+0x9a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003314 <TIM_OC3_SetConfig+0x100>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d003      	beq.n	80032ae <TIM_OC3_SetConfig+0x9a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003318 <TIM_OC3_SetConfig+0x104>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d113      	bne.n	80032d6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4a1a      	ldr	r2, [pc, #104]	@ (800331c <TIM_OC3_SetConfig+0x108>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4a19      	ldr	r2, [pc, #100]	@ (8003320 <TIM_OC3_SetConfig+0x10c>)
 80032ba:	4013      	ands	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	621a      	str	r2, [r3, #32]
}
 80032f0:	46c0      	nop			@ (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b006      	add	sp, #24
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	fffffeff 	.word	0xfffffeff
 80032fc:	fffeff8f 	.word	0xfffeff8f
 8003300:	fffffdff 	.word	0xfffffdff
 8003304:	40012c00 	.word	0x40012c00
 8003308:	fffff7ff 	.word	0xfffff7ff
 800330c:	fffffbff 	.word	0xfffffbff
 8003310:	40014000 	.word	0x40014000
 8003314:	40014400 	.word	0x40014400
 8003318:	40014800 	.word	0x40014800
 800331c:	ffffefff 	.word	0xffffefff
 8003320:	ffffdfff 	.word	0xffffdfff

08003324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	4a26      	ldr	r2, [pc, #152]	@ (80033d4 <TIM_OC4_SetConfig+0xb0>)
 800333a:	401a      	ands	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4a22      	ldr	r2, [pc, #136]	@ (80033d8 <TIM_OC4_SetConfig+0xb4>)
 8003350:	4013      	ands	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4a21      	ldr	r2, [pc, #132]	@ (80033dc <TIM_OC4_SetConfig+0xb8>)
 8003358:	4013      	ands	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4313      	orrs	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4a1d      	ldr	r2, [pc, #116]	@ (80033e0 <TIM_OC4_SetConfig+0xbc>)
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	031b      	lsls	r3, r3, #12
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a19      	ldr	r2, [pc, #100]	@ (80033e4 <TIM_OC4_SetConfig+0xc0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00b      	beq.n	800339c <TIM_OC4_SetConfig+0x78>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a18      	ldr	r2, [pc, #96]	@ (80033e8 <TIM_OC4_SetConfig+0xc4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d007      	beq.n	800339c <TIM_OC4_SetConfig+0x78>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a17      	ldr	r2, [pc, #92]	@ (80033ec <TIM_OC4_SetConfig+0xc8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_OC4_SetConfig+0x78>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a16      	ldr	r2, [pc, #88]	@ (80033f0 <TIM_OC4_SetConfig+0xcc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d109      	bne.n	80033b0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	4a15      	ldr	r2, [pc, #84]	@ (80033f4 <TIM_OC4_SetConfig+0xd0>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	019b      	lsls	r3, r3, #6
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	621a      	str	r2, [r3, #32]
}
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b006      	add	sp, #24
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	ffffefff 	.word	0xffffefff
 80033d8:	feff8fff 	.word	0xfeff8fff
 80033dc:	fffffcff 	.word	0xfffffcff
 80033e0:	ffffdfff 	.word	0xffffdfff
 80033e4:	40012c00 	.word	0x40012c00
 80033e8:	40014000 	.word	0x40014000
 80033ec:	40014400 	.word	0x40014400
 80033f0:	40014800 	.word	0x40014800
 80033f4:	ffffbfff 	.word	0xffffbfff

080033f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4a23      	ldr	r2, [pc, #140]	@ (800349c <TIM_OC5_SetConfig+0xa4>)
 800340e:	401a      	ands	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a1f      	ldr	r2, [pc, #124]	@ (80034a0 <TIM_OC5_SetConfig+0xa8>)
 8003424:	4013      	ands	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4a1b      	ldr	r2, [pc, #108]	@ (80034a4 <TIM_OC5_SetConfig+0xac>)
 8003436:	4013      	ands	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	041b      	lsls	r3, r3, #16
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4313      	orrs	r3, r2
 8003444:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a17      	ldr	r2, [pc, #92]	@ (80034a8 <TIM_OC5_SetConfig+0xb0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00b      	beq.n	8003466 <TIM_OC5_SetConfig+0x6e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a16      	ldr	r2, [pc, #88]	@ (80034ac <TIM_OC5_SetConfig+0xb4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d007      	beq.n	8003466 <TIM_OC5_SetConfig+0x6e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a15      	ldr	r2, [pc, #84]	@ (80034b0 <TIM_OC5_SetConfig+0xb8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d003      	beq.n	8003466 <TIM_OC5_SetConfig+0x6e>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a14      	ldr	r2, [pc, #80]	@ (80034b4 <TIM_OC5_SetConfig+0xbc>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d109      	bne.n	800347a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	4a0c      	ldr	r2, [pc, #48]	@ (800349c <TIM_OC5_SetConfig+0xa4>)
 800346a:	4013      	ands	r3, r2
 800346c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	021b      	lsls	r3, r3, #8
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	621a      	str	r2, [r3, #32]
}
 8003494:	46c0      	nop			@ (mov r8, r8)
 8003496:	46bd      	mov	sp, r7
 8003498:	b006      	add	sp, #24
 800349a:	bd80      	pop	{r7, pc}
 800349c:	fffeffff 	.word	0xfffeffff
 80034a0:	fffeff8f 	.word	0xfffeff8f
 80034a4:	fffdffff 	.word	0xfffdffff
 80034a8:	40012c00 	.word	0x40012c00
 80034ac:	40014000 	.word	0x40014000
 80034b0:	40014400 	.word	0x40014400
 80034b4:	40014800 	.word	0x40014800

080034b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4a24      	ldr	r2, [pc, #144]	@ (8003560 <TIM_OC6_SetConfig+0xa8>)
 80034ce:	401a      	ands	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a20      	ldr	r2, [pc, #128]	@ (8003564 <TIM_OC6_SetConfig+0xac>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003568 <TIM_OC6_SetConfig+0xb0>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	051b      	lsls	r3, r3, #20
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a18      	ldr	r2, [pc, #96]	@ (800356c <TIM_OC6_SetConfig+0xb4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00b      	beq.n	8003528 <TIM_OC6_SetConfig+0x70>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a17      	ldr	r2, [pc, #92]	@ (8003570 <TIM_OC6_SetConfig+0xb8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d007      	beq.n	8003528 <TIM_OC6_SetConfig+0x70>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a16      	ldr	r2, [pc, #88]	@ (8003574 <TIM_OC6_SetConfig+0xbc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d003      	beq.n	8003528 <TIM_OC6_SetConfig+0x70>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a15      	ldr	r2, [pc, #84]	@ (8003578 <TIM_OC6_SetConfig+0xc0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d109      	bne.n	800353c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	4a14      	ldr	r2, [pc, #80]	@ (800357c <TIM_OC6_SetConfig+0xc4>)
 800352c:	4013      	ands	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	029b      	lsls	r3, r3, #10
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	621a      	str	r2, [r3, #32]
}
 8003556:	46c0      	nop			@ (mov r8, r8)
 8003558:	46bd      	mov	sp, r7
 800355a:	b006      	add	sp, #24
 800355c:	bd80      	pop	{r7, pc}
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	ffefffff 	.word	0xffefffff
 8003564:	feff8fff 	.word	0xfeff8fff
 8003568:	ffdfffff 	.word	0xffdfffff
 800356c:	40012c00 	.word	0x40012c00
 8003570:	40014000 	.word	0x40014000
 8003574:	40014400 	.word	0x40014400
 8003578:	40014800 	.word	0x40014800
 800357c:	fffbffff 	.word	0xfffbffff

08003580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	2201      	movs	r2, #1
 8003598:	4393      	bics	r3, r2
 800359a:	001a      	movs	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	22f0      	movs	r2, #240	@ 0xf0
 80035aa:	4393      	bics	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	220a      	movs	r2, #10
 80035bc:	4393      	bics	r3, r2
 80035be:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	621a      	str	r2, [r3, #32]
}
 80035d4:	46c0      	nop			@ (mov r8, r8)
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b006      	add	sp, #24
 80035da:	bd80      	pop	{r7, pc}

080035dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	2210      	movs	r2, #16
 80035f4:	4393      	bics	r3, r2
 80035f6:	001a      	movs	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4a0d      	ldr	r2, [pc, #52]	@ (800363c <TIM_TI2_ConfigInputStage+0x60>)
 8003606:	4013      	ands	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	031b      	lsls	r3, r3, #12
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	22a0      	movs	r2, #160	@ 0xa0
 8003618:	4393      	bics	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	621a      	str	r2, [r3, #32]
}
 8003632:	46c0      	nop			@ (mov r8, r8)
 8003634:	46bd      	mov	sp, r7
 8003636:	b006      	add	sp, #24
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			@ (mov r8, r8)
 800363c:	ffff0fff 	.word	0xffff0fff

08003640 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4a08      	ldr	r2, [pc, #32]	@ (8003674 <TIM_ITRx_SetConfig+0x34>)
 8003654:	4013      	ands	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	2207      	movs	r2, #7
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	609a      	str	r2, [r3, #8]
}
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	46bd      	mov	sp, r7
 800366e:	b004      	add	sp, #16
 8003670:	bd80      	pop	{r7, pc}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	ffcfff8f 	.word	0xffcfff8f

08003678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	4a09      	ldr	r2, [pc, #36]	@ (80036b4 <TIM_ETR_SetConfig+0x3c>)
 8003690:	4013      	ands	r3, r2
 8003692:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	021a      	lsls	r2, r3, #8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	431a      	orrs	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4313      	orrs	r3, r2
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	609a      	str	r2, [r3, #8]
}
 80036ac:	46c0      	nop			@ (mov r8, r8)
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b006      	add	sp, #24
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	ffff00ff 	.word	0xffff00ff

080036b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	221f      	movs	r2, #31
 80036c8:	4013      	ands	r3, r2
 80036ca:	2201      	movs	r2, #1
 80036cc:	409a      	lsls	r2, r3
 80036ce:	0013      	movs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	43d2      	mvns	r2, r2
 80036da:	401a      	ands	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a1a      	ldr	r2, [r3, #32]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	211f      	movs	r1, #31
 80036e8:	400b      	ands	r3, r1
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4099      	lsls	r1, r3
 80036ee:	000b      	movs	r3, r1
 80036f0:	431a      	orrs	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	621a      	str	r2, [r3, #32]
}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b006      	add	sp, #24
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	223c      	movs	r2, #60	@ 0x3c
 800370e:	5c9b      	ldrb	r3, [r3, r2]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003714:	2302      	movs	r3, #2
 8003716:	e055      	b.n	80037c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	223c      	movs	r2, #60	@ 0x3c
 800371c:	2101      	movs	r1, #1
 800371e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	223d      	movs	r2, #61	@ 0x3d
 8003724:	2102      	movs	r1, #2
 8003726:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a23      	ldr	r2, [pc, #140]	@ (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d108      	bne.n	8003754 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4a22      	ldr	r2, [pc, #136]	@ (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003746:	4013      	ands	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2270      	movs	r2, #112	@ 0x70
 8003758:	4393      	bics	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a16      	ldr	r2, [pc, #88]	@ (80037cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d00f      	beq.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	2380      	movs	r3, #128	@ 0x80
 800377e:	05db      	lsls	r3, r3, #23
 8003780:	429a      	cmp	r2, r3
 8003782:	d009      	beq.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a12      	ldr	r2, [pc, #72]	@ (80037d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d004      	beq.n	8003798 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a11      	ldr	r2, [pc, #68]	@ (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d10c      	bne.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2280      	movs	r2, #128	@ 0x80
 800379c:	4393      	bics	r3, r2
 800379e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	223d      	movs	r2, #61	@ 0x3d
 80037b6:	2101      	movs	r1, #1
 80037b8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	223c      	movs	r2, #60	@ 0x3c
 80037be:	2100      	movs	r1, #0
 80037c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	0018      	movs	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b004      	add	sp, #16
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40012c00 	.word	0x40012c00
 80037d0:	ff0fffff 	.word	0xff0fffff
 80037d4:	40000400 	.word	0x40000400
 80037d8:	40014000 	.word	0x40014000

080037dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	223c      	movs	r2, #60	@ 0x3c
 80037ee:	5c9b      	ldrb	r3, [r3, r2]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d101      	bne.n	80037f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037f4:	2302      	movs	r3, #2
 80037f6:	e06f      	b.n	80038d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	223c      	movs	r2, #60	@ 0x3c
 80037fc:	2101      	movs	r1, #1
 80037fe:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	22ff      	movs	r2, #255	@ 0xff
 8003804:	4393      	bics	r3, r2
 8003806:	001a      	movs	r2, r3
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4313      	orrs	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a33      	ldr	r2, [pc, #204]	@ (80038e0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003814:	401a      	ands	r2, r3
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	4313      	orrs	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	4a30      	ldr	r2, [pc, #192]	@ (80038e4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003822:	401a      	ands	r2, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	4313      	orrs	r3, r2
 800382a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4a2e      	ldr	r2, [pc, #184]	@ (80038e8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003830:	401a      	ands	r2, r3
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4a2b      	ldr	r2, [pc, #172]	@ (80038ec <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800383e:	401a      	ands	r2, r3
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a29      	ldr	r2, [pc, #164]	@ (80038f0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800384c:	401a      	ands	r2, r3
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a26      	ldr	r2, [pc, #152]	@ (80038f4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800385a:	401a      	ands	r2, r3
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003860:	4313      	orrs	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4a24      	ldr	r2, [pc, #144]	@ (80038f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003868:	401a      	ands	r2, r3
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4a21      	ldr	r2, [pc, #132]	@ (80038fc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003878:	401a      	ands	r2, r3
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1e      	ldr	r2, [pc, #120]	@ (8003900 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d11c      	bne.n	80038c6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4a1d      	ldr	r2, [pc, #116]	@ (8003904 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003890:	401a      	ands	r2, r3
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003896:	051b      	lsls	r3, r3, #20
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4a1a      	ldr	r2, [pc, #104]	@ (8003908 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80038a0:	401a      	ands	r2, r3
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	4a17      	ldr	r2, [pc, #92]	@ (800390c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80038ae:	401a      	ands	r2, r3
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4a15      	ldr	r2, [pc, #84]	@ (8003910 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80038bc:	401a      	ands	r2, r3
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	223c      	movs	r2, #60	@ 0x3c
 80038d2:	2100      	movs	r1, #0
 80038d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	0018      	movs	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	b004      	add	sp, #16
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	fffffcff 	.word	0xfffffcff
 80038e4:	fffffbff 	.word	0xfffffbff
 80038e8:	fffff7ff 	.word	0xfffff7ff
 80038ec:	ffffefff 	.word	0xffffefff
 80038f0:	ffffdfff 	.word	0xffffdfff
 80038f4:	ffffbfff 	.word	0xffffbfff
 80038f8:	fff0ffff 	.word	0xfff0ffff
 80038fc:	efffffff 	.word	0xefffffff
 8003900:	40012c00 	.word	0x40012c00
 8003904:	ff0fffff 	.word	0xff0fffff
 8003908:	feffffff 	.word	0xfeffffff
 800390c:	fdffffff 	.word	0xfdffffff
 8003910:	dfffffff 	.word	0xdfffffff

08003914 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e046      	b.n	80039b4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2288      	movs	r2, #136	@ 0x88
 800392a:	589b      	ldr	r3, [r3, r2]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d107      	bne.n	8003940 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2284      	movs	r2, #132	@ 0x84
 8003934:	2100      	movs	r1, #0
 8003936:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	0018      	movs	r0, r3
 800393c:	f7fd fcda 	bl	80012f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2288      	movs	r2, #136	@ 0x88
 8003944:	2124      	movs	r1, #36	@ 0x24
 8003946:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2101      	movs	r1, #1
 8003954:	438a      	bics	r2, r1
 8003956:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	0018      	movs	r0, r3
 8003964:	f000 fc00 	bl	8004168 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	0018      	movs	r0, r3
 800396c:	f000 f93e 	bl	8003bec <UART_SetConfig>
 8003970:	0003      	movs	r3, r0
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e01c      	b.n	80039b4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	490d      	ldr	r1, [pc, #52]	@ (80039bc <HAL_UART_Init+0xa8>)
 8003986:	400a      	ands	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	212a      	movs	r1, #42	@ 0x2a
 8003996:	438a      	bics	r2, r1
 8003998:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2101      	movs	r1, #1
 80039a6:	430a      	orrs	r2, r1
 80039a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	0018      	movs	r0, r3
 80039ae:	f000 fc8f 	bl	80042d0 <UART_CheckIdleState>
 80039b2:	0003      	movs	r3, r0
}
 80039b4:	0018      	movs	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b002      	add	sp, #8
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	ffffb7ff 	.word	0xffffb7ff

080039c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	@ 0x28
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	1dbb      	adds	r3, r7, #6
 80039ce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2288      	movs	r2, #136	@ 0x88
 80039d4:	589b      	ldr	r3, [r3, r2]
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d000      	beq.n	80039dc <HAL_UART_Transmit+0x1c>
 80039da:	e090      	b.n	8003afe <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_UART_Transmit+0x2a>
 80039e2:	1dbb      	adds	r3, r7, #6
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e088      	b.n	8003b00 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	2380      	movs	r3, #128	@ 0x80
 80039f4:	015b      	lsls	r3, r3, #5
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d109      	bne.n	8003a0e <HAL_UART_Transmit+0x4e>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d105      	bne.n	8003a0e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2201      	movs	r2, #1
 8003a06:	4013      	ands	r3, r2
 8003a08:	d001      	beq.n	8003a0e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e078      	b.n	8003b00 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2290      	movs	r2, #144	@ 0x90
 8003a12:	2100      	movs	r1, #0
 8003a14:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2288      	movs	r2, #136	@ 0x88
 8003a1a:	2121      	movs	r1, #33	@ 0x21
 8003a1c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a1e:	f7fd fdd7 	bl	80015d0 <HAL_GetTick>
 8003a22:	0003      	movs	r3, r0
 8003a24:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1dba      	adds	r2, r7, #6
 8003a2a:	2154      	movs	r1, #84	@ 0x54
 8003a2c:	8812      	ldrh	r2, [r2, #0]
 8003a2e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	1dba      	adds	r2, r7, #6
 8003a34:	2156      	movs	r1, #86	@ 0x56
 8003a36:	8812      	ldrh	r2, [r2, #0]
 8003a38:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	2380      	movs	r3, #128	@ 0x80
 8003a40:	015b      	lsls	r3, r3, #5
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d108      	bne.n	8003a58 <HAL_UART_Transmit+0x98>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d104      	bne.n	8003a58 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	61bb      	str	r3, [r7, #24]
 8003a56:	e003      	b.n	8003a60 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a60:	e030      	b.n	8003ac4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	0013      	movs	r3, r2
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2180      	movs	r1, #128	@ 0x80
 8003a70:	f000 fcd8 	bl	8004424 <UART_WaitOnFlagUntilTimeout>
 8003a74:	1e03      	subs	r3, r0, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2288      	movs	r2, #136	@ 0x88
 8003a7c:	2120      	movs	r1, #32
 8003a7e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e03d      	b.n	8003b00 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10b      	bne.n	8003aa2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	001a      	movs	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	05d2      	lsls	r2, r2, #23
 8003a96:	0dd2      	lsrs	r2, r2, #23
 8003a98:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	61bb      	str	r3, [r7, #24]
 8003aa0:	e007      	b.n	8003ab2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	781a      	ldrb	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2256      	movs	r2, #86	@ 0x56
 8003ab6:	5a9b      	ldrh	r3, [r3, r2]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b299      	uxth	r1, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2256      	movs	r2, #86	@ 0x56
 8003ac2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2256      	movs	r2, #86	@ 0x56
 8003ac8:	5a9b      	ldrh	r3, [r3, r2]
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1c8      	bne.n	8003a62 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	0013      	movs	r3, r2
 8003ada:	2200      	movs	r2, #0
 8003adc:	2140      	movs	r1, #64	@ 0x40
 8003ade:	f000 fca1 	bl	8004424 <UART_WaitOnFlagUntilTimeout>
 8003ae2:	1e03      	subs	r3, r0, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2288      	movs	r2, #136	@ 0x88
 8003aea:	2120      	movs	r1, #32
 8003aec:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e006      	b.n	8003b00 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2288      	movs	r2, #136	@ 0x88
 8003af6:	2120      	movs	r1, #32
 8003af8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	e000      	b.n	8003b00 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003afe:	2302      	movs	r3, #2
  }
}
 8003b00:	0018      	movs	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b008      	add	sp, #32
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	1dbb      	adds	r3, r7, #6
 8003b14:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	228c      	movs	r2, #140	@ 0x8c
 8003b1a:	589b      	ldr	r3, [r3, r2]
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d14a      	bne.n	8003bb6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_UART_Receive_IT+0x26>
 8003b26:	1dbb      	adds	r3, r7, #6
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e042      	b.n	8003bb8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	2380      	movs	r3, #128	@ 0x80
 8003b38:	015b      	lsls	r3, r3, #5
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d109      	bne.n	8003b52 <HAL_UART_Receive_IT+0x4a>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d105      	bne.n	8003b52 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d001      	beq.n	8003b52 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e032      	b.n	8003bb8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a18      	ldr	r2, [pc, #96]	@ (8003bc0 <HAL_UART_Receive_IT+0xb8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d020      	beq.n	8003ba4 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	2380      	movs	r3, #128	@ 0x80
 8003b6a:	041b      	lsls	r3, r3, #16
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d019      	beq.n	8003ba4 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b70:	f3ef 8310 	mrs	r3, PRIMASK
 8003b74:	613b      	str	r3, [r7, #16]
  return(result);
 8003b76:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b78:	61fb      	str	r3, [r7, #28]
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f383 8810 	msr	PRIMASK, r3
}
 8003b84:	46c0      	nop			@ (mov r8, r8)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2180      	movs	r1, #128	@ 0x80
 8003b92:	04c9      	lsls	r1, r1, #19
 8003b94:	430a      	orrs	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ba2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ba4:	1dbb      	adds	r3, r7, #6
 8003ba6:	881a      	ldrh	r2, [r3, #0]
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 fca9 	bl	8004504 <UART_Start_Receive_IT>
 8003bb2:	0003      	movs	r3, r0
 8003bb4:	e000      	b.n	8003bb8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	0018      	movs	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b008      	add	sp, #32
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40008000 	.word	0x40008000

08003bc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003bcc:	46c0      	nop			@ (mov r8, r8)
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	000a      	movs	r2, r1
 8003bde:	1cbb      	adds	r3, r7, #2
 8003be0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003be2:	46c0      	nop			@ (mov r8, r8)
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b002      	add	sp, #8
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bec:	b5b0      	push	{r4, r5, r7, lr}
 8003bee:	b090      	sub	sp, #64	@ 0x40
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bf4:	231a      	movs	r3, #26
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	189b      	adds	r3, r3, r2
 8003bfa:	19db      	adds	r3, r3, r7
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4aaf      	ldr	r2, [pc, #700]	@ (8003edc <UART_SetConfig+0x2f0>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	0019      	movs	r1, r3
 8003c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4aaa      	ldr	r2, [pc, #680]	@ (8003ee0 <UART_SetConfig+0x2f4>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	0018      	movs	r0, r3
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	68d9      	ldr	r1, [r3, #12]
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	0003      	movs	r3, r0
 8003c44:	430b      	orrs	r3, r1
 8003c46:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4aa4      	ldr	r2, [pc, #656]	@ (8003ee4 <UART_SetConfig+0x2f8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a9f      	ldr	r2, [pc, #636]	@ (8003ee8 <UART_SetConfig+0x2fc>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c74:	430b      	orrs	r3, r1
 8003c76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7e:	220f      	movs	r2, #15
 8003c80:	4393      	bics	r3, r2
 8003c82:	0018      	movs	r0, r3
 8003c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c86:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	430b      	orrs	r3, r1
 8003c90:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a95      	ldr	r2, [pc, #596]	@ (8003eec <UART_SetConfig+0x300>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d131      	bne.n	8003d00 <UART_SetConfig+0x114>
 8003c9c:	4b94      	ldr	r3, [pc, #592]	@ (8003ef0 <UART_SetConfig+0x304>)
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d01d      	beq.n	8003ce4 <UART_SetConfig+0xf8>
 8003ca8:	d823      	bhi.n	8003cf2 <UART_SetConfig+0x106>
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d00c      	beq.n	8003cc8 <UART_SetConfig+0xdc>
 8003cae:	d820      	bhi.n	8003cf2 <UART_SetConfig+0x106>
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <UART_SetConfig+0xce>
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d00e      	beq.n	8003cd6 <UART_SetConfig+0xea>
 8003cb8:	e01b      	b.n	8003cf2 <UART_SetConfig+0x106>
 8003cba:	231b      	movs	r3, #27
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	189b      	adds	r3, r3, r2
 8003cc0:	19db      	adds	r3, r3, r7
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	701a      	strb	r2, [r3, #0]
 8003cc6:	e0b4      	b.n	8003e32 <UART_SetConfig+0x246>
 8003cc8:	231b      	movs	r3, #27
 8003cca:	2220      	movs	r2, #32
 8003ccc:	189b      	adds	r3, r3, r2
 8003cce:	19db      	adds	r3, r3, r7
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	e0ad      	b.n	8003e32 <UART_SetConfig+0x246>
 8003cd6:	231b      	movs	r3, #27
 8003cd8:	2220      	movs	r2, #32
 8003cda:	189b      	adds	r3, r3, r2
 8003cdc:	19db      	adds	r3, r3, r7
 8003cde:	2204      	movs	r2, #4
 8003ce0:	701a      	strb	r2, [r3, #0]
 8003ce2:	e0a6      	b.n	8003e32 <UART_SetConfig+0x246>
 8003ce4:	231b      	movs	r3, #27
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	189b      	adds	r3, r3, r2
 8003cea:	19db      	adds	r3, r3, r7
 8003cec:	2208      	movs	r2, #8
 8003cee:	701a      	strb	r2, [r3, #0]
 8003cf0:	e09f      	b.n	8003e32 <UART_SetConfig+0x246>
 8003cf2:	231b      	movs	r3, #27
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	189b      	adds	r3, r3, r2
 8003cf8:	19db      	adds	r3, r3, r7
 8003cfa:	2210      	movs	r2, #16
 8003cfc:	701a      	strb	r2, [r3, #0]
 8003cfe:	e098      	b.n	8003e32 <UART_SetConfig+0x246>
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a7b      	ldr	r2, [pc, #492]	@ (8003ef4 <UART_SetConfig+0x308>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d131      	bne.n	8003d6e <UART_SetConfig+0x182>
 8003d0a:	4b79      	ldr	r3, [pc, #484]	@ (8003ef0 <UART_SetConfig+0x304>)
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d0e:	220c      	movs	r2, #12
 8003d10:	4013      	ands	r3, r2
 8003d12:	2b0c      	cmp	r3, #12
 8003d14:	d01d      	beq.n	8003d52 <UART_SetConfig+0x166>
 8003d16:	d823      	bhi.n	8003d60 <UART_SetConfig+0x174>
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d00c      	beq.n	8003d36 <UART_SetConfig+0x14a>
 8003d1c:	d820      	bhi.n	8003d60 <UART_SetConfig+0x174>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <UART_SetConfig+0x13c>
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d00e      	beq.n	8003d44 <UART_SetConfig+0x158>
 8003d26:	e01b      	b.n	8003d60 <UART_SetConfig+0x174>
 8003d28:	231b      	movs	r3, #27
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	189b      	adds	r3, r3, r2
 8003d2e:	19db      	adds	r3, r3, r7
 8003d30:	2200      	movs	r2, #0
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	e07d      	b.n	8003e32 <UART_SetConfig+0x246>
 8003d36:	231b      	movs	r3, #27
 8003d38:	2220      	movs	r2, #32
 8003d3a:	189b      	adds	r3, r3, r2
 8003d3c:	19db      	adds	r3, r3, r7
 8003d3e:	2202      	movs	r2, #2
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	e076      	b.n	8003e32 <UART_SetConfig+0x246>
 8003d44:	231b      	movs	r3, #27
 8003d46:	2220      	movs	r2, #32
 8003d48:	189b      	adds	r3, r3, r2
 8003d4a:	19db      	adds	r3, r3, r7
 8003d4c:	2204      	movs	r2, #4
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	e06f      	b.n	8003e32 <UART_SetConfig+0x246>
 8003d52:	231b      	movs	r3, #27
 8003d54:	2220      	movs	r2, #32
 8003d56:	189b      	adds	r3, r3, r2
 8003d58:	19db      	adds	r3, r3, r7
 8003d5a:	2208      	movs	r2, #8
 8003d5c:	701a      	strb	r2, [r3, #0]
 8003d5e:	e068      	b.n	8003e32 <UART_SetConfig+0x246>
 8003d60:	231b      	movs	r3, #27
 8003d62:	2220      	movs	r2, #32
 8003d64:	189b      	adds	r3, r3, r2
 8003d66:	19db      	adds	r3, r3, r7
 8003d68:	2210      	movs	r2, #16
 8003d6a:	701a      	strb	r2, [r3, #0]
 8003d6c:	e061      	b.n	8003e32 <UART_SetConfig+0x246>
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a61      	ldr	r2, [pc, #388]	@ (8003ef8 <UART_SetConfig+0x30c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d106      	bne.n	8003d86 <UART_SetConfig+0x19a>
 8003d78:	231b      	movs	r3, #27
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	189b      	adds	r3, r3, r2
 8003d7e:	19db      	adds	r3, r3, r7
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]
 8003d84:	e055      	b.n	8003e32 <UART_SetConfig+0x246>
 8003d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a5c      	ldr	r2, [pc, #368]	@ (8003efc <UART_SetConfig+0x310>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d106      	bne.n	8003d9e <UART_SetConfig+0x1b2>
 8003d90:	231b      	movs	r3, #27
 8003d92:	2220      	movs	r2, #32
 8003d94:	189b      	adds	r3, r3, r2
 8003d96:	19db      	adds	r3, r3, r7
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e049      	b.n	8003e32 <UART_SetConfig+0x246>
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a50      	ldr	r2, [pc, #320]	@ (8003ee4 <UART_SetConfig+0x2f8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d13e      	bne.n	8003e26 <UART_SetConfig+0x23a>
 8003da8:	4b51      	ldr	r3, [pc, #324]	@ (8003ef0 <UART_SetConfig+0x304>)
 8003daa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003dac:	23c0      	movs	r3, #192	@ 0xc0
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	4013      	ands	r3, r2
 8003db2:	22c0      	movs	r2, #192	@ 0xc0
 8003db4:	0112      	lsls	r2, r2, #4
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d027      	beq.n	8003e0a <UART_SetConfig+0x21e>
 8003dba:	22c0      	movs	r2, #192	@ 0xc0
 8003dbc:	0112      	lsls	r2, r2, #4
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d82a      	bhi.n	8003e18 <UART_SetConfig+0x22c>
 8003dc2:	2280      	movs	r2, #128	@ 0x80
 8003dc4:	0112      	lsls	r2, r2, #4
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d011      	beq.n	8003dee <UART_SetConfig+0x202>
 8003dca:	2280      	movs	r2, #128	@ 0x80
 8003dcc:	0112      	lsls	r2, r2, #4
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d822      	bhi.n	8003e18 <UART_SetConfig+0x22c>
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d004      	beq.n	8003de0 <UART_SetConfig+0x1f4>
 8003dd6:	2280      	movs	r2, #128	@ 0x80
 8003dd8:	00d2      	lsls	r2, r2, #3
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00e      	beq.n	8003dfc <UART_SetConfig+0x210>
 8003dde:	e01b      	b.n	8003e18 <UART_SetConfig+0x22c>
 8003de0:	231b      	movs	r3, #27
 8003de2:	2220      	movs	r2, #32
 8003de4:	189b      	adds	r3, r3, r2
 8003de6:	19db      	adds	r3, r3, r7
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
 8003dec:	e021      	b.n	8003e32 <UART_SetConfig+0x246>
 8003dee:	231b      	movs	r3, #27
 8003df0:	2220      	movs	r2, #32
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	19db      	adds	r3, r3, r7
 8003df6:	2202      	movs	r2, #2
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	e01a      	b.n	8003e32 <UART_SetConfig+0x246>
 8003dfc:	231b      	movs	r3, #27
 8003dfe:	2220      	movs	r2, #32
 8003e00:	189b      	adds	r3, r3, r2
 8003e02:	19db      	adds	r3, r3, r7
 8003e04:	2204      	movs	r2, #4
 8003e06:	701a      	strb	r2, [r3, #0]
 8003e08:	e013      	b.n	8003e32 <UART_SetConfig+0x246>
 8003e0a:	231b      	movs	r3, #27
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	189b      	adds	r3, r3, r2
 8003e10:	19db      	adds	r3, r3, r7
 8003e12:	2208      	movs	r2, #8
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	e00c      	b.n	8003e32 <UART_SetConfig+0x246>
 8003e18:	231b      	movs	r3, #27
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	189b      	adds	r3, r3, r2
 8003e1e:	19db      	adds	r3, r3, r7
 8003e20:	2210      	movs	r2, #16
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	e005      	b.n	8003e32 <UART_SetConfig+0x246>
 8003e26:	231b      	movs	r3, #27
 8003e28:	2220      	movs	r2, #32
 8003e2a:	189b      	adds	r3, r3, r2
 8003e2c:	19db      	adds	r3, r3, r7
 8003e2e:	2210      	movs	r2, #16
 8003e30:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a2b      	ldr	r2, [pc, #172]	@ (8003ee4 <UART_SetConfig+0x2f8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d000      	beq.n	8003e3e <UART_SetConfig+0x252>
 8003e3c:	e0a9      	b.n	8003f92 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e3e:	231b      	movs	r3, #27
 8003e40:	2220      	movs	r2, #32
 8003e42:	189b      	adds	r3, r3, r2
 8003e44:	19db      	adds	r3, r3, r7
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d015      	beq.n	8003e78 <UART_SetConfig+0x28c>
 8003e4c:	dc18      	bgt.n	8003e80 <UART_SetConfig+0x294>
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d00d      	beq.n	8003e6e <UART_SetConfig+0x282>
 8003e52:	dc15      	bgt.n	8003e80 <UART_SetConfig+0x294>
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <UART_SetConfig+0x272>
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d005      	beq.n	8003e68 <UART_SetConfig+0x27c>
 8003e5c:	e010      	b.n	8003e80 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e5e:	f7fe faf7 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 8003e62:	0003      	movs	r3, r0
 8003e64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e66:	e014      	b.n	8003e92 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e68:	4b25      	ldr	r3, [pc, #148]	@ (8003f00 <UART_SetConfig+0x314>)
 8003e6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e6c:	e011      	b.n	8003e92 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e6e:	f7fe fa63 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 8003e72:	0003      	movs	r3, r0
 8003e74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e76:	e00c      	b.n	8003e92 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e78:	2380      	movs	r3, #128	@ 0x80
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e7e:	e008      	b.n	8003e92 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003e84:	231a      	movs	r3, #26
 8003e86:	2220      	movs	r2, #32
 8003e88:	189b      	adds	r3, r3, r2
 8003e8a:	19db      	adds	r3, r3, r7
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]
        break;
 8003e90:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d100      	bne.n	8003e9a <UART_SetConfig+0x2ae>
 8003e98:	e14b      	b.n	8004132 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e9e:	4b19      	ldr	r3, [pc, #100]	@ (8003f04 <UART_SetConfig+0x318>)
 8003ea0:	0052      	lsls	r2, r2, #1
 8003ea2:	5ad3      	ldrh	r3, [r2, r3]
 8003ea4:	0019      	movs	r1, r3
 8003ea6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003ea8:	f7fc f92c 	bl	8000104 <__udivsi3>
 8003eac:	0003      	movs	r3, r0
 8003eae:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	0013      	movs	r3, r2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	189b      	adds	r3, r3, r2
 8003eba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d305      	bcc.n	8003ecc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ec6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d91d      	bls.n	8003f08 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003ecc:	231a      	movs	r3, #26
 8003ece:	2220      	movs	r2, #32
 8003ed0:	189b      	adds	r3, r3, r2
 8003ed2:	19db      	adds	r3, r3, r7
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	701a      	strb	r2, [r3, #0]
 8003ed8:	e12b      	b.n	8004132 <UART_SetConfig+0x546>
 8003eda:	46c0      	nop			@ (mov r8, r8)
 8003edc:	cfff69f3 	.word	0xcfff69f3
 8003ee0:	ffffcfff 	.word	0xffffcfff
 8003ee4:	40008000 	.word	0x40008000
 8003ee8:	11fff4ff 	.word	0x11fff4ff
 8003eec:	40013800 	.word	0x40013800
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	40004400 	.word	0x40004400
 8003ef8:	40004800 	.word	0x40004800
 8003efc:	40004c00 	.word	0x40004c00
 8003f00:	00f42400 	.word	0x00f42400
 8003f04:	08005590 	.word	0x08005590
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f0a:	61bb      	str	r3, [r7, #24]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61fb      	str	r3, [r7, #28]
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f14:	4b92      	ldr	r3, [pc, #584]	@ (8004160 <UART_SetConfig+0x574>)
 8003f16:	0052      	lsls	r2, r2, #1
 8003f18:	5ad3      	ldrh	r3, [r2, r3]
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	69b8      	ldr	r0, [r7, #24]
 8003f26:	69f9      	ldr	r1, [r7, #28]
 8003f28:	f7fc fa62 	bl	80003f0 <__aeabi_uldivmod>
 8003f2c:	0002      	movs	r2, r0
 8003f2e:	000b      	movs	r3, r1
 8003f30:	0e11      	lsrs	r1, r2, #24
 8003f32:	021d      	lsls	r5, r3, #8
 8003f34:	430d      	orrs	r5, r1
 8003f36:	0214      	lsls	r4, r2, #8
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68b8      	ldr	r0, [r7, #8]
 8003f46:	68f9      	ldr	r1, [r7, #12]
 8003f48:	1900      	adds	r0, r0, r4
 8003f4a:	4169      	adcs	r1, r5
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	2300      	movs	r3, #0
 8003f54:	607b      	str	r3, [r7, #4]
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f7fc fa49 	bl	80003f0 <__aeabi_uldivmod>
 8003f5e:	0002      	movs	r2, r0
 8003f60:	000b      	movs	r3, r1
 8003f62:	0013      	movs	r3, r2
 8003f64:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f68:	23c0      	movs	r3, #192	@ 0xc0
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d309      	bcc.n	8003f84 <UART_SetConfig+0x398>
 8003f70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f72:	2380      	movs	r3, #128	@ 0x80
 8003f74:	035b      	lsls	r3, r3, #13
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d204      	bcs.n	8003f84 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f80:	60da      	str	r2, [r3, #12]
 8003f82:	e0d6      	b.n	8004132 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003f84:	231a      	movs	r3, #26
 8003f86:	2220      	movs	r2, #32
 8003f88:	189b      	adds	r3, r3, r2
 8003f8a:	19db      	adds	r3, r3, r7
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	e0cf      	b.n	8004132 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	69da      	ldr	r2, [r3, #28]
 8003f96:	2380      	movs	r3, #128	@ 0x80
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d000      	beq.n	8003fa0 <UART_SetConfig+0x3b4>
 8003f9e:	e070      	b.n	8004082 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003fa0:	231b      	movs	r3, #27
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	189b      	adds	r3, r3, r2
 8003fa6:	19db      	adds	r3, r3, r7
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d015      	beq.n	8003fda <UART_SetConfig+0x3ee>
 8003fae:	dc18      	bgt.n	8003fe2 <UART_SetConfig+0x3f6>
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d00d      	beq.n	8003fd0 <UART_SetConfig+0x3e4>
 8003fb4:	dc15      	bgt.n	8003fe2 <UART_SetConfig+0x3f6>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <UART_SetConfig+0x3d4>
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d005      	beq.n	8003fca <UART_SetConfig+0x3de>
 8003fbe:	e010      	b.n	8003fe2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc0:	f7fe fa46 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fc8:	e014      	b.n	8003ff4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fca:	4b66      	ldr	r3, [pc, #408]	@ (8004164 <UART_SetConfig+0x578>)
 8003fcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fce:	e011      	b.n	8003ff4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd0:	f7fe f9b2 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fd8:	e00c      	b.n	8003ff4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fda:	2380      	movs	r3, #128	@ 0x80
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fe0:	e008      	b.n	8003ff4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003fe6:	231a      	movs	r3, #26
 8003fe8:	2220      	movs	r2, #32
 8003fea:	189b      	adds	r3, r3, r2
 8003fec:	19db      	adds	r3, r3, r7
 8003fee:	2201      	movs	r2, #1
 8003ff0:	701a      	strb	r2, [r3, #0]
        break;
 8003ff2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d100      	bne.n	8003ffc <UART_SetConfig+0x410>
 8003ffa:	e09a      	b.n	8004132 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004000:	4b57      	ldr	r3, [pc, #348]	@ (8004160 <UART_SetConfig+0x574>)
 8004002:	0052      	lsls	r2, r2, #1
 8004004:	5ad3      	ldrh	r3, [r2, r3]
 8004006:	0019      	movs	r1, r3
 8004008:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800400a:	f7fc f87b 	bl	8000104 <__udivsi3>
 800400e:	0003      	movs	r3, r0
 8004010:	005a      	lsls	r2, r3, #1
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	18d2      	adds	r2, r2, r3
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	0019      	movs	r1, r3
 8004020:	0010      	movs	r0, r2
 8004022:	f7fc f86f 	bl	8000104 <__udivsi3>
 8004026:	0003      	movs	r3, r0
 8004028:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800402a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402c:	2b0f      	cmp	r3, #15
 800402e:	d921      	bls.n	8004074 <UART_SetConfig+0x488>
 8004030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004032:	2380      	movs	r3, #128	@ 0x80
 8004034:	025b      	lsls	r3, r3, #9
 8004036:	429a      	cmp	r2, r3
 8004038:	d21c      	bcs.n	8004074 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800403a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403c:	b29a      	uxth	r2, r3
 800403e:	200e      	movs	r0, #14
 8004040:	2420      	movs	r4, #32
 8004042:	1903      	adds	r3, r0, r4
 8004044:	19db      	adds	r3, r3, r7
 8004046:	210f      	movs	r1, #15
 8004048:	438a      	bics	r2, r1
 800404a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800404c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404e:	085b      	lsrs	r3, r3, #1
 8004050:	b29b      	uxth	r3, r3
 8004052:	2207      	movs	r2, #7
 8004054:	4013      	ands	r3, r2
 8004056:	b299      	uxth	r1, r3
 8004058:	1903      	adds	r3, r0, r4
 800405a:	19db      	adds	r3, r3, r7
 800405c:	1902      	adds	r2, r0, r4
 800405e:	19d2      	adds	r2, r2, r7
 8004060:	8812      	ldrh	r2, [r2, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	1902      	adds	r2, r0, r4
 800406c:	19d2      	adds	r2, r2, r7
 800406e:	8812      	ldrh	r2, [r2, #0]
 8004070:	60da      	str	r2, [r3, #12]
 8004072:	e05e      	b.n	8004132 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004074:	231a      	movs	r3, #26
 8004076:	2220      	movs	r2, #32
 8004078:	189b      	adds	r3, r3, r2
 800407a:	19db      	adds	r3, r3, r7
 800407c:	2201      	movs	r2, #1
 800407e:	701a      	strb	r2, [r3, #0]
 8004080:	e057      	b.n	8004132 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004082:	231b      	movs	r3, #27
 8004084:	2220      	movs	r2, #32
 8004086:	189b      	adds	r3, r3, r2
 8004088:	19db      	adds	r3, r3, r7
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d015      	beq.n	80040bc <UART_SetConfig+0x4d0>
 8004090:	dc18      	bgt.n	80040c4 <UART_SetConfig+0x4d8>
 8004092:	2b04      	cmp	r3, #4
 8004094:	d00d      	beq.n	80040b2 <UART_SetConfig+0x4c6>
 8004096:	dc15      	bgt.n	80040c4 <UART_SetConfig+0x4d8>
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <UART_SetConfig+0x4b6>
 800409c:	2b02      	cmp	r3, #2
 800409e:	d005      	beq.n	80040ac <UART_SetConfig+0x4c0>
 80040a0:	e010      	b.n	80040c4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040a2:	f7fe f9d5 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 80040a6:	0003      	movs	r3, r0
 80040a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040aa:	e014      	b.n	80040d6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004164 <UART_SetConfig+0x578>)
 80040ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040b0:	e011      	b.n	80040d6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b2:	f7fe f941 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 80040b6:	0003      	movs	r3, r0
 80040b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040ba:	e00c      	b.n	80040d6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040bc:	2380      	movs	r3, #128	@ 0x80
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040c2:	e008      	b.n	80040d6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80040c8:	231a      	movs	r3, #26
 80040ca:	2220      	movs	r2, #32
 80040cc:	189b      	adds	r3, r3, r2
 80040ce:	19db      	adds	r3, r3, r7
 80040d0:	2201      	movs	r2, #1
 80040d2:	701a      	strb	r2, [r3, #0]
        break;
 80040d4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80040d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d02a      	beq.n	8004132 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040e0:	4b1f      	ldr	r3, [pc, #124]	@ (8004160 <UART_SetConfig+0x574>)
 80040e2:	0052      	lsls	r2, r2, #1
 80040e4:	5ad3      	ldrh	r3, [r2, r3]
 80040e6:	0019      	movs	r1, r3
 80040e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80040ea:	f7fc f80b 	bl	8000104 <__udivsi3>
 80040ee:	0003      	movs	r3, r0
 80040f0:	001a      	movs	r2, r3
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	085b      	lsrs	r3, r3, #1
 80040f8:	18d2      	adds	r2, r2, r3
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	0019      	movs	r1, r3
 8004100:	0010      	movs	r0, r2
 8004102:	f7fb ffff 	bl	8000104 <__udivsi3>
 8004106:	0003      	movs	r3, r0
 8004108:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800410a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410c:	2b0f      	cmp	r3, #15
 800410e:	d90a      	bls.n	8004126 <UART_SetConfig+0x53a>
 8004110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004112:	2380      	movs	r3, #128	@ 0x80
 8004114:	025b      	lsls	r3, r3, #9
 8004116:	429a      	cmp	r2, r3
 8004118:	d205      	bcs.n	8004126 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800411a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411c:	b29a      	uxth	r2, r3
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60da      	str	r2, [r3, #12]
 8004124:	e005      	b.n	8004132 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004126:	231a      	movs	r3, #26
 8004128:	2220      	movs	r2, #32
 800412a:	189b      	adds	r3, r3, r2
 800412c:	19db      	adds	r3, r3, r7
 800412e:	2201      	movs	r2, #1
 8004130:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	226a      	movs	r2, #106	@ 0x6a
 8004136:	2101      	movs	r1, #1
 8004138:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	2268      	movs	r2, #104	@ 0x68
 800413e:	2101      	movs	r1, #1
 8004140:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	2200      	movs	r2, #0
 8004146:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	2200      	movs	r2, #0
 800414c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800414e:	231a      	movs	r3, #26
 8004150:	2220      	movs	r2, #32
 8004152:	189b      	adds	r3, r3, r2
 8004154:	19db      	adds	r3, r3, r7
 8004156:	781b      	ldrb	r3, [r3, #0]
}
 8004158:	0018      	movs	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	b010      	add	sp, #64	@ 0x40
 800415e:	bdb0      	pop	{r4, r5, r7, pc}
 8004160:	08005590 	.word	0x08005590
 8004164:	00f42400 	.word	0x00f42400

08004168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	2208      	movs	r2, #8
 8004176:	4013      	ands	r3, r2
 8004178:	d00b      	beq.n	8004192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4a4a      	ldr	r2, [pc, #296]	@ (80042ac <UART_AdvFeatureConfig+0x144>)
 8004182:	4013      	ands	r3, r2
 8004184:	0019      	movs	r1, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004196:	2201      	movs	r2, #1
 8004198:	4013      	ands	r3, r2
 800419a:	d00b      	beq.n	80041b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4a43      	ldr	r2, [pc, #268]	@ (80042b0 <UART_AdvFeatureConfig+0x148>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	0019      	movs	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b8:	2202      	movs	r2, #2
 80041ba:	4013      	ands	r3, r2
 80041bc:	d00b      	beq.n	80041d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	4a3b      	ldr	r2, [pc, #236]	@ (80042b4 <UART_AdvFeatureConfig+0x14c>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	0019      	movs	r1, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041da:	2204      	movs	r2, #4
 80041dc:	4013      	ands	r3, r2
 80041de:	d00b      	beq.n	80041f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4a34      	ldr	r2, [pc, #208]	@ (80042b8 <UART_AdvFeatureConfig+0x150>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	0019      	movs	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fc:	2210      	movs	r2, #16
 80041fe:	4013      	ands	r3, r2
 8004200:	d00b      	beq.n	800421a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a2c      	ldr	r2, [pc, #176]	@ (80042bc <UART_AdvFeatureConfig+0x154>)
 800420a:	4013      	ands	r3, r2
 800420c:	0019      	movs	r1, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421e:	2220      	movs	r2, #32
 8004220:	4013      	ands	r3, r2
 8004222:	d00b      	beq.n	800423c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	4a25      	ldr	r2, [pc, #148]	@ (80042c0 <UART_AdvFeatureConfig+0x158>)
 800422c:	4013      	ands	r3, r2
 800422e:	0019      	movs	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004240:	2240      	movs	r2, #64	@ 0x40
 8004242:	4013      	ands	r3, r2
 8004244:	d01d      	beq.n	8004282 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a1d      	ldr	r2, [pc, #116]	@ (80042c4 <UART_AdvFeatureConfig+0x15c>)
 800424e:	4013      	ands	r3, r2
 8004250:	0019      	movs	r1, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004262:	2380      	movs	r3, #128	@ 0x80
 8004264:	035b      	lsls	r3, r3, #13
 8004266:	429a      	cmp	r2, r3
 8004268:	d10b      	bne.n	8004282 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4a15      	ldr	r2, [pc, #84]	@ (80042c8 <UART_AdvFeatureConfig+0x160>)
 8004272:	4013      	ands	r3, r2
 8004274:	0019      	movs	r1, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004286:	2280      	movs	r2, #128	@ 0x80
 8004288:	4013      	ands	r3, r2
 800428a:	d00b      	beq.n	80042a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	4a0e      	ldr	r2, [pc, #56]	@ (80042cc <UART_AdvFeatureConfig+0x164>)
 8004294:	4013      	ands	r3, r2
 8004296:	0019      	movs	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	605a      	str	r2, [r3, #4]
  }
}
 80042a4:	46c0      	nop			@ (mov r8, r8)
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b002      	add	sp, #8
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	ffff7fff 	.word	0xffff7fff
 80042b0:	fffdffff 	.word	0xfffdffff
 80042b4:	fffeffff 	.word	0xfffeffff
 80042b8:	fffbffff 	.word	0xfffbffff
 80042bc:	ffffefff 	.word	0xffffefff
 80042c0:	ffffdfff 	.word	0xffffdfff
 80042c4:	ffefffff 	.word	0xffefffff
 80042c8:	ff9fffff 	.word	0xff9fffff
 80042cc:	fff7ffff 	.word	0xfff7ffff

080042d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b092      	sub	sp, #72	@ 0x48
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2290      	movs	r2, #144	@ 0x90
 80042dc:	2100      	movs	r1, #0
 80042de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042e0:	f7fd f976 	bl	80015d0 <HAL_GetTick>
 80042e4:	0003      	movs	r3, r0
 80042e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2208      	movs	r2, #8
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d12d      	bne.n	8004352 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f8:	2280      	movs	r2, #128	@ 0x80
 80042fa:	0391      	lsls	r1, r2, #14
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	4a47      	ldr	r2, [pc, #284]	@ (800441c <UART_CheckIdleState+0x14c>)
 8004300:	9200      	str	r2, [sp, #0]
 8004302:	2200      	movs	r2, #0
 8004304:	f000 f88e 	bl	8004424 <UART_WaitOnFlagUntilTimeout>
 8004308:	1e03      	subs	r3, r0, #0
 800430a:	d022      	beq.n	8004352 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800430c:	f3ef 8310 	mrs	r3, PRIMASK
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004314:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004316:	2301      	movs	r3, #1
 8004318:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431c:	f383 8810 	msr	PRIMASK, r3
}
 8004320:	46c0      	nop			@ (mov r8, r8)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2180      	movs	r1, #128	@ 0x80
 800432e:	438a      	bics	r2, r1
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004334:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004338:	f383 8810 	msr	PRIMASK, r3
}
 800433c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2288      	movs	r2, #136	@ 0x88
 8004342:	2120      	movs	r1, #32
 8004344:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2284      	movs	r2, #132	@ 0x84
 800434a:	2100      	movs	r1, #0
 800434c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e060      	b.n	8004414 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2204      	movs	r2, #4
 800435a:	4013      	ands	r3, r2
 800435c:	2b04      	cmp	r3, #4
 800435e:	d146      	bne.n	80043ee <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004362:	2280      	movs	r2, #128	@ 0x80
 8004364:	03d1      	lsls	r1, r2, #15
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4a2c      	ldr	r2, [pc, #176]	@ (800441c <UART_CheckIdleState+0x14c>)
 800436a:	9200      	str	r2, [sp, #0]
 800436c:	2200      	movs	r2, #0
 800436e:	f000 f859 	bl	8004424 <UART_WaitOnFlagUntilTimeout>
 8004372:	1e03      	subs	r3, r0, #0
 8004374:	d03b      	beq.n	80043ee <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004376:	f3ef 8310 	mrs	r3, PRIMASK
 800437a:	60fb      	str	r3, [r7, #12]
  return(result);
 800437c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800437e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004380:	2301      	movs	r3, #1
 8004382:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f383 8810 	msr	PRIMASK, r3
}
 800438a:	46c0      	nop			@ (mov r8, r8)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4922      	ldr	r1, [pc, #136]	@ (8004420 <UART_CheckIdleState+0x150>)
 8004398:	400a      	ands	r2, r1
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800439e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f383 8810 	msr	PRIMASK, r3
}
 80043a6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a8:	f3ef 8310 	mrs	r3, PRIMASK
 80043ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80043ae:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80043b2:	2301      	movs	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f383 8810 	msr	PRIMASK, r3
}
 80043bc:	46c0      	nop			@ (mov r8, r8)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2101      	movs	r1, #1
 80043ca:	438a      	bics	r2, r1
 80043cc:	609a      	str	r2, [r3, #8]
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	f383 8810 	msr	PRIMASK, r3
}
 80043d8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	228c      	movs	r2, #140	@ 0x8c
 80043de:	2120      	movs	r1, #32
 80043e0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2284      	movs	r2, #132	@ 0x84
 80043e6:	2100      	movs	r1, #0
 80043e8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e012      	b.n	8004414 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2288      	movs	r2, #136	@ 0x88
 80043f2:	2120      	movs	r1, #32
 80043f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	228c      	movs	r2, #140	@ 0x8c
 80043fa:	2120      	movs	r1, #32
 80043fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2284      	movs	r2, #132	@ 0x84
 800440e:	2100      	movs	r1, #0
 8004410:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	0018      	movs	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	b010      	add	sp, #64	@ 0x40
 800441a:	bd80      	pop	{r7, pc}
 800441c:	01ffffff 	.word	0x01ffffff
 8004420:	fffffedf 	.word	0xfffffedf

08004424 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	1dfb      	adds	r3, r7, #7
 8004432:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004434:	e051      	b.n	80044da <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	3301      	adds	r3, #1
 800443a:	d04e      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443c:	f7fd f8c8 	bl	80015d0 <HAL_GetTick>
 8004440:	0002      	movs	r2, r0
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	429a      	cmp	r2, r3
 800444a:	d302      	bcc.n	8004452 <UART_WaitOnFlagUntilTimeout+0x2e>
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e051      	b.n	80044fa <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2204      	movs	r2, #4
 800445e:	4013      	ands	r3, r2
 8004460:	d03b      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0xb6>
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b80      	cmp	r3, #128	@ 0x80
 8004466:	d038      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0xb6>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b40      	cmp	r3, #64	@ 0x40
 800446c:	d035      	beq.n	80044da <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	2208      	movs	r2, #8
 8004476:	4013      	ands	r3, r2
 8004478:	2b08      	cmp	r3, #8
 800447a:	d111      	bne.n	80044a0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2208      	movs	r2, #8
 8004482:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	0018      	movs	r0, r3
 8004488:	f000 f960 	bl	800474c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2290      	movs	r2, #144	@ 0x90
 8004490:	2108      	movs	r1, #8
 8004492:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2284      	movs	r2, #132	@ 0x84
 8004498:	2100      	movs	r1, #0
 800449a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e02c      	b.n	80044fa <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	2380      	movs	r3, #128	@ 0x80
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	401a      	ands	r2, r3
 80044ac:	2380      	movs	r3, #128	@ 0x80
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d112      	bne.n	80044da <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2280      	movs	r2, #128	@ 0x80
 80044ba:	0112      	lsls	r2, r2, #4
 80044bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	0018      	movs	r0, r3
 80044c2:	f000 f943 	bl	800474c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2290      	movs	r2, #144	@ 0x90
 80044ca:	2120      	movs	r1, #32
 80044cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2284      	movs	r2, #132	@ 0x84
 80044d2:	2100      	movs	r1, #0
 80044d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e00f      	b.n	80044fa <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	4013      	ands	r3, r2
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	425a      	negs	r2, r3
 80044ea:	4153      	adcs	r3, r2
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	001a      	movs	r2, r3
 80044f0:	1dfb      	adds	r3, r7, #7
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d09e      	beq.n	8004436 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	0018      	movs	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b004      	add	sp, #16
 8004500:	bd80      	pop	{r7, pc}
	...

08004504 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b098      	sub	sp, #96	@ 0x60
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	1dbb      	adds	r3, r7, #6
 8004510:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	1dba      	adds	r2, r7, #6
 800451c:	215c      	movs	r1, #92	@ 0x5c
 800451e:	8812      	ldrh	r2, [r2, #0]
 8004520:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1dba      	adds	r2, r7, #6
 8004526:	215e      	movs	r1, #94	@ 0x5e
 8004528:	8812      	ldrh	r2, [r2, #0]
 800452a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	2380      	movs	r3, #128	@ 0x80
 8004538:	015b      	lsls	r3, r3, #5
 800453a:	429a      	cmp	r2, r3
 800453c:	d10d      	bne.n	800455a <UART_Start_Receive_IT+0x56>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d104      	bne.n	8004550 <UART_Start_Receive_IT+0x4c>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2260      	movs	r2, #96	@ 0x60
 800454a:	497b      	ldr	r1, [pc, #492]	@ (8004738 <UART_Start_Receive_IT+0x234>)
 800454c:	5299      	strh	r1, [r3, r2]
 800454e:	e02e      	b.n	80045ae <UART_Start_Receive_IT+0xaa>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2260      	movs	r2, #96	@ 0x60
 8004554:	21ff      	movs	r1, #255	@ 0xff
 8004556:	5299      	strh	r1, [r3, r2]
 8004558:	e029      	b.n	80045ae <UART_Start_Receive_IT+0xaa>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10d      	bne.n	800457e <UART_Start_Receive_IT+0x7a>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d104      	bne.n	8004574 <UART_Start_Receive_IT+0x70>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2260      	movs	r2, #96	@ 0x60
 800456e:	21ff      	movs	r1, #255	@ 0xff
 8004570:	5299      	strh	r1, [r3, r2]
 8004572:	e01c      	b.n	80045ae <UART_Start_Receive_IT+0xaa>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2260      	movs	r2, #96	@ 0x60
 8004578:	217f      	movs	r1, #127	@ 0x7f
 800457a:	5299      	strh	r1, [r3, r2]
 800457c:	e017      	b.n	80045ae <UART_Start_Receive_IT+0xaa>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	2380      	movs	r3, #128	@ 0x80
 8004584:	055b      	lsls	r3, r3, #21
 8004586:	429a      	cmp	r2, r3
 8004588:	d10d      	bne.n	80045a6 <UART_Start_Receive_IT+0xa2>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d104      	bne.n	800459c <UART_Start_Receive_IT+0x98>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2260      	movs	r2, #96	@ 0x60
 8004596:	217f      	movs	r1, #127	@ 0x7f
 8004598:	5299      	strh	r1, [r3, r2]
 800459a:	e008      	b.n	80045ae <UART_Start_Receive_IT+0xaa>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2260      	movs	r2, #96	@ 0x60
 80045a0:	213f      	movs	r1, #63	@ 0x3f
 80045a2:	5299      	strh	r1, [r3, r2]
 80045a4:	e003      	b.n	80045ae <UART_Start_Receive_IT+0xaa>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2260      	movs	r2, #96	@ 0x60
 80045aa:	2100      	movs	r1, #0
 80045ac:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2290      	movs	r2, #144	@ 0x90
 80045b2:	2100      	movs	r1, #0
 80045b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	228c      	movs	r2, #140	@ 0x8c
 80045ba:	2122      	movs	r1, #34	@ 0x22
 80045bc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045be:	f3ef 8310 	mrs	r3, PRIMASK
 80045c2:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 80045c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045c8:	2301      	movs	r3, #1
 80045ca:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ce:	f383 8810 	msr	PRIMASK, r3
}
 80045d2:	46c0      	nop			@ (mov r8, r8)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2101      	movs	r1, #1
 80045e0:	430a      	orrs	r2, r1
 80045e2:	609a      	str	r2, [r3, #8]
 80045e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ea:	f383 8810 	msr	PRIMASK, r3
}
 80045ee:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80045f4:	2380      	movs	r3, #128	@ 0x80
 80045f6:	059b      	lsls	r3, r3, #22
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d150      	bne.n	800469e <UART_Start_Receive_IT+0x19a>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2268      	movs	r2, #104	@ 0x68
 8004600:	5a9b      	ldrh	r3, [r3, r2]
 8004602:	1dba      	adds	r2, r7, #6
 8004604:	8812      	ldrh	r2, [r2, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d349      	bcc.n	800469e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	2380      	movs	r3, #128	@ 0x80
 8004610:	015b      	lsls	r3, r3, #5
 8004612:	429a      	cmp	r2, r3
 8004614:	d107      	bne.n	8004626 <UART_Start_Receive_IT+0x122>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4a46      	ldr	r2, [pc, #280]	@ (800473c <UART_Start_Receive_IT+0x238>)
 8004622:	675a      	str	r2, [r3, #116]	@ 0x74
 8004624:	e002      	b.n	800462c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4a45      	ldr	r2, [pc, #276]	@ (8004740 <UART_Start_Receive_IT+0x23c>)
 800462a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d019      	beq.n	8004668 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004634:	f3ef 8310 	mrs	r3, PRIMASK
 8004638:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 800463a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800463c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800463e:	2301      	movs	r3, #1
 8004640:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	f383 8810 	msr	PRIMASK, r3
}
 8004648:	46c0      	nop			@ (mov r8, r8)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2180      	movs	r1, #128	@ 0x80
 8004656:	0049      	lsls	r1, r1, #1
 8004658:	430a      	orrs	r2, r1
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800465e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004662:	f383 8810 	msr	PRIMASK, r3
}
 8004666:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004668:	f3ef 8310 	mrs	r3, PRIMASK
 800466c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800466e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004670:	657b      	str	r3, [r7, #84]	@ 0x54
 8004672:	2301      	movs	r3, #1
 8004674:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004678:	f383 8810 	msr	PRIMASK, r3
}
 800467c:	46c0      	nop			@ (mov r8, r8)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2180      	movs	r1, #128	@ 0x80
 800468a:	0549      	lsls	r1, r1, #21
 800468c:	430a      	orrs	r2, r1
 800468e:	609a      	str	r2, [r3, #8]
 8004690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004692:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004696:	f383 8810 	msr	PRIMASK, r3
}
 800469a:	46c0      	nop			@ (mov r8, r8)
 800469c:	e047      	b.n	800472e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	2380      	movs	r3, #128	@ 0x80
 80046a4:	015b      	lsls	r3, r3, #5
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d107      	bne.n	80046ba <UART_Start_Receive_IT+0x1b6>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d103      	bne.n	80046ba <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4a23      	ldr	r2, [pc, #140]	@ (8004744 <UART_Start_Receive_IT+0x240>)
 80046b6:	675a      	str	r2, [r3, #116]	@ 0x74
 80046b8:	e002      	b.n	80046c0 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4a22      	ldr	r2, [pc, #136]	@ (8004748 <UART_Start_Receive_IT+0x244>)
 80046be:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d019      	beq.n	80046fc <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c8:	f3ef 8310 	mrs	r3, PRIMASK
 80046cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80046ce:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80046d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046d2:	2301      	movs	r3, #1
 80046d4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	f383 8810 	msr	PRIMASK, r3
}
 80046dc:	46c0      	nop			@ (mov r8, r8)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2190      	movs	r1, #144	@ 0x90
 80046ea:	0049      	lsls	r1, r1, #1
 80046ec:	430a      	orrs	r2, r1
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046f2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	f383 8810 	msr	PRIMASK, r3
}
 80046fa:	e018      	b.n	800472e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004700:	613b      	str	r3, [r7, #16]
  return(result);
 8004702:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004704:	653b      	str	r3, [r7, #80]	@ 0x50
 8004706:	2301      	movs	r3, #1
 8004708:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f383 8810 	msr	PRIMASK, r3
}
 8004710:	46c0      	nop			@ (mov r8, r8)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2120      	movs	r1, #32
 800471e:	430a      	orrs	r2, r1
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004724:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	f383 8810 	msr	PRIMASK, r3
}
 800472c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	0018      	movs	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	b018      	add	sp, #96	@ 0x60
 8004736:	bd80      	pop	{r7, pc}
 8004738:	000001ff 	.word	0x000001ff
 800473c:	08004ee1 	.word	0x08004ee1
 8004740:	08004ba1 	.word	0x08004ba1
 8004744:	080049dd 	.word	0x080049dd
 8004748:	08004819 	.word	0x08004819

0800474c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08e      	sub	sp, #56	@ 0x38
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004754:	f3ef 8310 	mrs	r3, PRIMASK
 8004758:	617b      	str	r3, [r7, #20]
  return(result);
 800475a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800475c:	637b      	str	r3, [r7, #52]	@ 0x34
 800475e:	2301      	movs	r3, #1
 8004760:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	f383 8810 	msr	PRIMASK, r3
}
 8004768:	46c0      	nop			@ (mov r8, r8)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4926      	ldr	r1, [pc, #152]	@ (8004810 <UART_EndRxTransfer+0xc4>)
 8004776:	400a      	ands	r2, r1
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800477c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f383 8810 	msr	PRIMASK, r3
}
 8004784:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004786:	f3ef 8310 	mrs	r3, PRIMASK
 800478a:	623b      	str	r3, [r7, #32]
  return(result);
 800478c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800478e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004790:	2301      	movs	r3, #1
 8004792:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004796:	f383 8810 	msr	PRIMASK, r3
}
 800479a:	46c0      	nop			@ (mov r8, r8)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	491b      	ldr	r1, [pc, #108]	@ (8004814 <UART_EndRxTransfer+0xc8>)
 80047a8:	400a      	ands	r2, r1
 80047aa:	609a      	str	r2, [r3, #8]
 80047ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b2:	f383 8810 	msr	PRIMASK, r3
}
 80047b6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d118      	bne.n	80047f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047c0:	f3ef 8310 	mrs	r3, PRIMASK
 80047c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80047c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ca:	2301      	movs	r3, #1
 80047cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f383 8810 	msr	PRIMASK, r3
}
 80047d4:	46c0      	nop			@ (mov r8, r8)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2110      	movs	r1, #16
 80047e2:	438a      	bics	r2, r1
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f383 8810 	msr	PRIMASK, r3
}
 80047f0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	228c      	movs	r2, #140	@ 0x8c
 80047f6:	2120      	movs	r1, #32
 80047f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004806:	46c0      	nop			@ (mov r8, r8)
 8004808:	46bd      	mov	sp, r7
 800480a:	b00e      	add	sp, #56	@ 0x38
 800480c:	bd80      	pop	{r7, pc}
 800480e:	46c0      	nop			@ (mov r8, r8)
 8004810:	fffffedf 	.word	0xfffffedf
 8004814:	effffffe 	.word	0xeffffffe

08004818 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b094      	sub	sp, #80	@ 0x50
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004820:	204e      	movs	r0, #78	@ 0x4e
 8004822:	183b      	adds	r3, r7, r0
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	2160      	movs	r1, #96	@ 0x60
 8004828:	5a52      	ldrh	r2, [r2, r1]
 800482a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	228c      	movs	r2, #140	@ 0x8c
 8004830:	589b      	ldr	r3, [r3, r2]
 8004832:	2b22      	cmp	r3, #34	@ 0x22
 8004834:	d000      	beq.n	8004838 <UART_RxISR_8BIT+0x20>
 8004836:	e0bf      	b.n	80049b8 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800483e:	214c      	movs	r1, #76	@ 0x4c
 8004840:	187b      	adds	r3, r7, r1
 8004842:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004844:	187b      	adds	r3, r7, r1
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	b2da      	uxtb	r2, r3
 800484a:	183b      	adds	r3, r7, r0
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	b2d9      	uxtb	r1, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004854:	400a      	ands	r2, r1
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800485e:	1c5a      	adds	r2, r3, #1
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	225e      	movs	r2, #94	@ 0x5e
 8004868:	5a9b      	ldrh	r3, [r3, r2]
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b299      	uxth	r1, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	225e      	movs	r2, #94	@ 0x5e
 8004874:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	225e      	movs	r2, #94	@ 0x5e
 800487a:	5a9b      	ldrh	r3, [r3, r2]
 800487c:	b29b      	uxth	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d000      	beq.n	8004884 <UART_RxISR_8BIT+0x6c>
 8004882:	e0a1      	b.n	80049c8 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004884:	f3ef 8310 	mrs	r3, PRIMASK
 8004888:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800488c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800488e:	2301      	movs	r3, #1
 8004890:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004894:	f383 8810 	msr	PRIMASK, r3
}
 8004898:	46c0      	nop			@ (mov r8, r8)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	494a      	ldr	r1, [pc, #296]	@ (80049d0 <UART_RxISR_8BIT+0x1b8>)
 80048a6:	400a      	ands	r2, r1
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b0:	f383 8810 	msr	PRIMASK, r3
}
 80048b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ba:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80048bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048be:	647b      	str	r3, [r7, #68]	@ 0x44
 80048c0:	2301      	movs	r3, #1
 80048c2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c6:	f383 8810 	msr	PRIMASK, r3
}
 80048ca:	46c0      	nop			@ (mov r8, r8)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2101      	movs	r1, #1
 80048d8:	438a      	bics	r2, r1
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048de:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048e2:	f383 8810 	msr	PRIMASK, r3
}
 80048e6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	228c      	movs	r2, #140	@ 0x8c
 80048ec:	2120      	movs	r1, #32
 80048ee:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a34      	ldr	r2, [pc, #208]	@ (80049d4 <UART_RxISR_8BIT+0x1bc>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01f      	beq.n	8004946 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685a      	ldr	r2, [r3, #4]
 800490c:	2380      	movs	r3, #128	@ 0x80
 800490e:	041b      	lsls	r3, r3, #16
 8004910:	4013      	ands	r3, r2
 8004912:	d018      	beq.n	8004946 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004914:	f3ef 8310 	mrs	r3, PRIMASK
 8004918:	61bb      	str	r3, [r7, #24]
  return(result);
 800491a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800491c:	643b      	str	r3, [r7, #64]	@ 0x40
 800491e:	2301      	movs	r3, #1
 8004920:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	f383 8810 	msr	PRIMASK, r3
}
 8004928:	46c0      	nop			@ (mov r8, r8)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4928      	ldr	r1, [pc, #160]	@ (80049d8 <UART_RxISR_8BIT+0x1c0>)
 8004936:	400a      	ands	r2, r1
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800493c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	f383 8810 	msr	PRIMASK, r3
}
 8004944:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800494a:	2b01      	cmp	r3, #1
 800494c:	d12f      	bne.n	80049ae <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004954:	f3ef 8310 	mrs	r3, PRIMASK
 8004958:	60fb      	str	r3, [r7, #12]
  return(result);
 800495a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800495e:	2301      	movs	r3, #1
 8004960:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f383 8810 	msr	PRIMASK, r3
}
 8004968:	46c0      	nop			@ (mov r8, r8)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2110      	movs	r1, #16
 8004976:	438a      	bics	r2, r1
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800497c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f383 8810 	msr	PRIMASK, r3
}
 8004984:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	2210      	movs	r2, #16
 800498e:	4013      	ands	r3, r2
 8004990:	2b10      	cmp	r3, #16
 8004992:	d103      	bne.n	800499c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2210      	movs	r2, #16
 800499a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	225c      	movs	r2, #92	@ 0x5c
 80049a0:	5a9a      	ldrh	r2, [r3, r2]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	0011      	movs	r1, r2
 80049a6:	0018      	movs	r0, r3
 80049a8:	f7ff f914 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049ac:	e00c      	b.n	80049c8 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f7fc faf9 	bl	8000fa8 <HAL_UART_RxCpltCallback>
}
 80049b6:	e007      	b.n	80049c8 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699a      	ldr	r2, [r3, #24]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2108      	movs	r1, #8
 80049c4:	430a      	orrs	r2, r1
 80049c6:	619a      	str	r2, [r3, #24]
}
 80049c8:	46c0      	nop			@ (mov r8, r8)
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b014      	add	sp, #80	@ 0x50
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	fffffedf 	.word	0xfffffedf
 80049d4:	40008000 	.word	0x40008000
 80049d8:	fbffffff 	.word	0xfbffffff

080049dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b094      	sub	sp, #80	@ 0x50
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80049e4:	204e      	movs	r0, #78	@ 0x4e
 80049e6:	183b      	adds	r3, r7, r0
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	2160      	movs	r1, #96	@ 0x60
 80049ec:	5a52      	ldrh	r2, [r2, r1]
 80049ee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	228c      	movs	r2, #140	@ 0x8c
 80049f4:	589b      	ldr	r3, [r3, r2]
 80049f6:	2b22      	cmp	r3, #34	@ 0x22
 80049f8:	d000      	beq.n	80049fc <UART_RxISR_16BIT+0x20>
 80049fa:	e0bf      	b.n	8004b7c <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a02:	214c      	movs	r1, #76	@ 0x4c
 8004a04:	187b      	adds	r3, r7, r1
 8004a06:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004a0e:	187b      	adds	r3, r7, r1
 8004a10:	183a      	adds	r2, r7, r0
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	8812      	ldrh	r2, [r2, #0]
 8004a16:	4013      	ands	r3, r2
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a22:	1c9a      	adds	r2, r3, #2
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	225e      	movs	r2, #94	@ 0x5e
 8004a2c:	5a9b      	ldrh	r3, [r3, r2]
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b299      	uxth	r1, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	225e      	movs	r2, #94	@ 0x5e
 8004a38:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	225e      	movs	r2, #94	@ 0x5e
 8004a3e:	5a9b      	ldrh	r3, [r3, r2]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d000      	beq.n	8004a48 <UART_RxISR_16BIT+0x6c>
 8004a46:	e0a1      	b.n	8004b8c <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a48:	f3ef 8310 	mrs	r3, PRIMASK
 8004a4c:	623b      	str	r3, [r7, #32]
  return(result);
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a52:	2301      	movs	r3, #1
 8004a54:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a58:	f383 8810 	msr	PRIMASK, r3
}
 8004a5c:	46c0      	nop			@ (mov r8, r8)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	494a      	ldr	r1, [pc, #296]	@ (8004b94 <UART_RxISR_16BIT+0x1b8>)
 8004a6a:	400a      	ands	r2, r1
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a70:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a74:	f383 8810 	msr	PRIMASK, r3
}
 8004a78:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a82:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a84:	2301      	movs	r3, #1
 8004a86:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a8a:	f383 8810 	msr	PRIMASK, r3
}
 8004a8e:	46c0      	nop			@ (mov r8, r8)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	438a      	bics	r2, r1
 8004a9e:	609a      	str	r2, [r3, #8]
 8004aa0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004aa2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa6:	f383 8810 	msr	PRIMASK, r3
}
 8004aaa:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	228c      	movs	r2, #140	@ 0x8c
 8004ab0:	2120      	movs	r1, #32
 8004ab2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a34      	ldr	r2, [pc, #208]	@ (8004b98 <UART_RxISR_16BIT+0x1bc>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d01f      	beq.n	8004b0a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	2380      	movs	r3, #128	@ 0x80
 8004ad2:	041b      	lsls	r3, r3, #16
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d018      	beq.n	8004b0a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8004adc:	617b      	str	r3, [r7, #20]
  return(result);
 8004ade:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	f383 8810 	msr	PRIMASK, r3
}
 8004aec:	46c0      	nop			@ (mov r8, r8)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4928      	ldr	r1, [pc, #160]	@ (8004b9c <UART_RxISR_16BIT+0x1c0>)
 8004afa:	400a      	ands	r2, r1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	f383 8810 	msr	PRIMASK, r3
}
 8004b08:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d12f      	bne.n	8004b72 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b18:	f3ef 8310 	mrs	r3, PRIMASK
 8004b1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b1e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b22:	2301      	movs	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f383 8810 	msr	PRIMASK, r3
}
 8004b2c:	46c0      	nop			@ (mov r8, r8)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2110      	movs	r1, #16
 8004b3a:	438a      	bics	r2, r1
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f383 8810 	msr	PRIMASK, r3
}
 8004b48:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	2210      	movs	r2, #16
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b10      	cmp	r3, #16
 8004b56:	d103      	bne.n	8004b60 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2210      	movs	r2, #16
 8004b5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	225c      	movs	r2, #92	@ 0x5c
 8004b64:	5a9a      	ldrh	r2, [r3, r2]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	0011      	movs	r1, r2
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f7ff f832 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b70:	e00c      	b.n	8004b8c <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	0018      	movs	r0, r3
 8004b76:	f7fc fa17 	bl	8000fa8 <HAL_UART_RxCpltCallback>
}
 8004b7a:	e007      	b.n	8004b8c <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2108      	movs	r1, #8
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	619a      	str	r2, [r3, #24]
}
 8004b8c:	46c0      	nop			@ (mov r8, r8)
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b014      	add	sp, #80	@ 0x50
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	fffffedf 	.word	0xfffffedf
 8004b98:	40008000 	.word	0x40008000
 8004b9c:	fbffffff 	.word	0xfbffffff

08004ba0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b0a0      	sub	sp, #128	@ 0x80
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004ba8:	237a      	movs	r3, #122	@ 0x7a
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	2160      	movs	r1, #96	@ 0x60
 8004bb0:	5a52      	ldrh	r2, [r2, r1]
 8004bb2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	228c      	movs	r2, #140	@ 0x8c
 8004bd0:	589b      	ldr	r3, [r3, r2]
 8004bd2:	2b22      	cmp	r3, #34	@ 0x22
 8004bd4:	d000      	beq.n	8004bd8 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004bd6:	e16a      	b.n	8004eae <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004bd8:	236e      	movs	r3, #110	@ 0x6e
 8004bda:	18fb      	adds	r3, r7, r3
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	2168      	movs	r1, #104	@ 0x68
 8004be0:	5a52      	ldrh	r2, [r2, r1]
 8004be2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004be4:	e111      	b.n	8004e0a <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bec:	216c      	movs	r1, #108	@ 0x6c
 8004bee:	187b      	adds	r3, r7, r1
 8004bf0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004bf2:	187b      	adds	r3, r7, r1
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	237a      	movs	r3, #122	@ 0x7a
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	b2d9      	uxtb	r1, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c04:	400a      	ands	r2, r1
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	225e      	movs	r2, #94	@ 0x5e
 8004c18:	5a9b      	ldrh	r3, [r3, r2]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b299      	uxth	r1, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	225e      	movs	r2, #94	@ 0x5e
 8004c24:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004c2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c30:	2207      	movs	r2, #7
 8004c32:	4013      	ands	r3, r2
 8004c34:	d049      	beq.n	8004cca <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c38:	2201      	movs	r2, #1
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	d010      	beq.n	8004c60 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004c3e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004c40:	2380      	movs	r3, #128	@ 0x80
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	4013      	ands	r3, r2
 8004c46:	d00b      	beq.n	8004c60 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2290      	movs	r2, #144	@ 0x90
 8004c54:	589b      	ldr	r3, [r3, r2]
 8004c56:	2201      	movs	r2, #1
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2190      	movs	r1, #144	@ 0x90
 8004c5e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c62:	2202      	movs	r2, #2
 8004c64:	4013      	ands	r3, r2
 8004c66:	d00f      	beq.n	8004c88 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004c68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	d00b      	beq.n	8004c88 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2202      	movs	r2, #2
 8004c76:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2290      	movs	r2, #144	@ 0x90
 8004c7c:	589b      	ldr	r3, [r3, r2]
 8004c7e:	2204      	movs	r2, #4
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2190      	movs	r1, #144	@ 0x90
 8004c86:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d00f      	beq.n	8004cb0 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004c90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c92:	2201      	movs	r2, #1
 8004c94:	4013      	ands	r3, r2
 8004c96:	d00b      	beq.n	8004cb0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2204      	movs	r2, #4
 8004c9e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2290      	movs	r2, #144	@ 0x90
 8004ca4:	589b      	ldr	r3, [r3, r2]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2190      	movs	r1, #144	@ 0x90
 8004cae:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2290      	movs	r2, #144	@ 0x90
 8004cb4:	589b      	ldr	r3, [r3, r2]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f7fe ff81 	bl	8003bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2290      	movs	r2, #144	@ 0x90
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	225e      	movs	r2, #94	@ 0x5e
 8004cce:	5a9b      	ldrh	r3, [r3, r2]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d000      	beq.n	8004cd8 <UART_RxISR_8BIT_FIFOEN+0x138>
 8004cd6:	e098      	b.n	8004e0a <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8004cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ce8:	f383 8810 	msr	PRIMASK, r3
}
 8004cec:	46c0      	nop			@ (mov r8, r8)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4973      	ldr	r1, [pc, #460]	@ (8004ec8 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8004cfa:	400a      	ands	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d00:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d04:	f383 8810 	msr	PRIMASK, r3
}
 8004d08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d0e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8004d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d12:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d14:	2301      	movs	r3, #1
 8004d16:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d1a:	f383 8810 	msr	PRIMASK, r3
}
 8004d1e:	46c0      	nop			@ (mov r8, r8)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4968      	ldr	r1, [pc, #416]	@ (8004ecc <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8004d2c:	400a      	ands	r2, r1
 8004d2e:	609a      	str	r2, [r3, #8]
 8004d30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d36:	f383 8810 	msr	PRIMASK, r3
}
 8004d3a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	228c      	movs	r2, #140	@ 0x8c
 8004d40:	2120      	movs	r1, #32
 8004d42:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a5e      	ldr	r2, [pc, #376]	@ (8004ed0 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d01f      	beq.n	8004d9a <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	2380      	movs	r3, #128	@ 0x80
 8004d62:	041b      	lsls	r3, r3, #16
 8004d64:	4013      	ands	r3, r2
 8004d66:	d018      	beq.n	8004d9a <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d68:	f3ef 8310 	mrs	r3, PRIMASK
 8004d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d70:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d72:	2301      	movs	r3, #1
 8004d74:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d78:	f383 8810 	msr	PRIMASK, r3
}
 8004d7c:	46c0      	nop			@ (mov r8, r8)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4952      	ldr	r1, [pc, #328]	@ (8004ed4 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8004d8a:	400a      	ands	r2, r1
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d90:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d94:	f383 8810 	msr	PRIMASK, r3
}
 8004d98:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d12f      	bne.n	8004e02 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dac:	623b      	str	r3, [r7, #32]
  return(result);
 8004dae:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004db2:	2301      	movs	r3, #1
 8004db4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	f383 8810 	msr	PRIMASK, r3
}
 8004dbc:	46c0      	nop			@ (mov r8, r8)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2110      	movs	r1, #16
 8004dca:	438a      	bics	r2, r1
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd4:	f383 8810 	msr	PRIMASK, r3
}
 8004dd8:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	2210      	movs	r2, #16
 8004de2:	4013      	ands	r3, r2
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d103      	bne.n	8004df0 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2210      	movs	r2, #16
 8004dee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	225c      	movs	r2, #92	@ 0x5c
 8004df4:	5a9a      	ldrh	r2, [r3, r2]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	0011      	movs	r1, r2
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f7fe feea 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
 8004e00:	e003      	b.n	8004e0a <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	0018      	movs	r0, r3
 8004e06:	f7fc f8cf 	bl	8000fa8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004e0a:	236e      	movs	r3, #110	@ 0x6e
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d004      	beq.n	8004e1e <UART_RxISR_8BIT_FIFOEN+0x27e>
 8004e14:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e16:	2220      	movs	r2, #32
 8004e18:	4013      	ands	r3, r2
 8004e1a:	d000      	beq.n	8004e1e <UART_RxISR_8BIT_FIFOEN+0x27e>
 8004e1c:	e6e3      	b.n	8004be6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004e1e:	205a      	movs	r0, #90	@ 0x5a
 8004e20:	183b      	adds	r3, r7, r0
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	215e      	movs	r1, #94	@ 0x5e
 8004e26:	5a52      	ldrh	r2, [r2, r1]
 8004e28:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004e2a:	0001      	movs	r1, r0
 8004e2c:	187b      	adds	r3, r7, r1
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d044      	beq.n	8004ebe <UART_RxISR_8BIT_FIFOEN+0x31e>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2268      	movs	r2, #104	@ 0x68
 8004e38:	5a9b      	ldrh	r3, [r3, r2]
 8004e3a:	187a      	adds	r2, r7, r1
 8004e3c:	8812      	ldrh	r2, [r2, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d23d      	bcs.n	8004ebe <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e42:	f3ef 8310 	mrs	r3, PRIMASK
 8004e46:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e48:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004e4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f383 8810 	msr	PRIMASK, r3
}
 8004e56:	46c0      	nop			@ (mov r8, r8)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689a      	ldr	r2, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	491d      	ldr	r1, [pc, #116]	@ (8004ed8 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8004e64:	400a      	ands	r2, r1
 8004e66:	609a      	str	r2, [r3, #8]
 8004e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f383 8810 	msr	PRIMASK, r3
}
 8004e72:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a19      	ldr	r2, [pc, #100]	@ (8004edc <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8004e78:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e7a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e7e:	617b      	str	r3, [r7, #20]
  return(result);
 8004e80:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004e82:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e84:	2301      	movs	r3, #1
 8004e86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	f383 8810 	msr	PRIMASK, r3
}
 8004e8e:	46c0      	nop			@ (mov r8, r8)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2120      	movs	r1, #32
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ea2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f383 8810 	msr	PRIMASK, r3
}
 8004eaa:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004eac:	e007      	b.n	8004ebe <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699a      	ldr	r2, [r3, #24]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2108      	movs	r1, #8
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	619a      	str	r2, [r3, #24]
}
 8004ebe:	46c0      	nop			@ (mov r8, r8)
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b020      	add	sp, #128	@ 0x80
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	46c0      	nop			@ (mov r8, r8)
 8004ec8:	fffffeff 	.word	0xfffffeff
 8004ecc:	effffffe 	.word	0xeffffffe
 8004ed0:	40008000 	.word	0x40008000
 8004ed4:	fbffffff 	.word	0xfbffffff
 8004ed8:	efffffff 	.word	0xefffffff
 8004edc:	08004819 	.word	0x08004819

08004ee0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b0a2      	sub	sp, #136	@ 0x88
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004ee8:	2382      	movs	r3, #130	@ 0x82
 8004eea:	18fb      	adds	r3, r7, r3
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	2160      	movs	r1, #96	@ 0x60
 8004ef0:	5a52      	ldrh	r2, [r2, r1]
 8004ef2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	2284      	movs	r2, #132	@ 0x84
 8004efc:	18ba      	adds	r2, r7, r2
 8004efe:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	228c      	movs	r2, #140	@ 0x8c
 8004f14:	589b      	ldr	r3, [r3, r2]
 8004f16:	2b22      	cmp	r3, #34	@ 0x22
 8004f18:	d000      	beq.n	8004f1c <UART_RxISR_16BIT_FIFOEN+0x3c>
 8004f1a:	e174      	b.n	8005206 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004f1c:	2376      	movs	r3, #118	@ 0x76
 8004f1e:	18fb      	adds	r3, r7, r3
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	2168      	movs	r1, #104	@ 0x68
 8004f24:	5a52      	ldrh	r2, [r2, r1]
 8004f26:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f28:	e119      	b.n	800515e <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f30:	2174      	movs	r1, #116	@ 0x74
 8004f32:	187b      	adds	r3, r7, r1
 8004f34:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f3a:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8004f3c:	187b      	adds	r3, r7, r1
 8004f3e:	2282      	movs	r2, #130	@ 0x82
 8004f40:	18ba      	adds	r2, r7, r2
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	8812      	ldrh	r2, [r2, #0]
 8004f46:	4013      	ands	r3, r2
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f52:	1c9a      	adds	r2, r3, #2
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	225e      	movs	r2, #94	@ 0x5e
 8004f5c:	5a9b      	ldrh	r3, [r3, r2]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b299      	uxth	r1, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	225e      	movs	r2, #94	@ 0x5e
 8004f68:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	2184      	movs	r1, #132	@ 0x84
 8004f72:	187a      	adds	r2, r7, r1
 8004f74:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004f76:	187b      	adds	r3, r7, r1
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2207      	movs	r2, #7
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d04e      	beq.n	800501e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f80:	187b      	adds	r3, r7, r1
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2201      	movs	r2, #1
 8004f86:	4013      	ands	r3, r2
 8004f88:	d010      	beq.n	8004fac <UART_RxISR_16BIT_FIFOEN+0xcc>
 8004f8a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004f8c:	2380      	movs	r3, #128	@ 0x80
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	4013      	ands	r3, r2
 8004f92:	d00b      	beq.n	8004fac <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2290      	movs	r2, #144	@ 0x90
 8004fa0:	589b      	ldr	r3, [r3, r2]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2190      	movs	r1, #144	@ 0x90
 8004faa:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fac:	2384      	movs	r3, #132	@ 0x84
 8004fae:	18fb      	adds	r3, r7, r3
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	d00f      	beq.n	8004fd8 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8004fb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fba:	2201      	movs	r2, #1
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	d00b      	beq.n	8004fd8 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2290      	movs	r2, #144	@ 0x90
 8004fcc:	589b      	ldr	r3, [r3, r2]
 8004fce:	2204      	movs	r2, #4
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2190      	movs	r1, #144	@ 0x90
 8004fd6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fd8:	2384      	movs	r3, #132	@ 0x84
 8004fda:	18fb      	adds	r3, r7, r3
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2204      	movs	r2, #4
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d00f      	beq.n	8005004 <UART_RxISR_16BIT_FIFOEN+0x124>
 8004fe4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	4013      	ands	r3, r2
 8004fea:	d00b      	beq.n	8005004 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2204      	movs	r2, #4
 8004ff2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2290      	movs	r2, #144	@ 0x90
 8004ff8:	589b      	ldr	r3, [r3, r2]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2190      	movs	r1, #144	@ 0x90
 8005002:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2290      	movs	r2, #144	@ 0x90
 8005008:	589b      	ldr	r3, [r3, r2]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d007      	beq.n	800501e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	0018      	movs	r0, r3
 8005012:	f7fe fdd7 	bl	8003bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2290      	movs	r2, #144	@ 0x90
 800501a:	2100      	movs	r1, #0
 800501c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	225e      	movs	r2, #94	@ 0x5e
 8005022:	5a9b      	ldrh	r3, [r3, r2]
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d000      	beq.n	800502c <UART_RxISR_16BIT_FIFOEN+0x14c>
 800502a:	e098      	b.n	800515e <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800502c:	f3ef 8310 	mrs	r3, PRIMASK
 8005030:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005034:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005036:	2301      	movs	r3, #1
 8005038:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800503c:	f383 8810 	msr	PRIMASK, r3
}
 8005040:	46c0      	nop			@ (mov r8, r8)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4974      	ldr	r1, [pc, #464]	@ (8005220 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800504e:	400a      	ands	r2, r1
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005054:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005056:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005058:	f383 8810 	msr	PRIMASK, r3
}
 800505c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800505e:	f3ef 8310 	mrs	r3, PRIMASK
 8005062:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005064:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005066:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005068:	2301      	movs	r3, #1
 800506a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800506c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800506e:	f383 8810 	msr	PRIMASK, r3
}
 8005072:	46c0      	nop			@ (mov r8, r8)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4969      	ldr	r1, [pc, #420]	@ (8005224 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005080:	400a      	ands	r2, r1
 8005082:	609a      	str	r2, [r3, #8]
 8005084:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005086:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800508a:	f383 8810 	msr	PRIMASK, r3
}
 800508e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	228c      	movs	r2, #140	@ 0x8c
 8005094:	2120      	movs	r1, #32
 8005096:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a5f      	ldr	r2, [pc, #380]	@ (8005228 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d01f      	beq.n	80050ee <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	2380      	movs	r3, #128	@ 0x80
 80050b6:	041b      	lsls	r3, r3, #16
 80050b8:	4013      	ands	r3, r2
 80050ba:	d018      	beq.n	80050ee <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050bc:	f3ef 8310 	mrs	r3, PRIMASK
 80050c0:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80050c6:	2301      	movs	r3, #1
 80050c8:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050cc:	f383 8810 	msr	PRIMASK, r3
}
 80050d0:	46c0      	nop			@ (mov r8, r8)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4953      	ldr	r1, [pc, #332]	@ (800522c <UART_RxISR_16BIT_FIFOEN+0x34c>)
 80050de:	400a      	ands	r2, r1
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e8:	f383 8810 	msr	PRIMASK, r3
}
 80050ec:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d12f      	bne.n	8005156 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005100:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005104:	663b      	str	r3, [r7, #96]	@ 0x60
 8005106:	2301      	movs	r3, #1
 8005108:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800510a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510c:	f383 8810 	msr	PRIMASK, r3
}
 8005110:	46c0      	nop			@ (mov r8, r8)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2110      	movs	r1, #16
 800511e:	438a      	bics	r2, r1
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005124:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005128:	f383 8810 	msr	PRIMASK, r3
}
 800512c:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	2210      	movs	r2, #16
 8005136:	4013      	ands	r3, r2
 8005138:	2b10      	cmp	r3, #16
 800513a:	d103      	bne.n	8005144 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2210      	movs	r2, #16
 8005142:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	225c      	movs	r2, #92	@ 0x5c
 8005148:	5a9a      	ldrh	r2, [r3, r2]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	0011      	movs	r1, r2
 800514e:	0018      	movs	r0, r3
 8005150:	f7fe fd40 	bl	8003bd4 <HAL_UARTEx_RxEventCallback>
 8005154:	e003      	b.n	800515e <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	0018      	movs	r0, r3
 800515a:	f7fb ff25 	bl	8000fa8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800515e:	2376      	movs	r3, #118	@ 0x76
 8005160:	18fb      	adds	r3, r7, r3
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d006      	beq.n	8005176 <UART_RxISR_16BIT_FIFOEN+0x296>
 8005168:	2384      	movs	r3, #132	@ 0x84
 800516a:	18fb      	adds	r3, r7, r3
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2220      	movs	r2, #32
 8005170:	4013      	ands	r3, r2
 8005172:	d000      	beq.n	8005176 <UART_RxISR_16BIT_FIFOEN+0x296>
 8005174:	e6d9      	b.n	8004f2a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005176:	205e      	movs	r0, #94	@ 0x5e
 8005178:	183b      	adds	r3, r7, r0
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	215e      	movs	r1, #94	@ 0x5e
 800517e:	5a52      	ldrh	r2, [r2, r1]
 8005180:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005182:	0001      	movs	r1, r0
 8005184:	187b      	adds	r3, r7, r1
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d044      	beq.n	8005216 <UART_RxISR_16BIT_FIFOEN+0x336>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2268      	movs	r2, #104	@ 0x68
 8005190:	5a9b      	ldrh	r3, [r3, r2]
 8005192:	187a      	adds	r2, r7, r1
 8005194:	8812      	ldrh	r2, [r2, #0]
 8005196:	429a      	cmp	r2, r3
 8005198:	d23d      	bcs.n	8005216 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800519a:	f3ef 8310 	mrs	r3, PRIMASK
 800519e:	60fb      	str	r3, [r7, #12]
  return(result);
 80051a0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80051a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051a4:	2301      	movs	r3, #1
 80051a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	f383 8810 	msr	PRIMASK, r3
}
 80051ae:	46c0      	nop			@ (mov r8, r8)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	491d      	ldr	r1, [pc, #116]	@ (8005230 <UART_RxISR_16BIT_FIFOEN+0x350>)
 80051bc:	400a      	ands	r2, r1
 80051be:	609a      	str	r2, [r3, #8]
 80051c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80051c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f383 8810 	msr	PRIMASK, r3
}
 80051ca:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a19      	ldr	r2, [pc, #100]	@ (8005234 <UART_RxISR_16BIT_FIFOEN+0x354>)
 80051d0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051d2:	f3ef 8310 	mrs	r3, PRIMASK
 80051d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80051d8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80051da:	657b      	str	r3, [r7, #84]	@ 0x54
 80051dc:	2301      	movs	r3, #1
 80051de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	f383 8810 	msr	PRIMASK, r3
}
 80051e6:	46c0      	nop			@ (mov r8, r8)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2120      	movs	r1, #32
 80051f4:	430a      	orrs	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	f383 8810 	msr	PRIMASK, r3
}
 8005202:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005204:	e007      	b.n	8005216 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699a      	ldr	r2, [r3, #24]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2108      	movs	r1, #8
 8005212:	430a      	orrs	r2, r1
 8005214:	619a      	str	r2, [r3, #24]
}
 8005216:	46c0      	nop			@ (mov r8, r8)
 8005218:	46bd      	mov	sp, r7
 800521a:	b022      	add	sp, #136	@ 0x88
 800521c:	bd80      	pop	{r7, pc}
 800521e:	46c0      	nop			@ (mov r8, r8)
 8005220:	fffffeff 	.word	0xfffffeff
 8005224:	effffffe 	.word	0xeffffffe
 8005228:	40008000 	.word	0x40008000
 800522c:	fbffffff 	.word	0xfbffffff
 8005230:	efffffff 	.word	0xefffffff
 8005234:	080049dd 	.word	0x080049dd

08005238 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2284      	movs	r2, #132	@ 0x84
 8005244:	5c9b      	ldrb	r3, [r3, r2]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_UARTEx_DisableFifoMode+0x16>
 800524a:	2302      	movs	r3, #2
 800524c:	e027      	b.n	800529e <HAL_UARTEx_DisableFifoMode+0x66>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2284      	movs	r2, #132	@ 0x84
 8005252:	2101      	movs	r1, #1
 8005254:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2288      	movs	r2, #136	@ 0x88
 800525a:	2124      	movs	r1, #36	@ 0x24
 800525c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2101      	movs	r1, #1
 8005272:	438a      	bics	r2, r1
 8005274:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4a0b      	ldr	r2, [pc, #44]	@ (80052a8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800527a:	4013      	ands	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2288      	movs	r2, #136	@ 0x88
 8005290:	2120      	movs	r1, #32
 8005292:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2284      	movs	r2, #132	@ 0x84
 8005298:	2100      	movs	r1, #0
 800529a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	0018      	movs	r0, r3
 80052a0:	46bd      	mov	sp, r7
 80052a2:	b004      	add	sp, #16
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	46c0      	nop			@ (mov r8, r8)
 80052a8:	dfffffff 	.word	0xdfffffff

080052ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2284      	movs	r2, #132	@ 0x84
 80052ba:	5c9b      	ldrb	r3, [r3, r2]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e02e      	b.n	8005322 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2284      	movs	r2, #132	@ 0x84
 80052c8:	2101      	movs	r1, #1
 80052ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2288      	movs	r2, #136	@ 0x88
 80052d0:	2124      	movs	r1, #36	@ 0x24
 80052d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2101      	movs	r1, #1
 80052e8:	438a      	bics	r2, r1
 80052ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	08d9      	lsrs	r1, r3, #3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	0018      	movs	r0, r3
 8005304:	f000 f854 	bl	80053b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2288      	movs	r2, #136	@ 0x88
 8005314:	2120      	movs	r1, #32
 8005316:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2284      	movs	r2, #132	@ 0x84
 800531c:	2100      	movs	r1, #0
 800531e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	0018      	movs	r0, r3
 8005324:	46bd      	mov	sp, r7
 8005326:	b004      	add	sp, #16
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2284      	movs	r2, #132	@ 0x84
 800533a:	5c9b      	ldrb	r3, [r3, r2]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005340:	2302      	movs	r3, #2
 8005342:	e02f      	b.n	80053a4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2284      	movs	r2, #132	@ 0x84
 8005348:	2101      	movs	r1, #1
 800534a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2288      	movs	r2, #136	@ 0x88
 8005350:	2124      	movs	r1, #36	@ 0x24
 8005352:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2101      	movs	r1, #1
 8005368:	438a      	bics	r2, r1
 800536a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	4a0e      	ldr	r2, [pc, #56]	@ (80053ac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005374:	4013      	ands	r3, r2
 8005376:	0019      	movs	r1, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	0018      	movs	r0, r3
 8005386:	f000 f813 	bl	80053b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2288      	movs	r2, #136	@ 0x88
 8005396:	2120      	movs	r1, #32
 8005398:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2284      	movs	r2, #132	@ 0x84
 800539e:	2100      	movs	r1, #0
 80053a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	0018      	movs	r0, r3
 80053a6:	46bd      	mov	sp, r7
 80053a8:	b004      	add	sp, #16
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	f1ffffff 	.word	0xf1ffffff

080053b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80053b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d108      	bne.n	80053d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	226a      	movs	r2, #106	@ 0x6a
 80053c4:	2101      	movs	r1, #1
 80053c6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2268      	movs	r2, #104	@ 0x68
 80053cc:	2101      	movs	r1, #1
 80053ce:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053d0:	e043      	b.n	800545a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053d2:	260f      	movs	r6, #15
 80053d4:	19bb      	adds	r3, r7, r6
 80053d6:	2208      	movs	r2, #8
 80053d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053da:	200e      	movs	r0, #14
 80053dc:	183b      	adds	r3, r7, r0
 80053de:	2208      	movs	r2, #8
 80053e0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	0e5b      	lsrs	r3, r3, #25
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	240d      	movs	r4, #13
 80053ee:	193b      	adds	r3, r7, r4
 80053f0:	2107      	movs	r1, #7
 80053f2:	400a      	ands	r2, r1
 80053f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	0f5b      	lsrs	r3, r3, #29
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	250c      	movs	r5, #12
 8005402:	197b      	adds	r3, r7, r5
 8005404:	2107      	movs	r1, #7
 8005406:	400a      	ands	r2, r1
 8005408:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800540a:	183b      	adds	r3, r7, r0
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	197a      	adds	r2, r7, r5
 8005410:	7812      	ldrb	r2, [r2, #0]
 8005412:	4914      	ldr	r1, [pc, #80]	@ (8005464 <UARTEx_SetNbDataToProcess+0xb4>)
 8005414:	5c8a      	ldrb	r2, [r1, r2]
 8005416:	435a      	muls	r2, r3
 8005418:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800541a:	197b      	adds	r3, r7, r5
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	4a12      	ldr	r2, [pc, #72]	@ (8005468 <UARTEx_SetNbDataToProcess+0xb8>)
 8005420:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005422:	0019      	movs	r1, r3
 8005424:	f7fa fef8 	bl	8000218 <__divsi3>
 8005428:	0003      	movs	r3, r0
 800542a:	b299      	uxth	r1, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	226a      	movs	r2, #106	@ 0x6a
 8005430:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005432:	19bb      	adds	r3, r7, r6
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	193a      	adds	r2, r7, r4
 8005438:	7812      	ldrb	r2, [r2, #0]
 800543a:	490a      	ldr	r1, [pc, #40]	@ (8005464 <UARTEx_SetNbDataToProcess+0xb4>)
 800543c:	5c8a      	ldrb	r2, [r1, r2]
 800543e:	435a      	muls	r2, r3
 8005440:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005442:	193b      	adds	r3, r7, r4
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	4a08      	ldr	r2, [pc, #32]	@ (8005468 <UARTEx_SetNbDataToProcess+0xb8>)
 8005448:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800544a:	0019      	movs	r1, r3
 800544c:	f7fa fee4 	bl	8000218 <__divsi3>
 8005450:	0003      	movs	r3, r0
 8005452:	b299      	uxth	r1, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2268      	movs	r2, #104	@ 0x68
 8005458:	5299      	strh	r1, [r3, r2]
}
 800545a:	46c0      	nop			@ (mov r8, r8)
 800545c:	46bd      	mov	sp, r7
 800545e:	b005      	add	sp, #20
 8005460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005462:	46c0      	nop			@ (mov r8, r8)
 8005464:	080055a8 	.word	0x080055a8
 8005468:	080055b0 	.word	0x080055b0

0800546c <memset>:
 800546c:	0003      	movs	r3, r0
 800546e:	1882      	adds	r2, r0, r2
 8005470:	4293      	cmp	r3, r2
 8005472:	d100      	bne.n	8005476 <memset+0xa>
 8005474:	4770      	bx	lr
 8005476:	7019      	strb	r1, [r3, #0]
 8005478:	3301      	adds	r3, #1
 800547a:	e7f9      	b.n	8005470 <memset+0x4>

0800547c <__libc_init_array>:
 800547c:	b570      	push	{r4, r5, r6, lr}
 800547e:	2600      	movs	r6, #0
 8005480:	4c0c      	ldr	r4, [pc, #48]	@ (80054b4 <__libc_init_array+0x38>)
 8005482:	4d0d      	ldr	r5, [pc, #52]	@ (80054b8 <__libc_init_array+0x3c>)
 8005484:	1b64      	subs	r4, r4, r5
 8005486:	10a4      	asrs	r4, r4, #2
 8005488:	42a6      	cmp	r6, r4
 800548a:	d109      	bne.n	80054a0 <__libc_init_array+0x24>
 800548c:	2600      	movs	r6, #0
 800548e:	f000 f819 	bl	80054c4 <_init>
 8005492:	4c0a      	ldr	r4, [pc, #40]	@ (80054bc <__libc_init_array+0x40>)
 8005494:	4d0a      	ldr	r5, [pc, #40]	@ (80054c0 <__libc_init_array+0x44>)
 8005496:	1b64      	subs	r4, r4, r5
 8005498:	10a4      	asrs	r4, r4, #2
 800549a:	42a6      	cmp	r6, r4
 800549c:	d105      	bne.n	80054aa <__libc_init_array+0x2e>
 800549e:	bd70      	pop	{r4, r5, r6, pc}
 80054a0:	00b3      	lsls	r3, r6, #2
 80054a2:	58eb      	ldr	r3, [r5, r3]
 80054a4:	4798      	blx	r3
 80054a6:	3601      	adds	r6, #1
 80054a8:	e7ee      	b.n	8005488 <__libc_init_array+0xc>
 80054aa:	00b3      	lsls	r3, r6, #2
 80054ac:	58eb      	ldr	r3, [r5, r3]
 80054ae:	4798      	blx	r3
 80054b0:	3601      	adds	r6, #1
 80054b2:	e7f2      	b.n	800549a <__libc_init_array+0x1e>
 80054b4:	080055c0 	.word	0x080055c0
 80054b8:	080055c0 	.word	0x080055c0
 80054bc:	080055c4 	.word	0x080055c4
 80054c0:	080055c0 	.word	0x080055c0

080054c4 <_init>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	46c0      	nop			@ (mov r8, r8)
 80054c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ca:	bc08      	pop	{r3}
 80054cc:	469e      	mov	lr, r3
 80054ce:	4770      	bx	lr

080054d0 <_fini>:
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d2:	46c0      	nop			@ (mov r8, r8)
 80054d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d6:	bc08      	pop	{r3}
 80054d8:	469e      	mov	lr, r3
 80054da:	4770      	bx	lr
