
cfr_mot2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005914  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005a9c  08005a9c  00006a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005be8  08005be8  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005be8  08005be8  00006be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bf0  08005bf0  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bf0  08005bf0  00006bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bf4  08005bf4  00006bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005bf8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  2000005c  08005c54  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08005c54  00007488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001168c  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000249c  00000000  00000000  00018718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  0001abb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c26  00000000  00000000  0001bb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026ea4  00000000  00000000  0001c766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c04  00000000  00000000  0004360a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2584  00000000  00000000  0005620e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148792  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004374  00000000  00000000  001487d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0014cb4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a84 	.word	0x08005a84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08005a84 	.word	0x08005a84

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08e      	sub	sp, #56	@ 0x38
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fe47 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f88d 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 fadf 	bl	8000a98 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004da:	f000 fa5b 	bl	8000994 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 80004de:	f000 f8d9 	bl	8000694 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 80004e2:	f000 f993 	bl	800080c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f931 	bl	800074c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80004ea:	f000 f95f 	bl	80007ac <MX_USART3_UART_Init>
  MX_UART4_Init();
 80004ee:	f000 f8fd 	bl	80006ec <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //PB10 TIM2 CH3
 80004f2:	2108      	movs	r1, #8
 80004f4:	4835      	ldr	r0, [pc, #212]	@ (80005cc <main+0x104>)
 80004f6:	f002 fdd9 	bl	80030ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); //PB11 TIM2 CH4
 80004fa:	210c      	movs	r1, #12
 80004fc:	4833      	ldr	r0, [pc, #204]	@ (80005cc <main+0x104>)
 80004fe:	f002 fdd5 	bl	80030ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //PA8
 8000502:	2100      	movs	r1, #0
 8000504:	4832      	ldr	r0, [pc, #200]	@ (80005d0 <main+0x108>)
 8000506:	f002 fdd1 	bl	80030ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //PA9
 800050a:	2104      	movs	r1, #4
 800050c:	4830      	ldr	r0, [pc, #192]	@ (80005d0 <main+0x108>)
 800050e:	f002 fdcd 	bl	80030ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); //PA10
 8000512:	2108      	movs	r1, #8
 8000514:	482e      	ldr	r0, [pc, #184]	@ (80005d0 <main+0x108>)
 8000516:	f002 fdc9 	bl	80030ac <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)rx_data, sizeof(rx_data));
 800051a:	221a      	movs	r2, #26
 800051c:	492d      	ldr	r1, [pc, #180]	@ (80005d4 <main+0x10c>)
 800051e:	482e      	ldr	r0, [pc, #184]	@ (80005d8 <main+0x110>)
 8000520:	f003 fec2 	bl	80042a8 <HAL_UART_Receive_IT>
  {

	  // Pour le moteur Maxon droit
	  //char direction_d = rx_data[0]; // Premier caractère pour la direction
	  char mot_maxon_dataD[5];      // 4 caractères + '\0' pour la vitesse
	  strncpy(mot_maxon_dataD, (char *)&rx_data[1], 4);
 8000524:	f107 0320 	add.w	r3, r7, #32
 8000528:	2204      	movs	r2, #4
 800052a:	492c      	ldr	r1, [pc, #176]	@ (80005dc <main+0x114>)
 800052c:	4618      	mov	r0, r3
 800052e:	f005 fa5d 	bl	80059ec <strncpy>
	  mot_maxon_dataD[4] = '\0';    // Null terminate
 8000532:	2300      	movs	r3, #0
 8000534:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  int mot_maxon_valueD = atoi(mot_maxon_dataD);
 8000538:	f107 0320 	add.w	r3, r7, #32
 800053c:	4618      	mov	r0, r3
 800053e:	f005 f9c5 	bl	80058cc <atoi>
 8000542:	6378      	str	r0, [r7, #52]	@ 0x34
	  int inv_d = rx_data[0] - '0';
 8000544:	4b23      	ldr	r3, [pc, #140]	@ (80005d4 <main+0x10c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	3b30      	subs	r3, #48	@ 0x30
 800054a:	633b      	str	r3, [r7, #48]	@ 0x30
	  mot_maxonD(mot_maxon_valueD, inv_d);//
 800054c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800054e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000550:	f000 fb3c 	bl	8000bcc <mot_maxonD>

	  // Pour le moteur Maxon gauche
	  //char direction_g = rx_data[5]; // Premier caractère pour la direction
	  char mot_maxon_dataG[5];      // 4 caractères + '\0' pour la vitesse
	  strncpy(mot_maxon_dataG, (char *)&rx_data[6], 4);
 8000554:	f107 0318 	add.w	r3, r7, #24
 8000558:	2204      	movs	r2, #4
 800055a:	4921      	ldr	r1, [pc, #132]	@ (80005e0 <main+0x118>)
 800055c:	4618      	mov	r0, r3
 800055e:	f005 fa45 	bl	80059ec <strncpy>
	  mot_maxon_dataG[4] = '\0';    // Null terminate
 8000562:	2300      	movs	r3, #0
 8000564:	773b      	strb	r3, [r7, #28]
	  int mot_maxon_valueG = atoi(mot_maxon_dataG);
 8000566:	f107 0318 	add.w	r3, r7, #24
 800056a:	4618      	mov	r0, r3
 800056c:	f005 f9ae 	bl	80058cc <atoi>
 8000570:	62f8      	str	r0, [r7, #44]	@ 0x2c
	  int inv_g = rx_data[5] - '0';
 8000572:	4b18      	ldr	r3, [pc, #96]	@ (80005d4 <main+0x10c>)
 8000574:	795b      	ldrb	r3, [r3, #5]
 8000576:	3b30      	subs	r3, #48	@ 0x30
 8000578:	62bb      	str	r3, [r7, #40]	@ 0x28
	  mot_maxonG(mot_maxon_valueG, inv_g);
 800057a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800057c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800057e:	f000 fb55 	bl	8000c2c <mot_maxonG>

	  // Pour les servos (12 octets : rx_data[10] à rx_data[21])
	  char servo_goal_data[14];
	  memcpy(servo_goal_data, (char *)&rx_data[10], 12);
 8000582:	f107 0308 	add.w	r3, r7, #8
 8000586:	220c      	movs	r2, #12
 8000588:	4916      	ldr	r1, [pc, #88]	@ (80005e4 <main+0x11c>)
 800058a:	4618      	mov	r0, r3
 800058c:	f005 fa6c 	bl	8005a68 <memcpy>
	  //servo_goal_data[12] = '\0'; // Optionnel si les données ne sont pas une chaîne
	  servo_goal_data[12] = '\r'; // Ajouter retour chariot
 8000590:	230d      	movs	r3, #13
 8000592:	753b      	strb	r3, [r7, #20]
	  servo_goal_data[13] = '\n'; // Ajouter nouvelle ligne
 8000594:	230a      	movs	r3, #10
 8000596:	757b      	strb	r3, [r7, #21]
	  HAL_UART_Transmit(&huart4, (uint8_t *)servo_goal_data, strlen(servo_goal_data), HAL_MAX_DELAY);
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff fe13 	bl	80001c8 <strlen>
 80005a2:	4603      	mov	r3, r0
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	f107 0108 	add.w	r1, r7, #8
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	480e      	ldr	r0, [pc, #56]	@ (80005e8 <main+0x120>)
 80005b0:	f003 fdf0 	bl	8004194 <HAL_UART_Transmit>

	  // Steppers (rx_data[22] à rx_data[25]) - Scindé en deux UARTs
	  // Première partie (PCB 1) via huart3 : rx_data[22] et rx_data[23]
	  char stepper_data1[2];
	  memcpy(stepper_data1, (char *)&rx_data[22], 2);
 80005b4:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <main+0x10c>)
 80005b6:	8adb      	ldrh	r3, [r3, #22]
 80005b8:	80bb      	strh	r3, [r7, #4]
	  HAL_UART_Transmit(&huart3, (uint8_t *)stepper_data1, 2, HAL_MAX_DELAY);
 80005ba:	1d39      	adds	r1, r7, #4
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	2202      	movs	r2, #2
 80005c2:	480a      	ldr	r0, [pc, #40]	@ (80005ec <main+0x124>)
 80005c4:	f003 fde6 	bl	8004194 <HAL_UART_Transmit>
  {
 80005c8:	bf00      	nop
 80005ca:	e7ab      	b.n	8000524 <main+0x5c>
 80005cc:	200002e4 	.word	0x200002e4
 80005d0:	20000298 	.word	0x20000298
 80005d4:	20000330 	.word	0x20000330
 80005d8:	20000078 	.word	0x20000078
 80005dc:	20000331 	.word	0x20000331
 80005e0:	20000336 	.word	0x20000336
 80005e4:	2000033a 	.word	0x2000033a
 80005e8:	20000100 	.word	0x20000100
 80005ec:	20000210 	.word	0x20000210

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b096      	sub	sp, #88	@ 0x58
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	2244      	movs	r2, #68	@ 0x44
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f005 f9ec 	bl	80059dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	463b      	mov	r3, r7
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000612:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000616:	f001 f97f 	bl	8001918 <HAL_PWREx_ControlVoltageScaling>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000620:	f000 face 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800062c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062e:	2310      	movs	r3, #16
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000636:	2302      	movs	r3, #2
 8000638:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800063a:	2301      	movs	r3, #1
 800063c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800063e:	230a      	movs	r3, #10
 8000640:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000642:	2307      	movs	r3, #7
 8000644:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4618      	mov	r0, r3
 8000654:	f001 f9b6 	bl	80019c4 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800065e:	f000 faaf 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2303      	movs	r3, #3
 8000668:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	2104      	movs	r1, #4
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fd7d 	bl	800217c <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000688:	f000 fa9a 	bl	8000bc0 <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3758      	adds	r7, #88	@ 0x58
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 800069a:	4a13      	ldr	r2, [pc, #76]	@ (80006e8 <MX_LPUART1_UART_Init+0x54>)
 800069c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_LPUART1_UART_Init+0x50>)
 80006d2:	f003 fd11 	bl	80040f8 <HAL_UART_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006dc:	f000 fa70 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000078 	.word	0x20000078
 80006e8:	40008000 	.word	0x40008000

080006ec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <MX_UART4_Init+0x58>)
 80006f2:	4a15      	ldr	r2, [pc, #84]	@ (8000748 <MX_UART4_Init+0x5c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80006f6:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <MX_UART4_Init+0x58>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_UART4_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_UART4_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_UART4_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_UART4_Init+0x58>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_UART4_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_UART4_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <MX_UART4_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_UART4_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_UART4_Init+0x58>)
 8000730:	f003 fce2 	bl	80040f8 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 fa41 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000100 	.word	0x20000100
 8000748:	40004c00 	.word	0x40004c00

0800074c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000752:	4a15      	ldr	r2, [pc, #84]	@ (80007a8 <MX_USART2_UART_Init+0x5c>)
 8000754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000756:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_USART2_UART_Init+0x58>)
 8000790:	f003 fcb2 	bl	80040f8 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800079a:	f000 fa11 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000188 	.word	0x20000188
 80007a8:	40004400 	.word	0x40004400

080007ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b0:	4b14      	ldr	r3, [pc, #80]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	@ (8000808 <MX_USART3_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_USART3_UART_Init+0x58>)
 80007f0:	f003 fc82 	bl	80040f8 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 f9e1 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000210 	.word	0x20000210
 8000808:	40004800 	.word	0x40004800

0800080c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b09a      	sub	sp, #104	@ 0x68
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000812:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	222c      	movs	r2, #44	@ 0x2c
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f005 f8c8 	bl	80059dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800084c:	4b4f      	ldr	r3, [pc, #316]	@ (800098c <MX_TIM1_Init+0x180>)
 800084e:	4a50      	ldr	r2, [pc, #320]	@ (8000990 <MX_TIM1_Init+0x184>)
 8000850:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000852:	4b4e      	ldr	r3, [pc, #312]	@ (800098c <MX_TIM1_Init+0x180>)
 8000854:	224f      	movs	r2, #79	@ 0x4f
 8000856:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000858:	4b4c      	ldr	r3, [pc, #304]	@ (800098c <MX_TIM1_Init+0x180>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800085e:	4b4b      	ldr	r3, [pc, #300]	@ (800098c <MX_TIM1_Init+0x180>)
 8000860:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000864:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000866:	4b49      	ldr	r3, [pc, #292]	@ (800098c <MX_TIM1_Init+0x180>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800086c:	4b47      	ldr	r3, [pc, #284]	@ (800098c <MX_TIM1_Init+0x180>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000872:	4b46      	ldr	r3, [pc, #280]	@ (800098c <MX_TIM1_Init+0x180>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000878:	4844      	ldr	r0, [pc, #272]	@ (800098c <MX_TIM1_Init+0x180>)
 800087a:	f002 fb5f 	bl	8002f3c <HAL_TIM_Base_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000884:	f000 f99c 	bl	8000bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800088c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800088e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000892:	4619      	mov	r1, r3
 8000894:	483d      	ldr	r0, [pc, #244]	@ (800098c <MX_TIM1_Init+0x180>)
 8000896:	f002 fe23 	bl	80034e0 <HAL_TIM_ConfigClockSource>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008a0:	f000 f98e 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008a4:	4839      	ldr	r0, [pc, #228]	@ (800098c <MX_TIM1_Init+0x180>)
 80008a6:	f002 fba0 	bl	8002fea <HAL_TIM_PWM_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80008b0:	f000 f986 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b4:	2300      	movs	r3, #0
 80008b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008b8:	2300      	movs	r3, #0
 80008ba:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008bc:	2300      	movs	r3, #0
 80008be:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008c4:	4619      	mov	r1, r3
 80008c6:	4831      	ldr	r0, [pc, #196]	@ (800098c <MX_TIM1_Init+0x180>)
 80008c8:	f003 fb10 	bl	8003eec <HAL_TIMEx_MasterConfigSynchronization>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80008d2:	f000 f975 	bl	8000bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d6:	2360      	movs	r3, #96	@ 0x60
 80008d8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008de:	2300      	movs	r3, #0
 80008e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008f6:	2200      	movs	r2, #0
 80008f8:	4619      	mov	r1, r3
 80008fa:	4824      	ldr	r0, [pc, #144]	@ (800098c <MX_TIM1_Init+0x180>)
 80008fc:	f002 fcdc 	bl	80032b8 <HAL_TIM_PWM_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000906:	f000 f95b 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800090a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800090e:	2204      	movs	r2, #4
 8000910:	4619      	mov	r1, r3
 8000912:	481e      	ldr	r0, [pc, #120]	@ (800098c <MX_TIM1_Init+0x180>)
 8000914:	f002 fcd0 	bl	80032b8 <HAL_TIM_PWM_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800091e:	f000 f94f 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000922:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000926:	2208      	movs	r2, #8
 8000928:	4619      	mov	r1, r3
 800092a:	4818      	ldr	r0, [pc, #96]	@ (800098c <MX_TIM1_Init+0x180>)
 800092c:	f002 fcc4 	bl	80032b8 <HAL_TIM_PWM_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000936:	f000 f943 	bl	8000bc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800094e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000952:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800095c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4619      	mov	r1, r3
 800096e:	4807      	ldr	r0, [pc, #28]	@ (800098c <MX_TIM1_Init+0x180>)
 8000970:	f003 fb44 	bl	8003ffc <HAL_TIMEx_ConfigBreakDeadTime>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800097a:	f000 f921 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800097e:	4803      	ldr	r0, [pc, #12]	@ (800098c <MX_TIM1_Init+0x180>)
 8000980:	f000 fb12 	bl	8000fa8 <HAL_TIM_MspPostInit>

}
 8000984:	bf00      	nop
 8000986:	3768      	adds	r7, #104	@ 0x68
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000298 	.word	0x20000298
 8000990:	40012c00 	.word	0x40012c00

08000994 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08e      	sub	sp, #56	@ 0x38
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
 80009c2:	615a      	str	r2, [r3, #20]
 80009c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009c6:	4b33      	ldr	r3, [pc, #204]	@ (8000a94 <MX_TIM2_Init+0x100>)
 80009c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80009ce:	4b31      	ldr	r3, [pc, #196]	@ (8000a94 <MX_TIM2_Init+0x100>)
 80009d0:	224f      	movs	r2, #79	@ 0x4f
 80009d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a94 <MX_TIM2_Init+0x100>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80009da:	4b2e      	ldr	r3, [pc, #184]	@ (8000a94 <MX_TIM2_Init+0x100>)
 80009dc:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80009e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a94 <MX_TIM2_Init+0x100>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <MX_TIM2_Init+0x100>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ee:	4829      	ldr	r0, [pc, #164]	@ (8000a94 <MX_TIM2_Init+0x100>)
 80009f0:	f002 faa4 	bl	8002f3c <HAL_TIM_Base_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80009fa:	f000 f8e1 	bl	8000bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4822      	ldr	r0, [pc, #136]	@ (8000a94 <MX_TIM2_Init+0x100>)
 8000a0c:	f002 fd68 	bl	80034e0 <HAL_TIM_ConfigClockSource>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a16:	f000 f8d3 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a1a:	481e      	ldr	r0, [pc, #120]	@ (8000a94 <MX_TIM2_Init+0x100>)
 8000a1c:	f002 fae5 	bl	8002fea <HAL_TIM_PWM_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a26:	f000 f8cb 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4816      	ldr	r0, [pc, #88]	@ (8000a94 <MX_TIM2_Init+0x100>)
 8000a3a:	f003 fa57 	bl	8003eec <HAL_TIMEx_MasterConfigSynchronization>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a44:	f000 f8bc 	bl	8000bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a48:	2360      	movs	r3, #96	@ 0x60
 8000a4a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2208      	movs	r2, #8
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <MX_TIM2_Init+0x100>)
 8000a60:	f002 fc2a 	bl	80032b8 <HAL_TIM_PWM_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000a6a:	f000 f8a9 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a6e:	463b      	mov	r3, r7
 8000a70:	220c      	movs	r2, #12
 8000a72:	4619      	mov	r1, r3
 8000a74:	4807      	ldr	r0, [pc, #28]	@ (8000a94 <MX_TIM2_Init+0x100>)
 8000a76:	f002 fc1f 	bl	80032b8 <HAL_TIM_PWM_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000a80:	f000 f89e 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a84:	4803      	ldr	r0, [pc, #12]	@ (8000a94 <MX_TIM2_Init+0x100>)
 8000a86:	f000 fa8f 	bl	8000fa8 <HAL_TIM_MspPostInit>

}
 8000a8a:	bf00      	nop
 8000a8c:	3738      	adds	r7, #56	@ 0x38
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200002e4 	.word	0x200002e4

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	4b36      	ldr	r3, [pc, #216]	@ (8000b88 <MX_GPIO_Init+0xf0>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab2:	4a35      	ldr	r2, [pc, #212]	@ (8000b88 <MX_GPIO_Init+0xf0>)
 8000ab4:	f043 0304 	orr.w	r3, r3, #4
 8000ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aba:	4b33      	ldr	r3, [pc, #204]	@ (8000b88 <MX_GPIO_Init+0xf0>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac6:	4b30      	ldr	r3, [pc, #192]	@ (8000b88 <MX_GPIO_Init+0xf0>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	4a2f      	ldr	r2, [pc, #188]	@ (8000b88 <MX_GPIO_Init+0xf0>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b88 <MX_GPIO_Init+0xf0>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b2a      	ldr	r3, [pc, #168]	@ (8000b88 <MX_GPIO_Init+0xf0>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	4a29      	ldr	r2, [pc, #164]	@ (8000b88 <MX_GPIO_Init+0xf0>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aea:	4b27      	ldr	r3, [pc, #156]	@ (8000b88 <MX_GPIO_Init+0xf0>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af6:	4b24      	ldr	r3, [pc, #144]	@ (8000b88 <MX_GPIO_Init+0xf0>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afa:	4a23      	ldr	r2, [pc, #140]	@ (8000b88 <MX_GPIO_Init+0xf0>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b02:	4b21      	ldr	r3, [pc, #132]	@ (8000b88 <MX_GPIO_Init+0xf0>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2120      	movs	r1, #32
 8000b12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b16:	f000 fed9 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8000b20:	481a      	ldr	r0, [pc, #104]	@ (8000b8c <MX_GPIO_Init+0xf4>)
 8000b22:	f000 fed3 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b2c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4814      	ldr	r0, [pc, #80]	@ (8000b90 <MX_GPIO_Init+0xf8>)
 8000b3e:	f000 fd1b 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b42:	2320      	movs	r3, #32
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b5c:	f000 fd0c 	bl	8001578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8000b60:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <MX_GPIO_Init+0xf4>)
 8000b7a:	f000 fcfd 	bl	8001578 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	@ 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	48000400 	.word	0x48000400
 8000b90:	48000800 	.word	0x48000800

08000b94 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a06      	ldr	r2, [pc, #24]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x24>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d104      	bne.n	8000bae <HAL_UART_RxCpltCallback+0x1a>
		// Réactiver la réception immédiatement
		HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)rx_data, sizeof(rx_data));
 8000ba4:	221a      	movs	r2, #26
 8000ba6:	4905      	ldr	r1, [pc, #20]	@ (8000bbc <HAL_UART_RxCpltCallback+0x28>)
 8000ba8:	4803      	ldr	r0, [pc, #12]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x24>)
 8000baa:	f003 fb7d 	bl	80042a8 <HAL_UART_Receive_IT>
	}
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000078 	.word	0x20000078
 8000bbc:	20000330 	.word	0x20000330

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <Error_Handler+0x8>

08000bcc <mot_maxonD>:
#include "maxon.h"
#include "main.h"

extern TIM_HandleTypeDef htim2;

void mot_maxonD(int result, int inv) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
    if (inv == 1) {
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d10f      	bne.n	8000bfc <mot_maxonD+0x30>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);    // Direction avant
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2110      	movs	r1, #16
 8000be0:	4810      	ldr	r0, [pc, #64]	@ (8000c24 <mot_maxonD+0x58>)
 8000be2:	f000 fe73 	bl	80018cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bec:	480d      	ldr	r0, [pc, #52]	@ (8000c24 <mot_maxonD+0x58>)
 8000bee:	f000 fe6d 	bl	80018cc <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result);  // Vitesse
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <mot_maxonD+0x5c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	63da      	str	r2, [r3, #60]	@ 0x3c
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  // Direction arrière
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result);  // Vitesse
    }
}
 8000bfa:	e00e      	b.n	8000c1a <mot_maxonD+0x4e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  // Direction arrière
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2110      	movs	r1, #16
 8000c00:	4808      	ldr	r0, [pc, #32]	@ (8000c24 <mot_maxonD+0x58>)
 8000c02:	f000 fe63 	bl	80018cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c0c:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <mot_maxonD+0x58>)
 8000c0e:	f000 fe5d 	bl	80018cc <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result);  // Vitesse
 8000c12:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <mot_maxonD+0x5c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	48000400 	.word	0x48000400
 8000c28:	200002e4 	.word	0x200002e4

08000c2c <mot_maxonG>:

void mot_maxonG(int result, int inv) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
    if (inv == 1) {
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d10f      	bne.n	8000c5c <mot_maxonG+0x30>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);    // Direction avant
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2120      	movs	r1, #32
 8000c40:	4810      	ldr	r0, [pc, #64]	@ (8000c84 <mot_maxonG+0x58>)
 8000c42:	f000 fe43 	bl	80018cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c4c:	480d      	ldr	r0, [pc, #52]	@ (8000c84 <mot_maxonG+0x58>)
 8000c4e:	f000 fe3d 	bl	80018cc <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result);  // Vitesse
 8000c52:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <mot_maxonG+0x5c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	641a      	str	r2, [r3, #64]	@ 0x40
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);  // Direction arrière
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result);  // Vitesse
    }
}
 8000c5a:	e00e      	b.n	8000c7a <mot_maxonG+0x4e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);  // Direction arrière
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2120      	movs	r1, #32
 8000c60:	4808      	ldr	r0, [pc, #32]	@ (8000c84 <mot_maxonG+0x58>)
 8000c62:	f000 fe33 	bl	80018cc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c6c:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <mot_maxonG+0x58>)
 8000c6e:	f000 fe2d 	bl	80018cc <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result);  // Vitesse
 8000c72:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <mot_maxonG+0x5c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	48000400 	.word	0x48000400
 8000c88:	200002e4 	.word	0x200002e4

08000c8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c96:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cae:	4a08      	ldr	r2, [pc, #32]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cb6:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <HAL_MspInit+0x44>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0b2      	sub	sp, #200	@ 0xc8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf0:	2288      	movs	r2, #136	@ 0x88
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f004 fe71 	bl	80059dc <memset>
  if(huart->Instance==LPUART1)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a8b      	ldr	r2, [pc, #556]	@ (8000f2c <HAL_UART_MspInit+0x258>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d143      	bne.n	8000d8c <HAL_UART_MspInit+0xb8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d04:	2320      	movs	r3, #32
 8000d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d10:	4618      	mov	r0, r3
 8000d12:	f001 fc57 	bl	80025c4 <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d1c:	f7ff ff50 	bl	8000bc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d20:	4b83      	ldr	r3, [pc, #524]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d24:	4a82      	ldr	r2, [pc, #520]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000d2c:	4b80      	ldr	r3, [pc, #512]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d38:	4b7d      	ldr	r3, [pc, #500]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3c:	4a7c      	ldr	r2, [pc, #496]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d44:	4b7a      	ldr	r3, [pc, #488]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d50:	2303      	movs	r3, #3
 8000d52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d68:	2308      	movs	r3, #8
 8000d6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000d72:	4619      	mov	r1, r3
 8000d74:	486f      	ldr	r0, [pc, #444]	@ (8000f34 <HAL_UART_MspInit+0x260>)
 8000d76:	f000 fbff 	bl	8001578 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2046      	movs	r0, #70	@ 0x46
 8000d80:	f000 fb45 	bl	800140e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000d84:	2046      	movs	r0, #70	@ 0x46
 8000d86:	f000 fb5e 	bl	8001446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d8a:	e0cb      	b.n	8000f24 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==UART4)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a69      	ldr	r2, [pc, #420]	@ (8000f38 <HAL_UART_MspInit+0x264>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d144      	bne.n	8000e20 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000d96:	2308      	movs	r3, #8
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000da2:	4618      	mov	r0, r3
 8000da4:	f001 fc0e 	bl	80025c4 <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8000dae:	f7ff ff07 	bl	8000bc0 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8000db2:	4b5f      	ldr	r3, [pc, #380]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db6:	4a5e      	ldr	r2, [pc, #376]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000db8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000dbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dbe:	4b5c      	ldr	r3, [pc, #368]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000dc6:	623b      	str	r3, [r7, #32]
 8000dc8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	4b59      	ldr	r3, [pc, #356]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dce:	4a58      	ldr	r2, [pc, #352]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd6:	4b56      	ldr	r3, [pc, #344]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	61fb      	str	r3, [r7, #28]
 8000de0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000de2:	2303      	movs	r3, #3
 8000de4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000dfa:	2308      	movs	r3, #8
 8000dfc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000e04:	4619      	mov	r1, r3
 8000e06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0a:	f000 fbb5 	bl	8001578 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2034      	movs	r0, #52	@ 0x34
 8000e14:	f000 fafb 	bl	800140e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000e18:	2034      	movs	r0, #52	@ 0x34
 8000e1a:	f000 fb14 	bl	8001446 <HAL_NVIC_EnableIRQ>
}
 8000e1e:	e081      	b.n	8000f24 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART2)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a45      	ldr	r2, [pc, #276]	@ (8000f3c <HAL_UART_MspInit+0x268>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d13c      	bne.n	8000ea4 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 fbc4 	bl	80025c4 <HAL_RCCEx_PeriphCLKConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8000e42:	f7ff febd 	bl	8000bc0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e46:	4b3a      	ldr	r3, [pc, #232]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4a:	4a39      	ldr	r2, [pc, #228]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e52:	4b37      	ldr	r3, [pc, #220]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b34      	ldr	r3, [pc, #208]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	4a33      	ldr	r2, [pc, #204]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e6a:	4b31      	ldr	r3, [pc, #196]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8000e76:	230c      	movs	r3, #12
 8000e78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8e:	2307      	movs	r3, #7
 8000e90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e9e:	f000 fb6b 	bl	8001578 <HAL_GPIO_Init>
}
 8000ea2:	e03f      	b.n	8000f24 <HAL_UART_MspInit+0x250>
  else if(huart->Instance==USART3)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a25      	ldr	r2, [pc, #148]	@ (8000f40 <HAL_UART_MspInit+0x26c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d13a      	bne.n	8000f24 <HAL_UART_MspInit+0x250>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f001 fb82 	bl	80025c4 <HAL_RCCEx_PeriphCLKConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 8000ec6:	f7ff fe7b 	bl	8000bc0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ece:	4a18      	ldr	r2, [pc, #96]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ed6:	4b16      	ldr	r3, [pc, #88]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee2:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee6:	4a12      	ldr	r2, [pc, #72]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <HAL_UART_MspInit+0x25c>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000efa:	2330      	movs	r3, #48	@ 0x30
 8000efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f12:	2307      	movs	r3, #7
 8000f14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f18:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <HAL_UART_MspInit+0x260>)
 8000f20:	f000 fb2a 	bl	8001578 <HAL_GPIO_Init>
}
 8000f24:	bf00      	nop
 8000f26:	37c8      	adds	r7, #200	@ 0xc8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40008000 	.word	0x40008000
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48000800 	.word	0x48000800
 8000f38:	40004c00 	.word	0x40004c00
 8000f3c:	40004400 	.word	0x40004400
 8000f40:	40004800 	.word	0x40004800

08000f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a13      	ldr	r2, [pc, #76]	@ (8000fa0 <HAL_TIM_Base_MspInit+0x5c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d10c      	bne.n	8000f70 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <HAL_TIM_Base_MspInit+0x60>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f5a:	4a12      	ldr	r2, [pc, #72]	@ (8000fa4 <HAL_TIM_Base_MspInit+0x60>)
 8000f5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <HAL_TIM_Base_MspInit+0x60>)
 8000f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f6e:	e010      	b.n	8000f92 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f78:	d10b      	bne.n	8000f92 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <HAL_TIM_Base_MspInit+0x60>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7e:	4a09      	ldr	r2, [pc, #36]	@ (8000fa4 <HAL_TIM_Base_MspInit+0x60>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f86:	4b07      	ldr	r3, [pc, #28]	@ (8000fa4 <HAL_TIM_Base_MspInit+0x60>)
 8000f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40012c00 	.word	0x40012c00
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	@ 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a23      	ldr	r2, [pc, #140]	@ (8001054 <HAL_TIM_MspPostInit+0xac>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d11e      	bne.n	8001008 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b23      	ldr	r3, [pc, #140]	@ (8001058 <HAL_TIM_MspPostInit+0xb0>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fce:	4a22      	ldr	r2, [pc, #136]	@ (8001058 <HAL_TIM_MspPostInit+0xb0>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd6:	4b20      	ldr	r3, [pc, #128]	@ (8001058 <HAL_TIM_MspPostInit+0xb0>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000fe2:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001002:	f000 fab9 	bl	8001578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001006:	e021      	b.n	800104c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001010:	d11c      	bne.n	800104c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b11      	ldr	r3, [pc, #68]	@ (8001058 <HAL_TIM_MspPostInit+0xb0>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	4a10      	ldr	r2, [pc, #64]	@ (8001058 <HAL_TIM_MspPostInit+0xb0>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101e:	4b0e      	ldr	r3, [pc, #56]	@ (8001058 <HAL_TIM_MspPostInit+0xb0>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800102a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800103c:	2301      	movs	r3, #1
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	4805      	ldr	r0, [pc, #20]	@ (800105c <HAL_TIM_MspPostInit+0xb4>)
 8001048:	f000 fa96 	bl	8001578 <HAL_GPIO_Init>
}
 800104c:	bf00      	nop
 800104e:	3728      	adds	r7, #40	@ 0x28
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40012c00 	.word	0x40012c00
 8001058:	40021000 	.word	0x40021000
 800105c:	48000400 	.word	0x48000400

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <NMI_Handler+0x4>

08001068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <HardFault_Handler+0x4>

08001070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <MemManage_Handler+0x4>

08001078 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <BusFault_Handler+0x4>

08001080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <UsageFault_Handler+0x4>

08001088 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b6:	f000 f8af 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80010c4:	4802      	ldr	r0, [pc, #8]	@ (80010d0 <UART4_IRQHandler+0x10>)
 80010c6:	f003 f93b 	bl	8004340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000100 	.word	0x20000100

080010d4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <LPUART1_IRQHandler+0x10>)
 80010da:	f003 f931 	bl	8004340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000078 	.word	0x20000078

080010e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <SystemInit+0x20>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f2:	4a05      	ldr	r2, [pc, #20]	@ (8001108 <SystemInit+0x20>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001144 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001110:	f7ff ffea 	bl	80010e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001114:	480c      	ldr	r0, [pc, #48]	@ (8001148 <LoopForever+0x6>)
  ldr r1, =_edata
 8001116:	490d      	ldr	r1, [pc, #52]	@ (800114c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001118:	4a0d      	ldr	r2, [pc, #52]	@ (8001150 <LoopForever+0xe>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0a      	ldr	r2, [pc, #40]	@ (8001154 <LoopForever+0x12>)
  ldr r4, =_ebss
 800112c:	4c0a      	ldr	r4, [pc, #40]	@ (8001158 <LoopForever+0x16>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113a:	f004 fc71 	bl	8005a20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800113e:	f7ff f9c3 	bl	80004c8 <main>

08001142 <LoopForever>:

LoopForever:
    b LoopForever
 8001142:	e7fe      	b.n	8001142 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001144:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001150:	08005bf8 	.word	0x08005bf8
  ldr r2, =_sbss
 8001154:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001158:	20000488 	.word	0x20000488

0800115c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC1_2_IRQHandler>
	...

08001160 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800116a:	4b0c      	ldr	r3, [pc, #48]	@ (800119c <HAL_Init+0x3c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a0b      	ldr	r2, [pc, #44]	@ (800119c <HAL_Init+0x3c>)
 8001170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001174:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001176:	2003      	movs	r0, #3
 8001178:	f000 f93e 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800117c:	2000      	movs	r0, #0
 800117e:	f000 f80f 	bl	80011a0 <HAL_InitTick>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	71fb      	strb	r3, [r7, #7]
 800118c:	e001      	b.n	8001192 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800118e:	f7ff fd7d 	bl	8000c8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001192:	79fb      	ldrb	r3, [r7, #7]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40022000 	.word	0x40022000

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011ac:	4b17      	ldr	r3, [pc, #92]	@ (800120c <HAL_InitTick+0x6c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d023      	beq.n	80011fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011b4:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <HAL_InitTick+0x70>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <HAL_InitTick+0x6c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4619      	mov	r1, r3
 80011be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 f949 	bl	8001462 <HAL_SYSTICK_Config>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10f      	bne.n	80011f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d809      	bhi.n	80011f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011dc:	2200      	movs	r2, #0
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f000 f913 	bl	800140e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <HAL_InitTick+0x74>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e007      	b.n	8001200 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e004      	b.n	8001200 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	e001      	b.n	8001200 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008
 8001210:	20000000 	.word	0x20000000
 8001214:	20000004 	.word	0x20000004

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	@ (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008
 800123c:	2000034c 	.word	0x2000034c

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	2000034c 	.word	0x2000034c

08001258 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001274:	4013      	ands	r3, r2
 8001276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001280:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128a:	4a04      	ldr	r2, [pc, #16]	@ (800129c <__NVIC_SetPriorityGrouping+0x44>)
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	60d3      	str	r3, [r2, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a4:	4b04      	ldr	r3, [pc, #16]	@ (80012b8 <__NVIC_GetPriorityGrouping+0x18>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	f003 0307 	and.w	r3, r3, #7
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db0b      	blt.n	80012e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f003 021f 	and.w	r2, r3, #31
 80012d4:	4907      	ldr	r1, [pc, #28]	@ (80012f4 <__NVIC_EnableIRQ+0x38>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	2001      	movs	r0, #1
 80012de:	fa00 f202 	lsl.w	r2, r0, r2
 80012e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000e100 	.word	0xe000e100

080012f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	6039      	str	r1, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	db0a      	blt.n	8001322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	490c      	ldr	r1, [pc, #48]	@ (8001344 <__NVIC_SetPriority+0x4c>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	0112      	lsls	r2, r2, #4
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	440b      	add	r3, r1
 800131c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001320:	e00a      	b.n	8001338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4908      	ldr	r1, [pc, #32]	@ (8001348 <__NVIC_SetPriority+0x50>)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f003 030f 	and.w	r3, r3, #15
 800132e:	3b04      	subs	r3, #4
 8001330:	0112      	lsls	r2, r2, #4
 8001332:	b2d2      	uxtb	r2, r2
 8001334:	440b      	add	r3, r1
 8001336:	761a      	strb	r2, [r3, #24]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800134c:	b480      	push	{r7}
 800134e:	b089      	sub	sp, #36	@ 0x24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f1c3 0307 	rsb	r3, r3, #7
 8001366:	2b04      	cmp	r3, #4
 8001368:	bf28      	it	cs
 800136a:	2304      	movcs	r3, #4
 800136c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3304      	adds	r3, #4
 8001372:	2b06      	cmp	r3, #6
 8001374:	d902      	bls.n	800137c <NVIC_EncodePriority+0x30>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b03      	subs	r3, #3
 800137a:	e000      	b.n	800137e <NVIC_EncodePriority+0x32>
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	f04f 32ff 	mov.w	r2, #4294967295
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43da      	mvns	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001394:	f04f 31ff 	mov.w	r1, #4294967295
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	fa01 f303 	lsl.w	r3, r1, r3
 800139e:	43d9      	mvns	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a4:	4313      	orrs	r3, r2
         );
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3724      	adds	r7, #36	@ 0x24
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013c4:	d301      	bcc.n	80013ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00f      	b.n	80013ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ca:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <SysTick_Config+0x40>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d2:	210f      	movs	r1, #15
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f7ff ff8e 	bl	80012f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <SysTick_Config+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <SysTick_Config+0x40>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff29 	bl	8001258 <__NVIC_SetPriorityGrouping>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001420:	f7ff ff3e 	bl	80012a0 <__NVIC_GetPriorityGrouping>
 8001424:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	f7ff ff8e 	bl	800134c <NVIC_EncodePriority>
 8001430:	4602      	mov	r2, r0
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff5d 	bl	80012f8 <__NVIC_SetPriority>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff31 	bl	80012bc <__NVIC_EnableIRQ>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffa2 	bl	80013b4 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800147a:	b480      	push	{r7}
 800147c:	b085      	sub	sp, #20
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d008      	beq.n	80014a4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2204      	movs	r2, #4
 8001496:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e022      	b.n	80014ea <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 020e 	bic.w	r2, r2, #14
 80014b2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0201 	bic.w	r2, r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c8:	f003 021c 	and.w	r2, r3, #28
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d0:	2101      	movs	r1, #1
 80014d2:	fa01 f202 	lsl.w	r2, r1, r2
 80014d6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d005      	beq.n	800151a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2204      	movs	r2, #4
 8001512:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	e029      	b.n	800156e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 020e 	bic.w	r2, r2, #14
 8001528:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0201 	bic.w	r2, r2, #1
 8001538:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	f003 021c 	and.w	r2, r3, #28
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	2101      	movs	r1, #1
 8001548:	fa01 f202 	lsl.w	r2, r1, r2
 800154c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	4798      	blx	r3
    }
  }
  return status;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001586:	e17f      	b.n	8001888 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	2101      	movs	r1, #1
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
 8001594:	4013      	ands	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f000 8171 	beq.w	8001882 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d005      	beq.n	80015b8 <HAL_GPIO_Init+0x40>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d130      	bne.n	800161a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2203      	movs	r2, #3
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68da      	ldr	r2, [r3, #12]
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015ee:	2201      	movs	r2, #1
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	091b      	lsrs	r3, r3, #4
 8001604:	f003 0201 	and.w	r2, r3, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	2b03      	cmp	r3, #3
 8001624:	d118      	bne.n	8001658 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800162c:	2201      	movs	r2, #1
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	08db      	lsrs	r3, r3, #3
 8001642:	f003 0201 	and.w	r2, r3, #1
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b03      	cmp	r3, #3
 8001662:	d017      	beq.n	8001694 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2203      	movs	r2, #3
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d123      	bne.n	80016e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	08da      	lsrs	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3208      	adds	r2, #8
 80016a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	220f      	movs	r2, #15
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	08da      	lsrs	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3208      	adds	r2, #8
 80016e2:	6939      	ldr	r1, [r7, #16]
 80016e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0203 	and.w	r2, r3, #3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80ac 	beq.w	8001882 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	4b5f      	ldr	r3, [pc, #380]	@ (80018a8 <HAL_GPIO_Init+0x330>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172e:	4a5e      	ldr	r2, [pc, #376]	@ (80018a8 <HAL_GPIO_Init+0x330>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6613      	str	r3, [r2, #96]	@ 0x60
 8001736:	4b5c      	ldr	r3, [pc, #368]	@ (80018a8 <HAL_GPIO_Init+0x330>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001742:	4a5a      	ldr	r2, [pc, #360]	@ (80018ac <HAL_GPIO_Init+0x334>)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	3302      	adds	r3, #2
 800174a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	220f      	movs	r2, #15
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4013      	ands	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800176c:	d025      	beq.n	80017ba <HAL_GPIO_Init+0x242>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4f      	ldr	r2, [pc, #316]	@ (80018b0 <HAL_GPIO_Init+0x338>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d01f      	beq.n	80017b6 <HAL_GPIO_Init+0x23e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a4e      	ldr	r2, [pc, #312]	@ (80018b4 <HAL_GPIO_Init+0x33c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d019      	beq.n	80017b2 <HAL_GPIO_Init+0x23a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4d      	ldr	r2, [pc, #308]	@ (80018b8 <HAL_GPIO_Init+0x340>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d013      	beq.n	80017ae <HAL_GPIO_Init+0x236>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4c      	ldr	r2, [pc, #304]	@ (80018bc <HAL_GPIO_Init+0x344>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00d      	beq.n	80017aa <HAL_GPIO_Init+0x232>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4b      	ldr	r2, [pc, #300]	@ (80018c0 <HAL_GPIO_Init+0x348>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d007      	beq.n	80017a6 <HAL_GPIO_Init+0x22e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4a      	ldr	r2, [pc, #296]	@ (80018c4 <HAL_GPIO_Init+0x34c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d101      	bne.n	80017a2 <HAL_GPIO_Init+0x22a>
 800179e:	2306      	movs	r3, #6
 80017a0:	e00c      	b.n	80017bc <HAL_GPIO_Init+0x244>
 80017a2:	2307      	movs	r3, #7
 80017a4:	e00a      	b.n	80017bc <HAL_GPIO_Init+0x244>
 80017a6:	2305      	movs	r3, #5
 80017a8:	e008      	b.n	80017bc <HAL_GPIO_Init+0x244>
 80017aa:	2304      	movs	r3, #4
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x244>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e004      	b.n	80017bc <HAL_GPIO_Init+0x244>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e002      	b.n	80017bc <HAL_GPIO_Init+0x244>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_GPIO_Init+0x244>
 80017ba:	2300      	movs	r3, #0
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	f002 0203 	and.w	r2, r2, #3
 80017c2:	0092      	lsls	r2, r2, #2
 80017c4:	4093      	lsls	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017cc:	4937      	ldr	r1, [pc, #220]	@ (80018ac <HAL_GPIO_Init+0x334>)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	3302      	adds	r3, #2
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017da:	4b3b      	ldr	r3, [pc, #236]	@ (80018c8 <HAL_GPIO_Init+0x350>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017fe:	4a32      	ldr	r2, [pc, #200]	@ (80018c8 <HAL_GPIO_Init+0x350>)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001804:	4b30      	ldr	r3, [pc, #192]	@ (80018c8 <HAL_GPIO_Init+0x350>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001828:	4a27      	ldr	r2, [pc, #156]	@ (80018c8 <HAL_GPIO_Init+0x350>)
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800182e:	4b26      	ldr	r3, [pc, #152]	@ (80018c8 <HAL_GPIO_Init+0x350>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001852:	4a1d      	ldr	r2, [pc, #116]	@ (80018c8 <HAL_GPIO_Init+0x350>)
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <HAL_GPIO_Init+0x350>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800187c:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <HAL_GPIO_Init+0x350>)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa22 f303 	lsr.w	r3, r2, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	f47f ae78 	bne.w	8001588 <HAL_GPIO_Init+0x10>
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	371c      	adds	r7, #28
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000
 80018ac:	40010000 	.word	0x40010000
 80018b0:	48000400 	.word	0x48000400
 80018b4:	48000800 	.word	0x48000800
 80018b8:	48000c00 	.word	0x48000c00
 80018bc:	48001000 	.word	0x48001000
 80018c0:	48001400 	.word	0x48001400
 80018c4:	48001800 	.word	0x48001800
 80018c8:	40010400 	.word	0x40010400

080018cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
 80018d8:	4613      	mov	r3, r2
 80018da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018e8:	e002      	b.n	80018f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001900:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <HAL_PWREx_GetVoltageRange+0x18>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40007000 	.word	0x40007000

08001918 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001926:	d130      	bne.n	800198a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001928:	4b23      	ldr	r3, [pc, #140]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001934:	d038      	beq.n	80019a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800193e:	4a1e      	ldr	r2, [pc, #120]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001940:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001944:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001946:	4b1d      	ldr	r3, [pc, #116]	@ (80019bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2232      	movs	r2, #50	@ 0x32
 800194c:	fb02 f303 	mul.w	r3, r2, r3
 8001950:	4a1b      	ldr	r2, [pc, #108]	@ (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	0c9b      	lsrs	r3, r3, #18
 8001958:	3301      	adds	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800195c:	e002      	b.n	8001964 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	3b01      	subs	r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001964:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800196c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001970:	d102      	bne.n	8001978 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f2      	bne.n	800195e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001978:	4b0f      	ldr	r3, [pc, #60]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001984:	d110      	bne.n	80019a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e00f      	b.n	80019aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001996:	d007      	beq.n	80019a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001998:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019a0:	4a05      	ldr	r2, [pc, #20]	@ (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40007000 	.word	0x40007000
 80019bc:	20000000 	.word	0x20000000
 80019c0:	431bde83 	.word	0x431bde83

080019c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e3ca      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d6:	4b97      	ldr	r3, [pc, #604]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019e0:	4b94      	ldr	r3, [pc, #592]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 80e4 	beq.w	8001bc0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d007      	beq.n	8001a0e <HAL_RCC_OscConfig+0x4a>
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	2b0c      	cmp	r3, #12
 8001a02:	f040 808b 	bne.w	8001b1c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	f040 8087 	bne.w	8001b1c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a0e:	4b89      	ldr	r3, [pc, #548]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d005      	beq.n	8001a26 <HAL_RCC_OscConfig+0x62>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e3a2      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1a      	ldr	r2, [r3, #32]
 8001a2a:	4b82      	ldr	r3, [pc, #520]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d004      	beq.n	8001a40 <HAL_RCC_OscConfig+0x7c>
 8001a36:	4b7f      	ldr	r3, [pc, #508]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a3e:	e005      	b.n	8001a4c <HAL_RCC_OscConfig+0x88>
 8001a40:	4b7c      	ldr	r3, [pc, #496]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d223      	bcs.n	8001a98 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 fd55 	bl	8002504 <RCC_SetFlashLatencyFromMSIRange>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e383      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a64:	4b73      	ldr	r3, [pc, #460]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a72      	ldr	r2, [pc, #456]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a6a:	f043 0308 	orr.w	r3, r3, #8
 8001a6e:	6013      	str	r3, [r2, #0]
 8001a70:	4b70      	ldr	r3, [pc, #448]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	496d      	ldr	r1, [pc, #436]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a82:	4b6c      	ldr	r3, [pc, #432]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	4968      	ldr	r1, [pc, #416]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	604b      	str	r3, [r1, #4]
 8001a96:	e025      	b.n	8001ae4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a98:	4b66      	ldr	r3, [pc, #408]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a65      	ldr	r2, [pc, #404]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	f043 0308 	orr.w	r3, r3, #8
 8001aa2:	6013      	str	r3, [r2, #0]
 8001aa4:	4b63      	ldr	r3, [pc, #396]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	4960      	ldr	r1, [pc, #384]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ab6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	495b      	ldr	r1, [pc, #364]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d109      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 fd15 	bl	8002504 <RCC_SetFlashLatencyFromMSIRange>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e343      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ae4:	f000 fc4a 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4b52      	ldr	r3, [pc, #328]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	091b      	lsrs	r3, r3, #4
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	4950      	ldr	r1, [pc, #320]	@ (8001c38 <HAL_RCC_OscConfig+0x274>)
 8001af6:	5ccb      	ldrb	r3, [r1, r3]
 8001af8:	f003 031f 	and.w	r3, r3, #31
 8001afc:	fa22 f303 	lsr.w	r3, r2, r3
 8001b00:	4a4e      	ldr	r2, [pc, #312]	@ (8001c3c <HAL_RCC_OscConfig+0x278>)
 8001b02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b04:	4b4e      	ldr	r3, [pc, #312]	@ (8001c40 <HAL_RCC_OscConfig+0x27c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fb49 	bl	80011a0 <HAL_InitTick>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d052      	beq.n	8001bbe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	e327      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d032      	beq.n	8001b8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b24:	4b43      	ldr	r3, [pc, #268]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a42      	ldr	r2, [pc, #264]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b30:	f7ff fb86 	bl	8001240 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b38:	f7ff fb82 	bl	8001240 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e310      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b56:	4b37      	ldr	r3, [pc, #220]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a36      	ldr	r2, [pc, #216]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	f043 0308 	orr.w	r3, r3, #8
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b34      	ldr	r3, [pc, #208]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4931      	ldr	r1, [pc, #196]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b74:	4b2f      	ldr	r3, [pc, #188]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	492c      	ldr	r1, [pc, #176]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
 8001b88:	e01a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a29      	ldr	r2, [pc, #164]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b96:	f7ff fb53 	bl	8001240 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fb4f 	bl	8001240 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e2dd      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bb0:	4b20      	ldr	r3, [pc, #128]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x1da>
 8001bbc:	e000      	b.n	8001bc0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bbe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d074      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d005      	beq.n	8001bde <HAL_RCC_OscConfig+0x21a>
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b0c      	cmp	r3, #12
 8001bd6:	d10e      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d10b      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bde:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d064      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x2f0>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d160      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e2ba      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bfe:	d106      	bne.n	8001c0e <HAL_RCC_OscConfig+0x24a>
 8001c00:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0b      	ldr	r2, [pc, #44]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	e026      	b.n	8001c5c <HAL_RCC_OscConfig+0x298>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c16:	d115      	bne.n	8001c44 <HAL_RCC_OscConfig+0x280>
 8001c18:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a05      	ldr	r2, [pc, #20]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a02      	ldr	r2, [pc, #8]	@ (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	e014      	b.n	8001c5c <HAL_RCC_OscConfig+0x298>
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	08005a9c 	.word	0x08005a9c
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000004 	.word	0x20000004
 8001c44:	4ba0      	ldr	r3, [pc, #640]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a9f      	ldr	r2, [pc, #636]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b9d      	ldr	r3, [pc, #628]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a9c      	ldr	r2, [pc, #624]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001c56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d013      	beq.n	8001c8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff faec 	bl	8001240 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c6c:	f7ff fae8 	bl	8001240 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b64      	cmp	r3, #100	@ 0x64
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e276      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7e:	4b92      	ldr	r3, [pc, #584]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x2a8>
 8001c8a:	e014      	b.n	8001cb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7ff fad8 	bl	8001240 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c94:	f7ff fad4 	bl	8001240 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e262      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ca6:	4b88      	ldr	r3, [pc, #544]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x2d0>
 8001cb2:	e000      	b.n	8001cb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d060      	beq.n	8001d84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x310>
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	d119      	bne.n	8001d02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d116      	bne.n	8001d02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd4:	4b7c      	ldr	r3, [pc, #496]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_OscConfig+0x328>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e23f      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cec:	4b76      	ldr	r3, [pc, #472]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	061b      	lsls	r3, r3, #24
 8001cfa:	4973      	ldr	r1, [pc, #460]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d00:	e040      	b.n	8001d84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d023      	beq.n	8001d52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d0a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d16:	f7ff fa93 	bl	8001240 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1e:	f7ff fa8f 	bl	8001240 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e21d      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d30:	4b65      	ldr	r3, [pc, #404]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3c:	4b62      	ldr	r3, [pc, #392]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	061b      	lsls	r3, r3, #24
 8001d4a:	495f      	ldr	r1, [pc, #380]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
 8001d50:	e018      	b.n	8001d84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d52:	4b5d      	ldr	r3, [pc, #372]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a5c      	ldr	r2, [pc, #368]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5e:	f7ff fa6f 	bl	8001240 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d64:	e008      	b.n	8001d78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d66:	f7ff fa6b 	bl	8001240 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e1f9      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d78:	4b53      	ldr	r3, [pc, #332]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1f0      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0308 	and.w	r3, r3, #8
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d03c      	beq.n	8001e0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d98:	4b4b      	ldr	r3, [pc, #300]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d9e:	4a4a      	ldr	r2, [pc, #296]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7ff fa4a 	bl	8001240 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db0:	f7ff fa46 	bl	8001240 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e1d4      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc2:	4b41      	ldr	r3, [pc, #260]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0ef      	beq.n	8001db0 <HAL_RCC_OscConfig+0x3ec>
 8001dd0:	e01b      	b.n	8001e0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dd8:	4a3b      	ldr	r2, [pc, #236]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001dda:	f023 0301 	bic.w	r3, r3, #1
 8001dde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de2:	f7ff fa2d 	bl	8001240 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dea:	f7ff fa29 	bl	8001240 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e1b7      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dfc:	4b32      	ldr	r3, [pc, #200]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1ef      	bne.n	8001dea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80a6 	beq.w	8001f64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10d      	bne.n	8001e44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e28:	4b27      	ldr	r3, [pc, #156]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2c:	4a26      	ldr	r2, [pc, #152]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e34:	4b24      	ldr	r3, [pc, #144]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e40:	2301      	movs	r3, #1
 8001e42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e44:	4b21      	ldr	r3, [pc, #132]	@ (8001ecc <HAL_RCC_OscConfig+0x508>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d118      	bne.n	8001e82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e50:	4b1e      	ldr	r3, [pc, #120]	@ (8001ecc <HAL_RCC_OscConfig+0x508>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1d      	ldr	r2, [pc, #116]	@ (8001ecc <HAL_RCC_OscConfig+0x508>)
 8001e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5c:	f7ff f9f0 	bl	8001240 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e64:	f7ff f9ec 	bl	8001240 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e17a      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e76:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <HAL_RCC_OscConfig+0x508>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4d8>
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e90:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e9a:	e029      	b.n	8001ef0 <HAL_RCC_OscConfig+0x52c>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	d115      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x50c>
 8001ea4:	4b08      	ldr	r3, [pc, #32]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eaa:	4a07      	ldr	r2, [pc, #28]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eba:	4a03      	ldr	r2, [pc, #12]	@ (8001ec8 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ec4:	e014      	b.n	8001ef0 <HAL_RCC_OscConfig+0x52c>
 8001ec6:	bf00      	nop
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	40007000 	.word	0x40007000
 8001ed0:	4b9c      	ldr	r3, [pc, #624]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed6:	4a9b      	ldr	r2, [pc, #620]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ee0:	4b98      	ldr	r3, [pc, #608]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee6:	4a97      	ldr	r2, [pc, #604]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8001ee8:	f023 0304 	bic.w	r3, r3, #4
 8001eec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d016      	beq.n	8001f26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef8:	f7ff f9a2 	bl	8001240 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7ff f99e 	bl	8001240 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e12a      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f16:	4b8b      	ldr	r3, [pc, #556]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8001f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0ed      	beq.n	8001f00 <HAL_RCC_OscConfig+0x53c>
 8001f24:	e015      	b.n	8001f52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f26:	f7ff f98b 	bl	8001240 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f2c:	e00a      	b.n	8001f44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7ff f987 	bl	8001240 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e113      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f44:	4b7f      	ldr	r3, [pc, #508]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1ed      	bne.n	8001f2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f52:	7ffb      	ldrb	r3, [r7, #31]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d105      	bne.n	8001f64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f58:	4b7a      	ldr	r3, [pc, #488]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	4a79      	ldr	r2, [pc, #484]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8001f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f62:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80fe 	beq.w	800216a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	f040 80d0 	bne.w	8002118 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f78:	4b72      	ldr	r3, [pc, #456]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f003 0203 	and.w	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d130      	bne.n	8001fee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	3b01      	subs	r3, #1
 8001f98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d127      	bne.n	8001fee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d11f      	bne.n	8001fee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fb8:	2a07      	cmp	r2, #7
 8001fba:	bf14      	ite	ne
 8001fbc:	2201      	movne	r2, #1
 8001fbe:	2200      	moveq	r2, #0
 8001fc0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d113      	bne.n	8001fee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fd0:	085b      	lsrs	r3, r3, #1
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d109      	bne.n	8001fee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe4:	085b      	lsrs	r3, r3, #1
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d06e      	beq.n	80020cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	2b0c      	cmp	r3, #12
 8001ff2:	d069      	beq.n	80020c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ff4:	4b53      	ldr	r3, [pc, #332]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002000:	4b50      	ldr	r3, [pc, #320]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0ad      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002010:	4b4c      	ldr	r3, [pc, #304]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a4b      	ldr	r2, [pc, #300]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8002016:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800201a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800201c:	f7ff f910 	bl	8001240 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002024:	f7ff f90c 	bl	8001240 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e09a      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002036:	4b43      	ldr	r3, [pc, #268]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002042:	4b40      	ldr	r3, [pc, #256]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	4b40      	ldr	r3, [pc, #256]	@ (8002148 <HAL_RCC_OscConfig+0x784>)
 8002048:	4013      	ands	r3, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002052:	3a01      	subs	r2, #1
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	4311      	orrs	r1, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800205c:	0212      	lsls	r2, r2, #8
 800205e:	4311      	orrs	r1, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002064:	0852      	lsrs	r2, r2, #1
 8002066:	3a01      	subs	r2, #1
 8002068:	0552      	lsls	r2, r2, #21
 800206a:	4311      	orrs	r1, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002070:	0852      	lsrs	r2, r2, #1
 8002072:	3a01      	subs	r2, #1
 8002074:	0652      	lsls	r2, r2, #25
 8002076:	4311      	orrs	r1, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800207c:	0912      	lsrs	r2, r2, #4
 800207e:	0452      	lsls	r2, r2, #17
 8002080:	430a      	orrs	r2, r1
 8002082:	4930      	ldr	r1, [pc, #192]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8002084:	4313      	orrs	r3, r2
 8002086:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002088:	4b2e      	ldr	r3, [pc, #184]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a2d      	ldr	r2, [pc, #180]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 800208e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002092:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002094:	4b2b      	ldr	r3, [pc, #172]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4a2a      	ldr	r2, [pc, #168]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 800209a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800209e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020a0:	f7ff f8ce 	bl	8001240 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a8:	f7ff f8ca 	bl	8001240 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e058      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ba:	4b22      	ldr	r3, [pc, #136]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020c6:	e050      	b.n	800216a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e04f      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d148      	bne.n	800216a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a19      	ldr	r2, [pc, #100]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 80020de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020e4:	4b17      	ldr	r3, [pc, #92]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4a16      	ldr	r2, [pc, #88]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 80020ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020f0:	f7ff f8a6 	bl	8001240 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f8:	f7ff f8a2 	bl	8001240 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e030      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210a:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0x734>
 8002116:	e028      	b.n	800216a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2b0c      	cmp	r3, #12
 800211c:	d023      	beq.n	8002166 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211e:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a08      	ldr	r2, [pc, #32]	@ (8002144 <HAL_RCC_OscConfig+0x780>)
 8002124:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212a:	f7ff f889 	bl	8001240 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002130:	e00c      	b.n	800214c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002132:	f7ff f885 	bl	8001240 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d905      	bls.n	800214c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e013      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
 8002144:	40021000 	.word	0x40021000
 8002148:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800214c:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <HAL_RCC_OscConfig+0x7b0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1ec      	bne.n	8002132 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <HAL_RCC_OscConfig+0x7b0>)
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	4905      	ldr	r1, [pc, #20]	@ (8002174 <HAL_RCC_OscConfig+0x7b0>)
 800215e:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_RCC_OscConfig+0x7b4>)
 8002160:	4013      	ands	r3, r2
 8002162:	60cb      	str	r3, [r1, #12]
 8002164:	e001      	b.n	800216a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3720      	adds	r7, #32
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40021000 	.word	0x40021000
 8002178:	feeefffc 	.word	0xfeeefffc

0800217c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0e7      	b.n	8002360 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002190:	4b75      	ldr	r3, [pc, #468]	@ (8002368 <HAL_RCC_ClockConfig+0x1ec>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d910      	bls.n	80021c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b72      	ldr	r3, [pc, #456]	@ (8002368 <HAL_RCC_ClockConfig+0x1ec>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 0207 	bic.w	r2, r3, #7
 80021a6:	4970      	ldr	r1, [pc, #448]	@ (8002368 <HAL_RCC_ClockConfig+0x1ec>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b6e      	ldr	r3, [pc, #440]	@ (8002368 <HAL_RCC_ClockConfig+0x1ec>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0cf      	b.n	8002360 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d010      	beq.n	80021ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	4b66      	ldr	r3, [pc, #408]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021d8:	429a      	cmp	r2, r3
 80021da:	d908      	bls.n	80021ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021dc:	4b63      	ldr	r3, [pc, #396]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4960      	ldr	r1, [pc, #384]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d04c      	beq.n	8002294 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002202:	4b5a      	ldr	r3, [pc, #360]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d121      	bne.n	8002252 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0a6      	b.n	8002360 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800221a:	4b54      	ldr	r3, [pc, #336]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d115      	bne.n	8002252 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e09a      	b.n	8002360 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002232:	4b4e      	ldr	r3, [pc, #312]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e08e      	b.n	8002360 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002242:	4b4a      	ldr	r3, [pc, #296]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e086      	b.n	8002360 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002252:	4b46      	ldr	r3, [pc, #280]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f023 0203 	bic.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4943      	ldr	r1, [pc, #268]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002264:	f7fe ffec 	bl	8001240 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7fe ffe8 	bl	8001240 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e06e      	b.n	8002360 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	4b3a      	ldr	r3, [pc, #232]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 020c 	and.w	r2, r3, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d1eb      	bne.n	800226c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d010      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	4b31      	ldr	r3, [pc, #196]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d208      	bcs.n	80022c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b0:	4b2e      	ldr	r3, [pc, #184]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	492b      	ldr	r1, [pc, #172]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022c2:	4b29      	ldr	r3, [pc, #164]	@ (8002368 <HAL_RCC_ClockConfig+0x1ec>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d210      	bcs.n	80022f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d0:	4b25      	ldr	r3, [pc, #148]	@ (8002368 <HAL_RCC_ClockConfig+0x1ec>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 0207 	bic.w	r2, r3, #7
 80022d8:	4923      	ldr	r1, [pc, #140]	@ (8002368 <HAL_RCC_ClockConfig+0x1ec>)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e0:	4b21      	ldr	r3, [pc, #132]	@ (8002368 <HAL_RCC_ClockConfig+0x1ec>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e036      	b.n	8002360 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d008      	beq.n	8002310 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022fe:	4b1b      	ldr	r3, [pc, #108]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	4918      	ldr	r1, [pc, #96]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 800230c:	4313      	orrs	r3, r2
 800230e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d009      	beq.n	8002330 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800231c:	4b13      	ldr	r3, [pc, #76]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4910      	ldr	r1, [pc, #64]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 800232c:	4313      	orrs	r3, r2
 800232e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002330:	f000 f824 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8002334:	4602      	mov	r2, r0
 8002336:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <HAL_RCC_ClockConfig+0x1f0>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	490b      	ldr	r1, [pc, #44]	@ (8002370 <HAL_RCC_ClockConfig+0x1f4>)
 8002342:	5ccb      	ldrb	r3, [r1, r3]
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
 800234c:	4a09      	ldr	r2, [pc, #36]	@ (8002374 <HAL_RCC_ClockConfig+0x1f8>)
 800234e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002350:	4b09      	ldr	r3, [pc, #36]	@ (8002378 <HAL_RCC_ClockConfig+0x1fc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe ff23 	bl	80011a0 <HAL_InitTick>
 800235a:	4603      	mov	r3, r0
 800235c:	72fb      	strb	r3, [r7, #11]

  return status;
 800235e:	7afb      	ldrb	r3, [r7, #11]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40022000 	.word	0x40022000
 800236c:	40021000 	.word	0x40021000
 8002370:	08005a9c 	.word	0x08005a9c
 8002374:	20000000 	.word	0x20000000
 8002378:	20000004 	.word	0x20000004

0800237c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	@ 0x24
 8002380:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238a:	4b3e      	ldr	r3, [pc, #248]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x108>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002394:	4b3b      	ldr	r3, [pc, #236]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x108>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x34>
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d121      	bne.n	80023ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d11e      	bne.n	80023ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023b0:	4b34      	ldr	r3, [pc, #208]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x108>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d107      	bne.n	80023cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023bc:	4b31      	ldr	r3, [pc, #196]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x108>)
 80023be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	e005      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10d      	bne.n	8002404 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ec:	e00a      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d102      	bne.n	80023fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023f4:	4b25      	ldr	r3, [pc, #148]	@ (800248c <HAL_RCC_GetSysClockFreq+0x110>)
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	e004      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002400:	4b23      	ldr	r3, [pc, #140]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x114>)
 8002402:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d134      	bne.n	8002474 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800240a:	4b1e      	ldr	r3, [pc, #120]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x108>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d003      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0xa6>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d003      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0xac>
 8002420:	e005      	b.n	800242e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002422:	4b1a      	ldr	r3, [pc, #104]	@ (800248c <HAL_RCC_GetSysClockFreq+0x110>)
 8002424:	617b      	str	r3, [r7, #20]
      break;
 8002426:	e005      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002428:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x114>)
 800242a:	617b      	str	r3, [r7, #20]
      break;
 800242c:	e002      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	617b      	str	r3, [r7, #20]
      break;
 8002432:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002434:	4b13      	ldr	r3, [pc, #76]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x108>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	3301      	adds	r3, #1
 8002440:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002442:	4b10      	ldr	r3, [pc, #64]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x108>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	fb03 f202 	mul.w	r2, r3, r2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	fbb2 f3f3 	udiv	r3, r2, r3
 8002458:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800245a:	4b0a      	ldr	r3, [pc, #40]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x108>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	0e5b      	lsrs	r3, r3, #25
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	3301      	adds	r3, #1
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002472:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002474:	69bb      	ldr	r3, [r7, #24]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3724      	adds	r7, #36	@ 0x24
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	08005ab4 	.word	0x08005ab4
 800248c:	00f42400 	.word	0x00f42400
 8002490:	007a1200 	.word	0x007a1200

08002494 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002498:	4b03      	ldr	r3, [pc, #12]	@ (80024a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000000 	.word	0x20000000

080024ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024b0:	f7ff fff0 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4904      	ldr	r1, [pc, #16]	@ (80024d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000
 80024d4:	08005aac 	.word	0x08005aac

080024d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024dc:	f7ff ffda 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	0adb      	lsrs	r3, r3, #11
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	4904      	ldr	r1, [pc, #16]	@ (8002500 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40021000 	.word	0x40021000
 8002500:	08005aac 	.word	0x08005aac

08002504 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800250c:	2300      	movs	r3, #0
 800250e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002510:	4b2a      	ldr	r3, [pc, #168]	@ (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800251c:	f7ff f9ee 	bl	80018fc <HAL_PWREx_GetVoltageRange>
 8002520:	6178      	str	r0, [r7, #20]
 8002522:	e014      	b.n	800254e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002524:	4b25      	ldr	r3, [pc, #148]	@ (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002528:	4a24      	ldr	r2, [pc, #144]	@ (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800252a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800252e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002530:	4b22      	ldr	r3, [pc, #136]	@ (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800253c:	f7ff f9de 	bl	80018fc <HAL_PWREx_GetVoltageRange>
 8002540:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002542:	4b1e      	ldr	r3, [pc, #120]	@ (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002546:	4a1d      	ldr	r2, [pc, #116]	@ (80025bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002548:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800254c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002554:	d10b      	bne.n	800256e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b80      	cmp	r3, #128	@ 0x80
 800255a:	d919      	bls.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002560:	d902      	bls.n	8002568 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002562:	2302      	movs	r3, #2
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	e013      	b.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002568:	2301      	movs	r3, #1
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	e010      	b.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b80      	cmp	r3, #128	@ 0x80
 8002572:	d902      	bls.n	800257a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002574:	2303      	movs	r3, #3
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	e00a      	b.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b80      	cmp	r3, #128	@ 0x80
 800257e:	d102      	bne.n	8002586 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002580:	2302      	movs	r3, #2
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	e004      	b.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b70      	cmp	r3, #112	@ 0x70
 800258a:	d101      	bne.n	8002590 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800258c:	2301      	movs	r3, #1
 800258e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002590:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 0207 	bic.w	r2, r3, #7
 8002598:	4909      	ldr	r1, [pc, #36]	@ (80025c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025a0:	4b07      	ldr	r3, [pc, #28]	@ (80025c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d001      	beq.n	80025b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40022000 	.word	0x40022000

080025c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025cc:	2300      	movs	r3, #0
 80025ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025d0:	2300      	movs	r3, #0
 80025d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d041      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025e4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025e8:	d02a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025ee:	d824      	bhi.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025f4:	d008      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025fa:	d81e      	bhi.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002600:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002604:	d010      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002606:	e018      	b.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002608:	4b86      	ldr	r3, [pc, #536]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4a85      	ldr	r2, [pc, #532]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002612:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002614:	e015      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3304      	adds	r3, #4
 800261a:	2100      	movs	r1, #0
 800261c:	4618      	mov	r0, r3
 800261e:	f000 fabb 	bl	8002b98 <RCCEx_PLLSAI1_Config>
 8002622:	4603      	mov	r3, r0
 8002624:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002626:	e00c      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3320      	adds	r3, #32
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fba6 	bl	8002d80 <RCCEx_PLLSAI2_Config>
 8002634:	4603      	mov	r3, r0
 8002636:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002638:	e003      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	74fb      	strb	r3, [r7, #19]
      break;
 800263e:	e000      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002642:	7cfb      	ldrb	r3, [r7, #19]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10b      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002648:	4b76      	ldr	r3, [pc, #472]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002656:	4973      	ldr	r1, [pc, #460]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800265e:	e001      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002660:	7cfb      	ldrb	r3, [r7, #19]
 8002662:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d041      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002674:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002678:	d02a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800267a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800267e:	d824      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002680:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002684:	d008      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002686:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800268a:	d81e      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x106>
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00a      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002694:	d010      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002696:	e018      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002698:	4b62      	ldr	r3, [pc, #392]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4a61      	ldr	r2, [pc, #388]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026a4:	e015      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fa73 	bl	8002b98 <RCCEx_PLLSAI1_Config>
 80026b2:	4603      	mov	r3, r0
 80026b4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026b6:	e00c      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3320      	adds	r3, #32
 80026bc:	2100      	movs	r1, #0
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fb5e 	bl	8002d80 <RCCEx_PLLSAI2_Config>
 80026c4:	4603      	mov	r3, r0
 80026c6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026c8:	e003      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	74fb      	strb	r3, [r7, #19]
      break;
 80026ce:	e000      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026d2:	7cfb      	ldrb	r3, [r7, #19]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10b      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026d8:	4b52      	ldr	r3, [pc, #328]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026e6:	494f      	ldr	r1, [pc, #316]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026ee:	e001      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a0 	beq.w	8002842 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002706:	4b47      	ldr	r3, [pc, #284]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002712:	2301      	movs	r3, #1
 8002714:	e000      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002716:	2300      	movs	r3, #0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00d      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800271c:	4b41      	ldr	r3, [pc, #260]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002720:	4a40      	ldr	r2, [pc, #256]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002726:	6593      	str	r3, [r2, #88]	@ 0x58
 8002728:	4b3e      	ldr	r3, [pc, #248]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002734:	2301      	movs	r3, #1
 8002736:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002738:	4b3b      	ldr	r3, [pc, #236]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a3a      	ldr	r2, [pc, #232]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800273e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002742:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002744:	f7fe fd7c 	bl	8001240 <HAL_GetTick>
 8002748:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800274a:	e009      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274c:	f7fe fd78 	bl	8001240 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d902      	bls.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	74fb      	strb	r3, [r7, #19]
        break;
 800275e:	e005      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002760:	4b31      	ldr	r3, [pc, #196]	@ (8002828 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0ef      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800276c:	7cfb      	ldrb	r3, [r7, #19]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d15c      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002772:	4b2c      	ldr	r3, [pc, #176]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002778:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800277c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01f      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	429a      	cmp	r2, r3
 800278e:	d019      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002790:	4b24      	ldr	r3, [pc, #144]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800279a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800279c:	4b21      	ldr	r3, [pc, #132]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a2:	4a20      	ldr	r2, [pc, #128]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027bc:	4a19      	ldr	r2, [pc, #100]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d016      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f7fe fd37 	bl	8001240 <HAL_GetTick>
 80027d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d4:	e00b      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d6:	f7fe fd33 	bl	8001240 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d902      	bls.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	74fb      	strb	r3, [r7, #19]
            break;
 80027ec:	e006      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0ec      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10c      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002802:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002808:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002812:	4904      	ldr	r1, [pc, #16]	@ (8002824 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800281a:	e009      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800281c:	7cfb      	ldrb	r3, [r7, #19]
 800281e:	74bb      	strb	r3, [r7, #18]
 8002820:	e006      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002830:	7c7b      	ldrb	r3, [r7, #17]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d105      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002836:	4b9e      	ldr	r3, [pc, #632]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283a:	4a9d      	ldr	r2, [pc, #628]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002840:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800284e:	4b98      	ldr	r3, [pc, #608]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002854:	f023 0203 	bic.w	r2, r3, #3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285c:	4994      	ldr	r1, [pc, #592]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002870:	4b8f      	ldr	r3, [pc, #572]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002876:	f023 020c 	bic.w	r2, r3, #12
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287e:	498c      	ldr	r1, [pc, #560]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002892:	4b87      	ldr	r3, [pc, #540]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002898:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	4983      	ldr	r1, [pc, #524]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028b4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c2:	497b      	ldr	r1, [pc, #492]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028d6:	4b76      	ldr	r3, [pc, #472]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e4:	4972      	ldr	r1, [pc, #456]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028f8:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002906:	496a      	ldr	r1, [pc, #424]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800291a:	4b65      	ldr	r3, [pc, #404]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002920:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002928:	4961      	ldr	r1, [pc, #388]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800293c:	4b5c      	ldr	r3, [pc, #368]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002942:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800294a:	4959      	ldr	r1, [pc, #356]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800295e:	4b54      	ldr	r3, [pc, #336]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002964:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800296c:	4950      	ldr	r1, [pc, #320]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002980:	4b4b      	ldr	r3, [pc, #300]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002986:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298e:	4948      	ldr	r1, [pc, #288]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029a2:	4b43      	ldr	r3, [pc, #268]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b0:	493f      	ldr	r1, [pc, #252]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d028      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029c4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029d2:	4937      	ldr	r1, [pc, #220]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029e2:	d106      	bne.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e4:	4b32      	ldr	r3, [pc, #200]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4a31      	ldr	r2, [pc, #196]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ee:	60d3      	str	r3, [r2, #12]
 80029f0:	e011      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029fa:	d10c      	bne.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3304      	adds	r3, #4
 8002a00:	2101      	movs	r1, #1
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 f8c8 	bl	8002b98 <RCCEx_PLLSAI1_Config>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a0c:	7cfb      	ldrb	r3, [r7, #19]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a12:	7cfb      	ldrb	r3, [r7, #19]
 8002a14:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d028      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a22:	4b23      	ldr	r3, [pc, #140]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a28:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a30:	491f      	ldr	r1, [pc, #124]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a40:	d106      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a42:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a4c:	60d3      	str	r3, [r2, #12]
 8002a4e:	e011      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	2101      	movs	r1, #1
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 f899 	bl	8002b98 <RCCEx_PLLSAI1_Config>
 8002a66:	4603      	mov	r3, r0
 8002a68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a6a:	7cfb      	ldrb	r3, [r7, #19]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a70:	7cfb      	ldrb	r3, [r7, #19]
 8002a72:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d02b      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a80:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a8e:	4908      	ldr	r1, [pc, #32]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a9e:	d109      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa0:	4b03      	ldr	r3, [pc, #12]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a02      	ldr	r2, [pc, #8]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aaa:	60d3      	str	r3, [r2, #12]
 8002aac:	e014      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ab8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002abc:	d10c      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 f867 	bl	8002b98 <RCCEx_PLLSAI1_Config>
 8002aca:	4603      	mov	r3, r0
 8002acc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ace:	7cfb      	ldrb	r3, [r7, #19]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d02f      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002af2:	4928      	ldr	r1, [pc, #160]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002afe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b02:	d10d      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3304      	adds	r3, #4
 8002b08:	2102      	movs	r1, #2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 f844 	bl	8002b98 <RCCEx_PLLSAI1_Config>
 8002b10:	4603      	mov	r3, r0
 8002b12:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b14:	7cfb      	ldrb	r3, [r7, #19]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d014      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b1a:	7cfb      	ldrb	r3, [r7, #19]
 8002b1c:	74bb      	strb	r3, [r7, #18]
 8002b1e:	e011      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3320      	adds	r3, #32
 8002b2e:	2102      	movs	r1, #2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 f925 	bl	8002d80 <RCCEx_PLLSAI2_Config>
 8002b36:	4603      	mov	r3, r0
 8002b38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b3a:	7cfb      	ldrb	r3, [r7, #19]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b50:	4b10      	ldr	r3, [pc, #64]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b56:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b5e:	490d      	ldr	r1, [pc, #52]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b72:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b78:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b82:	4904      	ldr	r1, [pc, #16]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b8a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40021000 	.word	0x40021000

08002b98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ba6:	4b75      	ldr	r3, [pc, #468]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d018      	beq.n	8002be4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bb2:	4b72      	ldr	r3, [pc, #456]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 0203 	and.w	r2, r3, #3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d10d      	bne.n	8002bde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
       ||
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bca:	4b6c      	ldr	r3, [pc, #432]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
       ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d047      	beq.n	8002c6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
 8002be2:	e044      	b.n	8002c6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d018      	beq.n	8002c1e <RCCEx_PLLSAI1_Config+0x86>
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d825      	bhi.n	8002c3c <RCCEx_PLLSAI1_Config+0xa4>
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d002      	beq.n	8002bfa <RCCEx_PLLSAI1_Config+0x62>
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d009      	beq.n	8002c0c <RCCEx_PLLSAI1_Config+0x74>
 8002bf8:	e020      	b.n	8002c3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bfa:	4b60      	ldr	r3, [pc, #384]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d11d      	bne.n	8002c42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0a:	e01a      	b.n	8002c42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c0c:	4b5b      	ldr	r3, [pc, #364]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d116      	bne.n	8002c46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1c:	e013      	b.n	8002c46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c1e:	4b57      	ldr	r3, [pc, #348]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10f      	bne.n	8002c4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c2a:	4b54      	ldr	r3, [pc, #336]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c3a:	e006      	b.n	8002c4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c40:	e004      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c42:	bf00      	nop
 8002c44:	e002      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c46:	bf00      	nop
 8002c48:	e000      	b.n	8002c4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10d      	bne.n	8002c6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c52:	4b4a      	ldr	r3, [pc, #296]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6819      	ldr	r1, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	430b      	orrs	r3, r1
 8002c68:	4944      	ldr	r1, [pc, #272]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d17d      	bne.n	8002d70 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c74:	4b41      	ldr	r3, [pc, #260]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a40      	ldr	r2, [pc, #256]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c80:	f7fe fade 	bl	8001240 <HAL_GetTick>
 8002c84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c86:	e009      	b.n	8002c9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c88:	f7fe fada 	bl	8001240 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d902      	bls.n	8002c9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	73fb      	strb	r3, [r7, #15]
        break;
 8002c9a:	e005      	b.n	8002ca8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c9c:	4b37      	ldr	r3, [pc, #220]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ef      	bne.n	8002c88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d160      	bne.n	8002d70 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d111      	bne.n	8002cd8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cb4:	4b31      	ldr	r3, [pc, #196]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002cbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6892      	ldr	r2, [r2, #8]
 8002cc4:	0211      	lsls	r1, r2, #8
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68d2      	ldr	r2, [r2, #12]
 8002cca:	0912      	lsrs	r2, r2, #4
 8002ccc:	0452      	lsls	r2, r2, #17
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	492a      	ldr	r1, [pc, #168]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	610b      	str	r3, [r1, #16]
 8002cd6:	e027      	b.n	8002d28 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d112      	bne.n	8002d04 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cde:	4b27      	ldr	r3, [pc, #156]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002ce6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6892      	ldr	r2, [r2, #8]
 8002cee:	0211      	lsls	r1, r2, #8
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6912      	ldr	r2, [r2, #16]
 8002cf4:	0852      	lsrs	r2, r2, #1
 8002cf6:	3a01      	subs	r2, #1
 8002cf8:	0552      	lsls	r2, r2, #21
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	491f      	ldr	r1, [pc, #124]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	610b      	str	r3, [r1, #16]
 8002d02:	e011      	b.n	8002d28 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d04:	4b1d      	ldr	r3, [pc, #116]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d0c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6892      	ldr	r2, [r2, #8]
 8002d14:	0211      	lsls	r1, r2, #8
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6952      	ldr	r2, [r2, #20]
 8002d1a:	0852      	lsrs	r2, r2, #1
 8002d1c:	3a01      	subs	r2, #1
 8002d1e:	0652      	lsls	r2, r2, #25
 8002d20:	430a      	orrs	r2, r1
 8002d22:	4916      	ldr	r1, [pc, #88]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d28:	4b14      	ldr	r3, [pc, #80]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a13      	ldr	r2, [pc, #76]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d34:	f7fe fa84 	bl	8001240 <HAL_GetTick>
 8002d38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d3a:	e009      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d3c:	f7fe fa80 	bl	8001240 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d902      	bls.n	8002d50 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	73fb      	strb	r3, [r7, #15]
          break;
 8002d4e:	e005      	b.n	8002d5c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d50:	4b0a      	ldr	r3, [pc, #40]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ef      	beq.n	8002d3c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d62:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	4904      	ldr	r1, [pc, #16]	@ (8002d7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40021000 	.word	0x40021000

08002d80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d018      	beq.n	8002dcc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d9a:	4b67      	ldr	r3, [pc, #412]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f003 0203 	and.w	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d10d      	bne.n	8002dc6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
       ||
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d009      	beq.n	8002dc6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002db2:	4b61      	ldr	r3, [pc, #388]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	091b      	lsrs	r3, r3, #4
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
       ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d047      	beq.n	8002e56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
 8002dca:	e044      	b.n	8002e56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d018      	beq.n	8002e06 <RCCEx_PLLSAI2_Config+0x86>
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d825      	bhi.n	8002e24 <RCCEx_PLLSAI2_Config+0xa4>
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d002      	beq.n	8002de2 <RCCEx_PLLSAI2_Config+0x62>
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d009      	beq.n	8002df4 <RCCEx_PLLSAI2_Config+0x74>
 8002de0:	e020      	b.n	8002e24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002de2:	4b55      	ldr	r3, [pc, #340]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d11d      	bne.n	8002e2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002df2:	e01a      	b.n	8002e2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002df4:	4b50      	ldr	r3, [pc, #320]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d116      	bne.n	8002e2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e04:	e013      	b.n	8002e2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e06:	4b4c      	ldr	r3, [pc, #304]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10f      	bne.n	8002e32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e12:	4b49      	ldr	r3, [pc, #292]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e22:	e006      	b.n	8002e32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
      break;
 8002e28:	e004      	b.n	8002e34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e2a:	bf00      	nop
 8002e2c:	e002      	b.n	8002e34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e2e:	bf00      	nop
 8002e30:	e000      	b.n	8002e34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e32:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10d      	bne.n	8002e56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6819      	ldr	r1, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	4939      	ldr	r1, [pc, #228]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d167      	bne.n	8002f2c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e5c:	4b36      	ldr	r3, [pc, #216]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a35      	ldr	r2, [pc, #212]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e68:	f7fe f9ea 	bl	8001240 <HAL_GetTick>
 8002e6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e6e:	e009      	b.n	8002e84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e70:	f7fe f9e6 	bl	8001240 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d902      	bls.n	8002e84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	73fb      	strb	r3, [r7, #15]
        break;
 8002e82:	e005      	b.n	8002e90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e84:	4b2c      	ldr	r3, [pc, #176]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1ef      	bne.n	8002e70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d14a      	bne.n	8002f2c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d111      	bne.n	8002ec0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e9c:	4b26      	ldr	r3, [pc, #152]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6892      	ldr	r2, [r2, #8]
 8002eac:	0211      	lsls	r1, r2, #8
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68d2      	ldr	r2, [r2, #12]
 8002eb2:	0912      	lsrs	r2, r2, #4
 8002eb4:	0452      	lsls	r2, r2, #17
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	491f      	ldr	r1, [pc, #124]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	614b      	str	r3, [r1, #20]
 8002ebe:	e011      	b.n	8002ee4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ec8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	6892      	ldr	r2, [r2, #8]
 8002ed0:	0211      	lsls	r1, r2, #8
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6912      	ldr	r2, [r2, #16]
 8002ed6:	0852      	lsrs	r2, r2, #1
 8002ed8:	3a01      	subs	r2, #1
 8002eda:	0652      	lsls	r2, r2, #25
 8002edc:	430a      	orrs	r2, r1
 8002ede:	4916      	ldr	r1, [pc, #88]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ee4:	4b14      	ldr	r3, [pc, #80]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a13      	ldr	r2, [pc, #76]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef0:	f7fe f9a6 	bl	8001240 <HAL_GetTick>
 8002ef4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ef6:	e009      	b.n	8002f0c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ef8:	f7fe f9a2 	bl	8001240 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d902      	bls.n	8002f0c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	73fb      	strb	r3, [r7, #15]
          break;
 8002f0a:	e005      	b.n	8002f18 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0ef      	beq.n	8002ef8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f1e:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f20:	695a      	ldr	r2, [r3, #20]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	4904      	ldr	r1, [pc, #16]	@ (8002f38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000

08002f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e049      	b.n	8002fe2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7fd ffee 	bl	8000f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	f000 fb7a 	bl	8003674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e049      	b.n	8003090 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d106      	bne.n	8003016 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 f841 	bl	8003098 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2202      	movs	r2, #2
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3304      	adds	r3, #4
 8003026:	4619      	mov	r1, r3
 8003028:	4610      	mov	r0, r2
 800302a:	f000 fb23 	bl	8003674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d109      	bne.n	80030d0 <HAL_TIM_PWM_Start+0x24>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	bf14      	ite	ne
 80030c8:	2301      	movne	r3, #1
 80030ca:	2300      	moveq	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	e03c      	b.n	800314a <HAL_TIM_PWM_Start+0x9e>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d109      	bne.n	80030ea <HAL_TIM_PWM_Start+0x3e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b01      	cmp	r3, #1
 80030e0:	bf14      	ite	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	2300      	moveq	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	e02f      	b.n	800314a <HAL_TIM_PWM_Start+0x9e>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d109      	bne.n	8003104 <HAL_TIM_PWM_Start+0x58>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e022      	b.n	800314a <HAL_TIM_PWM_Start+0x9e>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	2b0c      	cmp	r3, #12
 8003108:	d109      	bne.n	800311e <HAL_TIM_PWM_Start+0x72>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b01      	cmp	r3, #1
 8003114:	bf14      	ite	ne
 8003116:	2301      	movne	r3, #1
 8003118:	2300      	moveq	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	e015      	b.n	800314a <HAL_TIM_PWM_Start+0x9e>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b10      	cmp	r3, #16
 8003122:	d109      	bne.n	8003138 <HAL_TIM_PWM_Start+0x8c>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	bf14      	ite	ne
 8003130:	2301      	movne	r3, #1
 8003132:	2300      	moveq	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	e008      	b.n	800314a <HAL_TIM_PWM_Start+0x9e>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e09c      	b.n	800328c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d104      	bne.n	8003162 <HAL_TIM_PWM_Start+0xb6>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003160:	e023      	b.n	80031aa <HAL_TIM_PWM_Start+0xfe>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b04      	cmp	r3, #4
 8003166:	d104      	bne.n	8003172 <HAL_TIM_PWM_Start+0xc6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003170:	e01b      	b.n	80031aa <HAL_TIM_PWM_Start+0xfe>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b08      	cmp	r3, #8
 8003176:	d104      	bne.n	8003182 <HAL_TIM_PWM_Start+0xd6>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003180:	e013      	b.n	80031aa <HAL_TIM_PWM_Start+0xfe>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b0c      	cmp	r3, #12
 8003186:	d104      	bne.n	8003192 <HAL_TIM_PWM_Start+0xe6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003190:	e00b      	b.n	80031aa <HAL_TIM_PWM_Start+0xfe>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b10      	cmp	r3, #16
 8003196:	d104      	bne.n	80031a2 <HAL_TIM_PWM_Start+0xf6>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031a0:	e003      	b.n	80031aa <HAL_TIM_PWM_Start+0xfe>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2202      	movs	r2, #2
 80031a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2201      	movs	r2, #1
 80031b0:	6839      	ldr	r1, [r7, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 fe74 	bl	8003ea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a35      	ldr	r2, [pc, #212]	@ (8003294 <HAL_TIM_PWM_Start+0x1e8>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_TIM_PWM_Start+0x13e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a34      	ldr	r2, [pc, #208]	@ (8003298 <HAL_TIM_PWM_Start+0x1ec>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <HAL_TIM_PWM_Start+0x13e>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a32      	ldr	r2, [pc, #200]	@ (800329c <HAL_TIM_PWM_Start+0x1f0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_TIM_PWM_Start+0x13e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a31      	ldr	r2, [pc, #196]	@ (80032a0 <HAL_TIM_PWM_Start+0x1f4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_TIM_PWM_Start+0x13e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2f      	ldr	r2, [pc, #188]	@ (80032a4 <HAL_TIM_PWM_Start+0x1f8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <HAL_TIM_PWM_Start+0x142>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_TIM_PWM_Start+0x144>
 80031ee:	2300      	movs	r3, #0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003202:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a22      	ldr	r2, [pc, #136]	@ (8003294 <HAL_TIM_PWM_Start+0x1e8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d01d      	beq.n	800324a <HAL_TIM_PWM_Start+0x19e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003216:	d018      	beq.n	800324a <HAL_TIM_PWM_Start+0x19e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a22      	ldr	r2, [pc, #136]	@ (80032a8 <HAL_TIM_PWM_Start+0x1fc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d013      	beq.n	800324a <HAL_TIM_PWM_Start+0x19e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a21      	ldr	r2, [pc, #132]	@ (80032ac <HAL_TIM_PWM_Start+0x200>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d00e      	beq.n	800324a <HAL_TIM_PWM_Start+0x19e>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1f      	ldr	r2, [pc, #124]	@ (80032b0 <HAL_TIM_PWM_Start+0x204>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d009      	beq.n	800324a <HAL_TIM_PWM_Start+0x19e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a17      	ldr	r2, [pc, #92]	@ (8003298 <HAL_TIM_PWM_Start+0x1ec>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d004      	beq.n	800324a <HAL_TIM_PWM_Start+0x19e>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a15      	ldr	r2, [pc, #84]	@ (800329c <HAL_TIM_PWM_Start+0x1f0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d115      	bne.n	8003276 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	4b18      	ldr	r3, [pc, #96]	@ (80032b4 <HAL_TIM_PWM_Start+0x208>)
 8003252:	4013      	ands	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b06      	cmp	r3, #6
 800325a:	d015      	beq.n	8003288 <HAL_TIM_PWM_Start+0x1dc>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003262:	d011      	beq.n	8003288 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003274:	e008      	b.n	8003288 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	e000      	b.n	800328a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003288:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40012c00 	.word	0x40012c00
 8003298:	40013400 	.word	0x40013400
 800329c:	40014000 	.word	0x40014000
 80032a0:	40014400 	.word	0x40014400
 80032a4:	40014800 	.word	0x40014800
 80032a8:	40000400 	.word	0x40000400
 80032ac:	40000800 	.word	0x40000800
 80032b0:	40000c00 	.word	0x40000c00
 80032b4:	00010007 	.word	0x00010007

080032b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e0ff      	b.n	80034d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b14      	cmp	r3, #20
 80032e2:	f200 80f0 	bhi.w	80034c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80032e6:	a201      	add	r2, pc, #4	@ (adr r2, 80032ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ec:	08003341 	.word	0x08003341
 80032f0:	080034c7 	.word	0x080034c7
 80032f4:	080034c7 	.word	0x080034c7
 80032f8:	080034c7 	.word	0x080034c7
 80032fc:	08003381 	.word	0x08003381
 8003300:	080034c7 	.word	0x080034c7
 8003304:	080034c7 	.word	0x080034c7
 8003308:	080034c7 	.word	0x080034c7
 800330c:	080033c3 	.word	0x080033c3
 8003310:	080034c7 	.word	0x080034c7
 8003314:	080034c7 	.word	0x080034c7
 8003318:	080034c7 	.word	0x080034c7
 800331c:	08003403 	.word	0x08003403
 8003320:	080034c7 	.word	0x080034c7
 8003324:	080034c7 	.word	0x080034c7
 8003328:	080034c7 	.word	0x080034c7
 800332c:	08003445 	.word	0x08003445
 8003330:	080034c7 	.word	0x080034c7
 8003334:	080034c7 	.word	0x080034c7
 8003338:	080034c7 	.word	0x080034c7
 800333c:	08003485 	.word	0x08003485
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68b9      	ldr	r1, [r7, #8]
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fa3a 	bl	80037c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0208 	orr.w	r2, r2, #8
 800335a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0204 	bic.w	r2, r2, #4
 800336a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6999      	ldr	r1, [r3, #24]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	691a      	ldr	r2, [r3, #16]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	619a      	str	r2, [r3, #24]
      break;
 800337e:	e0a5      	b.n	80034cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 faaa 	bl	80038e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800339a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6999      	ldr	r1, [r3, #24]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	021a      	lsls	r2, r3, #8
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	619a      	str	r2, [r3, #24]
      break;
 80033c0:	e084      	b.n	80034cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fb13 	bl	80039f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69da      	ldr	r2, [r3, #28]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0208 	orr.w	r2, r2, #8
 80033dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69da      	ldr	r2, [r3, #28]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0204 	bic.w	r2, r2, #4
 80033ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69d9      	ldr	r1, [r3, #28]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	691a      	ldr	r2, [r3, #16]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	61da      	str	r2, [r3, #28]
      break;
 8003400:	e064      	b.n	80034cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fb7b 	bl	8003b04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800341c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69da      	ldr	r2, [r3, #28]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800342c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69d9      	ldr	r1, [r3, #28]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	021a      	lsls	r2, r3, #8
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	61da      	str	r2, [r3, #28]
      break;
 8003442:	e043      	b.n	80034cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fbc4 	bl	8003bd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0208 	orr.w	r2, r2, #8
 800345e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0204 	bic.w	r2, r2, #4
 800346e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003482:	e023      	b.n	80034cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fc08 	bl	8003ca0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800349e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	021a      	lsls	r2, r3, #8
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80034c4:	e002      	b.n	80034cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	75fb      	strb	r3, [r7, #23]
      break;
 80034ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop

080034e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_TIM_ConfigClockSource+0x1c>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e0b6      	b.n	800366a <HAL_TIM_ConfigClockSource+0x18a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800351a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800351e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003526:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003538:	d03e      	beq.n	80035b8 <HAL_TIM_ConfigClockSource+0xd8>
 800353a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800353e:	f200 8087 	bhi.w	8003650 <HAL_TIM_ConfigClockSource+0x170>
 8003542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003546:	f000 8086 	beq.w	8003656 <HAL_TIM_ConfigClockSource+0x176>
 800354a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800354e:	d87f      	bhi.n	8003650 <HAL_TIM_ConfigClockSource+0x170>
 8003550:	2b70      	cmp	r3, #112	@ 0x70
 8003552:	d01a      	beq.n	800358a <HAL_TIM_ConfigClockSource+0xaa>
 8003554:	2b70      	cmp	r3, #112	@ 0x70
 8003556:	d87b      	bhi.n	8003650 <HAL_TIM_ConfigClockSource+0x170>
 8003558:	2b60      	cmp	r3, #96	@ 0x60
 800355a:	d050      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x11e>
 800355c:	2b60      	cmp	r3, #96	@ 0x60
 800355e:	d877      	bhi.n	8003650 <HAL_TIM_ConfigClockSource+0x170>
 8003560:	2b50      	cmp	r3, #80	@ 0x50
 8003562:	d03c      	beq.n	80035de <HAL_TIM_ConfigClockSource+0xfe>
 8003564:	2b50      	cmp	r3, #80	@ 0x50
 8003566:	d873      	bhi.n	8003650 <HAL_TIM_ConfigClockSource+0x170>
 8003568:	2b40      	cmp	r3, #64	@ 0x40
 800356a:	d058      	beq.n	800361e <HAL_TIM_ConfigClockSource+0x13e>
 800356c:	2b40      	cmp	r3, #64	@ 0x40
 800356e:	d86f      	bhi.n	8003650 <HAL_TIM_ConfigClockSource+0x170>
 8003570:	2b30      	cmp	r3, #48	@ 0x30
 8003572:	d064      	beq.n	800363e <HAL_TIM_ConfigClockSource+0x15e>
 8003574:	2b30      	cmp	r3, #48	@ 0x30
 8003576:	d86b      	bhi.n	8003650 <HAL_TIM_ConfigClockSource+0x170>
 8003578:	2b20      	cmp	r3, #32
 800357a:	d060      	beq.n	800363e <HAL_TIM_ConfigClockSource+0x15e>
 800357c:	2b20      	cmp	r3, #32
 800357e:	d867      	bhi.n	8003650 <HAL_TIM_ConfigClockSource+0x170>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d05c      	beq.n	800363e <HAL_TIM_ConfigClockSource+0x15e>
 8003584:	2b10      	cmp	r3, #16
 8003586:	d05a      	beq.n	800363e <HAL_TIM_ConfigClockSource+0x15e>
 8003588:	e062      	b.n	8003650 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800359a:	f000 fc61 	bl	8003e60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	609a      	str	r2, [r3, #8]
      break;
 80035b6:	e04f      	b.n	8003658 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035c8:	f000 fc4a 	bl	8003e60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035da:	609a      	str	r2, [r3, #8]
      break;
 80035dc:	e03c      	b.n	8003658 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ea:	461a      	mov	r2, r3
 80035ec:	f000 fbbe 	bl	8003d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2150      	movs	r1, #80	@ 0x50
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fc17 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 80035fc:	e02c      	b.n	8003658 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800360a:	461a      	mov	r2, r3
 800360c:	f000 fbdd 	bl	8003dca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2160      	movs	r1, #96	@ 0x60
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fc07 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 800361c:	e01c      	b.n	8003658 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800362a:	461a      	mov	r2, r3
 800362c:	f000 fb9e 	bl	8003d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2140      	movs	r1, #64	@ 0x40
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fbf7 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 800363c:	e00c      	b.n	8003658 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4619      	mov	r1, r3
 8003648:	4610      	mov	r0, r2
 800364a:	f000 fbee 	bl	8003e2a <TIM_ITRx_SetConfig>
      break;
 800364e:	e003      	b.n	8003658 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      break;
 8003654:	e000      	b.n	8003658 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003656:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003668:	7bfb      	ldrb	r3, [r7, #15]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3710      	adds	r7, #16
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a46      	ldr	r2, [pc, #280]	@ (80037a0 <TIM_Base_SetConfig+0x12c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d013      	beq.n	80036b4 <TIM_Base_SetConfig+0x40>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003692:	d00f      	beq.n	80036b4 <TIM_Base_SetConfig+0x40>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a43      	ldr	r2, [pc, #268]	@ (80037a4 <TIM_Base_SetConfig+0x130>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00b      	beq.n	80036b4 <TIM_Base_SetConfig+0x40>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a42      	ldr	r2, [pc, #264]	@ (80037a8 <TIM_Base_SetConfig+0x134>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d007      	beq.n	80036b4 <TIM_Base_SetConfig+0x40>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a41      	ldr	r2, [pc, #260]	@ (80037ac <TIM_Base_SetConfig+0x138>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d003      	beq.n	80036b4 <TIM_Base_SetConfig+0x40>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a40      	ldr	r2, [pc, #256]	@ (80037b0 <TIM_Base_SetConfig+0x13c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d108      	bne.n	80036c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a35      	ldr	r2, [pc, #212]	@ (80037a0 <TIM_Base_SetConfig+0x12c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d01f      	beq.n	800370e <TIM_Base_SetConfig+0x9a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d4:	d01b      	beq.n	800370e <TIM_Base_SetConfig+0x9a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a32      	ldr	r2, [pc, #200]	@ (80037a4 <TIM_Base_SetConfig+0x130>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d017      	beq.n	800370e <TIM_Base_SetConfig+0x9a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a31      	ldr	r2, [pc, #196]	@ (80037a8 <TIM_Base_SetConfig+0x134>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d013      	beq.n	800370e <TIM_Base_SetConfig+0x9a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a30      	ldr	r2, [pc, #192]	@ (80037ac <TIM_Base_SetConfig+0x138>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00f      	beq.n	800370e <TIM_Base_SetConfig+0x9a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a2f      	ldr	r2, [pc, #188]	@ (80037b0 <TIM_Base_SetConfig+0x13c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00b      	beq.n	800370e <TIM_Base_SetConfig+0x9a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a2e      	ldr	r2, [pc, #184]	@ (80037b4 <TIM_Base_SetConfig+0x140>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d007      	beq.n	800370e <TIM_Base_SetConfig+0x9a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a2d      	ldr	r2, [pc, #180]	@ (80037b8 <TIM_Base_SetConfig+0x144>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d003      	beq.n	800370e <TIM_Base_SetConfig+0x9a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a2c      	ldr	r2, [pc, #176]	@ (80037bc <TIM_Base_SetConfig+0x148>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d108      	bne.n	8003720 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a16      	ldr	r2, [pc, #88]	@ (80037a0 <TIM_Base_SetConfig+0x12c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00f      	beq.n	800376c <TIM_Base_SetConfig+0xf8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a18      	ldr	r2, [pc, #96]	@ (80037b0 <TIM_Base_SetConfig+0x13c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00b      	beq.n	800376c <TIM_Base_SetConfig+0xf8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a17      	ldr	r2, [pc, #92]	@ (80037b4 <TIM_Base_SetConfig+0x140>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d007      	beq.n	800376c <TIM_Base_SetConfig+0xf8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a16      	ldr	r2, [pc, #88]	@ (80037b8 <TIM_Base_SetConfig+0x144>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d003      	beq.n	800376c <TIM_Base_SetConfig+0xf8>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a15      	ldr	r2, [pc, #84]	@ (80037bc <TIM_Base_SetConfig+0x148>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d103      	bne.n	8003774 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b01      	cmp	r3, #1
 8003784:	d105      	bne.n	8003792 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f023 0201 	bic.w	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	611a      	str	r2, [r3, #16]
  }
}
 8003792:	bf00      	nop
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40000800 	.word	0x40000800
 80037ac:	40000c00 	.word	0x40000c00
 80037b0:	40013400 	.word	0x40013400
 80037b4:	40014000 	.word	0x40014000
 80037b8:	40014400 	.word	0x40014400
 80037bc:	40014800 	.word	0x40014800

080037c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	f023 0201 	bic.w	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0303 	bic.w	r3, r3, #3
 80037fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f023 0302 	bic.w	r3, r3, #2
 800380c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a2c      	ldr	r2, [pc, #176]	@ (80038cc <TIM_OC1_SetConfig+0x10c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00f      	beq.n	8003840 <TIM_OC1_SetConfig+0x80>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a2b      	ldr	r2, [pc, #172]	@ (80038d0 <TIM_OC1_SetConfig+0x110>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00b      	beq.n	8003840 <TIM_OC1_SetConfig+0x80>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a2a      	ldr	r2, [pc, #168]	@ (80038d4 <TIM_OC1_SetConfig+0x114>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d007      	beq.n	8003840 <TIM_OC1_SetConfig+0x80>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a29      	ldr	r2, [pc, #164]	@ (80038d8 <TIM_OC1_SetConfig+0x118>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d003      	beq.n	8003840 <TIM_OC1_SetConfig+0x80>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a28      	ldr	r2, [pc, #160]	@ (80038dc <TIM_OC1_SetConfig+0x11c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d10c      	bne.n	800385a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f023 0308 	bic.w	r3, r3, #8
 8003846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f023 0304 	bic.w	r3, r3, #4
 8003858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a1b      	ldr	r2, [pc, #108]	@ (80038cc <TIM_OC1_SetConfig+0x10c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00f      	beq.n	8003882 <TIM_OC1_SetConfig+0xc2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a1a      	ldr	r2, [pc, #104]	@ (80038d0 <TIM_OC1_SetConfig+0x110>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00b      	beq.n	8003882 <TIM_OC1_SetConfig+0xc2>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a19      	ldr	r2, [pc, #100]	@ (80038d4 <TIM_OC1_SetConfig+0x114>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d007      	beq.n	8003882 <TIM_OC1_SetConfig+0xc2>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a18      	ldr	r2, [pc, #96]	@ (80038d8 <TIM_OC1_SetConfig+0x118>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d003      	beq.n	8003882 <TIM_OC1_SetConfig+0xc2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a17      	ldr	r2, [pc, #92]	@ (80038dc <TIM_OC1_SetConfig+0x11c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d111      	bne.n	80038a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	4313      	orrs	r3, r2
 800389a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	621a      	str	r2, [r3, #32]
}
 80038c0:	bf00      	nop
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40012c00 	.word	0x40012c00
 80038d0:	40013400 	.word	0x40013400
 80038d4:	40014000 	.word	0x40014000
 80038d8:	40014400 	.word	0x40014400
 80038dc:	40014800 	.word	0x40014800

080038e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f023 0210 	bic.w	r2, r3, #16
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800390e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800391a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	021b      	lsls	r3, r3, #8
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f023 0320 	bic.w	r3, r3, #32
 800392e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a28      	ldr	r2, [pc, #160]	@ (80039e0 <TIM_OC2_SetConfig+0x100>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d003      	beq.n	800394c <TIM_OC2_SetConfig+0x6c>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a27      	ldr	r2, [pc, #156]	@ (80039e4 <TIM_OC2_SetConfig+0x104>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d10d      	bne.n	8003968 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003966:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a1d      	ldr	r2, [pc, #116]	@ (80039e0 <TIM_OC2_SetConfig+0x100>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00f      	beq.n	8003990 <TIM_OC2_SetConfig+0xb0>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a1c      	ldr	r2, [pc, #112]	@ (80039e4 <TIM_OC2_SetConfig+0x104>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d00b      	beq.n	8003990 <TIM_OC2_SetConfig+0xb0>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a1b      	ldr	r2, [pc, #108]	@ (80039e8 <TIM_OC2_SetConfig+0x108>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d007      	beq.n	8003990 <TIM_OC2_SetConfig+0xb0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a1a      	ldr	r2, [pc, #104]	@ (80039ec <TIM_OC2_SetConfig+0x10c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d003      	beq.n	8003990 <TIM_OC2_SetConfig+0xb0>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a19      	ldr	r2, [pc, #100]	@ (80039f0 <TIM_OC2_SetConfig+0x110>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d113      	bne.n	80039b8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003996:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800399e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	621a      	str	r2, [r3, #32]
}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40012c00 	.word	0x40012c00
 80039e4:	40013400 	.word	0x40013400
 80039e8:	40014000 	.word	0x40014000
 80039ec:	40014400 	.word	0x40014400
 80039f0:	40014800 	.word	0x40014800

080039f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0303 	bic.w	r3, r3, #3
 8003a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a27      	ldr	r2, [pc, #156]	@ (8003af0 <TIM_OC3_SetConfig+0xfc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d003      	beq.n	8003a5e <TIM_OC3_SetConfig+0x6a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a26      	ldr	r2, [pc, #152]	@ (8003af4 <TIM_OC3_SetConfig+0x100>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d10d      	bne.n	8003a7a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003af0 <TIM_OC3_SetConfig+0xfc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00f      	beq.n	8003aa2 <TIM_OC3_SetConfig+0xae>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1b      	ldr	r2, [pc, #108]	@ (8003af4 <TIM_OC3_SetConfig+0x100>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00b      	beq.n	8003aa2 <TIM_OC3_SetConfig+0xae>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8003af8 <TIM_OC3_SetConfig+0x104>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d007      	beq.n	8003aa2 <TIM_OC3_SetConfig+0xae>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a19      	ldr	r2, [pc, #100]	@ (8003afc <TIM_OC3_SetConfig+0x108>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d003      	beq.n	8003aa2 <TIM_OC3_SetConfig+0xae>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a18      	ldr	r2, [pc, #96]	@ (8003b00 <TIM_OC3_SetConfig+0x10c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d113      	bne.n	8003aca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	621a      	str	r2, [r3, #32]
}
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40013400 	.word	0x40013400
 8003af8:	40014000 	.word	0x40014000
 8003afc:	40014400 	.word	0x40014400
 8003b00:	40014800 	.word	0x40014800

08003b04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	021b      	lsls	r3, r3, #8
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	031b      	lsls	r3, r3, #12
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a18      	ldr	r2, [pc, #96]	@ (8003bc4 <TIM_OC4_SetConfig+0xc0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00f      	beq.n	8003b88 <TIM_OC4_SetConfig+0x84>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a17      	ldr	r2, [pc, #92]	@ (8003bc8 <TIM_OC4_SetConfig+0xc4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00b      	beq.n	8003b88 <TIM_OC4_SetConfig+0x84>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a16      	ldr	r2, [pc, #88]	@ (8003bcc <TIM_OC4_SetConfig+0xc8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d007      	beq.n	8003b88 <TIM_OC4_SetConfig+0x84>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a15      	ldr	r2, [pc, #84]	@ (8003bd0 <TIM_OC4_SetConfig+0xcc>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d003      	beq.n	8003b88 <TIM_OC4_SetConfig+0x84>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a14      	ldr	r2, [pc, #80]	@ (8003bd4 <TIM_OC4_SetConfig+0xd0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d109      	bne.n	8003b9c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	019b      	lsls	r3, r3, #6
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	621a      	str	r2, [r3, #32]
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40013400 	.word	0x40013400
 8003bcc:	40014000 	.word	0x40014000
 8003bd0:	40014400 	.word	0x40014400
 8003bd4:	40014800 	.word	0x40014800

08003bd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003c1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	041b      	lsls	r3, r3, #16
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a17      	ldr	r2, [pc, #92]	@ (8003c8c <TIM_OC5_SetConfig+0xb4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00f      	beq.n	8003c52 <TIM_OC5_SetConfig+0x7a>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a16      	ldr	r2, [pc, #88]	@ (8003c90 <TIM_OC5_SetConfig+0xb8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00b      	beq.n	8003c52 <TIM_OC5_SetConfig+0x7a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a15      	ldr	r2, [pc, #84]	@ (8003c94 <TIM_OC5_SetConfig+0xbc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d007      	beq.n	8003c52 <TIM_OC5_SetConfig+0x7a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a14      	ldr	r2, [pc, #80]	@ (8003c98 <TIM_OC5_SetConfig+0xc0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d003      	beq.n	8003c52 <TIM_OC5_SetConfig+0x7a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a13      	ldr	r2, [pc, #76]	@ (8003c9c <TIM_OC5_SetConfig+0xc4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d109      	bne.n	8003c66 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	621a      	str	r2, [r3, #32]
}
 8003c80:	bf00      	nop
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40013400 	.word	0x40013400
 8003c94:	40014000 	.word	0x40014000
 8003c98:	40014400 	.word	0x40014400
 8003c9c:	40014800 	.word	0x40014800

08003ca0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	051b      	lsls	r3, r3, #20
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a18      	ldr	r2, [pc, #96]	@ (8003d58 <TIM_OC6_SetConfig+0xb8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00f      	beq.n	8003d1c <TIM_OC6_SetConfig+0x7c>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a17      	ldr	r2, [pc, #92]	@ (8003d5c <TIM_OC6_SetConfig+0xbc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00b      	beq.n	8003d1c <TIM_OC6_SetConfig+0x7c>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a16      	ldr	r2, [pc, #88]	@ (8003d60 <TIM_OC6_SetConfig+0xc0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d007      	beq.n	8003d1c <TIM_OC6_SetConfig+0x7c>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a15      	ldr	r2, [pc, #84]	@ (8003d64 <TIM_OC6_SetConfig+0xc4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_OC6_SetConfig+0x7c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a14      	ldr	r2, [pc, #80]	@ (8003d68 <TIM_OC6_SetConfig+0xc8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d109      	bne.n	8003d30 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	029b      	lsls	r3, r3, #10
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	621a      	str	r2, [r3, #32]
}
 8003d4a:	bf00      	nop
 8003d4c:	371c      	adds	r7, #28
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	40013400 	.word	0x40013400
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40014400 	.word	0x40014400
 8003d68:	40014800 	.word	0x40014800

08003d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	f023 0201 	bic.w	r2, r3, #1
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f023 030a 	bic.w	r3, r3, #10
 8003da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b087      	sub	sp, #28
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f023 0210 	bic.w	r2, r3, #16
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	031b      	lsls	r3, r3, #12
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f043 0307 	orr.w	r3, r3, #7
 8003e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	609a      	str	r2, [r3, #8]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	021a      	lsls	r2, r3, #8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	609a      	str	r2, [r3, #8]
}
 8003e94:	bf00      	nop
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f003 031f 	and.w	r3, r3, #31
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a1a      	ldr	r2, [r3, #32]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a1a      	ldr	r2, [r3, #32]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	621a      	str	r2, [r3, #32]
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e068      	b.n	8003fd6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a2e      	ldr	r2, [pc, #184]	@ (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d004      	beq.n	8003f38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a2d      	ldr	r2, [pc, #180]	@ (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d108      	bne.n	8003f4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003f3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1e      	ldr	r2, [pc, #120]	@ (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d01d      	beq.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f76:	d018      	beq.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003fec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1a      	ldr	r2, [pc, #104]	@ (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00e      	beq.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a18      	ldr	r2, [pc, #96]	@ (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d009      	beq.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a13      	ldr	r2, [pc, #76]	@ (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a14      	ldr	r2, [pc, #80]	@ (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40012c00 	.word	0x40012c00
 8003fe8:	40013400 	.word	0x40013400
 8003fec:	40000400 	.word	0x40000400
 8003ff0:	40000800 	.word	0x40000800
 8003ff4:	40000c00 	.word	0x40000c00
 8003ff8:	40014000 	.word	0x40014000

08003ffc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004014:	2302      	movs	r3, #2
 8004016:	e065      	b.n	80040e4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	041b      	lsls	r3, r3, #16
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a16      	ldr	r2, [pc, #88]	@ (80040f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d004      	beq.n	80040a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a14      	ldr	r2, [pc, #80]	@ (80040f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d115      	bne.n	80040d2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	051b      	lsls	r3, r3, #20
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	40012c00 	.word	0x40012c00
 80040f4:	40013400 	.word	0x40013400

080040f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e040      	b.n	800418c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7fc fdda 	bl	8000cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2224      	movs	r2, #36	@ 0x24
 8004124:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fedc 	bl	8004efc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fc21 	bl	800498c <UART_SetConfig>
 800414a:	4603      	mov	r3, r0
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e01b      	b.n	800418c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004162:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004172:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 ff5b 	bl	8005040 <UART_CheckIdleState>
 800418a:	4603      	mov	r3, r0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	@ 0x28
 8004198:	af02      	add	r7, sp, #8
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	4613      	mov	r3, r2
 80041a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d177      	bne.n	800429c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_UART_Transmit+0x24>
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e070      	b.n	800429e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2221      	movs	r2, #33	@ 0x21
 80041c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041ca:	f7fd f839 	bl	8001240 <HAL_GetTick>
 80041ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	88fa      	ldrh	r2, [r7, #6]
 80041d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	88fa      	ldrh	r2, [r7, #6]
 80041dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e8:	d108      	bne.n	80041fc <HAL_UART_Transmit+0x68>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d104      	bne.n	80041fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	e003      	b.n	8004204 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004200:	2300      	movs	r3, #0
 8004202:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004204:	e02f      	b.n	8004266 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2200      	movs	r2, #0
 800420e:	2180      	movs	r1, #128	@ 0x80
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 ffbd 	bl	8005190 <UART_WaitOnFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d004      	beq.n	8004226 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e03b      	b.n	800429e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10b      	bne.n	8004244 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	881a      	ldrh	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004238:	b292      	uxth	r2, r2
 800423a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	3302      	adds	r3, #2
 8004240:	61bb      	str	r3, [r7, #24]
 8004242:	e007      	b.n	8004254 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	781a      	ldrb	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3301      	adds	r3, #1
 8004252:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1c9      	bne.n	8004206 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2200      	movs	r2, #0
 800427a:	2140      	movs	r1, #64	@ 0x40
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 ff87 	bl	8005190 <UART_WaitOnFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d004      	beq.n	8004292 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e005      	b.n	800429e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2220      	movs	r2, #32
 8004296:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	e000      	b.n	800429e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800429c:	2302      	movs	r3, #2
  }
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3720      	adds	r7, #32
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b08a      	sub	sp, #40	@ 0x28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	4613      	mov	r3, r2
 80042b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d137      	bne.n	8004330 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_UART_Receive_IT+0x24>
 80042c6:	88fb      	ldrh	r3, [r7, #6]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e030      	b.n	8004332 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a18      	ldr	r2, [pc, #96]	@ (800433c <HAL_UART_Receive_IT+0x94>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d01f      	beq.n	8004320 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d018      	beq.n	8004320 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	613b      	str	r3, [r7, #16]
   return(result);
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004302:	627b      	str	r3, [r7, #36]	@ 0x24
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	623b      	str	r3, [r7, #32]
 800430e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	69f9      	ldr	r1, [r7, #28]
 8004312:	6a3a      	ldr	r2, [r7, #32]
 8004314:	e841 2300 	strex	r3, r2, [r1]
 8004318:	61bb      	str	r3, [r7, #24]
   return(result);
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e6      	bne.n	80042ee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	461a      	mov	r2, r3
 8004324:	68b9      	ldr	r1, [r7, #8]
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 ffa0 	bl	800526c <UART_Start_Receive_IT>
 800432c:	4603      	mov	r3, r0
 800432e:	e000      	b.n	8004332 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004330:	2302      	movs	r3, #2
  }
}
 8004332:	4618      	mov	r0, r3
 8004334:	3728      	adds	r7, #40	@ 0x28
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40008000 	.word	0x40008000

08004340 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b0ba      	sub	sp, #232	@ 0xe8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004366:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800436a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800436e:	4013      	ands	r3, r2
 8004370:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004378:	2b00      	cmp	r3, #0
 800437a:	d115      	bne.n	80043a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800437c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00f      	beq.n	80043a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	2b00      	cmp	r3, #0
 8004392:	d009      	beq.n	80043a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 82ca 	beq.w	8004932 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	4798      	blx	r3
      }
      return;
 80043a6:	e2c4      	b.n	8004932 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80043a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8117 	beq.w	80045e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80043b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80043be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80043c2:	4b85      	ldr	r3, [pc, #532]	@ (80045d8 <HAL_UART_IRQHandler+0x298>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 810a 	beq.w	80045e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80043cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d011      	beq.n	80043fc <HAL_UART_IRQHandler+0xbc>
 80043d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00b      	beq.n	80043fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2201      	movs	r2, #1
 80043ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043f2:	f043 0201 	orr.w	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d011      	beq.n	800442c <HAL_UART_IRQHandler+0xec>
 8004408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00b      	beq.n	800442c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2202      	movs	r2, #2
 800441a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004422:	f043 0204 	orr.w	r2, r3, #4
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800442c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	2b00      	cmp	r3, #0
 8004436:	d011      	beq.n	800445c <HAL_UART_IRQHandler+0x11c>
 8004438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00b      	beq.n	800445c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2204      	movs	r2, #4
 800444a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004452:	f043 0202 	orr.w	r2, r3, #2
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800445c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d017      	beq.n	8004498 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d105      	bne.n	8004480 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004478:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00b      	beq.n	8004498 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2208      	movs	r2, #8
 8004486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800448e:	f043 0208 	orr.w	r2, r3, #8
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800449c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d012      	beq.n	80044ca <HAL_UART_IRQHandler+0x18a>
 80044a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00c      	beq.n	80044ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044c0:	f043 0220 	orr.w	r2, r3, #32
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 8230 	beq.w	8004936 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80044d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00d      	beq.n	80044fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d007      	beq.n	80044fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004504:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004512:	2b40      	cmp	r3, #64	@ 0x40
 8004514:	d005      	beq.n	8004522 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800451a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800451e:	2b00      	cmp	r3, #0
 8004520:	d04f      	beq.n	80045c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 ff68 	bl	80053f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004532:	2b40      	cmp	r3, #64	@ 0x40
 8004534:	d141      	bne.n	80045ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3308      	adds	r3, #8
 800453c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800454c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3308      	adds	r3, #8
 800455e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004562:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004566:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800456e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004572:	e841 2300 	strex	r3, r2, [r1]
 8004576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800457a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1d9      	bne.n	8004536 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004586:	2b00      	cmp	r3, #0
 8004588:	d013      	beq.n	80045b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800458e:	4a13      	ldr	r2, [pc, #76]	@ (80045dc <HAL_UART_IRQHandler+0x29c>)
 8004590:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004596:	4618      	mov	r0, r3
 8004598:	f7fc ffad 	bl	80014f6 <HAL_DMA_Abort_IT>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d017      	beq.n	80045d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80045ac:	4610      	mov	r0, r2
 80045ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b0:	e00f      	b.n	80045d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f9d4 	bl	8004960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b8:	e00b      	b.n	80045d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f9d0 	bl	8004960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c0:	e007      	b.n	80045d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f9cc 	bl	8004960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80045d0:	e1b1      	b.n	8004936 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d2:	bf00      	nop
    return;
 80045d4:	e1af      	b.n	8004936 <HAL_UART_IRQHandler+0x5f6>
 80045d6:	bf00      	nop
 80045d8:	04000120 	.word	0x04000120
 80045dc:	080054c1 	.word	0x080054c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	f040 816a 	bne.w	80048be <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80045ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 8163 	beq.w	80048be <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80045f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 815c 	beq.w	80048be <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2210      	movs	r2, #16
 800460c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004618:	2b40      	cmp	r3, #64	@ 0x40
 800461a:	f040 80d4 	bne.w	80047c6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800462a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80ad 	beq.w	800478e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800463a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800463e:	429a      	cmp	r2, r3
 8004640:	f080 80a5 	bcs.w	800478e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800464a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	f040 8086 	bne.w	800476c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004674:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800467c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800468a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800468e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004692:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004696:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80046a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1da      	bne.n	8004660 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3308      	adds	r3, #8
 80046b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80046b4:	e853 3f00 	ldrex	r3, [r3]
 80046b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80046ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80046bc:	f023 0301 	bic.w	r3, r3, #1
 80046c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3308      	adds	r3, #8
 80046ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80046ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80046d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80046d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80046e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e1      	bne.n	80046aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3308      	adds	r3, #8
 80046ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80046f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3308      	adds	r3, #8
 8004706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800470a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800470c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004710:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1e3      	bne.n	80046e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800473a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800473c:	f023 0310 	bic.w	r3, r3, #16
 8004740:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	461a      	mov	r2, r3
 800474a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800474e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004750:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004754:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800475c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e4      	bne.n	800472c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004766:	4618      	mov	r0, r3
 8004768:	f7fc fe87 	bl	800147a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800477e:	b29b      	uxth	r3, r3
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	b29b      	uxth	r3, r3
 8004784:	4619      	mov	r1, r3
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f8f4 	bl	8004974 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800478c:	e0d5      	b.n	800493a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004794:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004798:	429a      	cmp	r2, r3
 800479a:	f040 80ce 	bne.w	800493a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	f040 80c5 	bne.w	800493a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80047bc:	4619      	mov	r1, r3
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f8d8 	bl	8004974 <HAL_UARTEx_RxEventCallback>
      return;
 80047c4:	e0b9      	b.n	800493a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f000 80ab 	beq.w	800493e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80047e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 80a6 	beq.w	800493e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047fa:	e853 3f00 	ldrex	r3, [r3]
 80047fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004806:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004814:	647b      	str	r3, [r7, #68]	@ 0x44
 8004816:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004818:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800481a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800481c:	e841 2300 	strex	r3, r2, [r1]
 8004820:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1e4      	bne.n	80047f2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3308      	adds	r3, #8
 800482e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004832:	e853 3f00 	ldrex	r3, [r3]
 8004836:	623b      	str	r3, [r7, #32]
   return(result);
 8004838:	6a3b      	ldr	r3, [r7, #32]
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3308      	adds	r3, #8
 8004848:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800484c:	633a      	str	r2, [r7, #48]	@ 0x30
 800484e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004852:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800485a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e3      	bne.n	8004828 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	e853 3f00 	ldrex	r3, [r3]
 8004880:	60fb      	str	r3, [r7, #12]
   return(result);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f023 0310 	bic.w	r3, r3, #16
 8004888:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	461a      	mov	r2, r3
 8004892:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004896:	61fb      	str	r3, [r7, #28]
 8004898:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	69b9      	ldr	r1, [r7, #24]
 800489c:	69fa      	ldr	r2, [r7, #28]
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	617b      	str	r3, [r7, #20]
   return(result);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e4      	bne.n	8004874 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2202      	movs	r2, #2
 80048ae:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048b4:	4619      	mov	r1, r3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f85c 	bl	8004974 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048bc:	e03f      	b.n	800493e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80048be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00e      	beq.n	80048e8 <HAL_UART_IRQHandler+0x5a8>
 80048ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d008      	beq.n	80048e8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80048de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 ffe9 	bl	80058b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048e6:	e02d      	b.n	8004944 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80048e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00e      	beq.n	8004912 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80048f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d008      	beq.n	8004912 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01c      	beq.n	8004942 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	4798      	blx	r3
    }
    return;
 8004910:	e017      	b.n	8004942 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d012      	beq.n	8004944 <HAL_UART_IRQHandler+0x604>
 800491e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00c      	beq.n	8004944 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fdde 	bl	80054ec <UART_EndTransmit_IT>
    return;
 8004930:	e008      	b.n	8004944 <HAL_UART_IRQHandler+0x604>
      return;
 8004932:	bf00      	nop
 8004934:	e006      	b.n	8004944 <HAL_UART_IRQHandler+0x604>
    return;
 8004936:	bf00      	nop
 8004938:	e004      	b.n	8004944 <HAL_UART_IRQHandler+0x604>
      return;
 800493a:	bf00      	nop
 800493c:	e002      	b.n	8004944 <HAL_UART_IRQHandler+0x604>
      return;
 800493e:	bf00      	nop
 8004940:	e000      	b.n	8004944 <HAL_UART_IRQHandler+0x604>
    return;
 8004942:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004944:	37e8      	adds	r7, #232	@ 0xe8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop

0800494c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800498c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004990:	b08a      	sub	sp, #40	@ 0x28
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	431a      	orrs	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4ba4      	ldr	r3, [pc, #656]	@ (8004c4c <UART_SetConfig+0x2c0>)
 80049bc:	4013      	ands	r3, r2
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a99      	ldr	r2, [pc, #612]	@ (8004c50 <UART_SetConfig+0x2c4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d004      	beq.n	80049f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
 80049f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f4:	4313      	orrs	r3, r2
 80049f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a90      	ldr	r2, [pc, #576]	@ (8004c54 <UART_SetConfig+0x2c8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d126      	bne.n	8004a64 <UART_SetConfig+0xd8>
 8004a16:	4b90      	ldr	r3, [pc, #576]	@ (8004c58 <UART_SetConfig+0x2cc>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d81b      	bhi.n	8004a5c <UART_SetConfig+0xd0>
 8004a24:	a201      	add	r2, pc, #4	@ (adr r2, 8004a2c <UART_SetConfig+0xa0>)
 8004a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2a:	bf00      	nop
 8004a2c:	08004a3d 	.word	0x08004a3d
 8004a30:	08004a4d 	.word	0x08004a4d
 8004a34:	08004a45 	.word	0x08004a45
 8004a38:	08004a55 	.word	0x08004a55
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a42:	e116      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004a44:	2302      	movs	r3, #2
 8004a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a4a:	e112      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a52:	e10e      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004a54:	2308      	movs	r3, #8
 8004a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a5a:	e10a      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a62:	e106      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a7c      	ldr	r2, [pc, #496]	@ (8004c5c <UART_SetConfig+0x2d0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d138      	bne.n	8004ae0 <UART_SetConfig+0x154>
 8004a6e:	4b7a      	ldr	r3, [pc, #488]	@ (8004c58 <UART_SetConfig+0x2cc>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b0c      	cmp	r3, #12
 8004a7a:	d82d      	bhi.n	8004ad8 <UART_SetConfig+0x14c>
 8004a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a84 <UART_SetConfig+0xf8>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004ab9 	.word	0x08004ab9
 8004a88:	08004ad9 	.word	0x08004ad9
 8004a8c:	08004ad9 	.word	0x08004ad9
 8004a90:	08004ad9 	.word	0x08004ad9
 8004a94:	08004ac9 	.word	0x08004ac9
 8004a98:	08004ad9 	.word	0x08004ad9
 8004a9c:	08004ad9 	.word	0x08004ad9
 8004aa0:	08004ad9 	.word	0x08004ad9
 8004aa4:	08004ac1 	.word	0x08004ac1
 8004aa8:	08004ad9 	.word	0x08004ad9
 8004aac:	08004ad9 	.word	0x08004ad9
 8004ab0:	08004ad9 	.word	0x08004ad9
 8004ab4:	08004ad1 	.word	0x08004ad1
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004abe:	e0d8      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac6:	e0d4      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004ac8:	2304      	movs	r3, #4
 8004aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ace:	e0d0      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004ad0:	2308      	movs	r3, #8
 8004ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad6:	e0cc      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004ad8:	2310      	movs	r3, #16
 8004ada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ade:	e0c8      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a5e      	ldr	r2, [pc, #376]	@ (8004c60 <UART_SetConfig+0x2d4>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d125      	bne.n	8004b36 <UART_SetConfig+0x1aa>
 8004aea:	4b5b      	ldr	r3, [pc, #364]	@ (8004c58 <UART_SetConfig+0x2cc>)
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004af4:	2b30      	cmp	r3, #48	@ 0x30
 8004af6:	d016      	beq.n	8004b26 <UART_SetConfig+0x19a>
 8004af8:	2b30      	cmp	r3, #48	@ 0x30
 8004afa:	d818      	bhi.n	8004b2e <UART_SetConfig+0x1a2>
 8004afc:	2b20      	cmp	r3, #32
 8004afe:	d00a      	beq.n	8004b16 <UART_SetConfig+0x18a>
 8004b00:	2b20      	cmp	r3, #32
 8004b02:	d814      	bhi.n	8004b2e <UART_SetConfig+0x1a2>
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <UART_SetConfig+0x182>
 8004b08:	2b10      	cmp	r3, #16
 8004b0a:	d008      	beq.n	8004b1e <UART_SetConfig+0x192>
 8004b0c:	e00f      	b.n	8004b2e <UART_SetConfig+0x1a2>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b14:	e0ad      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004b16:	2302      	movs	r3, #2
 8004b18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b1c:	e0a9      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004b1e:	2304      	movs	r3, #4
 8004b20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b24:	e0a5      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004b26:	2308      	movs	r3, #8
 8004b28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b2c:	e0a1      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004b2e:	2310      	movs	r3, #16
 8004b30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b34:	e09d      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a4a      	ldr	r2, [pc, #296]	@ (8004c64 <UART_SetConfig+0x2d8>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d125      	bne.n	8004b8c <UART_SetConfig+0x200>
 8004b40:	4b45      	ldr	r3, [pc, #276]	@ (8004c58 <UART_SetConfig+0x2cc>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b46:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b4a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b4c:	d016      	beq.n	8004b7c <UART_SetConfig+0x1f0>
 8004b4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004b50:	d818      	bhi.n	8004b84 <UART_SetConfig+0x1f8>
 8004b52:	2b80      	cmp	r3, #128	@ 0x80
 8004b54:	d00a      	beq.n	8004b6c <UART_SetConfig+0x1e0>
 8004b56:	2b80      	cmp	r3, #128	@ 0x80
 8004b58:	d814      	bhi.n	8004b84 <UART_SetConfig+0x1f8>
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <UART_SetConfig+0x1d8>
 8004b5e:	2b40      	cmp	r3, #64	@ 0x40
 8004b60:	d008      	beq.n	8004b74 <UART_SetConfig+0x1e8>
 8004b62:	e00f      	b.n	8004b84 <UART_SetConfig+0x1f8>
 8004b64:	2300      	movs	r3, #0
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b6a:	e082      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b72:	e07e      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004b74:	2304      	movs	r3, #4
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b7a:	e07a      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004b7c:	2308      	movs	r3, #8
 8004b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b82:	e076      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004b84:	2310      	movs	r3, #16
 8004b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b8a:	e072      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a35      	ldr	r2, [pc, #212]	@ (8004c68 <UART_SetConfig+0x2dc>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d12a      	bne.n	8004bec <UART_SetConfig+0x260>
 8004b96:	4b30      	ldr	r3, [pc, #192]	@ (8004c58 <UART_SetConfig+0x2cc>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ba0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ba4:	d01a      	beq.n	8004bdc <UART_SetConfig+0x250>
 8004ba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004baa:	d81b      	bhi.n	8004be4 <UART_SetConfig+0x258>
 8004bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bb0:	d00c      	beq.n	8004bcc <UART_SetConfig+0x240>
 8004bb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bb6:	d815      	bhi.n	8004be4 <UART_SetConfig+0x258>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <UART_SetConfig+0x238>
 8004bbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bc0:	d008      	beq.n	8004bd4 <UART_SetConfig+0x248>
 8004bc2:	e00f      	b.n	8004be4 <UART_SetConfig+0x258>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bca:	e052      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bd2:	e04e      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004bd4:	2304      	movs	r3, #4
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bda:	e04a      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004bdc:	2308      	movs	r3, #8
 8004bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004be2:	e046      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004be4:	2310      	movs	r3, #16
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bea:	e042      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a17      	ldr	r2, [pc, #92]	@ (8004c50 <UART_SetConfig+0x2c4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d13a      	bne.n	8004c6c <UART_SetConfig+0x2e0>
 8004bf6:	4b18      	ldr	r3, [pc, #96]	@ (8004c58 <UART_SetConfig+0x2cc>)
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c04:	d01a      	beq.n	8004c3c <UART_SetConfig+0x2b0>
 8004c06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c0a:	d81b      	bhi.n	8004c44 <UART_SetConfig+0x2b8>
 8004c0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c10:	d00c      	beq.n	8004c2c <UART_SetConfig+0x2a0>
 8004c12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c16:	d815      	bhi.n	8004c44 <UART_SetConfig+0x2b8>
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <UART_SetConfig+0x298>
 8004c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c20:	d008      	beq.n	8004c34 <UART_SetConfig+0x2a8>
 8004c22:	e00f      	b.n	8004c44 <UART_SetConfig+0x2b8>
 8004c24:	2300      	movs	r3, #0
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c2a:	e022      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c32:	e01e      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004c34:	2304      	movs	r3, #4
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c3a:	e01a      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004c3c:	2308      	movs	r3, #8
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c42:	e016      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004c44:	2310      	movs	r3, #16
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c4a:	e012      	b.n	8004c72 <UART_SetConfig+0x2e6>
 8004c4c:	efff69f3 	.word	0xefff69f3
 8004c50:	40008000 	.word	0x40008000
 8004c54:	40013800 	.word	0x40013800
 8004c58:	40021000 	.word	0x40021000
 8004c5c:	40004400 	.word	0x40004400
 8004c60:	40004800 	.word	0x40004800
 8004c64:	40004c00 	.word	0x40004c00
 8004c68:	40005000 	.word	0x40005000
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a9f      	ldr	r2, [pc, #636]	@ (8004ef4 <UART_SetConfig+0x568>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d17a      	bne.n	8004d72 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c80:	2b08      	cmp	r3, #8
 8004c82:	d824      	bhi.n	8004cce <UART_SetConfig+0x342>
 8004c84:	a201      	add	r2, pc, #4	@ (adr r2, 8004c8c <UART_SetConfig+0x300>)
 8004c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8a:	bf00      	nop
 8004c8c:	08004cb1 	.word	0x08004cb1
 8004c90:	08004ccf 	.word	0x08004ccf
 8004c94:	08004cb9 	.word	0x08004cb9
 8004c98:	08004ccf 	.word	0x08004ccf
 8004c9c:	08004cbf 	.word	0x08004cbf
 8004ca0:	08004ccf 	.word	0x08004ccf
 8004ca4:	08004ccf 	.word	0x08004ccf
 8004ca8:	08004ccf 	.word	0x08004ccf
 8004cac:	08004cc7 	.word	0x08004cc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb0:	f7fd fbfc 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 8004cb4:	61f8      	str	r0, [r7, #28]
        break;
 8004cb6:	e010      	b.n	8004cda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb8:	4b8f      	ldr	r3, [pc, #572]	@ (8004ef8 <UART_SetConfig+0x56c>)
 8004cba:	61fb      	str	r3, [r7, #28]
        break;
 8004cbc:	e00d      	b.n	8004cda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cbe:	f7fd fb5d 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8004cc2:	61f8      	str	r0, [r7, #28]
        break;
 8004cc4:	e009      	b.n	8004cda <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cca:	61fb      	str	r3, [r7, #28]
        break;
 8004ccc:	e005      	b.n	8004cda <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004cd8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 80fb 	beq.w	8004ed8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	4413      	add	r3, r2
 8004cec:	69fa      	ldr	r2, [r7, #28]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d305      	bcc.n	8004cfe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004cf8:	69fa      	ldr	r2, [r7, #28]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d903      	bls.n	8004d06 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d04:	e0e8      	b.n	8004ed8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	461c      	mov	r4, r3
 8004d0c:	4615      	mov	r5, r2
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	022b      	lsls	r3, r5, #8
 8004d18:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d1c:	0222      	lsls	r2, r4, #8
 8004d1e:	68f9      	ldr	r1, [r7, #12]
 8004d20:	6849      	ldr	r1, [r1, #4]
 8004d22:	0849      	lsrs	r1, r1, #1
 8004d24:	2000      	movs	r0, #0
 8004d26:	4688      	mov	r8, r1
 8004d28:	4681      	mov	r9, r0
 8004d2a:	eb12 0a08 	adds.w	sl, r2, r8
 8004d2e:	eb43 0b09 	adc.w	fp, r3, r9
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	603b      	str	r3, [r7, #0]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d40:	4650      	mov	r0, sl
 8004d42:	4659      	mov	r1, fp
 8004d44:	f7fb fa48 	bl	80001d8 <__aeabi_uldivmod>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d56:	d308      	bcc.n	8004d6a <UART_SetConfig+0x3de>
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d5e:	d204      	bcs.n	8004d6a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	60da      	str	r2, [r3, #12]
 8004d68:	e0b6      	b.n	8004ed8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d70:	e0b2      	b.n	8004ed8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d7a:	d15e      	bne.n	8004e3a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004d7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d828      	bhi.n	8004dd6 <UART_SetConfig+0x44a>
 8004d84:	a201      	add	r2, pc, #4	@ (adr r2, 8004d8c <UART_SetConfig+0x400>)
 8004d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8a:	bf00      	nop
 8004d8c:	08004db1 	.word	0x08004db1
 8004d90:	08004db9 	.word	0x08004db9
 8004d94:	08004dc1 	.word	0x08004dc1
 8004d98:	08004dd7 	.word	0x08004dd7
 8004d9c:	08004dc7 	.word	0x08004dc7
 8004da0:	08004dd7 	.word	0x08004dd7
 8004da4:	08004dd7 	.word	0x08004dd7
 8004da8:	08004dd7 	.word	0x08004dd7
 8004dac:	08004dcf 	.word	0x08004dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db0:	f7fd fb7c 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 8004db4:	61f8      	str	r0, [r7, #28]
        break;
 8004db6:	e014      	b.n	8004de2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db8:	f7fd fb8e 	bl	80024d8 <HAL_RCC_GetPCLK2Freq>
 8004dbc:	61f8      	str	r0, [r7, #28]
        break;
 8004dbe:	e010      	b.n	8004de2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc0:	4b4d      	ldr	r3, [pc, #308]	@ (8004ef8 <UART_SetConfig+0x56c>)
 8004dc2:	61fb      	str	r3, [r7, #28]
        break;
 8004dc4:	e00d      	b.n	8004de2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dc6:	f7fd fad9 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8004dca:	61f8      	str	r0, [r7, #28]
        break;
 8004dcc:	e009      	b.n	8004de2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dd2:	61fb      	str	r3, [r7, #28]
        break;
 8004dd4:	e005      	b.n	8004de2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004de0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d077      	beq.n	8004ed8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	005a      	lsls	r2, r3, #1
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	085b      	lsrs	r3, r3, #1
 8004df2:	441a      	add	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b0f      	cmp	r3, #15
 8004e02:	d916      	bls.n	8004e32 <UART_SetConfig+0x4a6>
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e0a:	d212      	bcs.n	8004e32 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f023 030f 	bic.w	r3, r3, #15
 8004e14:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	085b      	lsrs	r3, r3, #1
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	8afb      	ldrh	r3, [r7, #22]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	8afa      	ldrh	r2, [r7, #22]
 8004e2e:	60da      	str	r2, [r3, #12]
 8004e30:	e052      	b.n	8004ed8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e38:	e04e      	b.n	8004ed8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e3a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d827      	bhi.n	8004e92 <UART_SetConfig+0x506>
 8004e42:	a201      	add	r2, pc, #4	@ (adr r2, 8004e48 <UART_SetConfig+0x4bc>)
 8004e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e48:	08004e6d 	.word	0x08004e6d
 8004e4c:	08004e75 	.word	0x08004e75
 8004e50:	08004e7d 	.word	0x08004e7d
 8004e54:	08004e93 	.word	0x08004e93
 8004e58:	08004e83 	.word	0x08004e83
 8004e5c:	08004e93 	.word	0x08004e93
 8004e60:	08004e93 	.word	0x08004e93
 8004e64:	08004e93 	.word	0x08004e93
 8004e68:	08004e8b 	.word	0x08004e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e6c:	f7fd fb1e 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 8004e70:	61f8      	str	r0, [r7, #28]
        break;
 8004e72:	e014      	b.n	8004e9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e74:	f7fd fb30 	bl	80024d8 <HAL_RCC_GetPCLK2Freq>
 8004e78:	61f8      	str	r0, [r7, #28]
        break;
 8004e7a:	e010      	b.n	8004e9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ef8 <UART_SetConfig+0x56c>)
 8004e7e:	61fb      	str	r3, [r7, #28]
        break;
 8004e80:	e00d      	b.n	8004e9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e82:	f7fd fa7b 	bl	800237c <HAL_RCC_GetSysClockFreq>
 8004e86:	61f8      	str	r0, [r7, #28]
        break;
 8004e88:	e009      	b.n	8004e9e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e8e:	61fb      	str	r3, [r7, #28]
        break;
 8004e90:	e005      	b.n	8004e9e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e9c:	bf00      	nop
    }

    if (pclk != 0U)
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d019      	beq.n	8004ed8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	085a      	lsrs	r2, r3, #1
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	441a      	add	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	2b0f      	cmp	r3, #15
 8004ebc:	d909      	bls.n	8004ed2 <UART_SetConfig+0x546>
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec4:	d205      	bcs.n	8004ed2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60da      	str	r2, [r3, #12]
 8004ed0:	e002      	b.n	8004ed8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ee4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3728      	adds	r7, #40	@ 0x28
 8004eec:	46bd      	mov	sp, r7
 8004eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40008000 	.word	0x40008000
 8004ef8:	00f42400 	.word	0x00f42400

08004efc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f90:	f003 0310 	and.w	r3, r3, #16
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d01a      	beq.n	8005012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ffa:	d10a      	bne.n	8005012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	605a      	str	r2, [r3, #4]
  }
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b098      	sub	sp, #96	@ 0x60
 8005044:	af02      	add	r7, sp, #8
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005050:	f7fc f8f6 	bl	8001240 <HAL_GetTick>
 8005054:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0308 	and.w	r3, r3, #8
 8005060:	2b08      	cmp	r3, #8
 8005062:	d12e      	bne.n	80050c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005064:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800506c:	2200      	movs	r2, #0
 800506e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f88c 	bl	8005190 <UART_WaitOnFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d021      	beq.n	80050c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005086:	e853 3f00 	ldrex	r3, [r3]
 800508a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800508c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800508e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005092:	653b      	str	r3, [r7, #80]	@ 0x50
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	461a      	mov	r2, r3
 800509a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800509c:	647b      	str	r3, [r7, #68]	@ 0x44
 800509e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050a4:	e841 2300 	strex	r3, r2, [r1]
 80050a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1e6      	bne.n	800507e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e062      	b.n	8005188 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d149      	bne.n	8005164 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d8:	2200      	movs	r2, #0
 80050da:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f856 	bl	8005190 <UART_WaitOnFlagUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d03c      	beq.n	8005164 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	623b      	str	r3, [r7, #32]
   return(result);
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005108:	633b      	str	r3, [r7, #48]	@ 0x30
 800510a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800510e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e6      	bne.n	80050ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3308      	adds	r3, #8
 8005122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	e853 3f00 	ldrex	r3, [r3]
 800512a:	60fb      	str	r3, [r7, #12]
   return(result);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0301 	bic.w	r3, r3, #1
 8005132:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3308      	adds	r3, #8
 800513a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800513c:	61fa      	str	r2, [r7, #28]
 800513e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005140:	69b9      	ldr	r1, [r7, #24]
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	e841 2300 	strex	r3, r2, [r1]
 8005148:	617b      	str	r3, [r7, #20]
   return(result);
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1e5      	bne.n	800511c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e011      	b.n	8005188 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2220      	movs	r2, #32
 800516e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3758      	adds	r7, #88	@ 0x58
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	4613      	mov	r3, r2
 800519e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a0:	e04f      	b.n	8005242 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a8:	d04b      	beq.n	8005242 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051aa:	f7fc f849 	bl	8001240 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d302      	bcc.n	80051c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e04e      	b.n	8005262 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0304 	and.w	r3, r3, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d037      	beq.n	8005242 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b80      	cmp	r3, #128	@ 0x80
 80051d6:	d034      	beq.n	8005242 <UART_WaitOnFlagUntilTimeout+0xb2>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b40      	cmp	r3, #64	@ 0x40
 80051dc:	d031      	beq.n	8005242 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d110      	bne.n	800520e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2208      	movs	r2, #8
 80051f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f8ff 	bl	80053f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2208      	movs	r2, #8
 80051fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e029      	b.n	8005262 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005218:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800521c:	d111      	bne.n	8005242 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005226:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 f8e5 	bl	80053f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2220      	movs	r2, #32
 8005232:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e00f      	b.n	8005262 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4013      	ands	r3, r2
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	429a      	cmp	r2, r3
 8005250:	bf0c      	ite	eq
 8005252:	2301      	moveq	r3, #1
 8005254:	2300      	movne	r3, #0
 8005256:	b2db      	uxtb	r3, r3
 8005258:	461a      	mov	r2, r3
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	429a      	cmp	r2, r3
 800525e:	d0a0      	beq.n	80051a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800526c:	b480      	push	{r7}
 800526e:	b097      	sub	sp, #92	@ 0x5c
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	88fa      	ldrh	r2, [r7, #6]
 8005284:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	88fa      	ldrh	r2, [r7, #6]
 800528c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800529e:	d10e      	bne.n	80052be <UART_Start_Receive_IT+0x52>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d105      	bne.n	80052b4 <UART_Start_Receive_IT+0x48>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80052ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80052b2:	e02d      	b.n	8005310 <UART_Start_Receive_IT+0xa4>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	22ff      	movs	r2, #255	@ 0xff
 80052b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80052bc:	e028      	b.n	8005310 <UART_Start_Receive_IT+0xa4>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10d      	bne.n	80052e2 <UART_Start_Receive_IT+0x76>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d104      	bne.n	80052d8 <UART_Start_Receive_IT+0x6c>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	22ff      	movs	r2, #255	@ 0xff
 80052d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80052d6:	e01b      	b.n	8005310 <UART_Start_Receive_IT+0xa4>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	227f      	movs	r2, #127	@ 0x7f
 80052dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80052e0:	e016      	b.n	8005310 <UART_Start_Receive_IT+0xa4>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052ea:	d10d      	bne.n	8005308 <UART_Start_Receive_IT+0x9c>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d104      	bne.n	80052fe <UART_Start_Receive_IT+0x92>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	227f      	movs	r2, #127	@ 0x7f
 80052f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80052fc:	e008      	b.n	8005310 <UART_Start_Receive_IT+0xa4>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	223f      	movs	r2, #63	@ 0x3f
 8005302:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005306:	e003      	b.n	8005310 <UART_Start_Receive_IT+0xa4>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2222      	movs	r2, #34	@ 0x22
 800531c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3308      	adds	r3, #8
 8005326:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800532a:	e853 3f00 	ldrex	r3, [r3]
 800532e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	657b      	str	r3, [r7, #84]	@ 0x54
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3308      	adds	r3, #8
 800533e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005340:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005342:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005344:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005346:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005348:	e841 2300 	strex	r3, r2, [r1]
 800534c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800534e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1e5      	bne.n	8005320 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800535c:	d107      	bne.n	800536e <UART_Start_Receive_IT+0x102>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d103      	bne.n	800536e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4a21      	ldr	r2, [pc, #132]	@ (80053f0 <UART_Start_Receive_IT+0x184>)
 800536a:	669a      	str	r2, [r3, #104]	@ 0x68
 800536c:	e002      	b.n	8005374 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	4a20      	ldr	r2, [pc, #128]	@ (80053f4 <UART_Start_Receive_IT+0x188>)
 8005372:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d019      	beq.n	80053b0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800538a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005390:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	461a      	mov	r2, r3
 8005398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800539a:	637b      	str	r3, [r7, #52]	@ 0x34
 800539c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80053a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053a2:	e841 2300 	strex	r3, r2, [r1]
 80053a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80053a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1e6      	bne.n	800537c <UART_Start_Receive_IT+0x110>
 80053ae:	e018      	b.n	80053e2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	613b      	str	r3, [r7, #16]
   return(result);
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f043 0320 	orr.w	r3, r3, #32
 80053c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053ce:	623b      	str	r3, [r7, #32]
 80053d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	69f9      	ldr	r1, [r7, #28]
 80053d4:	6a3a      	ldr	r2, [r7, #32]
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	61bb      	str	r3, [r7, #24]
   return(result);
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e6      	bne.n	80053b0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	375c      	adds	r7, #92	@ 0x5c
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	080056fd 	.word	0x080056fd
 80053f4:	08005541 	.word	0x08005541

080053f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b095      	sub	sp, #84	@ 0x54
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005408:	e853 3f00 	ldrex	r3, [r3]
 800540c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800540e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005410:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005414:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800541e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005420:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005424:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800542c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1e6      	bne.n	8005400 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3308      	adds	r3, #8
 8005438:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	e853 3f00 	ldrex	r3, [r3]
 8005440:	61fb      	str	r3, [r7, #28]
   return(result);
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	f023 0301 	bic.w	r3, r3, #1
 8005448:	64bb      	str	r3, [r7, #72]	@ 0x48
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3308      	adds	r3, #8
 8005450:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005452:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005454:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005456:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005458:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800545a:	e841 2300 	strex	r3, r2, [r1]
 800545e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1e5      	bne.n	8005432 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800546a:	2b01      	cmp	r3, #1
 800546c:	d118      	bne.n	80054a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	e853 3f00 	ldrex	r3, [r3]
 800547a:	60bb      	str	r3, [r7, #8]
   return(result);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f023 0310 	bic.w	r3, r3, #16
 8005482:	647b      	str	r3, [r7, #68]	@ 0x44
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	461a      	mov	r2, r3
 800548a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800548c:	61bb      	str	r3, [r7, #24]
 800548e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005490:	6979      	ldr	r1, [r7, #20]
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	e841 2300 	strex	r3, r2, [r1]
 8005498:	613b      	str	r3, [r7, #16]
   return(result);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e6      	bne.n	800546e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80054b4:	bf00      	nop
 80054b6:	3754      	adds	r7, #84	@ 0x54
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f7ff fa3e 	bl	8004960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054e4:	bf00      	nop
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	e853 3f00 	ldrex	r3, [r3]
 8005500:	60bb      	str	r3, [r7, #8]
   return(result);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005508:	61fb      	str	r3, [r7, #28]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	61bb      	str	r3, [r7, #24]
 8005514:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005516:	6979      	ldr	r1, [r7, #20]
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	e841 2300 	strex	r3, r2, [r1]
 800551e:	613b      	str	r3, [r7, #16]
   return(result);
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1e6      	bne.n	80054f4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff fa0a 	bl	800494c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005538:	bf00      	nop
 800553a:	3720      	adds	r7, #32
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b09c      	sub	sp, #112	@ 0x70
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800554e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005558:	2b22      	cmp	r3, #34	@ 0x22
 800555a:	f040 80be 	bne.w	80056da <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005564:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005568:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800556c:	b2d9      	uxtb	r1, r3
 800556e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005572:	b2da      	uxtb	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005578:	400a      	ands	r2, r1
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800558e:	b29b      	uxth	r3, r3
 8005590:	3b01      	subs	r3, #1
 8005592:	b29a      	uxth	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f040 80a3 	bne.w	80056ee <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80055b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80055d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e6      	bne.n	80055a8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3308      	adds	r3, #8
 80055e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ec:	f023 0301 	bic.w	r3, r3, #1
 80055f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3308      	adds	r3, #8
 80055f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80055fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80055fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005600:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e5      	bne.n	80055da <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2220      	movs	r2, #32
 8005612:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a34      	ldr	r2, [pc, #208]	@ (80056f8 <UART_RxISR_8BIT+0x1b8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d01f      	beq.n	800566c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d018      	beq.n	800566c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005642:	e853 3f00 	ldrex	r3, [r3]
 8005646:	623b      	str	r3, [r7, #32]
   return(result);
 8005648:	6a3b      	ldr	r3, [r7, #32]
 800564a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800564e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	461a      	mov	r2, r3
 8005656:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005658:	633b      	str	r3, [r7, #48]	@ 0x30
 800565a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800565e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005660:	e841 2300 	strex	r3, r2, [r1]
 8005664:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1e6      	bne.n	800563a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005670:	2b01      	cmp	r3, #1
 8005672:	d12e      	bne.n	80056d2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	60fb      	str	r3, [r7, #12]
   return(result);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0310 	bic.w	r3, r3, #16
 800568e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005698:	61fb      	str	r3, [r7, #28]
 800569a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	69b9      	ldr	r1, [r7, #24]
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	617b      	str	r3, [r7, #20]
   return(result);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e6      	bne.n	800567a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f003 0310 	and.w	r3, r3, #16
 80056b6:	2b10      	cmp	r3, #16
 80056b8:	d103      	bne.n	80056c2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2210      	movs	r2, #16
 80056c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80056c8:	4619      	mov	r1, r3
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff f952 	bl	8004974 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80056d0:	e00d      	b.n	80056ee <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fb fa5e 	bl	8000b94 <HAL_UART_RxCpltCallback>
}
 80056d8:	e009      	b.n	80056ee <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	8b1b      	ldrh	r3, [r3, #24]
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0208 	orr.w	r2, r2, #8
 80056ea:	b292      	uxth	r2, r2
 80056ec:	831a      	strh	r2, [r3, #24]
}
 80056ee:	bf00      	nop
 80056f0:	3770      	adds	r7, #112	@ 0x70
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	40008000 	.word	0x40008000

080056fc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b09c      	sub	sp, #112	@ 0x70
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800570a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005714:	2b22      	cmp	r3, #34	@ 0x22
 8005716:	f040 80be 	bne.w	8005896 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005720:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005728:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800572a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800572e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005732:	4013      	ands	r3, r2
 8005734:	b29a      	uxth	r2, r3
 8005736:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005738:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573e:	1c9a      	adds	r2, r3, #2
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800574a:	b29b      	uxth	r3, r3
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 80a3 	bne.w	80058aa <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005774:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005778:	667b      	str	r3, [r7, #100]	@ 0x64
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005782:	657b      	str	r3, [r7, #84]	@ 0x54
 8005784:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005788:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e6      	bne.n	8005764 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3308      	adds	r3, #8
 800579c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a8:	f023 0301 	bic.w	r3, r3, #1
 80057ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3308      	adds	r3, #8
 80057b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80057b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80057b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e5      	bne.n	8005796 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2220      	movs	r2, #32
 80057ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a34      	ldr	r2, [pc, #208]	@ (80058b4 <UART_RxISR_16BIT+0x1b8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d01f      	beq.n	8005828 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d018      	beq.n	8005828 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	e853 3f00 	ldrex	r3, [r3]
 8005802:	61fb      	str	r3, [r7, #28]
   return(result);
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800580a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	461a      	mov	r2, r3
 8005812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005816:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005818:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800581a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800581c:	e841 2300 	strex	r3, r2, [r1]
 8005820:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1e6      	bne.n	80057f6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800582c:	2b01      	cmp	r3, #1
 800582e:	d12e      	bne.n	800588e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	60bb      	str	r3, [r7, #8]
   return(result);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f023 0310 	bic.w	r3, r3, #16
 800584a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	461a      	mov	r2, r3
 8005852:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	6979      	ldr	r1, [r7, #20]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	613b      	str	r3, [r7, #16]
   return(result);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e6      	bne.n	8005836 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	f003 0310 	and.w	r3, r3, #16
 8005872:	2b10      	cmp	r3, #16
 8005874:	d103      	bne.n	800587e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2210      	movs	r2, #16
 800587c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005884:	4619      	mov	r1, r3
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff f874 	bl	8004974 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800588c:	e00d      	b.n	80058aa <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fb f980 	bl	8000b94 <HAL_UART_RxCpltCallback>
}
 8005894:	e009      	b.n	80058aa <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	8b1b      	ldrh	r3, [r3, #24]
 800589c:	b29a      	uxth	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0208 	orr.w	r2, r2, #8
 80058a6:	b292      	uxth	r2, r2
 80058a8:	831a      	strh	r2, [r3, #24]
}
 80058aa:	bf00      	nop
 80058ac:	3770      	adds	r7, #112	@ 0x70
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40008000 	.word	0x40008000

080058b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <atoi>:
 80058cc:	220a      	movs	r2, #10
 80058ce:	2100      	movs	r1, #0
 80058d0:	f000 b87a 	b.w	80059c8 <strtol>

080058d4 <_strtol_l.constprop.0>:
 80058d4:	2b24      	cmp	r3, #36	@ 0x24
 80058d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058da:	4686      	mov	lr, r0
 80058dc:	4690      	mov	r8, r2
 80058de:	d801      	bhi.n	80058e4 <_strtol_l.constprop.0+0x10>
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d106      	bne.n	80058f2 <_strtol_l.constprop.0+0x1e>
 80058e4:	f000 f896 	bl	8005a14 <__errno>
 80058e8:	2316      	movs	r3, #22
 80058ea:	6003      	str	r3, [r0, #0]
 80058ec:	2000      	movs	r0, #0
 80058ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f2:	4834      	ldr	r0, [pc, #208]	@ (80059c4 <_strtol_l.constprop.0+0xf0>)
 80058f4:	460d      	mov	r5, r1
 80058f6:	462a      	mov	r2, r5
 80058f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058fc:	5d06      	ldrb	r6, [r0, r4]
 80058fe:	f016 0608 	ands.w	r6, r6, #8
 8005902:	d1f8      	bne.n	80058f6 <_strtol_l.constprop.0+0x22>
 8005904:	2c2d      	cmp	r4, #45	@ 0x2d
 8005906:	d12d      	bne.n	8005964 <_strtol_l.constprop.0+0x90>
 8005908:	782c      	ldrb	r4, [r5, #0]
 800590a:	2601      	movs	r6, #1
 800590c:	1c95      	adds	r5, r2, #2
 800590e:	f033 0210 	bics.w	r2, r3, #16
 8005912:	d109      	bne.n	8005928 <_strtol_l.constprop.0+0x54>
 8005914:	2c30      	cmp	r4, #48	@ 0x30
 8005916:	d12a      	bne.n	800596e <_strtol_l.constprop.0+0x9a>
 8005918:	782a      	ldrb	r2, [r5, #0]
 800591a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800591e:	2a58      	cmp	r2, #88	@ 0x58
 8005920:	d125      	bne.n	800596e <_strtol_l.constprop.0+0x9a>
 8005922:	786c      	ldrb	r4, [r5, #1]
 8005924:	2310      	movs	r3, #16
 8005926:	3502      	adds	r5, #2
 8005928:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800592c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005930:	2200      	movs	r2, #0
 8005932:	fbbc f9f3 	udiv	r9, ip, r3
 8005936:	4610      	mov	r0, r2
 8005938:	fb03 ca19 	mls	sl, r3, r9, ip
 800593c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005940:	2f09      	cmp	r7, #9
 8005942:	d81b      	bhi.n	800597c <_strtol_l.constprop.0+0xa8>
 8005944:	463c      	mov	r4, r7
 8005946:	42a3      	cmp	r3, r4
 8005948:	dd27      	ble.n	800599a <_strtol_l.constprop.0+0xc6>
 800594a:	1c57      	adds	r7, r2, #1
 800594c:	d007      	beq.n	800595e <_strtol_l.constprop.0+0x8a>
 800594e:	4581      	cmp	r9, r0
 8005950:	d320      	bcc.n	8005994 <_strtol_l.constprop.0+0xc0>
 8005952:	d101      	bne.n	8005958 <_strtol_l.constprop.0+0x84>
 8005954:	45a2      	cmp	sl, r4
 8005956:	db1d      	blt.n	8005994 <_strtol_l.constprop.0+0xc0>
 8005958:	fb00 4003 	mla	r0, r0, r3, r4
 800595c:	2201      	movs	r2, #1
 800595e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005962:	e7eb      	b.n	800593c <_strtol_l.constprop.0+0x68>
 8005964:	2c2b      	cmp	r4, #43	@ 0x2b
 8005966:	bf04      	itt	eq
 8005968:	782c      	ldrbeq	r4, [r5, #0]
 800596a:	1c95      	addeq	r5, r2, #2
 800596c:	e7cf      	b.n	800590e <_strtol_l.constprop.0+0x3a>
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1da      	bne.n	8005928 <_strtol_l.constprop.0+0x54>
 8005972:	2c30      	cmp	r4, #48	@ 0x30
 8005974:	bf0c      	ite	eq
 8005976:	2308      	moveq	r3, #8
 8005978:	230a      	movne	r3, #10
 800597a:	e7d5      	b.n	8005928 <_strtol_l.constprop.0+0x54>
 800597c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005980:	2f19      	cmp	r7, #25
 8005982:	d801      	bhi.n	8005988 <_strtol_l.constprop.0+0xb4>
 8005984:	3c37      	subs	r4, #55	@ 0x37
 8005986:	e7de      	b.n	8005946 <_strtol_l.constprop.0+0x72>
 8005988:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800598c:	2f19      	cmp	r7, #25
 800598e:	d804      	bhi.n	800599a <_strtol_l.constprop.0+0xc6>
 8005990:	3c57      	subs	r4, #87	@ 0x57
 8005992:	e7d8      	b.n	8005946 <_strtol_l.constprop.0+0x72>
 8005994:	f04f 32ff 	mov.w	r2, #4294967295
 8005998:	e7e1      	b.n	800595e <_strtol_l.constprop.0+0x8a>
 800599a:	1c53      	adds	r3, r2, #1
 800599c:	d108      	bne.n	80059b0 <_strtol_l.constprop.0+0xdc>
 800599e:	2322      	movs	r3, #34	@ 0x22
 80059a0:	f8ce 3000 	str.w	r3, [lr]
 80059a4:	4660      	mov	r0, ip
 80059a6:	f1b8 0f00 	cmp.w	r8, #0
 80059aa:	d0a0      	beq.n	80058ee <_strtol_l.constprop.0+0x1a>
 80059ac:	1e69      	subs	r1, r5, #1
 80059ae:	e006      	b.n	80059be <_strtol_l.constprop.0+0xea>
 80059b0:	b106      	cbz	r6, 80059b4 <_strtol_l.constprop.0+0xe0>
 80059b2:	4240      	negs	r0, r0
 80059b4:	f1b8 0f00 	cmp.w	r8, #0
 80059b8:	d099      	beq.n	80058ee <_strtol_l.constprop.0+0x1a>
 80059ba:	2a00      	cmp	r2, #0
 80059bc:	d1f6      	bne.n	80059ac <_strtol_l.constprop.0+0xd8>
 80059be:	f8c8 1000 	str.w	r1, [r8]
 80059c2:	e794      	b.n	80058ee <_strtol_l.constprop.0+0x1a>
 80059c4:	08005ae5 	.word	0x08005ae5

080059c8 <strtol>:
 80059c8:	4613      	mov	r3, r2
 80059ca:	460a      	mov	r2, r1
 80059cc:	4601      	mov	r1, r0
 80059ce:	4802      	ldr	r0, [pc, #8]	@ (80059d8 <strtol+0x10>)
 80059d0:	6800      	ldr	r0, [r0, #0]
 80059d2:	f7ff bf7f 	b.w	80058d4 <_strtol_l.constprop.0>
 80059d6:	bf00      	nop
 80059d8:	2000000c 	.word	0x2000000c

080059dc <memset>:
 80059dc:	4402      	add	r2, r0
 80059de:	4603      	mov	r3, r0
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d100      	bne.n	80059e6 <memset+0xa>
 80059e4:	4770      	bx	lr
 80059e6:	f803 1b01 	strb.w	r1, [r3], #1
 80059ea:	e7f9      	b.n	80059e0 <memset+0x4>

080059ec <strncpy>:
 80059ec:	b510      	push	{r4, lr}
 80059ee:	3901      	subs	r1, #1
 80059f0:	4603      	mov	r3, r0
 80059f2:	b132      	cbz	r2, 8005a02 <strncpy+0x16>
 80059f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80059f8:	f803 4b01 	strb.w	r4, [r3], #1
 80059fc:	3a01      	subs	r2, #1
 80059fe:	2c00      	cmp	r4, #0
 8005a00:	d1f7      	bne.n	80059f2 <strncpy+0x6>
 8005a02:	441a      	add	r2, r3
 8005a04:	2100      	movs	r1, #0
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d100      	bne.n	8005a0c <strncpy+0x20>
 8005a0a:	bd10      	pop	{r4, pc}
 8005a0c:	f803 1b01 	strb.w	r1, [r3], #1
 8005a10:	e7f9      	b.n	8005a06 <strncpy+0x1a>
	...

08005a14 <__errno>:
 8005a14:	4b01      	ldr	r3, [pc, #4]	@ (8005a1c <__errno+0x8>)
 8005a16:	6818      	ldr	r0, [r3, #0]
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	2000000c 	.word	0x2000000c

08005a20 <__libc_init_array>:
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	4d0d      	ldr	r5, [pc, #52]	@ (8005a58 <__libc_init_array+0x38>)
 8005a24:	4c0d      	ldr	r4, [pc, #52]	@ (8005a5c <__libc_init_array+0x3c>)
 8005a26:	1b64      	subs	r4, r4, r5
 8005a28:	10a4      	asrs	r4, r4, #2
 8005a2a:	2600      	movs	r6, #0
 8005a2c:	42a6      	cmp	r6, r4
 8005a2e:	d109      	bne.n	8005a44 <__libc_init_array+0x24>
 8005a30:	4d0b      	ldr	r5, [pc, #44]	@ (8005a60 <__libc_init_array+0x40>)
 8005a32:	4c0c      	ldr	r4, [pc, #48]	@ (8005a64 <__libc_init_array+0x44>)
 8005a34:	f000 f826 	bl	8005a84 <_init>
 8005a38:	1b64      	subs	r4, r4, r5
 8005a3a:	10a4      	asrs	r4, r4, #2
 8005a3c:	2600      	movs	r6, #0
 8005a3e:	42a6      	cmp	r6, r4
 8005a40:	d105      	bne.n	8005a4e <__libc_init_array+0x2e>
 8005a42:	bd70      	pop	{r4, r5, r6, pc}
 8005a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a48:	4798      	blx	r3
 8005a4a:	3601      	adds	r6, #1
 8005a4c:	e7ee      	b.n	8005a2c <__libc_init_array+0xc>
 8005a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a52:	4798      	blx	r3
 8005a54:	3601      	adds	r6, #1
 8005a56:	e7f2      	b.n	8005a3e <__libc_init_array+0x1e>
 8005a58:	08005bf0 	.word	0x08005bf0
 8005a5c:	08005bf0 	.word	0x08005bf0
 8005a60:	08005bf0 	.word	0x08005bf0
 8005a64:	08005bf4 	.word	0x08005bf4

08005a68 <memcpy>:
 8005a68:	440a      	add	r2, r1
 8005a6a:	4291      	cmp	r1, r2
 8005a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a70:	d100      	bne.n	8005a74 <memcpy+0xc>
 8005a72:	4770      	bx	lr
 8005a74:	b510      	push	{r4, lr}
 8005a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a7e:	4291      	cmp	r1, r2
 8005a80:	d1f9      	bne.n	8005a76 <memcpy+0xe>
 8005a82:	bd10      	pop	{r4, pc}

08005a84 <_init>:
 8005a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a86:	bf00      	nop
 8005a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a8a:	bc08      	pop	{r3}
 8005a8c:	469e      	mov	lr, r3
 8005a8e:	4770      	bx	lr

08005a90 <_fini>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	bf00      	nop
 8005a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a96:	bc08      	pop	{r3}
 8005a98:	469e      	mov	lr, r3
 8005a9a:	4770      	bx	lr
