
stepper_ares.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005800  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080058bc  080058bc  000068bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005998  08005998  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005998  08005998  00006998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059a0  080059a0  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059a0  080059a0  000069a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059a4  080059a4  000069a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080059a8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  080059b4  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080059b4  0000715c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010aad  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237e  00000000  00000000  00017ae1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00019e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b61  00000000  00000000  0001acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bce  00000000  00000000  0001b829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c35  00000000  00000000  000343f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a11e7  00000000  00000000  0004602c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7213  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000345c  00000000  00000000  000e7258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ea6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080058a4 	.word	0x080058a4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080058a4 	.word	0x080058a4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	@ 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	@ 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			@ (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	@ (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	@ (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			@ (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			@ (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			@ (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	@ (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f000 fccf 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f8b7 	bl	8000798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 faad 	bl	8000b88 <MX_GPIO_Init>
  MX_TIM1_Init();
 800062e:	f000 f911 	bl	8000854 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000632:	f000 f9db 	bl	80009ec <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000636:	f000 fa59 	bl	8000aec <MX_USART1_UART_Init>
	char message[3];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);//enable
 800063a:	23a0      	movs	r3, #160	@ 0xa0
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	2200      	movs	r2, #0
 8000640:	2120      	movs	r1, #32
 8000642:	0018      	movs	r0, r3
 8000644:	f001 f852 	bl	80016ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000648:	23a0      	movs	r3, #160	@ 0xa0
 800064a:	05db      	lsls	r3, r3, #23
 800064c:	2200      	movs	r2, #0
 800064e:	2110      	movs	r1, #16
 8000650:	0018      	movs	r0, r3
 8000652:	f001 f84b 	bl	80016ec <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);//enable
 8000656:	2380      	movs	r3, #128	@ 0x80
 8000658:	0099      	lsls	r1, r3, #2
 800065a:	23a0      	movs	r3, #160	@ 0xa0
 800065c:	05db      	lsls	r3, r3, #23
 800065e:	2200      	movs	r2, #0
 8000660:	0018      	movs	r0, r3
 8000662:	f001 f843 	bl	80016ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000666:	4b47      	ldr	r3, [pc, #284]	@ (8000784 <main+0x168>)
 8000668:	2200      	movs	r2, #0
 800066a:	2140      	movs	r1, #64	@ 0x40
 800066c:	0018      	movs	r0, r3
 800066e:	f001 f83d 	bl	80016ec <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000672:	4b45      	ldr	r3, [pc, #276]	@ (8000788 <main+0x16c>)
 8000674:	2100      	movs	r1, #0
 8000676:	0018      	movs	r0, r3
 8000678:	f001 ffd6 	bl	8002628 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800067c:	4b43      	ldr	r3, [pc, #268]	@ (800078c <main+0x170>)
 800067e:	2108      	movs	r1, #8
 8000680:	0018      	movs	r0, r3
 8000682:	f001 ffd1 	bl	8002628 <HAL_TIM_PWM_Start>

	HAL_UART_Receive_IT(&huart1, (uint8_t*)rx_data, 1);
 8000686:	4942      	ldr	r1, [pc, #264]	@ (8000790 <main+0x174>)
 8000688:	4b42      	ldr	r3, [pc, #264]	@ (8000794 <main+0x178>)
 800068a:	2201      	movs	r2, #1
 800068c:	0018      	movs	r0, r3
 800068e:	f003 f8a1 	bl	80037d4 <HAL_UART_Receive_IT>
//		char value_step_char[2];
//		value_step_char[0] = rx_data[0];
//		value_step_char[1] = '\0';
//		int value_step = atoi(value_step_char);

		if (rx_data[0] == 0)
 8000692:	4b3f      	ldr	r3, [pc, #252]	@ (8000790 <main+0x174>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d10b      	bne.n	80006b2 <main+0x96>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800069a:	23a0      	movs	r3, #160	@ 0xa0
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	2200      	movs	r2, #0
 80006a0:	2110      	movs	r1, #16
 80006a2:	0018      	movs	r0, r3
 80006a4:	f001 f822 	bl	80016ec <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80006a8:	4b37      	ldr	r3, [pc, #220]	@ (8000788 <main+0x16c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2200      	movs	r2, #0
 80006ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80006b0:	e055      	b.n	800075e <main+0x142>
		}
		else if (rx_data[0] == 1)
 80006b2:	4b37      	ldr	r3, [pc, #220]	@ (8000790 <main+0x174>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d10c      	bne.n	80006d4 <main+0xb8>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80006ba:	23a0      	movs	r3, #160	@ 0xa0
 80006bc:	05db      	lsls	r3, r3, #23
 80006be:	2200      	movs	r2, #0
 80006c0:	2110      	movs	r1, #16
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 f812 	bl	80016ec <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 499);
 80006c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000788 <main+0x16c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	22f4      	movs	r2, #244	@ 0xf4
 80006ce:	32ff      	adds	r2, #255	@ 0xff
 80006d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006d2:	e044      	b.n	800075e <main+0x142>
		}
		else if (rx_data[0] == 2)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000790 <main+0x174>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d10c      	bne.n	80006f6 <main+0xda>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80006dc:	23a0      	movs	r3, #160	@ 0xa0
 80006de:	05db      	lsls	r3, r3, #23
 80006e0:	2201      	movs	r2, #1
 80006e2:	2110      	movs	r1, #16
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 f801 	bl	80016ec <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 499);
 80006ea:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <main+0x16c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	22f4      	movs	r2, #244	@ 0xf4
 80006f0:	32ff      	adds	r2, #255	@ 0xff
 80006f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80006f4:	e033      	b.n	800075e <main+0x142>
		}
		else if (rx_data[0] == 3)
 80006f6:	4b26      	ldr	r3, [pc, #152]	@ (8000790 <main+0x174>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	d10c      	bne.n	8000718 <main+0xfc>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80006fe:	2380      	movs	r3, #128	@ 0x80
 8000700:	0099      	lsls	r1, r3, #2
 8000702:	23a0      	movs	r3, #160	@ 0xa0
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	2200      	movs	r2, #0
 8000708:	0018      	movs	r0, r3
 800070a:	f000 ffef 	bl	80016ec <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800070e:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <main+0x170>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000716:	e022      	b.n	800075e <main+0x142>
		}
		else if (rx_data[0] == 4)
 8000718:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <main+0x174>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b04      	cmp	r3, #4
 800071e:	d10d      	bne.n	800073c <main+0x120>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000720:	2380      	movs	r3, #128	@ 0x80
 8000722:	0099      	lsls	r1, r3, #2
 8000724:	23a0      	movs	r3, #160	@ 0xa0
 8000726:	05db      	lsls	r3, r3, #23
 8000728:	2200      	movs	r2, #0
 800072a:	0018      	movs	r0, r3
 800072c:	f000 ffde 	bl	80016ec <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 499);
 8000730:	4b16      	ldr	r3, [pc, #88]	@ (800078c <main+0x170>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	22f4      	movs	r2, #244	@ 0xf4
 8000736:	32ff      	adds	r2, #255	@ 0xff
 8000738:	63da      	str	r2, [r3, #60]	@ 0x3c
 800073a:	e010      	b.n	800075e <main+0x142>
		}
		else if (rx_data[0] == 5)
 800073c:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <main+0x174>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b05      	cmp	r3, #5
 8000742:	d10c      	bne.n	800075e <main+0x142>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8000744:	2380      	movs	r3, #128	@ 0x80
 8000746:	0099      	lsls	r1, r3, #2
 8000748:	23a0      	movs	r3, #160	@ 0xa0
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	2201      	movs	r2, #1
 800074e:	0018      	movs	r0, r3
 8000750:	f000 ffcc 	bl	80016ec <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 499);
 8000754:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <main+0x170>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	22f4      	movs	r2, #244	@ 0xf4
 800075a:	32ff      	adds	r2, #255	@ 0xff
 800075c:	63da      	str	r2, [r3, #60]	@ 0x3c
		}


		message[0] = rx_data[0];
 800075e:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <main+0x174>)
 8000760:	781a      	ldrb	r2, [r3, #0]
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	701a      	strb	r2, [r3, #0]
		message[1] = '\r';
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	220d      	movs	r2, #13
 800076a:	705a      	strb	r2, [r3, #1]
		message[2] = '\n';
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	220a      	movs	r2, #10
 8000770:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart1, (uint8_t *)message, 3, HAL_MAX_DELAY);
 8000772:	2301      	movs	r3, #1
 8000774:	425b      	negs	r3, r3
 8000776:	1d39      	adds	r1, r7, #4
 8000778:	4806      	ldr	r0, [pc, #24]	@ (8000794 <main+0x178>)
 800077a:	2203      	movs	r2, #3
 800077c:	f002 ff86 	bl	800368c <HAL_UART_Transmit>
		if (rx_data[0] == 0)
 8000780:	e787      	b.n	8000692 <main+0x76>
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	50000800 	.word	0x50000800
 8000788:	20000074 	.word	0x20000074
 800078c:	20000028 	.word	0x20000028
 8000790:	20000154 	.word	0x20000154
 8000794:	200000c0 	.word	0x200000c0

08000798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b093      	sub	sp, #76	@ 0x4c
 800079c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	2410      	movs	r4, #16
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	0018      	movs	r0, r3
 80007a4:	2338      	movs	r3, #56	@ 0x38
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f005 f84f 	bl	800584c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ae:	003b      	movs	r3, r7
 80007b0:	0018      	movs	r0, r3
 80007b2:	2310      	movs	r3, #16
 80007b4:	001a      	movs	r2, r3
 80007b6:	2100      	movs	r1, #0
 80007b8:	f005 f848 	bl	800584c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2380      	movs	r3, #128	@ 0x80
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 ffb1 	bl	8001728 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	2202      	movs	r2, #2
 80007ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	193b      	adds	r3, r7, r4
 80007ce:	2280      	movs	r2, #128	@ 0x80
 80007d0:	0052      	lsls	r2, r2, #1
 80007d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007d4:	0021      	movs	r1, r4
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2240      	movs	r2, #64	@ 0x40
 80007e0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2202      	movs	r2, #2
 80007e6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2202      	movs	r2, #2
 80007ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 9;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2209      	movs	r2, #9
 80007f8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2280      	movs	r2, #128	@ 0x80
 80007fe:	0292      	lsls	r2, r2, #10
 8000800:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000802:	187b      	adds	r3, r7, r1
 8000804:	22a0      	movs	r2, #160	@ 0xa0
 8000806:	0512      	lsls	r2, r2, #20
 8000808:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2280      	movs	r2, #128	@ 0x80
 800080e:	05d2      	lsls	r2, r2, #23
 8000810:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000812:	187b      	adds	r3, r7, r1
 8000814:	0018      	movs	r0, r3
 8000816:	f000 ffd3 	bl	80017c0 <HAL_RCC_OscConfig>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800081e:	f000 fa35 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	003b      	movs	r3, r7
 8000824:	2207      	movs	r2, #7
 8000826:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	003b      	movs	r3, r7
 800082a:	2202      	movs	r2, #2
 800082c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082e:	003b      	movs	r3, r7
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000834:	003b      	movs	r3, r7
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800083a:	003b      	movs	r3, r7
 800083c:	2101      	movs	r1, #1
 800083e:	0018      	movs	r0, r3
 8000840:	f001 fad8 	bl	8001df4 <HAL_RCC_ClockConfig>
 8000844:	1e03      	subs	r3, r0, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000848:	f000 fa20 	bl	8000c8c <Error_Handler>
  }
}
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b013      	add	sp, #76	@ 0x4c
 8000852:	bd90      	pop	{r4, r7, pc}

08000854 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b09c      	sub	sp, #112	@ 0x70
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085a:	2360      	movs	r3, #96	@ 0x60
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	0018      	movs	r0, r3
 8000860:	2310      	movs	r3, #16
 8000862:	001a      	movs	r2, r3
 8000864:	2100      	movs	r1, #0
 8000866:	f004 fff1 	bl	800584c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086a:	2354      	movs	r3, #84	@ 0x54
 800086c:	18fb      	adds	r3, r7, r3
 800086e:	0018      	movs	r0, r3
 8000870:	230c      	movs	r3, #12
 8000872:	001a      	movs	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	f004 ffe9 	bl	800584c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087a:	2338      	movs	r3, #56	@ 0x38
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	0018      	movs	r0, r3
 8000880:	231c      	movs	r3, #28
 8000882:	001a      	movs	r2, r3
 8000884:	2100      	movs	r1, #0
 8000886:	f004 ffe1 	bl	800584c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	0018      	movs	r0, r3
 800088e:	2334      	movs	r3, #52	@ 0x34
 8000890:	001a      	movs	r2, r3
 8000892:	2100      	movs	r1, #0
 8000894:	f004 ffda 	bl	800584c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000898:	4b51      	ldr	r3, [pc, #324]	@ (80009e0 <MX_TIM1_Init+0x18c>)
 800089a:	4a52      	ldr	r2, [pc, #328]	@ (80009e4 <MX_TIM1_Init+0x190>)
 800089c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 239;
 800089e:	4b50      	ldr	r3, [pc, #320]	@ (80009e0 <MX_TIM1_Init+0x18c>)
 80008a0:	22ef      	movs	r2, #239	@ 0xef
 80008a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a4:	4b4e      	ldr	r3, [pc, #312]	@ (80009e0 <MX_TIM1_Init+0x18c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80008aa:	4b4d      	ldr	r3, [pc, #308]	@ (80009e0 <MX_TIM1_Init+0x18c>)
 80008ac:	4a4e      	ldr	r2, [pc, #312]	@ (80009e8 <MX_TIM1_Init+0x194>)
 80008ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008b0:	4b4b      	ldr	r3, [pc, #300]	@ (80009e0 <MX_TIM1_Init+0x18c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008b6:	4b4a      	ldr	r3, [pc, #296]	@ (80009e0 <MX_TIM1_Init+0x18c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008bc:	4b48      	ldr	r3, [pc, #288]	@ (80009e0 <MX_TIM1_Init+0x18c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008c2:	4b47      	ldr	r3, [pc, #284]	@ (80009e0 <MX_TIM1_Init+0x18c>)
 80008c4:	0018      	movs	r0, r3
 80008c6:	f001 fdf7 	bl	80024b8 <HAL_TIM_Base_Init>
 80008ca:	1e03      	subs	r3, r0, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80008ce:	f000 f9dd 	bl	8000c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008d2:	2160      	movs	r1, #96	@ 0x60
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2280      	movs	r2, #128	@ 0x80
 80008d8:	0152      	lsls	r2, r2, #5
 80008da:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008dc:	187a      	adds	r2, r7, r1
 80008de:	4b40      	ldr	r3, [pc, #256]	@ (80009e0 <MX_TIM1_Init+0x18c>)
 80008e0:	0011      	movs	r1, r2
 80008e2:	0018      	movs	r0, r3
 80008e4:	f002 f88a 	bl	80029fc <HAL_TIM_ConfigClockSource>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80008ec:	f000 f9ce 	bl	8000c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008f0:	4b3b      	ldr	r3, [pc, #236]	@ (80009e0 <MX_TIM1_Init+0x18c>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 fe38 	bl	8002568 <HAL_TIM_PWM_Init>
 80008f8:	1e03      	subs	r3, r0, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80008fc:	f000 f9c6 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000900:	2154      	movs	r1, #84	@ 0x54
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000914:	187a      	adds	r2, r7, r1
 8000916:	4b32      	ldr	r3, [pc, #200]	@ (80009e0 <MX_TIM1_Init+0x18c>)
 8000918:	0011      	movs	r1, r2
 800091a:	0018      	movs	r0, r3
 800091c:	f002 fd56 	bl	80033cc <HAL_TIMEx_MasterConfigSynchronization>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000924:	f000 f9b2 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000928:	2138      	movs	r1, #56	@ 0x38
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2260      	movs	r2, #96	@ 0x60
 800092e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2200      	movs	r2, #0
 8000934:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000954:	1879      	adds	r1, r7, r1
 8000956:	4b22      	ldr	r3, [pc, #136]	@ (80009e0 <MX_TIM1_Init+0x18c>)
 8000958:	2208      	movs	r2, #8
 800095a:	0018      	movs	r0, r3
 800095c:	f001 ff4e 	bl	80027fc <HAL_TIM_PWM_ConfigChannel>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000964:	f000 f992 	bl	8000c8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2280      	movs	r2, #128	@ 0x80
 800098a:	0192      	lsls	r2, r2, #6
 800098c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2280      	movs	r2, #128	@ 0x80
 80009a4:	0492      	lsls	r2, r2, #18
 80009a6:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009ba:	1d3a      	adds	r2, r7, #4
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <MX_TIM1_Init+0x18c>)
 80009be:	0011      	movs	r1, r2
 80009c0:	0018      	movs	r0, r3
 80009c2:	f002 fd71 	bl	80034a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80009ca:	f000 f95f 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009ce:	4b04      	ldr	r3, [pc, #16]	@ (80009e0 <MX_TIM1_Init+0x18c>)
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 f9cf 	bl	8000d74 <HAL_TIM_MspPostInit>

}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b01c      	add	sp, #112	@ 0x70
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	20000028 	.word	0x20000028
 80009e4:	40012c00 	.word	0x40012c00
 80009e8:	000003e7 	.word	0x000003e7

080009ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08e      	sub	sp, #56	@ 0x38
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f2:	2328      	movs	r3, #40	@ 0x28
 80009f4:	18fb      	adds	r3, r7, r3
 80009f6:	0018      	movs	r0, r3
 80009f8:	2310      	movs	r3, #16
 80009fa:	001a      	movs	r2, r3
 80009fc:	2100      	movs	r1, #0
 80009fe:	f004 ff25 	bl	800584c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a02:	231c      	movs	r3, #28
 8000a04:	18fb      	adds	r3, r7, r3
 8000a06:	0018      	movs	r0, r3
 8000a08:	230c      	movs	r3, #12
 8000a0a:	001a      	movs	r2, r3
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	f004 ff1d 	bl	800584c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a12:	003b      	movs	r3, r7
 8000a14:	0018      	movs	r0, r3
 8000a16:	231c      	movs	r3, #28
 8000a18:	001a      	movs	r2, r3
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	f004 ff16 	bl	800584c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a20:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae0 <MX_TIM3_Init+0xf4>)
 8000a22:	4a30      	ldr	r2, [pc, #192]	@ (8000ae4 <MX_TIM3_Init+0xf8>)
 8000a24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 239;
 8000a26:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae0 <MX_TIM3_Init+0xf4>)
 8000a28:	22ef      	movs	r2, #239	@ 0xef
 8000a2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae0 <MX_TIM3_Init+0xf4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000a32:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae0 <MX_TIM3_Init+0xf4>)
 8000a34:	4a2c      	ldr	r2, [pc, #176]	@ (8000ae8 <MX_TIM3_Init+0xfc>)
 8000a36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a38:	4b29      	ldr	r3, [pc, #164]	@ (8000ae0 <MX_TIM3_Init+0xf4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ae0 <MX_TIM3_Init+0xf4>)
 8000a40:	2280      	movs	r2, #128	@ 0x80
 8000a42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a44:	4b26      	ldr	r3, [pc, #152]	@ (8000ae0 <MX_TIM3_Init+0xf4>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f001 fd36 	bl	80024b8 <HAL_TIM_Base_Init>
 8000a4c:	1e03      	subs	r3, r0, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000a50:	f000 f91c 	bl	8000c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a54:	2128      	movs	r1, #40	@ 0x28
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2280      	movs	r2, #128	@ 0x80
 8000a5a:	0152      	lsls	r2, r2, #5
 8000a5c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a5e:	187a      	adds	r2, r7, r1
 8000a60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae0 <MX_TIM3_Init+0xf4>)
 8000a62:	0011      	movs	r1, r2
 8000a64:	0018      	movs	r0, r3
 8000a66:	f001 ffc9 	bl	80029fc <HAL_TIM_ConfigClockSource>
 8000a6a:	1e03      	subs	r3, r0, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000a6e:	f000 f90d 	bl	8000c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a72:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae0 <MX_TIM3_Init+0xf4>)
 8000a74:	0018      	movs	r0, r3
 8000a76:	f001 fd77 	bl	8002568 <HAL_TIM_PWM_Init>
 8000a7a:	1e03      	subs	r3, r0, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000a7e:	f000 f905 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a82:	211c      	movs	r1, #28
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a90:	187a      	adds	r2, r7, r1
 8000a92:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <MX_TIM3_Init+0xf4>)
 8000a94:	0011      	movs	r1, r2
 8000a96:	0018      	movs	r0, r3
 8000a98:	f002 fc98 	bl	80033cc <HAL_TIMEx_MasterConfigSynchronization>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000aa0:	f000 f8f4 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa4:	003b      	movs	r3, r7
 8000aa6:	2260      	movs	r2, #96	@ 0x60
 8000aa8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000aaa:	003b      	movs	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab6:	003b      	movs	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abc:	0039      	movs	r1, r7
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <MX_TIM3_Init+0xf4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f001 fe9a 	bl	80027fc <HAL_TIM_PWM_ConfigChannel>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000acc:	f000 f8de 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ad0:	4b03      	ldr	r3, [pc, #12]	@ (8000ae0 <MX_TIM3_Init+0xf4>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 f94e 	bl	8000d74 <HAL_TIM_MspPostInit>

}
 8000ad8:	46c0      	nop			@ (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b00e      	add	sp, #56	@ 0x38
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000074 	.word	0x20000074
 8000ae4:	40000400 	.word	0x40000400
 8000ae8:	000003e7 	.word	0x000003e7

08000aec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af0:	4b23      	ldr	r3, [pc, #140]	@ (8000b80 <MX_USART1_UART_Init+0x94>)
 8000af2:	4a24      	ldr	r2, [pc, #144]	@ (8000b84 <MX_USART1_UART_Init+0x98>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000af6:	4b22      	ldr	r3, [pc, #136]	@ (8000b80 <MX_USART1_UART_Init+0x94>)
 8000af8:	22e1      	movs	r2, #225	@ 0xe1
 8000afa:	0252      	lsls	r2, r2, #9
 8000afc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b20      	ldr	r3, [pc, #128]	@ (8000b80 <MX_USART1_UART_Init+0x94>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	@ (8000b80 <MX_USART1_UART_Init+0x94>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <MX_USART1_UART_Init+0x94>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	@ (8000b80 <MX_USART1_UART_Init+0x94>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <MX_USART1_UART_Init+0x94>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <MX_USART1_UART_Init+0x94>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b22:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <MX_USART1_UART_Init+0x94>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b28:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <MX_USART1_UART_Init+0x94>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <MX_USART1_UART_Init+0x94>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b34:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <MX_USART1_UART_Init+0x94>)
 8000b36:	0018      	movs	r0, r3
 8000b38:	f002 fd52 	bl	80035e0 <HAL_UART_Init>
 8000b3c:	1e03      	subs	r3, r0, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b40:	f000 f8a4 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b44:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <MX_USART1_UART_Init+0x94>)
 8000b46:	2100      	movs	r1, #0
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f004 fd9f 	bl	800568c <HAL_UARTEx_SetTxFifoThreshold>
 8000b4e:	1e03      	subs	r3, r0, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b52:	f000 f89b 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b56:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <MX_USART1_UART_Init+0x94>)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f004 fdd6 	bl	800570c <HAL_UARTEx_SetRxFifoThreshold>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d001      	beq.n	8000b68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b64:	f000 f892 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b68:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <MX_USART1_UART_Init+0x94>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f004 fd54 	bl	8005618 <HAL_UARTEx_DisableFifoMode>
 8000b70:	1e03      	subs	r3, r0, #0
 8000b72:	d001      	beq.n	8000b78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b74:	f000 f88a 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b78:	46c0      	nop			@ (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	200000c0 	.word	0x200000c0
 8000b84:	40013800 	.word	0x40013800

08000b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b089      	sub	sp, #36	@ 0x24
 8000b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8e:	240c      	movs	r4, #12
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	0018      	movs	r0, r3
 8000b94:	2314      	movs	r3, #20
 8000b96:	001a      	movs	r2, r3
 8000b98:	2100      	movs	r1, #0
 8000b9a:	f004 fe57 	bl	800584c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c58 <MX_GPIO_Init+0xd0>)
 8000ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c58 <MX_GPIO_Init+0xd0>)
 8000ba4:	2104      	movs	r1, #4
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000baa:	4b2b      	ldr	r3, [pc, #172]	@ (8000c58 <MX_GPIO_Init+0xd0>)
 8000bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b28      	ldr	r3, [pc, #160]	@ (8000c58 <MX_GPIO_Init+0xd0>)
 8000bb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bba:	4b27      	ldr	r3, [pc, #156]	@ (8000c58 <MX_GPIO_Init+0xd0>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bc2:	4b25      	ldr	r3, [pc, #148]	@ (8000c58 <MX_GPIO_Init+0xd0>)
 8000bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4013      	ands	r3, r2
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	4b22      	ldr	r3, [pc, #136]	@ (8000c58 <MX_GPIO_Init+0xd0>)
 8000bd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bd2:	4b21      	ldr	r3, [pc, #132]	@ (8000c58 <MX_GPIO_Init+0xd0>)
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bda:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <MX_GPIO_Init+0xd0>)
 8000bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bde:	2202      	movs	r2, #2
 8000be0:	4013      	ands	r3, r2
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, dir2_Pin|EN2_Pin|dir1_Pin, GPIO_PIN_RESET);
 8000be6:	238c      	movs	r3, #140	@ 0x8c
 8000be8:	0099      	lsls	r1, r3, #2
 8000bea:	23a0      	movs	r3, #160	@ 0xa0
 8000bec:	05db      	lsls	r3, r3, #23
 8000bee:	2200      	movs	r2, #0
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f000 fd7b 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <MX_GPIO_Init+0xd4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2140      	movs	r1, #64	@ 0x40
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f000 fd75 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : dir2_Pin EN2_Pin dir1_Pin */
  GPIO_InitStruct.Pin = dir2_Pin|EN2_Pin|dir1_Pin;
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	228c      	movs	r2, #140	@ 0x8c
 8000c06:	0092      	lsls	r2, r2, #2
 8000c08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	193a      	adds	r2, r7, r4
 8000c1e:	23a0      	movs	r3, #160	@ 0xa0
 8000c20:	05db      	lsls	r3, r3, #23
 8000c22:	0011      	movs	r1, r2
 8000c24:	0018      	movs	r0, r3
 8000c26:	f000 fbfd 	bl	8001424 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN1_Pin */
  GPIO_InitStruct.Pin = EN1_Pin;
 8000c2a:	0021      	movs	r1, r4
 8000c2c:	187b      	adds	r3, r7, r1
 8000c2e:	2240      	movs	r2, #64	@ 0x40
 8000c30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	2201      	movs	r2, #1
 8000c36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN1_GPIO_Port, &GPIO_InitStruct);
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <MX_GPIO_Init+0xd4>)
 8000c48:	0019      	movs	r1, r3
 8000c4a:	0010      	movs	r0, r2
 8000c4c:	f000 fbea 	bl	8001424 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b009      	add	sp, #36	@ 0x24
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	50000800 	.word	0x50000800

08000c60 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	if (huart==&huart1)
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_UART_RxCpltCallback+0x24>)
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d105      	bne.n	8000c7c <HAL_UART_RxCpltCallback+0x1c>
	{
		HAL_UART_Receive_IT(&huart1, rx_data, 1);  // Relancer la réception
 8000c70:	4905      	ldr	r1, [pc, #20]	@ (8000c88 <HAL_UART_RxCpltCallback+0x28>)
 8000c72:	4b04      	ldr	r3, [pc, #16]	@ (8000c84 <HAL_UART_RxCpltCallback+0x24>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	0018      	movs	r0, r3
 8000c78:	f002 fdac 	bl	80037d4 <HAL_UART_Receive_IT>
	}
}
 8000c7c:	46c0      	nop			@ (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b002      	add	sp, #8
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	200000c0 	.word	0x200000c0
 8000c88:	20000154 	.word	0x20000154

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c94:	46c0      	nop			@ (mov r8, r8)
 8000c96:	e7fd      	b.n	8000c94 <Error_Handler+0x8>

08000c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <HAL_MspInit+0x44>)
 8000ca0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cdc <HAL_MspInit+0x44>)
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cba:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cbc:	2180      	movs	r1, #128	@ 0x80
 8000cbe:	0549      	lsls	r1, r1, #21
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cc8:	2380      	movs	r3, #128	@ 0x80
 8000cca:	055b      	lsls	r3, r3, #21
 8000ccc:	4013      	ands	r3, r2
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b093      	sub	sp, #76	@ 0x4c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce8:	2414      	movs	r4, #20
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	0018      	movs	r0, r3
 8000cee:	2334      	movs	r3, #52	@ 0x34
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f004 fdaa 	bl	800584c <memset>
  if(htim_base->Instance==TIM1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8000d68 <HAL_TIM_Base_MspInit+0x88>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d11d      	bne.n	8000d3e <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	2280      	movs	r2, #128	@ 0x80
 8000d06:	0392      	lsls	r2, r2, #14
 8000d08:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000d0a:	193b      	adds	r3, r7, r4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d10:	193b      	adds	r3, r7, r4
 8000d12:	0018      	movs	r0, r3
 8000d14:	f001 fa18 	bl	8002148 <HAL_RCCEx_PeriphCLKConfig>
 8000d18:	1e03      	subs	r3, r0, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000d1c:	f7ff ffb6 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <HAL_TIM_Base_MspInit+0x8c>)
 8000d22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <HAL_TIM_Base_MspInit+0x8c>)
 8000d26:	2180      	movs	r1, #128	@ 0x80
 8000d28:	0109      	lsls	r1, r1, #4
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <HAL_TIM_Base_MspInit+0x8c>)
 8000d30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d32:	2380      	movs	r3, #128	@ 0x80
 8000d34:	011b      	lsls	r3, r3, #4
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d3c:	e010      	b.n	8000d60 <HAL_TIM_Base_MspInit+0x80>
  else if(htim_base->Instance==TIM3)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a0b      	ldr	r2, [pc, #44]	@ (8000d70 <HAL_TIM_Base_MspInit+0x90>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d10b      	bne.n	8000d60 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <HAL_TIM_Base_MspInit+0x8c>)
 8000d4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d4c:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <HAL_TIM_Base_MspInit+0x8c>)
 8000d4e:	2102      	movs	r1, #2
 8000d50:	430a      	orrs	r2, r1
 8000d52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <HAL_TIM_Base_MspInit+0x8c>)
 8000d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d58:	2202      	movs	r2, #2
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b013      	add	sp, #76	@ 0x4c
 8000d66:	bd90      	pop	{r4, r7, pc}
 8000d68:	40012c00 	.word	0x40012c00
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40000400 	.word	0x40000400

08000d74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b08b      	sub	sp, #44	@ 0x2c
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	2414      	movs	r4, #20
 8000d7e:	193b      	adds	r3, r7, r4
 8000d80:	0018      	movs	r0, r3
 8000d82:	2314      	movs	r3, #20
 8000d84:	001a      	movs	r2, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	f004 fd60 	bl	800584c <memset>
  if(htim->Instance==TIM1)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a29      	ldr	r2, [pc, #164]	@ (8000e38 <HAL_TIM_MspPostInit+0xc4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d124      	bne.n	8000de0 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b29      	ldr	r3, [pc, #164]	@ (8000e3c <HAL_TIM_MspPostInit+0xc8>)
 8000d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d9a:	4b28      	ldr	r3, [pc, #160]	@ (8000e3c <HAL_TIM_MspPostInit+0xc8>)
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000da2:	4b26      	ldr	r3, [pc, #152]	@ (8000e3c <HAL_TIM_MspPostInit+0xc8>)
 8000da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000da6:	2201      	movs	r2, #1
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = step1_Pin;
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	2280      	movs	r2, #128	@ 0x80
 8000db2:	00d2      	lsls	r2, r2, #3
 8000db4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	0021      	movs	r1, r4
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2202      	movs	r2, #2
 8000dbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	2202      	movs	r2, #2
 8000dce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(step1_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	187a      	adds	r2, r7, r1
 8000dd2:	23a0      	movs	r3, #160	@ 0xa0
 8000dd4:	05db      	lsls	r3, r3, #23
 8000dd6:	0011      	movs	r1, r2
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f000 fb23 	bl	8001424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000dde:	e027      	b.n	8000e30 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a16      	ldr	r2, [pc, #88]	@ (8000e40 <HAL_TIM_MspPostInit+0xcc>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d122      	bne.n	8000e30 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <HAL_TIM_MspPostInit+0xc8>)
 8000dec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dee:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <HAL_TIM_MspPostInit+0xc8>)
 8000df0:	2101      	movs	r1, #1
 8000df2:	430a      	orrs	r2, r1
 8000df4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <HAL_TIM_MspPostInit+0xc8>)
 8000df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = step2_Pin;
 8000e02:	2114      	movs	r1, #20
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2240      	movs	r2, #64	@ 0x40
 8000e08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2201      	movs	r2, #1
 8000e20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(step2_GPIO_Port, &GPIO_InitStruct);
 8000e22:	187a      	adds	r2, r7, r1
 8000e24:	23a0      	movs	r3, #160	@ 0xa0
 8000e26:	05db      	lsls	r3, r3, #23
 8000e28:	0011      	movs	r1, r2
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 fafa 	bl	8001424 <HAL_GPIO_Init>
}
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	b00b      	add	sp, #44	@ 0x2c
 8000e36:	bd90      	pop	{r4, r7, pc}
 8000e38:	40012c00 	.word	0x40012c00
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40000400 	.word	0x40000400

08000e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b097      	sub	sp, #92	@ 0x5c
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	2344      	movs	r3, #68	@ 0x44
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	0018      	movs	r0, r3
 8000e52:	2314      	movs	r3, #20
 8000e54:	001a      	movs	r2, r3
 8000e56:	2100      	movs	r1, #0
 8000e58:	f004 fcf8 	bl	800584c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e5c:	2410      	movs	r4, #16
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	0018      	movs	r0, r3
 8000e62:	2334      	movs	r3, #52	@ 0x34
 8000e64:	001a      	movs	r2, r3
 8000e66:	2100      	movs	r1, #0
 8000e68:	f004 fcf0 	bl	800584c <memset>
  if(huart->Instance==USART1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a26      	ldr	r2, [pc, #152]	@ (8000f0c <HAL_UART_MspInit+0xc8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d145      	bne.n	8000f02 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	2201      	movs	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e82:	193b      	adds	r3, r7, r4
 8000e84:	0018      	movs	r0, r3
 8000e86:	f001 f95f 	bl	8002148 <HAL_RCCEx_PeriphCLKConfig>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e8e:	f7ff fefd 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e92:	4b1f      	ldr	r3, [pc, #124]	@ (8000f10 <HAL_UART_MspInit+0xcc>)
 8000e94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e96:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <HAL_UART_MspInit+0xcc>)
 8000e98:	2180      	movs	r1, #128	@ 0x80
 8000e9a:	01c9      	lsls	r1, r1, #7
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <HAL_UART_MspInit+0xcc>)
 8000ea2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ea4:	2380      	movs	r3, #128	@ 0x80
 8000ea6:	01db      	lsls	r3, r3, #7
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <HAL_UART_MspInit+0xcc>)
 8000eb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000eb2:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <HAL_UART_MspInit+0xcc>)
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <HAL_UART_MspInit+0xcc>)
 8000ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ec6:	2144      	movs	r1, #68	@ 0x44
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	22c0      	movs	r2, #192	@ 0xc0
 8000ecc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f14 <HAL_UART_MspInit+0xd0>)
 8000eea:	0019      	movs	r1, r3
 8000eec:	0010      	movs	r0, r2
 8000eee:	f000 fa99 	bl	8001424 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	201b      	movs	r0, #27
 8000ef8:	f000 f996 	bl	8001228 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000efc:	201b      	movs	r0, #27
 8000efe:	f000 f9a8 	bl	8001252 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000f02:	46c0      	nop			@ (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b017      	add	sp, #92	@ 0x5c
 8000f08:	bd90      	pop	{r4, r7, pc}
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	40013800 	.word	0x40013800
 8000f10:	40021000 	.word	0x40021000
 8000f14:	50000400 	.word	0x50000400

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f1c:	46c0      	nop			@ (mov r8, r8)
 8000f1e:	e7fd      	b.n	8000f1c <NMI_Handler+0x4>

08000f20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f24:	46c0      	nop			@ (mov r8, r8)
 8000f26:	e7fd      	b.n	8000f24 <HardFault_Handler+0x4>

08000f28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f2c:	46c0      	nop			@ (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f36:	46c0      	nop			@ (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f40:	f000 f8aa 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f44:	46c0      	nop			@ (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f50:	4b03      	ldr	r3, [pc, #12]	@ (8000f60 <USART1_IRQHandler+0x14>)
 8000f52:	0018      	movs	r0, r3
 8000f54:	f002 fc9c 	bl	8003890 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f58:	46c0      	nop			@ (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	200000c0 	.word	0x200000c0

08000f64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	46c0      	nop			@ (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f70:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f72:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f74:	f7ff fff6 	bl	8000f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	@ (8000fac <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	@ (8000fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <LoopForever+0xe>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	@ (8000fbc <LoopForever+0x16>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f9e:	f004 fc5d 	bl	800585c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fa2:	f7ff fb3b 	bl	800061c <main>

08000fa6 <LoopForever>:

LoopForever:
  b LoopForever
 8000fa6:	e7fe      	b.n	8000fa6 <LoopForever>
  ldr   r0, =_estack
 8000fa8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fb4:	080059a8 	.word	0x080059a8
  ldr r2, =_sbss
 8000fb8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fbc:	2000015c 	.word	0x2000015c

08000fc0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC1_COMP_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001000 <HAL_Init+0x3c>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <HAL_Init+0x3c>)
 8000fd6:	2180      	movs	r1, #128	@ 0x80
 8000fd8:	0049      	lsls	r1, r1, #1
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fde:	2003      	movs	r0, #3
 8000fe0:	f000 f810 	bl	8001004 <HAL_InitTick>
 8000fe4:	1e03      	subs	r3, r0, #0
 8000fe6:	d003      	beq.n	8000ff0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000fe8:	1dfb      	adds	r3, r7, #7
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	e001      	b.n	8000ff4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ff0:	f7ff fe52 	bl	8000c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	781b      	ldrb	r3, [r3, #0]
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b002      	add	sp, #8
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40022000 	.word	0x40022000

08001004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800100c:	230f      	movs	r3, #15
 800100e:	18fb      	adds	r3, r7, r3
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001014:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <HAL_InitTick+0x88>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d02b      	beq.n	8001074 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800101c:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <HAL_InitTick+0x8c>)
 800101e:	681c      	ldr	r4, [r3, #0]
 8001020:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <HAL_InitTick+0x88>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	0019      	movs	r1, r3
 8001026:	23fa      	movs	r3, #250	@ 0xfa
 8001028:	0098      	lsls	r0, r3, #2
 800102a:	f7ff f86b 	bl	8000104 <__udivsi3>
 800102e:	0003      	movs	r3, r0
 8001030:	0019      	movs	r1, r3
 8001032:	0020      	movs	r0, r4
 8001034:	f7ff f866 	bl	8000104 <__udivsi3>
 8001038:	0003      	movs	r3, r0
 800103a:	0018      	movs	r0, r3
 800103c:	f000 f919 	bl	8001272 <HAL_SYSTICK_Config>
 8001040:	1e03      	subs	r3, r0, #0
 8001042:	d112      	bne.n	800106a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b03      	cmp	r3, #3
 8001048:	d80a      	bhi.n	8001060 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	2301      	movs	r3, #1
 800104e:	425b      	negs	r3, r3
 8001050:	2200      	movs	r2, #0
 8001052:	0018      	movs	r0, r3
 8001054:	f000 f8e8 	bl	8001228 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001058:	4b0e      	ldr	r3, [pc, #56]	@ (8001094 <HAL_InitTick+0x90>)
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e00d      	b.n	800107c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001060:	230f      	movs	r3, #15
 8001062:	18fb      	adds	r3, r7, r3
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	e008      	b.n	800107c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800106a:	230f      	movs	r3, #15
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	e003      	b.n	800107c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001074:	230f      	movs	r3, #15
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800107c:	230f      	movs	r3, #15
 800107e:	18fb      	adds	r3, r7, r3
 8001080:	781b      	ldrb	r3, [r3, #0]
}
 8001082:	0018      	movs	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	b005      	add	sp, #20
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	20000008 	.word	0x20000008
 8001090:	20000000 	.word	0x20000000
 8001094:	20000004 	.word	0x20000004

08001098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <HAL_IncTick+0x1c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	001a      	movs	r2, r3
 80010a2:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <HAL_IncTick+0x20>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	18d2      	adds	r2, r2, r3
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <HAL_IncTick+0x20>)
 80010aa:	601a      	str	r2, [r3, #0]
}
 80010ac:	46c0      	nop			@ (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	20000008 	.word	0x20000008
 80010b8:	20000158 	.word	0x20000158

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b02      	ldr	r3, [pc, #8]	@ (80010cc <HAL_GetTick+0x10>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	0018      	movs	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			@ (mov r8, r8)
 80010cc:	20000158 	.word	0x20000158

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	0002      	movs	r2, r0
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80010e2:	d809      	bhi.n	80010f8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	001a      	movs	r2, r3
 80010ea:	231f      	movs	r3, #31
 80010ec:	401a      	ands	r2, r3
 80010ee:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <__NVIC_EnableIRQ+0x30>)
 80010f0:	2101      	movs	r1, #1
 80010f2:	4091      	lsls	r1, r2
 80010f4:	000a      	movs	r2, r1
 80010f6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80010f8:	46c0      	nop			@ (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	e000e100 	.word	0xe000e100

08001104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	0002      	movs	r2, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b7f      	cmp	r3, #127	@ 0x7f
 8001118:	d828      	bhi.n	800116c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800111a:	4a2f      	ldr	r2, [pc, #188]	@ (80011d8 <__NVIC_SetPriority+0xd4>)
 800111c:	1dfb      	adds	r3, r7, #7
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b25b      	sxtb	r3, r3
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	33c0      	adds	r3, #192	@ 0xc0
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	589b      	ldr	r3, [r3, r2]
 800112a:	1dfa      	adds	r2, r7, #7
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	0011      	movs	r1, r2
 8001130:	2203      	movs	r2, #3
 8001132:	400a      	ands	r2, r1
 8001134:	00d2      	lsls	r2, r2, #3
 8001136:	21ff      	movs	r1, #255	@ 0xff
 8001138:	4091      	lsls	r1, r2
 800113a:	000a      	movs	r2, r1
 800113c:	43d2      	mvns	r2, r2
 800113e:	401a      	ands	r2, r3
 8001140:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	019b      	lsls	r3, r3, #6
 8001146:	22ff      	movs	r2, #255	@ 0xff
 8001148:	401a      	ands	r2, r3
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	0018      	movs	r0, r3
 8001150:	2303      	movs	r3, #3
 8001152:	4003      	ands	r3, r0
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001158:	481f      	ldr	r0, [pc, #124]	@ (80011d8 <__NVIC_SetPriority+0xd4>)
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	b25b      	sxtb	r3, r3
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	430a      	orrs	r2, r1
 8001164:	33c0      	adds	r3, #192	@ 0xc0
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800116a:	e031      	b.n	80011d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800116c:	4a1b      	ldr	r2, [pc, #108]	@ (80011dc <__NVIC_SetPriority+0xd8>)
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	0019      	movs	r1, r3
 8001174:	230f      	movs	r3, #15
 8001176:	400b      	ands	r3, r1
 8001178:	3b08      	subs	r3, #8
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3306      	adds	r3, #6
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	18d3      	adds	r3, r2, r3
 8001182:	3304      	adds	r3, #4
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	1dfa      	adds	r2, r7, #7
 8001188:	7812      	ldrb	r2, [r2, #0]
 800118a:	0011      	movs	r1, r2
 800118c:	2203      	movs	r2, #3
 800118e:	400a      	ands	r2, r1
 8001190:	00d2      	lsls	r2, r2, #3
 8001192:	21ff      	movs	r1, #255	@ 0xff
 8001194:	4091      	lsls	r1, r2
 8001196:	000a      	movs	r2, r1
 8001198:	43d2      	mvns	r2, r2
 800119a:	401a      	ands	r2, r3
 800119c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	019b      	lsls	r3, r3, #6
 80011a2:	22ff      	movs	r2, #255	@ 0xff
 80011a4:	401a      	ands	r2, r3
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	0018      	movs	r0, r3
 80011ac:	2303      	movs	r3, #3
 80011ae:	4003      	ands	r3, r0
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011b4:	4809      	ldr	r0, [pc, #36]	@ (80011dc <__NVIC_SetPriority+0xd8>)
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	001c      	movs	r4, r3
 80011bc:	230f      	movs	r3, #15
 80011be:	4023      	ands	r3, r4
 80011c0:	3b08      	subs	r3, #8
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	430a      	orrs	r2, r1
 80011c6:	3306      	adds	r3, #6
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	18c3      	adds	r3, r0, r3
 80011cc:	3304      	adds	r3, #4
 80011ce:	601a      	str	r2, [r3, #0]
}
 80011d0:	46c0      	nop			@ (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b003      	add	sp, #12
 80011d6:	bd90      	pop	{r4, r7, pc}
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	1e5a      	subs	r2, r3, #1
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	045b      	lsls	r3, r3, #17
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d301      	bcc.n	80011f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f4:	2301      	movs	r3, #1
 80011f6:	e010      	b.n	800121a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <SysTick_Config+0x44>)
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	3a01      	subs	r2, #1
 80011fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001200:	2301      	movs	r3, #1
 8001202:	425b      	negs	r3, r3
 8001204:	2103      	movs	r1, #3
 8001206:	0018      	movs	r0, r3
 8001208:	f7ff ff7c 	bl	8001104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <SysTick_Config+0x44>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001212:	4b04      	ldr	r3, [pc, #16]	@ (8001224 <SysTick_Config+0x44>)
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001218:	2300      	movs	r3, #0
}
 800121a:	0018      	movs	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	b002      	add	sp, #8
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	e000e010 	.word	0xe000e010

08001228 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	210f      	movs	r1, #15
 8001234:	187b      	adds	r3, r7, r1
 8001236:	1c02      	adds	r2, r0, #0
 8001238:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	187b      	adds	r3, r7, r1
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b25b      	sxtb	r3, r3
 8001242:	0011      	movs	r1, r2
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff ff5d 	bl	8001104 <__NVIC_SetPriority>
}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	b004      	add	sp, #16
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	0002      	movs	r2, r0
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b25b      	sxtb	r3, r3
 8001264:	0018      	movs	r0, r3
 8001266:	f7ff ff33 	bl	80010d0 <__NVIC_EnableIRQ>
}
 800126a:	46c0      	nop			@ (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff ffaf 	bl	80011e0 <SysTick_Config>
 8001282:	0003      	movs	r3, r0
}
 8001284:	0018      	movs	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	b002      	add	sp, #8
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e050      	b.n	8001340 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2225      	movs	r2, #37	@ 0x25
 80012a2:	5c9b      	ldrb	r3, [r3, r2]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d008      	beq.n	80012bc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2204      	movs	r2, #4
 80012ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2224      	movs	r2, #36	@ 0x24
 80012b4:	2100      	movs	r1, #0
 80012b6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e041      	b.n	8001340 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	210e      	movs	r1, #14
 80012c8:	438a      	bics	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d6:	491c      	ldr	r1, [pc, #112]	@ (8001348 <HAL_DMA_Abort+0xbc>)
 80012d8:	400a      	ands	r2, r1
 80012da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2101      	movs	r1, #1
 80012e8:	438a      	bics	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80012ec:	4b17      	ldr	r3, [pc, #92]	@ (800134c <HAL_DMA_Abort+0xc0>)
 80012ee:	6859      	ldr	r1, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	221c      	movs	r2, #28
 80012f6:	4013      	ands	r3, r2
 80012f8:	2201      	movs	r2, #1
 80012fa:	409a      	lsls	r2, r3
 80012fc:	4b13      	ldr	r3, [pc, #76]	@ (800134c <HAL_DMA_Abort+0xc0>)
 80012fe:	430a      	orrs	r2, r1
 8001300:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800130a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00c      	beq.n	800132e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800131e:	490a      	ldr	r1, [pc, #40]	@ (8001348 <HAL_DMA_Abort+0xbc>)
 8001320:	400a      	ands	r2, r1
 8001322:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800132c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2225      	movs	r2, #37	@ 0x25
 8001332:	2101      	movs	r1, #1
 8001334:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2224      	movs	r2, #36	@ 0x24
 800133a:	2100      	movs	r1, #0
 800133c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	0018      	movs	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	b002      	add	sp, #8
 8001346:	bd80      	pop	{r7, pc}
 8001348:	fffffeff 	.word	0xfffffeff
 800134c:	40020000 	.word	0x40020000

08001350 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001358:	210f      	movs	r1, #15
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2225      	movs	r2, #37	@ 0x25
 8001364:	5c9b      	ldrb	r3, [r3, r2]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d006      	beq.n	800137a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2204      	movs	r2, #4
 8001370:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001372:	187b      	adds	r3, r7, r1
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	e049      	b.n	800140e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	210e      	movs	r1, #14
 8001386:	438a      	bics	r2, r1
 8001388:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2101      	movs	r1, #1
 8001396:	438a      	bics	r2, r1
 8001398:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a4:	491d      	ldr	r1, [pc, #116]	@ (800141c <HAL_DMA_Abort_IT+0xcc>)
 80013a6:	400a      	ands	r2, r1
 80013a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80013aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <HAL_DMA_Abort_IT+0xd0>)
 80013ac:	6859      	ldr	r1, [r3, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	221c      	movs	r2, #28
 80013b4:	4013      	ands	r3, r2
 80013b6:	2201      	movs	r2, #1
 80013b8:	409a      	lsls	r2, r3
 80013ba:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <HAL_DMA_Abort_IT+0xd0>)
 80013bc:	430a      	orrs	r2, r1
 80013be:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80013c8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d00c      	beq.n	80013ec <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013dc:	490f      	ldr	r1, [pc, #60]	@ (800141c <HAL_DMA_Abort_IT+0xcc>)
 80013de:	400a      	ands	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80013ea:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2225      	movs	r2, #37	@ 0x25
 80013f0:	2101      	movs	r1, #1
 80013f2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2224      	movs	r2, #36	@ 0x24
 80013f8:	2100      	movs	r1, #0
 80013fa:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001400:	2b00      	cmp	r3, #0
 8001402:	d004      	beq.n	800140e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	0010      	movs	r0, r2
 800140c:	4798      	blx	r3
    }
  }
  return status;
 800140e:	230f      	movs	r3, #15
 8001410:	18fb      	adds	r3, r7, r3
 8001412:	781b      	ldrb	r3, [r3, #0]
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b004      	add	sp, #16
 800141a:	bd80      	pop	{r7, pc}
 800141c:	fffffeff 	.word	0xfffffeff
 8001420:	40020000 	.word	0x40020000

08001424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001432:	e147      	b.n	80016c4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2101      	movs	r1, #1
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	4091      	lsls	r1, r2
 800143e:	000a      	movs	r2, r1
 8001440:	4013      	ands	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d100      	bne.n	800144c <HAL_GPIO_Init+0x28>
 800144a:	e138      	b.n	80016be <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2203      	movs	r2, #3
 8001452:	4013      	ands	r3, r2
 8001454:	2b01      	cmp	r3, #1
 8001456:	d005      	beq.n	8001464 <HAL_GPIO_Init+0x40>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2203      	movs	r2, #3
 800145e:	4013      	ands	r3, r2
 8001460:	2b02      	cmp	r3, #2
 8001462:	d130      	bne.n	80014c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	2203      	movs	r2, #3
 8001470:	409a      	lsls	r2, r3
 8001472:	0013      	movs	r3, r2
 8001474:	43da      	mvns	r2, r3
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	409a      	lsls	r2, r3
 8001486:	0013      	movs	r3, r2
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800149a:	2201      	movs	r2, #1
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
 80014a0:	0013      	movs	r3, r2
 80014a2:	43da      	mvns	r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	091b      	lsrs	r3, r3, #4
 80014b0:	2201      	movs	r2, #1
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
 80014b8:	0013      	movs	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2203      	movs	r2, #3
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d017      	beq.n	8001502 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	2203      	movs	r2, #3
 80014de:	409a      	lsls	r2, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	43da      	mvns	r2, r3
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2203      	movs	r2, #3
 8001508:	4013      	ands	r3, r2
 800150a:	2b02      	cmp	r3, #2
 800150c:	d123      	bne.n	8001556 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	08da      	lsrs	r2, r3, #3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3208      	adds	r2, #8
 8001516:	0092      	lsls	r2, r2, #2
 8001518:	58d3      	ldr	r3, [r2, r3]
 800151a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2207      	movs	r2, #7
 8001520:	4013      	ands	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	220f      	movs	r2, #15
 8001526:	409a      	lsls	r2, r3
 8001528:	0013      	movs	r3, r2
 800152a:	43da      	mvns	r2, r3
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	691a      	ldr	r2, [r3, #16]
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2107      	movs	r1, #7
 800153a:	400b      	ands	r3, r1
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	409a      	lsls	r2, r3
 8001540:	0013      	movs	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4313      	orrs	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	08da      	lsrs	r2, r3, #3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3208      	adds	r2, #8
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	6939      	ldr	r1, [r7, #16]
 8001554:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	2203      	movs	r2, #3
 8001562:	409a      	lsls	r2, r3
 8001564:	0013      	movs	r3, r2
 8001566:	43da      	mvns	r2, r3
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2203      	movs	r2, #3
 8001574:	401a      	ands	r2, r3
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	409a      	lsls	r2, r3
 800157c:	0013      	movs	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	23c0      	movs	r3, #192	@ 0xc0
 8001590:	029b      	lsls	r3, r3, #10
 8001592:	4013      	ands	r3, r2
 8001594:	d100      	bne.n	8001598 <HAL_GPIO_Init+0x174>
 8001596:	e092      	b.n	80016be <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001598:	4a50      	ldr	r2, [pc, #320]	@ (80016dc <HAL_GPIO_Init+0x2b8>)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	089b      	lsrs	r3, r3, #2
 800159e:	3318      	adds	r3, #24
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	589b      	ldr	r3, [r3, r2]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2203      	movs	r2, #3
 80015aa:	4013      	ands	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	220f      	movs	r2, #15
 80015b0:	409a      	lsls	r2, r3
 80015b2:	0013      	movs	r3, r2
 80015b4:	43da      	mvns	r2, r3
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	23a0      	movs	r3, #160	@ 0xa0
 80015c0:	05db      	lsls	r3, r3, #23
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d013      	beq.n	80015ee <HAL_GPIO_Init+0x1ca>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a45      	ldr	r2, [pc, #276]	@ (80016e0 <HAL_GPIO_Init+0x2bc>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d00d      	beq.n	80015ea <HAL_GPIO_Init+0x1c6>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a44      	ldr	r2, [pc, #272]	@ (80016e4 <HAL_GPIO_Init+0x2c0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d007      	beq.n	80015e6 <HAL_GPIO_Init+0x1c2>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a43      	ldr	r2, [pc, #268]	@ (80016e8 <HAL_GPIO_Init+0x2c4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d101      	bne.n	80015e2 <HAL_GPIO_Init+0x1be>
 80015de:	2303      	movs	r3, #3
 80015e0:	e006      	b.n	80015f0 <HAL_GPIO_Init+0x1cc>
 80015e2:	2305      	movs	r3, #5
 80015e4:	e004      	b.n	80015f0 <HAL_GPIO_Init+0x1cc>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e002      	b.n	80015f0 <HAL_GPIO_Init+0x1cc>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <HAL_GPIO_Init+0x1cc>
 80015ee:	2300      	movs	r3, #0
 80015f0:	697a      	ldr	r2, [r7, #20]
 80015f2:	2103      	movs	r1, #3
 80015f4:	400a      	ands	r2, r1
 80015f6:	00d2      	lsls	r2, r2, #3
 80015f8:	4093      	lsls	r3, r2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001600:	4936      	ldr	r1, [pc, #216]	@ (80016dc <HAL_GPIO_Init+0x2b8>)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	3318      	adds	r3, #24
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800160e:	4b33      	ldr	r3, [pc, #204]	@ (80016dc <HAL_GPIO_Init+0x2b8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	43da      	mvns	r2, r3
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	2380      	movs	r3, #128	@ 0x80
 8001624:	035b      	lsls	r3, r3, #13
 8001626:	4013      	ands	r3, r2
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001632:	4b2a      	ldr	r3, [pc, #168]	@ (80016dc <HAL_GPIO_Init+0x2b8>)
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001638:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <HAL_GPIO_Init+0x2b8>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	43da      	mvns	r2, r3
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	2380      	movs	r3, #128	@ 0x80
 800164e:	039b      	lsls	r3, r3, #14
 8001650:	4013      	ands	r3, r2
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800165c:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <HAL_GPIO_Init+0x2b8>)
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001662:	4a1e      	ldr	r2, [pc, #120]	@ (80016dc <HAL_GPIO_Init+0x2b8>)
 8001664:	2384      	movs	r3, #132	@ 0x84
 8001666:	58d3      	ldr	r3, [r2, r3]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	43da      	mvns	r2, r3
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	2380      	movs	r3, #128	@ 0x80
 800167a:	029b      	lsls	r3, r3, #10
 800167c:	4013      	ands	r3, r2
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001688:	4914      	ldr	r1, [pc, #80]	@ (80016dc <HAL_GPIO_Init+0x2b8>)
 800168a:	2284      	movs	r2, #132	@ 0x84
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001690:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <HAL_GPIO_Init+0x2b8>)
 8001692:	2380      	movs	r3, #128	@ 0x80
 8001694:	58d3      	ldr	r3, [r2, r3]
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	43da      	mvns	r2, r3
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4013      	ands	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	025b      	lsls	r3, r3, #9
 80016aa:	4013      	ands	r3, r2
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016b6:	4909      	ldr	r1, [pc, #36]	@ (80016dc <HAL_GPIO_Init+0x2b8>)
 80016b8:	2280      	movs	r2, #128	@ 0x80
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3301      	adds	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	40da      	lsrs	r2, r3
 80016cc:	1e13      	subs	r3, r2, #0
 80016ce:	d000      	beq.n	80016d2 <HAL_GPIO_Init+0x2ae>
 80016d0:	e6b0      	b.n	8001434 <HAL_GPIO_Init+0x10>
  }
}
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	46c0      	nop			@ (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b006      	add	sp, #24
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021800 	.word	0x40021800
 80016e0:	50000400 	.word	0x50000400
 80016e4:	50000800 	.word	0x50000800
 80016e8:	50000c00 	.word	0x50000c00

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	0008      	movs	r0, r1
 80016f6:	0011      	movs	r1, r2
 80016f8:	1cbb      	adds	r3, r7, #2
 80016fa:	1c02      	adds	r2, r0, #0
 80016fc:	801a      	strh	r2, [r3, #0]
 80016fe:	1c7b      	adds	r3, r7, #1
 8001700:	1c0a      	adds	r2, r1, #0
 8001702:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001704:	1c7b      	adds	r3, r7, #1
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800170c:	1cbb      	adds	r3, r7, #2
 800170e:	881a      	ldrh	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001714:	e003      	b.n	800171e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001716:	1cbb      	adds	r3, r7, #2
 8001718:	881a      	ldrh	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	46bd      	mov	sp, r7
 8001722:	b002      	add	sp, #8
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001730:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a19      	ldr	r2, [pc, #100]	@ (800179c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001736:	4013      	ands	r3, r2
 8001738:	0019      	movs	r1, r3
 800173a:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	430a      	orrs	r2, r1
 8001740:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	2380      	movs	r3, #128	@ 0x80
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	429a      	cmp	r2, r3
 800174a:	d11f      	bne.n	800178c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800174c:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	0013      	movs	r3, r2
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	189b      	adds	r3, r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4912      	ldr	r1, [pc, #72]	@ (80017a4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800175a:	0018      	movs	r0, r3
 800175c:	f7fe fcd2 	bl	8000104 <__udivsi3>
 8001760:	0003      	movs	r3, r0
 8001762:	3301      	adds	r3, #1
 8001764:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001766:	e008      	b.n	800177a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	3b01      	subs	r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	e001      	b.n	800177a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e009      	b.n	800178e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800177a:	4b07      	ldr	r3, [pc, #28]	@ (8001798 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800177c:	695a      	ldr	r2, [r3, #20]
 800177e:	2380      	movs	r3, #128	@ 0x80
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	401a      	ands	r2, r3
 8001784:	2380      	movs	r3, #128	@ 0x80
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	429a      	cmp	r2, r3
 800178a:	d0ed      	beq.n	8001768 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	0018      	movs	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	b004      	add	sp, #16
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			@ (mov r8, r8)
 8001798:	40007000 	.word	0x40007000
 800179c:	fffff9ff 	.word	0xfffff9ff
 80017a0:	20000000 	.word	0x20000000
 80017a4:	000f4240 	.word	0x000f4240

080017a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80017ac:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <LL_RCC_GetAPB1Prescaler+0x14>)
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	23e0      	movs	r3, #224	@ 0xe0
 80017b2:	01db      	lsls	r3, r3, #7
 80017b4:	4013      	ands	r3, r2
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40021000 	.word	0x40021000

080017c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e2fe      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2201      	movs	r2, #1
 80017d8:	4013      	ands	r3, r2
 80017da:	d100      	bne.n	80017de <HAL_RCC_OscConfig+0x1e>
 80017dc:	e07c      	b.n	80018d8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017de:	4bc3      	ldr	r3, [pc, #780]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	2238      	movs	r2, #56	@ 0x38
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e8:	4bc0      	ldr	r3, [pc, #768]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2203      	movs	r2, #3
 80017ee:	4013      	ands	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b10      	cmp	r3, #16
 80017f6:	d102      	bne.n	80017fe <HAL_RCC_OscConfig+0x3e>
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d002      	beq.n	8001804 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	2b08      	cmp	r3, #8
 8001802:	d10b      	bne.n	800181c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	4bb9      	ldr	r3, [pc, #740]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	2380      	movs	r3, #128	@ 0x80
 800180a:	029b      	lsls	r3, r3, #10
 800180c:	4013      	ands	r3, r2
 800180e:	d062      	beq.n	80018d6 <HAL_RCC_OscConfig+0x116>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d15e      	bne.n	80018d6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e2d9      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	025b      	lsls	r3, r3, #9
 8001824:	429a      	cmp	r2, r3
 8001826:	d107      	bne.n	8001838 <HAL_RCC_OscConfig+0x78>
 8001828:	4bb0      	ldr	r3, [pc, #704]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4baf      	ldr	r3, [pc, #700]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 800182e:	2180      	movs	r1, #128	@ 0x80
 8001830:	0249      	lsls	r1, r1, #9
 8001832:	430a      	orrs	r2, r1
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e020      	b.n	800187a <HAL_RCC_OscConfig+0xba>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	23a0      	movs	r3, #160	@ 0xa0
 800183e:	02db      	lsls	r3, r3, #11
 8001840:	429a      	cmp	r2, r3
 8001842:	d10e      	bne.n	8001862 <HAL_RCC_OscConfig+0xa2>
 8001844:	4ba9      	ldr	r3, [pc, #676]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4ba8      	ldr	r3, [pc, #672]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 800184a:	2180      	movs	r1, #128	@ 0x80
 800184c:	02c9      	lsls	r1, r1, #11
 800184e:	430a      	orrs	r2, r1
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	4ba6      	ldr	r3, [pc, #664]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	4ba5      	ldr	r3, [pc, #660]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001858:	2180      	movs	r1, #128	@ 0x80
 800185a:	0249      	lsls	r1, r1, #9
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	e00b      	b.n	800187a <HAL_RCC_OscConfig+0xba>
 8001862:	4ba2      	ldr	r3, [pc, #648]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4ba1      	ldr	r3, [pc, #644]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001868:	49a1      	ldr	r1, [pc, #644]	@ (8001af0 <HAL_RCC_OscConfig+0x330>)
 800186a:	400a      	ands	r2, r1
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	4b9f      	ldr	r3, [pc, #636]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b9e      	ldr	r3, [pc, #632]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001874:	499f      	ldr	r1, [pc, #636]	@ (8001af4 <HAL_RCC_OscConfig+0x334>)
 8001876:	400a      	ands	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d014      	beq.n	80018ac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001882:	f7ff fc1b 	bl	80010bc <HAL_GetTick>
 8001886:	0003      	movs	r3, r0
 8001888:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fc16 	bl	80010bc <HAL_GetTick>
 8001890:	0002      	movs	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	@ 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e298      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800189e:	4b93      	ldr	r3, [pc, #588]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	2380      	movs	r3, #128	@ 0x80
 80018a4:	029b      	lsls	r3, r3, #10
 80018a6:	4013      	ands	r3, r2
 80018a8:	d0f0      	beq.n	800188c <HAL_RCC_OscConfig+0xcc>
 80018aa:	e015      	b.n	80018d8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff fc06 	bl	80010bc <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b6:	f7ff fc01 	bl	80010bc <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b64      	cmp	r3, #100	@ 0x64
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e283      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018c8:	4b88      	ldr	r3, [pc, #544]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	@ 0x80
 80018ce:	029b      	lsls	r3, r3, #10
 80018d0:	4013      	ands	r3, r2
 80018d2:	d1f0      	bne.n	80018b6 <HAL_RCC_OscConfig+0xf6>
 80018d4:	e000      	b.n	80018d8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2202      	movs	r2, #2
 80018de:	4013      	ands	r3, r2
 80018e0:	d100      	bne.n	80018e4 <HAL_RCC_OscConfig+0x124>
 80018e2:	e099      	b.n	8001a18 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e4:	4b81      	ldr	r3, [pc, #516]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2238      	movs	r2, #56	@ 0x38
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ee:	4b7f      	ldr	r3, [pc, #508]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	2203      	movs	r2, #3
 80018f4:	4013      	ands	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2b10      	cmp	r3, #16
 80018fc:	d102      	bne.n	8001904 <HAL_RCC_OscConfig+0x144>
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2b02      	cmp	r3, #2
 8001902:	d002      	beq.n	800190a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d135      	bne.n	8001976 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800190a:	4b78      	ldr	r3, [pc, #480]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	2380      	movs	r3, #128	@ 0x80
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4013      	ands	r3, r2
 8001914:	d005      	beq.n	8001922 <HAL_RCC_OscConfig+0x162>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e256      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001922:	4b72      	ldr	r3, [pc, #456]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	4a74      	ldr	r2, [pc, #464]	@ (8001af8 <HAL_RCC_OscConfig+0x338>)
 8001928:	4013      	ands	r3, r2
 800192a:	0019      	movs	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	021a      	lsls	r2, r3, #8
 8001932:	4b6e      	ldr	r3, [pc, #440]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001934:	430a      	orrs	r2, r1
 8001936:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d112      	bne.n	8001964 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800193e:	4b6b      	ldr	r3, [pc, #428]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a6e      	ldr	r2, [pc, #440]	@ (8001afc <HAL_RCC_OscConfig+0x33c>)
 8001944:	4013      	ands	r3, r2
 8001946:	0019      	movs	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	4b67      	ldr	r3, [pc, #412]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 800194e:	430a      	orrs	r2, r1
 8001950:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001952:	4b66      	ldr	r3, [pc, #408]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	0adb      	lsrs	r3, r3, #11
 8001958:	2207      	movs	r2, #7
 800195a:	4013      	ands	r3, r2
 800195c:	4a68      	ldr	r2, [pc, #416]	@ (8001b00 <HAL_RCC_OscConfig+0x340>)
 800195e:	40da      	lsrs	r2, r3
 8001960:	4b68      	ldr	r3, [pc, #416]	@ (8001b04 <HAL_RCC_OscConfig+0x344>)
 8001962:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001964:	4b68      	ldr	r3, [pc, #416]	@ (8001b08 <HAL_RCC_OscConfig+0x348>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0018      	movs	r0, r3
 800196a:	f7ff fb4b 	bl	8001004 <HAL_InitTick>
 800196e:	1e03      	subs	r3, r0, #0
 8001970:	d051      	beq.n	8001a16 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e22c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d030      	beq.n	80019e0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800197e:	4b5b      	ldr	r3, [pc, #364]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a5e      	ldr	r2, [pc, #376]	@ (8001afc <HAL_RCC_OscConfig+0x33c>)
 8001984:	4013      	ands	r3, r2
 8001986:	0019      	movs	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	4b57      	ldr	r3, [pc, #348]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 800198e:	430a      	orrs	r2, r1
 8001990:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001992:	4b56      	ldr	r3, [pc, #344]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4b55      	ldr	r3, [pc, #340]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001998:	2180      	movs	r1, #128	@ 0x80
 800199a:	0049      	lsls	r1, r1, #1
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a0:	f7ff fb8c 	bl	80010bc <HAL_GetTick>
 80019a4:	0003      	movs	r3, r0
 80019a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019aa:	f7ff fb87 	bl	80010bc <HAL_GetTick>
 80019ae:	0002      	movs	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e209      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019bc:	4b4b      	ldr	r3, [pc, #300]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	2380      	movs	r3, #128	@ 0x80
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4013      	ands	r3, r2
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c8:	4b48      	ldr	r3, [pc, #288]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	4a4a      	ldr	r2, [pc, #296]	@ (8001af8 <HAL_RCC_OscConfig+0x338>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	0019      	movs	r1, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	021a      	lsls	r2, r3, #8
 80019d8:	4b44      	ldr	r3, [pc, #272]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 80019da:	430a      	orrs	r2, r1
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	e01b      	b.n	8001a18 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80019e0:	4b42      	ldr	r3, [pc, #264]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b41      	ldr	r3, [pc, #260]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 80019e6:	4949      	ldr	r1, [pc, #292]	@ (8001b0c <HAL_RCC_OscConfig+0x34c>)
 80019e8:	400a      	ands	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff fb66 	bl	80010bc <HAL_GetTick>
 80019f0:	0003      	movs	r3, r0
 80019f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff fb61 	bl	80010bc <HAL_GetTick>
 80019fa:	0002      	movs	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e1e3      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a08:	4b38      	ldr	r3, [pc, #224]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2380      	movs	r3, #128	@ 0x80
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4013      	ands	r3, r2
 8001a12:	d1f0      	bne.n	80019f6 <HAL_RCC_OscConfig+0x236>
 8001a14:	e000      	b.n	8001a18 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a16:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2208      	movs	r2, #8
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d047      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a22:	4b32      	ldr	r3, [pc, #200]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2238      	movs	r2, #56	@ 0x38
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b18      	cmp	r3, #24
 8001a2c:	d10a      	bne.n	8001a44 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001a2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a32:	2202      	movs	r2, #2
 8001a34:	4013      	ands	r3, r2
 8001a36:	d03c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x2f2>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d138      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e1c5      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d019      	beq.n	8001a80 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a4c:	4b27      	ldr	r3, [pc, #156]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a50:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001a52:	2101      	movs	r1, #1
 8001a54:	430a      	orrs	r2, r1
 8001a56:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7ff fb30 	bl	80010bc <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a62:	f7ff fb2b 	bl	80010bc <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e1ad      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a74:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a78:	2202      	movs	r2, #2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d0f1      	beq.n	8001a62 <HAL_RCC_OscConfig+0x2a2>
 8001a7e:	e018      	b.n	8001ab2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a80:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001a82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a84:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001a86:	2101      	movs	r1, #1
 8001a88:	438a      	bics	r2, r1
 8001a8a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fb16 	bl	80010bc <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a96:	f7ff fb11 	bl	80010bc <HAL_GetTick>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e193      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa8:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aac:	2202      	movs	r2, #2
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d1f1      	bne.n	8001a96 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d100      	bne.n	8001abe <HAL_RCC_OscConfig+0x2fe>
 8001abc:	e0c6      	b.n	8001c4c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001abe:	231f      	movs	r3, #31
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2238      	movs	r2, #56	@ 0x38
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	d11e      	bne.n	8001b10 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001ad2:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <HAL_RCC_OscConfig+0x32c>)
 8001ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d100      	bne.n	8001ade <HAL_RCC_OscConfig+0x31e>
 8001adc:	e0b6      	b.n	8001c4c <HAL_RCC_OscConfig+0x48c>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d000      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x328>
 8001ae6:	e0b1      	b.n	8001c4c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e171      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
 8001aec:	40021000 	.word	0x40021000
 8001af0:	fffeffff 	.word	0xfffeffff
 8001af4:	fffbffff 	.word	0xfffbffff
 8001af8:	ffff80ff 	.word	0xffff80ff
 8001afc:	ffffc7ff 	.word	0xffffc7ff
 8001b00:	00f42400 	.word	0x00f42400
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000004 	.word	0x20000004
 8001b0c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b10:	4bb1      	ldr	r3, [pc, #708]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001b12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b14:	2380      	movs	r3, #128	@ 0x80
 8001b16:	055b      	lsls	r3, r3, #21
 8001b18:	4013      	ands	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_OscConfig+0x360>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_RCC_OscConfig+0x362>
 8001b20:	2300      	movs	r3, #0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d011      	beq.n	8001b4a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	4bac      	ldr	r3, [pc, #688]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001b28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b2a:	4bab      	ldr	r3, [pc, #684]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001b2c:	2180      	movs	r1, #128	@ 0x80
 8001b2e:	0549      	lsls	r1, r1, #21
 8001b30:	430a      	orrs	r2, r1
 8001b32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b34:	4ba8      	ldr	r3, [pc, #672]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001b36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b38:	2380      	movs	r3, #128	@ 0x80
 8001b3a:	055b      	lsls	r3, r3, #21
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b42:	231f      	movs	r3, #31
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b4a:	4ba4      	ldr	r3, [pc, #656]	@ (8001ddc <HAL_RCC_OscConfig+0x61c>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	2380      	movs	r3, #128	@ 0x80
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4013      	ands	r3, r2
 8001b54:	d11a      	bne.n	8001b8c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b56:	4ba1      	ldr	r3, [pc, #644]	@ (8001ddc <HAL_RCC_OscConfig+0x61c>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4ba0      	ldr	r3, [pc, #640]	@ (8001ddc <HAL_RCC_OscConfig+0x61c>)
 8001b5c:	2180      	movs	r1, #128	@ 0x80
 8001b5e:	0049      	lsls	r1, r1, #1
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b64:	f7ff faaa 	bl	80010bc <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6e:	f7ff faa5 	bl	80010bc <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e127      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b80:	4b96      	ldr	r3, [pc, #600]	@ (8001ddc <HAL_RCC_OscConfig+0x61c>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	2380      	movs	r3, #128	@ 0x80
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3e2>
 8001b94:	4b90      	ldr	r3, [pc, #576]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001b96:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b98:	4b8f      	ldr	r3, [pc, #572]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ba0:	e01c      	b.n	8001bdc <HAL_RCC_OscConfig+0x41c>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x404>
 8001baa:	4b8b      	ldr	r3, [pc, #556]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001bac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bae:	4b8a      	ldr	r3, [pc, #552]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bb6:	4b88      	ldr	r3, [pc, #544]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001bb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bba:	4b87      	ldr	r3, [pc, #540]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0x41c>
 8001bc4:	4b84      	ldr	r3, [pc, #528]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001bc6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bc8:	4b83      	ldr	r3, [pc, #524]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001bca:	2101      	movs	r1, #1
 8001bcc:	438a      	bics	r2, r1
 8001bce:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001bd0:	4b81      	ldr	r3, [pc, #516]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001bd2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bd4:	4b80      	ldr	r3, [pc, #512]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	438a      	bics	r2, r1
 8001bda:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d014      	beq.n	8001c0e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff fa6a 	bl	80010bc <HAL_GetTick>
 8001be8:	0003      	movs	r3, r0
 8001bea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bec:	e009      	b.n	8001c02 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bee:	f7ff fa65 	bl	80010bc <HAL_GetTick>
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	4a79      	ldr	r2, [pc, #484]	@ (8001de0 <HAL_RCC_OscConfig+0x620>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e0e6      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c02:	4b75      	ldr	r3, [pc, #468]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c06:	2202      	movs	r2, #2
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x42e>
 8001c0c:	e013      	b.n	8001c36 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0e:	f7ff fa55 	bl	80010bc <HAL_GetTick>
 8001c12:	0003      	movs	r3, r0
 8001c14:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c16:	e009      	b.n	8001c2c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7ff fa50 	bl	80010bc <HAL_GetTick>
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	4a6f      	ldr	r2, [pc, #444]	@ (8001de0 <HAL_RCC_OscConfig+0x620>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e0d1      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c2c:	4b6a      	ldr	r3, [pc, #424]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c30:	2202      	movs	r2, #2
 8001c32:	4013      	ands	r3, r2
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001c36:	231f      	movs	r3, #31
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d105      	bne.n	8001c4c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c40:	4b65      	ldr	r3, [pc, #404]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001c42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c44:	4b64      	ldr	r3, [pc, #400]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001c46:	4967      	ldr	r1, [pc, #412]	@ (8001de4 <HAL_RCC_OscConfig+0x624>)
 8001c48:	400a      	ands	r2, r1
 8001c4a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d100      	bne.n	8001c56 <HAL_RCC_OscConfig+0x496>
 8001c54:	e0bb      	b.n	8001dce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c56:	4b60      	ldr	r3, [pc, #384]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2238      	movs	r2, #56	@ 0x38
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b10      	cmp	r3, #16
 8001c60:	d100      	bne.n	8001c64 <HAL_RCC_OscConfig+0x4a4>
 8001c62:	e07b      	b.n	8001d5c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d156      	bne.n	8001d1a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6c:	4b5a      	ldr	r3, [pc, #360]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b59      	ldr	r3, [pc, #356]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001c72:	495d      	ldr	r1, [pc, #372]	@ (8001de8 <HAL_RCC_OscConfig+0x628>)
 8001c74:	400a      	ands	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fa20 	bl	80010bc <HAL_GetTick>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c82:	f7ff fa1b 	bl	80010bc <HAL_GetTick>
 8001c86:	0002      	movs	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e09d      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	4b50      	ldr	r3, [pc, #320]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	@ 0x80
 8001c9a:	049b      	lsls	r3, r3, #18
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d1f0      	bne.n	8001c82 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca0:	4b4d      	ldr	r3, [pc, #308]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	4a51      	ldr	r2, [pc, #324]	@ (8001dec <HAL_RCC_OscConfig+0x62c>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	0019      	movs	r1, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1a      	ldr	r2, [r3, #32]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	4b42      	ldr	r3, [pc, #264]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd4:	4b40      	ldr	r3, [pc, #256]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b3f      	ldr	r3, [pc, #252]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001cda:	2180      	movs	r1, #128	@ 0x80
 8001cdc:	0449      	lsls	r1, r1, #17
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	4b3c      	ldr	r3, [pc, #240]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0549      	lsls	r1, r1, #21
 8001cec:	430a      	orrs	r2, r1
 8001cee:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff f9e4 	bl	80010bc <HAL_GetTick>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7ff f9df 	bl	80010bc <HAL_GetTick>
 8001cfe:	0002      	movs	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e061      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0c:	4b32      	ldr	r3, [pc, #200]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2380      	movs	r3, #128	@ 0x80
 8001d12:	049b      	lsls	r3, r3, #18
 8001d14:	4013      	ands	r3, r2
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x53a>
 8001d18:	e059      	b.n	8001dce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001d20:	4931      	ldr	r1, [pc, #196]	@ (8001de8 <HAL_RCC_OscConfig+0x628>)
 8001d22:	400a      	ands	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7ff f9c9 	bl	80010bc <HAL_GetTick>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d30:	f7ff f9c4 	bl	80010bc <HAL_GetTick>
 8001d34:	0002      	movs	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e046      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d42:	4b25      	ldr	r3, [pc, #148]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	2380      	movs	r3, #128	@ 0x80
 8001d48:	049b      	lsls	r3, r3, #18
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001d4e:	4b22      	ldr	r3, [pc, #136]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	4b21      	ldr	r3, [pc, #132]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001d54:	4926      	ldr	r1, [pc, #152]	@ (8001df0 <HAL_RCC_OscConfig+0x630>)
 8001d56:	400a      	ands	r2, r1
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	e038      	b.n	8001dce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e033      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2203      	movs	r2, #3
 8001d72:	401a      	ands	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d126      	bne.n	8001dca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2270      	movs	r2, #112	@ 0x70
 8001d80:	401a      	ands	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d11f      	bne.n	8001dca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	23fe      	movs	r3, #254	@ 0xfe
 8001d8e:	01db      	lsls	r3, r3, #7
 8001d90:	401a      	ands	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d96:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d116      	bne.n	8001dca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	23f8      	movs	r3, #248	@ 0xf8
 8001da0:	039b      	lsls	r3, r3, #14
 8001da2:	401a      	ands	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d10e      	bne.n	8001dca <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	23e0      	movs	r3, #224	@ 0xe0
 8001db0:	051b      	lsls	r3, r3, #20
 8001db2:	401a      	ands	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	0f5b      	lsrs	r3, r3, #29
 8001dc0:	075a      	lsls	r2, r3, #29
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b008      	add	sp, #32
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40007000 	.word	0x40007000
 8001de0:	00001388 	.word	0x00001388
 8001de4:	efffffff 	.word	0xefffffff
 8001de8:	feffffff 	.word	0xfeffffff
 8001dec:	11c1808c 	.word	0x11c1808c
 8001df0:	eefefffc 	.word	0xeefefffc

08001df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0e9      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e08:	4b76      	ldr	r3, [pc, #472]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	4013      	ands	r3, r2
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d91e      	bls.n	8001e54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b73      	ldr	r3, [pc, #460]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	4393      	bics	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	4b70      	ldr	r3, [pc, #448]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e28:	f7ff f948 	bl	80010bc <HAL_GetTick>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e30:	e009      	b.n	8001e46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e32:	f7ff f943 	bl	80010bc <HAL_GetTick>
 8001e36:	0002      	movs	r2, r0
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	4a6a      	ldr	r2, [pc, #424]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e0ca      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e46:	4b67      	ldr	r3, [pc, #412]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d1ee      	bne.n	8001e32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d015      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2204      	movs	r2, #4
 8001e64:	4013      	ands	r3, r2
 8001e66:	d006      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e68:	4b60      	ldr	r3, [pc, #384]	@ (8001fec <HAL_RCC_ClockConfig+0x1f8>)
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	4b5f      	ldr	r3, [pc, #380]	@ (8001fec <HAL_RCC_ClockConfig+0x1f8>)
 8001e6e:	21e0      	movs	r1, #224	@ 0xe0
 8001e70:	01c9      	lsls	r1, r1, #7
 8001e72:	430a      	orrs	r2, r1
 8001e74:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e76:	4b5d      	ldr	r3, [pc, #372]	@ (8001fec <HAL_RCC_ClockConfig+0x1f8>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1fc>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	0019      	movs	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	4b59      	ldr	r3, [pc, #356]	@ (8001fec <HAL_RCC_ClockConfig+0x1f8>)
 8001e86:	430a      	orrs	r2, r1
 8001e88:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4013      	ands	r3, r2
 8001e92:	d057      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d107      	bne.n	8001eac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e9c:	4b53      	ldr	r3, [pc, #332]	@ (8001fec <HAL_RCC_ClockConfig+0x1f8>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	029b      	lsls	r3, r3, #10
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d12b      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e097      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d107      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb4:	4b4d      	ldr	r3, [pc, #308]	@ (8001fec <HAL_RCC_ClockConfig+0x1f8>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2380      	movs	r3, #128	@ 0x80
 8001eba:	049b      	lsls	r3, r3, #18
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d11f      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e08b      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d107      	bne.n	8001edc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ecc:	4b47      	ldr	r3, [pc, #284]	@ (8001fec <HAL_RCC_ClockConfig+0x1f8>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	2380      	movs	r3, #128	@ 0x80
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d113      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e07f      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ee4:	4b41      	ldr	r3, [pc, #260]	@ (8001fec <HAL_RCC_ClockConfig+0x1f8>)
 8001ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee8:	2202      	movs	r2, #2
 8001eea:	4013      	ands	r3, r2
 8001eec:	d108      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e074      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8001fec <HAL_RCC_ClockConfig+0x1f8>)
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e06d      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f00:	4b3a      	ldr	r3, [pc, #232]	@ (8001fec <HAL_RCC_ClockConfig+0x1f8>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2207      	movs	r2, #7
 8001f06:	4393      	bics	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	4b37      	ldr	r3, [pc, #220]	@ (8001fec <HAL_RCC_ClockConfig+0x1f8>)
 8001f10:	430a      	orrs	r2, r1
 8001f12:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f14:	f7ff f8d2 	bl	80010bc <HAL_GetTick>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1c:	e009      	b.n	8001f32 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1e:	f7ff f8cd 	bl	80010bc <HAL_GetTick>
 8001f22:	0002      	movs	r2, r0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	4a2f      	ldr	r2, [pc, #188]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e054      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f32:	4b2e      	ldr	r3, [pc, #184]	@ (8001fec <HAL_RCC_ClockConfig+0x1f8>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2238      	movs	r2, #56	@ 0x38
 8001f38:	401a      	ands	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d1ec      	bne.n	8001f1e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f44:	4b27      	ldr	r3, [pc, #156]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2207      	movs	r2, #7
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d21e      	bcs.n	8001f90 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b24      	ldr	r3, [pc, #144]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2207      	movs	r2, #7
 8001f58:	4393      	bics	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	4b21      	ldr	r3, [pc, #132]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f64:	f7ff f8aa 	bl	80010bc <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f6c:	e009      	b.n	8001f82 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6e:	f7ff f8a5 	bl	80010bc <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e02c      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f82:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2207      	movs	r2, #7
 8001f88:	4013      	ands	r3, r2
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d1ee      	bne.n	8001f6e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2204      	movs	r2, #4
 8001f96:	4013      	ands	r3, r2
 8001f98:	d009      	beq.n	8001fae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f9a:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <HAL_RCC_ClockConfig+0x1f8>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	4a15      	ldr	r2, [pc, #84]	@ (8001ff4 <HAL_RCC_ClockConfig+0x200>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	4b10      	ldr	r3, [pc, #64]	@ (8001fec <HAL_RCC_ClockConfig+0x1f8>)
 8001faa:	430a      	orrs	r2, r1
 8001fac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fae:	f000 f829 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8001fb2:	0001      	movs	r1, r0
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fec <HAL_RCC_ClockConfig+0x1f8>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	220f      	movs	r2, #15
 8001fbc:	401a      	ands	r2, r3
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <HAL_RCC_ClockConfig+0x204>)
 8001fc0:	0092      	lsls	r2, r2, #2
 8001fc2:	58d3      	ldr	r3, [r2, r3]
 8001fc4:	221f      	movs	r2, #31
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	000a      	movs	r2, r1
 8001fca:	40da      	lsrs	r2, r3
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_RCC_ClockConfig+0x208>)
 8001fce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <HAL_RCC_ClockConfig+0x20c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f7ff f815 	bl	8001004 <HAL_InitTick>
 8001fda:	0003      	movs	r3, r0
}
 8001fdc:	0018      	movs	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b004      	add	sp, #16
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40022000 	.word	0x40022000
 8001fe8:	00001388 	.word	0x00001388
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	fffff0ff 	.word	0xfffff0ff
 8001ff4:	ffff8fff 	.word	0xffff8fff
 8001ff8:	080058bc 	.word	0x080058bc
 8001ffc:	20000000 	.word	0x20000000
 8002000:	20000004 	.word	0x20000004

08002004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800200a:	4b3c      	ldr	r3, [pc, #240]	@ (80020fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2238      	movs	r2, #56	@ 0x38
 8002010:	4013      	ands	r3, r2
 8002012:	d10f      	bne.n	8002034 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002014:	4b39      	ldr	r3, [pc, #228]	@ (80020fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0adb      	lsrs	r3, r3, #11
 800201a:	2207      	movs	r2, #7
 800201c:	4013      	ands	r3, r2
 800201e:	2201      	movs	r2, #1
 8002020:	409a      	lsls	r2, r3
 8002022:	0013      	movs	r3, r2
 8002024:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002026:	6839      	ldr	r1, [r7, #0]
 8002028:	4835      	ldr	r0, [pc, #212]	@ (8002100 <HAL_RCC_GetSysClockFreq+0xfc>)
 800202a:	f7fe f86b 	bl	8000104 <__udivsi3>
 800202e:	0003      	movs	r3, r0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	e05d      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002034:	4b31      	ldr	r3, [pc, #196]	@ (80020fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2238      	movs	r2, #56	@ 0x38
 800203a:	4013      	ands	r3, r2
 800203c:	2b08      	cmp	r3, #8
 800203e:	d102      	bne.n	8002046 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002040:	4b30      	ldr	r3, [pc, #192]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x100>)
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	e054      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002046:	4b2d      	ldr	r3, [pc, #180]	@ (80020fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2238      	movs	r2, #56	@ 0x38
 800204c:	4013      	ands	r3, r2
 800204e:	2b10      	cmp	r3, #16
 8002050:	d138      	bne.n	80020c4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002052:	4b2a      	ldr	r3, [pc, #168]	@ (80020fc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	2203      	movs	r2, #3
 8002058:	4013      	ands	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800205c:	4b27      	ldr	r3, [pc, #156]	@ (80020fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	2207      	movs	r2, #7
 8002064:	4013      	ands	r3, r2
 8002066:	3301      	adds	r3, #1
 8002068:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d10d      	bne.n	800208c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002070:	68b9      	ldr	r1, [r7, #8]
 8002072:	4824      	ldr	r0, [pc, #144]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x100>)
 8002074:	f7fe f846 	bl	8000104 <__udivsi3>
 8002078:	0003      	movs	r3, r0
 800207a:	0019      	movs	r1, r3
 800207c:	4b1f      	ldr	r3, [pc, #124]	@ (80020fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	227f      	movs	r2, #127	@ 0x7f
 8002084:	4013      	ands	r3, r2
 8002086:	434b      	muls	r3, r1
 8002088:	617b      	str	r3, [r7, #20]
        break;
 800208a:	e00d      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	481c      	ldr	r0, [pc, #112]	@ (8002100 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002090:	f7fe f838 	bl	8000104 <__udivsi3>
 8002094:	0003      	movs	r3, r0
 8002096:	0019      	movs	r1, r3
 8002098:	4b18      	ldr	r3, [pc, #96]	@ (80020fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	227f      	movs	r2, #127	@ 0x7f
 80020a0:	4013      	ands	r3, r2
 80020a2:	434b      	muls	r3, r1
 80020a4:	617b      	str	r3, [r7, #20]
        break;
 80020a6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80020a8:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	0f5b      	lsrs	r3, r3, #29
 80020ae:	2207      	movs	r2, #7
 80020b0:	4013      	ands	r3, r2
 80020b2:	3301      	adds	r3, #1
 80020b4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	6978      	ldr	r0, [r7, #20]
 80020ba:	f7fe f823 	bl	8000104 <__udivsi3>
 80020be:	0003      	movs	r3, r0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	e015      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020c4:	4b0d      	ldr	r3, [pc, #52]	@ (80020fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2238      	movs	r2, #56	@ 0x38
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b20      	cmp	r3, #32
 80020ce:	d103      	bne.n	80020d8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80020d0:	2380      	movs	r3, #128	@ 0x80
 80020d2:	021b      	lsls	r3, r3, #8
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	e00b      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020d8:	4b08      	ldr	r3, [pc, #32]	@ (80020fc <HAL_RCC_GetSysClockFreq+0xf8>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2238      	movs	r2, #56	@ 0x38
 80020de:	4013      	ands	r3, r2
 80020e0:	2b18      	cmp	r3, #24
 80020e2:	d103      	bne.n	80020ec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020e4:	23fa      	movs	r3, #250	@ 0xfa
 80020e6:	01db      	lsls	r3, r3, #7
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	e001      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020f0:	693b      	ldr	r3, [r7, #16]
}
 80020f2:	0018      	movs	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	b006      	add	sp, #24
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	46c0      	nop			@ (mov r8, r8)
 80020fc:	40021000 	.word	0x40021000
 8002100:	00f42400 	.word	0x00f42400
 8002104:	007a1200 	.word	0x007a1200

08002108 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800210c:	4b02      	ldr	r3, [pc, #8]	@ (8002118 <HAL_RCC_GetHCLKFreq+0x10>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	0018      	movs	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	46c0      	nop			@ (mov r8, r8)
 8002118:	20000000 	.word	0x20000000

0800211c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800211c:	b5b0      	push	{r4, r5, r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002120:	f7ff fff2 	bl	8002108 <HAL_RCC_GetHCLKFreq>
 8002124:	0004      	movs	r4, r0
 8002126:	f7ff fb3f 	bl	80017a8 <LL_RCC_GetAPB1Prescaler>
 800212a:	0003      	movs	r3, r0
 800212c:	0b1a      	lsrs	r2, r3, #12
 800212e:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002130:	0092      	lsls	r2, r2, #2
 8002132:	58d3      	ldr	r3, [r2, r3]
 8002134:	221f      	movs	r2, #31
 8002136:	4013      	ands	r3, r2
 8002138:	40dc      	lsrs	r4, r3
 800213a:	0023      	movs	r3, r4
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	bdb0      	pop	{r4, r5, r7, pc}
 8002142:	46c0      	nop			@ (mov r8, r8)
 8002144:	080058fc 	.word	0x080058fc

08002148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002150:	2313      	movs	r3, #19
 8002152:	18fb      	adds	r3, r7, r3
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002158:	2312      	movs	r3, #18
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2380      	movs	r3, #128	@ 0x80
 8002166:	029b      	lsls	r3, r3, #10
 8002168:	4013      	ands	r3, r2
 800216a:	d100      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800216c:	e0a3      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216e:	2011      	movs	r0, #17
 8002170:	183b      	adds	r3, r7, r0
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002176:	4bc3      	ldr	r3, [pc, #780]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002178:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800217a:	2380      	movs	r3, #128	@ 0x80
 800217c:	055b      	lsls	r3, r3, #21
 800217e:	4013      	ands	r3, r2
 8002180:	d110      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	4bc0      	ldr	r3, [pc, #768]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002184:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002186:	4bbf      	ldr	r3, [pc, #764]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002188:	2180      	movs	r1, #128	@ 0x80
 800218a:	0549      	lsls	r1, r1, #21
 800218c:	430a      	orrs	r2, r1
 800218e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002190:	4bbc      	ldr	r3, [pc, #752]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002192:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002194:	2380      	movs	r3, #128	@ 0x80
 8002196:	055b      	lsls	r3, r3, #21
 8002198:	4013      	ands	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219e:	183b      	adds	r3, r7, r0
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a4:	4bb8      	ldr	r3, [pc, #736]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4bb7      	ldr	r3, [pc, #732]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021aa:	2180      	movs	r1, #128	@ 0x80
 80021ac:	0049      	lsls	r1, r1, #1
 80021ae:	430a      	orrs	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021b2:	f7fe ff83 	bl	80010bc <HAL_GetTick>
 80021b6:	0003      	movs	r3, r0
 80021b8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021ba:	e00b      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021bc:	f7fe ff7e 	bl	80010bc <HAL_GetTick>
 80021c0:	0002      	movs	r2, r0
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d904      	bls.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80021ca:	2313      	movs	r3, #19
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	2203      	movs	r2, #3
 80021d0:	701a      	strb	r2, [r3, #0]
        break;
 80021d2:	e005      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021d4:	4bac      	ldr	r3, [pc, #688]	@ (8002488 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	2380      	movs	r3, #128	@ 0x80
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4013      	ands	r3, r2
 80021de:	d0ed      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80021e0:	2313      	movs	r3, #19
 80021e2:	18fb      	adds	r3, r7, r3
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d154      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021ea:	4ba6      	ldr	r3, [pc, #664]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80021ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021ee:	23c0      	movs	r3, #192	@ 0xc0
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4013      	ands	r3, r2
 80021f4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d019      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	429a      	cmp	r2, r3
 8002204:	d014      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002206:	4b9f      	ldr	r3, [pc, #636]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220a:	4aa0      	ldr	r2, [pc, #640]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800220c:	4013      	ands	r3, r2
 800220e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002210:	4b9c      	ldr	r3, [pc, #624]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002212:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002214:	4b9b      	ldr	r3, [pc, #620]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002216:	2180      	movs	r1, #128	@ 0x80
 8002218:	0249      	lsls	r1, r1, #9
 800221a:	430a      	orrs	r2, r1
 800221c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800221e:	4b99      	ldr	r3, [pc, #612]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002220:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002222:	4b98      	ldr	r3, [pc, #608]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002224:	499a      	ldr	r1, [pc, #616]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002226:	400a      	ands	r2, r1
 8002228:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800222a:	4b96      	ldr	r3, [pc, #600]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2201      	movs	r2, #1
 8002234:	4013      	ands	r3, r2
 8002236:	d016      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7fe ff40 	bl	80010bc <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002240:	e00c      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7fe ff3b 	bl	80010bc <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	4a91      	ldr	r2, [pc, #580]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d904      	bls.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002252:	2313      	movs	r3, #19
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	2203      	movs	r2, #3
 8002258:	701a      	strb	r2, [r3, #0]
            break;
 800225a:	e004      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800225c:	4b89      	ldr	r3, [pc, #548]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800225e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002260:	2202      	movs	r2, #2
 8002262:	4013      	ands	r3, r2
 8002264:	d0ed      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002266:	2313      	movs	r3, #19
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10a      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002270:	4b84      	ldr	r3, [pc, #528]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002274:	4a85      	ldr	r2, [pc, #532]	@ (800248c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002276:	4013      	ands	r3, r2
 8002278:	0019      	movs	r1, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800227e:	4b81      	ldr	r3, [pc, #516]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002280:	430a      	orrs	r2, r1
 8002282:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002284:	e00c      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002286:	2312      	movs	r3, #18
 8002288:	18fb      	adds	r3, r7, r3
 800228a:	2213      	movs	r2, #19
 800228c:	18ba      	adds	r2, r7, r2
 800228e:	7812      	ldrb	r2, [r2, #0]
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	e005      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002294:	2312      	movs	r3, #18
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	2213      	movs	r2, #19
 800229a:	18ba      	adds	r2, r7, r2
 800229c:	7812      	ldrb	r2, [r2, #0]
 800229e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022a0:	2311      	movs	r3, #17
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d105      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022aa:	4b76      	ldr	r3, [pc, #472]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022ae:	4b75      	ldr	r3, [pc, #468]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022b0:	4979      	ldr	r1, [pc, #484]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80022b2:	400a      	ands	r2, r1
 80022b4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2201      	movs	r2, #1
 80022bc:	4013      	ands	r3, r2
 80022be:	d009      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022c0:	4b70      	ldr	r3, [pc, #448]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c4:	2203      	movs	r2, #3
 80022c6:	4393      	bics	r3, r2
 80022c8:	0019      	movs	r1, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022d0:	430a      	orrs	r2, r1
 80022d2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2202      	movs	r2, #2
 80022da:	4013      	ands	r3, r2
 80022dc:	d009      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022de:	4b69      	ldr	r3, [pc, #420]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e2:	220c      	movs	r2, #12
 80022e4:	4393      	bics	r3, r2
 80022e6:	0019      	movs	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689a      	ldr	r2, [r3, #8]
 80022ec:	4b65      	ldr	r3, [pc, #404]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022ee:	430a      	orrs	r2, r1
 80022f0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2210      	movs	r2, #16
 80022f8:	4013      	ands	r3, r2
 80022fa:	d009      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022fc:	4b61      	ldr	r3, [pc, #388]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80022fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002300:	4a66      	ldr	r2, [pc, #408]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002302:	4013      	ands	r3, r2
 8002304:	0019      	movs	r1, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	4b5e      	ldr	r3, [pc, #376]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800230c:	430a      	orrs	r2, r1
 800230e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4013      	ands	r3, r2
 800231a:	d009      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800231c:	4b59      	ldr	r3, [pc, #356]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800231e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002320:	4a5f      	ldr	r2, [pc, #380]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002322:	4013      	ands	r3, r2
 8002324:	0019      	movs	r1, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	699a      	ldr	r2, [r3, #24]
 800232a:	4b56      	ldr	r3, [pc, #344]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800232c:	430a      	orrs	r2, r1
 800232e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	@ 0x80
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4013      	ands	r3, r2
 800233a:	d009      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800233c:	4b51      	ldr	r3, [pc, #324]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800233e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002340:	4a58      	ldr	r2, [pc, #352]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002342:	4013      	ands	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69da      	ldr	r2, [r3, #28]
 800234a:	4b4e      	ldr	r3, [pc, #312]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800234c:	430a      	orrs	r2, r1
 800234e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2220      	movs	r2, #32
 8002356:	4013      	ands	r3, r2
 8002358:	d009      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800235a:	4b4a      	ldr	r3, [pc, #296]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800235c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235e:	4a52      	ldr	r2, [pc, #328]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002360:	4013      	ands	r3, r2
 8002362:	0019      	movs	r1, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	4b46      	ldr	r3, [pc, #280]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800236a:	430a      	orrs	r2, r1
 800236c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	01db      	lsls	r3, r3, #7
 8002376:	4013      	ands	r3, r2
 8002378:	d015      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800237a:	4b42      	ldr	r3, [pc, #264]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800237c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	0899      	lsrs	r1, r3, #2
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a1a      	ldr	r2, [r3, #32]
 8002386:	4b3f      	ldr	r3, [pc, #252]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002388:	430a      	orrs	r2, r1
 800238a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1a      	ldr	r2, [r3, #32]
 8002390:	2380      	movs	r3, #128	@ 0x80
 8002392:	05db      	lsls	r3, r3, #23
 8002394:	429a      	cmp	r2, r3
 8002396:	d106      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002398:	4b3a      	ldr	r3, [pc, #232]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	4b39      	ldr	r3, [pc, #228]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239e:	2180      	movs	r1, #128	@ 0x80
 80023a0:	0249      	lsls	r1, r1, #9
 80023a2:	430a      	orrs	r2, r1
 80023a4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	031b      	lsls	r3, r3, #12
 80023ae:	4013      	ands	r3, r2
 80023b0:	d009      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80023b2:	4b34      	ldr	r3, [pc, #208]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b6:	2240      	movs	r2, #64	@ 0x40
 80023b8:	4393      	bics	r3, r2
 80023ba:	0019      	movs	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023c0:	4b30      	ldr	r3, [pc, #192]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c2:	430a      	orrs	r2, r1
 80023c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	2380      	movs	r3, #128	@ 0x80
 80023cc:	039b      	lsls	r3, r3, #14
 80023ce:	4013      	ands	r3, r2
 80023d0:	d016      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80023d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d6:	4a35      	ldr	r2, [pc, #212]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80023d8:	4013      	ands	r3, r2
 80023da:	0019      	movs	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023e0:	4b28      	ldr	r3, [pc, #160]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023e2:	430a      	orrs	r2, r1
 80023e4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	03db      	lsls	r3, r3, #15
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d106      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80023f2:	4b24      	ldr	r3, [pc, #144]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	4b23      	ldr	r3, [pc, #140]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023f8:	2180      	movs	r1, #128	@ 0x80
 80023fa:	0449      	lsls	r1, r1, #17
 80023fc:	430a      	orrs	r2, r1
 80023fe:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	2380      	movs	r3, #128	@ 0x80
 8002406:	03db      	lsls	r3, r3, #15
 8002408:	4013      	ands	r3, r2
 800240a:	d016      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800240c:	4b1d      	ldr	r3, [pc, #116]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800240e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002410:	4a27      	ldr	r2, [pc, #156]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002412:	4013      	ands	r3, r2
 8002414:	0019      	movs	r1, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800241a:	4b1a      	ldr	r3, [pc, #104]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800241c:	430a      	orrs	r2, r1
 800241e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002424:	2380      	movs	r3, #128	@ 0x80
 8002426:	045b      	lsls	r3, r3, #17
 8002428:	429a      	cmp	r2, r3
 800242a:	d106      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800242c:	4b15      	ldr	r3, [pc, #84]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	4b14      	ldr	r3, [pc, #80]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002432:	2180      	movs	r1, #128	@ 0x80
 8002434:	0449      	lsls	r1, r1, #17
 8002436:	430a      	orrs	r2, r1
 8002438:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	2380      	movs	r3, #128	@ 0x80
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	4013      	ands	r3, r2
 8002444:	d016      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002446:	4b0f      	ldr	r3, [pc, #60]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244a:	4a1a      	ldr	r2, [pc, #104]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800244c:	4013      	ands	r3, r2
 800244e:	0019      	movs	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002456:	430a      	orrs	r2, r1
 8002458:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	2380      	movs	r3, #128	@ 0x80
 8002460:	01db      	lsls	r3, r3, #7
 8002462:	429a      	cmp	r2, r3
 8002464:	d106      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002466:	4b07      	ldr	r3, [pc, #28]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800246c:	2180      	movs	r1, #128	@ 0x80
 800246e:	0249      	lsls	r1, r1, #9
 8002470:	430a      	orrs	r2, r1
 8002472:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002474:	2312      	movs	r3, #18
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	781b      	ldrb	r3, [r3, #0]
}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	b006      	add	sp, #24
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	40021000 	.word	0x40021000
 8002488:	40007000 	.word	0x40007000
 800248c:	fffffcff 	.word	0xfffffcff
 8002490:	fffeffff 	.word	0xfffeffff
 8002494:	00001388 	.word	0x00001388
 8002498:	efffffff 	.word	0xefffffff
 800249c:	fffff3ff 	.word	0xfffff3ff
 80024a0:	fff3ffff 	.word	0xfff3ffff
 80024a4:	ffcfffff 	.word	0xffcfffff
 80024a8:	ffffcfff 	.word	0xffffcfff
 80024ac:	ffbfffff 	.word	0xffbfffff
 80024b0:	feffffff 	.word	0xfeffffff
 80024b4:	ffff3fff 	.word	0xffff3fff

080024b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e04a      	b.n	8002560 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	223d      	movs	r2, #61	@ 0x3d
 80024ce:	5c9b      	ldrb	r3, [r3, r2]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d107      	bne.n	80024e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	223c      	movs	r2, #60	@ 0x3c
 80024da:	2100      	movs	r1, #0
 80024dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7fe fbfd 	bl	8000ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	223d      	movs	r2, #61	@ 0x3d
 80024ea:	2102      	movs	r1, #2
 80024ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3304      	adds	r3, #4
 80024f6:	0019      	movs	r1, r3
 80024f8:	0010      	movs	r0, r2
 80024fa:	f000 fb55 	bl	8002ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2248      	movs	r2, #72	@ 0x48
 8002502:	2101      	movs	r1, #1
 8002504:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	223e      	movs	r2, #62	@ 0x3e
 800250a:	2101      	movs	r1, #1
 800250c:	5499      	strb	r1, [r3, r2]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	223f      	movs	r2, #63	@ 0x3f
 8002512:	2101      	movs	r1, #1
 8002514:	5499      	strb	r1, [r3, r2]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2240      	movs	r2, #64	@ 0x40
 800251a:	2101      	movs	r1, #1
 800251c:	5499      	strb	r1, [r3, r2]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2241      	movs	r2, #65	@ 0x41
 8002522:	2101      	movs	r1, #1
 8002524:	5499      	strb	r1, [r3, r2]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2242      	movs	r2, #66	@ 0x42
 800252a:	2101      	movs	r1, #1
 800252c:	5499      	strb	r1, [r3, r2]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2243      	movs	r2, #67	@ 0x43
 8002532:	2101      	movs	r1, #1
 8002534:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2244      	movs	r2, #68	@ 0x44
 800253a:	2101      	movs	r1, #1
 800253c:	5499      	strb	r1, [r3, r2]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2245      	movs	r2, #69	@ 0x45
 8002542:	2101      	movs	r1, #1
 8002544:	5499      	strb	r1, [r3, r2]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2246      	movs	r2, #70	@ 0x46
 800254a:	2101      	movs	r1, #1
 800254c:	5499      	strb	r1, [r3, r2]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2247      	movs	r2, #71	@ 0x47
 8002552:	2101      	movs	r1, #1
 8002554:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	223d      	movs	r2, #61	@ 0x3d
 800255a:	2101      	movs	r1, #1
 800255c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	0018      	movs	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	b002      	add	sp, #8
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e04a      	b.n	8002610 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	223d      	movs	r2, #61	@ 0x3d
 800257e:	5c9b      	ldrb	r3, [r3, r2]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d107      	bne.n	8002596 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	223c      	movs	r2, #60	@ 0x3c
 800258a:	2100      	movs	r1, #0
 800258c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	0018      	movs	r0, r3
 8002592:	f000 f841 	bl	8002618 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	223d      	movs	r2, #61	@ 0x3d
 800259a:	2102      	movs	r1, #2
 800259c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3304      	adds	r3, #4
 80025a6:	0019      	movs	r1, r3
 80025a8:	0010      	movs	r0, r2
 80025aa:	f000 fafd 	bl	8002ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2248      	movs	r2, #72	@ 0x48
 80025b2:	2101      	movs	r1, #1
 80025b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	223e      	movs	r2, #62	@ 0x3e
 80025ba:	2101      	movs	r1, #1
 80025bc:	5499      	strb	r1, [r3, r2]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	223f      	movs	r2, #63	@ 0x3f
 80025c2:	2101      	movs	r1, #1
 80025c4:	5499      	strb	r1, [r3, r2]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2240      	movs	r2, #64	@ 0x40
 80025ca:	2101      	movs	r1, #1
 80025cc:	5499      	strb	r1, [r3, r2]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2241      	movs	r2, #65	@ 0x41
 80025d2:	2101      	movs	r1, #1
 80025d4:	5499      	strb	r1, [r3, r2]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2242      	movs	r2, #66	@ 0x42
 80025da:	2101      	movs	r1, #1
 80025dc:	5499      	strb	r1, [r3, r2]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2243      	movs	r2, #67	@ 0x43
 80025e2:	2101      	movs	r1, #1
 80025e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2244      	movs	r2, #68	@ 0x44
 80025ea:	2101      	movs	r1, #1
 80025ec:	5499      	strb	r1, [r3, r2]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2245      	movs	r2, #69	@ 0x45
 80025f2:	2101      	movs	r1, #1
 80025f4:	5499      	strb	r1, [r3, r2]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2246      	movs	r2, #70	@ 0x46
 80025fa:	2101      	movs	r1, #1
 80025fc:	5499      	strb	r1, [r3, r2]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2247      	movs	r2, #71	@ 0x47
 8002602:	2101      	movs	r1, #1
 8002604:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	223d      	movs	r2, #61	@ 0x3d
 800260a:	2101      	movs	r1, #1
 800260c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	0018      	movs	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b002      	add	sp, #8
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002620:	46c0      	nop			@ (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d108      	bne.n	800264a <HAL_TIM_PWM_Start+0x22>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	223e      	movs	r2, #62	@ 0x3e
 800263c:	5c9b      	ldrb	r3, [r3, r2]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	1e5a      	subs	r2, r3, #1
 8002644:	4193      	sbcs	r3, r2
 8002646:	b2db      	uxtb	r3, r3
 8002648:	e037      	b.n	80026ba <HAL_TIM_PWM_Start+0x92>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b04      	cmp	r3, #4
 800264e:	d108      	bne.n	8002662 <HAL_TIM_PWM_Start+0x3a>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	223f      	movs	r2, #63	@ 0x3f
 8002654:	5c9b      	ldrb	r3, [r3, r2]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	1e5a      	subs	r2, r3, #1
 800265c:	4193      	sbcs	r3, r2
 800265e:	b2db      	uxtb	r3, r3
 8002660:	e02b      	b.n	80026ba <HAL_TIM_PWM_Start+0x92>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b08      	cmp	r3, #8
 8002666:	d108      	bne.n	800267a <HAL_TIM_PWM_Start+0x52>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2240      	movs	r2, #64	@ 0x40
 800266c:	5c9b      	ldrb	r3, [r3, r2]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	3b01      	subs	r3, #1
 8002672:	1e5a      	subs	r2, r3, #1
 8002674:	4193      	sbcs	r3, r2
 8002676:	b2db      	uxtb	r3, r3
 8002678:	e01f      	b.n	80026ba <HAL_TIM_PWM_Start+0x92>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b0c      	cmp	r3, #12
 800267e:	d108      	bne.n	8002692 <HAL_TIM_PWM_Start+0x6a>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2241      	movs	r2, #65	@ 0x41
 8002684:	5c9b      	ldrb	r3, [r3, r2]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	1e5a      	subs	r2, r3, #1
 800268c:	4193      	sbcs	r3, r2
 800268e:	b2db      	uxtb	r3, r3
 8002690:	e013      	b.n	80026ba <HAL_TIM_PWM_Start+0x92>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b10      	cmp	r3, #16
 8002696:	d108      	bne.n	80026aa <HAL_TIM_PWM_Start+0x82>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2242      	movs	r2, #66	@ 0x42
 800269c:	5c9b      	ldrb	r3, [r3, r2]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	3b01      	subs	r3, #1
 80026a2:	1e5a      	subs	r2, r3, #1
 80026a4:	4193      	sbcs	r3, r2
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	e007      	b.n	80026ba <HAL_TIM_PWM_Start+0x92>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2243      	movs	r2, #67	@ 0x43
 80026ae:	5c9b      	ldrb	r3, [r3, r2]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	1e5a      	subs	r2, r3, #1
 80026b6:	4193      	sbcs	r3, r2
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e08b      	b.n	80027da <HAL_TIM_PWM_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d104      	bne.n	80026d2 <HAL_TIM_PWM_Start+0xaa>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	223e      	movs	r2, #62	@ 0x3e
 80026cc:	2102      	movs	r1, #2
 80026ce:	5499      	strb	r1, [r3, r2]
 80026d0:	e023      	b.n	800271a <HAL_TIM_PWM_Start+0xf2>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d104      	bne.n	80026e2 <HAL_TIM_PWM_Start+0xba>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	223f      	movs	r2, #63	@ 0x3f
 80026dc:	2102      	movs	r1, #2
 80026de:	5499      	strb	r1, [r3, r2]
 80026e0:	e01b      	b.n	800271a <HAL_TIM_PWM_Start+0xf2>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d104      	bne.n	80026f2 <HAL_TIM_PWM_Start+0xca>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2240      	movs	r2, #64	@ 0x40
 80026ec:	2102      	movs	r1, #2
 80026ee:	5499      	strb	r1, [r3, r2]
 80026f0:	e013      	b.n	800271a <HAL_TIM_PWM_Start+0xf2>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b0c      	cmp	r3, #12
 80026f6:	d104      	bne.n	8002702 <HAL_TIM_PWM_Start+0xda>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2241      	movs	r2, #65	@ 0x41
 80026fc:	2102      	movs	r1, #2
 80026fe:	5499      	strb	r1, [r3, r2]
 8002700:	e00b      	b.n	800271a <HAL_TIM_PWM_Start+0xf2>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b10      	cmp	r3, #16
 8002706:	d104      	bne.n	8002712 <HAL_TIM_PWM_Start+0xea>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2242      	movs	r2, #66	@ 0x42
 800270c:	2102      	movs	r1, #2
 800270e:	5499      	strb	r1, [r3, r2]
 8002710:	e003      	b.n	800271a <HAL_TIM_PWM_Start+0xf2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2243      	movs	r2, #67	@ 0x43
 8002716:	2102      	movs	r1, #2
 8002718:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6839      	ldr	r1, [r7, #0]
 8002720:	2201      	movs	r2, #1
 8002722:	0018      	movs	r0, r3
 8002724:	f000 fe2e 	bl	8003384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a2d      	ldr	r2, [pc, #180]	@ (80027e4 <HAL_TIM_PWM_Start+0x1bc>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00e      	beq.n	8002750 <HAL_TIM_PWM_Start+0x128>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a2c      	ldr	r2, [pc, #176]	@ (80027e8 <HAL_TIM_PWM_Start+0x1c0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d009      	beq.n	8002750 <HAL_TIM_PWM_Start+0x128>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a2a      	ldr	r2, [pc, #168]	@ (80027ec <HAL_TIM_PWM_Start+0x1c4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d004      	beq.n	8002750 <HAL_TIM_PWM_Start+0x128>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a29      	ldr	r2, [pc, #164]	@ (80027f0 <HAL_TIM_PWM_Start+0x1c8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d101      	bne.n	8002754 <HAL_TIM_PWM_Start+0x12c>
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_TIM_PWM_Start+0x12e>
 8002754:	2300      	movs	r3, #0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2180      	movs	r1, #128	@ 0x80
 8002766:	0209      	lsls	r1, r1, #8
 8002768:	430a      	orrs	r2, r1
 800276a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1c      	ldr	r2, [pc, #112]	@ (80027e4 <HAL_TIM_PWM_Start+0x1bc>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d00f      	beq.n	8002796 <HAL_TIM_PWM_Start+0x16e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	2380      	movs	r3, #128	@ 0x80
 800277c:	05db      	lsls	r3, r3, #23
 800277e:	429a      	cmp	r2, r3
 8002780:	d009      	beq.n	8002796 <HAL_TIM_PWM_Start+0x16e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1b      	ldr	r2, [pc, #108]	@ (80027f4 <HAL_TIM_PWM_Start+0x1cc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d004      	beq.n	8002796 <HAL_TIM_PWM_Start+0x16e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a15      	ldr	r2, [pc, #84]	@ (80027e8 <HAL_TIM_PWM_Start+0x1c0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d116      	bne.n	80027c4 <HAL_TIM_PWM_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4a16      	ldr	r2, [pc, #88]	@ (80027f8 <HAL_TIM_PWM_Start+0x1d0>)
 800279e:	4013      	ands	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b06      	cmp	r3, #6
 80027a6:	d016      	beq.n	80027d6 <HAL_TIM_PWM_Start+0x1ae>
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	2380      	movs	r3, #128	@ 0x80
 80027ac:	025b      	lsls	r3, r3, #9
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d011      	beq.n	80027d6 <HAL_TIM_PWM_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2101      	movs	r1, #1
 80027be:	430a      	orrs	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c2:	e008      	b.n	80027d6 <HAL_TIM_PWM_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2101      	movs	r1, #1
 80027d0:	430a      	orrs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e000      	b.n	80027d8 <HAL_TIM_PWM_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027d6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	b004      	add	sp, #16
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	40012c00 	.word	0x40012c00
 80027e8:	40014000 	.word	0x40014000
 80027ec:	40014400 	.word	0x40014400
 80027f0:	40014800 	.word	0x40014800
 80027f4:	40000400 	.word	0x40000400
 80027f8:	00010007 	.word	0x00010007

080027fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002808:	2317      	movs	r3, #23
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	2200      	movs	r2, #0
 800280e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	223c      	movs	r2, #60	@ 0x3c
 8002814:	5c9b      	ldrb	r3, [r3, r2]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_TIM_PWM_ConfigChannel+0x22>
 800281a:	2302      	movs	r3, #2
 800281c:	e0e5      	b.n	80029ea <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	223c      	movs	r2, #60	@ 0x3c
 8002822:	2101      	movs	r1, #1
 8002824:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b14      	cmp	r3, #20
 800282a:	d900      	bls.n	800282e <HAL_TIM_PWM_ConfigChannel+0x32>
 800282c:	e0d1      	b.n	80029d2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	009a      	lsls	r2, r3, #2
 8002832:	4b70      	ldr	r3, [pc, #448]	@ (80029f4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002834:	18d3      	adds	r3, r2, r3
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	0011      	movs	r1, r2
 8002842:	0018      	movs	r0, r3
 8002844:	f000 fa3e 	bl	8002cc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699a      	ldr	r2, [r3, #24]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2108      	movs	r1, #8
 8002854:	430a      	orrs	r2, r1
 8002856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2104      	movs	r1, #4
 8002864:	438a      	bics	r2, r1
 8002866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6999      	ldr	r1, [r3, #24]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	619a      	str	r2, [r3, #24]
      break;
 800287a:	e0af      	b.n	80029dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	0011      	movs	r1, r2
 8002884:	0018      	movs	r0, r3
 8002886:	f000 faa7 	bl	8002dd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699a      	ldr	r2, [r3, #24]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2180      	movs	r1, #128	@ 0x80
 8002896:	0109      	lsls	r1, r1, #4
 8002898:	430a      	orrs	r2, r1
 800289a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4954      	ldr	r1, [pc, #336]	@ (80029f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80028a8:	400a      	ands	r2, r1
 80028aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6999      	ldr	r1, [r3, #24]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	021a      	lsls	r2, r3, #8
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	430a      	orrs	r2, r1
 80028be:	619a      	str	r2, [r3, #24]
      break;
 80028c0:	e08c      	b.n	80029dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	0011      	movs	r1, r2
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 fb08 	bl	8002ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2108      	movs	r1, #8
 80028dc:	430a      	orrs	r2, r1
 80028de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	69da      	ldr	r2, [r3, #28]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2104      	movs	r1, #4
 80028ec:	438a      	bics	r2, r1
 80028ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	69d9      	ldr	r1, [r3, #28]
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	61da      	str	r2, [r3, #28]
      break;
 8002902:	e06b      	b.n	80029dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	0011      	movs	r1, r2
 800290c:	0018      	movs	r0, r3
 800290e:	f000 fb6f 	bl	8002ff0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	69da      	ldr	r2, [r3, #28]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2180      	movs	r1, #128	@ 0x80
 800291e:	0109      	lsls	r1, r1, #4
 8002920:	430a      	orrs	r2, r1
 8002922:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	69da      	ldr	r2, [r3, #28]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4932      	ldr	r1, [pc, #200]	@ (80029f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002930:	400a      	ands	r2, r1
 8002932:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69d9      	ldr	r1, [r3, #28]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	021a      	lsls	r2, r3, #8
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	61da      	str	r2, [r3, #28]
      break;
 8002948:	e048      	b.n	80029dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	0011      	movs	r1, r2
 8002952:	0018      	movs	r0, r3
 8002954:	f000 fbb6 	bl	80030c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2108      	movs	r1, #8
 8002964:	430a      	orrs	r2, r1
 8002966:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2104      	movs	r1, #4
 8002974:	438a      	bics	r2, r1
 8002976:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800298a:	e027      	b.n	80029dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	0011      	movs	r1, r2
 8002994:	0018      	movs	r0, r3
 8002996:	f000 fbf5 	bl	8003184 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2180      	movs	r1, #128	@ 0x80
 80029a6:	0109      	lsls	r1, r1, #4
 80029a8:	430a      	orrs	r2, r1
 80029aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4910      	ldr	r1, [pc, #64]	@ (80029f8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80029b8:	400a      	ands	r2, r1
 80029ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	021a      	lsls	r2, r3, #8
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80029d0:	e004      	b.n	80029dc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80029d2:	2317      	movs	r3, #23
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
      break;
 80029da:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	223c      	movs	r2, #60	@ 0x3c
 80029e0:	2100      	movs	r1, #0
 80029e2:	5499      	strb	r1, [r3, r2]

  return status;
 80029e4:	2317      	movs	r3, #23
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	781b      	ldrb	r3, [r3, #0]
}
 80029ea:	0018      	movs	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b006      	add	sp, #24
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	0800591c 	.word	0x0800591c
 80029f8:	fffffbff 	.word	0xfffffbff

080029fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a06:	230f      	movs	r3, #15
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	223c      	movs	r2, #60	@ 0x3c
 8002a12:	5c9b      	ldrb	r3, [r3, r2]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_TIM_ConfigClockSource+0x20>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e0bc      	b.n	8002b96 <HAL_TIM_ConfigClockSource+0x19a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	223c      	movs	r2, #60	@ 0x3c
 8002a20:	2101      	movs	r1, #1
 8002a22:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	223d      	movs	r2, #61	@ 0x3d
 8002a28:	2102      	movs	r1, #2
 8002a2a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4a5a      	ldr	r2, [pc, #360]	@ (8002ba0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4a59      	ldr	r2, [pc, #356]	@ (8002ba4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2280      	movs	r2, #128	@ 0x80
 8002a52:	0192      	lsls	r2, r2, #6
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d040      	beq.n	8002ada <HAL_TIM_ConfigClockSource+0xde>
 8002a58:	2280      	movs	r2, #128	@ 0x80
 8002a5a:	0192      	lsls	r2, r2, #6
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d900      	bls.n	8002a62 <HAL_TIM_ConfigClockSource+0x66>
 8002a60:	e088      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x178>
 8002a62:	2280      	movs	r2, #128	@ 0x80
 8002a64:	0152      	lsls	r2, r2, #5
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d100      	bne.n	8002a6c <HAL_TIM_ConfigClockSource+0x70>
 8002a6a:	e088      	b.n	8002b7e <HAL_TIM_ConfigClockSource+0x182>
 8002a6c:	2280      	movs	r2, #128	@ 0x80
 8002a6e:	0152      	lsls	r2, r2, #5
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d900      	bls.n	8002a76 <HAL_TIM_ConfigClockSource+0x7a>
 8002a74:	e07e      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x178>
 8002a76:	2b70      	cmp	r3, #112	@ 0x70
 8002a78:	d018      	beq.n	8002aac <HAL_TIM_ConfigClockSource+0xb0>
 8002a7a:	d900      	bls.n	8002a7e <HAL_TIM_ConfigClockSource+0x82>
 8002a7c:	e07a      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x178>
 8002a7e:	2b60      	cmp	r3, #96	@ 0x60
 8002a80:	d04f      	beq.n	8002b22 <HAL_TIM_ConfigClockSource+0x126>
 8002a82:	d900      	bls.n	8002a86 <HAL_TIM_ConfigClockSource+0x8a>
 8002a84:	e076      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x178>
 8002a86:	2b50      	cmp	r3, #80	@ 0x50
 8002a88:	d03b      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0x106>
 8002a8a:	d900      	bls.n	8002a8e <HAL_TIM_ConfigClockSource+0x92>
 8002a8c:	e072      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x178>
 8002a8e:	2b40      	cmp	r3, #64	@ 0x40
 8002a90:	d057      	beq.n	8002b42 <HAL_TIM_ConfigClockSource+0x146>
 8002a92:	d900      	bls.n	8002a96 <HAL_TIM_ConfigClockSource+0x9a>
 8002a94:	e06e      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x178>
 8002a96:	2b30      	cmp	r3, #48	@ 0x30
 8002a98:	d063      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0x166>
 8002a9a:	d86b      	bhi.n	8002b74 <HAL_TIM_ConfigClockSource+0x178>
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d060      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0x166>
 8002aa0:	d868      	bhi.n	8002b74 <HAL_TIM_ConfigClockSource+0x178>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d05d      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0x166>
 8002aa6:	2b10      	cmp	r3, #16
 8002aa8:	d05b      	beq.n	8002b62 <HAL_TIM_ConfigClockSource+0x166>
 8002aaa:	e063      	b.n	8002b74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002abc:	f000 fc42 	bl	8003344 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2277      	movs	r2, #119	@ 0x77
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	609a      	str	r2, [r3, #8]
      break;
 8002ad8:	e052      	b.n	8002b80 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002aea:	f000 fc2b 	bl	8003344 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2180      	movs	r1, #128	@ 0x80
 8002afa:	01c9      	lsls	r1, r1, #7
 8002afc:	430a      	orrs	r2, r1
 8002afe:	609a      	str	r2, [r3, #8]
      break;
 8002b00:	e03e      	b.n	8002b80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b0e:	001a      	movs	r2, r3
 8002b10:	f000 fb9c 	bl	800324c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2150      	movs	r1, #80	@ 0x50
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f000 fbf6 	bl	800330c <TIM_ITRx_SetConfig>
      break;
 8002b20:	e02e      	b.n	8002b80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b2e:	001a      	movs	r2, r3
 8002b30:	f000 fbba 	bl	80032a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2160      	movs	r1, #96	@ 0x60
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f000 fbe6 	bl	800330c <TIM_ITRx_SetConfig>
      break;
 8002b40:	e01e      	b.n	8002b80 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b4e:	001a      	movs	r2, r3
 8002b50:	f000 fb7c 	bl	800324c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2140      	movs	r1, #64	@ 0x40
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f000 fbd6 	bl	800330c <TIM_ITRx_SetConfig>
      break;
 8002b60:	e00e      	b.n	8002b80 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	0010      	movs	r0, r2
 8002b6e:	f000 fbcd 	bl	800330c <TIM_ITRx_SetConfig>
      break;
 8002b72:	e005      	b.n	8002b80 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002b74:	230f      	movs	r3, #15
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	2201      	movs	r2, #1
 8002b7a:	701a      	strb	r2, [r3, #0]
      break;
 8002b7c:	e000      	b.n	8002b80 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002b7e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	223d      	movs	r2, #61	@ 0x3d
 8002b84:	2101      	movs	r1, #1
 8002b86:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	223c      	movs	r2, #60	@ 0x3c
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	5499      	strb	r1, [r3, r2]

  return status;
 8002b90:	230f      	movs	r3, #15
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	781b      	ldrb	r3, [r3, #0]
}
 8002b96:	0018      	movs	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	b004      	add	sp, #16
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			@ (mov r8, r8)
 8002ba0:	ffceff88 	.word	0xffceff88
 8002ba4:	ffff00ff 	.word	0xffff00ff

08002ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a3b      	ldr	r2, [pc, #236]	@ (8002ca8 <TIM_Base_SetConfig+0x100>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d008      	beq.n	8002bd2 <TIM_Base_SetConfig+0x2a>
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	2380      	movs	r3, #128	@ 0x80
 8002bc4:	05db      	lsls	r3, r3, #23
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d003      	beq.n	8002bd2 <TIM_Base_SetConfig+0x2a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a37      	ldr	r2, [pc, #220]	@ (8002cac <TIM_Base_SetConfig+0x104>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d108      	bne.n	8002be4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2270      	movs	r2, #112	@ 0x70
 8002bd6:	4393      	bics	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a30      	ldr	r2, [pc, #192]	@ (8002ca8 <TIM_Base_SetConfig+0x100>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d018      	beq.n	8002c1e <TIM_Base_SetConfig+0x76>
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	2380      	movs	r3, #128	@ 0x80
 8002bf0:	05db      	lsls	r3, r3, #23
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d013      	beq.n	8002c1e <TIM_Base_SetConfig+0x76>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a2c      	ldr	r2, [pc, #176]	@ (8002cac <TIM_Base_SetConfig+0x104>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00f      	beq.n	8002c1e <TIM_Base_SetConfig+0x76>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a2b      	ldr	r2, [pc, #172]	@ (8002cb0 <TIM_Base_SetConfig+0x108>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00b      	beq.n	8002c1e <TIM_Base_SetConfig+0x76>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a2a      	ldr	r2, [pc, #168]	@ (8002cb4 <TIM_Base_SetConfig+0x10c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d007      	beq.n	8002c1e <TIM_Base_SetConfig+0x76>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a29      	ldr	r2, [pc, #164]	@ (8002cb8 <TIM_Base_SetConfig+0x110>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d003      	beq.n	8002c1e <TIM_Base_SetConfig+0x76>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a28      	ldr	r2, [pc, #160]	@ (8002cbc <TIM_Base_SetConfig+0x114>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d108      	bne.n	8002c30 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4a27      	ldr	r2, [pc, #156]	@ (8002cc0 <TIM_Base_SetConfig+0x118>)
 8002c22:	4013      	ands	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2280      	movs	r2, #128	@ 0x80
 8002c34:	4393      	bics	r3, r2
 8002c36:	001a      	movs	r2, r3
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	689a      	ldr	r2, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a13      	ldr	r2, [pc, #76]	@ (8002ca8 <TIM_Base_SetConfig+0x100>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00b      	beq.n	8002c76 <TIM_Base_SetConfig+0xce>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a14      	ldr	r2, [pc, #80]	@ (8002cb4 <TIM_Base_SetConfig+0x10c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d007      	beq.n	8002c76 <TIM_Base_SetConfig+0xce>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a13      	ldr	r2, [pc, #76]	@ (8002cb8 <TIM_Base_SetConfig+0x110>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d003      	beq.n	8002c76 <TIM_Base_SetConfig+0xce>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a12      	ldr	r2, [pc, #72]	@ (8002cbc <TIM_Base_SetConfig+0x114>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d103      	bne.n	8002c7e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d106      	bne.n	8002c9e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2201      	movs	r2, #1
 8002c96:	4393      	bics	r3, r2
 8002c98:	001a      	movs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	611a      	str	r2, [r3, #16]
  }
}
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b004      	add	sp, #16
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	46c0      	nop			@ (mov r8, r8)
 8002ca8:	40012c00 	.word	0x40012c00
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40002000 	.word	0x40002000
 8002cb4:	40014000 	.word	0x40014000
 8002cb8:	40014400 	.word	0x40014400
 8002cbc:	40014800 	.word	0x40014800
 8002cc0:	fffffcff 	.word	0xfffffcff

08002cc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	4393      	bics	r3, r2
 8002cdc:	001a      	movs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4a32      	ldr	r2, [pc, #200]	@ (8002dbc <TIM_OC1_SetConfig+0xf8>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	4393      	bics	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	4393      	bics	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a28      	ldr	r2, [pc, #160]	@ (8002dc0 <TIM_OC1_SetConfig+0xfc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00b      	beq.n	8002d3a <TIM_OC1_SetConfig+0x76>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a27      	ldr	r2, [pc, #156]	@ (8002dc4 <TIM_OC1_SetConfig+0x100>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d007      	beq.n	8002d3a <TIM_OC1_SetConfig+0x76>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a26      	ldr	r2, [pc, #152]	@ (8002dc8 <TIM_OC1_SetConfig+0x104>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d003      	beq.n	8002d3a <TIM_OC1_SetConfig+0x76>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a25      	ldr	r2, [pc, #148]	@ (8002dcc <TIM_OC1_SetConfig+0x108>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d10c      	bne.n	8002d54 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	4393      	bics	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2204      	movs	r2, #4
 8002d50:	4393      	bics	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a1a      	ldr	r2, [pc, #104]	@ (8002dc0 <TIM_OC1_SetConfig+0xfc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d00b      	beq.n	8002d74 <TIM_OC1_SetConfig+0xb0>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a19      	ldr	r2, [pc, #100]	@ (8002dc4 <TIM_OC1_SetConfig+0x100>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d007      	beq.n	8002d74 <TIM_OC1_SetConfig+0xb0>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a18      	ldr	r2, [pc, #96]	@ (8002dc8 <TIM_OC1_SetConfig+0x104>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d003      	beq.n	8002d74 <TIM_OC1_SetConfig+0xb0>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a17      	ldr	r2, [pc, #92]	@ (8002dcc <TIM_OC1_SetConfig+0x108>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d111      	bne.n	8002d98 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4a16      	ldr	r2, [pc, #88]	@ (8002dd0 <TIM_OC1_SetConfig+0x10c>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4a15      	ldr	r2, [pc, #84]	@ (8002dd4 <TIM_OC1_SetConfig+0x110>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	621a      	str	r2, [r3, #32]
}
 8002db2:	46c0      	nop			@ (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b006      	add	sp, #24
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	fffeff8f 	.word	0xfffeff8f
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40014000 	.word	0x40014000
 8002dc8:	40014400 	.word	0x40014400
 8002dcc:	40014800 	.word	0x40014800
 8002dd0:	fffffeff 	.word	0xfffffeff
 8002dd4:	fffffdff 	.word	0xfffffdff

08002dd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	2210      	movs	r2, #16
 8002dee:	4393      	bics	r3, r2
 8002df0:	001a      	movs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4a2e      	ldr	r2, [pc, #184]	@ (8002ec0 <TIM_OC2_SetConfig+0xe8>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ec4 <TIM_OC2_SetConfig+0xec>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2220      	movs	r2, #32
 8002e22:	4393      	bics	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a24      	ldr	r2, [pc, #144]	@ (8002ec8 <TIM_OC2_SetConfig+0xf0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d10d      	bne.n	8002e56 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2280      	movs	r2, #128	@ 0x80
 8002e3e:	4393      	bics	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2240      	movs	r2, #64	@ 0x40
 8002e52:	4393      	bics	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a1b      	ldr	r2, [pc, #108]	@ (8002ec8 <TIM_OC2_SetConfig+0xf0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00b      	beq.n	8002e76 <TIM_OC2_SetConfig+0x9e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a1a      	ldr	r2, [pc, #104]	@ (8002ecc <TIM_OC2_SetConfig+0xf4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <TIM_OC2_SetConfig+0x9e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a19      	ldr	r2, [pc, #100]	@ (8002ed0 <TIM_OC2_SetConfig+0xf8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d003      	beq.n	8002e76 <TIM_OC2_SetConfig+0x9e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a18      	ldr	r2, [pc, #96]	@ (8002ed4 <TIM_OC2_SetConfig+0xfc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d113      	bne.n	8002e9e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4a17      	ldr	r2, [pc, #92]	@ (8002ed8 <TIM_OC2_SetConfig+0x100>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	4a16      	ldr	r2, [pc, #88]	@ (8002edc <TIM_OC2_SetConfig+0x104>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	621a      	str	r2, [r3, #32]
}
 8002eb8:	46c0      	nop			@ (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b006      	add	sp, #24
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	feff8fff 	.word	0xfeff8fff
 8002ec4:	fffffcff 	.word	0xfffffcff
 8002ec8:	40012c00 	.word	0x40012c00
 8002ecc:	40014000 	.word	0x40014000
 8002ed0:	40014400 	.word	0x40014400
 8002ed4:	40014800 	.word	0x40014800
 8002ed8:	fffffbff 	.word	0xfffffbff
 8002edc:	fffff7ff 	.word	0xfffff7ff

08002ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4a33      	ldr	r2, [pc, #204]	@ (8002fc4 <TIM_OC3_SetConfig+0xe4>)
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8002fc8 <TIM_OC3_SetConfig+0xe8>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2203      	movs	r2, #3
 8002f14:	4393      	bics	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	4a29      	ldr	r2, [pc, #164]	@ (8002fcc <TIM_OC3_SetConfig+0xec>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	021b      	lsls	r3, r3, #8
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a25      	ldr	r2, [pc, #148]	@ (8002fd0 <TIM_OC3_SetConfig+0xf0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d10d      	bne.n	8002f5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	4a24      	ldr	r2, [pc, #144]	@ (8002fd4 <TIM_OC3_SetConfig+0xf4>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	021b      	lsls	r3, r3, #8
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	4a20      	ldr	r2, [pc, #128]	@ (8002fd8 <TIM_OC3_SetConfig+0xf8>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd0 <TIM_OC3_SetConfig+0xf0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00b      	beq.n	8002f7a <TIM_OC3_SetConfig+0x9a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a1d      	ldr	r2, [pc, #116]	@ (8002fdc <TIM_OC3_SetConfig+0xfc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d007      	beq.n	8002f7a <TIM_OC3_SetConfig+0x9a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe0 <TIM_OC3_SetConfig+0x100>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d003      	beq.n	8002f7a <TIM_OC3_SetConfig+0x9a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe4 <TIM_OC3_SetConfig+0x104>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d113      	bne.n	8002fa2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4a1a      	ldr	r2, [pc, #104]	@ (8002fe8 <TIM_OC3_SetConfig+0x108>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4a19      	ldr	r2, [pc, #100]	@ (8002fec <TIM_OC3_SetConfig+0x10c>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	621a      	str	r2, [r3, #32]
}
 8002fbc:	46c0      	nop			@ (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b006      	add	sp, #24
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	fffffeff 	.word	0xfffffeff
 8002fc8:	fffeff8f 	.word	0xfffeff8f
 8002fcc:	fffffdff 	.word	0xfffffdff
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	fffff7ff 	.word	0xfffff7ff
 8002fd8:	fffffbff 	.word	0xfffffbff
 8002fdc:	40014000 	.word	0x40014000
 8002fe0:	40014400 	.word	0x40014400
 8002fe4:	40014800 	.word	0x40014800
 8002fe8:	ffffefff 	.word	0xffffefff
 8002fec:	ffffdfff 	.word	0xffffdfff

08002ff0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	4a26      	ldr	r2, [pc, #152]	@ (80030a0 <TIM_OC4_SetConfig+0xb0>)
 8003006:	401a      	ands	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4a22      	ldr	r2, [pc, #136]	@ (80030a4 <TIM_OC4_SetConfig+0xb4>)
 800301c:	4013      	ands	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a21      	ldr	r2, [pc, #132]	@ (80030a8 <TIM_OC4_SetConfig+0xb8>)
 8003024:	4013      	ands	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	4313      	orrs	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4a1d      	ldr	r2, [pc, #116]	@ (80030ac <TIM_OC4_SetConfig+0xbc>)
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	031b      	lsls	r3, r3, #12
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a19      	ldr	r2, [pc, #100]	@ (80030b0 <TIM_OC4_SetConfig+0xc0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00b      	beq.n	8003068 <TIM_OC4_SetConfig+0x78>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a18      	ldr	r2, [pc, #96]	@ (80030b4 <TIM_OC4_SetConfig+0xc4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d007      	beq.n	8003068 <TIM_OC4_SetConfig+0x78>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a17      	ldr	r2, [pc, #92]	@ (80030b8 <TIM_OC4_SetConfig+0xc8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d003      	beq.n	8003068 <TIM_OC4_SetConfig+0x78>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a16      	ldr	r2, [pc, #88]	@ (80030bc <TIM_OC4_SetConfig+0xcc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d109      	bne.n	800307c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	4a15      	ldr	r2, [pc, #84]	@ (80030c0 <TIM_OC4_SetConfig+0xd0>)
 800306c:	4013      	ands	r3, r2
 800306e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	019b      	lsls	r3, r3, #6
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	621a      	str	r2, [r3, #32]
}
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	b006      	add	sp, #24
 800309c:	bd80      	pop	{r7, pc}
 800309e:	46c0      	nop			@ (mov r8, r8)
 80030a0:	ffffefff 	.word	0xffffefff
 80030a4:	feff8fff 	.word	0xfeff8fff
 80030a8:	fffffcff 	.word	0xfffffcff
 80030ac:	ffffdfff 	.word	0xffffdfff
 80030b0:	40012c00 	.word	0x40012c00
 80030b4:	40014000 	.word	0x40014000
 80030b8:	40014400 	.word	0x40014400
 80030bc:	40014800 	.word	0x40014800
 80030c0:	ffffbfff 	.word	0xffffbfff

080030c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4a23      	ldr	r2, [pc, #140]	@ (8003168 <TIM_OC5_SetConfig+0xa4>)
 80030da:	401a      	ands	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a1f      	ldr	r2, [pc, #124]	@ (800316c <TIM_OC5_SetConfig+0xa8>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4a1b      	ldr	r2, [pc, #108]	@ (8003170 <TIM_OC5_SetConfig+0xac>)
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	041b      	lsls	r3, r3, #16
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a17      	ldr	r2, [pc, #92]	@ (8003174 <TIM_OC5_SetConfig+0xb0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00b      	beq.n	8003132 <TIM_OC5_SetConfig+0x6e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a16      	ldr	r2, [pc, #88]	@ (8003178 <TIM_OC5_SetConfig+0xb4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d007      	beq.n	8003132 <TIM_OC5_SetConfig+0x6e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a15      	ldr	r2, [pc, #84]	@ (800317c <TIM_OC5_SetConfig+0xb8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d003      	beq.n	8003132 <TIM_OC5_SetConfig+0x6e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a14      	ldr	r2, [pc, #80]	@ (8003180 <TIM_OC5_SetConfig+0xbc>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d109      	bne.n	8003146 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	4a0c      	ldr	r2, [pc, #48]	@ (8003168 <TIM_OC5_SetConfig+0xa4>)
 8003136:	4013      	ands	r3, r2
 8003138:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	621a      	str	r2, [r3, #32]
}
 8003160:	46c0      	nop			@ (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	b006      	add	sp, #24
 8003166:	bd80      	pop	{r7, pc}
 8003168:	fffeffff 	.word	0xfffeffff
 800316c:	fffeff8f 	.word	0xfffeff8f
 8003170:	fffdffff 	.word	0xfffdffff
 8003174:	40012c00 	.word	0x40012c00
 8003178:	40014000 	.word	0x40014000
 800317c:	40014400 	.word	0x40014400
 8003180:	40014800 	.word	0x40014800

08003184 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	4a24      	ldr	r2, [pc, #144]	@ (800322c <TIM_OC6_SetConfig+0xa8>)
 800319a:	401a      	ands	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4a20      	ldr	r2, [pc, #128]	@ (8003230 <TIM_OC6_SetConfig+0xac>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	021b      	lsls	r3, r3, #8
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003234 <TIM_OC6_SetConfig+0xb0>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	051b      	lsls	r3, r3, #20
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a18      	ldr	r2, [pc, #96]	@ (8003238 <TIM_OC6_SetConfig+0xb4>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00b      	beq.n	80031f4 <TIM_OC6_SetConfig+0x70>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a17      	ldr	r2, [pc, #92]	@ (800323c <TIM_OC6_SetConfig+0xb8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d007      	beq.n	80031f4 <TIM_OC6_SetConfig+0x70>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a16      	ldr	r2, [pc, #88]	@ (8003240 <TIM_OC6_SetConfig+0xbc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <TIM_OC6_SetConfig+0x70>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a15      	ldr	r2, [pc, #84]	@ (8003244 <TIM_OC6_SetConfig+0xc0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d109      	bne.n	8003208 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	4a14      	ldr	r2, [pc, #80]	@ (8003248 <TIM_OC6_SetConfig+0xc4>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	029b      	lsls	r3, r3, #10
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	621a      	str	r2, [r3, #32]
}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b006      	add	sp, #24
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			@ (mov r8, r8)
 800322c:	ffefffff 	.word	0xffefffff
 8003230:	feff8fff 	.word	0xfeff8fff
 8003234:	ffdfffff 	.word	0xffdfffff
 8003238:	40012c00 	.word	0x40012c00
 800323c:	40014000 	.word	0x40014000
 8003240:	40014400 	.word	0x40014400
 8003244:	40014800 	.word	0x40014800
 8003248:	fffbffff 	.word	0xfffbffff

0800324c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	2201      	movs	r2, #1
 8003264:	4393      	bics	r3, r2
 8003266:	001a      	movs	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	22f0      	movs	r2, #240	@ 0xf0
 8003276:	4393      	bics	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	220a      	movs	r2, #10
 8003288:	4393      	bics	r3, r2
 800328a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	621a      	str	r2, [r3, #32]
}
 80032a0:	46c0      	nop			@ (mov r8, r8)
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b006      	add	sp, #24
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	2210      	movs	r2, #16
 80032c0:	4393      	bics	r3, r2
 80032c2:	001a      	movs	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003308 <TIM_TI2_ConfigInputStage+0x60>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	031b      	lsls	r3, r3, #12
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	22a0      	movs	r2, #160	@ 0xa0
 80032e4:	4393      	bics	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	621a      	str	r2, [r3, #32]
}
 80032fe:	46c0      	nop			@ (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b006      	add	sp, #24
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	ffff0fff 	.word	0xffff0fff

0800330c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a08      	ldr	r2, [pc, #32]	@ (8003340 <TIM_ITRx_SetConfig+0x34>)
 8003320:	4013      	ands	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	2207      	movs	r2, #7
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	609a      	str	r2, [r3, #8]
}
 8003336:	46c0      	nop			@ (mov r8, r8)
 8003338:	46bd      	mov	sp, r7
 800333a:	b004      	add	sp, #16
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	ffcfff8f 	.word	0xffcfff8f

08003344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	4a09      	ldr	r2, [pc, #36]	@ (8003380 <TIM_ETR_SetConfig+0x3c>)
 800335c:	4013      	ands	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	021a      	lsls	r2, r3, #8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	431a      	orrs	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4313      	orrs	r3, r2
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4313      	orrs	r3, r2
 8003370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	609a      	str	r2, [r3, #8]
}
 8003378:	46c0      	nop			@ (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b006      	add	sp, #24
 800337e:	bd80      	pop	{r7, pc}
 8003380:	ffff00ff 	.word	0xffff00ff

08003384 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	221f      	movs	r2, #31
 8003394:	4013      	ands	r3, r2
 8003396:	2201      	movs	r2, #1
 8003398:	409a      	lsls	r2, r3
 800339a:	0013      	movs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	43d2      	mvns	r2, r2
 80033a6:	401a      	ands	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a1a      	ldr	r2, [r3, #32]
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	211f      	movs	r1, #31
 80033b4:	400b      	ands	r3, r1
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4099      	lsls	r1, r3
 80033ba:	000b      	movs	r3, r1
 80033bc:	431a      	orrs	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	46c0      	nop			@ (mov r8, r8)
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b006      	add	sp, #24
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	223c      	movs	r2, #60	@ 0x3c
 80033da:	5c9b      	ldrb	r3, [r3, r2]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e055      	b.n	8003490 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	223c      	movs	r2, #60	@ 0x3c
 80033e8:	2101      	movs	r1, #1
 80033ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	223d      	movs	r2, #61	@ 0x3d
 80033f0:	2102      	movs	r1, #2
 80033f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a23      	ldr	r2, [pc, #140]	@ (8003498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d108      	bne.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a22      	ldr	r2, [pc, #136]	@ (800349c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003412:	4013      	ands	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2270      	movs	r2, #112	@ 0x70
 8003424:	4393      	bics	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a16      	ldr	r2, [pc, #88]	@ (8003498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00f      	beq.n	8003464 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	2380      	movs	r3, #128	@ 0x80
 800344a:	05db      	lsls	r3, r3, #23
 800344c:	429a      	cmp	r2, r3
 800344e:	d009      	beq.n	8003464 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a12      	ldr	r2, [pc, #72]	@ (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a11      	ldr	r2, [pc, #68]	@ (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d10c      	bne.n	800347e <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2280      	movs	r2, #128	@ 0x80
 8003468:	4393      	bics	r3, r2
 800346a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	4313      	orrs	r3, r2
 8003474:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	223d      	movs	r2, #61	@ 0x3d
 8003482:	2101      	movs	r1, #1
 8003484:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	223c      	movs	r2, #60	@ 0x3c
 800348a:	2100      	movs	r1, #0
 800348c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	0018      	movs	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	b004      	add	sp, #16
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40012c00 	.word	0x40012c00
 800349c:	ff0fffff 	.word	0xff0fffff
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40014000 	.word	0x40014000

080034a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	223c      	movs	r2, #60	@ 0x3c
 80034ba:	5c9b      	ldrb	r3, [r3, r2]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e06f      	b.n	80035a4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	223c      	movs	r2, #60	@ 0x3c
 80034c8:	2101      	movs	r1, #1
 80034ca:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	22ff      	movs	r2, #255	@ 0xff
 80034d0:	4393      	bics	r3, r2
 80034d2:	001a      	movs	r2, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4a33      	ldr	r2, [pc, #204]	@ (80035ac <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80034e0:	401a      	ands	r2, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4a30      	ldr	r2, [pc, #192]	@ (80035b0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80034ee:	401a      	ands	r2, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4a2e      	ldr	r2, [pc, #184]	@ (80035b4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80034fc:	401a      	ands	r2, r3
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a2b      	ldr	r2, [pc, #172]	@ (80035b8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800350a:	401a      	ands	r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a29      	ldr	r2, [pc, #164]	@ (80035bc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003518:	401a      	ands	r2, r3
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	4313      	orrs	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4a26      	ldr	r2, [pc, #152]	@ (80035c0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003526:	401a      	ands	r2, r3
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4a24      	ldr	r2, [pc, #144]	@ (80035c4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003534:	401a      	ands	r2, r3
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	041b      	lsls	r3, r3, #16
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4a21      	ldr	r2, [pc, #132]	@ (80035c8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003544:	401a      	ands	r2, r3
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1e      	ldr	r2, [pc, #120]	@ (80035cc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d11c      	bne.n	8003592 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4a1d      	ldr	r2, [pc, #116]	@ (80035d0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800355c:	401a      	ands	r2, r3
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003562:	051b      	lsls	r3, r3, #20
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a1a      	ldr	r2, [pc, #104]	@ (80035d4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800356c:	401a      	ands	r2, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4a17      	ldr	r2, [pc, #92]	@ (80035d8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800357a:	401a      	ands	r2, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4a15      	ldr	r2, [pc, #84]	@ (80035dc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003588:	401a      	ands	r2, r3
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	223c      	movs	r2, #60	@ 0x3c
 800359e:	2100      	movs	r1, #0
 80035a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	0018      	movs	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b004      	add	sp, #16
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	fffffcff 	.word	0xfffffcff
 80035b0:	fffffbff 	.word	0xfffffbff
 80035b4:	fffff7ff 	.word	0xfffff7ff
 80035b8:	ffffefff 	.word	0xffffefff
 80035bc:	ffffdfff 	.word	0xffffdfff
 80035c0:	ffffbfff 	.word	0xffffbfff
 80035c4:	fff0ffff 	.word	0xfff0ffff
 80035c8:	efffffff 	.word	0xefffffff
 80035cc:	40012c00 	.word	0x40012c00
 80035d0:	ff0fffff 	.word	0xff0fffff
 80035d4:	feffffff 	.word	0xfeffffff
 80035d8:	fdffffff 	.word	0xfdffffff
 80035dc:	dfffffff 	.word	0xdfffffff

080035e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e046      	b.n	8003680 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2288      	movs	r2, #136	@ 0x88
 80035f6:	589b      	ldr	r3, [r3, r2]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d107      	bne.n	800360c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2284      	movs	r2, #132	@ 0x84
 8003600:	2100      	movs	r1, #0
 8003602:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	0018      	movs	r0, r3
 8003608:	f7fd fc1c 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2288      	movs	r2, #136	@ 0x88
 8003610:	2124      	movs	r1, #36	@ 0x24
 8003612:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2101      	movs	r1, #1
 8003620:	438a      	bics	r2, r1
 8003622:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	0018      	movs	r0, r3
 8003630:	f000 ff2e 	bl	8004490 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	0018      	movs	r0, r3
 8003638:	f000 fc6c 	bl	8003f14 <UART_SetConfig>
 800363c:	0003      	movs	r3, r0
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e01c      	b.n	8003680 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	490d      	ldr	r1, [pc, #52]	@ (8003688 <HAL_UART_Init+0xa8>)
 8003652:	400a      	ands	r2, r1
 8003654:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	212a      	movs	r1, #42	@ 0x2a
 8003662:	438a      	bics	r2, r1
 8003664:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2101      	movs	r1, #1
 8003672:	430a      	orrs	r2, r1
 8003674:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	0018      	movs	r0, r3
 800367a:	f000 ffbd 	bl	80045f8 <UART_CheckIdleState>
 800367e:	0003      	movs	r3, r0
}
 8003680:	0018      	movs	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	b002      	add	sp, #8
 8003686:	bd80      	pop	{r7, pc}
 8003688:	ffffb7ff 	.word	0xffffb7ff

0800368c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	@ 0x28
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	1dbb      	adds	r3, r7, #6
 800369a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2288      	movs	r2, #136	@ 0x88
 80036a0:	589b      	ldr	r3, [r3, r2]
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d000      	beq.n	80036a8 <HAL_UART_Transmit+0x1c>
 80036a6:	e090      	b.n	80037ca <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_UART_Transmit+0x2a>
 80036ae:	1dbb      	adds	r3, r7, #6
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e088      	b.n	80037cc <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	2380      	movs	r3, #128	@ 0x80
 80036c0:	015b      	lsls	r3, r3, #5
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d109      	bne.n	80036da <HAL_UART_Transmit+0x4e>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d105      	bne.n	80036da <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2201      	movs	r2, #1
 80036d2:	4013      	ands	r3, r2
 80036d4:	d001      	beq.n	80036da <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e078      	b.n	80037cc <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2290      	movs	r2, #144	@ 0x90
 80036de:	2100      	movs	r1, #0
 80036e0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2288      	movs	r2, #136	@ 0x88
 80036e6:	2121      	movs	r1, #33	@ 0x21
 80036e8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ea:	f7fd fce7 	bl	80010bc <HAL_GetTick>
 80036ee:	0003      	movs	r3, r0
 80036f0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1dba      	adds	r2, r7, #6
 80036f6:	2154      	movs	r1, #84	@ 0x54
 80036f8:	8812      	ldrh	r2, [r2, #0]
 80036fa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1dba      	adds	r2, r7, #6
 8003700:	2156      	movs	r1, #86	@ 0x56
 8003702:	8812      	ldrh	r2, [r2, #0]
 8003704:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	2380      	movs	r3, #128	@ 0x80
 800370c:	015b      	lsls	r3, r3, #5
 800370e:	429a      	cmp	r2, r3
 8003710:	d108      	bne.n	8003724 <HAL_UART_Transmit+0x98>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d104      	bne.n	8003724 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	e003      	b.n	800372c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003728:	2300      	movs	r3, #0
 800372a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800372c:	e030      	b.n	8003790 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	0013      	movs	r3, r2
 8003738:	2200      	movs	r2, #0
 800373a:	2180      	movs	r1, #128	@ 0x80
 800373c:	f001 f806 	bl	800474c <UART_WaitOnFlagUntilTimeout>
 8003740:	1e03      	subs	r3, r0, #0
 8003742:	d005      	beq.n	8003750 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2288      	movs	r2, #136	@ 0x88
 8003748:	2120      	movs	r1, #32
 800374a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e03d      	b.n	80037cc <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10b      	bne.n	800376e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	001a      	movs	r2, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	05d2      	lsls	r2, r2, #23
 8003762:	0dd2      	lsrs	r2, r2, #23
 8003764:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	3302      	adds	r3, #2
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	e007      	b.n	800377e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	781a      	ldrb	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	3301      	adds	r3, #1
 800377c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2256      	movs	r2, #86	@ 0x56
 8003782:	5a9b      	ldrh	r3, [r3, r2]
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b299      	uxth	r1, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2256      	movs	r2, #86	@ 0x56
 800378e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2256      	movs	r2, #86	@ 0x56
 8003794:	5a9b      	ldrh	r3, [r3, r2]
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1c8      	bne.n	800372e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	0013      	movs	r3, r2
 80037a6:	2200      	movs	r2, #0
 80037a8:	2140      	movs	r1, #64	@ 0x40
 80037aa:	f000 ffcf 	bl	800474c <UART_WaitOnFlagUntilTimeout>
 80037ae:	1e03      	subs	r3, r0, #0
 80037b0:	d005      	beq.n	80037be <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2288      	movs	r2, #136	@ 0x88
 80037b6:	2120      	movs	r1, #32
 80037b8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e006      	b.n	80037cc <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2288      	movs	r2, #136	@ 0x88
 80037c2:	2120      	movs	r1, #32
 80037c4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e000      	b.n	80037cc <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80037ca:	2302      	movs	r3, #2
  }
}
 80037cc:	0018      	movs	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b008      	add	sp, #32
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	1dbb      	adds	r3, r7, #6
 80037e0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	228c      	movs	r2, #140	@ 0x8c
 80037e6:	589b      	ldr	r3, [r3, r2]
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d14a      	bne.n	8003882 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_UART_Receive_IT+0x26>
 80037f2:	1dbb      	adds	r3, r7, #6
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e042      	b.n	8003884 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	2380      	movs	r3, #128	@ 0x80
 8003804:	015b      	lsls	r3, r3, #5
 8003806:	429a      	cmp	r2, r3
 8003808:	d109      	bne.n	800381e <HAL_UART_Receive_IT+0x4a>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d105      	bne.n	800381e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2201      	movs	r2, #1
 8003816:	4013      	ands	r3, r2
 8003818:	d001      	beq.n	800381e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e032      	b.n	8003884 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a18      	ldr	r2, [pc, #96]	@ (800388c <HAL_UART_Receive_IT+0xb8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d020      	beq.n	8003870 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	2380      	movs	r3, #128	@ 0x80
 8003836:	041b      	lsls	r3, r3, #16
 8003838:	4013      	ands	r3, r2
 800383a:	d019      	beq.n	8003870 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800383c:	f3ef 8310 	mrs	r3, PRIMASK
 8003840:	613b      	str	r3, [r7, #16]
  return(result);
 8003842:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	2301      	movs	r3, #1
 8003848:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f383 8810 	msr	PRIMASK, r3
}
 8003850:	46c0      	nop			@ (mov r8, r8)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2180      	movs	r1, #128	@ 0x80
 800385e:	04c9      	lsls	r1, r1, #19
 8003860:	430a      	orrs	r2, r1
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	f383 8810 	msr	PRIMASK, r3
}
 800386e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003870:	1dbb      	adds	r3, r7, #6
 8003872:	881a      	ldrh	r2, [r3, #0]
 8003874:	68b9      	ldr	r1, [r7, #8]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	0018      	movs	r0, r3
 800387a:	f000 ffd7 	bl	800482c <UART_Start_Receive_IT>
 800387e:	0003      	movs	r3, r0
 8003880:	e000      	b.n	8003884 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8003882:	2302      	movs	r3, #2
  }
}
 8003884:	0018      	movs	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	b008      	add	sp, #32
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40008000 	.word	0x40008000

08003890 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003890:	b5b0      	push	{r4, r5, r7, lr}
 8003892:	b0aa      	sub	sp, #168	@ 0xa8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	22a4      	movs	r2, #164	@ 0xa4
 80038a0:	18b9      	adds	r1, r7, r2
 80038a2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	20a0      	movs	r0, #160	@ 0xa0
 80038ac:	1839      	adds	r1, r7, r0
 80038ae:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	249c      	movs	r4, #156	@ 0x9c
 80038b8:	1939      	adds	r1, r7, r4
 80038ba:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038bc:	0011      	movs	r1, r2
 80038be:	18bb      	adds	r3, r7, r2
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4aa2      	ldr	r2, [pc, #648]	@ (8003b4c <HAL_UART_IRQHandler+0x2bc>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	2298      	movs	r2, #152	@ 0x98
 80038c8:	18bd      	adds	r5, r7, r2
 80038ca:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80038cc:	18bb      	adds	r3, r7, r2
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d11a      	bne.n	800390a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2220      	movs	r2, #32
 80038da:	4013      	ands	r3, r2
 80038dc:	d015      	beq.n	800390a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80038de:	183b      	adds	r3, r7, r0
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2220      	movs	r2, #32
 80038e4:	4013      	ands	r3, r2
 80038e6:	d105      	bne.n	80038f4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80038e8:	193b      	adds	r3, r7, r4
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	2380      	movs	r3, #128	@ 0x80
 80038ee:	055b      	lsls	r3, r3, #21
 80038f0:	4013      	ands	r3, r2
 80038f2:	d00a      	beq.n	800390a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d100      	bne.n	80038fe <HAL_UART_IRQHandler+0x6e>
 80038fc:	e2dc      	b.n	8003eb8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	0010      	movs	r0, r2
 8003906:	4798      	blx	r3
      }
      return;
 8003908:	e2d6      	b.n	8003eb8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800390a:	2398      	movs	r3, #152	@ 0x98
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d100      	bne.n	8003916 <HAL_UART_IRQHandler+0x86>
 8003914:	e122      	b.n	8003b5c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003916:	239c      	movs	r3, #156	@ 0x9c
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a8c      	ldr	r2, [pc, #560]	@ (8003b50 <HAL_UART_IRQHandler+0x2c0>)
 800391e:	4013      	ands	r3, r2
 8003920:	d106      	bne.n	8003930 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003922:	23a0      	movs	r3, #160	@ 0xa0
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a8a      	ldr	r2, [pc, #552]	@ (8003b54 <HAL_UART_IRQHandler+0x2c4>)
 800392a:	4013      	ands	r3, r2
 800392c:	d100      	bne.n	8003930 <HAL_UART_IRQHandler+0xa0>
 800392e:	e115      	b.n	8003b5c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003930:	23a4      	movs	r3, #164	@ 0xa4
 8003932:	18fb      	adds	r3, r7, r3
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2201      	movs	r2, #1
 8003938:	4013      	ands	r3, r2
 800393a:	d012      	beq.n	8003962 <HAL_UART_IRQHandler+0xd2>
 800393c:	23a0      	movs	r3, #160	@ 0xa0
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	2380      	movs	r3, #128	@ 0x80
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	4013      	ands	r3, r2
 8003948:	d00b      	beq.n	8003962 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2201      	movs	r2, #1
 8003950:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2290      	movs	r2, #144	@ 0x90
 8003956:	589b      	ldr	r3, [r3, r2]
 8003958:	2201      	movs	r2, #1
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2190      	movs	r1, #144	@ 0x90
 8003960:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003962:	23a4      	movs	r3, #164	@ 0xa4
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2202      	movs	r2, #2
 800396a:	4013      	ands	r3, r2
 800396c:	d011      	beq.n	8003992 <HAL_UART_IRQHandler+0x102>
 800396e:	239c      	movs	r3, #156	@ 0x9c
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2201      	movs	r2, #1
 8003976:	4013      	ands	r3, r2
 8003978:	d00b      	beq.n	8003992 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2202      	movs	r2, #2
 8003980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2290      	movs	r2, #144	@ 0x90
 8003986:	589b      	ldr	r3, [r3, r2]
 8003988:	2204      	movs	r2, #4
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2190      	movs	r1, #144	@ 0x90
 8003990:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003992:	23a4      	movs	r3, #164	@ 0xa4
 8003994:	18fb      	adds	r3, r7, r3
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2204      	movs	r2, #4
 800399a:	4013      	ands	r3, r2
 800399c:	d011      	beq.n	80039c2 <HAL_UART_IRQHandler+0x132>
 800399e:	239c      	movs	r3, #156	@ 0x9c
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2201      	movs	r2, #1
 80039a6:	4013      	ands	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2204      	movs	r2, #4
 80039b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2290      	movs	r2, #144	@ 0x90
 80039b6:	589b      	ldr	r3, [r3, r2]
 80039b8:	2202      	movs	r2, #2
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2190      	movs	r1, #144	@ 0x90
 80039c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039c2:	23a4      	movs	r3, #164	@ 0xa4
 80039c4:	18fb      	adds	r3, r7, r3
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2208      	movs	r2, #8
 80039ca:	4013      	ands	r3, r2
 80039cc:	d017      	beq.n	80039fe <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039ce:	23a0      	movs	r3, #160	@ 0xa0
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2220      	movs	r2, #32
 80039d6:	4013      	ands	r3, r2
 80039d8:	d105      	bne.n	80039e6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80039da:	239c      	movs	r3, #156	@ 0x9c
 80039dc:	18fb      	adds	r3, r7, r3
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a5b      	ldr	r2, [pc, #364]	@ (8003b50 <HAL_UART_IRQHandler+0x2c0>)
 80039e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039e4:	d00b      	beq.n	80039fe <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2208      	movs	r2, #8
 80039ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2290      	movs	r2, #144	@ 0x90
 80039f2:	589b      	ldr	r3, [r3, r2]
 80039f4:	2208      	movs	r2, #8
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2190      	movs	r1, #144	@ 0x90
 80039fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80039fe:	23a4      	movs	r3, #164	@ 0xa4
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	2380      	movs	r3, #128	@ 0x80
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d013      	beq.n	8003a34 <HAL_UART_IRQHandler+0x1a4>
 8003a0c:	23a0      	movs	r3, #160	@ 0xa0
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	2380      	movs	r3, #128	@ 0x80
 8003a14:	04db      	lsls	r3, r3, #19
 8003a16:	4013      	ands	r3, r2
 8003a18:	d00c      	beq.n	8003a34 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2280      	movs	r2, #128	@ 0x80
 8003a20:	0112      	lsls	r2, r2, #4
 8003a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2290      	movs	r2, #144	@ 0x90
 8003a28:	589b      	ldr	r3, [r3, r2]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2190      	movs	r1, #144	@ 0x90
 8003a32:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2290      	movs	r2, #144	@ 0x90
 8003a38:	589b      	ldr	r3, [r3, r2]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d100      	bne.n	8003a40 <HAL_UART_IRQHandler+0x1b0>
 8003a3e:	e23d      	b.n	8003ebc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a40:	23a4      	movs	r3, #164	@ 0xa4
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2220      	movs	r2, #32
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d015      	beq.n	8003a78 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a4c:	23a0      	movs	r3, #160	@ 0xa0
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2220      	movs	r2, #32
 8003a54:	4013      	ands	r3, r2
 8003a56:	d106      	bne.n	8003a66 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a58:	239c      	movs	r3, #156	@ 0x9c
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	2380      	movs	r3, #128	@ 0x80
 8003a60:	055b      	lsls	r3, r3, #21
 8003a62:	4013      	ands	r3, r2
 8003a64:	d008      	beq.n	8003a78 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d004      	beq.n	8003a78 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	0010      	movs	r0, r2
 8003a76:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2290      	movs	r2, #144	@ 0x90
 8003a7c:	589b      	ldr	r3, [r3, r2]
 8003a7e:	2194      	movs	r1, #148	@ 0x94
 8003a80:	187a      	adds	r2, r7, r1
 8003a82:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2240      	movs	r2, #64	@ 0x40
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	2b40      	cmp	r3, #64	@ 0x40
 8003a90:	d004      	beq.n	8003a9c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a92:	187b      	adds	r3, r7, r1
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2228      	movs	r2, #40	@ 0x28
 8003a98:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a9a:	d04c      	beq.n	8003b36 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f000 ffe8 	bl	8004a74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2240      	movs	r2, #64	@ 0x40
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b40      	cmp	r3, #64	@ 0x40
 8003ab0:	d13c      	bne.n	8003b2c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ab6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003ab8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aba:	2090      	movs	r0, #144	@ 0x90
 8003abc:	183a      	adds	r2, r7, r0
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ac6:	f383 8810 	msr	PRIMASK, r3
}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2140      	movs	r1, #64	@ 0x40
 8003ad8:	438a      	bics	r2, r1
 8003ada:	609a      	str	r2, [r3, #8]
 8003adc:	183b      	adds	r3, r7, r0
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ae4:	f383 8810 	msr	PRIMASK, r3
}
 8003ae8:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2280      	movs	r2, #128	@ 0x80
 8003aee:	589b      	ldr	r3, [r3, r2]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d016      	beq.n	8003b22 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2280      	movs	r2, #128	@ 0x80
 8003af8:	589b      	ldr	r3, [r3, r2]
 8003afa:	4a17      	ldr	r2, [pc, #92]	@ (8003b58 <HAL_UART_IRQHandler+0x2c8>)
 8003afc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2280      	movs	r2, #128	@ 0x80
 8003b02:	589b      	ldr	r3, [r3, r2]
 8003b04:	0018      	movs	r0, r3
 8003b06:	f7fd fc23 	bl	8001350 <HAL_DMA_Abort_IT>
 8003b0a:	1e03      	subs	r3, r0, #0
 8003b0c:	d01c      	beq.n	8003b48 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2280      	movs	r2, #128	@ 0x80
 8003b12:	589b      	ldr	r3, [r3, r2]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	2180      	movs	r1, #128	@ 0x80
 8003b1a:	5852      	ldr	r2, [r2, r1]
 8003b1c:	0010      	movs	r0, r2
 8003b1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b20:	e012      	b.n	8003b48 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	0018      	movs	r0, r3
 8003b26:	f000 f9e1 	bl	8003eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2a:	e00d      	b.n	8003b48 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f000 f9dc 	bl	8003eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	e008      	b.n	8003b48 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f000 f9d7 	bl	8003eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2290      	movs	r2, #144	@ 0x90
 8003b42:	2100      	movs	r1, #0
 8003b44:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003b46:	e1b9      	b.n	8003ebc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	46c0      	nop			@ (mov r8, r8)
    return;
 8003b4a:	e1b7      	b.n	8003ebc <HAL_UART_IRQHandler+0x62c>
 8003b4c:	0000080f 	.word	0x0000080f
 8003b50:	10000001 	.word	0x10000001
 8003b54:	04000120 	.word	0x04000120
 8003b58:	08004b41 	.word	0x08004b41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d000      	beq.n	8003b66 <HAL_UART_IRQHandler+0x2d6>
 8003b64:	e13e      	b.n	8003de4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b66:	23a4      	movs	r3, #164	@ 0xa4
 8003b68:	18fb      	adds	r3, r7, r3
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d100      	bne.n	8003b74 <HAL_UART_IRQHandler+0x2e4>
 8003b72:	e137      	b.n	8003de4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b74:	23a0      	movs	r3, #160	@ 0xa0
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2210      	movs	r2, #16
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d100      	bne.n	8003b82 <HAL_UART_IRQHandler+0x2f2>
 8003b80:	e130      	b.n	8003de4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2210      	movs	r2, #16
 8003b88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2240      	movs	r2, #64	@ 0x40
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b40      	cmp	r3, #64	@ 0x40
 8003b96:	d000      	beq.n	8003b9a <HAL_UART_IRQHandler+0x30a>
 8003b98:	e0a4      	b.n	8003ce4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2280      	movs	r2, #128	@ 0x80
 8003b9e:	589b      	ldr	r3, [r3, r2]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	217e      	movs	r1, #126	@ 0x7e
 8003ba6:	187b      	adds	r3, r7, r1
 8003ba8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003baa:	187b      	adds	r3, r7, r1
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d100      	bne.n	8003bb4 <HAL_UART_IRQHandler+0x324>
 8003bb2:	e185      	b.n	8003ec0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	225c      	movs	r2, #92	@ 0x5c
 8003bb8:	5a9b      	ldrh	r3, [r3, r2]
 8003bba:	187a      	adds	r2, r7, r1
 8003bbc:	8812      	ldrh	r2, [r2, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d300      	bcc.n	8003bc4 <HAL_UART_IRQHandler+0x334>
 8003bc2:	e17d      	b.n	8003ec0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	187a      	adds	r2, r7, r1
 8003bc8:	215e      	movs	r1, #94	@ 0x5e
 8003bca:	8812      	ldrh	r2, [r2, #0]
 8003bcc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2280      	movs	r2, #128	@ 0x80
 8003bd2:	589b      	ldr	r3, [r3, r2]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d170      	bne.n	8003cc0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bde:	f3ef 8310 	mrs	r3, PRIMASK
 8003be2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003be6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003be8:	2301      	movs	r3, #1
 8003bea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bee:	f383 8810 	msr	PRIMASK, r3
}
 8003bf2:	46c0      	nop			@ (mov r8, r8)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	49b4      	ldr	r1, [pc, #720]	@ (8003ed0 <HAL_UART_IRQHandler+0x640>)
 8003c00:	400a      	ands	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c06:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0a:	f383 8810 	msr	PRIMASK, r3
}
 8003c0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c10:	f3ef 8310 	mrs	r3, PRIMASK
 8003c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c18:	677b      	str	r3, [r7, #116]	@ 0x74
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c20:	f383 8810 	msr	PRIMASK, r3
}
 8003c24:	46c0      	nop			@ (mov r8, r8)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2101      	movs	r1, #1
 8003c32:	438a      	bics	r2, r1
 8003c34:	609a      	str	r2, [r3, #8]
 8003c36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c38:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c3c:	f383 8810 	msr	PRIMASK, r3
}
 8003c40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c42:	f3ef 8310 	mrs	r3, PRIMASK
 8003c46:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003c48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c52:	f383 8810 	msr	PRIMASK, r3
}
 8003c56:	46c0      	nop			@ (mov r8, r8)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2140      	movs	r1, #64	@ 0x40
 8003c64:	438a      	bics	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c6a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c6e:	f383 8810 	msr	PRIMASK, r3
}
 8003c72:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	228c      	movs	r2, #140	@ 0x8c
 8003c78:	2120      	movs	r1, #32
 8003c7a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c82:	f3ef 8310 	mrs	r3, PRIMASK
 8003c86:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c92:	f383 8810 	msr	PRIMASK, r3
}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2110      	movs	r1, #16
 8003ca4:	438a      	bics	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003caa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cae:	f383 8810 	msr	PRIMASK, r3
}
 8003cb2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2280      	movs	r2, #128	@ 0x80
 8003cb8:	589b      	ldr	r3, [r3, r2]
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f7fd fae6 	bl	800128c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	225c      	movs	r2, #92	@ 0x5c
 8003cca:	5a9a      	ldrh	r2, [r3, r2]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	215e      	movs	r1, #94	@ 0x5e
 8003cd0:	5a5b      	ldrh	r3, [r3, r1]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	0011      	movs	r1, r2
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f000 f90d 	bl	8003efc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ce2:	e0ed      	b.n	8003ec0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	225c      	movs	r2, #92	@ 0x5c
 8003ce8:	5a99      	ldrh	r1, [r3, r2]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	225e      	movs	r2, #94	@ 0x5e
 8003cee:	5a9b      	ldrh	r3, [r3, r2]
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	208e      	movs	r0, #142	@ 0x8e
 8003cf4:	183b      	adds	r3, r7, r0
 8003cf6:	1a8a      	subs	r2, r1, r2
 8003cf8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	225e      	movs	r2, #94	@ 0x5e
 8003cfe:	5a9b      	ldrh	r3, [r3, r2]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d100      	bne.n	8003d08 <HAL_UART_IRQHandler+0x478>
 8003d06:	e0dd      	b.n	8003ec4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003d08:	183b      	adds	r3, r7, r0
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d100      	bne.n	8003d12 <HAL_UART_IRQHandler+0x482>
 8003d10:	e0d8      	b.n	8003ec4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d12:	f3ef 8310 	mrs	r3, PRIMASK
 8003d16:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d18:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d1a:	2488      	movs	r4, #136	@ 0x88
 8003d1c:	193a      	adds	r2, r7, r4
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	2301      	movs	r3, #1
 8003d22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f383 8810 	msr	PRIMASK, r3
}
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4967      	ldr	r1, [pc, #412]	@ (8003ed4 <HAL_UART_IRQHandler+0x644>)
 8003d38:	400a      	ands	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	193b      	adds	r3, r7, r4
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f383 8810 	msr	PRIMASK, r3
}
 8003d48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d50:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d52:	2484      	movs	r4, #132	@ 0x84
 8003d54:	193a      	adds	r2, r7, r4
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	2301      	movs	r3, #1
 8003d5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f383 8810 	msr	PRIMASK, r3
}
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	495a      	ldr	r1, [pc, #360]	@ (8003ed8 <HAL_UART_IRQHandler+0x648>)
 8003d70:	400a      	ands	r2, r1
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	193b      	adds	r3, r7, r4
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	f383 8810 	msr	PRIMASK, r3
}
 8003d80:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	228c      	movs	r2, #140	@ 0x8c
 8003d86:	2120      	movs	r1, #32
 8003d88:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d96:	f3ef 8310 	mrs	r3, PRIMASK
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9e:	2480      	movs	r4, #128	@ 0x80
 8003da0:	193a      	adds	r2, r7, r4
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	2301      	movs	r3, #1
 8003da6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003daa:	f383 8810 	msr	PRIMASK, r3
}
 8003dae:	46c0      	nop			@ (mov r8, r8)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2110      	movs	r1, #16
 8003dbc:	438a      	bics	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	193b      	adds	r3, r7, r4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc8:	f383 8810 	msr	PRIMASK, r3
}
 8003dcc:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003dd4:	183b      	adds	r3, r7, r0
 8003dd6:	881a      	ldrh	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	0011      	movs	r1, r2
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f000 f88d 	bl	8003efc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003de2:	e06f      	b.n	8003ec4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003de4:	23a4      	movs	r3, #164	@ 0xa4
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	2380      	movs	r3, #128	@ 0x80
 8003dec:	035b      	lsls	r3, r3, #13
 8003dee:	4013      	ands	r3, r2
 8003df0:	d010      	beq.n	8003e14 <HAL_UART_IRQHandler+0x584>
 8003df2:	239c      	movs	r3, #156	@ 0x9c
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	2380      	movs	r3, #128	@ 0x80
 8003dfa:	03db      	lsls	r3, r3, #15
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	d009      	beq.n	8003e14 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2280      	movs	r2, #128	@ 0x80
 8003e06:	0352      	lsls	r2, r2, #13
 8003e08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f001 fbeb 	bl	80055e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e12:	e05a      	b.n	8003eca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003e14:	23a4      	movs	r3, #164	@ 0xa4
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2280      	movs	r2, #128	@ 0x80
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d016      	beq.n	8003e4e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003e20:	23a0      	movs	r3, #160	@ 0xa0
 8003e22:	18fb      	adds	r3, r7, r3
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2280      	movs	r2, #128	@ 0x80
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d106      	bne.n	8003e3a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003e2c:	239c      	movs	r3, #156	@ 0x9c
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	2380      	movs	r3, #128	@ 0x80
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	4013      	ands	r3, r2
 8003e38:	d009      	beq.n	8003e4e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d042      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	0010      	movs	r0, r2
 8003e4a:	4798      	blx	r3
    }
    return;
 8003e4c:	e03c      	b.n	8003ec8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e4e:	23a4      	movs	r3, #164	@ 0xa4
 8003e50:	18fb      	adds	r3, r7, r3
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2240      	movs	r2, #64	@ 0x40
 8003e56:	4013      	ands	r3, r2
 8003e58:	d00a      	beq.n	8003e70 <HAL_UART_IRQHandler+0x5e0>
 8003e5a:	23a0      	movs	r3, #160	@ 0xa0
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2240      	movs	r2, #64	@ 0x40
 8003e62:	4013      	ands	r3, r2
 8003e64:	d004      	beq.n	8003e70 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f000 fe80 	bl	8004b6e <UART_EndTransmit_IT>
    return;
 8003e6e:	e02c      	b.n	8003eca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003e70:	23a4      	movs	r3, #164	@ 0xa4
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	2380      	movs	r3, #128	@ 0x80
 8003e78:	041b      	lsls	r3, r3, #16
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d00b      	beq.n	8003e96 <HAL_UART_IRQHandler+0x606>
 8003e7e:	23a0      	movs	r3, #160	@ 0xa0
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	2380      	movs	r3, #128	@ 0x80
 8003e86:	05db      	lsls	r3, r3, #23
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d004      	beq.n	8003e96 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f001 fbba 	bl	8005608 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e94:	e019      	b.n	8003eca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003e96:	23a4      	movs	r3, #164	@ 0xa4
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	2380      	movs	r3, #128	@ 0x80
 8003e9e:	045b      	lsls	r3, r3, #17
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d012      	beq.n	8003eca <HAL_UART_IRQHandler+0x63a>
 8003ea4:	23a0      	movs	r3, #160	@ 0xa0
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	da0d      	bge.n	8003eca <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f001 fba1 	bl	80055f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003eb6:	e008      	b.n	8003eca <HAL_UART_IRQHandler+0x63a>
      return;
 8003eb8:	46c0      	nop			@ (mov r8, r8)
 8003eba:	e006      	b.n	8003eca <HAL_UART_IRQHandler+0x63a>
    return;
 8003ebc:	46c0      	nop			@ (mov r8, r8)
 8003ebe:	e004      	b.n	8003eca <HAL_UART_IRQHandler+0x63a>
      return;
 8003ec0:	46c0      	nop			@ (mov r8, r8)
 8003ec2:	e002      	b.n	8003eca <HAL_UART_IRQHandler+0x63a>
      return;
 8003ec4:	46c0      	nop			@ (mov r8, r8)
 8003ec6:	e000      	b.n	8003eca <HAL_UART_IRQHandler+0x63a>
    return;
 8003ec8:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	b02a      	add	sp, #168	@ 0xa8
 8003ece:	bdb0      	pop	{r4, r5, r7, pc}
 8003ed0:	fffffeff 	.word	0xfffffeff
 8003ed4:	fffffedf 	.word	0xfffffedf
 8003ed8:	effffffe 	.word	0xeffffffe

08003edc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ee4:	46c0      	nop			@ (mov r8, r8)
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b002      	add	sp, #8
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ef4:	46c0      	nop			@ (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b002      	add	sp, #8
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	000a      	movs	r2, r1
 8003f06:	1cbb      	adds	r3, r7, #2
 8003f08:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f0a:	46c0      	nop			@ (mov r8, r8)
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b002      	add	sp, #8
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f14:	b5b0      	push	{r4, r5, r7, lr}
 8003f16:	b090      	sub	sp, #64	@ 0x40
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f1c:	231a      	movs	r3, #26
 8003f1e:	2220      	movs	r2, #32
 8003f20:	189b      	adds	r3, r3, r2
 8003f22:	19db      	adds	r3, r3, r7
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4aaf      	ldr	r2, [pc, #700]	@ (8004204 <UART_SetConfig+0x2f0>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	0019      	movs	r1, r3
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f52:	430b      	orrs	r3, r1
 8003f54:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	4aaa      	ldr	r2, [pc, #680]	@ (8004208 <UART_SetConfig+0x2f4>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	0018      	movs	r0, r3
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	68d9      	ldr	r1, [r3, #12]
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	0003      	movs	r3, r0
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4aa4      	ldr	r2, [pc, #656]	@ (800420c <UART_SetConfig+0x2f8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d004      	beq.n	8003f8a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003f86:	4313      	orrs	r3, r2
 8003f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4a9f      	ldr	r2, [pc, #636]	@ (8004210 <UART_SetConfig+0x2fc>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	0019      	movs	r1, r3
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa6:	220f      	movs	r2, #15
 8003fa8:	4393      	bics	r3, r2
 8003faa:	0018      	movs	r0, r3
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	430b      	orrs	r3, r1
 8003fb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a95      	ldr	r2, [pc, #596]	@ (8004214 <UART_SetConfig+0x300>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d131      	bne.n	8004028 <UART_SetConfig+0x114>
 8003fc4:	4b94      	ldr	r3, [pc, #592]	@ (8004218 <UART_SetConfig+0x304>)
 8003fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc8:	2203      	movs	r2, #3
 8003fca:	4013      	ands	r3, r2
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	d01d      	beq.n	800400c <UART_SetConfig+0xf8>
 8003fd0:	d823      	bhi.n	800401a <UART_SetConfig+0x106>
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d00c      	beq.n	8003ff0 <UART_SetConfig+0xdc>
 8003fd6:	d820      	bhi.n	800401a <UART_SetConfig+0x106>
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <UART_SetConfig+0xce>
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d00e      	beq.n	8003ffe <UART_SetConfig+0xea>
 8003fe0:	e01b      	b.n	800401a <UART_SetConfig+0x106>
 8003fe2:	231b      	movs	r3, #27
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	189b      	adds	r3, r3, r2
 8003fe8:	19db      	adds	r3, r3, r7
 8003fea:	2200      	movs	r2, #0
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	e0b4      	b.n	800415a <UART_SetConfig+0x246>
 8003ff0:	231b      	movs	r3, #27
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	189b      	adds	r3, r3, r2
 8003ff6:	19db      	adds	r3, r3, r7
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	701a      	strb	r2, [r3, #0]
 8003ffc:	e0ad      	b.n	800415a <UART_SetConfig+0x246>
 8003ffe:	231b      	movs	r3, #27
 8004000:	2220      	movs	r2, #32
 8004002:	189b      	adds	r3, r3, r2
 8004004:	19db      	adds	r3, r3, r7
 8004006:	2204      	movs	r2, #4
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	e0a6      	b.n	800415a <UART_SetConfig+0x246>
 800400c:	231b      	movs	r3, #27
 800400e:	2220      	movs	r2, #32
 8004010:	189b      	adds	r3, r3, r2
 8004012:	19db      	adds	r3, r3, r7
 8004014:	2208      	movs	r2, #8
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	e09f      	b.n	800415a <UART_SetConfig+0x246>
 800401a:	231b      	movs	r3, #27
 800401c:	2220      	movs	r2, #32
 800401e:	189b      	adds	r3, r3, r2
 8004020:	19db      	adds	r3, r3, r7
 8004022:	2210      	movs	r2, #16
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	e098      	b.n	800415a <UART_SetConfig+0x246>
 8004028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a7b      	ldr	r2, [pc, #492]	@ (800421c <UART_SetConfig+0x308>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d131      	bne.n	8004096 <UART_SetConfig+0x182>
 8004032:	4b79      	ldr	r3, [pc, #484]	@ (8004218 <UART_SetConfig+0x304>)
 8004034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004036:	220c      	movs	r2, #12
 8004038:	4013      	ands	r3, r2
 800403a:	2b0c      	cmp	r3, #12
 800403c:	d01d      	beq.n	800407a <UART_SetConfig+0x166>
 800403e:	d823      	bhi.n	8004088 <UART_SetConfig+0x174>
 8004040:	2b08      	cmp	r3, #8
 8004042:	d00c      	beq.n	800405e <UART_SetConfig+0x14a>
 8004044:	d820      	bhi.n	8004088 <UART_SetConfig+0x174>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <UART_SetConfig+0x13c>
 800404a:	2b04      	cmp	r3, #4
 800404c:	d00e      	beq.n	800406c <UART_SetConfig+0x158>
 800404e:	e01b      	b.n	8004088 <UART_SetConfig+0x174>
 8004050:	231b      	movs	r3, #27
 8004052:	2220      	movs	r2, #32
 8004054:	189b      	adds	r3, r3, r2
 8004056:	19db      	adds	r3, r3, r7
 8004058:	2200      	movs	r2, #0
 800405a:	701a      	strb	r2, [r3, #0]
 800405c:	e07d      	b.n	800415a <UART_SetConfig+0x246>
 800405e:	231b      	movs	r3, #27
 8004060:	2220      	movs	r2, #32
 8004062:	189b      	adds	r3, r3, r2
 8004064:	19db      	adds	r3, r3, r7
 8004066:	2202      	movs	r2, #2
 8004068:	701a      	strb	r2, [r3, #0]
 800406a:	e076      	b.n	800415a <UART_SetConfig+0x246>
 800406c:	231b      	movs	r3, #27
 800406e:	2220      	movs	r2, #32
 8004070:	189b      	adds	r3, r3, r2
 8004072:	19db      	adds	r3, r3, r7
 8004074:	2204      	movs	r2, #4
 8004076:	701a      	strb	r2, [r3, #0]
 8004078:	e06f      	b.n	800415a <UART_SetConfig+0x246>
 800407a:	231b      	movs	r3, #27
 800407c:	2220      	movs	r2, #32
 800407e:	189b      	adds	r3, r3, r2
 8004080:	19db      	adds	r3, r3, r7
 8004082:	2208      	movs	r2, #8
 8004084:	701a      	strb	r2, [r3, #0]
 8004086:	e068      	b.n	800415a <UART_SetConfig+0x246>
 8004088:	231b      	movs	r3, #27
 800408a:	2220      	movs	r2, #32
 800408c:	189b      	adds	r3, r3, r2
 800408e:	19db      	adds	r3, r3, r7
 8004090:	2210      	movs	r2, #16
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	e061      	b.n	800415a <UART_SetConfig+0x246>
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a61      	ldr	r2, [pc, #388]	@ (8004220 <UART_SetConfig+0x30c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d106      	bne.n	80040ae <UART_SetConfig+0x19a>
 80040a0:	231b      	movs	r3, #27
 80040a2:	2220      	movs	r2, #32
 80040a4:	189b      	adds	r3, r3, r2
 80040a6:	19db      	adds	r3, r3, r7
 80040a8:	2200      	movs	r2, #0
 80040aa:	701a      	strb	r2, [r3, #0]
 80040ac:	e055      	b.n	800415a <UART_SetConfig+0x246>
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a5c      	ldr	r2, [pc, #368]	@ (8004224 <UART_SetConfig+0x310>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d106      	bne.n	80040c6 <UART_SetConfig+0x1b2>
 80040b8:	231b      	movs	r3, #27
 80040ba:	2220      	movs	r2, #32
 80040bc:	189b      	adds	r3, r3, r2
 80040be:	19db      	adds	r3, r3, r7
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	e049      	b.n	800415a <UART_SetConfig+0x246>
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a50      	ldr	r2, [pc, #320]	@ (800420c <UART_SetConfig+0x2f8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d13e      	bne.n	800414e <UART_SetConfig+0x23a>
 80040d0:	4b51      	ldr	r3, [pc, #324]	@ (8004218 <UART_SetConfig+0x304>)
 80040d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80040d4:	23c0      	movs	r3, #192	@ 0xc0
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	4013      	ands	r3, r2
 80040da:	22c0      	movs	r2, #192	@ 0xc0
 80040dc:	0112      	lsls	r2, r2, #4
 80040de:	4293      	cmp	r3, r2
 80040e0:	d027      	beq.n	8004132 <UART_SetConfig+0x21e>
 80040e2:	22c0      	movs	r2, #192	@ 0xc0
 80040e4:	0112      	lsls	r2, r2, #4
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d82a      	bhi.n	8004140 <UART_SetConfig+0x22c>
 80040ea:	2280      	movs	r2, #128	@ 0x80
 80040ec:	0112      	lsls	r2, r2, #4
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d011      	beq.n	8004116 <UART_SetConfig+0x202>
 80040f2:	2280      	movs	r2, #128	@ 0x80
 80040f4:	0112      	lsls	r2, r2, #4
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d822      	bhi.n	8004140 <UART_SetConfig+0x22c>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d004      	beq.n	8004108 <UART_SetConfig+0x1f4>
 80040fe:	2280      	movs	r2, #128	@ 0x80
 8004100:	00d2      	lsls	r2, r2, #3
 8004102:	4293      	cmp	r3, r2
 8004104:	d00e      	beq.n	8004124 <UART_SetConfig+0x210>
 8004106:	e01b      	b.n	8004140 <UART_SetConfig+0x22c>
 8004108:	231b      	movs	r3, #27
 800410a:	2220      	movs	r2, #32
 800410c:	189b      	adds	r3, r3, r2
 800410e:	19db      	adds	r3, r3, r7
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	e021      	b.n	800415a <UART_SetConfig+0x246>
 8004116:	231b      	movs	r3, #27
 8004118:	2220      	movs	r2, #32
 800411a:	189b      	adds	r3, r3, r2
 800411c:	19db      	adds	r3, r3, r7
 800411e:	2202      	movs	r2, #2
 8004120:	701a      	strb	r2, [r3, #0]
 8004122:	e01a      	b.n	800415a <UART_SetConfig+0x246>
 8004124:	231b      	movs	r3, #27
 8004126:	2220      	movs	r2, #32
 8004128:	189b      	adds	r3, r3, r2
 800412a:	19db      	adds	r3, r3, r7
 800412c:	2204      	movs	r2, #4
 800412e:	701a      	strb	r2, [r3, #0]
 8004130:	e013      	b.n	800415a <UART_SetConfig+0x246>
 8004132:	231b      	movs	r3, #27
 8004134:	2220      	movs	r2, #32
 8004136:	189b      	adds	r3, r3, r2
 8004138:	19db      	adds	r3, r3, r7
 800413a:	2208      	movs	r2, #8
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	e00c      	b.n	800415a <UART_SetConfig+0x246>
 8004140:	231b      	movs	r3, #27
 8004142:	2220      	movs	r2, #32
 8004144:	189b      	adds	r3, r3, r2
 8004146:	19db      	adds	r3, r3, r7
 8004148:	2210      	movs	r2, #16
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	e005      	b.n	800415a <UART_SetConfig+0x246>
 800414e:	231b      	movs	r3, #27
 8004150:	2220      	movs	r2, #32
 8004152:	189b      	adds	r3, r3, r2
 8004154:	19db      	adds	r3, r3, r7
 8004156:	2210      	movs	r2, #16
 8004158:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a2b      	ldr	r2, [pc, #172]	@ (800420c <UART_SetConfig+0x2f8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d000      	beq.n	8004166 <UART_SetConfig+0x252>
 8004164:	e0a9      	b.n	80042ba <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004166:	231b      	movs	r3, #27
 8004168:	2220      	movs	r2, #32
 800416a:	189b      	adds	r3, r3, r2
 800416c:	19db      	adds	r3, r3, r7
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b08      	cmp	r3, #8
 8004172:	d015      	beq.n	80041a0 <UART_SetConfig+0x28c>
 8004174:	dc18      	bgt.n	80041a8 <UART_SetConfig+0x294>
 8004176:	2b04      	cmp	r3, #4
 8004178:	d00d      	beq.n	8004196 <UART_SetConfig+0x282>
 800417a:	dc15      	bgt.n	80041a8 <UART_SetConfig+0x294>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <UART_SetConfig+0x272>
 8004180:	2b02      	cmp	r3, #2
 8004182:	d005      	beq.n	8004190 <UART_SetConfig+0x27c>
 8004184:	e010      	b.n	80041a8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004186:	f7fd ffc9 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 800418a:	0003      	movs	r3, r0
 800418c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800418e:	e014      	b.n	80041ba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004190:	4b25      	ldr	r3, [pc, #148]	@ (8004228 <UART_SetConfig+0x314>)
 8004192:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004194:	e011      	b.n	80041ba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004196:	f7fd ff35 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 800419a:	0003      	movs	r3, r0
 800419c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800419e:	e00c      	b.n	80041ba <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041a0:	2380      	movs	r3, #128	@ 0x80
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041a6:	e008      	b.n	80041ba <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80041ac:	231a      	movs	r3, #26
 80041ae:	2220      	movs	r2, #32
 80041b0:	189b      	adds	r3, r3, r2
 80041b2:	19db      	adds	r3, r3, r7
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
        break;
 80041b8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d100      	bne.n	80041c2 <UART_SetConfig+0x2ae>
 80041c0:	e14b      	b.n	800445a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041c6:	4b19      	ldr	r3, [pc, #100]	@ (800422c <UART_SetConfig+0x318>)
 80041c8:	0052      	lsls	r2, r2, #1
 80041ca:	5ad3      	ldrh	r3, [r2, r3]
 80041cc:	0019      	movs	r1, r3
 80041ce:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80041d0:	f7fb ff98 	bl	8000104 <__udivsi3>
 80041d4:	0003      	movs	r3, r0
 80041d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	0013      	movs	r3, r2
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	189b      	adds	r3, r3, r2
 80041e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d305      	bcc.n	80041f4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80041e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80041ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d91d      	bls.n	8004230 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80041f4:	231a      	movs	r3, #26
 80041f6:	2220      	movs	r2, #32
 80041f8:	189b      	adds	r3, r3, r2
 80041fa:	19db      	adds	r3, r3, r7
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	e12b      	b.n	800445a <UART_SetConfig+0x546>
 8004202:	46c0      	nop			@ (mov r8, r8)
 8004204:	cfff69f3 	.word	0xcfff69f3
 8004208:	ffffcfff 	.word	0xffffcfff
 800420c:	40008000 	.word	0x40008000
 8004210:	11fff4ff 	.word	0x11fff4ff
 8004214:	40013800 	.word	0x40013800
 8004218:	40021000 	.word	0x40021000
 800421c:	40004400 	.word	0x40004400
 8004220:	40004800 	.word	0x40004800
 8004224:	40004c00 	.word	0x40004c00
 8004228:	00f42400 	.word	0x00f42400
 800422c:	08005970 	.word	0x08005970
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	2300      	movs	r3, #0
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800423c:	4b92      	ldr	r3, [pc, #584]	@ (8004488 <UART_SetConfig+0x574>)
 800423e:	0052      	lsls	r2, r2, #1
 8004240:	5ad3      	ldrh	r3, [r2, r3]
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	69b8      	ldr	r0, [r7, #24]
 800424e:	69f9      	ldr	r1, [r7, #28]
 8004250:	f7fc f8ce 	bl	80003f0 <__aeabi_uldivmod>
 8004254:	0002      	movs	r2, r0
 8004256:	000b      	movs	r3, r1
 8004258:	0e11      	lsrs	r1, r2, #24
 800425a:	021d      	lsls	r5, r3, #8
 800425c:	430d      	orrs	r5, r1
 800425e:	0214      	lsls	r4, r2, #8
 8004260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	085b      	lsrs	r3, r3, #1
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	2300      	movs	r3, #0
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68b8      	ldr	r0, [r7, #8]
 800426e:	68f9      	ldr	r1, [r7, #12]
 8004270:	1900      	adds	r0, r0, r4
 8004272:	4169      	adcs	r1, r5
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f7fc f8b5 	bl	80003f0 <__aeabi_uldivmod>
 8004286:	0002      	movs	r2, r0
 8004288:	000b      	movs	r3, r1
 800428a:	0013      	movs	r3, r2
 800428c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800428e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004290:	23c0      	movs	r3, #192	@ 0xc0
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	429a      	cmp	r2, r3
 8004296:	d309      	bcc.n	80042ac <UART_SetConfig+0x398>
 8004298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800429a:	2380      	movs	r3, #128	@ 0x80
 800429c:	035b      	lsls	r3, r3, #13
 800429e:	429a      	cmp	r2, r3
 80042a0:	d204      	bcs.n	80042ac <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80042a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a8:	60da      	str	r2, [r3, #12]
 80042aa:	e0d6      	b.n	800445a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80042ac:	231a      	movs	r3, #26
 80042ae:	2220      	movs	r2, #32
 80042b0:	189b      	adds	r3, r3, r2
 80042b2:	19db      	adds	r3, r3, r7
 80042b4:	2201      	movs	r2, #1
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	e0cf      	b.n	800445a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	69da      	ldr	r2, [r3, #28]
 80042be:	2380      	movs	r3, #128	@ 0x80
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d000      	beq.n	80042c8 <UART_SetConfig+0x3b4>
 80042c6:	e070      	b.n	80043aa <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80042c8:	231b      	movs	r3, #27
 80042ca:	2220      	movs	r2, #32
 80042cc:	189b      	adds	r3, r3, r2
 80042ce:	19db      	adds	r3, r3, r7
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d015      	beq.n	8004302 <UART_SetConfig+0x3ee>
 80042d6:	dc18      	bgt.n	800430a <UART_SetConfig+0x3f6>
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d00d      	beq.n	80042f8 <UART_SetConfig+0x3e4>
 80042dc:	dc15      	bgt.n	800430a <UART_SetConfig+0x3f6>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <UART_SetConfig+0x3d4>
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d005      	beq.n	80042f2 <UART_SetConfig+0x3de>
 80042e6:	e010      	b.n	800430a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e8:	f7fd ff18 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 80042ec:	0003      	movs	r3, r0
 80042ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042f0:	e014      	b.n	800431c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f2:	4b66      	ldr	r3, [pc, #408]	@ (800448c <UART_SetConfig+0x578>)
 80042f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80042f6:	e011      	b.n	800431c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042f8:	f7fd fe84 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 80042fc:	0003      	movs	r3, r0
 80042fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004300:	e00c      	b.n	800431c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004302:	2380      	movs	r3, #128	@ 0x80
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004308:	e008      	b.n	800431c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800430e:	231a      	movs	r3, #26
 8004310:	2220      	movs	r2, #32
 8004312:	189b      	adds	r3, r3, r2
 8004314:	19db      	adds	r3, r3, r7
 8004316:	2201      	movs	r2, #1
 8004318:	701a      	strb	r2, [r3, #0]
        break;
 800431a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800431c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800431e:	2b00      	cmp	r3, #0
 8004320:	d100      	bne.n	8004324 <UART_SetConfig+0x410>
 8004322:	e09a      	b.n	800445a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004328:	4b57      	ldr	r3, [pc, #348]	@ (8004488 <UART_SetConfig+0x574>)
 800432a:	0052      	lsls	r2, r2, #1
 800432c:	5ad3      	ldrh	r3, [r2, r3]
 800432e:	0019      	movs	r1, r3
 8004330:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004332:	f7fb fee7 	bl	8000104 <__udivsi3>
 8004336:	0003      	movs	r3, r0
 8004338:	005a      	lsls	r2, r3, #1
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	085b      	lsrs	r3, r3, #1
 8004340:	18d2      	adds	r2, r2, r3
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	0019      	movs	r1, r3
 8004348:	0010      	movs	r0, r2
 800434a:	f7fb fedb 	bl	8000104 <__udivsi3>
 800434e:	0003      	movs	r3, r0
 8004350:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004354:	2b0f      	cmp	r3, #15
 8004356:	d921      	bls.n	800439c <UART_SetConfig+0x488>
 8004358:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800435a:	2380      	movs	r3, #128	@ 0x80
 800435c:	025b      	lsls	r3, r3, #9
 800435e:	429a      	cmp	r2, r3
 8004360:	d21c      	bcs.n	800439c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004364:	b29a      	uxth	r2, r3
 8004366:	200e      	movs	r0, #14
 8004368:	2420      	movs	r4, #32
 800436a:	1903      	adds	r3, r0, r4
 800436c:	19db      	adds	r3, r3, r7
 800436e:	210f      	movs	r1, #15
 8004370:	438a      	bics	r2, r1
 8004372:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004376:	085b      	lsrs	r3, r3, #1
 8004378:	b29b      	uxth	r3, r3
 800437a:	2207      	movs	r2, #7
 800437c:	4013      	ands	r3, r2
 800437e:	b299      	uxth	r1, r3
 8004380:	1903      	adds	r3, r0, r4
 8004382:	19db      	adds	r3, r3, r7
 8004384:	1902      	adds	r2, r0, r4
 8004386:	19d2      	adds	r2, r2, r7
 8004388:	8812      	ldrh	r2, [r2, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800438e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	1902      	adds	r2, r0, r4
 8004394:	19d2      	adds	r2, r2, r7
 8004396:	8812      	ldrh	r2, [r2, #0]
 8004398:	60da      	str	r2, [r3, #12]
 800439a:	e05e      	b.n	800445a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800439c:	231a      	movs	r3, #26
 800439e:	2220      	movs	r2, #32
 80043a0:	189b      	adds	r3, r3, r2
 80043a2:	19db      	adds	r3, r3, r7
 80043a4:	2201      	movs	r2, #1
 80043a6:	701a      	strb	r2, [r3, #0]
 80043a8:	e057      	b.n	800445a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043aa:	231b      	movs	r3, #27
 80043ac:	2220      	movs	r2, #32
 80043ae:	189b      	adds	r3, r3, r2
 80043b0:	19db      	adds	r3, r3, r7
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d015      	beq.n	80043e4 <UART_SetConfig+0x4d0>
 80043b8:	dc18      	bgt.n	80043ec <UART_SetConfig+0x4d8>
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d00d      	beq.n	80043da <UART_SetConfig+0x4c6>
 80043be:	dc15      	bgt.n	80043ec <UART_SetConfig+0x4d8>
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <UART_SetConfig+0x4b6>
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d005      	beq.n	80043d4 <UART_SetConfig+0x4c0>
 80043c8:	e010      	b.n	80043ec <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ca:	f7fd fea7 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 80043ce:	0003      	movs	r3, r0
 80043d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043d2:	e014      	b.n	80043fe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043d4:	4b2d      	ldr	r3, [pc, #180]	@ (800448c <UART_SetConfig+0x578>)
 80043d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043d8:	e011      	b.n	80043fe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043da:	f7fd fe13 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 80043de:	0003      	movs	r3, r0
 80043e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043e2:	e00c      	b.n	80043fe <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043e4:	2380      	movs	r3, #128	@ 0x80
 80043e6:	021b      	lsls	r3, r3, #8
 80043e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80043ea:	e008      	b.n	80043fe <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80043f0:	231a      	movs	r3, #26
 80043f2:	2220      	movs	r2, #32
 80043f4:	189b      	adds	r3, r3, r2
 80043f6:	19db      	adds	r3, r3, r7
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]
        break;
 80043fc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80043fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004400:	2b00      	cmp	r3, #0
 8004402:	d02a      	beq.n	800445a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004406:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004408:	4b1f      	ldr	r3, [pc, #124]	@ (8004488 <UART_SetConfig+0x574>)
 800440a:	0052      	lsls	r2, r2, #1
 800440c:	5ad3      	ldrh	r3, [r2, r3]
 800440e:	0019      	movs	r1, r3
 8004410:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004412:	f7fb fe77 	bl	8000104 <__udivsi3>
 8004416:	0003      	movs	r3, r0
 8004418:	001a      	movs	r2, r3
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	085b      	lsrs	r3, r3, #1
 8004420:	18d2      	adds	r2, r2, r3
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	0019      	movs	r1, r3
 8004428:	0010      	movs	r0, r2
 800442a:	f7fb fe6b 	bl	8000104 <__udivsi3>
 800442e:	0003      	movs	r3, r0
 8004430:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004434:	2b0f      	cmp	r3, #15
 8004436:	d90a      	bls.n	800444e <UART_SetConfig+0x53a>
 8004438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800443a:	2380      	movs	r3, #128	@ 0x80
 800443c:	025b      	lsls	r3, r3, #9
 800443e:	429a      	cmp	r2, r3
 8004440:	d205      	bcs.n	800444e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	b29a      	uxth	r2, r3
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60da      	str	r2, [r3, #12]
 800444c:	e005      	b.n	800445a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800444e:	231a      	movs	r3, #26
 8004450:	2220      	movs	r2, #32
 8004452:	189b      	adds	r3, r3, r2
 8004454:	19db      	adds	r3, r3, r7
 8004456:	2201      	movs	r2, #1
 8004458:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	226a      	movs	r2, #106	@ 0x6a
 800445e:	2101      	movs	r1, #1
 8004460:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004464:	2268      	movs	r2, #104	@ 0x68
 8004466:	2101      	movs	r1, #1
 8004468:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	2200      	movs	r2, #0
 800446e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	2200      	movs	r2, #0
 8004474:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004476:	231a      	movs	r3, #26
 8004478:	2220      	movs	r2, #32
 800447a:	189b      	adds	r3, r3, r2
 800447c:	19db      	adds	r3, r3, r7
 800447e:	781b      	ldrb	r3, [r3, #0]
}
 8004480:	0018      	movs	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	b010      	add	sp, #64	@ 0x40
 8004486:	bdb0      	pop	{r4, r5, r7, pc}
 8004488:	08005970 	.word	0x08005970
 800448c:	00f42400 	.word	0x00f42400

08004490 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449c:	2208      	movs	r2, #8
 800449e:	4013      	ands	r3, r2
 80044a0:	d00b      	beq.n	80044ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4a4a      	ldr	r2, [pc, #296]	@ (80045d4 <UART_AdvFeatureConfig+0x144>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	0019      	movs	r1, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044be:	2201      	movs	r2, #1
 80044c0:	4013      	ands	r3, r2
 80044c2:	d00b      	beq.n	80044dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4a43      	ldr	r2, [pc, #268]	@ (80045d8 <UART_AdvFeatureConfig+0x148>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	0019      	movs	r1, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e0:	2202      	movs	r2, #2
 80044e2:	4013      	ands	r3, r2
 80044e4:	d00b      	beq.n	80044fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	4a3b      	ldr	r2, [pc, #236]	@ (80045dc <UART_AdvFeatureConfig+0x14c>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	0019      	movs	r1, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004502:	2204      	movs	r2, #4
 8004504:	4013      	ands	r3, r2
 8004506:	d00b      	beq.n	8004520 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	4a34      	ldr	r2, [pc, #208]	@ (80045e0 <UART_AdvFeatureConfig+0x150>)
 8004510:	4013      	ands	r3, r2
 8004512:	0019      	movs	r1, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004524:	2210      	movs	r2, #16
 8004526:	4013      	ands	r3, r2
 8004528:	d00b      	beq.n	8004542 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	4a2c      	ldr	r2, [pc, #176]	@ (80045e4 <UART_AdvFeatureConfig+0x154>)
 8004532:	4013      	ands	r3, r2
 8004534:	0019      	movs	r1, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004546:	2220      	movs	r2, #32
 8004548:	4013      	ands	r3, r2
 800454a:	d00b      	beq.n	8004564 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	4a25      	ldr	r2, [pc, #148]	@ (80045e8 <UART_AdvFeatureConfig+0x158>)
 8004554:	4013      	ands	r3, r2
 8004556:	0019      	movs	r1, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004568:	2240      	movs	r2, #64	@ 0x40
 800456a:	4013      	ands	r3, r2
 800456c:	d01d      	beq.n	80045aa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	4a1d      	ldr	r2, [pc, #116]	@ (80045ec <UART_AdvFeatureConfig+0x15c>)
 8004576:	4013      	ands	r3, r2
 8004578:	0019      	movs	r1, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800458a:	2380      	movs	r3, #128	@ 0x80
 800458c:	035b      	lsls	r3, r3, #13
 800458e:	429a      	cmp	r2, r3
 8004590:	d10b      	bne.n	80045aa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4a15      	ldr	r2, [pc, #84]	@ (80045f0 <UART_AdvFeatureConfig+0x160>)
 800459a:	4013      	ands	r3, r2
 800459c:	0019      	movs	r1, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ae:	2280      	movs	r2, #128	@ 0x80
 80045b0:	4013      	ands	r3, r2
 80045b2:	d00b      	beq.n	80045cc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	4a0e      	ldr	r2, [pc, #56]	@ (80045f4 <UART_AdvFeatureConfig+0x164>)
 80045bc:	4013      	ands	r3, r2
 80045be:	0019      	movs	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	605a      	str	r2, [r3, #4]
  }
}
 80045cc:	46c0      	nop			@ (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b002      	add	sp, #8
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	ffff7fff 	.word	0xffff7fff
 80045d8:	fffdffff 	.word	0xfffdffff
 80045dc:	fffeffff 	.word	0xfffeffff
 80045e0:	fffbffff 	.word	0xfffbffff
 80045e4:	ffffefff 	.word	0xffffefff
 80045e8:	ffffdfff 	.word	0xffffdfff
 80045ec:	ffefffff 	.word	0xffefffff
 80045f0:	ff9fffff 	.word	0xff9fffff
 80045f4:	fff7ffff 	.word	0xfff7ffff

080045f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b092      	sub	sp, #72	@ 0x48
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2290      	movs	r2, #144	@ 0x90
 8004604:	2100      	movs	r1, #0
 8004606:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004608:	f7fc fd58 	bl	80010bc <HAL_GetTick>
 800460c:	0003      	movs	r3, r0
 800460e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2208      	movs	r2, #8
 8004618:	4013      	ands	r3, r2
 800461a:	2b08      	cmp	r3, #8
 800461c:	d12d      	bne.n	800467a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800461e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004620:	2280      	movs	r2, #128	@ 0x80
 8004622:	0391      	lsls	r1, r2, #14
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	4a47      	ldr	r2, [pc, #284]	@ (8004744 <UART_CheckIdleState+0x14c>)
 8004628:	9200      	str	r2, [sp, #0]
 800462a:	2200      	movs	r2, #0
 800462c:	f000 f88e 	bl	800474c <UART_WaitOnFlagUntilTimeout>
 8004630:	1e03      	subs	r3, r0, #0
 8004632:	d022      	beq.n	800467a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004634:	f3ef 8310 	mrs	r3, PRIMASK
 8004638:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800463c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800463e:	2301      	movs	r3, #1
 8004640:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004644:	f383 8810 	msr	PRIMASK, r3
}
 8004648:	46c0      	nop			@ (mov r8, r8)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2180      	movs	r1, #128	@ 0x80
 8004656:	438a      	bics	r2, r1
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004660:	f383 8810 	msr	PRIMASK, r3
}
 8004664:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2288      	movs	r2, #136	@ 0x88
 800466a:	2120      	movs	r1, #32
 800466c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2284      	movs	r2, #132	@ 0x84
 8004672:	2100      	movs	r1, #0
 8004674:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e060      	b.n	800473c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2204      	movs	r2, #4
 8004682:	4013      	ands	r3, r2
 8004684:	2b04      	cmp	r3, #4
 8004686:	d146      	bne.n	8004716 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800468a:	2280      	movs	r2, #128	@ 0x80
 800468c:	03d1      	lsls	r1, r2, #15
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4a2c      	ldr	r2, [pc, #176]	@ (8004744 <UART_CheckIdleState+0x14c>)
 8004692:	9200      	str	r2, [sp, #0]
 8004694:	2200      	movs	r2, #0
 8004696:	f000 f859 	bl	800474c <UART_WaitOnFlagUntilTimeout>
 800469a:	1e03      	subs	r3, r0, #0
 800469c:	d03b      	beq.n	8004716 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469e:	f3ef 8310 	mrs	r3, PRIMASK
 80046a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80046a4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80046a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80046a8:	2301      	movs	r3, #1
 80046aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f383 8810 	msr	PRIMASK, r3
}
 80046b2:	46c0      	nop			@ (mov r8, r8)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4922      	ldr	r1, [pc, #136]	@ (8004748 <UART_CheckIdleState+0x150>)
 80046c0:	400a      	ands	r2, r1
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f383 8810 	msr	PRIMASK, r3
}
 80046ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d0:	f3ef 8310 	mrs	r3, PRIMASK
 80046d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80046d6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80046da:	2301      	movs	r3, #1
 80046dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	f383 8810 	msr	PRIMASK, r3
}
 80046e4:	46c0      	nop			@ (mov r8, r8)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2101      	movs	r1, #1
 80046f2:	438a      	bics	r2, r1
 80046f4:	609a      	str	r2, [r3, #8]
 80046f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	f383 8810 	msr	PRIMASK, r3
}
 8004700:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	228c      	movs	r2, #140	@ 0x8c
 8004706:	2120      	movs	r1, #32
 8004708:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2284      	movs	r2, #132	@ 0x84
 800470e:	2100      	movs	r1, #0
 8004710:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e012      	b.n	800473c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2288      	movs	r2, #136	@ 0x88
 800471a:	2120      	movs	r1, #32
 800471c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	228c      	movs	r2, #140	@ 0x8c
 8004722:	2120      	movs	r1, #32
 8004724:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2284      	movs	r2, #132	@ 0x84
 8004736:	2100      	movs	r1, #0
 8004738:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	0018      	movs	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	b010      	add	sp, #64	@ 0x40
 8004742:	bd80      	pop	{r7, pc}
 8004744:	01ffffff 	.word	0x01ffffff
 8004748:	fffffedf 	.word	0xfffffedf

0800474c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	1dfb      	adds	r3, r7, #7
 800475a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800475c:	e051      	b.n	8004802 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	3301      	adds	r3, #1
 8004762:	d04e      	beq.n	8004802 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004764:	f7fc fcaa 	bl	80010bc <HAL_GetTick>
 8004768:	0002      	movs	r2, r0
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	429a      	cmp	r2, r3
 8004772:	d302      	bcc.n	800477a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e051      	b.n	8004822 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2204      	movs	r2, #4
 8004786:	4013      	ands	r3, r2
 8004788:	d03b      	beq.n	8004802 <UART_WaitOnFlagUntilTimeout+0xb6>
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2b80      	cmp	r3, #128	@ 0x80
 800478e:	d038      	beq.n	8004802 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b40      	cmp	r3, #64	@ 0x40
 8004794:	d035      	beq.n	8004802 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	2208      	movs	r2, #8
 800479e:	4013      	ands	r3, r2
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d111      	bne.n	80047c8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2208      	movs	r2, #8
 80047aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	0018      	movs	r0, r3
 80047b0:	f000 f960 	bl	8004a74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2290      	movs	r2, #144	@ 0x90
 80047b8:	2108      	movs	r1, #8
 80047ba:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2284      	movs	r2, #132	@ 0x84
 80047c0:	2100      	movs	r1, #0
 80047c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e02c      	b.n	8004822 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69da      	ldr	r2, [r3, #28]
 80047ce:	2380      	movs	r3, #128	@ 0x80
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	401a      	ands	r2, r3
 80047d4:	2380      	movs	r3, #128	@ 0x80
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	429a      	cmp	r2, r3
 80047da:	d112      	bne.n	8004802 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2280      	movs	r2, #128	@ 0x80
 80047e2:	0112      	lsls	r2, r2, #4
 80047e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	0018      	movs	r0, r3
 80047ea:	f000 f943 	bl	8004a74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2290      	movs	r2, #144	@ 0x90
 80047f2:	2120      	movs	r1, #32
 80047f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2284      	movs	r2, #132	@ 0x84
 80047fa:	2100      	movs	r1, #0
 80047fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e00f      	b.n	8004822 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	4013      	ands	r3, r2
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	425a      	negs	r2, r3
 8004812:	4153      	adcs	r3, r2
 8004814:	b2db      	uxtb	r3, r3
 8004816:	001a      	movs	r2, r3
 8004818:	1dfb      	adds	r3, r7, #7
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d09e      	beq.n	800475e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	0018      	movs	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	b004      	add	sp, #16
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b098      	sub	sp, #96	@ 0x60
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	1dbb      	adds	r3, r7, #6
 8004838:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	1dba      	adds	r2, r7, #6
 8004844:	215c      	movs	r1, #92	@ 0x5c
 8004846:	8812      	ldrh	r2, [r2, #0]
 8004848:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	1dba      	adds	r2, r7, #6
 800484e:	215e      	movs	r1, #94	@ 0x5e
 8004850:	8812      	ldrh	r2, [r2, #0]
 8004852:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	2380      	movs	r3, #128	@ 0x80
 8004860:	015b      	lsls	r3, r3, #5
 8004862:	429a      	cmp	r2, r3
 8004864:	d10d      	bne.n	8004882 <UART_Start_Receive_IT+0x56>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d104      	bne.n	8004878 <UART_Start_Receive_IT+0x4c>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2260      	movs	r2, #96	@ 0x60
 8004872:	497b      	ldr	r1, [pc, #492]	@ (8004a60 <UART_Start_Receive_IT+0x234>)
 8004874:	5299      	strh	r1, [r3, r2]
 8004876:	e02e      	b.n	80048d6 <UART_Start_Receive_IT+0xaa>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2260      	movs	r2, #96	@ 0x60
 800487c:	21ff      	movs	r1, #255	@ 0xff
 800487e:	5299      	strh	r1, [r3, r2]
 8004880:	e029      	b.n	80048d6 <UART_Start_Receive_IT+0xaa>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10d      	bne.n	80048a6 <UART_Start_Receive_IT+0x7a>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d104      	bne.n	800489c <UART_Start_Receive_IT+0x70>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2260      	movs	r2, #96	@ 0x60
 8004896:	21ff      	movs	r1, #255	@ 0xff
 8004898:	5299      	strh	r1, [r3, r2]
 800489a:	e01c      	b.n	80048d6 <UART_Start_Receive_IT+0xaa>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2260      	movs	r2, #96	@ 0x60
 80048a0:	217f      	movs	r1, #127	@ 0x7f
 80048a2:	5299      	strh	r1, [r3, r2]
 80048a4:	e017      	b.n	80048d6 <UART_Start_Receive_IT+0xaa>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689a      	ldr	r2, [r3, #8]
 80048aa:	2380      	movs	r3, #128	@ 0x80
 80048ac:	055b      	lsls	r3, r3, #21
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d10d      	bne.n	80048ce <UART_Start_Receive_IT+0xa2>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d104      	bne.n	80048c4 <UART_Start_Receive_IT+0x98>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2260      	movs	r2, #96	@ 0x60
 80048be:	217f      	movs	r1, #127	@ 0x7f
 80048c0:	5299      	strh	r1, [r3, r2]
 80048c2:	e008      	b.n	80048d6 <UART_Start_Receive_IT+0xaa>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2260      	movs	r2, #96	@ 0x60
 80048c8:	213f      	movs	r1, #63	@ 0x3f
 80048ca:	5299      	strh	r1, [r3, r2]
 80048cc:	e003      	b.n	80048d6 <UART_Start_Receive_IT+0xaa>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2260      	movs	r2, #96	@ 0x60
 80048d2:	2100      	movs	r1, #0
 80048d4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2290      	movs	r2, #144	@ 0x90
 80048da:	2100      	movs	r1, #0
 80048dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	228c      	movs	r2, #140	@ 0x8c
 80048e2:	2122      	movs	r1, #34	@ 0x22
 80048e4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e6:	f3ef 8310 	mrs	r3, PRIMASK
 80048ea:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 80048ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048f0:	2301      	movs	r3, #1
 80048f2:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048f6:	f383 8810 	msr	PRIMASK, r3
}
 80048fa:	46c0      	nop			@ (mov r8, r8)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2101      	movs	r1, #1
 8004908:	430a      	orrs	r2, r1
 800490a:	609a      	str	r2, [r3, #8]
 800490c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800490e:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004912:	f383 8810 	msr	PRIMASK, r3
}
 8004916:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800491c:	2380      	movs	r3, #128	@ 0x80
 800491e:	059b      	lsls	r3, r3, #22
 8004920:	429a      	cmp	r2, r3
 8004922:	d150      	bne.n	80049c6 <UART_Start_Receive_IT+0x19a>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2268      	movs	r2, #104	@ 0x68
 8004928:	5a9b      	ldrh	r3, [r3, r2]
 800492a:	1dba      	adds	r2, r7, #6
 800492c:	8812      	ldrh	r2, [r2, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d349      	bcc.n	80049c6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	2380      	movs	r3, #128	@ 0x80
 8004938:	015b      	lsls	r3, r3, #5
 800493a:	429a      	cmp	r2, r3
 800493c:	d107      	bne.n	800494e <UART_Start_Receive_IT+0x122>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d103      	bne.n	800494e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4a46      	ldr	r2, [pc, #280]	@ (8004a64 <UART_Start_Receive_IT+0x238>)
 800494a:	675a      	str	r2, [r3, #116]	@ 0x74
 800494c:	e002      	b.n	8004954 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a45      	ldr	r2, [pc, #276]	@ (8004a68 <UART_Start_Receive_IT+0x23c>)
 8004952:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d019      	beq.n	8004990 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800495c:	f3ef 8310 	mrs	r3, PRIMASK
 8004960:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8004962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004964:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004966:	2301      	movs	r3, #1
 8004968:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800496c:	f383 8810 	msr	PRIMASK, r3
}
 8004970:	46c0      	nop			@ (mov r8, r8)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2180      	movs	r1, #128	@ 0x80
 800497e:	0049      	lsls	r1, r1, #1
 8004980:	430a      	orrs	r2, r1
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800498a:	f383 8810 	msr	PRIMASK, r3
}
 800498e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004990:	f3ef 8310 	mrs	r3, PRIMASK
 8004994:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004998:	657b      	str	r3, [r7, #84]	@ 0x54
 800499a:	2301      	movs	r3, #1
 800499c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a0:	f383 8810 	msr	PRIMASK, r3
}
 80049a4:	46c0      	nop			@ (mov r8, r8)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2180      	movs	r1, #128	@ 0x80
 80049b2:	0549      	lsls	r1, r1, #21
 80049b4:	430a      	orrs	r2, r1
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049ba:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049be:	f383 8810 	msr	PRIMASK, r3
}
 80049c2:	46c0      	nop			@ (mov r8, r8)
 80049c4:	e047      	b.n	8004a56 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	2380      	movs	r3, #128	@ 0x80
 80049cc:	015b      	lsls	r3, r3, #5
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d107      	bne.n	80049e2 <UART_Start_Receive_IT+0x1b6>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d103      	bne.n	80049e2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a23      	ldr	r2, [pc, #140]	@ (8004a6c <UART_Start_Receive_IT+0x240>)
 80049de:	675a      	str	r2, [r3, #116]	@ 0x74
 80049e0:	e002      	b.n	80049e8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4a22      	ldr	r2, [pc, #136]	@ (8004a70 <UART_Start_Receive_IT+0x244>)
 80049e6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d019      	beq.n	8004a24 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049f0:	f3ef 8310 	mrs	r3, PRIMASK
 80049f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80049f6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80049f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049fa:	2301      	movs	r3, #1
 80049fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	f383 8810 	msr	PRIMASK, r3
}
 8004a04:	46c0      	nop			@ (mov r8, r8)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2190      	movs	r1, #144	@ 0x90
 8004a12:	0049      	lsls	r1, r1, #1
 8004a14:	430a      	orrs	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	f383 8810 	msr	PRIMASK, r3
}
 8004a22:	e018      	b.n	8004a56 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a24:	f3ef 8310 	mrs	r3, PRIMASK
 8004a28:	613b      	str	r3, [r7, #16]
  return(result);
 8004a2a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004a2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a2e:	2301      	movs	r3, #1
 8004a30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f383 8810 	msr	PRIMASK, r3
}
 8004a38:	46c0      	nop			@ (mov r8, r8)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2120      	movs	r1, #32
 8004a46:	430a      	orrs	r2, r1
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	f383 8810 	msr	PRIMASK, r3
}
 8004a54:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	0018      	movs	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b018      	add	sp, #96	@ 0x60
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	000001ff 	.word	0x000001ff
 8004a64:	08005291 	.word	0x08005291
 8004a68:	08004f51 	.word	0x08004f51
 8004a6c:	08004d8d 	.word	0x08004d8d
 8004a70:	08004bc9 	.word	0x08004bc9

08004a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b08e      	sub	sp, #56	@ 0x38
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a80:	617b      	str	r3, [r7, #20]
  return(result);
 8004a82:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a86:	2301      	movs	r3, #1
 8004a88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	f383 8810 	msr	PRIMASK, r3
}
 8004a90:	46c0      	nop			@ (mov r8, r8)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4926      	ldr	r1, [pc, #152]	@ (8004b38 <UART_EndRxTransfer+0xc4>)
 8004a9e:	400a      	ands	r2, r1
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	f383 8810 	msr	PRIMASK, r3
}
 8004aac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aae:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab2:	623b      	str	r3, [r7, #32]
  return(result);
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ab6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ab8:	2301      	movs	r3, #1
 8004aba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abe:	f383 8810 	msr	PRIMASK, r3
}
 8004ac2:	46c0      	nop			@ (mov r8, r8)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	491b      	ldr	r1, [pc, #108]	@ (8004b3c <UART_EndRxTransfer+0xc8>)
 8004ad0:	400a      	ands	r2, r1
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ada:	f383 8810 	msr	PRIMASK, r3
}
 8004ade:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d118      	bne.n	8004b1a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8004aec:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004af2:	2301      	movs	r3, #1
 8004af4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f383 8810 	msr	PRIMASK, r3
}
 8004afc:	46c0      	nop			@ (mov r8, r8)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2110      	movs	r1, #16
 8004b0a:	438a      	bics	r2, r1
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f383 8810 	msr	PRIMASK, r3
}
 8004b18:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	228c      	movs	r2, #140	@ 0x8c
 8004b1e:	2120      	movs	r1, #32
 8004b20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004b2e:	46c0      	nop			@ (mov r8, r8)
 8004b30:	46bd      	mov	sp, r7
 8004b32:	b00e      	add	sp, #56	@ 0x38
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	46c0      	nop			@ (mov r8, r8)
 8004b38:	fffffedf 	.word	0xfffffedf
 8004b3c:	effffffe 	.word	0xeffffffe

08004b40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	225e      	movs	r2, #94	@ 0x5e
 8004b52:	2100      	movs	r1, #0
 8004b54:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2256      	movs	r2, #86	@ 0x56
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	0018      	movs	r0, r3
 8004b62:	f7ff f9c3 	bl	8003eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b66:	46c0      	nop			@ (mov r8, r8)
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b004      	add	sp, #16
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b086      	sub	sp, #24
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b76:	f3ef 8310 	mrs	r3, PRIMASK
 8004b7a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b7c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	2301      	movs	r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f383 8810 	msr	PRIMASK, r3
}
 8004b8a:	46c0      	nop			@ (mov r8, r8)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2140      	movs	r1, #64	@ 0x40
 8004b98:	438a      	bics	r2, r1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f383 8810 	msr	PRIMASK, r3
}
 8004ba6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2288      	movs	r2, #136	@ 0x88
 8004bac:	2120      	movs	r1, #32
 8004bae:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f7ff f98f 	bl	8003edc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bbe:	46c0      	nop			@ (mov r8, r8)
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b006      	add	sp, #24
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b094      	sub	sp, #80	@ 0x50
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004bd0:	204e      	movs	r0, #78	@ 0x4e
 8004bd2:	183b      	adds	r3, r7, r0
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	2160      	movs	r1, #96	@ 0x60
 8004bd8:	5a52      	ldrh	r2, [r2, r1]
 8004bda:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	228c      	movs	r2, #140	@ 0x8c
 8004be0:	589b      	ldr	r3, [r3, r2]
 8004be2:	2b22      	cmp	r3, #34	@ 0x22
 8004be4:	d000      	beq.n	8004be8 <UART_RxISR_8BIT+0x20>
 8004be6:	e0bf      	b.n	8004d68 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bee:	214c      	movs	r1, #76	@ 0x4c
 8004bf0:	187b      	adds	r3, r7, r1
 8004bf2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004bf4:	187b      	adds	r3, r7, r1
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	183b      	adds	r3, r7, r0
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	b2d9      	uxtb	r1, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c04:	400a      	ands	r2, r1
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	225e      	movs	r2, #94	@ 0x5e
 8004c18:	5a9b      	ldrh	r3, [r3, r2]
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b299      	uxth	r1, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	225e      	movs	r2, #94	@ 0x5e
 8004c24:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	225e      	movs	r2, #94	@ 0x5e
 8004c2a:	5a9b      	ldrh	r3, [r3, r2]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d000      	beq.n	8004c34 <UART_RxISR_8BIT+0x6c>
 8004c32:	e0a1      	b.n	8004d78 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c34:	f3ef 8310 	mrs	r3, PRIMASK
 8004c38:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c3e:	2301      	movs	r3, #1
 8004c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c44:	f383 8810 	msr	PRIMASK, r3
}
 8004c48:	46c0      	nop			@ (mov r8, r8)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	494a      	ldr	r1, [pc, #296]	@ (8004d80 <UART_RxISR_8BIT+0x1b8>)
 8004c56:	400a      	ands	r2, r1
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c60:	f383 8810 	msr	PRIMASK, r3
}
 8004c64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c66:	f3ef 8310 	mrs	r3, PRIMASK
 8004c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c70:	2301      	movs	r3, #1
 8004c72:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c76:	f383 8810 	msr	PRIMASK, r3
}
 8004c7a:	46c0      	nop			@ (mov r8, r8)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2101      	movs	r1, #1
 8004c88:	438a      	bics	r2, r1
 8004c8a:	609a      	str	r2, [r3, #8]
 8004c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c92:	f383 8810 	msr	PRIMASK, r3
}
 8004c96:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	228c      	movs	r2, #140	@ 0x8c
 8004c9c:	2120      	movs	r1, #32
 8004c9e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a34      	ldr	r2, [pc, #208]	@ (8004d84 <UART_RxISR_8BIT+0x1bc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d01f      	beq.n	8004cf6 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	685a      	ldr	r2, [r3, #4]
 8004cbc:	2380      	movs	r3, #128	@ 0x80
 8004cbe:	041b      	lsls	r3, r3, #16
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d018      	beq.n	8004cf6 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc8:	61bb      	str	r3, [r7, #24]
  return(result);
 8004cca:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ccc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cce:	2301      	movs	r3, #1
 8004cd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	f383 8810 	msr	PRIMASK, r3
}
 8004cd8:	46c0      	nop			@ (mov r8, r8)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4928      	ldr	r1, [pc, #160]	@ (8004d88 <UART_RxISR_8BIT+0x1c0>)
 8004ce6:	400a      	ands	r2, r1
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	f383 8810 	msr	PRIMASK, r3
}
 8004cf4:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d12f      	bne.n	8004d5e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d04:	f3ef 8310 	mrs	r3, PRIMASK
 8004d08:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d0a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d0e:	2301      	movs	r3, #1
 8004d10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f383 8810 	msr	PRIMASK, r3
}
 8004d18:	46c0      	nop			@ (mov r8, r8)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2110      	movs	r1, #16
 8004d26:	438a      	bics	r2, r1
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f383 8810 	msr	PRIMASK, r3
}
 8004d34:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	2210      	movs	r2, #16
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b10      	cmp	r3, #16
 8004d42:	d103      	bne.n	8004d4c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2210      	movs	r2, #16
 8004d4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	225c      	movs	r2, #92	@ 0x5c
 8004d50:	5a9a      	ldrh	r2, [r3, r2]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	0011      	movs	r1, r2
 8004d56:	0018      	movs	r0, r3
 8004d58:	f7ff f8d0 	bl	8003efc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d5c:	e00c      	b.n	8004d78 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f7fb ff7d 	bl	8000c60 <HAL_UART_RxCpltCallback>
}
 8004d66:	e007      	b.n	8004d78 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699a      	ldr	r2, [r3, #24]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2108      	movs	r1, #8
 8004d74:	430a      	orrs	r2, r1
 8004d76:	619a      	str	r2, [r3, #24]
}
 8004d78:	46c0      	nop			@ (mov r8, r8)
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b014      	add	sp, #80	@ 0x50
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	fffffedf 	.word	0xfffffedf
 8004d84:	40008000 	.word	0x40008000
 8004d88:	fbffffff 	.word	0xfbffffff

08004d8c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b094      	sub	sp, #80	@ 0x50
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004d94:	204e      	movs	r0, #78	@ 0x4e
 8004d96:	183b      	adds	r3, r7, r0
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	2160      	movs	r1, #96	@ 0x60
 8004d9c:	5a52      	ldrh	r2, [r2, r1]
 8004d9e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	228c      	movs	r2, #140	@ 0x8c
 8004da4:	589b      	ldr	r3, [r3, r2]
 8004da6:	2b22      	cmp	r3, #34	@ 0x22
 8004da8:	d000      	beq.n	8004dac <UART_RxISR_16BIT+0x20>
 8004daa:	e0bf      	b.n	8004f2c <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004db2:	214c      	movs	r1, #76	@ 0x4c
 8004db4:	187b      	adds	r3, r7, r1
 8004db6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004dbe:	187b      	adds	r3, r7, r1
 8004dc0:	183a      	adds	r2, r7, r0
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	8812      	ldrh	r2, [r2, #0]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dcc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd2:	1c9a      	adds	r2, r3, #2
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	225e      	movs	r2, #94	@ 0x5e
 8004ddc:	5a9b      	ldrh	r3, [r3, r2]
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b299      	uxth	r1, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	225e      	movs	r2, #94	@ 0x5e
 8004de8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	225e      	movs	r2, #94	@ 0x5e
 8004dee:	5a9b      	ldrh	r3, [r3, r2]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d000      	beq.n	8004df8 <UART_RxISR_16BIT+0x6c>
 8004df6:	e0a1      	b.n	8004f3c <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dfc:	623b      	str	r3, [r7, #32]
  return(result);
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e00:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e02:	2301      	movs	r3, #1
 8004e04:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	f383 8810 	msr	PRIMASK, r3
}
 8004e0c:	46c0      	nop			@ (mov r8, r8)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	494a      	ldr	r1, [pc, #296]	@ (8004f44 <UART_RxISR_16BIT+0x1b8>)
 8004e1a:	400a      	ands	r2, r1
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e24:	f383 8810 	msr	PRIMASK, r3
}
 8004e28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e32:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e34:	2301      	movs	r3, #1
 8004e36:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3a:	f383 8810 	msr	PRIMASK, r3
}
 8004e3e:	46c0      	nop			@ (mov r8, r8)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	438a      	bics	r2, r1
 8004e4e:	609a      	str	r2, [r3, #8]
 8004e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e52:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e56:	f383 8810 	msr	PRIMASK, r3
}
 8004e5a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	228c      	movs	r2, #140	@ 0x8c
 8004e60:	2120      	movs	r1, #32
 8004e62:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a34      	ldr	r2, [pc, #208]	@ (8004f48 <UART_RxISR_16BIT+0x1bc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d01f      	beq.n	8004eba <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	2380      	movs	r3, #128	@ 0x80
 8004e82:	041b      	lsls	r3, r3, #16
 8004e84:	4013      	ands	r3, r2
 8004e86:	d018      	beq.n	8004eba <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e88:	f3ef 8310 	mrs	r3, PRIMASK
 8004e8c:	617b      	str	r3, [r7, #20]
  return(result);
 8004e8e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e92:	2301      	movs	r3, #1
 8004e94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	f383 8810 	msr	PRIMASK, r3
}
 8004e9c:	46c0      	nop			@ (mov r8, r8)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4928      	ldr	r1, [pc, #160]	@ (8004f4c <UART_RxISR_16BIT+0x1c0>)
 8004eaa:	400a      	ands	r2, r1
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	f383 8810 	msr	PRIMASK, r3
}
 8004eb8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d12f      	bne.n	8004f22 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8004ecc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ece:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f383 8810 	msr	PRIMASK, r3
}
 8004edc:	46c0      	nop			@ (mov r8, r8)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2110      	movs	r1, #16
 8004eea:	438a      	bics	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f383 8810 	msr	PRIMASK, r3
}
 8004ef8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	2210      	movs	r2, #16
 8004f02:	4013      	ands	r3, r2
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d103      	bne.n	8004f10 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2210      	movs	r2, #16
 8004f0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	225c      	movs	r2, #92	@ 0x5c
 8004f14:	5a9a      	ldrh	r2, [r3, r2]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	0011      	movs	r1, r2
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f7fe ffee 	bl	8003efc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f20:	e00c      	b.n	8004f3c <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	0018      	movs	r0, r3
 8004f26:	f7fb fe9b 	bl	8000c60 <HAL_UART_RxCpltCallback>
}
 8004f2a:	e007      	b.n	8004f3c <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699a      	ldr	r2, [r3, #24]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2108      	movs	r1, #8
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	619a      	str	r2, [r3, #24]
}
 8004f3c:	46c0      	nop			@ (mov r8, r8)
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b014      	add	sp, #80	@ 0x50
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	fffffedf 	.word	0xfffffedf
 8004f48:	40008000 	.word	0x40008000
 8004f4c:	fbffffff 	.word	0xfbffffff

08004f50 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b0a0      	sub	sp, #128	@ 0x80
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004f58:	237a      	movs	r3, #122	@ 0x7a
 8004f5a:	18fb      	adds	r3, r7, r3
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	2160      	movs	r1, #96	@ 0x60
 8004f60:	5a52      	ldrh	r2, [r2, r1]
 8004f62:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	228c      	movs	r2, #140	@ 0x8c
 8004f80:	589b      	ldr	r3, [r3, r2]
 8004f82:	2b22      	cmp	r3, #34	@ 0x22
 8004f84:	d000      	beq.n	8004f88 <UART_RxISR_8BIT_FIFOEN+0x38>
 8004f86:	e16a      	b.n	800525e <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004f88:	236e      	movs	r3, #110	@ 0x6e
 8004f8a:	18fb      	adds	r3, r7, r3
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	2168      	movs	r1, #104	@ 0x68
 8004f90:	5a52      	ldrh	r2, [r2, r1]
 8004f92:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004f94:	e111      	b.n	80051ba <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f9c:	216c      	movs	r1, #108	@ 0x6c
 8004f9e:	187b      	adds	r3, r7, r1
 8004fa0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004fa2:	187b      	adds	r3, r7, r1
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	237a      	movs	r3, #122	@ 0x7a
 8004faa:	18fb      	adds	r3, r7, r3
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b2d9      	uxtb	r1, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb4:	400a      	ands	r2, r1
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	225e      	movs	r2, #94	@ 0x5e
 8004fc8:	5a9b      	ldrh	r3, [r3, r2]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b299      	uxth	r1, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	225e      	movs	r2, #94	@ 0x5e
 8004fd4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004fde:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fe0:	2207      	movs	r2, #7
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d049      	beq.n	800507a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fe6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004fe8:	2201      	movs	r2, #1
 8004fea:	4013      	ands	r3, r2
 8004fec:	d010      	beq.n	8005010 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004fee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004ff0:	2380      	movs	r3, #128	@ 0x80
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d00b      	beq.n	8005010 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2290      	movs	r2, #144	@ 0x90
 8005004:	589b      	ldr	r3, [r3, r2]
 8005006:	2201      	movs	r2, #1
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2190      	movs	r1, #144	@ 0x90
 800500e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005010:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005012:	2202      	movs	r2, #2
 8005014:	4013      	ands	r3, r2
 8005016:	d00f      	beq.n	8005038 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005018:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800501a:	2201      	movs	r2, #1
 800501c:	4013      	ands	r3, r2
 800501e:	d00b      	beq.n	8005038 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2202      	movs	r2, #2
 8005026:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2290      	movs	r2, #144	@ 0x90
 800502c:	589b      	ldr	r3, [r3, r2]
 800502e:	2204      	movs	r2, #4
 8005030:	431a      	orrs	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2190      	movs	r1, #144	@ 0x90
 8005036:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005038:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800503a:	2204      	movs	r2, #4
 800503c:	4013      	ands	r3, r2
 800503e:	d00f      	beq.n	8005060 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005040:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005042:	2201      	movs	r2, #1
 8005044:	4013      	ands	r3, r2
 8005046:	d00b      	beq.n	8005060 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2204      	movs	r2, #4
 800504e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2290      	movs	r2, #144	@ 0x90
 8005054:	589b      	ldr	r3, [r3, r2]
 8005056:	2202      	movs	r2, #2
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2190      	movs	r1, #144	@ 0x90
 800505e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2290      	movs	r2, #144	@ 0x90
 8005064:	589b      	ldr	r3, [r3, r2]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d007      	beq.n	800507a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	0018      	movs	r0, r3
 800506e:	f7fe ff3d 	bl	8003eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2290      	movs	r2, #144	@ 0x90
 8005076:	2100      	movs	r1, #0
 8005078:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	225e      	movs	r2, #94	@ 0x5e
 800507e:	5a9b      	ldrh	r3, [r3, r2]
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d000      	beq.n	8005088 <UART_RxISR_8BIT_FIFOEN+0x138>
 8005086:	e098      	b.n	80051ba <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005088:	f3ef 8310 	mrs	r3, PRIMASK
 800508c:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800508e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005090:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005092:	2301      	movs	r3, #1
 8005094:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005098:	f383 8810 	msr	PRIMASK, r3
}
 800509c:	46c0      	nop			@ (mov r8, r8)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4973      	ldr	r1, [pc, #460]	@ (8005278 <UART_RxISR_8BIT_FIFOEN+0x328>)
 80050aa:	400a      	ands	r2, r1
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050b0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050b4:	f383 8810 	msr	PRIMASK, r3
}
 80050b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ba:	f3ef 8310 	mrs	r3, PRIMASK
 80050be:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80050c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80050c4:	2301      	movs	r3, #1
 80050c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050ca:	f383 8810 	msr	PRIMASK, r3
}
 80050ce:	46c0      	nop			@ (mov r8, r8)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4968      	ldr	r1, [pc, #416]	@ (800527c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80050dc:	400a      	ands	r2, r1
 80050de:	609a      	str	r2, [r3, #8]
 80050e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050e6:	f383 8810 	msr	PRIMASK, r3
}
 80050ea:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	228c      	movs	r2, #140	@ 0x8c
 80050f0:	2120      	movs	r1, #32
 80050f2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a5e      	ldr	r2, [pc, #376]	@ (8005280 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d01f      	beq.n	800514a <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	2380      	movs	r3, #128	@ 0x80
 8005112:	041b      	lsls	r3, r3, #16
 8005114:	4013      	ands	r3, r2
 8005116:	d018      	beq.n	800514a <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005118:	f3ef 8310 	mrs	r3, PRIMASK
 800511c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800511e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005120:	663b      	str	r3, [r7, #96]	@ 0x60
 8005122:	2301      	movs	r3, #1
 8005124:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005128:	f383 8810 	msr	PRIMASK, r3
}
 800512c:	46c0      	nop			@ (mov r8, r8)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4952      	ldr	r1, [pc, #328]	@ (8005284 <UART_RxISR_8BIT_FIFOEN+0x334>)
 800513a:	400a      	ands	r2, r1
 800513c:	601a      	str	r2, [r3, #0]
 800513e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005140:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005144:	f383 8810 	msr	PRIMASK, r3
}
 8005148:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800514e:	2b01      	cmp	r3, #1
 8005150:	d12f      	bne.n	80051b2 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005158:	f3ef 8310 	mrs	r3, PRIMASK
 800515c:	623b      	str	r3, [r7, #32]
  return(result);
 800515e:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005160:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005162:	2301      	movs	r3, #1
 8005164:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005168:	f383 8810 	msr	PRIMASK, r3
}
 800516c:	46c0      	nop			@ (mov r8, r8)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2110      	movs	r1, #16
 800517a:	438a      	bics	r2, r1
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005180:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005184:	f383 8810 	msr	PRIMASK, r3
}
 8005188:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	2210      	movs	r2, #16
 8005192:	4013      	ands	r3, r2
 8005194:	2b10      	cmp	r3, #16
 8005196:	d103      	bne.n	80051a0 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2210      	movs	r2, #16
 800519e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	225c      	movs	r2, #92	@ 0x5c
 80051a4:	5a9a      	ldrh	r2, [r3, r2]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	0011      	movs	r1, r2
 80051aa:	0018      	movs	r0, r3
 80051ac:	f7fe fea6 	bl	8003efc <HAL_UARTEx_RxEventCallback>
 80051b0:	e003      	b.n	80051ba <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	0018      	movs	r0, r3
 80051b6:	f7fb fd53 	bl	8000c60 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051ba:	236e      	movs	r3, #110	@ 0x6e
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d004      	beq.n	80051ce <UART_RxISR_8BIT_FIFOEN+0x27e>
 80051c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051c6:	2220      	movs	r2, #32
 80051c8:	4013      	ands	r3, r2
 80051ca:	d000      	beq.n	80051ce <UART_RxISR_8BIT_FIFOEN+0x27e>
 80051cc:	e6e3      	b.n	8004f96 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80051ce:	205a      	movs	r0, #90	@ 0x5a
 80051d0:	183b      	adds	r3, r7, r0
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	215e      	movs	r1, #94	@ 0x5e
 80051d6:	5a52      	ldrh	r2, [r2, r1]
 80051d8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80051da:	0001      	movs	r1, r0
 80051dc:	187b      	adds	r3, r7, r1
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d044      	beq.n	800526e <UART_RxISR_8BIT_FIFOEN+0x31e>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2268      	movs	r2, #104	@ 0x68
 80051e8:	5a9b      	ldrh	r3, [r3, r2]
 80051ea:	187a      	adds	r2, r7, r1
 80051ec:	8812      	ldrh	r2, [r2, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d23d      	bcs.n	800526e <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051f2:	f3ef 8310 	mrs	r3, PRIMASK
 80051f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80051f8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80051fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80051fc:	2301      	movs	r3, #1
 80051fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f383 8810 	msr	PRIMASK, r3
}
 8005206:	46c0      	nop			@ (mov r8, r8)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	491d      	ldr	r1, [pc, #116]	@ (8005288 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8005214:	400a      	ands	r2, r1
 8005216:	609a      	str	r2, [r3, #8]
 8005218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800521a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f383 8810 	msr	PRIMASK, r3
}
 8005222:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a19      	ldr	r2, [pc, #100]	@ (800528c <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8005228:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800522a:	f3ef 8310 	mrs	r3, PRIMASK
 800522e:	617b      	str	r3, [r7, #20]
  return(result);
 8005230:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005232:	653b      	str	r3, [r7, #80]	@ 0x50
 8005234:	2301      	movs	r3, #1
 8005236:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	f383 8810 	msr	PRIMASK, r3
}
 800523e:	46c0      	nop			@ (mov r8, r8)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2120      	movs	r1, #32
 800524c:	430a      	orrs	r2, r1
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005252:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f383 8810 	msr	PRIMASK, r3
}
 800525a:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800525c:	e007      	b.n	800526e <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	699a      	ldr	r2, [r3, #24]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2108      	movs	r1, #8
 800526a:	430a      	orrs	r2, r1
 800526c:	619a      	str	r2, [r3, #24]
}
 800526e:	46c0      	nop			@ (mov r8, r8)
 8005270:	46bd      	mov	sp, r7
 8005272:	b020      	add	sp, #128	@ 0x80
 8005274:	bd80      	pop	{r7, pc}
 8005276:	46c0      	nop			@ (mov r8, r8)
 8005278:	fffffeff 	.word	0xfffffeff
 800527c:	effffffe 	.word	0xeffffffe
 8005280:	40008000 	.word	0x40008000
 8005284:	fbffffff 	.word	0xfbffffff
 8005288:	efffffff 	.word	0xefffffff
 800528c:	08004bc9 	.word	0x08004bc9

08005290 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b0a2      	sub	sp, #136	@ 0x88
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005298:	2382      	movs	r3, #130	@ 0x82
 800529a:	18fb      	adds	r3, r7, r3
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	2160      	movs	r1, #96	@ 0x60
 80052a0:	5a52      	ldrh	r2, [r2, r1]
 80052a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	2284      	movs	r2, #132	@ 0x84
 80052ac:	18ba      	adds	r2, r7, r2
 80052ae:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	228c      	movs	r2, #140	@ 0x8c
 80052c4:	589b      	ldr	r3, [r3, r2]
 80052c6:	2b22      	cmp	r3, #34	@ 0x22
 80052c8:	d000      	beq.n	80052cc <UART_RxISR_16BIT_FIFOEN+0x3c>
 80052ca:	e174      	b.n	80055b6 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80052cc:	2376      	movs	r3, #118	@ 0x76
 80052ce:	18fb      	adds	r3, r7, r3
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	2168      	movs	r1, #104	@ 0x68
 80052d4:	5a52      	ldrh	r2, [r2, r1]
 80052d6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80052d8:	e119      	b.n	800550e <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052e0:	2174      	movs	r1, #116	@ 0x74
 80052e2:	187b      	adds	r3, r7, r1
 80052e4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ea:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80052ec:	187b      	adds	r3, r7, r1
 80052ee:	2282      	movs	r2, #130	@ 0x82
 80052f0:	18ba      	adds	r2, r7, r2
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	8812      	ldrh	r2, [r2, #0]
 80052f6:	4013      	ands	r3, r2
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005302:	1c9a      	adds	r2, r3, #2
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	225e      	movs	r2, #94	@ 0x5e
 800530c:	5a9b      	ldrh	r3, [r3, r2]
 800530e:	b29b      	uxth	r3, r3
 8005310:	3b01      	subs	r3, #1
 8005312:	b299      	uxth	r1, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	225e      	movs	r2, #94	@ 0x5e
 8005318:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	2184      	movs	r1, #132	@ 0x84
 8005322:	187a      	adds	r2, r7, r1
 8005324:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005326:	187b      	adds	r3, r7, r1
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2207      	movs	r2, #7
 800532c:	4013      	ands	r3, r2
 800532e:	d04e      	beq.n	80053ce <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005330:	187b      	adds	r3, r7, r1
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2201      	movs	r2, #1
 8005336:	4013      	ands	r3, r2
 8005338:	d010      	beq.n	800535c <UART_RxISR_16BIT_FIFOEN+0xcc>
 800533a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800533c:	2380      	movs	r3, #128	@ 0x80
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	4013      	ands	r3, r2
 8005342:	d00b      	beq.n	800535c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2201      	movs	r2, #1
 800534a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2290      	movs	r2, #144	@ 0x90
 8005350:	589b      	ldr	r3, [r3, r2]
 8005352:	2201      	movs	r2, #1
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2190      	movs	r1, #144	@ 0x90
 800535a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800535c:	2384      	movs	r3, #132	@ 0x84
 800535e:	18fb      	adds	r3, r7, r3
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2202      	movs	r2, #2
 8005364:	4013      	ands	r3, r2
 8005366:	d00f      	beq.n	8005388 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005368:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800536a:	2201      	movs	r2, #1
 800536c:	4013      	ands	r3, r2
 800536e:	d00b      	beq.n	8005388 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2202      	movs	r2, #2
 8005376:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2290      	movs	r2, #144	@ 0x90
 800537c:	589b      	ldr	r3, [r3, r2]
 800537e:	2204      	movs	r2, #4
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2190      	movs	r1, #144	@ 0x90
 8005386:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005388:	2384      	movs	r3, #132	@ 0x84
 800538a:	18fb      	adds	r3, r7, r3
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2204      	movs	r2, #4
 8005390:	4013      	ands	r3, r2
 8005392:	d00f      	beq.n	80053b4 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005394:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005396:	2201      	movs	r2, #1
 8005398:	4013      	ands	r3, r2
 800539a:	d00b      	beq.n	80053b4 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2204      	movs	r2, #4
 80053a2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2290      	movs	r2, #144	@ 0x90
 80053a8:	589b      	ldr	r3, [r3, r2]
 80053aa:	2202      	movs	r2, #2
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2190      	movs	r1, #144	@ 0x90
 80053b2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2290      	movs	r2, #144	@ 0x90
 80053b8:	589b      	ldr	r3, [r3, r2]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d007      	beq.n	80053ce <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	0018      	movs	r0, r3
 80053c2:	f7fe fd93 	bl	8003eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2290      	movs	r2, #144	@ 0x90
 80053ca:	2100      	movs	r1, #0
 80053cc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	225e      	movs	r2, #94	@ 0x5e
 80053d2:	5a9b      	ldrh	r3, [r3, r2]
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d000      	beq.n	80053dc <UART_RxISR_16BIT_FIFOEN+0x14c>
 80053da:	e098      	b.n	800550e <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053dc:	f3ef 8310 	mrs	r3, PRIMASK
 80053e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80053e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053e6:	2301      	movs	r3, #1
 80053e8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053ec:	f383 8810 	msr	PRIMASK, r3
}
 80053f0:	46c0      	nop			@ (mov r8, r8)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4974      	ldr	r1, [pc, #464]	@ (80055d0 <UART_RxISR_16BIT_FIFOEN+0x340>)
 80053fe:	400a      	ands	r2, r1
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005404:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005406:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005408:	f383 8810 	msr	PRIMASK, r3
}
 800540c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800540e:	f3ef 8310 	mrs	r3, PRIMASK
 8005412:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005414:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005416:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005418:	2301      	movs	r3, #1
 800541a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800541c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800541e:	f383 8810 	msr	PRIMASK, r3
}
 8005422:	46c0      	nop			@ (mov r8, r8)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689a      	ldr	r2, [r3, #8]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4969      	ldr	r1, [pc, #420]	@ (80055d4 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005430:	400a      	ands	r2, r1
 8005432:	609a      	str	r2, [r3, #8]
 8005434:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005436:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005438:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800543a:	f383 8810 	msr	PRIMASK, r3
}
 800543e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	228c      	movs	r2, #140	@ 0x8c
 8005444:	2120      	movs	r1, #32
 8005446:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a5f      	ldr	r2, [pc, #380]	@ (80055d8 <UART_RxISR_16BIT_FIFOEN+0x348>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d01f      	beq.n	800549e <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	2380      	movs	r3, #128	@ 0x80
 8005466:	041b      	lsls	r3, r3, #16
 8005468:	4013      	ands	r3, r2
 800546a:	d018      	beq.n	800549e <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800546c:	f3ef 8310 	mrs	r3, PRIMASK
 8005470:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005474:	667b      	str	r3, [r7, #100]	@ 0x64
 8005476:	2301      	movs	r3, #1
 8005478:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800547c:	f383 8810 	msr	PRIMASK, r3
}
 8005480:	46c0      	nop			@ (mov r8, r8)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4953      	ldr	r1, [pc, #332]	@ (80055dc <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800548e:	400a      	ands	r2, r1
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005494:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005498:	f383 8810 	msr	PRIMASK, r3
}
 800549c:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d12f      	bne.n	8005506 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ac:	f3ef 8310 	mrs	r3, PRIMASK
 80054b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80054b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80054b6:	2301      	movs	r3, #1
 80054b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054bc:	f383 8810 	msr	PRIMASK, r3
}
 80054c0:	46c0      	nop			@ (mov r8, r8)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2110      	movs	r1, #16
 80054ce:	438a      	bics	r2, r1
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d8:	f383 8810 	msr	PRIMASK, r3
}
 80054dc:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	2210      	movs	r2, #16
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b10      	cmp	r3, #16
 80054ea:	d103      	bne.n	80054f4 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2210      	movs	r2, #16
 80054f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	225c      	movs	r2, #92	@ 0x5c
 80054f8:	5a9a      	ldrh	r2, [r3, r2]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	0011      	movs	r1, r2
 80054fe:	0018      	movs	r0, r3
 8005500:	f7fe fcfc 	bl	8003efc <HAL_UARTEx_RxEventCallback>
 8005504:	e003      	b.n	800550e <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	0018      	movs	r0, r3
 800550a:	f7fb fba9 	bl	8000c60 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800550e:	2376      	movs	r3, #118	@ 0x76
 8005510:	18fb      	adds	r3, r7, r3
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d006      	beq.n	8005526 <UART_RxISR_16BIT_FIFOEN+0x296>
 8005518:	2384      	movs	r3, #132	@ 0x84
 800551a:	18fb      	adds	r3, r7, r3
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2220      	movs	r2, #32
 8005520:	4013      	ands	r3, r2
 8005522:	d000      	beq.n	8005526 <UART_RxISR_16BIT_FIFOEN+0x296>
 8005524:	e6d9      	b.n	80052da <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005526:	205e      	movs	r0, #94	@ 0x5e
 8005528:	183b      	adds	r3, r7, r0
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	215e      	movs	r1, #94	@ 0x5e
 800552e:	5a52      	ldrh	r2, [r2, r1]
 8005530:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005532:	0001      	movs	r1, r0
 8005534:	187b      	adds	r3, r7, r1
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d044      	beq.n	80055c6 <UART_RxISR_16BIT_FIFOEN+0x336>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2268      	movs	r2, #104	@ 0x68
 8005540:	5a9b      	ldrh	r3, [r3, r2]
 8005542:	187a      	adds	r2, r7, r1
 8005544:	8812      	ldrh	r2, [r2, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d23d      	bcs.n	80055c6 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800554a:	f3ef 8310 	mrs	r3, PRIMASK
 800554e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005550:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005552:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005554:	2301      	movs	r3, #1
 8005556:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f383 8810 	msr	PRIMASK, r3
}
 800555e:	46c0      	nop			@ (mov r8, r8)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	491d      	ldr	r1, [pc, #116]	@ (80055e0 <UART_RxISR_16BIT_FIFOEN+0x350>)
 800556c:	400a      	ands	r2, r1
 800556e:	609a      	str	r2, [r3, #8]
 8005570:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005572:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f383 8810 	msr	PRIMASK, r3
}
 800557a:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a19      	ldr	r2, [pc, #100]	@ (80055e4 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8005580:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005582:	f3ef 8310 	mrs	r3, PRIMASK
 8005586:	61bb      	str	r3, [r7, #24]
  return(result);
 8005588:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800558a:	657b      	str	r3, [r7, #84]	@ 0x54
 800558c:	2301      	movs	r3, #1
 800558e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	f383 8810 	msr	PRIMASK, r3
}
 8005596:	46c0      	nop			@ (mov r8, r8)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2120      	movs	r1, #32
 80055a4:	430a      	orrs	r2, r1
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	f383 8810 	msr	PRIMASK, r3
}
 80055b2:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055b4:	e007      	b.n	80055c6 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	699a      	ldr	r2, [r3, #24]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2108      	movs	r1, #8
 80055c2:	430a      	orrs	r2, r1
 80055c4:	619a      	str	r2, [r3, #24]
}
 80055c6:	46c0      	nop			@ (mov r8, r8)
 80055c8:	46bd      	mov	sp, r7
 80055ca:	b022      	add	sp, #136	@ 0x88
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	46c0      	nop			@ (mov r8, r8)
 80055d0:	fffffeff 	.word	0xfffffeff
 80055d4:	effffffe 	.word	0xeffffffe
 80055d8:	40008000 	.word	0x40008000
 80055dc:	fbffffff 	.word	0xfbffffff
 80055e0:	efffffff 	.word	0xefffffff
 80055e4:	08004d8d 	.word	0x08004d8d

080055e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055f0:	46c0      	nop			@ (mov r8, r8)
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b002      	add	sp, #8
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005600:	46c0      	nop			@ (mov r8, r8)
 8005602:	46bd      	mov	sp, r7
 8005604:	b002      	add	sp, #8
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005610:	46c0      	nop			@ (mov r8, r8)
 8005612:	46bd      	mov	sp, r7
 8005614:	b002      	add	sp, #8
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2284      	movs	r2, #132	@ 0x84
 8005624:	5c9b      	ldrb	r3, [r3, r2]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_UARTEx_DisableFifoMode+0x16>
 800562a:	2302      	movs	r3, #2
 800562c:	e027      	b.n	800567e <HAL_UARTEx_DisableFifoMode+0x66>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2284      	movs	r2, #132	@ 0x84
 8005632:	2101      	movs	r1, #1
 8005634:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2288      	movs	r2, #136	@ 0x88
 800563a:	2124      	movs	r1, #36	@ 0x24
 800563c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2101      	movs	r1, #1
 8005652:	438a      	bics	r2, r1
 8005654:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4a0b      	ldr	r2, [pc, #44]	@ (8005688 <HAL_UARTEx_DisableFifoMode+0x70>)
 800565a:	4013      	ands	r3, r2
 800565c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2288      	movs	r2, #136	@ 0x88
 8005670:	2120      	movs	r1, #32
 8005672:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2284      	movs	r2, #132	@ 0x84
 8005678:	2100      	movs	r1, #0
 800567a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	0018      	movs	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	b004      	add	sp, #16
 8005684:	bd80      	pop	{r7, pc}
 8005686:	46c0      	nop			@ (mov r8, r8)
 8005688:	dfffffff 	.word	0xdfffffff

0800568c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2284      	movs	r2, #132	@ 0x84
 800569a:	5c9b      	ldrb	r3, [r3, r2]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e02e      	b.n	8005702 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2284      	movs	r2, #132	@ 0x84
 80056a8:	2101      	movs	r1, #1
 80056aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2288      	movs	r2, #136	@ 0x88
 80056b0:	2124      	movs	r1, #36	@ 0x24
 80056b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2101      	movs	r1, #1
 80056c8:	438a      	bics	r2, r1
 80056ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	08d9      	lsrs	r1, r3, #3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	0018      	movs	r0, r3
 80056e4:	f000 f854 	bl	8005790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2288      	movs	r2, #136	@ 0x88
 80056f4:	2120      	movs	r1, #32
 80056f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2284      	movs	r2, #132	@ 0x84
 80056fc:	2100      	movs	r1, #0
 80056fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	0018      	movs	r0, r3
 8005704:	46bd      	mov	sp, r7
 8005706:	b004      	add	sp, #16
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2284      	movs	r2, #132	@ 0x84
 800571a:	5c9b      	ldrb	r3, [r3, r2]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005720:	2302      	movs	r3, #2
 8005722:	e02f      	b.n	8005784 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2284      	movs	r2, #132	@ 0x84
 8005728:	2101      	movs	r1, #1
 800572a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2288      	movs	r2, #136	@ 0x88
 8005730:	2124      	movs	r1, #36	@ 0x24
 8005732:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2101      	movs	r1, #1
 8005748:	438a      	bics	r2, r1
 800574a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	4a0e      	ldr	r2, [pc, #56]	@ (800578c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005754:	4013      	ands	r3, r2
 8005756:	0019      	movs	r1, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	0018      	movs	r0, r3
 8005766:	f000 f813 	bl	8005790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2288      	movs	r2, #136	@ 0x88
 8005776:	2120      	movs	r1, #32
 8005778:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2284      	movs	r2, #132	@ 0x84
 800577e:	2100      	movs	r1, #0
 8005780:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	0018      	movs	r0, r3
 8005786:	46bd      	mov	sp, r7
 8005788:	b004      	add	sp, #16
 800578a:	bd80      	pop	{r7, pc}
 800578c:	f1ffffff 	.word	0xf1ffffff

08005790 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800579c:	2b00      	cmp	r3, #0
 800579e:	d108      	bne.n	80057b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	226a      	movs	r2, #106	@ 0x6a
 80057a4:	2101      	movs	r1, #1
 80057a6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2268      	movs	r2, #104	@ 0x68
 80057ac:	2101      	movs	r1, #1
 80057ae:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057b0:	e043      	b.n	800583a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057b2:	260f      	movs	r6, #15
 80057b4:	19bb      	adds	r3, r7, r6
 80057b6:	2208      	movs	r2, #8
 80057b8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057ba:	200e      	movs	r0, #14
 80057bc:	183b      	adds	r3, r7, r0
 80057be:	2208      	movs	r2, #8
 80057c0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	0e5b      	lsrs	r3, r3, #25
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	240d      	movs	r4, #13
 80057ce:	193b      	adds	r3, r7, r4
 80057d0:	2107      	movs	r1, #7
 80057d2:	400a      	ands	r2, r1
 80057d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	0f5b      	lsrs	r3, r3, #29
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	250c      	movs	r5, #12
 80057e2:	197b      	adds	r3, r7, r5
 80057e4:	2107      	movs	r1, #7
 80057e6:	400a      	ands	r2, r1
 80057e8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057ea:	183b      	adds	r3, r7, r0
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	197a      	adds	r2, r7, r5
 80057f0:	7812      	ldrb	r2, [r2, #0]
 80057f2:	4914      	ldr	r1, [pc, #80]	@ (8005844 <UARTEx_SetNbDataToProcess+0xb4>)
 80057f4:	5c8a      	ldrb	r2, [r1, r2]
 80057f6:	435a      	muls	r2, r3
 80057f8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80057fa:	197b      	adds	r3, r7, r5
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	4a12      	ldr	r2, [pc, #72]	@ (8005848 <UARTEx_SetNbDataToProcess+0xb8>)
 8005800:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005802:	0019      	movs	r1, r3
 8005804:	f7fa fd08 	bl	8000218 <__divsi3>
 8005808:	0003      	movs	r3, r0
 800580a:	b299      	uxth	r1, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	226a      	movs	r2, #106	@ 0x6a
 8005810:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005812:	19bb      	adds	r3, r7, r6
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	193a      	adds	r2, r7, r4
 8005818:	7812      	ldrb	r2, [r2, #0]
 800581a:	490a      	ldr	r1, [pc, #40]	@ (8005844 <UARTEx_SetNbDataToProcess+0xb4>)
 800581c:	5c8a      	ldrb	r2, [r1, r2]
 800581e:	435a      	muls	r2, r3
 8005820:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005822:	193b      	adds	r3, r7, r4
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	4a08      	ldr	r2, [pc, #32]	@ (8005848 <UARTEx_SetNbDataToProcess+0xb8>)
 8005828:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800582a:	0019      	movs	r1, r3
 800582c:	f7fa fcf4 	bl	8000218 <__divsi3>
 8005830:	0003      	movs	r3, r0
 8005832:	b299      	uxth	r1, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2268      	movs	r2, #104	@ 0x68
 8005838:	5299      	strh	r1, [r3, r2]
}
 800583a:	46c0      	nop			@ (mov r8, r8)
 800583c:	46bd      	mov	sp, r7
 800583e:	b005      	add	sp, #20
 8005840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005842:	46c0      	nop			@ (mov r8, r8)
 8005844:	08005988 	.word	0x08005988
 8005848:	08005990 	.word	0x08005990

0800584c <memset>:
 800584c:	0003      	movs	r3, r0
 800584e:	1882      	adds	r2, r0, r2
 8005850:	4293      	cmp	r3, r2
 8005852:	d100      	bne.n	8005856 <memset+0xa>
 8005854:	4770      	bx	lr
 8005856:	7019      	strb	r1, [r3, #0]
 8005858:	3301      	adds	r3, #1
 800585a:	e7f9      	b.n	8005850 <memset+0x4>

0800585c <__libc_init_array>:
 800585c:	b570      	push	{r4, r5, r6, lr}
 800585e:	2600      	movs	r6, #0
 8005860:	4c0c      	ldr	r4, [pc, #48]	@ (8005894 <__libc_init_array+0x38>)
 8005862:	4d0d      	ldr	r5, [pc, #52]	@ (8005898 <__libc_init_array+0x3c>)
 8005864:	1b64      	subs	r4, r4, r5
 8005866:	10a4      	asrs	r4, r4, #2
 8005868:	42a6      	cmp	r6, r4
 800586a:	d109      	bne.n	8005880 <__libc_init_array+0x24>
 800586c:	2600      	movs	r6, #0
 800586e:	f000 f819 	bl	80058a4 <_init>
 8005872:	4c0a      	ldr	r4, [pc, #40]	@ (800589c <__libc_init_array+0x40>)
 8005874:	4d0a      	ldr	r5, [pc, #40]	@ (80058a0 <__libc_init_array+0x44>)
 8005876:	1b64      	subs	r4, r4, r5
 8005878:	10a4      	asrs	r4, r4, #2
 800587a:	42a6      	cmp	r6, r4
 800587c:	d105      	bne.n	800588a <__libc_init_array+0x2e>
 800587e:	bd70      	pop	{r4, r5, r6, pc}
 8005880:	00b3      	lsls	r3, r6, #2
 8005882:	58eb      	ldr	r3, [r5, r3]
 8005884:	4798      	blx	r3
 8005886:	3601      	adds	r6, #1
 8005888:	e7ee      	b.n	8005868 <__libc_init_array+0xc>
 800588a:	00b3      	lsls	r3, r6, #2
 800588c:	58eb      	ldr	r3, [r5, r3]
 800588e:	4798      	blx	r3
 8005890:	3601      	adds	r6, #1
 8005892:	e7f2      	b.n	800587a <__libc_init_array+0x1e>
 8005894:	080059a0 	.word	0x080059a0
 8005898:	080059a0 	.word	0x080059a0
 800589c:	080059a4 	.word	0x080059a4
 80058a0:	080059a0 	.word	0x080059a0

080058a4 <_init>:
 80058a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a6:	46c0      	nop			@ (mov r8, r8)
 80058a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058aa:	bc08      	pop	{r3}
 80058ac:	469e      	mov	lr, r3
 80058ae:	4770      	bx	lr

080058b0 <_fini>:
 80058b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b2:	46c0      	nop			@ (mov r8, r8)
 80058b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b6:	bc08      	pop	{r3}
 80058b8:	469e      	mov	lr, r3
 80058ba:	4770      	bx	lr
