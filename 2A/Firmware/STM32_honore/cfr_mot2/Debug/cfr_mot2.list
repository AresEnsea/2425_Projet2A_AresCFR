
cfr_mot2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058bc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005a44  08005a44  00006a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b90  08005b90  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005b90  08005b90  00006b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b98  08005b98  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b98  08005b98  00006b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b9c  08005b9c  00006b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005ba0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  2000005c  08005bfc  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08005bfc  000073f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011930  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a2  00000000  00000000  000189bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  0001af60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c2e  00000000  00000000  0001bef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027182  00000000  00000000  0001cb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013457  00000000  00000000  00043ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2612  00000000  00000000  000570ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149711  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004370  00000000  00000000  00149754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0014dac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a2c 	.word	0x08005a2c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08005a2c 	.word	0x08005a2c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b08f      	sub	sp, #60	@ 0x3c
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fe23 	bl	8001108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f885 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 faa7 	bl	8000a18 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004ca:	f000 fa23 	bl	8000914 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 80004ce:	f000 f8d1 	bl	8000674 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 80004d2:	f000 f95b 	bl	800078c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80004d6:	f000 f8f9 	bl	80006cc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80004da:	f000 f927 	bl	800072c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //PB10 TIM2 CH3
 80004de:	2108      	movs	r1, #8
 80004e0:	4833      	ldr	r0, [pc, #204]	@ (80005b0 <main+0xf8>)
 80004e2:	f002 fdb7 	bl	8003054 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); //PB11 TIM2 CH4
 80004e6:	210c      	movs	r1, #12
 80004e8:	4831      	ldr	r0, [pc, #196]	@ (80005b0 <main+0xf8>)
 80004ea:	f002 fdb3 	bl	8003054 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //PA8
 80004ee:	2100      	movs	r1, #0
 80004f0:	4830      	ldr	r0, [pc, #192]	@ (80005b4 <main+0xfc>)
 80004f2:	f002 fdaf 	bl	8003054 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //PA9
 80004f6:	2104      	movs	r1, #4
 80004f8:	482e      	ldr	r0, [pc, #184]	@ (80005b4 <main+0xfc>)
 80004fa:	f002 fdab 	bl	8003054 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); //PA10
 80004fe:	2108      	movs	r1, #8
 8000500:	482c      	ldr	r0, [pc, #176]	@ (80005b4 <main+0xfc>)
 8000502:	f002 fda7 	bl	8003054 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)rx_data, sizeof(rx_data));
 8000506:	220d      	movs	r2, #13
 8000508:	492b      	ldr	r1, [pc, #172]	@ (80005b8 <main+0x100>)
 800050a:	482c      	ldr	r0, [pc, #176]	@ (80005bc <main+0x104>)
 800050c:	f003 fea0 	bl	8004250 <HAL_UART_Receive_IT>
  {

	  // Pour le moteur Maxon droit
	  //char direction_d = rx_data[0]; // Premier caractère pour la direction
	  char mot_maxon_dataD[5];      // 4 caractères + '\0' pour la vitesse
	  strncpy(mot_maxon_dataD, (char *)&rx_data[1], 4);
 8000510:	f107 0320 	add.w	r3, r7, #32
 8000514:	2204      	movs	r2, #4
 8000516:	492a      	ldr	r1, [pc, #168]	@ (80005c0 <main+0x108>)
 8000518:	4618      	mov	r0, r3
 800051a:	f005 fa3b 	bl	8005994 <strncpy>
	  mot_maxon_dataD[4] = '\0';    // Null terminate
 800051e:	2300      	movs	r3, #0
 8000520:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	  int mot_maxon_valueD = atoi(mot_maxon_dataD);
 8000524:	f107 0320 	add.w	r3, r7, #32
 8000528:	4618      	mov	r0, r3
 800052a:	f005 f9a3 	bl	8005874 <atoi>
 800052e:	6378      	str	r0, [r7, #52]	@ 0x34
	  int inv_d = rx_data[0] - '0';
 8000530:	4b21      	ldr	r3, [pc, #132]	@ (80005b8 <main+0x100>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	3b30      	subs	r3, #48	@ 0x30
 8000536:	633b      	str	r3, [r7, #48]	@ 0x30
	  mot_maxonD(mot_maxon_valueD, inv_d);//
 8000538:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800053a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800053c:	f000 fb08 	bl	8000b50 <mot_maxonD>

	  // Pour le moteur Maxon gauche
	  //char direction_g = rx_data[5]; // Premier caractère pour la direction
	  char mot_maxon_dataG[5];      // 4 caractères + '\0' pour la vitesse
	  strncpy(mot_maxon_dataG, (char *)&rx_data[6], 4);
 8000540:	f107 0318 	add.w	r3, r7, #24
 8000544:	2204      	movs	r2, #4
 8000546:	491f      	ldr	r1, [pc, #124]	@ (80005c4 <main+0x10c>)
 8000548:	4618      	mov	r0, r3
 800054a:	f005 fa23 	bl	8005994 <strncpy>
	  mot_maxon_dataG[4] = '\0';    // Null terminate
 800054e:	2300      	movs	r3, #0
 8000550:	773b      	strb	r3, [r7, #28]
	  int mot_maxon_valueG = atoi(mot_maxon_dataG);
 8000552:	f107 0318 	add.w	r3, r7, #24
 8000556:	4618      	mov	r0, r3
 8000558:	f005 f98c 	bl	8005874 <atoi>
 800055c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	  int inv_g = rx_data[5] - '0';
 800055e:	4b16      	ldr	r3, [pc, #88]	@ (80005b8 <main+0x100>)
 8000560:	795b      	ldrb	r3, [r3, #5]
 8000562:	3b30      	subs	r3, #48	@ 0x30
 8000564:	62bb      	str	r3, [r7, #40]	@ 0x28
	  mot_maxonG(mot_maxon_valueG, inv_g);
 8000566:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000568:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800056a:	f000 fb21 	bl	8000bb0 <mot_maxonG>

	  // Pour le servo moteur
	  char servo_goal_data[4];
	  memcpy(servo_goal_data, (char *)&rx_data[10], 3);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	2203      	movs	r2, #3
 8000574:	4914      	ldr	r1, [pc, #80]	@ (80005c8 <main+0x110>)
 8000576:	4618      	mov	r0, r3
 8000578:	f005 fa4a 	bl	8005a10 <memcpy>
	  servo_goal_data[3] = '\0';
 800057c:	2300      	movs	r3, #0
 800057e:	75fb      	strb	r3, [r7, #23]
	  reach_goal_servo(servo_goal_data);
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4618      	mov	r0, r3
 8000586:	f000 fb43 	bl	8000c10 <reach_goal_servo>
	  //servo_goal_data[5] = '\n';
	  //HAL_UART_Transmit(&huart3, (uint8_t *)servo_goal_data, 5, HAL_MAX_DELAY);

	  // Transmission pour debug
	  char message[15]; // 13 caractères de rx_data + 2 pour "\r\n"
	  memcpy(message, rx_data, 13); // Copier rx_data dans message
 800058a:	4b0b      	ldr	r3, [pc, #44]	@ (80005b8 <main+0x100>)
 800058c:	1d3c      	adds	r4, r7, #4
 800058e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000590:	c407      	stmia	r4!, {r0, r1, r2}
 8000592:	7023      	strb	r3, [r4, #0]
	  message[14] = '\r'; // Ajouter retour chariot
 8000594:	230d      	movs	r3, #13
 8000596:	74bb      	strb	r3, [r7, #18]
	  message[15] = '\n'; // Ajouter nouvelle ligne
 8000598:	230a      	movs	r3, #10
 800059a:	74fb      	strb	r3, [r7, #19]
	  HAL_UART_Transmit(&huart2, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);
 800059c:	1d39      	adds	r1, r7, #4
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	220f      	movs	r2, #15
 80005a4:	4809      	ldr	r0, [pc, #36]	@ (80005cc <main+0x114>)
 80005a6:	f003 fdc9 	bl	800413c <HAL_UART_Transmit>
  {
 80005aa:	bf00      	nop
 80005ac:	e7b0      	b.n	8000510 <main+0x58>
 80005ae:	bf00      	nop
 80005b0:	2000025c 	.word	0x2000025c
 80005b4:	20000210 	.word	0x20000210
 80005b8:	200002a8 	.word	0x200002a8
 80005bc:	20000078 	.word	0x20000078
 80005c0:	200002a9 	.word	0x200002a9
 80005c4:	200002ae 	.word	0x200002ae
 80005c8:	200002b2 	.word	0x200002b2
 80005cc:	20000100 	.word	0x20000100

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b096      	sub	sp, #88	@ 0x58
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2244      	movs	r2, #68	@ 0x44
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f005 f9d0 	bl	8005984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005f6:	f001 f963 	bl	80018c0 <HAL_PWREx_ControlVoltageScaling>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000600:	f000 faa0 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000604:	2302      	movs	r3, #2
 8000606:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000608:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800060c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060e:	2310      	movs	r3, #16
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000616:	2302      	movs	r3, #2
 8000618:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800061e:	230a      	movs	r3, #10
 8000620:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000622:	2307      	movs	r3, #7
 8000624:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	4618      	mov	r0, r3
 8000634:	f001 f99a 	bl	800196c <HAL_RCC_OscConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800063e:	f000 fa81 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000642:	230f      	movs	r3, #15
 8000644:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	2303      	movs	r3, #3
 8000648:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	2104      	movs	r1, #4
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fd61 	bl	8002124 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000668:	f000 fa6c 	bl	8000b44 <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3758      	adds	r7, #88	@ 0x58
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 800067a:	4a13      	ldr	r2, [pc, #76]	@ (80006c8 <MX_LPUART1_UART_Init+0x54>)
 800067c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 8000680:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000684:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <MX_LPUART1_UART_Init+0x50>)
 80006b2:	f003 fcf5 	bl	80040a0 <HAL_UART_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006bc:	f000 fa42 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000078 	.word	0x20000078
 80006c8:	40008000 	.word	0x40008000

080006cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d0:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 80006d2:	4a15      	ldr	r2, [pc, #84]	@ (8000728 <MX_USART2_UART_Init+0x5c>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d6:	4b13      	ldr	r3, [pc, #76]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b09      	ldr	r3, [pc, #36]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000702:	4b08      	ldr	r3, [pc, #32]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	@ (8000724 <MX_USART2_UART_Init+0x58>)
 8000710:	f003 fcc6 	bl	80040a0 <HAL_UART_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800071a:	f000 fa13 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000100 	.word	0x20000100
 8000728:	40004400 	.word	0x40004400

0800072c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000730:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 8000732:	4a15      	ldr	r2, [pc, #84]	@ (8000788 <MX_USART3_UART_Init+0x5c>)
 8000734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	@ (8000784 <MX_USART3_UART_Init+0x58>)
 8000770:	f003 fc96 	bl	80040a0 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 f9e3 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000188 	.word	0x20000188
 8000788:	40004800 	.word	0x40004800

0800078c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b09a      	sub	sp, #104	@ 0x68
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000792:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]
 80007be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	222c      	movs	r2, #44	@ 0x2c
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f005 f8dc 	bl	8005984 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007cc:	4b4f      	ldr	r3, [pc, #316]	@ (800090c <MX_TIM1_Init+0x180>)
 80007ce:	4a50      	ldr	r2, [pc, #320]	@ (8000910 <MX_TIM1_Init+0x184>)
 80007d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 80007d2:	4b4e      	ldr	r3, [pc, #312]	@ (800090c <MX_TIM1_Init+0x180>)
 80007d4:	224f      	movs	r2, #79	@ 0x4f
 80007d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b4c      	ldr	r3, [pc, #304]	@ (800090c <MX_TIM1_Init+0x180>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80007de:	4b4b      	ldr	r3, [pc, #300]	@ (800090c <MX_TIM1_Init+0x180>)
 80007e0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80007e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e6:	4b49      	ldr	r3, [pc, #292]	@ (800090c <MX_TIM1_Init+0x180>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ec:	4b47      	ldr	r3, [pc, #284]	@ (800090c <MX_TIM1_Init+0x180>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f2:	4b46      	ldr	r3, [pc, #280]	@ (800090c <MX_TIM1_Init+0x180>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007f8:	4844      	ldr	r0, [pc, #272]	@ (800090c <MX_TIM1_Init+0x180>)
 80007fa:	f002 fb73 	bl	8002ee4 <HAL_TIM_Base_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000804:	f000 f99e 	bl	8000b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000808:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800080e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000812:	4619      	mov	r1, r3
 8000814:	483d      	ldr	r0, [pc, #244]	@ (800090c <MX_TIM1_Init+0x180>)
 8000816:	f002 fe37 	bl	8003488 <HAL_TIM_ConfigClockSource>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000820:	f000 f990 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000824:	4839      	ldr	r0, [pc, #228]	@ (800090c <MX_TIM1_Init+0x180>)
 8000826:	f002 fbb4 	bl	8002f92 <HAL_TIM_PWM_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000830:	f000 f988 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000834:	2300      	movs	r3, #0
 8000836:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000840:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000844:	4619      	mov	r1, r3
 8000846:	4831      	ldr	r0, [pc, #196]	@ (800090c <MX_TIM1_Init+0x180>)
 8000848:	f003 fb24 	bl	8003e94 <HAL_TIMEx_MasterConfigSynchronization>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000852:	f000 f977 	bl	8000b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000856:	2360      	movs	r3, #96	@ 0x60
 8000858:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085e:	2300      	movs	r3, #0
 8000860:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000862:	2300      	movs	r3, #0
 8000864:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086e:	2300      	movs	r3, #0
 8000870:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000872:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000876:	2200      	movs	r2, #0
 8000878:	4619      	mov	r1, r3
 800087a:	4824      	ldr	r0, [pc, #144]	@ (800090c <MX_TIM1_Init+0x180>)
 800087c:	f002 fcf0 	bl	8003260 <HAL_TIM_PWM_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000886:	f000 f95d 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800088a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800088e:	2204      	movs	r2, #4
 8000890:	4619      	mov	r1, r3
 8000892:	481e      	ldr	r0, [pc, #120]	@ (800090c <MX_TIM1_Init+0x180>)
 8000894:	f002 fce4 	bl	8003260 <HAL_TIM_PWM_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800089e:	f000 f951 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008a6:	2208      	movs	r2, #8
 80008a8:	4619      	mov	r1, r3
 80008aa:	4818      	ldr	r0, [pc, #96]	@ (800090c <MX_TIM1_Init+0x180>)
 80008ac:	f002 fcd8 	bl	8003260 <HAL_TIM_PWM_ConfigChannel>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80008b6:	f000 f945 	bl	8000b44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	4619      	mov	r1, r3
 80008ee:	4807      	ldr	r0, [pc, #28]	@ (800090c <MX_TIM1_Init+0x180>)
 80008f0:	f003 fb58 	bl	8003fa4 <HAL_TIMEx_ConfigBreakDeadTime>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 80008fa:	f000 f923 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008fe:	4803      	ldr	r0, [pc, #12]	@ (800090c <MX_TIM1_Init+0x180>)
 8000900:	f000 fb30 	bl	8000f64 <HAL_TIM_MspPostInit>

}
 8000904:	bf00      	nop
 8000906:	3768      	adds	r7, #104	@ 0x68
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000210 	.word	0x20000210
 8000910:	40012c00 	.word	0x40012c00

08000914 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08e      	sub	sp, #56	@ 0x38
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000928:	f107 031c 	add.w	r3, r7, #28
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000946:	4b33      	ldr	r3, [pc, #204]	@ (8000a14 <MX_TIM2_Init+0x100>)
 8000948:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800094c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800094e:	4b31      	ldr	r3, [pc, #196]	@ (8000a14 <MX_TIM2_Init+0x100>)
 8000950:	224f      	movs	r2, #79	@ 0x4f
 8000952:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b2f      	ldr	r3, [pc, #188]	@ (8000a14 <MX_TIM2_Init+0x100>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800095a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a14 <MX_TIM2_Init+0x100>)
 800095c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000960:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000962:	4b2c      	ldr	r3, [pc, #176]	@ (8000a14 <MX_TIM2_Init+0x100>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000968:	4b2a      	ldr	r3, [pc, #168]	@ (8000a14 <MX_TIM2_Init+0x100>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800096e:	4829      	ldr	r0, [pc, #164]	@ (8000a14 <MX_TIM2_Init+0x100>)
 8000970:	f002 fab8 	bl	8002ee4 <HAL_TIM_Base_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800097a:	f000 f8e3 	bl	8000b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000984:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000988:	4619      	mov	r1, r3
 800098a:	4822      	ldr	r0, [pc, #136]	@ (8000a14 <MX_TIM2_Init+0x100>)
 800098c:	f002 fd7c 	bl	8003488 <HAL_TIM_ConfigClockSource>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000996:	f000 f8d5 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800099a:	481e      	ldr	r0, [pc, #120]	@ (8000a14 <MX_TIM2_Init+0x100>)
 800099c:	f002 faf9 	bl	8002f92 <HAL_TIM_PWM_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80009a6:	f000 f8cd 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4816      	ldr	r0, [pc, #88]	@ (8000a14 <MX_TIM2_Init+0x100>)
 80009ba:	f003 fa6b 	bl	8003e94 <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80009c4:	f000 f8be 	bl	8000b44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c8:	2360      	movs	r3, #96	@ 0x60
 80009ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	2208      	movs	r2, #8
 80009dc:	4619      	mov	r1, r3
 80009de:	480d      	ldr	r0, [pc, #52]	@ (8000a14 <MX_TIM2_Init+0x100>)
 80009e0:	f002 fc3e 	bl	8003260 <HAL_TIM_PWM_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80009ea:	f000 f8ab 	bl	8000b44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009ee:	463b      	mov	r3, r7
 80009f0:	220c      	movs	r2, #12
 80009f2:	4619      	mov	r1, r3
 80009f4:	4807      	ldr	r0, [pc, #28]	@ (8000a14 <MX_TIM2_Init+0x100>)
 80009f6:	f002 fc33 	bl	8003260 <HAL_TIM_PWM_ConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000a00:	f000 f8a0 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a04:	4803      	ldr	r0, [pc, #12]	@ (8000a14 <MX_TIM2_Init+0x100>)
 8000a06:	f000 faad 	bl	8000f64 <HAL_TIM_MspPostInit>

}
 8000a0a:	bf00      	nop
 8000a0c:	3738      	adds	r7, #56	@ 0x38
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000025c 	.word	0x2000025c

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b37      	ldr	r3, [pc, #220]	@ (8000b0c <MX_GPIO_Init+0xf4>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	4a36      	ldr	r2, [pc, #216]	@ (8000b0c <MX_GPIO_Init+0xf4>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a3a:	4b34      	ldr	r3, [pc, #208]	@ (8000b0c <MX_GPIO_Init+0xf4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	f003 0304 	and.w	r3, r3, #4
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a46:	4b31      	ldr	r3, [pc, #196]	@ (8000b0c <MX_GPIO_Init+0xf4>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	4a30      	ldr	r2, [pc, #192]	@ (8000b0c <MX_GPIO_Init+0xf4>)
 8000a4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a52:	4b2e      	ldr	r3, [pc, #184]	@ (8000b0c <MX_GPIO_Init+0xf4>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b0c <MX_GPIO_Init+0xf4>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	4a2a      	ldr	r2, [pc, #168]	@ (8000b0c <MX_GPIO_Init+0xf4>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a6a:	4b28      	ldr	r3, [pc, #160]	@ (8000b0c <MX_GPIO_Init+0xf4>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b25      	ldr	r3, [pc, #148]	@ (8000b0c <MX_GPIO_Init+0xf4>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	4a24      	ldr	r2, [pc, #144]	@ (8000b0c <MX_GPIO_Init+0xf4>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a82:	4b22      	ldr	r3, [pc, #136]	@ (8000b0c <MX_GPIO_Init+0xf4>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_Step_1_Pin|GPIO_Step_2_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 8000a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a98:	f000 feec 	bl	8001874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8000aa2:	481b      	ldr	r0, [pc, #108]	@ (8000b10 <MX_GPIO_Init+0xf8>)
 8000aa4:	f000 fee6 	bl	8001874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4815      	ldr	r0, [pc, #84]	@ (8000b14 <MX_GPIO_Init+0xfc>)
 8000ac0:	f000 fd2e 	bl	8001520 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin GPIO_Step_1_Pin GPIO_Step_2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_Step_1_Pin|GPIO_Step_2_Pin;
 8000ac4:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae0:	f000 fd1e 	bl	8001520 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8000ae4:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8000ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4804      	ldr	r0, [pc, #16]	@ (8000b10 <MX_GPIO_Init+0xf8>)
 8000afe:	f000 fd0f 	bl	8001520 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	@ 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	48000400 	.word	0x48000400
 8000b14:	48000800 	.word	0x48000800

08000b18 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a06      	ldr	r2, [pc, #24]	@ (8000b3c <HAL_UART_RxCpltCallback+0x24>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d104      	bne.n	8000b32 <HAL_UART_RxCpltCallback+0x1a>
		// Réactiver la réception immédiatement
		HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)rx_data, sizeof(rx_data));
 8000b28:	220d      	movs	r2, #13
 8000b2a:	4905      	ldr	r1, [pc, #20]	@ (8000b40 <HAL_UART_RxCpltCallback+0x28>)
 8000b2c:	4803      	ldr	r0, [pc, #12]	@ (8000b3c <HAL_UART_RxCpltCallback+0x24>)
 8000b2e:	f003 fb8f 	bl	8004250 <HAL_UART_Receive_IT>
	}
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000078 	.word	0x20000078
 8000b40:	200002a8 	.word	0x200002a8

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <Error_Handler+0x8>

08000b50 <mot_maxonD>:
#include "maxon.h"
#include "main.h"

extern TIM_HandleTypeDef htim2;

void mot_maxonD(int result, int inv) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
    if (inv == 1) {
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d10f      	bne.n	8000b80 <mot_maxonD+0x30>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);    // Direction avant
 8000b60:	2201      	movs	r2, #1
 8000b62:	2110      	movs	r1, #16
 8000b64:	4810      	ldr	r0, [pc, #64]	@ (8000ba8 <mot_maxonD+0x58>)
 8000b66:	f000 fe85 	bl	8001874 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b70:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <mot_maxonD+0x58>)
 8000b72:	f000 fe7f 	bl	8001874 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result);  // Vitesse
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <mot_maxonD+0x5c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  // Direction arrière
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result);  // Vitesse
    }
}
 8000b7e:	e00e      	b.n	8000b9e <mot_maxonD+0x4e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  // Direction arrière
 8000b80:	2200      	movs	r2, #0
 8000b82:	2110      	movs	r1, #16
 8000b84:	4808      	ldr	r0, [pc, #32]	@ (8000ba8 <mot_maxonD+0x58>)
 8000b86:	f000 fe75 	bl	8001874 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b90:	4805      	ldr	r0, [pc, #20]	@ (8000ba8 <mot_maxonD+0x58>)
 8000b92:	f000 fe6f 	bl	8001874 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result);  // Vitesse
 8000b96:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <mot_maxonD+0x5c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	48000400 	.word	0x48000400
 8000bac:	2000025c 	.word	0x2000025c

08000bb0 <mot_maxonG>:

void mot_maxonG(int result, int inv) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
    if (inv == 1) {
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d10f      	bne.n	8000be0 <mot_maxonG+0x30>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);    // Direction avant
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2120      	movs	r1, #32
 8000bc4:	4810      	ldr	r0, [pc, #64]	@ (8000c08 <mot_maxonG+0x58>)
 8000bc6:	f000 fe55 	bl	8001874 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bd0:	480d      	ldr	r0, [pc, #52]	@ (8000c08 <mot_maxonG+0x58>)
 8000bd2:	f000 fe4f 	bl	8001874 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result);  // Vitesse
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c0c <mot_maxonG+0x5c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	641a      	str	r2, [r3, #64]	@ 0x40
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);  // Direction arrière
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result);  // Vitesse
    }
}
 8000bde:	e00e      	b.n	8000bfe <mot_maxonG+0x4e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);  // Direction arrière
 8000be0:	2200      	movs	r2, #0
 8000be2:	2120      	movs	r1, #32
 8000be4:	4808      	ldr	r0, [pc, #32]	@ (8000c08 <mot_maxonG+0x58>)
 8000be6:	f000 fe45 	bl	8001874 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bf0:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <mot_maxonG+0x58>)
 8000bf2:	f000 fe3f 	bl	8001874 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result);  // Vitesse
 8000bf6:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <mot_maxonG+0x5c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	48000400 	.word	0x48000400
 8000c0c:	2000025c 	.word	0x2000025c

08000c10 <reach_goal_servo>:
 */

#include "servo.h"
extern TIM_HandleTypeDef htim1;

void reach_goal_servo(char goal[3]) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
    // Control first servo (CCR1) and third servo (CCR3)
    if (goal[0] == '1') {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b31      	cmp	r3, #49	@ 0x31
 8000c1e:	d108      	bne.n	8000c32 <reach_goal_servo+0x22>
        TIM1->CCR1 = 2000;
 8000c20:	4b2e      	ldr	r3, [pc, #184]	@ (8000cdc <reach_goal_servo+0xcc>)
 8000c22:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c26:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM1->CCR3 = 2000;
 8000c28:	4b2c      	ldr	r3, [pc, #176]	@ (8000cdc <reach_goal_servo+0xcc>)
 8000c2a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c30:	e007      	b.n	8000c42 <reach_goal_servo+0x32>
    } else {
        TIM1->CCR1 = 1000;
 8000c32:	4b2a      	ldr	r3, [pc, #168]	@ (8000cdc <reach_goal_servo+0xcc>)
 8000c34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c38:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM1->CCR3 = 1000;
 8000c3a:	4b28      	ldr	r3, [pc, #160]	@ (8000cdc <reach_goal_servo+0xcc>)
 8000c3c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c40:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    // Control second servo (CCR2)
    if (goal[1] == '1') {
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3301      	adds	r3, #1
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b31      	cmp	r3, #49	@ 0x31
 8000c4a:	d104      	bne.n	8000c56 <reach_goal_servo+0x46>
        TIM1->CCR2 = 2000;
 8000c4c:	4b23      	ldr	r3, [pc, #140]	@ (8000cdc <reach_goal_servo+0xcc>)
 8000c4e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000c52:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c54:	e003      	b.n	8000c5e <reach_goal_servo+0x4e>
    } else {
        TIM1->CCR2 = 1000;
 8000c56:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <reach_goal_servo+0xcc>)
 8000c58:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c5c:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Stepper motor control (corrected syntax and logic)
    if (goal[2] == '0') {
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3302      	adds	r3, #2
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b30      	cmp	r3, #48	@ 0x30
 8000c66:	d10e      	bne.n	8000c86 <reach_goal_servo+0x76>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c72:	f000 fdff 	bl	8001874 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c80:	f000 fdf8 	bl	8001874 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
    } else if (goal[2] == '2') {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
    }
}
 8000c84:	e026      	b.n	8000cd4 <reach_goal_servo+0xc4>
    } else if (goal[2] == '1') {
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3302      	adds	r3, #2
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b31      	cmp	r3, #49	@ 0x31
 8000c8e:	d10e      	bne.n	8000cae <reach_goal_servo+0x9e>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c9a:	f000 fdeb 	bl	8001874 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ca8:	f000 fde4 	bl	8001874 <HAL_GPIO_WritePin>
}
 8000cac:	e012      	b.n	8000cd4 <reach_goal_servo+0xc4>
    } else if (goal[2] == '2') {
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	3302      	adds	r3, #2
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b32      	cmp	r3, #50	@ 0x32
 8000cb6:	d10d      	bne.n	8000cd4 <reach_goal_servo+0xc4>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc2:	f000 fdd7 	bl	8001874 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd0:	f000 fdd0 	bl	8001874 <HAL_GPIO_WritePin>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40012c00 	.word	0x40012c00

08000ce0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d24 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cea:	4a0e      	ldr	r2, [pc, #56]	@ (8000d24 <HAL_MspInit+0x44>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <HAL_MspInit+0x44>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d02:	4a08      	ldr	r2, [pc, #32]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_MspInit+0x44>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0b0      	sub	sp, #192	@ 0xc0
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d44:	2288      	movs	r2, #136	@ 0x88
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f004 fe1b 	bl	8005984 <memset>
  if(huart->Instance==LPUART1)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a66      	ldr	r2, [pc, #408]	@ (8000eec <HAL_UART_MspInit+0x1c4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d143      	bne.n	8000de0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d58:	2320      	movs	r3, #32
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d64:	4618      	mov	r0, r3
 8000d66:	f001 fc01 	bl	800256c <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d70:	f7ff fee8 	bl	8000b44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d74:	4b5e      	ldr	r3, [pc, #376]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d78:	4a5d      	ldr	r2, [pc, #372]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000d80:	4b5b      	ldr	r3, [pc, #364]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	623b      	str	r3, [r7, #32]
 8000d8a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8c:	4b58      	ldr	r3, [pc, #352]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d90:	4a57      	ldr	r2, [pc, #348]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d98:	4b55      	ldr	r3, [pc, #340]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	69fb      	ldr	r3, [r7, #28]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000da4:	2303      	movs	r3, #3
 8000da6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	484a      	ldr	r0, [pc, #296]	@ (8000ef4 <HAL_UART_MspInit+0x1cc>)
 8000dca:	f000 fba9 	bl	8001520 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2046      	movs	r0, #70	@ 0x46
 8000dd4:	f000 faef 	bl	80013b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000dd8:	2046      	movs	r0, #70	@ 0x46
 8000dda:	f000 fb08 	bl	80013ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dde:	e081      	b.n	8000ee4 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a44      	ldr	r2, [pc, #272]	@ (8000ef8 <HAL_UART_MspInit+0x1d0>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d13c      	bne.n	8000e64 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dea:	2302      	movs	r3, #2
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 fbb8 	bl	800256c <HAL_RCCEx_PeriphCLKConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8000e02:	f7ff fe9f 	bl	8000b44 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e06:	4b3a      	ldr	r3, [pc, #232]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0a:	4a39      	ldr	r2, [pc, #228]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e12:	4b37      	ldr	r3, [pc, #220]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e1a:	61bb      	str	r3, [r7, #24]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b34      	ldr	r3, [pc, #208]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e22:	4a33      	ldr	r2, [pc, #204]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e2a:	4b31      	ldr	r3, [pc, #196]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 8000e36:	230c      	movs	r3, #12
 8000e38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e4e:	2307      	movs	r3, #7
 8000e50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5e:	f000 fb5f 	bl	8001520 <HAL_GPIO_Init>
}
 8000e62:	e03f      	b.n	8000ee4 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART3)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a24      	ldr	r2, [pc, #144]	@ (8000efc <HAL_UART_MspInit+0x1d4>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d13a      	bne.n	8000ee4 <HAL_UART_MspInit+0x1bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 fb76 	bl	800256c <HAL_RCCEx_PeriphCLKConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_UART_MspInit+0x162>
      Error_Handler();
 8000e86:	f7ff fe5d 	bl	8000b44 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8e:	4a18      	ldr	r2, [pc, #96]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e96:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	4a12      	ldr	r2, [pc, #72]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eae:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <HAL_UART_MspInit+0x1c8>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000eba:	2330      	movs	r3, #48	@ 0x30
 8000ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000edc:	4619      	mov	r1, r3
 8000ede:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <HAL_UART_MspInit+0x1cc>)
 8000ee0:	f000 fb1e 	bl	8001520 <HAL_GPIO_Init>
}
 8000ee4:	bf00      	nop
 8000ee6:	37c0      	adds	r7, #192	@ 0xc0
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40008000 	.word	0x40008000
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	48000800 	.word	0x48000800
 8000ef8:	40004400 	.word	0x40004400
 8000efc:	40004800 	.word	0x40004800

08000f00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a13      	ldr	r2, [pc, #76]	@ (8000f5c <HAL_TIM_Base_MspInit+0x5c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d10c      	bne.n	8000f2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f12:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <HAL_TIM_Base_MspInit+0x60>)
 8000f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f16:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <HAL_TIM_Base_MspInit+0x60>)
 8000f18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <HAL_TIM_Base_MspInit+0x60>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f2a:	e010      	b.n	8000f4e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f34:	d10b      	bne.n	8000f4e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_TIM_Base_MspInit+0x60>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	4a09      	ldr	r2, [pc, #36]	@ (8000f60 <HAL_TIM_Base_MspInit+0x60>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f42:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <HAL_TIM_Base_MspInit+0x60>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40012c00 	.word	0x40012c00
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	@ 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a23      	ldr	r2, [pc, #140]	@ (8001010 <HAL_TIM_MspPostInit+0xac>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d11e      	bne.n	8000fc4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <HAL_TIM_MspPostInit+0xb0>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8a:	4a22      	ldr	r2, [pc, #136]	@ (8001014 <HAL_TIM_MspPostInit+0xb0>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f92:	4b20      	ldr	r3, [pc, #128]	@ (8001014 <HAL_TIM_MspPostInit+0xb0>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f9e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000fa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fbe:	f000 faaf 	bl	8001520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fc2:	e021      	b.n	8001008 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fcc:	d11c      	bne.n	8001008 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <HAL_TIM_MspPostInit+0xb0>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd2:	4a10      	ldr	r2, [pc, #64]	@ (8001014 <HAL_TIM_MspPostInit+0xb0>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <HAL_TIM_MspPostInit+0xb0>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000fe6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4619      	mov	r1, r3
 8001002:	4805      	ldr	r0, [pc, #20]	@ (8001018 <HAL_TIM_MspPostInit+0xb4>)
 8001004:	f000 fa8c 	bl	8001520 <HAL_GPIO_Init>
}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	@ 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40012c00 	.word	0x40012c00
 8001014:	40021000 	.word	0x40021000
 8001018:	48000400 	.word	0x48000400

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <NMI_Handler+0x4>

08001024 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <MemManage_Handler+0x4>

08001034 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <BusFault_Handler+0x4>

0800103c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <UsageFault_Handler+0x4>

08001044 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001072:	f000 f8a5 	bl	80011c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <LPUART1_IRQHandler+0x10>)
 8001082:	f003 f931 	bl	80042e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000078 	.word	0x20000078

08001090 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <SystemInit+0x20>)
 8001096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800109a:	4a05      	ldr	r2, [pc, #20]	@ (80010b0 <SystemInit+0x20>)
 800109c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b8:	f7ff ffea 	bl	8001090 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80010be:	490d      	ldr	r1, [pc, #52]	@ (80010f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <LoopForever+0xe>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001100 <LoopForever+0x16>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e2:	f004 fc71 	bl	80059c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010e6:	f7ff f9e7 	bl	80004b8 <main>

080010ea <LoopForever>:

LoopForever:
    b LoopForever
 80010ea:	e7fe      	b.n	80010ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010f8:	08005ba0 	.word	0x08005ba0
  ldr r2, =_sbss
 80010fc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001100:	200003f4 	.word	0x200003f4

08001104 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC1_2_IRQHandler>
	...

08001108 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001112:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <HAL_Init+0x3c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a0b      	ldr	r2, [pc, #44]	@ (8001144 <HAL_Init+0x3c>)
 8001118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111e:	2003      	movs	r0, #3
 8001120:	f000 f93e 	bl	80013a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001124:	2000      	movs	r0, #0
 8001126:	f000 f80f 	bl	8001148 <HAL_InitTick>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	e001      	b.n	800113a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001136:	f7ff fdd3 	bl	8000ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800113a:	79fb      	ldrb	r3, [r7, #7]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40022000 	.word	0x40022000

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001154:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <HAL_InitTick+0x6c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d023      	beq.n	80011a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <HAL_InitTick+0x70>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_InitTick+0x6c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f949 	bl	800140a <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10f      	bne.n	800119e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d809      	bhi.n	8001198 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001184:	2200      	movs	r2, #0
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	f04f 30ff 	mov.w	r0, #4294967295
 800118c:	f000 f913 	bl	80013b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001190:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <HAL_InitTick+0x74>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e007      	b.n	80011a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e004      	b.n	80011a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	73fb      	strb	r3, [r7, #15]
 80011a2:	e001      	b.n	80011a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20000004 	.word	0x20000004

080011c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_IncTick+0x20>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_IncTick+0x24>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4413      	add	r3, r2
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <HAL_IncTick+0x24>)
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000008 	.word	0x20000008
 80011e4:	200002b8 	.word	0x200002b8

080011e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  return uwTick;
 80011ec:	4b03      	ldr	r3, [pc, #12]	@ (80011fc <HAL_GetTick+0x14>)
 80011ee:	681b      	ldr	r3, [r3, #0]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	200002b8 	.word	0x200002b8

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	@ (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4907      	ldr	r1, [pc, #28]	@ (800129c <__NVIC_EnableIRQ+0x38>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100

080012a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db0a      	blt.n	80012ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	490c      	ldr	r1, [pc, #48]	@ (80012ec <__NVIC_SetPriority+0x4c>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	440b      	add	r3, r1
 80012c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c8:	e00a      	b.n	80012e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4908      	ldr	r1, [pc, #32]	@ (80012f0 <__NVIC_SetPriority+0x50>)
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	3b04      	subs	r3, #4
 80012d8:	0112      	lsls	r2, r2, #4
 80012da:	b2d2      	uxtb	r2, r2
 80012dc:	440b      	add	r3, r1
 80012de:	761a      	strb	r2, [r3, #24]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000e100 	.word	0xe000e100
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	@ 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f1c3 0307 	rsb	r3, r3, #7
 800130e:	2b04      	cmp	r3, #4
 8001310:	bf28      	it	cs
 8001312:	2304      	movcs	r3, #4
 8001314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3304      	adds	r3, #4
 800131a:	2b06      	cmp	r3, #6
 800131c:	d902      	bls.n	8001324 <NVIC_EncodePriority+0x30>
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3b03      	subs	r3, #3
 8001322:	e000      	b.n	8001326 <NVIC_EncodePriority+0x32>
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001328:	f04f 32ff 	mov.w	r2, #4294967295
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	401a      	ands	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	43d9      	mvns	r1, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800134c:	4313      	orrs	r3, r2
         );
}
 800134e:	4618      	mov	r0, r3
 8001350:	3724      	adds	r7, #36	@ 0x24
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800136c:	d301      	bcc.n	8001372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800136e:	2301      	movs	r3, #1
 8001370:	e00f      	b.n	8001392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001372:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <SysTick_Config+0x40>)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800137a:	210f      	movs	r1, #15
 800137c:	f04f 30ff 	mov.w	r0, #4294967295
 8001380:	f7ff ff8e 	bl	80012a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <SysTick_Config+0x40>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138a:	4b04      	ldr	r3, [pc, #16]	@ (800139c <SysTick_Config+0x40>)
 800138c:	2207      	movs	r2, #7
 800138e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	e000e010 	.word	0xe000e010

080013a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ff29 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c8:	f7ff ff3e 	bl	8001248 <__NVIC_GetPriorityGrouping>
 80013cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	6978      	ldr	r0, [r7, #20]
 80013d4:	f7ff ff8e 	bl	80012f4 <NVIC_EncodePriority>
 80013d8:	4602      	mov	r2, r0
 80013da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff ff5d 	bl	80012a0 <__NVIC_SetPriority>
}
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	4603      	mov	r3, r0
 80013f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff31 	bl	8001264 <__NVIC_EnableIRQ>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff ffa2 	bl	800135c <SysTick_Config>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d008      	beq.n	800144c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2204      	movs	r2, #4
 800143e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e022      	b.n	8001492 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 020e 	bic.w	r2, r2, #14
 800145a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0201 	bic.w	r2, r2, #1
 800146a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001470:	f003 021c 	and.w	r2, r3, #28
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001478:	2101      	movs	r1, #1
 800147a:	fa01 f202 	lsl.w	r2, r1, r2
 800147e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b084      	sub	sp, #16
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d005      	beq.n	80014c2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2204      	movs	r2, #4
 80014ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	73fb      	strb	r3, [r7, #15]
 80014c0:	e029      	b.n	8001516 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 020e 	bic.w	r2, r2, #14
 80014d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0201 	bic.w	r2, r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	f003 021c 	and.w	r2, r3, #28
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	2101      	movs	r1, #1
 80014f0:	fa01 f202 	lsl.w	r2, r1, r2
 80014f4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	4798      	blx	r3
    }
  }
  return status;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3710      	adds	r7, #16
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001520:	b480      	push	{r7}
 8001522:	b087      	sub	sp, #28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152e:	e17f      	b.n	8001830 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2101      	movs	r1, #1
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	4013      	ands	r3, r2
 800153e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 8171 	beq.w	800182a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	2b01      	cmp	r3, #1
 8001552:	d005      	beq.n	8001560 <HAL_GPIO_Init+0x40>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d130      	bne.n	80015c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2203      	movs	r2, #3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001596:	2201      	movs	r2, #1
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	f003 0201 	and.w	r2, r3, #1
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d118      	bne.n	8001600 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015d4:	2201      	movs	r2, #1
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	08db      	lsrs	r3, r3, #3
 80015ea:	f003 0201 	and.w	r2, r3, #1
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b03      	cmp	r3, #3
 800160a:	d017      	beq.n	800163c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	2203      	movs	r2, #3
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d123      	bne.n	8001690 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4313      	orrs	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	6939      	ldr	r1, [r7, #16]
 800168c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0203 	and.w	r2, r3, #3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80ac 	beq.w	800182a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001850 <HAL_GPIO_Init+0x330>)
 80016d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d6:	4a5e      	ldr	r2, [pc, #376]	@ (8001850 <HAL_GPIO_Init+0x330>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80016de:	4b5c      	ldr	r3, [pc, #368]	@ (8001850 <HAL_GPIO_Init+0x330>)
 80016e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016ea:	4a5a      	ldr	r2, [pc, #360]	@ (8001854 <HAL_GPIO_Init+0x334>)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3302      	adds	r3, #2
 80016f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001714:	d025      	beq.n	8001762 <HAL_GPIO_Init+0x242>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4f      	ldr	r2, [pc, #316]	@ (8001858 <HAL_GPIO_Init+0x338>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d01f      	beq.n	800175e <HAL_GPIO_Init+0x23e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4e      	ldr	r2, [pc, #312]	@ (800185c <HAL_GPIO_Init+0x33c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d019      	beq.n	800175a <HAL_GPIO_Init+0x23a>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4d      	ldr	r2, [pc, #308]	@ (8001860 <HAL_GPIO_Init+0x340>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d013      	beq.n	8001756 <HAL_GPIO_Init+0x236>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a4c      	ldr	r2, [pc, #304]	@ (8001864 <HAL_GPIO_Init+0x344>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d00d      	beq.n	8001752 <HAL_GPIO_Init+0x232>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4b      	ldr	r2, [pc, #300]	@ (8001868 <HAL_GPIO_Init+0x348>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d007      	beq.n	800174e <HAL_GPIO_Init+0x22e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4a      	ldr	r2, [pc, #296]	@ (800186c <HAL_GPIO_Init+0x34c>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d101      	bne.n	800174a <HAL_GPIO_Init+0x22a>
 8001746:	2306      	movs	r3, #6
 8001748:	e00c      	b.n	8001764 <HAL_GPIO_Init+0x244>
 800174a:	2307      	movs	r3, #7
 800174c:	e00a      	b.n	8001764 <HAL_GPIO_Init+0x244>
 800174e:	2305      	movs	r3, #5
 8001750:	e008      	b.n	8001764 <HAL_GPIO_Init+0x244>
 8001752:	2304      	movs	r3, #4
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x244>
 8001756:	2303      	movs	r3, #3
 8001758:	e004      	b.n	8001764 <HAL_GPIO_Init+0x244>
 800175a:	2302      	movs	r3, #2
 800175c:	e002      	b.n	8001764 <HAL_GPIO_Init+0x244>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_GPIO_Init+0x244>
 8001762:	2300      	movs	r3, #0
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	f002 0203 	and.w	r2, r2, #3
 800176a:	0092      	lsls	r2, r2, #2
 800176c:	4093      	lsls	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001774:	4937      	ldr	r1, [pc, #220]	@ (8001854 <HAL_GPIO_Init+0x334>)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	3302      	adds	r3, #2
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001782:	4b3b      	ldr	r3, [pc, #236]	@ (8001870 <HAL_GPIO_Init+0x350>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	43db      	mvns	r3, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017a6:	4a32      	ldr	r2, [pc, #200]	@ (8001870 <HAL_GPIO_Init+0x350>)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017ac:	4b30      	ldr	r3, [pc, #192]	@ (8001870 <HAL_GPIO_Init+0x350>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017d0:	4a27      	ldr	r2, [pc, #156]	@ (8001870 <HAL_GPIO_Init+0x350>)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017d6:	4b26      	ldr	r3, [pc, #152]	@ (8001870 <HAL_GPIO_Init+0x350>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001870 <HAL_GPIO_Init+0x350>)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001800:	4b1b      	ldr	r3, [pc, #108]	@ (8001870 <HAL_GPIO_Init+0x350>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	43db      	mvns	r3, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001824:	4a12      	ldr	r2, [pc, #72]	@ (8001870 <HAL_GPIO_Init+0x350>)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	2b00      	cmp	r3, #0
 800183c:	f47f ae78 	bne.w	8001530 <HAL_GPIO_Init+0x10>
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	371c      	adds	r7, #28
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000
 8001854:	40010000 	.word	0x40010000
 8001858:	48000400 	.word	0x48000400
 800185c:	48000800 	.word	0x48000800
 8001860:	48000c00 	.word	0x48000c00
 8001864:	48001000 	.word	0x48001000
 8001868:	48001400 	.word	0x48001400
 800186c:	48001800 	.word	0x48001800
 8001870:	40010400 	.word	0x40010400

08001874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
 8001880:	4613      	mov	r3, r2
 8001882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001884:	787b      	ldrb	r3, [r7, #1]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800188a:	887a      	ldrh	r2, [r7, #2]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001890:	e002      	b.n	8001898 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001892:	887a      	ldrh	r2, [r7, #2]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <HAL_PWREx_GetVoltageRange+0x18>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40007000 	.word	0x40007000

080018c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018ce:	d130      	bne.n	8001932 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018d0:	4b23      	ldr	r3, [pc, #140]	@ (8001960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80018d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018dc:	d038      	beq.n	8001950 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018de:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80018e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001964 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2232      	movs	r2, #50	@ 0x32
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001968 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	0c9b      	lsrs	r3, r3, #18
 8001900:	3301      	adds	r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001904:	e002      	b.n	800190c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	3b01      	subs	r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800190c:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001918:	d102      	bne.n	8001920 <HAL_PWREx_ControlVoltageScaling+0x60>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f2      	bne.n	8001906 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001920:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800192c:	d110      	bne.n	8001950 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e00f      	b.n	8001952 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001932:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800193a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800193e:	d007      	beq.n	8001950 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001940:	4b07      	ldr	r3, [pc, #28]	@ (8001960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001948:	4a05      	ldr	r2, [pc, #20]	@ (8001960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800194e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40007000 	.word	0x40007000
 8001964:	20000000 	.word	0x20000000
 8001968:	431bde83 	.word	0x431bde83

0800196c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e3ca      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800197e:	4b97      	ldr	r3, [pc, #604]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001988:	4b94      	ldr	r3, [pc, #592]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 80e4 	beq.w	8001b68 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d007      	beq.n	80019b6 <HAL_RCC_OscConfig+0x4a>
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b0c      	cmp	r3, #12
 80019aa:	f040 808b 	bne.w	8001ac4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	f040 8087 	bne.w	8001ac4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019b6:	4b89      	ldr	r3, [pc, #548]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <HAL_RCC_OscConfig+0x62>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e3a2      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1a      	ldr	r2, [r3, #32]
 80019d2:	4b82      	ldr	r3, [pc, #520]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d004      	beq.n	80019e8 <HAL_RCC_OscConfig+0x7c>
 80019de:	4b7f      	ldr	r3, [pc, #508]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019e6:	e005      	b.n	80019f4 <HAL_RCC_OscConfig+0x88>
 80019e8:	4b7c      	ldr	r3, [pc, #496]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 80019ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d223      	bcs.n	8001a40 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fd55 	bl	80024ac <RCC_SetFlashLatencyFromMSIRange>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e383      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a0c:	4b73      	ldr	r3, [pc, #460]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a72      	ldr	r2, [pc, #456]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001a12:	f043 0308 	orr.w	r3, r3, #8
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b70      	ldr	r3, [pc, #448]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	496d      	ldr	r1, [pc, #436]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a2a:	4b6c      	ldr	r3, [pc, #432]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	021b      	lsls	r3, r3, #8
 8001a38:	4968      	ldr	r1, [pc, #416]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
 8001a3e:	e025      	b.n	8001a8c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a40:	4b66      	ldr	r3, [pc, #408]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a65      	ldr	r2, [pc, #404]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001a46:	f043 0308 	orr.w	r3, r3, #8
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b63      	ldr	r3, [pc, #396]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	4960      	ldr	r1, [pc, #384]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a5e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	495b      	ldr	r1, [pc, #364]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d109      	bne.n	8001a8c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 fd15 	bl	80024ac <RCC_SetFlashLatencyFromMSIRange>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e343      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a8c:	f000 fc4a 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b52      	ldr	r3, [pc, #328]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	091b      	lsrs	r3, r3, #4
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	4950      	ldr	r1, [pc, #320]	@ (8001be0 <HAL_RCC_OscConfig+0x274>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	4a4e      	ldr	r2, [pc, #312]	@ (8001be4 <HAL_RCC_OscConfig+0x278>)
 8001aaa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001aac:	4b4e      	ldr	r3, [pc, #312]	@ (8001be8 <HAL_RCC_OscConfig+0x27c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fb49 	bl	8001148 <HAL_InitTick>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d052      	beq.n	8001b66 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	e327      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d032      	beq.n	8001b32 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001acc:	4b43      	ldr	r3, [pc, #268]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a42      	ldr	r2, [pc, #264]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fb86 	bl	80011e8 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ae0:	f7ff fb82 	bl	80011e8 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e310      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001af2:	4b3a      	ldr	r3, [pc, #232]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001afe:	4b37      	ldr	r3, [pc, #220]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a36      	ldr	r2, [pc, #216]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001b04:	f043 0308 	orr.w	r3, r3, #8
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b34      	ldr	r3, [pc, #208]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4931      	ldr	r1, [pc, #196]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	492c      	ldr	r1, [pc, #176]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	604b      	str	r3, [r1, #4]
 8001b30:	e01a      	b.n	8001b68 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b32:	4b2a      	ldr	r3, [pc, #168]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a29      	ldr	r2, [pc, #164]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fb53 	bl	80011e8 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b46:	f7ff fb4f 	bl	80011e8 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e2dd      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b58:	4b20      	ldr	r3, [pc, #128]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x1da>
 8001b64:	e000      	b.n	8001b68 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b66:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d074      	beq.n	8001c5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d005      	beq.n	8001b86 <HAL_RCC_OscConfig+0x21a>
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b0c      	cmp	r3, #12
 8001b7e:	d10e      	bne.n	8001b9e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d10b      	bne.n	8001b9e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b86:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d064      	beq.n	8001c5c <HAL_RCC_OscConfig+0x2f0>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d160      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e2ba      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x24a>
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a0b      	ldr	r2, [pc, #44]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	e026      	b.n	8001c04 <HAL_RCC_OscConfig+0x298>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bbe:	d115      	bne.n	8001bec <HAL_RCC_OscConfig+0x280>
 8001bc0:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a05      	ldr	r2, [pc, #20]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001bc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b03      	ldr	r3, [pc, #12]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a02      	ldr	r2, [pc, #8]	@ (8001bdc <HAL_RCC_OscConfig+0x270>)
 8001bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e014      	b.n	8001c04 <HAL_RCC_OscConfig+0x298>
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	08005a44 	.word	0x08005a44
 8001be4:	20000000 	.word	0x20000000
 8001be8:	20000004 	.word	0x20000004
 8001bec:	4ba0      	ldr	r3, [pc, #640]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a9f      	ldr	r2, [pc, #636]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b9d      	ldr	r3, [pc, #628]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a9c      	ldr	r2, [pc, #624]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d013      	beq.n	8001c34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff faec 	bl	80011e8 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff fae8 	bl	80011e8 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	@ 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e276      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c26:	4b92      	ldr	r3, [pc, #584]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x2a8>
 8001c32:	e014      	b.n	8001c5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7ff fad8 	bl	80011e8 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff fad4 	bl	80011e8 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	@ 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e262      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c4e:	4b88      	ldr	r3, [pc, #544]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x2d0>
 8001c5a:	e000      	b.n	8001c5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d060      	beq.n	8001d2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_OscConfig+0x310>
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	2b0c      	cmp	r3, #12
 8001c74:	d119      	bne.n	8001caa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d116      	bne.n	8001caa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c7c:	4b7c      	ldr	r3, [pc, #496]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_RCC_OscConfig+0x328>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e23f      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c94:	4b76      	ldr	r3, [pc, #472]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	4973      	ldr	r1, [pc, #460]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ca8:	e040      	b.n	8001d2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d023      	beq.n	8001cfa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb2:	4b6f      	ldr	r3, [pc, #444]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a6e      	ldr	r2, [pc, #440]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbe:	f7ff fa93 	bl	80011e8 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc6:	f7ff fa8f 	bl	80011e8 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e21d      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd8:	4b65      	ldr	r3, [pc, #404]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce4:	4b62      	ldr	r3, [pc, #392]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	495f      	ldr	r1, [pc, #380]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
 8001cf8:	e018      	b.n	8001d2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cfa:	4b5d      	ldr	r3, [pc, #372]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a5c      	ldr	r2, [pc, #368]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001d00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d06:	f7ff fa6f 	bl	80011e8 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0e:	f7ff fa6b 	bl	80011e8 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e1f9      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d20:	4b53      	ldr	r3, [pc, #332]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f0      	bne.n	8001d0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d03c      	beq.n	8001db2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d01c      	beq.n	8001d7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d40:	4b4b      	ldr	r3, [pc, #300]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d46:	4a4a      	ldr	r2, [pc, #296]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d50:	f7ff fa4a 	bl	80011e8 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7ff fa46 	bl	80011e8 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e1d4      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d6a:	4b41      	ldr	r3, [pc, #260]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0ef      	beq.n	8001d58 <HAL_RCC_OscConfig+0x3ec>
 8001d78:	e01b      	b.n	8001db2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d80:	4a3b      	ldr	r2, [pc, #236]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001d82:	f023 0301 	bic.w	r3, r3, #1
 8001d86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8a:	f7ff fa2d 	bl	80011e8 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d92:	f7ff fa29 	bl	80011e8 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e1b7      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da4:	4b32      	ldr	r3, [pc, #200]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1ef      	bne.n	8001d92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 80a6 	beq.w	8001f0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10d      	bne.n	8001dec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd0:	4b27      	ldr	r3, [pc, #156]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd4:	4a26      	ldr	r2, [pc, #152]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ddc:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001de8:	2301      	movs	r3, #1
 8001dea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dec:	4b21      	ldr	r3, [pc, #132]	@ (8001e74 <HAL_RCC_OscConfig+0x508>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d118      	bne.n	8001e2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001df8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e74 <HAL_RCC_OscConfig+0x508>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8001e74 <HAL_RCC_OscConfig+0x508>)
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e04:	f7ff f9f0 	bl	80011e8 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e0c:	f7ff f9ec 	bl	80011e8 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e17a      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e1e:	4b15      	ldr	r3, [pc, #84]	@ (8001e74 <HAL_RCC_OscConfig+0x508>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d108      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4d8>
 8001e32:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e38:	4a0d      	ldr	r2, [pc, #52]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e42:	e029      	b.n	8001e98 <HAL_RCC_OscConfig+0x52c>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b05      	cmp	r3, #5
 8001e4a:	d115      	bne.n	8001e78 <HAL_RCC_OscConfig+0x50c>
 8001e4c:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e52:	4a07      	ldr	r2, [pc, #28]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e5c:	4b04      	ldr	r3, [pc, #16]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e62:	4a03      	ldr	r2, [pc, #12]	@ (8001e70 <HAL_RCC_OscConfig+0x504>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e6c:	e014      	b.n	8001e98 <HAL_RCC_OscConfig+0x52c>
 8001e6e:	bf00      	nop
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40007000 	.word	0x40007000
 8001e78:	4b9c      	ldr	r3, [pc, #624]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8001e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7e:	4a9b      	ldr	r2, [pc, #620]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8001e80:	f023 0301 	bic.w	r3, r3, #1
 8001e84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e88:	4b98      	ldr	r3, [pc, #608]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8001e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8e:	4a97      	ldr	r2, [pc, #604]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8001e90:	f023 0304 	bic.w	r3, r3, #4
 8001e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d016      	beq.n	8001ece <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea0:	f7ff f9a2 	bl	80011e8 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea6:	e00a      	b.n	8001ebe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea8:	f7ff f99e 	bl	80011e8 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e12a      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ebe:	4b8b      	ldr	r3, [pc, #556]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8001ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ed      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x53c>
 8001ecc:	e015      	b.n	8001efa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ece:	f7ff f98b 	bl	80011e8 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7ff f987 	bl	80011e8 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e113      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eec:	4b7f      	ldr	r3, [pc, #508]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8001eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1ed      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001efa:	7ffb      	ldrb	r3, [r7, #31]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d105      	bne.n	8001f0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f00:	4b7a      	ldr	r3, [pc, #488]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f04:	4a79      	ldr	r2, [pc, #484]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8001f06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f0a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80fe 	beq.w	8002112 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	f040 80d0 	bne.w	80020c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f20:	4b72      	ldr	r3, [pc, #456]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 0203 	and.w	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d130      	bne.n	8001f96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d127      	bne.n	8001f96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f50:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d11f      	bne.n	8001f96 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f60:	2a07      	cmp	r2, #7
 8001f62:	bf14      	ite	ne
 8001f64:	2201      	movne	r2, #1
 8001f66:	2200      	moveq	r2, #0
 8001f68:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d113      	bne.n	8001f96 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f78:	085b      	lsrs	r3, r3, #1
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d109      	bne.n	8001f96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	085b      	lsrs	r3, r3, #1
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d06e      	beq.n	8002074 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	2b0c      	cmp	r3, #12
 8001f9a:	d069      	beq.n	8002070 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f9c:	4b53      	ldr	r3, [pc, #332]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fa8:	4b50      	ldr	r3, [pc, #320]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0ad      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fb8:	4b4c      	ldr	r3, [pc, #304]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a4b      	ldr	r2, [pc, #300]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8001fbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fc2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fc4:	f7ff f910 	bl	80011e8 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fcc:	f7ff f90c 	bl	80011e8 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e09a      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fde:	4b43      	ldr	r3, [pc, #268]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fea:	4b40      	ldr	r3, [pc, #256]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	4b40      	ldr	r3, [pc, #256]	@ (80020f0 <HAL_RCC_OscConfig+0x784>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ffa:	3a01      	subs	r2, #1
 8001ffc:	0112      	lsls	r2, r2, #4
 8001ffe:	4311      	orrs	r1, r2
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002004:	0212      	lsls	r2, r2, #8
 8002006:	4311      	orrs	r1, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800200c:	0852      	lsrs	r2, r2, #1
 800200e:	3a01      	subs	r2, #1
 8002010:	0552      	lsls	r2, r2, #21
 8002012:	4311      	orrs	r1, r2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002018:	0852      	lsrs	r2, r2, #1
 800201a:	3a01      	subs	r2, #1
 800201c:	0652      	lsls	r2, r2, #25
 800201e:	4311      	orrs	r1, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002024:	0912      	lsrs	r2, r2, #4
 8002026:	0452      	lsls	r2, r2, #17
 8002028:	430a      	orrs	r2, r1
 800202a:	4930      	ldr	r1, [pc, #192]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 800202c:	4313      	orrs	r3, r2
 800202e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002030:	4b2e      	ldr	r3, [pc, #184]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a2d      	ldr	r2, [pc, #180]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8002036:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800203a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800203c:	4b2b      	ldr	r3, [pc, #172]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4a2a      	ldr	r2, [pc, #168]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8002042:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002046:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002048:	f7ff f8ce 	bl	80011e8 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002050:	f7ff f8ca 	bl	80011e8 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e058      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002062:	4b22      	ldr	r3, [pc, #136]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800206e:	e050      	b.n	8002112 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e04f      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002074:	4b1d      	ldr	r3, [pc, #116]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d148      	bne.n	8002112 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002080:	4b1a      	ldr	r3, [pc, #104]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a19      	ldr	r2, [pc, #100]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8002086:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800208a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800208c:	4b17      	ldr	r3, [pc, #92]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	4a16      	ldr	r2, [pc, #88]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 8002092:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002096:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002098:	f7ff f8a6 	bl	80011e8 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7ff f8a2 	bl	80011e8 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e030      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b2:	4b0e      	ldr	r3, [pc, #56]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x734>
 80020be:	e028      	b.n	8002112 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d023      	beq.n	800210e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c6:	4b09      	ldr	r3, [pc, #36]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a08      	ldr	r2, [pc, #32]	@ (80020ec <HAL_RCC_OscConfig+0x780>)
 80020cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d2:	f7ff f889 	bl	80011e8 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d8:	e00c      	b.n	80020f4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020da:	f7ff f885 	bl	80011e8 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d905      	bls.n	80020f4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e013      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
 80020ec:	40021000 	.word	0x40021000
 80020f0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f4:	4b09      	ldr	r3, [pc, #36]	@ (800211c <HAL_RCC_OscConfig+0x7b0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ec      	bne.n	80020da <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_RCC_OscConfig+0x7b0>)
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	4905      	ldr	r1, [pc, #20]	@ (800211c <HAL_RCC_OscConfig+0x7b0>)
 8002106:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_RCC_OscConfig+0x7b4>)
 8002108:	4013      	ands	r3, r2
 800210a:	60cb      	str	r3, [r1, #12]
 800210c:	e001      	b.n	8002112 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	feeefffc 	.word	0xfeeefffc

08002124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0e7      	b.n	8002308 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002138:	4b75      	ldr	r3, [pc, #468]	@ (8002310 <HAL_RCC_ClockConfig+0x1ec>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d910      	bls.n	8002168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b72      	ldr	r3, [pc, #456]	@ (8002310 <HAL_RCC_ClockConfig+0x1ec>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 0207 	bic.w	r2, r3, #7
 800214e:	4970      	ldr	r1, [pc, #448]	@ (8002310 <HAL_RCC_ClockConfig+0x1ec>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b6e      	ldr	r3, [pc, #440]	@ (8002310 <HAL_RCC_ClockConfig+0x1ec>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0cf      	b.n	8002308 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d010      	beq.n	8002196 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	4b66      	ldr	r3, [pc, #408]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002180:	429a      	cmp	r2, r3
 8002182:	d908      	bls.n	8002196 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002184:	4b63      	ldr	r3, [pc, #396]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	4960      	ldr	r1, [pc, #384]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 8002192:	4313      	orrs	r3, r2
 8002194:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d04c      	beq.n	800223c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d121      	bne.n	80021fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0a6      	b.n	8002308 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c2:	4b54      	ldr	r3, [pc, #336]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d115      	bne.n	80021fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e09a      	b.n	8002308 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d107      	bne.n	80021ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021da:	4b4e      	ldr	r3, [pc, #312]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d109      	bne.n	80021fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e08e      	b.n	8002308 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e086      	b.n	8002308 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021fa:	4b46      	ldr	r3, [pc, #280]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f023 0203 	bic.w	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	4943      	ldr	r1, [pc, #268]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 8002208:	4313      	orrs	r3, r2
 800220a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800220c:	f7fe ffec 	bl	80011e8 <HAL_GetTick>
 8002210:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002212:	e00a      	b.n	800222a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002214:	f7fe ffe8 	bl	80011e8 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002222:	4293      	cmp	r3, r2
 8002224:	d901      	bls.n	800222a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e06e      	b.n	8002308 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222a:	4b3a      	ldr	r3, [pc, #232]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 020c 	and.w	r2, r3, #12
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	429a      	cmp	r2, r3
 800223a:	d1eb      	bne.n	8002214 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d010      	beq.n	800226a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	4b31      	ldr	r3, [pc, #196]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002254:	429a      	cmp	r2, r3
 8002256:	d208      	bcs.n	800226a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002258:	4b2e      	ldr	r3, [pc, #184]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	492b      	ldr	r1, [pc, #172]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800226a:	4b29      	ldr	r3, [pc, #164]	@ (8002310 <HAL_RCC_ClockConfig+0x1ec>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d210      	bcs.n	800229a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002278:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <HAL_RCC_ClockConfig+0x1ec>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 0207 	bic.w	r2, r3, #7
 8002280:	4923      	ldr	r1, [pc, #140]	@ (8002310 <HAL_RCC_ClockConfig+0x1ec>)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	4313      	orrs	r3, r2
 8002286:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002288:	4b21      	ldr	r3, [pc, #132]	@ (8002310 <HAL_RCC_ClockConfig+0x1ec>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d001      	beq.n	800229a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e036      	b.n	8002308 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d008      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	4918      	ldr	r1, [pc, #96]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d009      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022c4:	4b13      	ldr	r3, [pc, #76]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4910      	ldr	r1, [pc, #64]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022d8:	f000 f824 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b0d      	ldr	r3, [pc, #52]	@ (8002314 <HAL_RCC_ClockConfig+0x1f0>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	091b      	lsrs	r3, r3, #4
 80022e4:	f003 030f 	and.w	r3, r3, #15
 80022e8:	490b      	ldr	r1, [pc, #44]	@ (8002318 <HAL_RCC_ClockConfig+0x1f4>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
 80022f4:	4a09      	ldr	r2, [pc, #36]	@ (800231c <HAL_RCC_ClockConfig+0x1f8>)
 80022f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022f8:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <HAL_RCC_ClockConfig+0x1fc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe ff23 	bl	8001148 <HAL_InitTick>
 8002302:	4603      	mov	r3, r0
 8002304:	72fb      	strb	r3, [r7, #11]

  return status;
 8002306:	7afb      	ldrb	r3, [r7, #11]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40022000 	.word	0x40022000
 8002314:	40021000 	.word	0x40021000
 8002318:	08005a44 	.word	0x08005a44
 800231c:	20000000 	.word	0x20000000
 8002320:	20000004 	.word	0x20000004

08002324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	@ 0x24
 8002328:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
 800232e:	2300      	movs	r3, #0
 8002330:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002332:	4b3e      	ldr	r3, [pc, #248]	@ (800242c <HAL_RCC_GetSysClockFreq+0x108>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800233c:	4b3b      	ldr	r3, [pc, #236]	@ (800242c <HAL_RCC_GetSysClockFreq+0x108>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d005      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x34>
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	2b0c      	cmp	r3, #12
 8002350:	d121      	bne.n	8002396 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d11e      	bne.n	8002396 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002358:	4b34      	ldr	r3, [pc, #208]	@ (800242c <HAL_RCC_GetSysClockFreq+0x108>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d107      	bne.n	8002374 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002364:	4b31      	ldr	r3, [pc, #196]	@ (800242c <HAL_RCC_GetSysClockFreq+0x108>)
 8002366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	e005      	b.n	8002380 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002374:	4b2d      	ldr	r3, [pc, #180]	@ (800242c <HAL_RCC_GetSysClockFreq+0x108>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002380:	4a2b      	ldr	r2, [pc, #172]	@ (8002430 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002388:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10d      	bne.n	80023ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002394:	e00a      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b04      	cmp	r3, #4
 800239a:	d102      	bne.n	80023a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800239c:	4b25      	ldr	r3, [pc, #148]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x110>)
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	e004      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023a8:	4b23      	ldr	r3, [pc, #140]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x114>)
 80023aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	2b0c      	cmp	r3, #12
 80023b0:	d134      	bne.n	800241c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023b2:	4b1e      	ldr	r3, [pc, #120]	@ (800242c <HAL_RCC_GetSysClockFreq+0x108>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0xa6>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d003      	beq.n	80023d0 <HAL_RCC_GetSysClockFreq+0xac>
 80023c8:	e005      	b.n	80023d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x110>)
 80023cc:	617b      	str	r3, [r7, #20]
      break;
 80023ce:	e005      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023d0:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <HAL_RCC_GetSysClockFreq+0x114>)
 80023d2:	617b      	str	r3, [r7, #20]
      break;
 80023d4:	e002      	b.n	80023dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	617b      	str	r3, [r7, #20]
      break;
 80023da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023dc:	4b13      	ldr	r3, [pc, #76]	@ (800242c <HAL_RCC_GetSysClockFreq+0x108>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	3301      	adds	r3, #1
 80023e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023ea:	4b10      	ldr	r3, [pc, #64]	@ (800242c <HAL_RCC_GetSysClockFreq+0x108>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	0a1b      	lsrs	r3, r3, #8
 80023f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	fb03 f202 	mul.w	r2, r3, r2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002400:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002402:	4b0a      	ldr	r3, [pc, #40]	@ (800242c <HAL_RCC_GetSysClockFreq+0x108>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	0e5b      	lsrs	r3, r3, #25
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	3301      	adds	r3, #1
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	fbb2 f3f3 	udiv	r3, r2, r3
 800241a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800241c:	69bb      	ldr	r3, [r7, #24]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3724      	adds	r7, #36	@ 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
 8002430:	08005a5c 	.word	0x08005a5c
 8002434:	00f42400 	.word	0x00f42400
 8002438:	007a1200 	.word	0x007a1200

0800243c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002440:	4b03      	ldr	r3, [pc, #12]	@ (8002450 <HAL_RCC_GetHCLKFreq+0x14>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	20000000 	.word	0x20000000

08002454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002458:	f7ff fff0 	bl	800243c <HAL_RCC_GetHCLKFreq>
 800245c:	4602      	mov	r2, r0
 800245e:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	4904      	ldr	r1, [pc, #16]	@ (800247c <HAL_RCC_GetPCLK1Freq+0x28>)
 800246a:	5ccb      	ldrb	r3, [r1, r3]
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40021000 	.word	0x40021000
 800247c:	08005a54 	.word	0x08005a54

08002480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002484:	f7ff ffda 	bl	800243c <HAL_RCC_GetHCLKFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	0adb      	lsrs	r3, r3, #11
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4904      	ldr	r1, [pc, #16]	@ (80024a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000
 80024a8:	08005a54 	.word	0x08005a54

080024ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024c4:	f7ff f9ee 	bl	80018a4 <HAL_PWREx_GetVoltageRange>
 80024c8:	6178      	str	r0, [r7, #20]
 80024ca:	e014      	b.n	80024f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024cc:	4b25      	ldr	r3, [pc, #148]	@ (8002564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d0:	4a24      	ldr	r2, [pc, #144]	@ (8002564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80024d8:	4b22      	ldr	r3, [pc, #136]	@ (8002564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024e4:	f7ff f9de 	bl	80018a4 <HAL_PWREx_GetVoltageRange>
 80024e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002564 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024fc:	d10b      	bne.n	8002516 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b80      	cmp	r3, #128	@ 0x80
 8002502:	d919      	bls.n	8002538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2ba0      	cmp	r3, #160	@ 0xa0
 8002508:	d902      	bls.n	8002510 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800250a:	2302      	movs	r3, #2
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	e013      	b.n	8002538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002510:	2301      	movs	r3, #1
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	e010      	b.n	8002538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b80      	cmp	r3, #128	@ 0x80
 800251a:	d902      	bls.n	8002522 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800251c:	2303      	movs	r3, #3
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	e00a      	b.n	8002538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b80      	cmp	r3, #128	@ 0x80
 8002526:	d102      	bne.n	800252e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002528:	2302      	movs	r3, #2
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	e004      	b.n	8002538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b70      	cmp	r3, #112	@ 0x70
 8002532:	d101      	bne.n	8002538 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002534:	2301      	movs	r3, #1
 8002536:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002538:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 0207 	bic.w	r2, r3, #7
 8002540:	4909      	ldr	r1, [pc, #36]	@ (8002568 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4313      	orrs	r3, r2
 8002546:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002548:	4b07      	ldr	r3, [pc, #28]	@ (8002568 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	429a      	cmp	r2, r3
 8002554:	d001      	beq.n	800255a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000
 8002568:	40022000 	.word	0x40022000

0800256c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002574:	2300      	movs	r3, #0
 8002576:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002578:	2300      	movs	r3, #0
 800257a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002584:	2b00      	cmp	r3, #0
 8002586:	d041      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800258c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002590:	d02a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002592:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002596:	d824      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002598:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800259c:	d008      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800259e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025a2:	d81e      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00a      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025ac:	d010      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025ae:	e018      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025b0:	4b86      	ldr	r3, [pc, #536]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4a85      	ldr	r2, [pc, #532]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025bc:	e015      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3304      	adds	r3, #4
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 fabb 	bl	8002b40 <RCCEx_PLLSAI1_Config>
 80025ca:	4603      	mov	r3, r0
 80025cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025ce:	e00c      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3320      	adds	r3, #32
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fba6 	bl	8002d28 <RCCEx_PLLSAI2_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025e0:	e003      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	74fb      	strb	r3, [r7, #19]
      break;
 80025e6:	e000      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ea:	7cfb      	ldrb	r3, [r7, #19]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10b      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025f0:	4b76      	ldr	r3, [pc, #472]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025fe:	4973      	ldr	r1, [pc, #460]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002600:	4313      	orrs	r3, r2
 8002602:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002606:	e001      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002608:	7cfb      	ldrb	r3, [r7, #19]
 800260a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d041      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800261c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002620:	d02a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002622:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002626:	d824      	bhi.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002628:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800262c:	d008      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800262e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002632:	d81e      	bhi.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800263c:	d010      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800263e:	e018      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002640:	4b62      	ldr	r3, [pc, #392]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4a61      	ldr	r2, [pc, #388]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800264c:	e015      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3304      	adds	r3, #4
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f000 fa73 	bl	8002b40 <RCCEx_PLLSAI1_Config>
 800265a:	4603      	mov	r3, r0
 800265c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800265e:	e00c      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3320      	adds	r3, #32
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fb5e 	bl	8002d28 <RCCEx_PLLSAI2_Config>
 800266c:	4603      	mov	r3, r0
 800266e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002670:	e003      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	74fb      	strb	r3, [r7, #19]
      break;
 8002676:	e000      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800267a:	7cfb      	ldrb	r3, [r7, #19]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10b      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002680:	4b52      	ldr	r3, [pc, #328]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002686:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800268e:	494f      	ldr	r1, [pc, #316]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002690:	4313      	orrs	r3, r2
 8002692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002696:	e001      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002698:	7cfb      	ldrb	r3, [r7, #19]
 800269a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 80a0 	beq.w	80027ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026ae:	4b47      	ldr	r3, [pc, #284]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e000      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026be:	2300      	movs	r3, #0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00d      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c4:	4b41      	ldr	r3, [pc, #260]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c8:	4a40      	ldr	r2, [pc, #256]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80026d0:	4b3e      	ldr	r3, [pc, #248]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026dc:	2301      	movs	r3, #1
 80026de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026e0:	4b3b      	ldr	r3, [pc, #236]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a3a      	ldr	r2, [pc, #232]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026ec:	f7fe fd7c 	bl	80011e8 <HAL_GetTick>
 80026f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026f2:	e009      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f4:	f7fe fd78 	bl	80011e8 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d902      	bls.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	74fb      	strb	r3, [r7, #19]
        break;
 8002706:	e005      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002708:	4b31      	ldr	r3, [pc, #196]	@ (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0ef      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d15c      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800271a:	4b2c      	ldr	r3, [pc, #176]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002720:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002724:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01f      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	429a      	cmp	r2, r3
 8002736:	d019      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002738:	4b24      	ldr	r3, [pc, #144]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002742:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002744:	4b21      	ldr	r3, [pc, #132]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274a:	4a20      	ldr	r2, [pc, #128]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002754:	4b1d      	ldr	r3, [pc, #116]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275a:	4a1c      	ldr	r2, [pc, #112]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002764:	4a19      	ldr	r2, [pc, #100]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d016      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7fe fd37 	bl	80011e8 <HAL_GetTick>
 800277a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277c:	e00b      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7fe fd33 	bl	80011e8 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d902      	bls.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	74fb      	strb	r3, [r7, #19]
            break;
 8002794:	e006      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002796:	4b0d      	ldr	r3, [pc, #52]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0ec      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027aa:	4b08      	ldr	r3, [pc, #32]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027ba:	4904      	ldr	r1, [pc, #16]	@ (80027cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80027c2:	e009      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	74bb      	strb	r3, [r7, #18]
 80027c8:	e006      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d4:	7cfb      	ldrb	r3, [r7, #19]
 80027d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d8:	7c7b      	ldrb	r3, [r7, #17]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d105      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027de:	4b9e      	ldr	r3, [pc, #632]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e2:	4a9d      	ldr	r2, [pc, #628]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027f6:	4b98      	ldr	r3, [pc, #608]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fc:	f023 0203 	bic.w	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002804:	4994      	ldr	r1, [pc, #592]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002818:	4b8f      	ldr	r3, [pc, #572]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281e:	f023 020c 	bic.w	r2, r3, #12
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002826:	498c      	ldr	r1, [pc, #560]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800283a:	4b87      	ldr	r3, [pc, #540]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002840:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	4983      	ldr	r1, [pc, #524]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800285c:	4b7e      	ldr	r3, [pc, #504]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002862:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	497b      	ldr	r1, [pc, #492]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800287e:	4b76      	ldr	r3, [pc, #472]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002884:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800288c:	4972      	ldr	r1, [pc, #456]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028a0:	4b6d      	ldr	r3, [pc, #436]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ae:	496a      	ldr	r1, [pc, #424]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028c2:	4b65      	ldr	r3, [pc, #404]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d0:	4961      	ldr	r1, [pc, #388]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028e4:	4b5c      	ldr	r3, [pc, #368]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028f2:	4959      	ldr	r1, [pc, #356]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002906:	4b54      	ldr	r3, [pc, #336]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002914:	4950      	ldr	r1, [pc, #320]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002928:	4b4b      	ldr	r3, [pc, #300]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800292e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002936:	4948      	ldr	r1, [pc, #288]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800294a:	4b43      	ldr	r3, [pc, #268]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002950:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002958:	493f      	ldr	r1, [pc, #252]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d028      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800296c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002972:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800297a:	4937      	ldr	r1, [pc, #220]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002986:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800298a:	d106      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800298c:	4b32      	ldr	r3, [pc, #200]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a31      	ldr	r2, [pc, #196]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002992:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002996:	60d3      	str	r3, [r2, #12]
 8002998:	e011      	b.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800299e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029a2:	d10c      	bne.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3304      	adds	r3, #4
 80029a8:	2101      	movs	r1, #1
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f8c8 	bl	8002b40 <RCCEx_PLLSAI1_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029ba:	7cfb      	ldrb	r3, [r7, #19]
 80029bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d028      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029ca:	4b23      	ldr	r3, [pc, #140]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d8:	491f      	ldr	r1, [pc, #124]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029e8:	d106      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029f4:	60d3      	str	r3, [r2, #12]
 80029f6:	e011      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3304      	adds	r3, #4
 8002a06:	2101      	movs	r1, #1
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 f899 	bl	8002b40 <RCCEx_PLLSAI1_Config>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a12:	7cfb      	ldrb	r3, [r7, #19]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a18:	7cfb      	ldrb	r3, [r7, #19]
 8002a1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d02b      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a28:	4b0b      	ldr	r3, [pc, #44]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a36:	4908      	ldr	r1, [pc, #32]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a46:	d109      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a48:	4b03      	ldr	r3, [pc, #12]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4a02      	ldr	r2, [pc, #8]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a52:	60d3      	str	r3, [r2, #12]
 8002a54:	e014      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 f867 	bl	8002b40 <RCCEx_PLLSAI1_Config>
 8002a72:	4603      	mov	r3, r0
 8002a74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a76:	7cfb      	ldrb	r3, [r7, #19]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a7c:	7cfb      	ldrb	r3, [r7, #19]
 8002a7e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d02f      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a9a:	4928      	ldr	r1, [pc, #160]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002aa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002aaa:	d10d      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3304      	adds	r3, #4
 8002ab0:	2102      	movs	r1, #2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f844 	bl	8002b40 <RCCEx_PLLSAI1_Config>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002abc:	7cfb      	ldrb	r3, [r7, #19]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d014      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ac2:	7cfb      	ldrb	r3, [r7, #19]
 8002ac4:	74bb      	strb	r3, [r7, #18]
 8002ac6:	e011      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002acc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3320      	adds	r3, #32
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 f925 	bl	8002d28 <RCCEx_PLLSAI2_Config>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ae2:	7cfb      	ldrb	r3, [r7, #19]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ae8:	7cfb      	ldrb	r3, [r7, #19]
 8002aea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002af8:	4b10      	ldr	r3, [pc, #64]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b06:	490d      	ldr	r1, [pc, #52]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b1a:	4b08      	ldr	r3, [pc, #32]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b20:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b2a:	4904      	ldr	r1, [pc, #16]	@ (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b32:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40021000 	.word	0x40021000

08002b40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b4e:	4b75      	ldr	r3, [pc, #468]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d018      	beq.n	8002b8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b5a:	4b72      	ldr	r3, [pc, #456]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	f003 0203 	and.w	r2, r3, #3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d10d      	bne.n	8002b86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d009      	beq.n	8002b86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b72:	4b6c      	ldr	r3, [pc, #432]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
       ||
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d047      	beq.n	8002c16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
 8002b8a:	e044      	b.n	8002c16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d018      	beq.n	8002bc6 <RCCEx_PLLSAI1_Config+0x86>
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d825      	bhi.n	8002be4 <RCCEx_PLLSAI1_Config+0xa4>
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d002      	beq.n	8002ba2 <RCCEx_PLLSAI1_Config+0x62>
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d009      	beq.n	8002bb4 <RCCEx_PLLSAI1_Config+0x74>
 8002ba0:	e020      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ba2:	4b60      	ldr	r3, [pc, #384]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d11d      	bne.n	8002bea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb2:	e01a      	b.n	8002bea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d116      	bne.n	8002bee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc4:	e013      	b.n	8002bee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bc6:	4b57      	ldr	r3, [pc, #348]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10f      	bne.n	8002bf2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bd2:	4b54      	ldr	r3, [pc, #336]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002be2:	e006      	b.n	8002bf2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
      break;
 8002be8:	e004      	b.n	8002bf4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bea:	bf00      	nop
 8002bec:	e002      	b.n	8002bf4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bee:	bf00      	nop
 8002bf0:	e000      	b.n	8002bf4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002bf2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10d      	bne.n	8002c16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	4944      	ldr	r1, [pc, #272]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d17d      	bne.n	8002d18 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c1c:	4b41      	ldr	r3, [pc, #260]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a40      	ldr	r2, [pc, #256]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c28:	f7fe fade 	bl	80011e8 <HAL_GetTick>
 8002c2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c2e:	e009      	b.n	8002c44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c30:	f7fe fada 	bl	80011e8 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d902      	bls.n	8002c44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	73fb      	strb	r3, [r7, #15]
        break;
 8002c42:	e005      	b.n	8002c50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c44:	4b37      	ldr	r3, [pc, #220]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1ef      	bne.n	8002c30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d160      	bne.n	8002d18 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d111      	bne.n	8002c80 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c5c:	4b31      	ldr	r3, [pc, #196]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6892      	ldr	r2, [r2, #8]
 8002c6c:	0211      	lsls	r1, r2, #8
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68d2      	ldr	r2, [r2, #12]
 8002c72:	0912      	lsrs	r2, r2, #4
 8002c74:	0452      	lsls	r2, r2, #17
 8002c76:	430a      	orrs	r2, r1
 8002c78:	492a      	ldr	r1, [pc, #168]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	610b      	str	r3, [r1, #16]
 8002c7e:	e027      	b.n	8002cd0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d112      	bne.n	8002cac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c86:	4b27      	ldr	r3, [pc, #156]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002c8e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6892      	ldr	r2, [r2, #8]
 8002c96:	0211      	lsls	r1, r2, #8
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6912      	ldr	r2, [r2, #16]
 8002c9c:	0852      	lsrs	r2, r2, #1
 8002c9e:	3a01      	subs	r2, #1
 8002ca0:	0552      	lsls	r2, r2, #21
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	491f      	ldr	r1, [pc, #124]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	610b      	str	r3, [r1, #16]
 8002caa:	e011      	b.n	8002cd0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cac:	4b1d      	ldr	r3, [pc, #116]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002cb4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6892      	ldr	r2, [r2, #8]
 8002cbc:	0211      	lsls	r1, r2, #8
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6952      	ldr	r2, [r2, #20]
 8002cc2:	0852      	lsrs	r2, r2, #1
 8002cc4:	3a01      	subs	r2, #1
 8002cc6:	0652      	lsls	r2, r2, #25
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	4916      	ldr	r1, [pc, #88]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cd0:	4b14      	ldr	r3, [pc, #80]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a13      	ldr	r2, [pc, #76]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002cda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7fe fa84 	bl	80011e8 <HAL_GetTick>
 8002ce0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ce2:	e009      	b.n	8002cf8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ce4:	f7fe fa80 	bl	80011e8 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d902      	bls.n	8002cf8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	73fb      	strb	r3, [r7, #15]
          break;
 8002cf6:	e005      	b.n	8002d04 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ef      	beq.n	8002ce4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d0a:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	4904      	ldr	r1, [pc, #16]	@ (8002d24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000

08002d28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d36:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d018      	beq.n	8002d74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d42:	4b67      	ldr	r3, [pc, #412]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f003 0203 	and.w	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d10d      	bne.n	8002d6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
       ||
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d5a:	4b61      	ldr	r3, [pc, #388]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	091b      	lsrs	r3, r3, #4
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
       ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d047      	beq.n	8002dfe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	e044      	b.n	8002dfe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d018      	beq.n	8002dae <RCCEx_PLLSAI2_Config+0x86>
 8002d7c:	2b03      	cmp	r3, #3
 8002d7e:	d825      	bhi.n	8002dcc <RCCEx_PLLSAI2_Config+0xa4>
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d002      	beq.n	8002d8a <RCCEx_PLLSAI2_Config+0x62>
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d009      	beq.n	8002d9c <RCCEx_PLLSAI2_Config+0x74>
 8002d88:	e020      	b.n	8002dcc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d8a:	4b55      	ldr	r3, [pc, #340]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d11d      	bne.n	8002dd2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9a:	e01a      	b.n	8002dd2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d9c:	4b50      	ldr	r3, [pc, #320]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d116      	bne.n	8002dd6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dac:	e013      	b.n	8002dd6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dae:	4b4c      	ldr	r3, [pc, #304]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10f      	bne.n	8002dda <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dba:	4b49      	ldr	r3, [pc, #292]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dca:	e006      	b.n	8002dda <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd0:	e004      	b.n	8002ddc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dd2:	bf00      	nop
 8002dd4:	e002      	b.n	8002ddc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dda:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10d      	bne.n	8002dfe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002de2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6819      	ldr	r1, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	430b      	orrs	r3, r1
 8002df8:	4939      	ldr	r1, [pc, #228]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d167      	bne.n	8002ed4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e04:	4b36      	ldr	r3, [pc, #216]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a35      	ldr	r2, [pc, #212]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e10:	f7fe f9ea 	bl	80011e8 <HAL_GetTick>
 8002e14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e16:	e009      	b.n	8002e2c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e18:	f7fe f9e6 	bl	80011e8 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d902      	bls.n	8002e2c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	73fb      	strb	r3, [r7, #15]
        break;
 8002e2a:	e005      	b.n	8002e38 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e2c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ef      	bne.n	8002e18 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d14a      	bne.n	8002ed4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d111      	bne.n	8002e68 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e44:	4b26      	ldr	r3, [pc, #152]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6892      	ldr	r2, [r2, #8]
 8002e54:	0211      	lsls	r1, r2, #8
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68d2      	ldr	r2, [r2, #12]
 8002e5a:	0912      	lsrs	r2, r2, #4
 8002e5c:	0452      	lsls	r2, r2, #17
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	491f      	ldr	r1, [pc, #124]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	614b      	str	r3, [r1, #20]
 8002e66:	e011      	b.n	8002e8c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e68:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e70:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6892      	ldr	r2, [r2, #8]
 8002e78:	0211      	lsls	r1, r2, #8
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6912      	ldr	r2, [r2, #16]
 8002e7e:	0852      	lsrs	r2, r2, #1
 8002e80:	3a01      	subs	r2, #1
 8002e82:	0652      	lsls	r2, r2, #25
 8002e84:	430a      	orrs	r2, r1
 8002e86:	4916      	ldr	r1, [pc, #88]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e8c:	4b14      	ldr	r3, [pc, #80]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a13      	ldr	r2, [pc, #76]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e98:	f7fe f9a6 	bl	80011e8 <HAL_GetTick>
 8002e9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e9e:	e009      	b.n	8002eb4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ea0:	f7fe f9a2 	bl	80011e8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d902      	bls.n	8002eb4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	73fb      	strb	r3, [r7, #15]
          break;
 8002eb2:	e005      	b.n	8002ec0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0ef      	beq.n	8002ea0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d106      	bne.n	8002ed4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ec6:	4b06      	ldr	r3, [pc, #24]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	4904      	ldr	r1, [pc, #16]	@ (8002ee0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000

08002ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e049      	b.n	8002f8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d106      	bne.n	8002f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fd fff8 	bl	8000f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	4619      	mov	r1, r3
 8002f22:	4610      	mov	r0, r2
 8002f24:	f000 fb7a 	bl	800361c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e049      	b.n	8003038 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d106      	bne.n	8002fbe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f841 	bl	8003040 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	f000 fb23 	bl	800361c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d109      	bne.n	8003078 <HAL_TIM_PWM_Start+0x24>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b01      	cmp	r3, #1
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	e03c      	b.n	80030f2 <HAL_TIM_PWM_Start+0x9e>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	2b04      	cmp	r3, #4
 800307c:	d109      	bne.n	8003092 <HAL_TIM_PWM_Start+0x3e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b01      	cmp	r3, #1
 8003088:	bf14      	ite	ne
 800308a:	2301      	movne	r3, #1
 800308c:	2300      	moveq	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	e02f      	b.n	80030f2 <HAL_TIM_PWM_Start+0x9e>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b08      	cmp	r3, #8
 8003096:	d109      	bne.n	80030ac <HAL_TIM_PWM_Start+0x58>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	bf14      	ite	ne
 80030a4:	2301      	movne	r3, #1
 80030a6:	2300      	moveq	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	e022      	b.n	80030f2 <HAL_TIM_PWM_Start+0x9e>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b0c      	cmp	r3, #12
 80030b0:	d109      	bne.n	80030c6 <HAL_TIM_PWM_Start+0x72>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	bf14      	ite	ne
 80030be:	2301      	movne	r3, #1
 80030c0:	2300      	moveq	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	e015      	b.n	80030f2 <HAL_TIM_PWM_Start+0x9e>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d109      	bne.n	80030e0 <HAL_TIM_PWM_Start+0x8c>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	bf14      	ite	ne
 80030d8:	2301      	movne	r3, #1
 80030da:	2300      	moveq	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	e008      	b.n	80030f2 <HAL_TIM_PWM_Start+0x9e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e09c      	b.n	8003234 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d104      	bne.n	800310a <HAL_TIM_PWM_Start+0xb6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003108:	e023      	b.n	8003152 <HAL_TIM_PWM_Start+0xfe>
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b04      	cmp	r3, #4
 800310e:	d104      	bne.n	800311a <HAL_TIM_PWM_Start+0xc6>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003118:	e01b      	b.n	8003152 <HAL_TIM_PWM_Start+0xfe>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b08      	cmp	r3, #8
 800311e:	d104      	bne.n	800312a <HAL_TIM_PWM_Start+0xd6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003128:	e013      	b.n	8003152 <HAL_TIM_PWM_Start+0xfe>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b0c      	cmp	r3, #12
 800312e:	d104      	bne.n	800313a <HAL_TIM_PWM_Start+0xe6>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003138:	e00b      	b.n	8003152 <HAL_TIM_PWM_Start+0xfe>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b10      	cmp	r3, #16
 800313e:	d104      	bne.n	800314a <HAL_TIM_PWM_Start+0xf6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003148:	e003      	b.n	8003152 <HAL_TIM_PWM_Start+0xfe>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2202      	movs	r2, #2
 800314e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2201      	movs	r2, #1
 8003158:	6839      	ldr	r1, [r7, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fe74 	bl	8003e48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a35      	ldr	r2, [pc, #212]	@ (800323c <HAL_TIM_PWM_Start+0x1e8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d013      	beq.n	8003192 <HAL_TIM_PWM_Start+0x13e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a34      	ldr	r2, [pc, #208]	@ (8003240 <HAL_TIM_PWM_Start+0x1ec>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00e      	beq.n	8003192 <HAL_TIM_PWM_Start+0x13e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a32      	ldr	r2, [pc, #200]	@ (8003244 <HAL_TIM_PWM_Start+0x1f0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d009      	beq.n	8003192 <HAL_TIM_PWM_Start+0x13e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a31      	ldr	r2, [pc, #196]	@ (8003248 <HAL_TIM_PWM_Start+0x1f4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_TIM_PWM_Start+0x13e>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a2f      	ldr	r2, [pc, #188]	@ (800324c <HAL_TIM_PWM_Start+0x1f8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d101      	bne.n	8003196 <HAL_TIM_PWM_Start+0x142>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_TIM_PWM_Start+0x144>
 8003196:	2300      	movs	r3, #0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d007      	beq.n	80031ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a22      	ldr	r2, [pc, #136]	@ (800323c <HAL_TIM_PWM_Start+0x1e8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01d      	beq.n	80031f2 <HAL_TIM_PWM_Start+0x19e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031be:	d018      	beq.n	80031f2 <HAL_TIM_PWM_Start+0x19e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a22      	ldr	r2, [pc, #136]	@ (8003250 <HAL_TIM_PWM_Start+0x1fc>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <HAL_TIM_PWM_Start+0x19e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a21      	ldr	r2, [pc, #132]	@ (8003254 <HAL_TIM_PWM_Start+0x200>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00e      	beq.n	80031f2 <HAL_TIM_PWM_Start+0x19e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a1f      	ldr	r2, [pc, #124]	@ (8003258 <HAL_TIM_PWM_Start+0x204>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d009      	beq.n	80031f2 <HAL_TIM_PWM_Start+0x19e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a17      	ldr	r2, [pc, #92]	@ (8003240 <HAL_TIM_PWM_Start+0x1ec>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d004      	beq.n	80031f2 <HAL_TIM_PWM_Start+0x19e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a15      	ldr	r2, [pc, #84]	@ (8003244 <HAL_TIM_PWM_Start+0x1f0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d115      	bne.n	800321e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	4b18      	ldr	r3, [pc, #96]	@ (800325c <HAL_TIM_PWM_Start+0x208>)
 80031fa:	4013      	ands	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b06      	cmp	r3, #6
 8003202:	d015      	beq.n	8003230 <HAL_TIM_PWM_Start+0x1dc>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800320a:	d011      	beq.n	8003230 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321c:	e008      	b.n	8003230 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f042 0201 	orr.w	r2, r2, #1
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	e000      	b.n	8003232 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003230:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40013400 	.word	0x40013400
 8003244:	40014000 	.word	0x40014000
 8003248:	40014400 	.word	0x40014400
 800324c:	40014800 	.word	0x40014800
 8003250:	40000400 	.word	0x40000400
 8003254:	40000800 	.word	0x40000800
 8003258:	40000c00 	.word	0x40000c00
 800325c:	00010007 	.word	0x00010007

08003260 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800327a:	2302      	movs	r3, #2
 800327c:	e0ff      	b.n	800347e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b14      	cmp	r3, #20
 800328a:	f200 80f0 	bhi.w	800346e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800328e:	a201      	add	r2, pc, #4	@ (adr r2, 8003294 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003294:	080032e9 	.word	0x080032e9
 8003298:	0800346f 	.word	0x0800346f
 800329c:	0800346f 	.word	0x0800346f
 80032a0:	0800346f 	.word	0x0800346f
 80032a4:	08003329 	.word	0x08003329
 80032a8:	0800346f 	.word	0x0800346f
 80032ac:	0800346f 	.word	0x0800346f
 80032b0:	0800346f 	.word	0x0800346f
 80032b4:	0800336b 	.word	0x0800336b
 80032b8:	0800346f 	.word	0x0800346f
 80032bc:	0800346f 	.word	0x0800346f
 80032c0:	0800346f 	.word	0x0800346f
 80032c4:	080033ab 	.word	0x080033ab
 80032c8:	0800346f 	.word	0x0800346f
 80032cc:	0800346f 	.word	0x0800346f
 80032d0:	0800346f 	.word	0x0800346f
 80032d4:	080033ed 	.word	0x080033ed
 80032d8:	0800346f 	.word	0x0800346f
 80032dc:	0800346f 	.word	0x0800346f
 80032e0:	0800346f 	.word	0x0800346f
 80032e4:	0800342d 	.word	0x0800342d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fa3a 	bl	8003768 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0208 	orr.w	r2, r2, #8
 8003302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0204 	bic.w	r2, r2, #4
 8003312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6999      	ldr	r1, [r3, #24]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	619a      	str	r2, [r3, #24]
      break;
 8003326:	e0a5      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	4618      	mov	r0, r3
 8003330:	f000 faaa 	bl	8003888 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699a      	ldr	r2, [r3, #24]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6999      	ldr	r1, [r3, #24]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	021a      	lsls	r2, r3, #8
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	619a      	str	r2, [r3, #24]
      break;
 8003368:	e084      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fb13 	bl	800399c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0208 	orr.w	r2, r2, #8
 8003384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0204 	bic.w	r2, r2, #4
 8003394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69d9      	ldr	r1, [r3, #28]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	61da      	str	r2, [r3, #28]
      break;
 80033a8:	e064      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fb7b 	bl	8003aac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	69d9      	ldr	r1, [r3, #28]
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	021a      	lsls	r2, r3, #8
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	61da      	str	r2, [r3, #28]
      break;
 80033ea:	e043      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fbc4 	bl	8003b80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f042 0208 	orr.w	r2, r2, #8
 8003406:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0204 	bic.w	r2, r2, #4
 8003416:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	691a      	ldr	r2, [r3, #16]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800342a:	e023      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fc08 	bl	8003c48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003446:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003456:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	021a      	lsls	r2, r3, #8
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800346c:	e002      	b.n	8003474 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	75fb      	strb	r3, [r7, #23]
      break;
 8003472:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800347c:	7dfb      	ldrb	r3, [r7, #23]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop

08003488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_TIM_ConfigClockSource+0x1c>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e0b6      	b.n	8003612 <HAL_TIM_ConfigClockSource+0x18a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e0:	d03e      	beq.n	8003560 <HAL_TIM_ConfigClockSource+0xd8>
 80034e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034e6:	f200 8087 	bhi.w	80035f8 <HAL_TIM_ConfigClockSource+0x170>
 80034ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034ee:	f000 8086 	beq.w	80035fe <HAL_TIM_ConfigClockSource+0x176>
 80034f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034f6:	d87f      	bhi.n	80035f8 <HAL_TIM_ConfigClockSource+0x170>
 80034f8:	2b70      	cmp	r3, #112	@ 0x70
 80034fa:	d01a      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0xaa>
 80034fc:	2b70      	cmp	r3, #112	@ 0x70
 80034fe:	d87b      	bhi.n	80035f8 <HAL_TIM_ConfigClockSource+0x170>
 8003500:	2b60      	cmp	r3, #96	@ 0x60
 8003502:	d050      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0x11e>
 8003504:	2b60      	cmp	r3, #96	@ 0x60
 8003506:	d877      	bhi.n	80035f8 <HAL_TIM_ConfigClockSource+0x170>
 8003508:	2b50      	cmp	r3, #80	@ 0x50
 800350a:	d03c      	beq.n	8003586 <HAL_TIM_ConfigClockSource+0xfe>
 800350c:	2b50      	cmp	r3, #80	@ 0x50
 800350e:	d873      	bhi.n	80035f8 <HAL_TIM_ConfigClockSource+0x170>
 8003510:	2b40      	cmp	r3, #64	@ 0x40
 8003512:	d058      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x13e>
 8003514:	2b40      	cmp	r3, #64	@ 0x40
 8003516:	d86f      	bhi.n	80035f8 <HAL_TIM_ConfigClockSource+0x170>
 8003518:	2b30      	cmp	r3, #48	@ 0x30
 800351a:	d064      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x15e>
 800351c:	2b30      	cmp	r3, #48	@ 0x30
 800351e:	d86b      	bhi.n	80035f8 <HAL_TIM_ConfigClockSource+0x170>
 8003520:	2b20      	cmp	r3, #32
 8003522:	d060      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x15e>
 8003524:	2b20      	cmp	r3, #32
 8003526:	d867      	bhi.n	80035f8 <HAL_TIM_ConfigClockSource+0x170>
 8003528:	2b00      	cmp	r3, #0
 800352a:	d05c      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x15e>
 800352c:	2b10      	cmp	r3, #16
 800352e:	d05a      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x15e>
 8003530:	e062      	b.n	80035f8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003542:	f000 fc61 	bl	8003e08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003554:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	609a      	str	r2, [r3, #8]
      break;
 800355e:	e04f      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003570:	f000 fc4a 	bl	8003e08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003582:	609a      	str	r2, [r3, #8]
      break;
 8003584:	e03c      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003592:	461a      	mov	r2, r3
 8003594:	f000 fbbe 	bl	8003d14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2150      	movs	r1, #80	@ 0x50
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fc17 	bl	8003dd2 <TIM_ITRx_SetConfig>
      break;
 80035a4:	e02c      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035b2:	461a      	mov	r2, r3
 80035b4:	f000 fbdd 	bl	8003d72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2160      	movs	r1, #96	@ 0x60
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 fc07 	bl	8003dd2 <TIM_ITRx_SetConfig>
      break;
 80035c4:	e01c      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d2:	461a      	mov	r2, r3
 80035d4:	f000 fb9e 	bl	8003d14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2140      	movs	r1, #64	@ 0x40
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fbf7 	bl	8003dd2 <TIM_ITRx_SetConfig>
      break;
 80035e4:	e00c      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4619      	mov	r1, r3
 80035f0:	4610      	mov	r0, r2
 80035f2:	f000 fbee 	bl	8003dd2 <TIM_ITRx_SetConfig>
      break;
 80035f6:	e003      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
      break;
 80035fc:	e000      	b.n	8003600 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80035fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a46      	ldr	r2, [pc, #280]	@ (8003748 <TIM_Base_SetConfig+0x12c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d013      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800363a:	d00f      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a43      	ldr	r2, [pc, #268]	@ (800374c <TIM_Base_SetConfig+0x130>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d00b      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a42      	ldr	r2, [pc, #264]	@ (8003750 <TIM_Base_SetConfig+0x134>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d007      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a41      	ldr	r2, [pc, #260]	@ (8003754 <TIM_Base_SetConfig+0x138>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d003      	beq.n	800365c <TIM_Base_SetConfig+0x40>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a40      	ldr	r2, [pc, #256]	@ (8003758 <TIM_Base_SetConfig+0x13c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d108      	bne.n	800366e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a35      	ldr	r2, [pc, #212]	@ (8003748 <TIM_Base_SetConfig+0x12c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01f      	beq.n	80036b6 <TIM_Base_SetConfig+0x9a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367c:	d01b      	beq.n	80036b6 <TIM_Base_SetConfig+0x9a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a32      	ldr	r2, [pc, #200]	@ (800374c <TIM_Base_SetConfig+0x130>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d017      	beq.n	80036b6 <TIM_Base_SetConfig+0x9a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a31      	ldr	r2, [pc, #196]	@ (8003750 <TIM_Base_SetConfig+0x134>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d013      	beq.n	80036b6 <TIM_Base_SetConfig+0x9a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a30      	ldr	r2, [pc, #192]	@ (8003754 <TIM_Base_SetConfig+0x138>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00f      	beq.n	80036b6 <TIM_Base_SetConfig+0x9a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a2f      	ldr	r2, [pc, #188]	@ (8003758 <TIM_Base_SetConfig+0x13c>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00b      	beq.n	80036b6 <TIM_Base_SetConfig+0x9a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a2e      	ldr	r2, [pc, #184]	@ (800375c <TIM_Base_SetConfig+0x140>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d007      	beq.n	80036b6 <TIM_Base_SetConfig+0x9a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003760 <TIM_Base_SetConfig+0x144>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d003      	beq.n	80036b6 <TIM_Base_SetConfig+0x9a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003764 <TIM_Base_SetConfig+0x148>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d108      	bne.n	80036c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a16      	ldr	r2, [pc, #88]	@ (8003748 <TIM_Base_SetConfig+0x12c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00f      	beq.n	8003714 <TIM_Base_SetConfig+0xf8>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a18      	ldr	r2, [pc, #96]	@ (8003758 <TIM_Base_SetConfig+0x13c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00b      	beq.n	8003714 <TIM_Base_SetConfig+0xf8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a17      	ldr	r2, [pc, #92]	@ (800375c <TIM_Base_SetConfig+0x140>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d007      	beq.n	8003714 <TIM_Base_SetConfig+0xf8>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a16      	ldr	r2, [pc, #88]	@ (8003760 <TIM_Base_SetConfig+0x144>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d003      	beq.n	8003714 <TIM_Base_SetConfig+0xf8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a15      	ldr	r2, [pc, #84]	@ (8003764 <TIM_Base_SetConfig+0x148>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d103      	bne.n	800371c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b01      	cmp	r3, #1
 800372c:	d105      	bne.n	800373a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f023 0201 	bic.w	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	611a      	str	r2, [r3, #16]
  }
}
 800373a:	bf00      	nop
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40012c00 	.word	0x40012c00
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	40013400 	.word	0x40013400
 800375c:	40014000 	.word	0x40014000
 8003760:	40014400 	.word	0x40014400
 8003764:	40014800 	.word	0x40014800

08003768 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f023 0201 	bic.w	r2, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800379a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0303 	bic.w	r3, r3, #3
 80037a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f023 0302 	bic.w	r3, r3, #2
 80037b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003874 <TIM_OC1_SetConfig+0x10c>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d00f      	beq.n	80037e8 <TIM_OC1_SetConfig+0x80>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003878 <TIM_OC1_SetConfig+0x110>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00b      	beq.n	80037e8 <TIM_OC1_SetConfig+0x80>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a2a      	ldr	r2, [pc, #168]	@ (800387c <TIM_OC1_SetConfig+0x114>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d007      	beq.n	80037e8 <TIM_OC1_SetConfig+0x80>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a29      	ldr	r2, [pc, #164]	@ (8003880 <TIM_OC1_SetConfig+0x118>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d003      	beq.n	80037e8 <TIM_OC1_SetConfig+0x80>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a28      	ldr	r2, [pc, #160]	@ (8003884 <TIM_OC1_SetConfig+0x11c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d10c      	bne.n	8003802 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f023 0308 	bic.w	r3, r3, #8
 80037ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f023 0304 	bic.w	r3, r3, #4
 8003800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a1b      	ldr	r2, [pc, #108]	@ (8003874 <TIM_OC1_SetConfig+0x10c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d00f      	beq.n	800382a <TIM_OC1_SetConfig+0xc2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a1a      	ldr	r2, [pc, #104]	@ (8003878 <TIM_OC1_SetConfig+0x110>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00b      	beq.n	800382a <TIM_OC1_SetConfig+0xc2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a19      	ldr	r2, [pc, #100]	@ (800387c <TIM_OC1_SetConfig+0x114>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d007      	beq.n	800382a <TIM_OC1_SetConfig+0xc2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a18      	ldr	r2, [pc, #96]	@ (8003880 <TIM_OC1_SetConfig+0x118>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d003      	beq.n	800382a <TIM_OC1_SetConfig+0xc2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a17      	ldr	r2, [pc, #92]	@ (8003884 <TIM_OC1_SetConfig+0x11c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d111      	bne.n	800384e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	621a      	str	r2, [r3, #32]
}
 8003868:	bf00      	nop
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40012c00 	.word	0x40012c00
 8003878:	40013400 	.word	0x40013400
 800387c:	40014000 	.word	0x40014000
 8003880:	40014400 	.word	0x40014400
 8003884:	40014800 	.word	0x40014800

08003888 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f023 0210 	bic.w	r2, r3, #16
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	021b      	lsls	r3, r3, #8
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f023 0320 	bic.w	r3, r3, #32
 80038d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a28      	ldr	r2, [pc, #160]	@ (8003988 <TIM_OC2_SetConfig+0x100>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d003      	beq.n	80038f4 <TIM_OC2_SetConfig+0x6c>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a27      	ldr	r2, [pc, #156]	@ (800398c <TIM_OC2_SetConfig+0x104>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d10d      	bne.n	8003910 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800390e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a1d      	ldr	r2, [pc, #116]	@ (8003988 <TIM_OC2_SetConfig+0x100>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00f      	beq.n	8003938 <TIM_OC2_SetConfig+0xb0>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a1c      	ldr	r2, [pc, #112]	@ (800398c <TIM_OC2_SetConfig+0x104>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00b      	beq.n	8003938 <TIM_OC2_SetConfig+0xb0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a1b      	ldr	r2, [pc, #108]	@ (8003990 <TIM_OC2_SetConfig+0x108>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d007      	beq.n	8003938 <TIM_OC2_SetConfig+0xb0>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a1a      	ldr	r2, [pc, #104]	@ (8003994 <TIM_OC2_SetConfig+0x10c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d003      	beq.n	8003938 <TIM_OC2_SetConfig+0xb0>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a19      	ldr	r2, [pc, #100]	@ (8003998 <TIM_OC2_SetConfig+0x110>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d113      	bne.n	8003960 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800393e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003946:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68fa      	ldr	r2, [r7, #12]
 800396a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	621a      	str	r2, [r3, #32]
}
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40012c00 	.word	0x40012c00
 800398c:	40013400 	.word	0x40013400
 8003990:	40014000 	.word	0x40014000
 8003994:	40014400 	.word	0x40014400
 8003998:	40014800 	.word	0x40014800

0800399c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a27      	ldr	r2, [pc, #156]	@ (8003a98 <TIM_OC3_SetConfig+0xfc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d003      	beq.n	8003a06 <TIM_OC3_SetConfig+0x6a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a26      	ldr	r2, [pc, #152]	@ (8003a9c <TIM_OC3_SetConfig+0x100>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d10d      	bne.n	8003a22 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a1c      	ldr	r2, [pc, #112]	@ (8003a98 <TIM_OC3_SetConfig+0xfc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00f      	beq.n	8003a4a <TIM_OC3_SetConfig+0xae>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a1b      	ldr	r2, [pc, #108]	@ (8003a9c <TIM_OC3_SetConfig+0x100>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d00b      	beq.n	8003a4a <TIM_OC3_SetConfig+0xae>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa0 <TIM_OC3_SetConfig+0x104>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d007      	beq.n	8003a4a <TIM_OC3_SetConfig+0xae>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a19      	ldr	r2, [pc, #100]	@ (8003aa4 <TIM_OC3_SetConfig+0x108>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d003      	beq.n	8003a4a <TIM_OC3_SetConfig+0xae>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a18      	ldr	r2, [pc, #96]	@ (8003aa8 <TIM_OC3_SetConfig+0x10c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d113      	bne.n	8003a72 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	621a      	str	r2, [r3, #32]
}
 8003a8c:	bf00      	nop
 8003a8e:	371c      	adds	r7, #28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	40012c00 	.word	0x40012c00
 8003a9c:	40013400 	.word	0x40013400
 8003aa0:	40014000 	.word	0x40014000
 8003aa4:	40014400 	.word	0x40014400
 8003aa8:	40014800 	.word	0x40014800

08003aac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003afa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	031b      	lsls	r3, r3, #12
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a18      	ldr	r2, [pc, #96]	@ (8003b6c <TIM_OC4_SetConfig+0xc0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00f      	beq.n	8003b30 <TIM_OC4_SetConfig+0x84>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a17      	ldr	r2, [pc, #92]	@ (8003b70 <TIM_OC4_SetConfig+0xc4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00b      	beq.n	8003b30 <TIM_OC4_SetConfig+0x84>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a16      	ldr	r2, [pc, #88]	@ (8003b74 <TIM_OC4_SetConfig+0xc8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d007      	beq.n	8003b30 <TIM_OC4_SetConfig+0x84>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a15      	ldr	r2, [pc, #84]	@ (8003b78 <TIM_OC4_SetConfig+0xcc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <TIM_OC4_SetConfig+0x84>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a14      	ldr	r2, [pc, #80]	@ (8003b7c <TIM_OC4_SetConfig+0xd0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d109      	bne.n	8003b44 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	019b      	lsls	r3, r3, #6
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	621a      	str	r2, [r3, #32]
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40012c00 	.word	0x40012c00
 8003b70:	40013400 	.word	0x40013400
 8003b74:	40014000 	.word	0x40014000
 8003b78:	40014400 	.word	0x40014400
 8003b7c:	40014800 	.word	0x40014800

08003b80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003bc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	041b      	lsls	r3, r3, #16
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a17      	ldr	r2, [pc, #92]	@ (8003c34 <TIM_OC5_SetConfig+0xb4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00f      	beq.n	8003bfa <TIM_OC5_SetConfig+0x7a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a16      	ldr	r2, [pc, #88]	@ (8003c38 <TIM_OC5_SetConfig+0xb8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00b      	beq.n	8003bfa <TIM_OC5_SetConfig+0x7a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a15      	ldr	r2, [pc, #84]	@ (8003c3c <TIM_OC5_SetConfig+0xbc>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d007      	beq.n	8003bfa <TIM_OC5_SetConfig+0x7a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a14      	ldr	r2, [pc, #80]	@ (8003c40 <TIM_OC5_SetConfig+0xc0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <TIM_OC5_SetConfig+0x7a>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a13      	ldr	r2, [pc, #76]	@ (8003c44 <TIM_OC5_SetConfig+0xc4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d109      	bne.n	8003c0e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	021b      	lsls	r3, r3, #8
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	621a      	str	r2, [r3, #32]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40013400 	.word	0x40013400
 8003c3c:	40014000 	.word	0x40014000
 8003c40:	40014400 	.word	0x40014400
 8003c44:	40014800 	.word	0x40014800

08003c48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	021b      	lsls	r3, r3, #8
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	051b      	lsls	r3, r3, #20
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a18      	ldr	r2, [pc, #96]	@ (8003d00 <TIM_OC6_SetConfig+0xb8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d00f      	beq.n	8003cc4 <TIM_OC6_SetConfig+0x7c>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a17      	ldr	r2, [pc, #92]	@ (8003d04 <TIM_OC6_SetConfig+0xbc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00b      	beq.n	8003cc4 <TIM_OC6_SetConfig+0x7c>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a16      	ldr	r2, [pc, #88]	@ (8003d08 <TIM_OC6_SetConfig+0xc0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d007      	beq.n	8003cc4 <TIM_OC6_SetConfig+0x7c>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a15      	ldr	r2, [pc, #84]	@ (8003d0c <TIM_OC6_SetConfig+0xc4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d003      	beq.n	8003cc4 <TIM_OC6_SetConfig+0x7c>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a14      	ldr	r2, [pc, #80]	@ (8003d10 <TIM_OC6_SetConfig+0xc8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d109      	bne.n	8003cd8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	029b      	lsls	r3, r3, #10
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	621a      	str	r2, [r3, #32]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40012c00 	.word	0x40012c00
 8003d04:	40013400 	.word	0x40013400
 8003d08:	40014000 	.word	0x40014000
 8003d0c:	40014400 	.word	0x40014400
 8003d10:	40014800 	.word	0x40014800

08003d14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	f023 0201 	bic.w	r2, r3, #1
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f023 030a 	bic.w	r3, r3, #10
 8003d50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	621a      	str	r2, [r3, #32]
}
 8003d66:	bf00      	nop
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b087      	sub	sp, #28
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	f023 0210 	bic.w	r2, r3, #16
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	031b      	lsls	r3, r3, #12
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003dae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	621a      	str	r2, [r3, #32]
}
 8003dc6:	bf00      	nop
 8003dc8:	371c      	adds	r7, #28
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b085      	sub	sp, #20
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f043 0307 	orr.w	r3, r3, #7
 8003df4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	609a      	str	r2, [r3, #8]
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	021a      	lsls	r2, r3, #8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	609a      	str	r2, [r3, #8]
}
 8003e3c:	bf00      	nop
 8003e3e:	371c      	adds	r7, #28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a1a      	ldr	r2, [r3, #32]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	401a      	ands	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a1a      	ldr	r2, [r3, #32]
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e80:	431a      	orrs	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	621a      	str	r2, [r3, #32]
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
	...

08003e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e068      	b.n	8003f7e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d004      	beq.n	8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2d      	ldr	r2, [pc, #180]	@ (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d108      	bne.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003ee6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ef8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1e      	ldr	r2, [pc, #120]	@ (8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01d      	beq.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f1e:	d018      	beq.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1b      	ldr	r2, [pc, #108]	@ (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00e      	beq.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a18      	ldr	r2, [pc, #96]	@ (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a13      	ldr	r2, [pc, #76]	@ (8003f90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a14      	ldr	r2, [pc, #80]	@ (8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d10c      	bne.n	8003f6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40012c00 	.word	0x40012c00
 8003f90:	40013400 	.word	0x40013400
 8003f94:	40000400 	.word	0x40000400
 8003f98:	40000800 	.word	0x40000800
 8003f9c:	40000c00 	.word	0x40000c00
 8003fa0:	40014000 	.word	0x40014000

08003fa4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e065      	b.n	800408c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	041b      	lsls	r3, r3, #16
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a16      	ldr	r2, [pc, #88]	@ (8004098 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d004      	beq.n	800404e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a14      	ldr	r2, [pc, #80]	@ (800409c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d115      	bne.n	800407a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	051b      	lsls	r3, r3, #20
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40012c00 	.word	0x40012c00
 800409c:	40013400 	.word	0x40013400

080040a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e040      	b.n	8004134 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d106      	bne.n	80040c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fc fe30 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2224      	movs	r2, #36	@ 0x24
 80040cc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0201 	bic.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fedc 	bl	8004ea4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fc21 	bl	8004934 <UART_SetConfig>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d101      	bne.n	80040fc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e01b      	b.n	8004134 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800410a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800411a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f042 0201 	orr.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 ff5b 	bl	8004fe8 <UART_CheckIdleState>
 8004132:	4603      	mov	r3, r0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08a      	sub	sp, #40	@ 0x28
 8004140:	af02      	add	r7, sp, #8
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	4613      	mov	r3, r2
 800414a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004150:	2b20      	cmp	r3, #32
 8004152:	d177      	bne.n	8004244 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <HAL_UART_Transmit+0x24>
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e070      	b.n	8004246 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2221      	movs	r2, #33	@ 0x21
 8004170:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004172:	f7fd f839 	bl	80011e8 <HAL_GetTick>
 8004176:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	88fa      	ldrh	r2, [r7, #6]
 800417c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	88fa      	ldrh	r2, [r7, #6]
 8004184:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004190:	d108      	bne.n	80041a4 <HAL_UART_Transmit+0x68>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d104      	bne.n	80041a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800419a:	2300      	movs	r3, #0
 800419c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	e003      	b.n	80041ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041ac:	e02f      	b.n	800420e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2200      	movs	r2, #0
 80041b6:	2180      	movs	r1, #128	@ 0x80
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 ffbd 	bl	8005138 <UART_WaitOnFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d004      	beq.n	80041ce <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e03b      	b.n	8004246 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10b      	bne.n	80041ec <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	881a      	ldrh	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041e0:	b292      	uxth	r2, r2
 80041e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	3302      	adds	r3, #2
 80041e8:	61bb      	str	r3, [r7, #24]
 80041ea:	e007      	b.n	80041fc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	781a      	ldrb	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	3301      	adds	r3, #1
 80041fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1c9      	bne.n	80041ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2200      	movs	r2, #0
 8004222:	2140      	movs	r1, #64	@ 0x40
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 ff87 	bl	8005138 <UART_WaitOnFlagUntilTimeout>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d004      	beq.n	800423a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e005      	b.n	8004246 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	e000      	b.n	8004246 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004244:	2302      	movs	r3, #2
  }
}
 8004246:	4618      	mov	r0, r3
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	@ 0x28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	4613      	mov	r3, r2
 800425c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004264:	2b20      	cmp	r3, #32
 8004266:	d137      	bne.n	80042d8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_UART_Receive_IT+0x24>
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e030      	b.n	80042da <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a18      	ldr	r2, [pc, #96]	@ (80042e4 <HAL_UART_Receive_IT+0x94>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d01f      	beq.n	80042c8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d018      	beq.n	80042c8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	613b      	str	r3, [r7, #16]
   return(result);
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b4:	623b      	str	r3, [r7, #32]
 80042b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	69f9      	ldr	r1, [r7, #28]
 80042ba:	6a3a      	ldr	r2, [r7, #32]
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e6      	bne.n	8004296 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	461a      	mov	r2, r3
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 ffa0 	bl	8005214 <UART_Start_Receive_IT>
 80042d4:	4603      	mov	r3, r0
 80042d6:	e000      	b.n	80042da <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042d8:	2302      	movs	r3, #2
  }
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3728      	adds	r7, #40	@ 0x28
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40008000 	.word	0x40008000

080042e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b0ba      	sub	sp, #232	@ 0xe8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800430e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004312:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004316:	4013      	ands	r3, r2
 8004318:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800431c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d115      	bne.n	8004350 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00f      	beq.n	8004350 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d009      	beq.n	8004350 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 82ca 	beq.w	80048da <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
      }
      return;
 800434e:	e2c4      	b.n	80048da <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 8117 	beq.w	8004588 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800435a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004366:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800436a:	4b85      	ldr	r3, [pc, #532]	@ (8004580 <HAL_UART_IRQHandler+0x298>)
 800436c:	4013      	ands	r3, r2
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 810a 	beq.w	8004588 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d011      	beq.n	80043a4 <HAL_UART_IRQHandler+0xbc>
 8004380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00b      	beq.n	80043a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2201      	movs	r2, #1
 8004392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800439a:	f043 0201 	orr.w	r2, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d011      	beq.n	80043d4 <HAL_UART_IRQHandler+0xec>
 80043b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00b      	beq.n	80043d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2202      	movs	r2, #2
 80043c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043ca:	f043 0204 	orr.w	r2, r3, #4
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d011      	beq.n	8004404 <HAL_UART_IRQHandler+0x11c>
 80043e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00b      	beq.n	8004404 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2204      	movs	r2, #4
 80043f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043fa:	f043 0202 	orr.w	r2, r3, #2
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004408:	f003 0308 	and.w	r3, r3, #8
 800440c:	2b00      	cmp	r3, #0
 800440e:	d017      	beq.n	8004440 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004414:	f003 0320 	and.w	r3, r3, #32
 8004418:	2b00      	cmp	r3, #0
 800441a:	d105      	bne.n	8004428 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800441c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004420:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00b      	beq.n	8004440 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2208      	movs	r2, #8
 800442e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004436:	f043 0208 	orr.w	r2, r3, #8
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004448:	2b00      	cmp	r3, #0
 800444a:	d012      	beq.n	8004472 <HAL_UART_IRQHandler+0x18a>
 800444c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004450:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00c      	beq.n	8004472 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004460:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004468:	f043 0220 	orr.w	r2, r3, #32
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8230 	beq.w	80048de <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800447e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00d      	beq.n	80044a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800448a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ba:	2b40      	cmp	r3, #64	@ 0x40
 80044bc:	d005      	beq.n	80044ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d04f      	beq.n	800456a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 ff68 	bl	80053a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044da:	2b40      	cmp	r3, #64	@ 0x40
 80044dc:	d141      	bne.n	8004562 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3308      	adds	r3, #8
 80044e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80044f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3308      	adds	r3, #8
 8004506:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800450a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800450e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004512:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004516:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1d9      	bne.n	80044de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800452e:	2b00      	cmp	r3, #0
 8004530:	d013      	beq.n	800455a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004536:	4a13      	ldr	r2, [pc, #76]	@ (8004584 <HAL_UART_IRQHandler+0x29c>)
 8004538:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453e:	4618      	mov	r0, r3
 8004540:	f7fc ffad 	bl	800149e <HAL_DMA_Abort_IT>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d017      	beq.n	800457a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800454e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004554:	4610      	mov	r0, r2
 8004556:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004558:	e00f      	b.n	800457a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f9d4 	bl	8004908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004560:	e00b      	b.n	800457a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f9d0 	bl	8004908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004568:	e007      	b.n	800457a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f9cc 	bl	8004908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004578:	e1b1      	b.n	80048de <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800457a:	bf00      	nop
    return;
 800457c:	e1af      	b.n	80048de <HAL_UART_IRQHandler+0x5f6>
 800457e:	bf00      	nop
 8004580:	04000120 	.word	0x04000120
 8004584:	08005469 	.word	0x08005469

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800458c:	2b01      	cmp	r3, #1
 800458e:	f040 816a 	bne.w	8004866 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 8163 	beq.w	8004866 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80045a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 815c 	beq.w	8004866 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2210      	movs	r2, #16
 80045b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c0:	2b40      	cmp	r3, #64	@ 0x40
 80045c2:	f040 80d4 	bne.w	800476e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 80ad 	beq.w	8004736 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80045e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045e6:	429a      	cmp	r2, r3
 80045e8:	f080 80a5 	bcs.w	8004736 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	f040 8086 	bne.w	8004714 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004610:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800461c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004620:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004624:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004632:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004636:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800463e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800464a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1da      	bne.n	8004608 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3308      	adds	r3, #8
 8004658:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800465c:	e853 3f00 	ldrex	r3, [r3]
 8004660:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004662:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3308      	adds	r3, #8
 8004672:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004676:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800467a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800467e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004688:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e1      	bne.n	8004652 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3308      	adds	r3, #8
 8004694:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800469e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3308      	adds	r3, #8
 80046ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80046b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80046b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80046b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1e3      	bne.n	800468e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046dc:	e853 3f00 	ldrex	r3, [r3]
 80046e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046e4:	f023 0310 	bic.w	r3, r3, #16
 80046e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	461a      	mov	r2, r3
 80046f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80046f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e4      	bne.n	80046d4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800470e:	4618      	mov	r0, r3
 8004710:	f7fc fe87 	bl	8001422 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004726:	b29b      	uxth	r3, r3
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	b29b      	uxth	r3, r3
 800472c:	4619      	mov	r1, r3
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f8f4 	bl	800491c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004734:	e0d5      	b.n	80048e2 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800473c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004740:	429a      	cmp	r2, r3
 8004742:	f040 80ce 	bne.w	80048e2 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b20      	cmp	r3, #32
 8004754:	f040 80c5 	bne.w	80048e2 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004764:	4619      	mov	r1, r3
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f8d8 	bl	800491c <HAL_UARTEx_RxEventCallback>
      return;
 800476c:	e0b9      	b.n	80048e2 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800477a:	b29b      	uxth	r3, r3
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 80ab 	beq.w	80048e6 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004790:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 80a6 	beq.w	80048e6 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80047bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80047be:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047c4:	e841 2300 	strex	r3, r2, [r1]
 80047c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e4      	bne.n	800479a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3308      	adds	r3, #8
 80047d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	e853 3f00 	ldrex	r3, [r3]
 80047de:	623b      	str	r3, [r7, #32]
   return(result);
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	f023 0301 	bic.w	r3, r3, #1
 80047e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3308      	adds	r3, #8
 80047f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80047f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047fc:	e841 2300 	strex	r3, r2, [r1]
 8004800:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e3      	bne.n	80047d0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2220      	movs	r2, #32
 800480c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	60fb      	str	r3, [r7, #12]
   return(result);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f023 0310 	bic.w	r3, r3, #16
 8004830:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800483e:	61fb      	str	r3, [r7, #28]
 8004840:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	69b9      	ldr	r1, [r7, #24]
 8004844:	69fa      	ldr	r2, [r7, #28]
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	617b      	str	r3, [r7, #20]
   return(result);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e4      	bne.n	800481c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2202      	movs	r2, #2
 8004856:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004858:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800485c:	4619      	mov	r1, r3
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f85c 	bl	800491c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004864:	e03f      	b.n	80048e6 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800486a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00e      	beq.n	8004890 <HAL_UART_IRQHandler+0x5a8>
 8004872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d008      	beq.n	8004890 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004886:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 ffe9 	bl	8005860 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800488e:	e02d      	b.n	80048ec <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00e      	beq.n	80048ba <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800489c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d01c      	beq.n	80048ea <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	4798      	blx	r3
    }
    return;
 80048b8:	e017      	b.n	80048ea <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d012      	beq.n	80048ec <HAL_UART_IRQHandler+0x604>
 80048c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00c      	beq.n	80048ec <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fdde 	bl	8005494 <UART_EndTransmit_IT>
    return;
 80048d8:	e008      	b.n	80048ec <HAL_UART_IRQHandler+0x604>
      return;
 80048da:	bf00      	nop
 80048dc:	e006      	b.n	80048ec <HAL_UART_IRQHandler+0x604>
    return;
 80048de:	bf00      	nop
 80048e0:	e004      	b.n	80048ec <HAL_UART_IRQHandler+0x604>
      return;
 80048e2:	bf00      	nop
 80048e4:	e002      	b.n	80048ec <HAL_UART_IRQHandler+0x604>
      return;
 80048e6:	bf00      	nop
 80048e8:	e000      	b.n	80048ec <HAL_UART_IRQHandler+0x604>
    return;
 80048ea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80048ec:	37e8      	adds	r7, #232	@ 0xe8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop

080048f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004938:	b08a      	sub	sp, #40	@ 0x28
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	431a      	orrs	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	431a      	orrs	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	4313      	orrs	r3, r2
 800495a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4ba4      	ldr	r3, [pc, #656]	@ (8004bf4 <UART_SetConfig+0x2c0>)
 8004964:	4013      	ands	r3, r2
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	6812      	ldr	r2, [r2, #0]
 800496a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800496c:	430b      	orrs	r3, r1
 800496e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a99      	ldr	r2, [pc, #612]	@ (8004bf8 <UART_SetConfig+0x2c4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800499c:	4313      	orrs	r3, r2
 800499e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049b0:	430a      	orrs	r2, r1
 80049b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a90      	ldr	r2, [pc, #576]	@ (8004bfc <UART_SetConfig+0x2c8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d126      	bne.n	8004a0c <UART_SetConfig+0xd8>
 80049be:	4b90      	ldr	r3, [pc, #576]	@ (8004c00 <UART_SetConfig+0x2cc>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	2b03      	cmp	r3, #3
 80049ca:	d81b      	bhi.n	8004a04 <UART_SetConfig+0xd0>
 80049cc:	a201      	add	r2, pc, #4	@ (adr r2, 80049d4 <UART_SetConfig+0xa0>)
 80049ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d2:	bf00      	nop
 80049d4:	080049e5 	.word	0x080049e5
 80049d8:	080049f5 	.word	0x080049f5
 80049dc:	080049ed 	.word	0x080049ed
 80049e0:	080049fd 	.word	0x080049fd
 80049e4:	2301      	movs	r3, #1
 80049e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ea:	e116      	b.n	8004c1a <UART_SetConfig+0x2e6>
 80049ec:	2302      	movs	r3, #2
 80049ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f2:	e112      	b.n	8004c1a <UART_SetConfig+0x2e6>
 80049f4:	2304      	movs	r3, #4
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fa:	e10e      	b.n	8004c1a <UART_SetConfig+0x2e6>
 80049fc:	2308      	movs	r3, #8
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a02:	e10a      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004a04:	2310      	movs	r3, #16
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a0a:	e106      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a7c      	ldr	r2, [pc, #496]	@ (8004c04 <UART_SetConfig+0x2d0>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d138      	bne.n	8004a88 <UART_SetConfig+0x154>
 8004a16:	4b7a      	ldr	r3, [pc, #488]	@ (8004c00 <UART_SetConfig+0x2cc>)
 8004a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1c:	f003 030c 	and.w	r3, r3, #12
 8004a20:	2b0c      	cmp	r3, #12
 8004a22:	d82d      	bhi.n	8004a80 <UART_SetConfig+0x14c>
 8004a24:	a201      	add	r2, pc, #4	@ (adr r2, 8004a2c <UART_SetConfig+0xf8>)
 8004a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2a:	bf00      	nop
 8004a2c:	08004a61 	.word	0x08004a61
 8004a30:	08004a81 	.word	0x08004a81
 8004a34:	08004a81 	.word	0x08004a81
 8004a38:	08004a81 	.word	0x08004a81
 8004a3c:	08004a71 	.word	0x08004a71
 8004a40:	08004a81 	.word	0x08004a81
 8004a44:	08004a81 	.word	0x08004a81
 8004a48:	08004a81 	.word	0x08004a81
 8004a4c:	08004a69 	.word	0x08004a69
 8004a50:	08004a81 	.word	0x08004a81
 8004a54:	08004a81 	.word	0x08004a81
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a79 	.word	0x08004a79
 8004a60:	2300      	movs	r3, #0
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a66:	e0d8      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6e:	e0d4      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004a70:	2304      	movs	r3, #4
 8004a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a76:	e0d0      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004a78:	2308      	movs	r3, #8
 8004a7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a7e:	e0cc      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004a80:	2310      	movs	r3, #16
 8004a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a86:	e0c8      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a5e      	ldr	r2, [pc, #376]	@ (8004c08 <UART_SetConfig+0x2d4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d125      	bne.n	8004ade <UART_SetConfig+0x1aa>
 8004a92:	4b5b      	ldr	r3, [pc, #364]	@ (8004c00 <UART_SetConfig+0x2cc>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a98:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a9c:	2b30      	cmp	r3, #48	@ 0x30
 8004a9e:	d016      	beq.n	8004ace <UART_SetConfig+0x19a>
 8004aa0:	2b30      	cmp	r3, #48	@ 0x30
 8004aa2:	d818      	bhi.n	8004ad6 <UART_SetConfig+0x1a2>
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d00a      	beq.n	8004abe <UART_SetConfig+0x18a>
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d814      	bhi.n	8004ad6 <UART_SetConfig+0x1a2>
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <UART_SetConfig+0x182>
 8004ab0:	2b10      	cmp	r3, #16
 8004ab2:	d008      	beq.n	8004ac6 <UART_SetConfig+0x192>
 8004ab4:	e00f      	b.n	8004ad6 <UART_SetConfig+0x1a2>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004abc:	e0ad      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac4:	e0a9      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004acc:	e0a5      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004ace:	2308      	movs	r3, #8
 8004ad0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad4:	e0a1      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004ad6:	2310      	movs	r3, #16
 8004ad8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004adc:	e09d      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a4a      	ldr	r2, [pc, #296]	@ (8004c0c <UART_SetConfig+0x2d8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d125      	bne.n	8004b34 <UART_SetConfig+0x200>
 8004ae8:	4b45      	ldr	r3, [pc, #276]	@ (8004c00 <UART_SetConfig+0x2cc>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004af2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004af4:	d016      	beq.n	8004b24 <UART_SetConfig+0x1f0>
 8004af6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004af8:	d818      	bhi.n	8004b2c <UART_SetConfig+0x1f8>
 8004afa:	2b80      	cmp	r3, #128	@ 0x80
 8004afc:	d00a      	beq.n	8004b14 <UART_SetConfig+0x1e0>
 8004afe:	2b80      	cmp	r3, #128	@ 0x80
 8004b00:	d814      	bhi.n	8004b2c <UART_SetConfig+0x1f8>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <UART_SetConfig+0x1d8>
 8004b06:	2b40      	cmp	r3, #64	@ 0x40
 8004b08:	d008      	beq.n	8004b1c <UART_SetConfig+0x1e8>
 8004b0a:	e00f      	b.n	8004b2c <UART_SetConfig+0x1f8>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b12:	e082      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004b14:	2302      	movs	r3, #2
 8004b16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b1a:	e07e      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b22:	e07a      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004b24:	2308      	movs	r3, #8
 8004b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b2a:	e076      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b32:	e072      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a35      	ldr	r2, [pc, #212]	@ (8004c10 <UART_SetConfig+0x2dc>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d12a      	bne.n	8004b94 <UART_SetConfig+0x260>
 8004b3e:	4b30      	ldr	r3, [pc, #192]	@ (8004c00 <UART_SetConfig+0x2cc>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b4c:	d01a      	beq.n	8004b84 <UART_SetConfig+0x250>
 8004b4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b52:	d81b      	bhi.n	8004b8c <UART_SetConfig+0x258>
 8004b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b58:	d00c      	beq.n	8004b74 <UART_SetConfig+0x240>
 8004b5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b5e:	d815      	bhi.n	8004b8c <UART_SetConfig+0x258>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <UART_SetConfig+0x238>
 8004b64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b68:	d008      	beq.n	8004b7c <UART_SetConfig+0x248>
 8004b6a:	e00f      	b.n	8004b8c <UART_SetConfig+0x258>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b72:	e052      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004b74:	2302      	movs	r3, #2
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b7a:	e04e      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b82:	e04a      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004b84:	2308      	movs	r3, #8
 8004b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b8a:	e046      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b92:	e042      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a17      	ldr	r2, [pc, #92]	@ (8004bf8 <UART_SetConfig+0x2c4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d13a      	bne.n	8004c14 <UART_SetConfig+0x2e0>
 8004b9e:	4b18      	ldr	r3, [pc, #96]	@ (8004c00 <UART_SetConfig+0x2cc>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ba8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bac:	d01a      	beq.n	8004be4 <UART_SetConfig+0x2b0>
 8004bae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bb2:	d81b      	bhi.n	8004bec <UART_SetConfig+0x2b8>
 8004bb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bb8:	d00c      	beq.n	8004bd4 <UART_SetConfig+0x2a0>
 8004bba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bbe:	d815      	bhi.n	8004bec <UART_SetConfig+0x2b8>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <UART_SetConfig+0x298>
 8004bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bc8:	d008      	beq.n	8004bdc <UART_SetConfig+0x2a8>
 8004bca:	e00f      	b.n	8004bec <UART_SetConfig+0x2b8>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bd2:	e022      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bda:	e01e      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004bdc:	2304      	movs	r3, #4
 8004bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004be2:	e01a      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004be4:	2308      	movs	r3, #8
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bea:	e016      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004bec:	2310      	movs	r3, #16
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bf2:	e012      	b.n	8004c1a <UART_SetConfig+0x2e6>
 8004bf4:	efff69f3 	.word	0xefff69f3
 8004bf8:	40008000 	.word	0x40008000
 8004bfc:	40013800 	.word	0x40013800
 8004c00:	40021000 	.word	0x40021000
 8004c04:	40004400 	.word	0x40004400
 8004c08:	40004800 	.word	0x40004800
 8004c0c:	40004c00 	.word	0x40004c00
 8004c10:	40005000 	.word	0x40005000
 8004c14:	2310      	movs	r3, #16
 8004c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a9f      	ldr	r2, [pc, #636]	@ (8004e9c <UART_SetConfig+0x568>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d17a      	bne.n	8004d1a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d824      	bhi.n	8004c76 <UART_SetConfig+0x342>
 8004c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c34 <UART_SetConfig+0x300>)
 8004c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c32:	bf00      	nop
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c77 	.word	0x08004c77
 8004c3c:	08004c61 	.word	0x08004c61
 8004c40:	08004c77 	.word	0x08004c77
 8004c44:	08004c67 	.word	0x08004c67
 8004c48:	08004c77 	.word	0x08004c77
 8004c4c:	08004c77 	.word	0x08004c77
 8004c50:	08004c77 	.word	0x08004c77
 8004c54:	08004c6f 	.word	0x08004c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c58:	f7fd fbfc 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
 8004c5c:	61f8      	str	r0, [r7, #28]
        break;
 8004c5e:	e010      	b.n	8004c82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c60:	4b8f      	ldr	r3, [pc, #572]	@ (8004ea0 <UART_SetConfig+0x56c>)
 8004c62:	61fb      	str	r3, [r7, #28]
        break;
 8004c64:	e00d      	b.n	8004c82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c66:	f7fd fb5d 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 8004c6a:	61f8      	str	r0, [r7, #28]
        break;
 8004c6c:	e009      	b.n	8004c82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c72:	61fb      	str	r3, [r7, #28]
        break;
 8004c74:	e005      	b.n	8004c82 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 80fb 	beq.w	8004e80 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	4413      	add	r3, r2
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d305      	bcc.n	8004ca6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d903      	bls.n	8004cae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004cac:	e0e8      	b.n	8004e80 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	461c      	mov	r4, r3
 8004cb4:	4615      	mov	r5, r2
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	022b      	lsls	r3, r5, #8
 8004cc0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004cc4:	0222      	lsls	r2, r4, #8
 8004cc6:	68f9      	ldr	r1, [r7, #12]
 8004cc8:	6849      	ldr	r1, [r1, #4]
 8004cca:	0849      	lsrs	r1, r1, #1
 8004ccc:	2000      	movs	r0, #0
 8004cce:	4688      	mov	r8, r1
 8004cd0:	4681      	mov	r9, r0
 8004cd2:	eb12 0a08 	adds.w	sl, r2, r8
 8004cd6:	eb43 0b09 	adc.w	fp, r3, r9
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	603b      	str	r3, [r7, #0]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ce8:	4650      	mov	r0, sl
 8004cea:	4659      	mov	r1, fp
 8004cec:	f7fb fa6c 	bl	80001c8 <__aeabi_uldivmod>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cfe:	d308      	bcc.n	8004d12 <UART_SetConfig+0x3de>
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d06:	d204      	bcs.n	8004d12 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	60da      	str	r2, [r3, #12]
 8004d10:	e0b6      	b.n	8004e80 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d18:	e0b2      	b.n	8004e80 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d22:	d15e      	bne.n	8004de2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004d24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d828      	bhi.n	8004d7e <UART_SetConfig+0x44a>
 8004d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d34 <UART_SetConfig+0x400>)
 8004d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d32:	bf00      	nop
 8004d34:	08004d59 	.word	0x08004d59
 8004d38:	08004d61 	.word	0x08004d61
 8004d3c:	08004d69 	.word	0x08004d69
 8004d40:	08004d7f 	.word	0x08004d7f
 8004d44:	08004d6f 	.word	0x08004d6f
 8004d48:	08004d7f 	.word	0x08004d7f
 8004d4c:	08004d7f 	.word	0x08004d7f
 8004d50:	08004d7f 	.word	0x08004d7f
 8004d54:	08004d77 	.word	0x08004d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d58:	f7fd fb7c 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
 8004d5c:	61f8      	str	r0, [r7, #28]
        break;
 8004d5e:	e014      	b.n	8004d8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d60:	f7fd fb8e 	bl	8002480 <HAL_RCC_GetPCLK2Freq>
 8004d64:	61f8      	str	r0, [r7, #28]
        break;
 8004d66:	e010      	b.n	8004d8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d68:	4b4d      	ldr	r3, [pc, #308]	@ (8004ea0 <UART_SetConfig+0x56c>)
 8004d6a:	61fb      	str	r3, [r7, #28]
        break;
 8004d6c:	e00d      	b.n	8004d8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d6e:	f7fd fad9 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 8004d72:	61f8      	str	r0, [r7, #28]
        break;
 8004d74:	e009      	b.n	8004d8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d7a:	61fb      	str	r3, [r7, #28]
        break;
 8004d7c:	e005      	b.n	8004d8a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d077      	beq.n	8004e80 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	005a      	lsls	r2, r3, #1
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	085b      	lsrs	r3, r3, #1
 8004d9a:	441a      	add	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b0f      	cmp	r3, #15
 8004daa:	d916      	bls.n	8004dda <UART_SetConfig+0x4a6>
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004db2:	d212      	bcs.n	8004dda <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	f023 030f 	bic.w	r3, r3, #15
 8004dbc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	085b      	lsrs	r3, r3, #1
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	8afb      	ldrh	r3, [r7, #22]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	8afa      	ldrh	r2, [r7, #22]
 8004dd6:	60da      	str	r2, [r3, #12]
 8004dd8:	e052      	b.n	8004e80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004de0:	e04e      	b.n	8004e80 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004de2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d827      	bhi.n	8004e3a <UART_SetConfig+0x506>
 8004dea:	a201      	add	r2, pc, #4	@ (adr r2, 8004df0 <UART_SetConfig+0x4bc>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e15 	.word	0x08004e15
 8004df4:	08004e1d 	.word	0x08004e1d
 8004df8:	08004e25 	.word	0x08004e25
 8004dfc:	08004e3b 	.word	0x08004e3b
 8004e00:	08004e2b 	.word	0x08004e2b
 8004e04:	08004e3b 	.word	0x08004e3b
 8004e08:	08004e3b 	.word	0x08004e3b
 8004e0c:	08004e3b 	.word	0x08004e3b
 8004e10:	08004e33 	.word	0x08004e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e14:	f7fd fb1e 	bl	8002454 <HAL_RCC_GetPCLK1Freq>
 8004e18:	61f8      	str	r0, [r7, #28]
        break;
 8004e1a:	e014      	b.n	8004e46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e1c:	f7fd fb30 	bl	8002480 <HAL_RCC_GetPCLK2Freq>
 8004e20:	61f8      	str	r0, [r7, #28]
        break;
 8004e22:	e010      	b.n	8004e46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e24:	4b1e      	ldr	r3, [pc, #120]	@ (8004ea0 <UART_SetConfig+0x56c>)
 8004e26:	61fb      	str	r3, [r7, #28]
        break;
 8004e28:	e00d      	b.n	8004e46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e2a:	f7fd fa7b 	bl	8002324 <HAL_RCC_GetSysClockFreq>
 8004e2e:	61f8      	str	r0, [r7, #28]
        break;
 8004e30:	e009      	b.n	8004e46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e36:	61fb      	str	r3, [r7, #28]
        break;
 8004e38:	e005      	b.n	8004e46 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e44:	bf00      	nop
    }

    if (pclk != 0U)
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d019      	beq.n	8004e80 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	085a      	lsrs	r2, r3, #1
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	441a      	add	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2b0f      	cmp	r3, #15
 8004e64:	d909      	bls.n	8004e7a <UART_SetConfig+0x546>
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e6c:	d205      	bcs.n	8004e7a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60da      	str	r2, [r3, #12]
 8004e78:	e002      	b.n	8004e80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3728      	adds	r7, #40	@ 0x28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40008000 	.word	0x40008000
 8004ea0:	00f42400 	.word	0x00f42400

08004ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01a      	beq.n	8004fba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fa2:	d10a      	bne.n	8004fba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	605a      	str	r2, [r3, #4]
  }
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b098      	sub	sp, #96	@ 0x60
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ff8:	f7fc f8f6 	bl	80011e8 <HAL_GetTick>
 8004ffc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b08      	cmp	r3, #8
 800500a:	d12e      	bne.n	800506a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800500c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005014:	2200      	movs	r2, #0
 8005016:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f88c 	bl	8005138 <UART_WaitOnFlagUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d021      	beq.n	800506a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005036:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800503a:	653b      	str	r3, [r7, #80]	@ 0x50
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	461a      	mov	r2, r3
 8005042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005044:	647b      	str	r3, [r7, #68]	@ 0x44
 8005046:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005048:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800504a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800504c:	e841 2300 	strex	r3, r2, [r1]
 8005050:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1e6      	bne.n	8005026 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e062      	b.n	8005130 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b04      	cmp	r3, #4
 8005076:	d149      	bne.n	800510c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005078:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005080:	2200      	movs	r2, #0
 8005082:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f856 	bl	8005138 <UART_WaitOnFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d03c      	beq.n	800510c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	623b      	str	r3, [r7, #32]
   return(result);
 80050a0:	6a3b      	ldr	r3, [r7, #32]
 80050a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80050b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050b8:	e841 2300 	strex	r3, r2, [r1]
 80050bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e6      	bne.n	8005092 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3308      	adds	r3, #8
 80050ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	e853 3f00 	ldrex	r3, [r3]
 80050d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0301 	bic.w	r3, r3, #1
 80050da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3308      	adds	r3, #8
 80050e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050e4:	61fa      	str	r2, [r7, #28]
 80050e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e8:	69b9      	ldr	r1, [r7, #24]
 80050ea:	69fa      	ldr	r2, [r7, #28]
 80050ec:	e841 2300 	strex	r3, r2, [r1]
 80050f0:	617b      	str	r3, [r7, #20]
   return(result);
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1e5      	bne.n	80050c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e011      	b.n	8005130 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2220      	movs	r2, #32
 8005116:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3758      	adds	r7, #88	@ 0x58
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	4613      	mov	r3, r2
 8005146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005148:	e04f      	b.n	80051ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d04b      	beq.n	80051ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005152:	f7fc f849 	bl	80011e8 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	429a      	cmp	r2, r3
 8005160:	d302      	bcc.n	8005168 <UART_WaitOnFlagUntilTimeout+0x30>
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e04e      	b.n	800520a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0304 	and.w	r3, r3, #4
 8005176:	2b00      	cmp	r3, #0
 8005178:	d037      	beq.n	80051ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b80      	cmp	r3, #128	@ 0x80
 800517e:	d034      	beq.n	80051ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	2b40      	cmp	r3, #64	@ 0x40
 8005184:	d031      	beq.n	80051ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b08      	cmp	r3, #8
 8005192:	d110      	bne.n	80051b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2208      	movs	r2, #8
 800519a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f8ff 	bl	80053a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2208      	movs	r2, #8
 80051a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e029      	b.n	800520a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051c4:	d111      	bne.n	80051ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f8e5 	bl	80053a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2220      	movs	r2, #32
 80051da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e00f      	b.n	800520a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69da      	ldr	r2, [r3, #28]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	4013      	ands	r3, r2
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	bf0c      	ite	eq
 80051fa:	2301      	moveq	r3, #1
 80051fc:	2300      	movne	r3, #0
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	461a      	mov	r2, r3
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	429a      	cmp	r2, r3
 8005206:	d0a0      	beq.n	800514a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005214:	b480      	push	{r7}
 8005216:	b097      	sub	sp, #92	@ 0x5c
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	4613      	mov	r3, r2
 8005220:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	88fa      	ldrh	r2, [r7, #6]
 800522c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	88fa      	ldrh	r2, [r7, #6]
 8005234:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005246:	d10e      	bne.n	8005266 <UART_Start_Receive_IT+0x52>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d105      	bne.n	800525c <UART_Start_Receive_IT+0x48>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005256:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800525a:	e02d      	b.n	80052b8 <UART_Start_Receive_IT+0xa4>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	22ff      	movs	r2, #255	@ 0xff
 8005260:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005264:	e028      	b.n	80052b8 <UART_Start_Receive_IT+0xa4>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10d      	bne.n	800528a <UART_Start_Receive_IT+0x76>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d104      	bne.n	8005280 <UART_Start_Receive_IT+0x6c>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	22ff      	movs	r2, #255	@ 0xff
 800527a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800527e:	e01b      	b.n	80052b8 <UART_Start_Receive_IT+0xa4>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	227f      	movs	r2, #127	@ 0x7f
 8005284:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005288:	e016      	b.n	80052b8 <UART_Start_Receive_IT+0xa4>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005292:	d10d      	bne.n	80052b0 <UART_Start_Receive_IT+0x9c>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d104      	bne.n	80052a6 <UART_Start_Receive_IT+0x92>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	227f      	movs	r2, #127	@ 0x7f
 80052a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80052a4:	e008      	b.n	80052b8 <UART_Start_Receive_IT+0xa4>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	223f      	movs	r2, #63	@ 0x3f
 80052aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80052ae:	e003      	b.n	80052b8 <UART_Start_Receive_IT+0xa4>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2222      	movs	r2, #34	@ 0x22
 80052c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3308      	adds	r3, #8
 80052ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	657b      	str	r3, [r7, #84]	@ 0x54
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3308      	adds	r3, #8
 80052e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80052e8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80052ea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80052ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80052f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e5      	bne.n	80052c8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005304:	d107      	bne.n	8005316 <UART_Start_Receive_IT+0x102>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d103      	bne.n	8005316 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4a21      	ldr	r2, [pc, #132]	@ (8005398 <UART_Start_Receive_IT+0x184>)
 8005312:	669a      	str	r2, [r3, #104]	@ 0x68
 8005314:	e002      	b.n	800531c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4a20      	ldr	r2, [pc, #128]	@ (800539c <UART_Start_Receive_IT+0x188>)
 800531a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d019      	beq.n	8005358 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532c:	e853 3f00 	ldrex	r3, [r3]
 8005330:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8005338:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005342:	637b      	str	r3, [r7, #52]	@ 0x34
 8005344:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005346:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005348:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800534a:	e841 2300 	strex	r3, r2, [r1]
 800534e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e6      	bne.n	8005324 <UART_Start_Receive_IT+0x110>
 8005356:	e018      	b.n	800538a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	e853 3f00 	ldrex	r3, [r3]
 8005364:	613b      	str	r3, [r7, #16]
   return(result);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f043 0320 	orr.w	r3, r3, #32
 800536c:	653b      	str	r3, [r7, #80]	@ 0x50
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	461a      	mov	r2, r3
 8005374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005376:	623b      	str	r3, [r7, #32]
 8005378:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537a:	69f9      	ldr	r1, [r7, #28]
 800537c:	6a3a      	ldr	r2, [r7, #32]
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	61bb      	str	r3, [r7, #24]
   return(result);
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e6      	bne.n	8005358 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	375c      	adds	r7, #92	@ 0x5c
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	080056a5 	.word	0x080056a5
 800539c:	080054e9 	.word	0x080054e9

080053a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b095      	sub	sp, #84	@ 0x54
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b0:	e853 3f00 	ldrex	r3, [r3]
 80053b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	461a      	mov	r2, r3
 80053c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80053c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053ce:	e841 2300 	strex	r3, r2, [r1]
 80053d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1e6      	bne.n	80053a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3308      	adds	r3, #8
 80053e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	e853 3f00 	ldrex	r3, [r3]
 80053e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f023 0301 	bic.w	r3, r3, #1
 80053f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3308      	adds	r3, #8
 80053f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005400:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e5      	bne.n	80053da <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005412:	2b01      	cmp	r3, #1
 8005414:	d118      	bne.n	8005448 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	60bb      	str	r3, [r7, #8]
   return(result);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f023 0310 	bic.w	r3, r3, #16
 800542a:	647b      	str	r3, [r7, #68]	@ 0x44
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	6979      	ldr	r1, [r7, #20]
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	613b      	str	r3, [r7, #16]
   return(result);
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e6      	bne.n	8005416 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800545c:	bf00      	nop
 800545e:	3754      	adds	r7, #84	@ 0x54
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005474:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f7ff fa3e 	bl	8004908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800548c:	bf00      	nop
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054b0:	61fb      	str	r3, [r7, #28]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	461a      	mov	r2, r3
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	61bb      	str	r3, [r7, #24]
 80054bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	6979      	ldr	r1, [r7, #20]
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	e841 2300 	strex	r3, r2, [r1]
 80054c6:	613b      	str	r3, [r7, #16]
   return(result);
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1e6      	bne.n	800549c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2220      	movs	r2, #32
 80054d2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff fa0a 	bl	80048f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054e0:	bf00      	nop
 80054e2:	3720      	adds	r7, #32
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b09c      	sub	sp, #112	@ 0x70
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80054f6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005500:	2b22      	cmp	r3, #34	@ 0x22
 8005502:	f040 80be 	bne.w	8005682 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800550c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005510:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005514:	b2d9      	uxtb	r1, r3
 8005516:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800551a:	b2da      	uxtb	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005520:	400a      	ands	r2, r1
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005536:	b29b      	uxth	r3, r3
 8005538:	3b01      	subs	r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	f040 80a3 	bne.w	8005696 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800555e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005560:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005564:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800556e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005570:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005574:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800557c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e6      	bne.n	8005550 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3308      	adds	r3, #8
 8005588:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558c:	e853 3f00 	ldrex	r3, [r3]
 8005590:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005594:	f023 0301 	bic.w	r3, r3, #1
 8005598:	667b      	str	r3, [r7, #100]	@ 0x64
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3308      	adds	r3, #8
 80055a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80055a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80055a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e5      	bne.n	8005582 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a34      	ldr	r2, [pc, #208]	@ (80056a0 <UART_RxISR_8BIT+0x1b8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d01f      	beq.n	8005614 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d018      	beq.n	8005614 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ea:	e853 3f00 	ldrex	r3, [r3]
 80055ee:	623b      	str	r3, [r7, #32]
   return(result);
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80055f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	461a      	mov	r2, r3
 80055fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005600:	633b      	str	r3, [r7, #48]	@ 0x30
 8005602:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005604:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005608:	e841 2300 	strex	r3, r2, [r1]
 800560c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800560e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005610:	2b00      	cmp	r3, #0
 8005612:	d1e6      	bne.n	80055e2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005618:	2b01      	cmp	r3, #1
 800561a:	d12e      	bne.n	800567a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0310 	bic.w	r3, r3, #16
 8005636:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	461a      	mov	r2, r3
 800563e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005640:	61fb      	str	r3, [r7, #28]
 8005642:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	69b9      	ldr	r1, [r7, #24]
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	617b      	str	r3, [r7, #20]
   return(result);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e6      	bne.n	8005622 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	2b10      	cmp	r3, #16
 8005660:	d103      	bne.n	800566a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2210      	movs	r2, #16
 8005668:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff f952 	bl	800491c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005678:	e00d      	b.n	8005696 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fb fa4c 	bl	8000b18 <HAL_UART_RxCpltCallback>
}
 8005680:	e009      	b.n	8005696 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	8b1b      	ldrh	r3, [r3, #24]
 8005688:	b29a      	uxth	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0208 	orr.w	r2, r2, #8
 8005692:	b292      	uxth	r2, r2
 8005694:	831a      	strh	r2, [r3, #24]
}
 8005696:	bf00      	nop
 8005698:	3770      	adds	r7, #112	@ 0x70
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	40008000 	.word	0x40008000

080056a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b09c      	sub	sp, #112	@ 0x70
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80056b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056bc:	2b22      	cmp	r3, #34	@ 0x22
 80056be:	f040 80be 	bne.w	800583e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80056c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80056d2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80056d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80056da:	4013      	ands	r3, r2
 80056dc:	b29a      	uxth	r2, r3
 80056de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056e6:	1c9a      	adds	r2, r3, #2
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	f040 80a3 	bne.w	8005852 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800571a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800571c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005720:	667b      	str	r3, [r7, #100]	@ 0x64
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800572a:	657b      	str	r3, [r7, #84]	@ 0x54
 800572c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005730:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1e6      	bne.n	800570c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3308      	adds	r3, #8
 8005744:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800574e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005750:	f023 0301 	bic.w	r3, r3, #1
 8005754:	663b      	str	r3, [r7, #96]	@ 0x60
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3308      	adds	r3, #8
 800575c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800575e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005760:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005764:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800576c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e5      	bne.n	800573e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2220      	movs	r2, #32
 8005776:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a34      	ldr	r2, [pc, #208]	@ (800585c <UART_RxISR_16BIT+0x1b8>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d01f      	beq.n	80057d0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d018      	beq.n	80057d0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	461a      	mov	r2, r3
 80057ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057be:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1e6      	bne.n	800579e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d12e      	bne.n	8005836 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	e853 3f00 	ldrex	r3, [r3]
 80057ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f023 0310 	bic.w	r3, r3, #16
 80057f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80057fc:	61bb      	str	r3, [r7, #24]
 80057fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005800:	6979      	ldr	r1, [r7, #20]
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	613b      	str	r3, [r7, #16]
   return(result);
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e6      	bne.n	80057de <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	f003 0310 	and.w	r3, r3, #16
 800581a:	2b10      	cmp	r3, #16
 800581c:	d103      	bne.n	8005826 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2210      	movs	r2, #16
 8005824:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800582c:	4619      	mov	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff f874 	bl	800491c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005834:	e00d      	b.n	8005852 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7fb f96e 	bl	8000b18 <HAL_UART_RxCpltCallback>
}
 800583c:	e009      	b.n	8005852 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	8b1b      	ldrh	r3, [r3, #24]
 8005844:	b29a      	uxth	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0208 	orr.w	r2, r2, #8
 800584e:	b292      	uxth	r2, r2
 8005850:	831a      	strh	r2, [r3, #24]
}
 8005852:	bf00      	nop
 8005854:	3770      	adds	r7, #112	@ 0x70
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40008000 	.word	0x40008000

08005860 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <atoi>:
 8005874:	220a      	movs	r2, #10
 8005876:	2100      	movs	r1, #0
 8005878:	f000 b87a 	b.w	8005970 <strtol>

0800587c <_strtol_l.constprop.0>:
 800587c:	2b24      	cmp	r3, #36	@ 0x24
 800587e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005882:	4686      	mov	lr, r0
 8005884:	4690      	mov	r8, r2
 8005886:	d801      	bhi.n	800588c <_strtol_l.constprop.0+0x10>
 8005888:	2b01      	cmp	r3, #1
 800588a:	d106      	bne.n	800589a <_strtol_l.constprop.0+0x1e>
 800588c:	f000 f896 	bl	80059bc <__errno>
 8005890:	2316      	movs	r3, #22
 8005892:	6003      	str	r3, [r0, #0]
 8005894:	2000      	movs	r0, #0
 8005896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589a:	4834      	ldr	r0, [pc, #208]	@ (800596c <_strtol_l.constprop.0+0xf0>)
 800589c:	460d      	mov	r5, r1
 800589e:	462a      	mov	r2, r5
 80058a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058a4:	5d06      	ldrb	r6, [r0, r4]
 80058a6:	f016 0608 	ands.w	r6, r6, #8
 80058aa:	d1f8      	bne.n	800589e <_strtol_l.constprop.0+0x22>
 80058ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80058ae:	d12d      	bne.n	800590c <_strtol_l.constprop.0+0x90>
 80058b0:	782c      	ldrb	r4, [r5, #0]
 80058b2:	2601      	movs	r6, #1
 80058b4:	1c95      	adds	r5, r2, #2
 80058b6:	f033 0210 	bics.w	r2, r3, #16
 80058ba:	d109      	bne.n	80058d0 <_strtol_l.constprop.0+0x54>
 80058bc:	2c30      	cmp	r4, #48	@ 0x30
 80058be:	d12a      	bne.n	8005916 <_strtol_l.constprop.0+0x9a>
 80058c0:	782a      	ldrb	r2, [r5, #0]
 80058c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80058c6:	2a58      	cmp	r2, #88	@ 0x58
 80058c8:	d125      	bne.n	8005916 <_strtol_l.constprop.0+0x9a>
 80058ca:	786c      	ldrb	r4, [r5, #1]
 80058cc:	2310      	movs	r3, #16
 80058ce:	3502      	adds	r5, #2
 80058d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80058d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80058d8:	2200      	movs	r2, #0
 80058da:	fbbc f9f3 	udiv	r9, ip, r3
 80058de:	4610      	mov	r0, r2
 80058e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80058e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80058e8:	2f09      	cmp	r7, #9
 80058ea:	d81b      	bhi.n	8005924 <_strtol_l.constprop.0+0xa8>
 80058ec:	463c      	mov	r4, r7
 80058ee:	42a3      	cmp	r3, r4
 80058f0:	dd27      	ble.n	8005942 <_strtol_l.constprop.0+0xc6>
 80058f2:	1c57      	adds	r7, r2, #1
 80058f4:	d007      	beq.n	8005906 <_strtol_l.constprop.0+0x8a>
 80058f6:	4581      	cmp	r9, r0
 80058f8:	d320      	bcc.n	800593c <_strtol_l.constprop.0+0xc0>
 80058fa:	d101      	bne.n	8005900 <_strtol_l.constprop.0+0x84>
 80058fc:	45a2      	cmp	sl, r4
 80058fe:	db1d      	blt.n	800593c <_strtol_l.constprop.0+0xc0>
 8005900:	fb00 4003 	mla	r0, r0, r3, r4
 8005904:	2201      	movs	r2, #1
 8005906:	f815 4b01 	ldrb.w	r4, [r5], #1
 800590a:	e7eb      	b.n	80058e4 <_strtol_l.constprop.0+0x68>
 800590c:	2c2b      	cmp	r4, #43	@ 0x2b
 800590e:	bf04      	itt	eq
 8005910:	782c      	ldrbeq	r4, [r5, #0]
 8005912:	1c95      	addeq	r5, r2, #2
 8005914:	e7cf      	b.n	80058b6 <_strtol_l.constprop.0+0x3a>
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1da      	bne.n	80058d0 <_strtol_l.constprop.0+0x54>
 800591a:	2c30      	cmp	r4, #48	@ 0x30
 800591c:	bf0c      	ite	eq
 800591e:	2308      	moveq	r3, #8
 8005920:	230a      	movne	r3, #10
 8005922:	e7d5      	b.n	80058d0 <_strtol_l.constprop.0+0x54>
 8005924:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005928:	2f19      	cmp	r7, #25
 800592a:	d801      	bhi.n	8005930 <_strtol_l.constprop.0+0xb4>
 800592c:	3c37      	subs	r4, #55	@ 0x37
 800592e:	e7de      	b.n	80058ee <_strtol_l.constprop.0+0x72>
 8005930:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005934:	2f19      	cmp	r7, #25
 8005936:	d804      	bhi.n	8005942 <_strtol_l.constprop.0+0xc6>
 8005938:	3c57      	subs	r4, #87	@ 0x57
 800593a:	e7d8      	b.n	80058ee <_strtol_l.constprop.0+0x72>
 800593c:	f04f 32ff 	mov.w	r2, #4294967295
 8005940:	e7e1      	b.n	8005906 <_strtol_l.constprop.0+0x8a>
 8005942:	1c53      	adds	r3, r2, #1
 8005944:	d108      	bne.n	8005958 <_strtol_l.constprop.0+0xdc>
 8005946:	2322      	movs	r3, #34	@ 0x22
 8005948:	f8ce 3000 	str.w	r3, [lr]
 800594c:	4660      	mov	r0, ip
 800594e:	f1b8 0f00 	cmp.w	r8, #0
 8005952:	d0a0      	beq.n	8005896 <_strtol_l.constprop.0+0x1a>
 8005954:	1e69      	subs	r1, r5, #1
 8005956:	e006      	b.n	8005966 <_strtol_l.constprop.0+0xea>
 8005958:	b106      	cbz	r6, 800595c <_strtol_l.constprop.0+0xe0>
 800595a:	4240      	negs	r0, r0
 800595c:	f1b8 0f00 	cmp.w	r8, #0
 8005960:	d099      	beq.n	8005896 <_strtol_l.constprop.0+0x1a>
 8005962:	2a00      	cmp	r2, #0
 8005964:	d1f6      	bne.n	8005954 <_strtol_l.constprop.0+0xd8>
 8005966:	f8c8 1000 	str.w	r1, [r8]
 800596a:	e794      	b.n	8005896 <_strtol_l.constprop.0+0x1a>
 800596c:	08005a8d 	.word	0x08005a8d

08005970 <strtol>:
 8005970:	4613      	mov	r3, r2
 8005972:	460a      	mov	r2, r1
 8005974:	4601      	mov	r1, r0
 8005976:	4802      	ldr	r0, [pc, #8]	@ (8005980 <strtol+0x10>)
 8005978:	6800      	ldr	r0, [r0, #0]
 800597a:	f7ff bf7f 	b.w	800587c <_strtol_l.constprop.0>
 800597e:	bf00      	nop
 8005980:	2000000c 	.word	0x2000000c

08005984 <memset>:
 8005984:	4402      	add	r2, r0
 8005986:	4603      	mov	r3, r0
 8005988:	4293      	cmp	r3, r2
 800598a:	d100      	bne.n	800598e <memset+0xa>
 800598c:	4770      	bx	lr
 800598e:	f803 1b01 	strb.w	r1, [r3], #1
 8005992:	e7f9      	b.n	8005988 <memset+0x4>

08005994 <strncpy>:
 8005994:	b510      	push	{r4, lr}
 8005996:	3901      	subs	r1, #1
 8005998:	4603      	mov	r3, r0
 800599a:	b132      	cbz	r2, 80059aa <strncpy+0x16>
 800599c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80059a0:	f803 4b01 	strb.w	r4, [r3], #1
 80059a4:	3a01      	subs	r2, #1
 80059a6:	2c00      	cmp	r4, #0
 80059a8:	d1f7      	bne.n	800599a <strncpy+0x6>
 80059aa:	441a      	add	r2, r3
 80059ac:	2100      	movs	r1, #0
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d100      	bne.n	80059b4 <strncpy+0x20>
 80059b2:	bd10      	pop	{r4, pc}
 80059b4:	f803 1b01 	strb.w	r1, [r3], #1
 80059b8:	e7f9      	b.n	80059ae <strncpy+0x1a>
	...

080059bc <__errno>:
 80059bc:	4b01      	ldr	r3, [pc, #4]	@ (80059c4 <__errno+0x8>)
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	2000000c 	.word	0x2000000c

080059c8 <__libc_init_array>:
 80059c8:	b570      	push	{r4, r5, r6, lr}
 80059ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005a00 <__libc_init_array+0x38>)
 80059cc:	4c0d      	ldr	r4, [pc, #52]	@ (8005a04 <__libc_init_array+0x3c>)
 80059ce:	1b64      	subs	r4, r4, r5
 80059d0:	10a4      	asrs	r4, r4, #2
 80059d2:	2600      	movs	r6, #0
 80059d4:	42a6      	cmp	r6, r4
 80059d6:	d109      	bne.n	80059ec <__libc_init_array+0x24>
 80059d8:	4d0b      	ldr	r5, [pc, #44]	@ (8005a08 <__libc_init_array+0x40>)
 80059da:	4c0c      	ldr	r4, [pc, #48]	@ (8005a0c <__libc_init_array+0x44>)
 80059dc:	f000 f826 	bl	8005a2c <_init>
 80059e0:	1b64      	subs	r4, r4, r5
 80059e2:	10a4      	asrs	r4, r4, #2
 80059e4:	2600      	movs	r6, #0
 80059e6:	42a6      	cmp	r6, r4
 80059e8:	d105      	bne.n	80059f6 <__libc_init_array+0x2e>
 80059ea:	bd70      	pop	{r4, r5, r6, pc}
 80059ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f0:	4798      	blx	r3
 80059f2:	3601      	adds	r6, #1
 80059f4:	e7ee      	b.n	80059d4 <__libc_init_array+0xc>
 80059f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059fa:	4798      	blx	r3
 80059fc:	3601      	adds	r6, #1
 80059fe:	e7f2      	b.n	80059e6 <__libc_init_array+0x1e>
 8005a00:	08005b98 	.word	0x08005b98
 8005a04:	08005b98 	.word	0x08005b98
 8005a08:	08005b98 	.word	0x08005b98
 8005a0c:	08005b9c 	.word	0x08005b9c

08005a10 <memcpy>:
 8005a10:	440a      	add	r2, r1
 8005a12:	4291      	cmp	r1, r2
 8005a14:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a18:	d100      	bne.n	8005a1c <memcpy+0xc>
 8005a1a:	4770      	bx	lr
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a26:	4291      	cmp	r1, r2
 8005a28:	d1f9      	bne.n	8005a1e <memcpy+0xe>
 8005a2a:	bd10      	pop	{r4, pc}

08005a2c <_init>:
 8005a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2e:	bf00      	nop
 8005a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a32:	bc08      	pop	{r3}
 8005a34:	469e      	mov	lr, r3
 8005a36:	4770      	bx	lr

08005a38 <_fini>:
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3a:	bf00      	nop
 8005a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3e:	bc08      	pop	{r3}
 8005a40:	469e      	mov	lr, r3
 8005a42:	4770      	bx	lr
