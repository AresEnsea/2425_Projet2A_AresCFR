
cfr_mot2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005d68  08005d68  00006d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eb4  08005eb4  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005eb4  08005eb4  00006eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ebc  08005ebc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ebc  08005ebc  00006ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ec0  08005ec0  00006ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005ec4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  2000005c  08005f20  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08005f20  00007510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011779  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002491  00000000  00000000  00018805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0001ac98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c2c  00000000  00000000  0001bc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f1e  00000000  00000000  0001c854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e39  00000000  00000000  00043772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f25ab  00000000  00000000  000565ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00148b56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004340  00000000  00000000  00148b9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0014cedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005d50 	.word	0x08005d50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08005d50 	.word	0x08005d50

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b09e      	sub	sp, #120	@ 0x78
 80004bc:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80004be:	f000 ffd7 	bl	8001470 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80004c2:	f000 f9b3 	bl	800082c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80004c6:	f000 fc29 	bl	8000d1c <MX_GPIO_Init>
    MX_TIM2_Init();
 80004ca:	f000 fba5 	bl	8000c18 <MX_TIM2_Init>
    MX_LPUART1_UART_Init();
 80004ce:	f000 f9ff 	bl	80008d0 <MX_LPUART1_UART_Init>
    MX_TIM1_Init();
 80004d2:	f000 fae9 	bl	8000aa8 <MX_TIM1_Init>
    MX_USART2_UART_Init();
 80004d6:	f000 fa87 	bl	80009e8 <MX_USART2_UART_Init>
    MX_USART3_UART_Init();
 80004da:	f000 fab5 	bl	8000a48 <MX_USART3_UART_Init>
    MX_UART4_Init();
 80004de:	f000 fa23 	bl	8000928 <MX_UART4_Init>
    MX_USART1_UART_Init();
 80004e2:	f000 fa51 	bl	8000988 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // PB10 TIM2 CH3
 80004e6:	2108      	movs	r1, #8
 80004e8:	48ae      	ldr	r0, [pc, #696]	@ (80007a4 <main+0x2ec>)
 80004ea:	f002 ff67 	bl	80033bc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // PB11 TIM2 CH4
 80004ee:	210c      	movs	r1, #12
 80004f0:	48ac      	ldr	r0, [pc, #688]	@ (80007a4 <main+0x2ec>)
 80004f2:	f002 ff63 	bl	80033bc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // PA8
 80004f6:	2100      	movs	r1, #0
 80004f8:	48ab      	ldr	r0, [pc, #684]	@ (80007a8 <main+0x2f0>)
 80004fa:	f002 ff5f 	bl	80033bc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // PA9
 80004fe:	2104      	movs	r1, #4
 8000500:	48a9      	ldr	r0, [pc, #676]	@ (80007a8 <main+0x2f0>)
 8000502:	f002 ff5b 	bl	80033bc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // PA10
 8000506:	2108      	movs	r1, #8
 8000508:	48a7      	ldr	r0, [pc, #668]	@ (80007a8 <main+0x2f0>)
 800050a:	f002 ff57 	bl	80033bc <HAL_TIM_PWM_Start>
    HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)rx_data, sizeof(rx_data));
 800050e:	221b      	movs	r2, #27
 8000510:	49a6      	ldr	r1, [pc, #664]	@ (80007ac <main+0x2f4>)
 8000512:	48a7      	ldr	r0, [pc, #668]	@ (80007b0 <main+0x2f8>)
 8000514:	f004 f850 	bl	80045b8 <HAL_UART_Receive_IT>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        // Find the start marker '>' in rx_data
        int offset = -1;
 8000518:	f04f 33ff 	mov.w	r3, #4294967295
 800051c:	677b      	str	r3, [r7, #116]	@ 0x74
        for (int j = 0; j < sizeof(rx_data); j++) {
 800051e:	2300      	movs	r3, #0
 8000520:	673b      	str	r3, [r7, #112]	@ 0x70
 8000522:	e00b      	b.n	800053c <main+0x84>
            if (rx_data[j] == '>') {
 8000524:	4aa1      	ldr	r2, [pc, #644]	@ (80007ac <main+0x2f4>)
 8000526:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000528:	4413      	add	r3, r2
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b3e      	cmp	r3, #62	@ 0x3e
 800052e:	d102      	bne.n	8000536 <main+0x7e>
                offset = j;
 8000530:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000532:	677b      	str	r3, [r7, #116]	@ 0x74
                break;
 8000534:	e005      	b.n	8000542 <main+0x8a>
        for (int j = 0; j < sizeof(rx_data); j++) {
 8000536:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000538:	3301      	adds	r3, #1
 800053a:	673b      	str	r3, [r7, #112]	@ 0x70
 800053c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800053e:	2b1a      	cmp	r3, #26
 8000540:	d9f0      	bls.n	8000524 <main+0x6c>
            }
        }

        // Process data if '<' is found
        if (offset >= 0) {
 8000542:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000544:	2b00      	cmp	r3, #0
 8000546:	f2c0 8162 	blt.w	800080e <main+0x356>
            // Debug output: Reconstruct the message in circular order
            char console_data[29]; // 27 bytes + \r\n
            for (int i = 0; i < 27; i++) {
 800054a:	2300      	movs	r3, #0
 800054c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800054e:	e019      	b.n	8000584 <main+0xcc>
                console_data[i] = rx_data[(offset + i) % 27];
 8000550:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000554:	18d1      	adds	r1, r2, r3
 8000556:	4b97      	ldr	r3, [pc, #604]	@ (80007b4 <main+0x2fc>)
 8000558:	fb83 2301 	smull	r2, r3, r3, r1
 800055c:	10da      	asrs	r2, r3, #3
 800055e:	17cb      	asrs	r3, r1, #31
 8000560:	1ad2      	subs	r2, r2, r3
 8000562:	4613      	mov	r3, r2
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	4413      	add	r3, r2
 8000568:	00da      	lsls	r2, r3, #3
 800056a:	4413      	add	r3, r2
 800056c:	1aca      	subs	r2, r1, r3
 800056e:	4b8f      	ldr	r3, [pc, #572]	@ (80007ac <main+0x2f4>)
 8000570:	5c99      	ldrb	r1, [r3, r2]
 8000572:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8000576:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000578:	4413      	add	r3, r2
 800057a:	460a      	mov	r2, r1
 800057c:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 27; i++) {
 800057e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000580:	3301      	adds	r3, #1
 8000582:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000586:	2b1a      	cmp	r3, #26
 8000588:	dde2      	ble.n	8000550 <main+0x98>
            }
            console_data[27] = '\r';
 800058a:	230d      	movs	r3, #13
 800058c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
            console_data[28] = '\n';
 8000590:	230a      	movs	r3, #10
 8000592:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            HAL_UART_Transmit(&huart2, (uint8_t *)console_data, 29, HAL_MAX_DELAY);
 8000596:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	221d      	movs	r2, #29
 80005a0:	4885      	ldr	r0, [pc, #532]	@ (80007b8 <main+0x300>)
 80005a2:	f003 ff7f 	bl	80044a4 <HAL_UART_Transmit>

            // Pour le moteur Maxon droit
            char mot_maxon_dataD[5];
            for (int i = 0; i < 4; i++) {
 80005a6:	2300      	movs	r3, #0
 80005a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80005aa:	e01a      	b.n	80005e2 <main+0x12a>
                mot_maxon_dataD[i] = rx_data[(offset + 2 + i) % 27];
 80005ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80005ae:	1c9a      	adds	r2, r3, #2
 80005b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80005b2:	18d1      	adds	r1, r2, r3
 80005b4:	4b7f      	ldr	r3, [pc, #508]	@ (80007b4 <main+0x2fc>)
 80005b6:	fb83 2301 	smull	r2, r3, r3, r1
 80005ba:	10da      	asrs	r2, r3, #3
 80005bc:	17cb      	asrs	r3, r1, #31
 80005be:	1ad2      	subs	r2, r2, r3
 80005c0:	4613      	mov	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	4413      	add	r3, r2
 80005c6:	00da      	lsls	r2, r3, #3
 80005c8:	4413      	add	r3, r2
 80005ca:	1aca      	subs	r2, r1, r3
 80005cc:	4b77      	ldr	r3, [pc, #476]	@ (80007ac <main+0x2f4>)
 80005ce:	5c99      	ldrb	r1, [r3, r2]
 80005d0:	f107 0220 	add.w	r2, r7, #32
 80005d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80005d6:	4413      	add	r3, r2
 80005d8:	460a      	mov	r2, r1
 80005da:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 80005dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80005de:	3301      	adds	r3, #1
 80005e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80005e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80005e4:	2b03      	cmp	r3, #3
 80005e6:	dde1      	ble.n	80005ac <main+0xf4>
            }
            mot_maxon_dataD[4] = '\0';
 80005e8:	2300      	movs	r3, #0
 80005ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            int mot_maxon_valueD = atoi(mot_maxon_dataD);
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	4618      	mov	r0, r3
 80005f4:	f005 faf2 	bl	8005bdc <atoi>
 80005f8:	6678      	str	r0, [r7, #100]	@ 0x64
            // Limiter à la plage valide (0-1999)
            if (mot_maxon_valueD < 0) mot_maxon_valueD = 0;
 80005fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	da01      	bge.n	8000604 <main+0x14c>
 8000600:	2300      	movs	r3, #0
 8000602:	667b      	str	r3, [r7, #100]	@ 0x64
            if (mot_maxon_valueD > 1999) mot_maxon_valueD = 1999;
 8000604:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000606:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800060a:	db02      	blt.n	8000612 <main+0x15a>
 800060c:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 8000610:	667b      	str	r3, [r7, #100]	@ 0x64
            int inv_d = rx_data[(offset + 1) % 27] - '0';
 8000612:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000614:	1c59      	adds	r1, r3, #1
 8000616:	4b67      	ldr	r3, [pc, #412]	@ (80007b4 <main+0x2fc>)
 8000618:	fb83 2301 	smull	r2, r3, r3, r1
 800061c:	10da      	asrs	r2, r3, #3
 800061e:	17cb      	asrs	r3, r1, #31
 8000620:	1ad2      	subs	r2, r2, r3
 8000622:	4613      	mov	r3, r2
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	4413      	add	r3, r2
 8000628:	00da      	lsls	r2, r3, #3
 800062a:	4413      	add	r3, r2
 800062c:	1aca      	subs	r2, r1, r3
 800062e:	4b5f      	ldr	r3, [pc, #380]	@ (80007ac <main+0x2f4>)
 8000630:	5c9b      	ldrb	r3, [r3, r2]
 8000632:	3b30      	subs	r3, #48	@ 0x30
 8000634:	663b      	str	r3, [r7, #96]	@ 0x60
            if (inv_d != 0 && inv_d != 1) inv_d = 0;  // Validation de la direction
 8000636:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000638:	2b00      	cmp	r3, #0
 800063a:	d004      	beq.n	8000646 <main+0x18e>
 800063c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800063e:	2b01      	cmp	r3, #1
 8000640:	d001      	beq.n	8000646 <main+0x18e>
 8000642:	2300      	movs	r3, #0
 8000644:	663b      	str	r3, [r7, #96]	@ 0x60
            mot_maxonD(mot_maxon_valueD, inv_d);
 8000646:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000648:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800064a:	f000 fc01 	bl	8000e50 <mot_maxonD>

            // Pour le moteur Maxon gauche
            char mot_maxon_dataG[5];
            for (int i = 0; i < 4; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000652:	e01a      	b.n	800068a <main+0x1d2>
                mot_maxon_dataG[i] = rx_data[(offset + 7 + i) % 27];
 8000654:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000656:	1dda      	adds	r2, r3, #7
 8000658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800065a:	18d1      	adds	r1, r2, r3
 800065c:	4b55      	ldr	r3, [pc, #340]	@ (80007b4 <main+0x2fc>)
 800065e:	fb83 2301 	smull	r2, r3, r3, r1
 8000662:	10da      	asrs	r2, r3, #3
 8000664:	17cb      	asrs	r3, r1, #31
 8000666:	1ad2      	subs	r2, r2, r3
 8000668:	4613      	mov	r3, r2
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	4413      	add	r3, r2
 800066e:	00da      	lsls	r2, r3, #3
 8000670:	4413      	add	r3, r2
 8000672:	1aca      	subs	r2, r1, r3
 8000674:	4b4d      	ldr	r3, [pc, #308]	@ (80007ac <main+0x2f4>)
 8000676:	5c99      	ldrb	r1, [r3, r2]
 8000678:	f107 0218 	add.w	r2, r7, #24
 800067c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800067e:	4413      	add	r3, r2
 8000680:	460a      	mov	r2, r1
 8000682:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 4; i++) {
 8000684:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000686:	3301      	adds	r3, #1
 8000688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800068a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800068c:	2b03      	cmp	r3, #3
 800068e:	dde1      	ble.n	8000654 <main+0x19c>
            }
            mot_maxon_dataG[4] = '\0';
 8000690:	2300      	movs	r3, #0
 8000692:	773b      	strb	r3, [r7, #28]
            int mot_maxon_valueG = atoi(mot_maxon_dataG);
 8000694:	f107 0318 	add.w	r3, r7, #24
 8000698:	4618      	mov	r0, r3
 800069a:	f005 fa9f 	bl	8005bdc <atoi>
 800069e:	65b8      	str	r0, [r7, #88]	@ 0x58
            // Limiter à la plage valide (0-1999)
            if (mot_maxon_valueG < 0) mot_maxon_valueG = 0;
 80006a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	da01      	bge.n	80006aa <main+0x1f2>
 80006a6:	2300      	movs	r3, #0
 80006a8:	65bb      	str	r3, [r7, #88]	@ 0x58
            if (mot_maxon_valueG > 1999) mot_maxon_valueG = 1999;
 80006aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80006ac:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80006b0:	db02      	blt.n	80006b8 <main+0x200>
 80006b2:	f240 73cf 	movw	r3, #1999	@ 0x7cf
 80006b6:	65bb      	str	r3, [r7, #88]	@ 0x58
            int inv_g = rx_data[(offset + 6) % 27] - '0';
 80006b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80006ba:	1d99      	adds	r1, r3, #6
 80006bc:	4b3d      	ldr	r3, [pc, #244]	@ (80007b4 <main+0x2fc>)
 80006be:	fb83 2301 	smull	r2, r3, r3, r1
 80006c2:	10da      	asrs	r2, r3, #3
 80006c4:	17cb      	asrs	r3, r1, #31
 80006c6:	1ad2      	subs	r2, r2, r3
 80006c8:	4613      	mov	r3, r2
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	4413      	add	r3, r2
 80006ce:	00da      	lsls	r2, r3, #3
 80006d0:	4413      	add	r3, r2
 80006d2:	1aca      	subs	r2, r1, r3
 80006d4:	4b35      	ldr	r3, [pc, #212]	@ (80007ac <main+0x2f4>)
 80006d6:	5c9b      	ldrb	r3, [r3, r2]
 80006d8:	3b30      	subs	r3, #48	@ 0x30
 80006da:	657b      	str	r3, [r7, #84]	@ 0x54
            if (inv_g != 0 && inv_g != 1) inv_g = 0;  // Validation de la direction
 80006dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d004      	beq.n	80006ec <main+0x234>
 80006e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d001      	beq.n	80006ec <main+0x234>
 80006e8:	2300      	movs	r3, #0
 80006ea:	657b      	str	r3, [r7, #84]	@ 0x54
            mot_maxonG(mot_maxon_valueG, inv_g);
 80006ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80006ee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80006f0:	f000 fbde 	bl	8000eb0 <mot_maxonG>

            // Pour les servos (13 octets avec '>' comme marqueur de début)
            char servo_goal_data[13];
            servo_goal_data[0] = '<'; // Ajouter le marqueur de début
 80006f4:	233c      	movs	r3, #60	@ 0x3c
 80006f6:	723b      	strb	r3, [r7, #8]
            for (int i = 0; i < 12; i++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80006fc:	e01b      	b.n	8000736 <main+0x27e>
                servo_goal_data[i + 1] = rx_data[(offset + 11 + i) % 27];
 80006fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000700:	f103 020b 	add.w	r2, r3, #11
 8000704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000706:	18d1      	adds	r1, r2, r3
 8000708:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <main+0x2fc>)
 800070a:	fb83 2301 	smull	r2, r3, r3, r1
 800070e:	10da      	asrs	r2, r3, #3
 8000710:	17cb      	asrs	r3, r1, #31
 8000712:	1ad2      	subs	r2, r2, r3
 8000714:	4613      	mov	r3, r2
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	4413      	add	r3, r2
 800071a:	00da      	lsls	r2, r3, #3
 800071c:	4413      	add	r3, r2
 800071e:	1aca      	subs	r2, r1, r3
 8000720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000722:	3301      	adds	r3, #1
 8000724:	4921      	ldr	r1, [pc, #132]	@ (80007ac <main+0x2f4>)
 8000726:	5c8a      	ldrb	r2, [r1, r2]
 8000728:	3378      	adds	r3, #120	@ 0x78
 800072a:	443b      	add	r3, r7
 800072c:	f803 2c70 	strb.w	r2, [r3, #-112]
            for (int i = 0; i < 12; i++) {
 8000730:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000732:	3301      	adds	r3, #1
 8000734:	653b      	str	r3, [r7, #80]	@ 0x50
 8000736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000738:	2b0b      	cmp	r3, #11
 800073a:	dde0      	ble.n	80006fe <main+0x246>
            }
            HAL_UART_Transmit(&huart4, (uint8_t *)servo_goal_data, 13, HAL_MAX_DELAY);
 800073c:	f107 0108 	add.w	r1, r7, #8
 8000740:	f04f 33ff 	mov.w	r3, #4294967295
 8000744:	220d      	movs	r2, #13
 8000746:	481d      	ldr	r0, [pc, #116]	@ (80007bc <main+0x304>)
 8000748:	f003 feac 	bl	80044a4 <HAL_UART_Transmit>

            // Steppers - Scindé en deux UARTs
            // Première partie (PCB 1) via huart3
            char stepper_data1[2];
            for (int i = 0; i < 2; i++) {
 800074c:	2300      	movs	r3, #0
 800074e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000750:	e01a      	b.n	8000788 <main+0x2d0>
                stepper_data1[i] = rx_data[(offset + 23 + i) % 27];
 8000752:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000754:	f103 0217 	add.w	r2, r3, #23
 8000758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800075a:	18d1      	adds	r1, r2, r3
 800075c:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <main+0x2fc>)
 800075e:	fb83 2301 	smull	r2, r3, r3, r1
 8000762:	10da      	asrs	r2, r3, #3
 8000764:	17cb      	asrs	r3, r1, #31
 8000766:	1ad2      	subs	r2, r2, r3
 8000768:	4613      	mov	r3, r2
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	4413      	add	r3, r2
 800076e:	00da      	lsls	r2, r3, #3
 8000770:	4413      	add	r3, r2
 8000772:	1aca      	subs	r2, r1, r3
 8000774:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <main+0x2f4>)
 8000776:	5c99      	ldrb	r1, [r3, r2]
 8000778:	1d3a      	adds	r2, r7, #4
 800077a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800077c:	4413      	add	r3, r2
 800077e:	460a      	mov	r2, r1
 8000780:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 2; i++) {
 8000782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000784:	3301      	adds	r3, #1
 8000786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800078a:	2b01      	cmp	r3, #1
 800078c:	dde1      	ble.n	8000752 <main+0x29a>
            }
            HAL_UART_Transmit(&huart3, (uint8_t *)stepper_data1, 2, HAL_MAX_DELAY);
 800078e:	1d39      	adds	r1, r7, #4
 8000790:	f04f 33ff 	mov.w	r3, #4294967295
 8000794:	2202      	movs	r2, #2
 8000796:	480a      	ldr	r0, [pc, #40]	@ (80007c0 <main+0x308>)
 8000798:	f003 fe84 	bl	80044a4 <HAL_UART_Transmit>

            // Deuxième partie (PCB 2) via huart1
            char stepper_data2[2];
            for (int i = 0; i < 2; i++) {
 800079c:	2300      	movs	r3, #0
 800079e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80007a0:	e02b      	b.n	80007fa <main+0x342>
 80007a2:	bf00      	nop
 80007a4:	2000036c 	.word	0x2000036c
 80007a8:	20000320 	.word	0x20000320
 80007ac:	200003b8 	.word	0x200003b8
 80007b0:	20000078 	.word	0x20000078
 80007b4:	4bda12f7 	.word	0x4bda12f7
 80007b8:	20000210 	.word	0x20000210
 80007bc:	20000100 	.word	0x20000100
 80007c0:	20000298 	.word	0x20000298
                stepper_data2[i] = rx_data[(offset + 25 + i) % 27];
 80007c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80007c6:	f103 0219 	add.w	r2, r3, #25
 80007ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80007cc:	18d1      	adds	r1, r2, r3
 80007ce:	4b13      	ldr	r3, [pc, #76]	@ (800081c <main+0x364>)
 80007d0:	fb83 2301 	smull	r2, r3, r3, r1
 80007d4:	10da      	asrs	r2, r3, #3
 80007d6:	17cb      	asrs	r3, r1, #31
 80007d8:	1ad2      	subs	r2, r2, r3
 80007da:	4613      	mov	r3, r2
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	4413      	add	r3, r2
 80007e0:	00da      	lsls	r2, r3, #3
 80007e2:	4413      	add	r3, r2
 80007e4:	1aca      	subs	r2, r1, r3
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <main+0x368>)
 80007e8:	5c99      	ldrb	r1, [r3, r2]
 80007ea:	463a      	mov	r2, r7
 80007ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80007ee:	4413      	add	r3, r2
 80007f0:	460a      	mov	r2, r1
 80007f2:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < 2; i++) {
 80007f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80007f6:	3301      	adds	r3, #1
 80007f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80007fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	dde1      	ble.n	80007c4 <main+0x30c>
            }
            HAL_UART_Transmit(&huart1, (uint8_t *)stepper_data2, 2, HAL_MAX_DELAY);
 8000800:	4639      	mov	r1, r7
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	2202      	movs	r2, #2
 8000808:	4806      	ldr	r0, [pc, #24]	@ (8000824 <main+0x36c>)
 800080a:	f003 fe4b 	bl	80044a4 <HAL_UART_Transmit>
        }

        // Re-enable UART reception to resynchronize
        HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)rx_data, sizeof(rx_data));
 800080e:	221b      	movs	r2, #27
 8000810:	4903      	ldr	r1, [pc, #12]	@ (8000820 <main+0x368>)
 8000812:	4805      	ldr	r0, [pc, #20]	@ (8000828 <main+0x370>)
 8000814:	f003 fed0 	bl	80045b8 <HAL_UART_Receive_IT>
    {
 8000818:	e67e      	b.n	8000518 <main+0x60>
 800081a:	bf00      	nop
 800081c:	4bda12f7 	.word	0x4bda12f7
 8000820:	200003b8 	.word	0x200003b8
 8000824:	20000188 	.word	0x20000188
 8000828:	20000078 	.word	0x20000078

0800082c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b096      	sub	sp, #88	@ 0x58
 8000830:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	2244      	movs	r2, #68	@ 0x44
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f005 fa56 	bl	8005cec <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800084e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000852:	f001 f9e9 	bl	8001c28 <HAL_PWREx_ControlVoltageScaling>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x34>
    {
        Error_Handler();
 800085c:	f000 faf2 	bl	8000e44 <Error_Handler>
    }

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000860:	2302      	movs	r3, #2
 8000862:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000864:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000868:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086a:	2310      	movs	r3, #16
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000872:	2302      	movs	r3, #2
 8000874:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 8000876:	2301      	movs	r3, #1
 8000878:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLN = 10;
 800087a:	230a      	movs	r3, #10
 800087c:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800087e:	2307      	movs	r3, #7
 8000880:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000882:	2302      	movs	r3, #2
 8000884:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000886:	2302      	movs	r3, #2
 8000888:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4618      	mov	r0, r3
 8000890:	f001 fa20 	bl	8001cd4 <HAL_RCC_OscConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x72>
    {
        Error_Handler();
 800089a:	f000 fad3 	bl	8000e44 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	230f      	movs	r3, #15
 80008a0:	603b      	str	r3, [r7, #0]
                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a2:	2303      	movs	r3, #3
 80008a4:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ae:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	2104      	movs	r1, #4
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fde7 	bl	800248c <HAL_RCC_ClockConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x9c>
    {
        Error_Handler();
 80008c4:	f000 fabe 	bl	8000e44 <Error_Handler>
    }
}
 80008c8:	bf00      	nop
 80008ca:	3758      	adds	r7, #88	@ 0x58
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
    /* USER CODE END LPUART1_Init 0 */

    /* USER CODE BEGIN LPUART1_Init 1 */

    /* USER CODE END LPUART1_Init 1 */
    hlpuart1.Instance = LPUART1;
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008d6:	4a13      	ldr	r2, [pc, #76]	@ (8000924 <MX_LPUART1_UART_Init+0x54>)
 80008d8:	601a      	str	r2, [r3, #0]
    hlpuart1.Init.BaudRate = 115200;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
    hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
    hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
    hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
    hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
    hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
    hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
    hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000906:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	@ (8000920 <MX_LPUART1_UART_Init+0x50>)
 800090e:	f003 fd7b 	bl	8004408 <HAL_UART_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_LPUART1_UART_Init+0x4c>
    {
        Error_Handler();
 8000918:	f000 fa94 	bl	8000e44 <Error_Handler>
    }
    /* USER CODE BEGIN LPUART1_Init 2 */

    /* USER CODE END LPUART1_Init 2 */
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000078 	.word	0x20000078
 8000924:	40008000 	.word	0x40008000

08000928 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
    /* USER CODE END UART4_Init 0 */

    /* USER CODE BEGIN UART4_Init 1 */

    /* USER CODE END UART4_Init 1 */
    huart4.Instance = UART4;
 800092c:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_UART4_Init+0x58>)
 800092e:	4a15      	ldr	r2, [pc, #84]	@ (8000984 <MX_UART4_Init+0x5c>)
 8000930:	601a      	str	r2, [r3, #0]
    huart4.Init.BaudRate = 115200;
 8000932:	4b13      	ldr	r3, [pc, #76]	@ (8000980 <MX_UART4_Init+0x58>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
    huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_UART4_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
    huart4.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0f      	ldr	r3, [pc, #60]	@ (8000980 <MX_UART4_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
    huart4.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <MX_UART4_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
    huart4.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <MX_UART4_Init+0x58>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
    huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <MX_UART4_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
    huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <MX_UART4_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
    huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <MX_UART4_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
    huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <MX_UART4_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart4) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_UART4_Init+0x58>)
 800096c:	f003 fd4c 	bl	8004408 <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_UART4_Init+0x52>
    {
        Error_Handler();
 8000976:	f000 fa65 	bl	8000e44 <Error_Handler>
    }
    /* USER CODE BEGIN UART4_Init 2 */

    /* USER CODE END UART4_Init 2 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000100 	.word	0x20000100
 8000984:	40004c00 	.word	0x40004c00

08000988 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 800098c:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <MX_USART1_UART_Init+0x58>)
 800098e:	4a15      	ldr	r2, [pc, #84]	@ (80009e4 <MX_USART1_UART_Init+0x5c>)
 8000990:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8000992:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <MX_USART1_UART_Init+0x58>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_USART1_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_USART1_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_USART1_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_USART1_UART_Init+0x58>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <MX_USART1_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_USART1_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <MX_USART1_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_USART1_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_USART1_UART_Init+0x58>)
 80009cc:	f003 fd1c 	bl	8004408 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART1_UART_Init+0x52>
    {
        Error_Handler();
 80009d6:	f000 fa35 	bl	8000e44 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000188 	.word	0x20000188
 80009e4:	40013800 	.word	0x40013800

080009e8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 80009ec:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <MX_USART2_UART_Init+0x58>)
 80009ee:	4a15      	ldr	r2, [pc, #84]	@ (8000a44 <MX_USART2_UART_Init+0x5c>)
 80009f0:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80009f2:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <MX_USART2_UART_Init+0x58>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <MX_USART2_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <MX_USART2_UART_Init+0x58>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <MX_USART2_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <MX_USART2_UART_Init+0x58>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <MX_USART2_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <MX_USART2_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	@ (8000a40 <MX_USART2_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <MX_USART2_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_USART2_UART_Init+0x58>)
 8000a2c:	f003 fcec 	bl	8004408 <HAL_UART_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_USART2_UART_Init+0x52>
    {
        Error_Handler();
 8000a36:	f000 fa05 	bl	8000e44 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	20000210 	.word	0x20000210
 8000a44:	40004400 	.word	0x40004400

08000a48 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a4e:	4a15      	ldr	r2, [pc, #84]	@ (8000aa4 <MX_USART3_UART_Init+0x5c>)
 8000a50:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8000a52:	4b13      	ldr	r3, [pc, #76]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b09      	ldr	r3, [pc, #36]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
    huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
    huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <MX_USART3_UART_Init+0x58>)
 8000a8c:	f003 fcbc 	bl	8004408 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_USART3_UART_Init+0x52>
    {
        Error_Handler();
 8000a96:	f000 f9d5 	bl	8000e44 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000298 	.word	0x20000298
 8000aa4:	40004800 	.word	0x40004800

08000aa8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b09a      	sub	sp, #104	@ 0x68
 8000aac:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000abc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
 8000ad8:	615a      	str	r2, [r3, #20]
 8000ada:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	222c      	movs	r2, #44	@ 0x2c
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f005 f902 	bl	8005cec <memset>

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8000ae8:	4b49      	ldr	r3, [pc, #292]	@ (8000c10 <MX_TIM1_Init+0x168>)
 8000aea:	4a4a      	ldr	r2, [pc, #296]	@ (8000c14 <MX_TIM1_Init+0x16c>)
 8000aec:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 80-1;
 8000aee:	4b48      	ldr	r3, [pc, #288]	@ (8000c10 <MX_TIM1_Init+0x168>)
 8000af0:	224f      	movs	r2, #79	@ 0x4f
 8000af2:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af4:	4b46      	ldr	r3, [pc, #280]	@ (8000c10 <MX_TIM1_Init+0x168>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 20000-1;
 8000afa:	4b45      	ldr	r3, [pc, #276]	@ (8000c10 <MX_TIM1_Init+0x168>)
 8000afc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000b00:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b02:	4b43      	ldr	r3, [pc, #268]	@ (8000c10 <MX_TIM1_Init+0x168>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8000b08:	4b41      	ldr	r3, [pc, #260]	@ (8000c10 <MX_TIM1_Init+0x168>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0e:	4b40      	ldr	r3, [pc, #256]	@ (8000c10 <MX_TIM1_Init+0x168>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b14:	483e      	ldr	r0, [pc, #248]	@ (8000c10 <MX_TIM1_Init+0x168>)
 8000b16:	f002 fb99 	bl	800324c <HAL_TIM_Base_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM1_Init+0x7c>
    {
        Error_Handler();
 8000b20:	f000 f990 	bl	8000e44 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b28:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b2a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4837      	ldr	r0, [pc, #220]	@ (8000c10 <MX_TIM1_Init+0x168>)
 8000b32:	f002 fe5d 	bl	80037f0 <HAL_TIM_ConfigClockSource>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM1_Init+0x98>
    {
        Error_Handler();
 8000b3c:	f000 f982 	bl	8000e44 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b40:	4833      	ldr	r0, [pc, #204]	@ (8000c10 <MX_TIM1_Init+0x168>)
 8000b42:	f002 fbda 	bl	80032fa <HAL_TIM_PWM_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM1_Init+0xa8>
    {
        Error_Handler();
 8000b4c:	f000 f97a 	bl	8000e44 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b50:	2300      	movs	r3, #0
 8000b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	653b      	str	r3, [r7, #80]	@ 0x50
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b5c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b60:	4619      	mov	r1, r3
 8000b62:	482b      	ldr	r0, [pc, #172]	@ (8000c10 <MX_TIM1_Init+0x168>)
 8000b64:	f003 fb4a 	bl	80041fc <HAL_TIMEx_MasterConfigSynchronization>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM1_Init+0xca>
    {
        Error_Handler();
 8000b6e:	f000 f969 	bl	8000e44 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b72:	2360      	movs	r3, #96	@ 0x60
 8000b74:	633b      	str	r3, [r7, #48]	@ 0x30
    sConfigOC.Pulse = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	637b      	str	r3, [r7, #52]	@ 0x34
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	643b      	str	r3, [r7, #64]	@ 0x40
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	647b      	str	r3, [r7, #68]	@ 0x44
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b92:	2204      	movs	r2, #4
 8000b94:	4619      	mov	r1, r3
 8000b96:	481e      	ldr	r0, [pc, #120]	@ (8000c10 <MX_TIM1_Init+0x168>)
 8000b98:	f002 fd16 	bl	80035c8 <HAL_TIM_PWM_ConfigChannel>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM1_Init+0xfe>
    {
        Error_Handler();
 8000ba2:	f000 f94f 	bl	8000e44 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ba6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000baa:	2208      	movs	r2, #8
 8000bac:	4619      	mov	r1, r3
 8000bae:	4818      	ldr	r0, [pc, #96]	@ (8000c10 <MX_TIM1_Init+0x168>)
 8000bb0:	f002 fd0a 	bl	80035c8 <HAL_TIM_PWM_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM1_Init+0x116>
    {
        Error_Handler();
 8000bba:	f000 f943 	bl	8000e44 <Error_Handler>
    }
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.DeadTime = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd6:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.BreakFilter = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000be0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
    sBreakDeadTimeConfig.Break2Filter = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	@ 0x28
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4807      	ldr	r0, [pc, #28]	@ (8000c10 <MX_TIM1_Init+0x168>)
 8000bf4:	f003 fb8a 	bl	800430c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM1_Init+0x15a>
    {
        Error_Handler();
 8000bfe:	f000 f921 	bl	8000e44 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */
    HAL_TIM_MspPostInit(&htim1);
 8000c02:	4803      	ldr	r0, [pc, #12]	@ (8000c10 <MX_TIM1_Init+0x168>)
 8000c04:	f000 fb58 	bl	80012b8 <HAL_TIM_MspPostInit>
}
 8000c08:	bf00      	nop
 8000c0a:	3768      	adds	r7, #104	@ 0x68
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000320 	.word	0x20000320
 8000c14:	40012c00 	.word	0x40012c00

08000c18 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08e      	sub	sp, #56	@ 0x38
 8000c1c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000c38:	463b      	mov	r3, r7
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]
 8000c46:	615a      	str	r2, [r3, #20]
 8000c48:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8000c4a:	4b33      	ldr	r3, [pc, #204]	@ (8000d18 <MX_TIM2_Init+0x100>)
 8000c4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c50:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 79;
 8000c52:	4b31      	ldr	r3, [pc, #196]	@ (8000d18 <MX_TIM2_Init+0x100>)
 8000c54:	224f      	movs	r2, #79	@ 0x4f
 8000c56:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c58:	4b2f      	ldr	r3, [pc, #188]	@ (8000d18 <MX_TIM2_Init+0x100>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 1999;
 8000c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d18 <MX_TIM2_Init+0x100>)
 8000c60:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000c64:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c66:	4b2c      	ldr	r3, [pc, #176]	@ (8000d18 <MX_TIM2_Init+0x100>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d18 <MX_TIM2_Init+0x100>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c72:	4829      	ldr	r0, [pc, #164]	@ (8000d18 <MX_TIM2_Init+0x100>)
 8000c74:	f002 faea 	bl	800324c <HAL_TIM_Base_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM2_Init+0x6a>
    {
        Error_Handler();
 8000c7e:	f000 f8e1 	bl	8000e44 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4822      	ldr	r0, [pc, #136]	@ (8000d18 <MX_TIM2_Init+0x100>)
 8000c90:	f002 fdae 	bl	80037f0 <HAL_TIM_ConfigClockSource>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM2_Init+0x86>
    {
        Error_Handler();
 8000c9a:	f000 f8d3 	bl	8000e44 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c9e:	481e      	ldr	r0, [pc, #120]	@ (8000d18 <MX_TIM2_Init+0x100>)
 8000ca0:	f002 fb2b 	bl	80032fa <HAL_TIM_PWM_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM2_Init+0x96>
    {
        Error_Handler();
 8000caa:	f000 f8cb 	bl	8000e44 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4816      	ldr	r0, [pc, #88]	@ (8000d18 <MX_TIM2_Init+0x100>)
 8000cbe:	f003 fa9d 	bl	80041fc <HAL_TIMEx_MasterConfigSynchronization>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0xb4>
    {
        Error_Handler();
 8000cc8:	f000 f8bc 	bl	8000e44 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ccc:	2360      	movs	r3, #96	@ 0x60
 8000cce:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cdc:	463b      	mov	r3, r7
 8000cde:	2208      	movs	r2, #8
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480d      	ldr	r0, [pc, #52]	@ (8000d18 <MX_TIM2_Init+0x100>)
 8000ce4:	f002 fc70 	bl	80035c8 <HAL_TIM_PWM_ConfigChannel>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM2_Init+0xda>
    {
        Error_Handler();
 8000cee:	f000 f8a9 	bl	8000e44 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cf2:	463b      	mov	r3, r7
 8000cf4:	220c      	movs	r2, #12
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <MX_TIM2_Init+0x100>)
 8000cfa:	f002 fc65 	bl	80035c8 <HAL_TIM_PWM_ConfigChannel>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM2_Init+0xf0>
    {
        Error_Handler();
 8000d04:	f000 f89e 	bl	8000e44 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 8000d08:	4803      	ldr	r0, [pc, #12]	@ (8000d18 <MX_TIM2_Init+0x100>)
 8000d0a:	f000 fad5 	bl	80012b8 <HAL_TIM_MspPostInit>
}
 8000d0e:	bf00      	nop
 8000d10:	3738      	adds	r7, #56	@ 0x38
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000036c 	.word	0x2000036c

08000d1c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	@ 0x28
 8000d20:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	60da      	str	r2, [r3, #12]
 8000d30:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d32:	4b36      	ldr	r3, [pc, #216]	@ (8000e0c <MX_GPIO_Init+0xf0>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d36:	4a35      	ldr	r2, [pc, #212]	@ (8000e0c <MX_GPIO_Init+0xf0>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3e:	4b33      	ldr	r3, [pc, #204]	@ (8000e0c <MX_GPIO_Init+0xf0>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4a:	4b30      	ldr	r3, [pc, #192]	@ (8000e0c <MX_GPIO_Init+0xf0>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	4a2f      	ldr	r2, [pc, #188]	@ (8000e0c <MX_GPIO_Init+0xf0>)
 8000d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d56:	4b2d      	ldr	r3, [pc, #180]	@ (8000e0c <MX_GPIO_Init+0xf0>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b2a      	ldr	r3, [pc, #168]	@ (8000e0c <MX_GPIO_Init+0xf0>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	4a29      	ldr	r2, [pc, #164]	@ (8000e0c <MX_GPIO_Init+0xf0>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6e:	4b27      	ldr	r3, [pc, #156]	@ (8000e0c <MX_GPIO_Init+0xf0>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	4b24      	ldr	r3, [pc, #144]	@ (8000e0c <MX_GPIO_Init+0xf0>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	4a23      	ldr	r2, [pc, #140]	@ (8000e0c <MX_GPIO_Init+0xf0>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d86:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <MX_GPIO_Init+0xf0>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2120      	movs	r1, #32
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d9a:	f000 ff1f 	bl	8001bdc <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 714c 	mov.w	r1, #816	@ 0x330
 8000da4:	481a      	ldr	r0, [pc, #104]	@ (8000e10 <MX_GPIO_Init+0xf4>)
 8000da6:	f000 ff19 	bl	8001bdc <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8000daa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000db0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4814      	ldr	r0, [pc, #80]	@ (8000e14 <MX_GPIO_Init+0xf8>)
 8000dc2:	f000 fd61 	bl	8001888 <HAL_GPIO_Init>

    /*Configure GPIO pin : LD2_Pin */
    GPIO_InitStruct.Pin = LD2_Pin;
 8000dc6:	2320      	movs	r3, #32
 8000dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de0:	f000 fd52 	bl	8001888 <HAL_GPIO_Init>

    /*Configure GPIO pins : PB4 PB5 PB8 PB9 */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8000de4:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4804      	ldr	r0, [pc, #16]	@ (8000e10 <MX_GPIO_Init+0xf4>)
 8000dfe:	f000 fd43 	bl	8001888 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8000e02:	bf00      	nop
 8000e04:	3728      	adds	r7, #40	@ 0x28
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	48000400 	.word	0x48000400
 8000e14:	48000800 	.word	0x48000800

08000e18 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    if (huart == &hlpuart1) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a06      	ldr	r2, [pc, #24]	@ (8000e3c <HAL_UART_RxCpltCallback+0x24>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d104      	bne.n	8000e32 <HAL_UART_RxCpltCallback+0x1a>
        // Réactiver la réception immédiatement
        HAL_UART_Receive_IT(&hlpuart1, (uint8_t *)rx_data, sizeof(rx_data));
 8000e28:	221b      	movs	r2, #27
 8000e2a:	4905      	ldr	r1, [pc, #20]	@ (8000e40 <HAL_UART_RxCpltCallback+0x28>)
 8000e2c:	4803      	ldr	r0, [pc, #12]	@ (8000e3c <HAL_UART_RxCpltCallback+0x24>)
 8000e2e:	f003 fbc3 	bl	80045b8 <HAL_UART_Receive_IT>
    }
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000078 	.word	0x20000078
 8000e40:	200003b8 	.word	0x200003b8

08000e44 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <Error_Handler+0x8>

08000e50 <mot_maxonD>:
#include "maxon.h"
#include "main.h"

extern TIM_HandleTypeDef htim2;

void mot_maxonD(int result, int inv) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
    if (inv == 1) {
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d10f      	bne.n	8000e80 <mot_maxonD+0x30>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);    // Direction avant
 8000e60:	2201      	movs	r2, #1
 8000e62:	2110      	movs	r1, #16
 8000e64:	4810      	ldr	r0, [pc, #64]	@ (8000ea8 <mot_maxonD+0x58>)
 8000e66:	f000 feb9 	bl	8001bdc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e70:	480d      	ldr	r0, [pc, #52]	@ (8000ea8 <mot_maxonD+0x58>)
 8000e72:	f000 feb3 	bl	8001bdc <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result);  // Vitesse
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <mot_maxonD+0x5c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	63da      	str	r2, [r3, #60]	@ 0x3c
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  // Direction arrière
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result);  // Vitesse
    }
}
 8000e7e:	e00e      	b.n	8000e9e <mot_maxonD+0x4e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);  // Direction arrière
 8000e80:	2200      	movs	r2, #0
 8000e82:	2110      	movs	r1, #16
 8000e84:	4808      	ldr	r0, [pc, #32]	@ (8000ea8 <mot_maxonD+0x58>)
 8000e86:	f000 fea9 	bl	8001bdc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e90:	4805      	ldr	r0, [pc, #20]	@ (8000ea8 <mot_maxonD+0x58>)
 8000e92:	f000 fea3 	bl	8001bdc <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, result);  // Vitesse
 8000e96:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <mot_maxonD+0x5c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	48000400 	.word	0x48000400
 8000eac:	2000036c 	.word	0x2000036c

08000eb0 <mot_maxonG>:

void mot_maxonG(int result, int inv) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
    if (inv == 1) {
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d10f      	bne.n	8000ee0 <mot_maxonG+0x30>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);    // Direction avant
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2120      	movs	r1, #32
 8000ec4:	4810      	ldr	r0, [pc, #64]	@ (8000f08 <mot_maxonG+0x58>)
 8000ec6:	f000 fe89 	bl	8001bdc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ed0:	480d      	ldr	r0, [pc, #52]	@ (8000f08 <mot_maxonG+0x58>)
 8000ed2:	f000 fe83 	bl	8001bdc <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result);  // Vitesse
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <mot_maxonG+0x5c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	641a      	str	r2, [r3, #64]	@ 0x40
    } else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);  // Direction arrière
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result);  // Vitesse
    }
}
 8000ede:	e00e      	b.n	8000efe <mot_maxonG+0x4e>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);  // Direction arrière
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	4808      	ldr	r0, [pc, #32]	@ (8000f08 <mot_maxonG+0x58>)
 8000ee6:	f000 fe79 	bl	8001bdc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ef0:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <mot_maxonG+0x58>)
 8000ef2:	f000 fe73 	bl	8001bdc <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, result);  // Vitesse
 8000ef6:	4b05      	ldr	r3, [pc, #20]	@ (8000f0c <mot_maxonG+0x5c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	48000400 	.word	0x48000400
 8000f0c:	2000036c 	.word	0x2000036c

08000f10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f22:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	4b09      	ldr	r3, [pc, #36]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f32:	4a08      	ldr	r2, [pc, #32]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f3a:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <HAL_MspInit+0x44>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b0b4      	sub	sp, #208	@ 0xd0
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f70:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f74:	2288      	movs	r2, #136	@ 0x88
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f004 feb7 	bl	8005cec <memset>
  if(huart->Instance==LPUART1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4aac      	ldr	r2, [pc, #688]	@ (8001234 <HAL_UART_MspInit+0x2dc>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d144      	bne.n	8001012 <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000f88:	2320      	movs	r3, #32
 8000f8a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f92:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 fc9c 	bl	80028d4 <HAL_RCCEx_PeriphCLKConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fa2:	f7ff ff4f 	bl	8000e44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000fa6:	4ba4      	ldr	r3, [pc, #656]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 8000fa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000faa:	4aa3      	ldr	r2, [pc, #652]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000fb2:	4ba1      	ldr	r3, [pc, #644]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 8000fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	633b      	str	r3, [r7, #48]	@ 0x30
 8000fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	4b9e      	ldr	r3, [pc, #632]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc2:	4a9d      	ldr	r2, [pc, #628]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fca:	4b9b      	ldr	r3, [pc, #620]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000fee:	2308      	movs	r3, #8
 8000ff0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4890      	ldr	r0, [pc, #576]	@ (800123c <HAL_UART_MspInit+0x2e4>)
 8000ffc:	f000 fc44 	bl	8001888 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2046      	movs	r0, #70	@ 0x46
 8001006:	f000 fb8a 	bl	800171e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800100a:	2046      	movs	r0, #70	@ 0x46
 800100c:	f000 fba3 	bl	8001756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001010:	e10c      	b.n	800122c <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==UART4)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a8a      	ldr	r2, [pc, #552]	@ (8001240 <HAL_UART_MspInit+0x2e8>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d144      	bne.n	80010a6 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800101c:	2308      	movs	r3, #8
 800101e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001020:	2300      	movs	r3, #0
 8001022:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001028:	4618      	mov	r0, r3
 800102a:	f001 fc53 	bl	80028d4 <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001034:	f7ff ff06 	bl	8000e44 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8001038:	4b7f      	ldr	r3, [pc, #508]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 800103a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103c:	4a7e      	ldr	r2, [pc, #504]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 800103e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001042:	6593      	str	r3, [r2, #88]	@ 0x58
 8001044:	4b7c      	ldr	r3, [pc, #496]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 8001046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001048:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800104e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b79      	ldr	r3, [pc, #484]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001054:	4a78      	ldr	r2, [pc, #480]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105c:	4b76      	ldr	r3, [pc, #472]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
 8001066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001068:	2303      	movs	r3, #3
 800106a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107a:	2303      	movs	r3, #3
 800107c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001080:	2308      	movs	r3, #8
 8001082:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800108a:	4619      	mov	r1, r3
 800108c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001090:	f000 fbfa 	bl	8001888 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	2034      	movs	r0, #52	@ 0x34
 800109a:	f000 fb40 	bl	800171e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800109e:	2034      	movs	r0, #52	@ 0x34
 80010a0:	f000 fb59 	bl	8001756 <HAL_NVIC_EnableIRQ>
}
 80010a4:	e0c2      	b.n	800122c <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a66      	ldr	r2, [pc, #408]	@ (8001244 <HAL_UART_MspInit+0x2ec>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d13b      	bne.n	8001128 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010b4:	2300      	movs	r3, #0
 80010b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 fc09 	bl	80028d4 <HAL_RCCEx_PeriphCLKConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_UART_MspInit+0x174>
      Error_Handler();
 80010c8:	f7ff febc 	bl	8000e44 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80010cc:	4b5a      	ldr	r3, [pc, #360]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 80010ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d0:	4a59      	ldr	r2, [pc, #356]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 80010d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80010d8:	4b57      	ldr	r3, [pc, #348]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 80010da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010e0:	623b      	str	r3, [r7, #32]
 80010e2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e4:	4b54      	ldr	r3, [pc, #336]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e8:	4a53      	ldr	r2, [pc, #332]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 80010ea:	f043 0302 	orr.w	r3, r3, #2
 80010ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f0:	4b51      	ldr	r3, [pc, #324]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 80010f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010fc:	23c0      	movs	r3, #192	@ 0xc0
 80010fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001114:	2307      	movs	r3, #7
 8001116:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800111e:	4619      	mov	r1, r3
 8001120:	4849      	ldr	r0, [pc, #292]	@ (8001248 <HAL_UART_MspInit+0x2f0>)
 8001122:	f000 fbb1 	bl	8001888 <HAL_GPIO_Init>
}
 8001126:	e081      	b.n	800122c <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART2)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a47      	ldr	r2, [pc, #284]	@ (800124c <HAL_UART_MspInit+0x2f4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d13c      	bne.n	80011ac <HAL_UART_MspInit+0x254>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001132:	2302      	movs	r3, #2
 8001134:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001136:	2300      	movs	r3, #0
 8001138:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800113e:	4618      	mov	r0, r3
 8001140:	f001 fbc8 	bl	80028d4 <HAL_RCCEx_PeriphCLKConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 800114a:	f7ff fe7b 	bl	8000e44 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800114e:	4b3a      	ldr	r3, [pc, #232]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001152:	4a39      	ldr	r2, [pc, #228]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 8001154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001158:	6593      	str	r3, [r2, #88]	@ 0x58
 800115a:	4b37      	ldr	r3, [pc, #220]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001162:	61bb      	str	r3, [r7, #24]
 8001164:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b34      	ldr	r3, [pc, #208]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116a:	4a33      	ldr	r2, [pc, #204]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001172:	4b31      	ldr	r3, [pc, #196]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 800117e:	230c      	movs	r3, #12
 8001180:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001190:	2303      	movs	r3, #3
 8001192:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001196:	2307      	movs	r3, #7
 8001198:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a6:	f000 fb6f 	bl	8001888 <HAL_GPIO_Init>
}
 80011aa:	e03f      	b.n	800122c <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART3)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a27      	ldr	r2, [pc, #156]	@ (8001250 <HAL_UART_MspInit+0x2f8>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d13a      	bne.n	800122c <HAL_UART_MspInit+0x2d4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011b6:	2304      	movs	r3, #4
 80011b8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fb86 	bl	80028d4 <HAL_RCCEx_PeriphCLKConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_UART_MspInit+0x27a>
      Error_Handler();
 80011ce:	f7ff fe39 	bl	8000e44 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d6:	4a18      	ldr	r2, [pc, #96]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 80011d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011de:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	4a12      	ldr	r2, [pc, #72]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f6:	4b10      	ldr	r3, [pc, #64]	@ (8001238 <HAL_UART_MspInit+0x2e0>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001202:	2330      	movs	r3, #48	@ 0x30
 8001204:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800121a:	2307      	movs	r3, #7
 800121c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001220:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001224:	4619      	mov	r1, r3
 8001226:	4805      	ldr	r0, [pc, #20]	@ (800123c <HAL_UART_MspInit+0x2e4>)
 8001228:	f000 fb2e 	bl	8001888 <HAL_GPIO_Init>
}
 800122c:	bf00      	nop
 800122e:	37d0      	adds	r7, #208	@ 0xd0
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40008000 	.word	0x40008000
 8001238:	40021000 	.word	0x40021000
 800123c:	48000800 	.word	0x48000800
 8001240:	40004c00 	.word	0x40004c00
 8001244:	40013800 	.word	0x40013800
 8001248:	48000400 	.word	0x48000400
 800124c:	40004400 	.word	0x40004400
 8001250:	40004800 	.word	0x40004800

08001254 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a13      	ldr	r2, [pc, #76]	@ (80012b0 <HAL_TIM_Base_MspInit+0x5c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d10c      	bne.n	8001280 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001266:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <HAL_TIM_Base_MspInit+0x60>)
 8001268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800126a:	4a12      	ldr	r2, [pc, #72]	@ (80012b4 <HAL_TIM_Base_MspInit+0x60>)
 800126c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001270:	6613      	str	r3, [r2, #96]	@ 0x60
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <HAL_TIM_Base_MspInit+0x60>)
 8001274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001276:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800127e:	e010      	b.n	80012a2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001288:	d10b      	bne.n	80012a2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800128a:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <HAL_TIM_Base_MspInit+0x60>)
 800128c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128e:	4a09      	ldr	r2, [pc, #36]	@ (80012b4 <HAL_TIM_Base_MspInit+0x60>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6593      	str	r3, [r2, #88]	@ 0x58
 8001296:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <HAL_TIM_Base_MspInit+0x60>)
 8001298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40012c00 	.word	0x40012c00
 80012b4:	40021000 	.word	0x40021000

080012b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	@ 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a23      	ldr	r2, [pc, #140]	@ (8001364 <HAL_TIM_MspPostInit+0xac>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d11e      	bne.n	8001318 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	4b23      	ldr	r3, [pc, #140]	@ (8001368 <HAL_TIM_MspPostInit+0xb0>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	4a22      	ldr	r2, [pc, #136]	@ (8001368 <HAL_TIM_MspPostInit+0xb0>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e6:	4b20      	ldr	r3, [pc, #128]	@ (8001368 <HAL_TIM_MspPostInit+0xb0>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001304:	2301      	movs	r3, #1
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001312:	f000 fab9 	bl	8001888 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001316:	e021      	b.n	800135c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001320:	d11c      	bne.n	800135c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <HAL_TIM_MspPostInit+0xb0>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001326:	4a10      	ldr	r2, [pc, #64]	@ (8001368 <HAL_TIM_MspPostInit+0xb0>)
 8001328:	f043 0302 	orr.w	r3, r3, #2
 800132c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <HAL_TIM_MspPostInit+0xb0>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800133a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800133e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800134c:	2301      	movs	r3, #1
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	4619      	mov	r1, r3
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <HAL_TIM_MspPostInit+0xb4>)
 8001358:	f000 fa96 	bl	8001888 <HAL_GPIO_Init>
}
 800135c:	bf00      	nop
 800135e:	3728      	adds	r7, #40	@ 0x28
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40012c00 	.word	0x40012c00
 8001368:	40021000 	.word	0x40021000
 800136c:	48000400 	.word	0x48000400

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <NMI_Handler+0x4>

08001378 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <HardFault_Handler+0x4>

08001380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <MemManage_Handler+0x4>

08001388 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <UsageFault_Handler+0x4>

08001398 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c6:	f000 f8af 	bl	8001528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80013d4:	4802      	ldr	r0, [pc, #8]	@ (80013e0 <UART4_IRQHandler+0x10>)
 80013d6:	f003 f93b 	bl	8004650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000100 	.word	0x20000100

080013e4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80013e8:	4802      	ldr	r0, [pc, #8]	@ (80013f4 <LPUART1_IRQHandler+0x10>)
 80013ea:	f003 f931 	bl	8004650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000078 	.word	0x20000078

080013f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <SystemInit+0x20>)
 80013fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001402:	4a05      	ldr	r2, [pc, #20]	@ (8001418 <SystemInit+0x20>)
 8001404:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001408:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800141c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001454 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001420:	f7ff ffea 	bl	80013f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001424:	480c      	ldr	r0, [pc, #48]	@ (8001458 <LoopForever+0x6>)
  ldr r1, =_edata
 8001426:	490d      	ldr	r1, [pc, #52]	@ (800145c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001428:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <LoopForever+0xe>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800142c:	e002      	b.n	8001434 <LoopCopyDataInit>

0800142e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001432:	3304      	adds	r3, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001438:	d3f9      	bcc.n	800142e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800143c:	4c0a      	ldr	r4, [pc, #40]	@ (8001468 <LoopForever+0x16>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001440:	e001      	b.n	8001446 <LoopFillZerobss>

08001442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001444:	3204      	adds	r2, #4

08001446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001448:	d3fb      	bcc.n	8001442 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800144a:	f004 fc5d 	bl	8005d08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800144e:	f7ff f833 	bl	80004b8 <main>

08001452 <LoopForever>:

LoopForever:
    b LoopForever
 8001452:	e7fe      	b.n	8001452 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001454:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800145c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001460:	08005ec4 	.word	0x08005ec4
  ldr r2, =_sbss
 8001464:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001468:	20000510 	.word	0x20000510

0800146c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800146c:	e7fe      	b.n	800146c <ADC1_2_IRQHandler>
	...

08001470 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <HAL_Init+0x3c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a0b      	ldr	r2, [pc, #44]	@ (80014ac <HAL_Init+0x3c>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001484:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001486:	2003      	movs	r0, #3
 8001488:	f000 f93e 	bl	8001708 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800148c:	2000      	movs	r0, #0
 800148e:	f000 f80f 	bl	80014b0 <HAL_InitTick>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	71fb      	strb	r3, [r7, #7]
 800149c:	e001      	b.n	80014a2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800149e:	f7ff fd37 	bl	8000f10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014a2:	79fb      	ldrb	r3, [r7, #7]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40022000 	.word	0x40022000

080014b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014bc:	4b17      	ldr	r3, [pc, #92]	@ (800151c <HAL_InitTick+0x6c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d023      	beq.n	800150c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014c4:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <HAL_InitTick+0x70>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b14      	ldr	r3, [pc, #80]	@ (800151c <HAL_InitTick+0x6c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f949 	bl	8001772 <HAL_SYSTICK_Config>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10f      	bne.n	8001506 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b0f      	cmp	r3, #15
 80014ea:	d809      	bhi.n	8001500 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ec:	2200      	movs	r2, #0
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f000 f913 	bl	800171e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001524 <HAL_InitTick+0x74>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e007      	b.n	8001510 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e004      	b.n	8001510 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e001      	b.n	8001510 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001510:	7bfb      	ldrb	r3, [r7, #15]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000008 	.word	0x20000008
 8001520:	20000000 	.word	0x20000000
 8001524:	20000004 	.word	0x20000004

08001528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_IncTick+0x20>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_IncTick+0x24>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	4a04      	ldr	r2, [pc, #16]	@ (800154c <HAL_IncTick+0x24>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008
 800154c:	200003d4 	.word	0x200003d4

08001550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <HAL_GetTick+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	200003d4 	.word	0x200003d4

08001568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001584:	4013      	ands	r3, r2
 8001586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001590:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159a:	4a04      	ldr	r2, [pc, #16]	@ (80015ac <__NVIC_SetPriorityGrouping+0x44>)
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	60d3      	str	r3, [r2, #12]
}
 80015a0:	bf00      	nop
 80015a2:	3714      	adds	r7, #20
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	db0b      	blt.n	80015f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f003 021f 	and.w	r2, r3, #31
 80015e4:	4907      	ldr	r1, [pc, #28]	@ (8001604 <__NVIC_EnableIRQ+0x38>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	2001      	movs	r0, #1
 80015ee:	fa00 f202 	lsl.w	r2, r0, r2
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000e100 	.word	0xe000e100

08001608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db0a      	blt.n	8001632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	490c      	ldr	r1, [pc, #48]	@ (8001654 <__NVIC_SetPriority+0x4c>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	0112      	lsls	r2, r2, #4
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	440b      	add	r3, r1
 800162c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001630:	e00a      	b.n	8001648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4908      	ldr	r1, [pc, #32]	@ (8001658 <__NVIC_SetPriority+0x50>)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	3b04      	subs	r3, #4
 8001640:	0112      	lsls	r2, r2, #4
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	440b      	add	r3, r1
 8001646:	761a      	strb	r2, [r3, #24]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	@ 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f1c3 0307 	rsb	r3, r3, #7
 8001676:	2b04      	cmp	r3, #4
 8001678:	bf28      	it	cs
 800167a:	2304      	movcs	r3, #4
 800167c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3304      	adds	r3, #4
 8001682:	2b06      	cmp	r3, #6
 8001684:	d902      	bls.n	800168c <NVIC_EncodePriority+0x30>
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3b03      	subs	r3, #3
 800168a:	e000      	b.n	800168e <NVIC_EncodePriority+0x32>
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	f04f 32ff 	mov.w	r2, #4294967295
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	401a      	ands	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	4313      	orrs	r3, r2
         );
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3724      	adds	r7, #36	@ 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016d4:	d301      	bcc.n	80016da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00f      	b.n	80016fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <SysTick_Config+0x40>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e2:	210f      	movs	r1, #15
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f7ff ff8e 	bl	8001608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <SysTick_Config+0x40>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f2:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <SysTick_Config+0x40>)
 80016f4:	2207      	movs	r2, #7
 80016f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	e000e010 	.word	0xe000e010

08001708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff29 	bl	8001568 <__NVIC_SetPriorityGrouping>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001730:	f7ff ff3e 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 8001734:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	6978      	ldr	r0, [r7, #20]
 800173c:	f7ff ff8e 	bl	800165c <NVIC_EncodePriority>
 8001740:	4602      	mov	r2, r0
 8001742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff5d 	bl	8001608 <__NVIC_SetPriority>
}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff31 	bl	80015cc <__NVIC_EnableIRQ>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffa2 	bl	80016c4 <SysTick_Config>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800178a:	b480      	push	{r7}
 800178c:	b085      	sub	sp, #20
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d008      	beq.n	80017b4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2204      	movs	r2, #4
 80017a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e022      	b.n	80017fa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 020e 	bic.w	r2, r2, #14
 80017c2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0201 	bic.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d8:	f003 021c 	and.w	r2, r3, #28
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e0:	2101      	movs	r1, #1
 80017e2:	fa01 f202 	lsl.w	r2, r1, r2
 80017e6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d005      	beq.n	800182a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2204      	movs	r2, #4
 8001822:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e029      	b.n	800187e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 020e 	bic.w	r2, r2, #14
 8001838:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0201 	bic.w	r2, r2, #1
 8001848:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184e:	f003 021c 	and.w	r2, r3, #28
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	2101      	movs	r1, #1
 8001858:	fa01 f202 	lsl.w	r2, r1, r2
 800185c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	4798      	blx	r3
    }
  }
  return status;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3710      	adds	r7, #16
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001896:	e17f      	b.n	8001b98 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	2101      	movs	r1, #1
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	fa01 f303 	lsl.w	r3, r1, r3
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8171 	beq.w	8001b92 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d005      	beq.n	80018c8 <HAL_GPIO_Init+0x40>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d130      	bne.n	800192a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4013      	ands	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018fe:	2201      	movs	r2, #1
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	091b      	lsrs	r3, r3, #4
 8001914:	f003 0201 	and.w	r2, r3, #1
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 0303 	and.w	r3, r3, #3
 8001932:	2b03      	cmp	r3, #3
 8001934:	d118      	bne.n	8001968 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800193c:	2201      	movs	r2, #1
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	08db      	lsrs	r3, r3, #3
 8001952:	f003 0201 	and.w	r2, r3, #1
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	2b03      	cmp	r3, #3
 8001972:	d017      	beq.n	80019a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d123      	bne.n	80019f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	08da      	lsrs	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3208      	adds	r2, #8
 80019b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	220f      	movs	r2, #15
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	691a      	ldr	r2, [r3, #16]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	08da      	lsrs	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3208      	adds	r2, #8
 80019f2:	6939      	ldr	r1, [r7, #16]
 80019f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0203 	and.w	r2, r3, #3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80ac 	beq.w	8001b92 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3a:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb8 <HAL_GPIO_Init+0x330>)
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3e:	4a5e      	ldr	r2, [pc, #376]	@ (8001bb8 <HAL_GPIO_Init+0x330>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a46:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb8 <HAL_GPIO_Init+0x330>)
 8001a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a52:	4a5a      	ldr	r2, [pc, #360]	@ (8001bbc <HAL_GPIO_Init+0x334>)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	089b      	lsrs	r3, r3, #2
 8001a58:	3302      	adds	r3, #2
 8001a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	220f      	movs	r2, #15
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a7c:	d025      	beq.n	8001aca <HAL_GPIO_Init+0x242>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4f      	ldr	r2, [pc, #316]	@ (8001bc0 <HAL_GPIO_Init+0x338>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d01f      	beq.n	8001ac6 <HAL_GPIO_Init+0x23e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a4e      	ldr	r2, [pc, #312]	@ (8001bc4 <HAL_GPIO_Init+0x33c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d019      	beq.n	8001ac2 <HAL_GPIO_Init+0x23a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4d      	ldr	r2, [pc, #308]	@ (8001bc8 <HAL_GPIO_Init+0x340>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d013      	beq.n	8001abe <HAL_GPIO_Init+0x236>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4c      	ldr	r2, [pc, #304]	@ (8001bcc <HAL_GPIO_Init+0x344>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00d      	beq.n	8001aba <HAL_GPIO_Init+0x232>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4b      	ldr	r2, [pc, #300]	@ (8001bd0 <HAL_GPIO_Init+0x348>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d007      	beq.n	8001ab6 <HAL_GPIO_Init+0x22e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4a      	ldr	r2, [pc, #296]	@ (8001bd4 <HAL_GPIO_Init+0x34c>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d101      	bne.n	8001ab2 <HAL_GPIO_Init+0x22a>
 8001aae:	2306      	movs	r3, #6
 8001ab0:	e00c      	b.n	8001acc <HAL_GPIO_Init+0x244>
 8001ab2:	2307      	movs	r3, #7
 8001ab4:	e00a      	b.n	8001acc <HAL_GPIO_Init+0x244>
 8001ab6:	2305      	movs	r3, #5
 8001ab8:	e008      	b.n	8001acc <HAL_GPIO_Init+0x244>
 8001aba:	2304      	movs	r3, #4
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x244>
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e004      	b.n	8001acc <HAL_GPIO_Init+0x244>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_Init+0x244>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_GPIO_Init+0x244>
 8001aca:	2300      	movs	r3, #0
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	f002 0203 	and.w	r2, r2, #3
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	4093      	lsls	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001adc:	4937      	ldr	r1, [pc, #220]	@ (8001bbc <HAL_GPIO_Init+0x334>)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aea:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd8 <HAL_GPIO_Init+0x350>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b0e:	4a32      	ldr	r2, [pc, #200]	@ (8001bd8 <HAL_GPIO_Init+0x350>)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b14:	4b30      	ldr	r3, [pc, #192]	@ (8001bd8 <HAL_GPIO_Init+0x350>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b38:	4a27      	ldr	r2, [pc, #156]	@ (8001bd8 <HAL_GPIO_Init+0x350>)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b3e:	4b26      	ldr	r3, [pc, #152]	@ (8001bd8 <HAL_GPIO_Init+0x350>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b62:	4a1d      	ldr	r2, [pc, #116]	@ (8001bd8 <HAL_GPIO_Init+0x350>)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b68:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <HAL_GPIO_Init+0x350>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b8c:	4a12      	ldr	r2, [pc, #72]	@ (8001bd8 <HAL_GPIO_Init+0x350>)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f47f ae78 	bne.w	8001898 <HAL_GPIO_Init+0x10>
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	371c      	adds	r7, #28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010000 	.word	0x40010000
 8001bc0:	48000400 	.word	0x48000400
 8001bc4:	48000800 	.word	0x48000800
 8001bc8:	48000c00 	.word	0x48000c00
 8001bcc:	48001000 	.word	0x48001000
 8001bd0:	48001400 	.word	0x48001400
 8001bd4:	48001800 	.word	0x48001800
 8001bd8:	40010400 	.word	0x40010400

08001bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
 8001be8:	4613      	mov	r3, r2
 8001bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bec:	787b      	ldrb	r3, [r7, #1]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bf2:	887a      	ldrh	r2, [r7, #2]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bf8:	e002      	b.n	8001c00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bfa:	887a      	ldrh	r2, [r7, #2]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c10:	4b04      	ldr	r3, [pc, #16]	@ (8001c24 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40007000 	.word	0x40007000

08001c28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c36:	d130      	bne.n	8001c9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c38:	4b23      	ldr	r3, [pc, #140]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c44:	d038      	beq.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c46:	4b20      	ldr	r3, [pc, #128]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c56:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2232      	movs	r2, #50	@ 0x32
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c62:	fba2 2303 	umull	r2, r3, r2, r3
 8001c66:	0c9b      	lsrs	r3, r3, #18
 8001c68:	3301      	adds	r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c6c:	e002      	b.n	8001c74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c74:	4b14      	ldr	r3, [pc, #80]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c80:	d102      	bne.n	8001c88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f2      	bne.n	8001c6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c88:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c94:	d110      	bne.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e00f      	b.n	8001cba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ca6:	d007      	beq.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ca8:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cb0:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cb6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	431bde83 	.word	0x431bde83

08001cd4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e3ca      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ce6:	4b97      	ldr	r3, [pc, #604]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf0:	4b94      	ldr	r3, [pc, #592]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 80e4 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <HAL_RCC_OscConfig+0x4a>
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b0c      	cmp	r3, #12
 8001d12:	f040 808b 	bne.w	8001e2c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	f040 8087 	bne.w	8001e2c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d1e:	4b89      	ldr	r3, [pc, #548]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_RCC_OscConfig+0x62>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e3a2      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1a      	ldr	r2, [r3, #32]
 8001d3a:	4b82      	ldr	r3, [pc, #520]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d004      	beq.n	8001d50 <HAL_RCC_OscConfig+0x7c>
 8001d46:	4b7f      	ldr	r3, [pc, #508]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d4e:	e005      	b.n	8001d5c <HAL_RCC_OscConfig+0x88>
 8001d50:	4b7c      	ldr	r3, [pc, #496]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d56:	091b      	lsrs	r3, r3, #4
 8001d58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d223      	bcs.n	8001da8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f000 fd55 	bl	8002814 <RCC_SetFlashLatencyFromMSIRange>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e383      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d74:	4b73      	ldr	r3, [pc, #460]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a72      	ldr	r2, [pc, #456]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d7a:	f043 0308 	orr.w	r3, r3, #8
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b70      	ldr	r3, [pc, #448]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	496d      	ldr	r1, [pc, #436]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d92:	4b6c      	ldr	r3, [pc, #432]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	4968      	ldr	r1, [pc, #416]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]
 8001da6:	e025      	b.n	8001df4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001da8:	4b66      	ldr	r3, [pc, #408]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a65      	ldr	r2, [pc, #404]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001dae:	f043 0308 	orr.w	r3, r3, #8
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b63      	ldr	r3, [pc, #396]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4960      	ldr	r1, [pc, #384]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dc6:	4b5f      	ldr	r3, [pc, #380]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	021b      	lsls	r3, r3, #8
 8001dd4:	495b      	ldr	r1, [pc, #364]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 fd15 	bl	8002814 <RCC_SetFlashLatencyFromMSIRange>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e343      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001df4:	f000 fc4a 	bl	800268c <HAL_RCC_GetSysClockFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b52      	ldr	r3, [pc, #328]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	091b      	lsrs	r3, r3, #4
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	4950      	ldr	r1, [pc, #320]	@ (8001f48 <HAL_RCC_OscConfig+0x274>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	4a4e      	ldr	r2, [pc, #312]	@ (8001f4c <HAL_RCC_OscConfig+0x278>)
 8001e12:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e14:	4b4e      	ldr	r3, [pc, #312]	@ (8001f50 <HAL_RCC_OscConfig+0x27c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fb49 	bl	80014b0 <HAL_InitTick>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d052      	beq.n	8001ece <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	e327      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d032      	beq.n	8001e9a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e34:	4b43      	ldr	r3, [pc, #268]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a42      	ldr	r2, [pc, #264]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e40:	f7ff fb86 	bl	8001550 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e48:	f7ff fb82 	bl	8001550 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e310      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e66:	4b37      	ldr	r3, [pc, #220]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a36      	ldr	r2, [pc, #216]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	f043 0308 	orr.w	r3, r3, #8
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	4b34      	ldr	r3, [pc, #208]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	4931      	ldr	r1, [pc, #196]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e84:	4b2f      	ldr	r3, [pc, #188]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	492c      	ldr	r1, [pc, #176]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	604b      	str	r3, [r1, #4]
 8001e98:	e01a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a29      	ldr	r2, [pc, #164]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ea6:	f7ff fb53 	bl	8001550 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eae:	f7ff fb4f 	bl	8001550 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e2dd      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ec0:	4b20      	ldr	r3, [pc, #128]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f0      	bne.n	8001eae <HAL_RCC_OscConfig+0x1da>
 8001ecc:	e000      	b.n	8001ed0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ece:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d074      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d005      	beq.n	8001eee <HAL_RCC_OscConfig+0x21a>
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	2b0c      	cmp	r3, #12
 8001ee6:	d10e      	bne.n	8001f06 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d10b      	bne.n	8001f06 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d064      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x2f0>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d160      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e2ba      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f0e:	d106      	bne.n	8001f1e <HAL_RCC_OscConfig+0x24a>
 8001f10:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0b      	ldr	r2, [pc, #44]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	e026      	b.n	8001f6c <HAL_RCC_OscConfig+0x298>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f26:	d115      	bne.n	8001f54 <HAL_RCC_OscConfig+0x280>
 8001f28:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a05      	ldr	r2, [pc, #20]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b03      	ldr	r3, [pc, #12]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a02      	ldr	r2, [pc, #8]	@ (8001f44 <HAL_RCC_OscConfig+0x270>)
 8001f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	e014      	b.n	8001f6c <HAL_RCC_OscConfig+0x298>
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000
 8001f48:	08005d68 	.word	0x08005d68
 8001f4c:	20000000 	.word	0x20000000
 8001f50:	20000004 	.word	0x20000004
 8001f54:	4ba0      	ldr	r3, [pc, #640]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a9f      	ldr	r2, [pc, #636]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4b9d      	ldr	r3, [pc, #628]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a9c      	ldr	r2, [pc, #624]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d013      	beq.n	8001f9c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7ff faec 	bl	8001550 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f7c:	f7ff fae8 	bl	8001550 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b64      	cmp	r3, #100	@ 0x64
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e276      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f8e:	4b92      	ldr	r3, [pc, #584]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0x2a8>
 8001f9a:	e014      	b.n	8001fc6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fad8 	bl	8001550 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff fad4 	bl	8001550 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	@ 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e262      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fb6:	4b88      	ldr	r3, [pc, #544]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x2d0>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d060      	beq.n	8002094 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x310>
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b0c      	cmp	r3, #12
 8001fdc:	d119      	bne.n	8002012 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d116      	bne.n	8002012 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fe4:	4b7c      	ldr	r3, [pc, #496]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_OscConfig+0x328>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e23f      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffc:	4b76      	ldr	r3, [pc, #472]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	061b      	lsls	r3, r3, #24
 800200a:	4973      	ldr	r1, [pc, #460]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002010:	e040      	b.n	8002094 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d023      	beq.n	8002062 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800201a:	4b6f      	ldr	r3, [pc, #444]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6e      	ldr	r2, [pc, #440]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 8002020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002026:	f7ff fa93 	bl	8001550 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202e:	f7ff fa8f 	bl	8001550 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e21d      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002040:	4b65      	ldr	r3, [pc, #404]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204c:	4b62      	ldr	r3, [pc, #392]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	061b      	lsls	r3, r3, #24
 800205a:	495f      	ldr	r1, [pc, #380]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
 8002060:	e018      	b.n	8002094 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002062:	4b5d      	ldr	r3, [pc, #372]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a5c      	ldr	r2, [pc, #368]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 8002068:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800206c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206e:	f7ff fa6f 	bl	8001550 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002076:	f7ff fa6b 	bl	8001550 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e1f9      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002088:	4b53      	ldr	r3, [pc, #332]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1f0      	bne.n	8002076 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d03c      	beq.n	800211a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d01c      	beq.n	80020e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a8:	4b4b      	ldr	r3, [pc, #300]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 80020aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020ae:	4a4a      	ldr	r2, [pc, #296]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b8:	f7ff fa4a 	bl	8001550 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c0:	f7ff fa46 	bl	8001550 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e1d4      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020d2:	4b41      	ldr	r3, [pc, #260]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 80020d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0ef      	beq.n	80020c0 <HAL_RCC_OscConfig+0x3ec>
 80020e0:	e01b      	b.n	800211a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020e2:	4b3d      	ldr	r3, [pc, #244]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 80020e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020e8:	4a3b      	ldr	r2, [pc, #236]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 80020ea:	f023 0301 	bic.w	r3, r3, #1
 80020ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f2:	f7ff fa2d 	bl	8001550 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fa:	f7ff fa29 	bl	8001550 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e1b7      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800210c:	4b32      	ldr	r3, [pc, #200]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 800210e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1ef      	bne.n	80020fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80a6 	beq.w	8002274 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002128:	2300      	movs	r3, #0
 800212a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800212c:	4b2a      	ldr	r3, [pc, #168]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 800212e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10d      	bne.n	8002154 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002138:	4b27      	ldr	r3, [pc, #156]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213c:	4a26      	ldr	r2, [pc, #152]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 800213e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002142:	6593      	str	r3, [r2, #88]	@ 0x58
 8002144:	4b24      	ldr	r3, [pc, #144]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002150:	2301      	movs	r3, #1
 8002152:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002154:	4b21      	ldr	r3, [pc, #132]	@ (80021dc <HAL_RCC_OscConfig+0x508>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d118      	bne.n	8002192 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002160:	4b1e      	ldr	r3, [pc, #120]	@ (80021dc <HAL_RCC_OscConfig+0x508>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1d      	ldr	r2, [pc, #116]	@ (80021dc <HAL_RCC_OscConfig+0x508>)
 8002166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800216c:	f7ff f9f0 	bl	8001550 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002174:	f7ff f9ec 	bl	8001550 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e17a      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002186:	4b15      	ldr	r3, [pc, #84]	@ (80021dc <HAL_RCC_OscConfig+0x508>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d108      	bne.n	80021ac <HAL_RCC_OscConfig+0x4d8>
 800219a:	4b0f      	ldr	r3, [pc, #60]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 800219c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a0:	4a0d      	ldr	r2, [pc, #52]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021aa:	e029      	b.n	8002200 <HAL_RCC_OscConfig+0x52c>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d115      	bne.n	80021e0 <HAL_RCC_OscConfig+0x50c>
 80021b4:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 80021b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ba:	4a07      	ldr	r2, [pc, #28]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021c4:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 80021c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021ca:	4a03      	ldr	r2, [pc, #12]	@ (80021d8 <HAL_RCC_OscConfig+0x504>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021d4:	e014      	b.n	8002200 <HAL_RCC_OscConfig+0x52c>
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40007000 	.word	0x40007000
 80021e0:	4b9c      	ldr	r3, [pc, #624]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e6:	4a9b      	ldr	r2, [pc, #620]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021f0:	4b98      	ldr	r3, [pc, #608]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f6:	4a97      	ldr	r2, [pc, #604]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 80021f8:	f023 0304 	bic.w	r3, r3, #4
 80021fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d016      	beq.n	8002236 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7ff f9a2 	bl	8001550 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800220e:	e00a      	b.n	8002226 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002210:	f7ff f99e 	bl	8001550 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e12a      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002226:	4b8b      	ldr	r3, [pc, #556]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0ed      	beq.n	8002210 <HAL_RCC_OscConfig+0x53c>
 8002234:	e015      	b.n	8002262 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002236:	f7ff f98b 	bl	8001550 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7ff f987 	bl	8001550 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e113      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002254:	4b7f      	ldr	r3, [pc, #508]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1ed      	bne.n	800223e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002262:	7ffb      	ldrb	r3, [r7, #31]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002268:	4b7a      	ldr	r3, [pc, #488]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226c:	4a79      	ldr	r2, [pc, #484]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 800226e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002272:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80fe 	beq.w	800247a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002282:	2b02      	cmp	r3, #2
 8002284:	f040 80d0 	bne.w	8002428 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002288:	4b72      	ldr	r3, [pc, #456]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f003 0203 	and.w	r2, r3, #3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002298:	429a      	cmp	r2, r3
 800229a:	d130      	bne.n	80022fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	3b01      	subs	r3, #1
 80022a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d127      	bne.n	80022fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d11f      	bne.n	80022fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022c8:	2a07      	cmp	r2, #7
 80022ca:	bf14      	ite	ne
 80022cc:	2201      	movne	r2, #1
 80022ce:	2200      	moveq	r2, #0
 80022d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d113      	bne.n	80022fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e0:	085b      	lsrs	r3, r3, #1
 80022e2:	3b01      	subs	r3, #1
 80022e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d109      	bne.n	80022fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f4:	085b      	lsrs	r3, r3, #1
 80022f6:	3b01      	subs	r3, #1
 80022f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d06e      	beq.n	80023dc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	2b0c      	cmp	r3, #12
 8002302:	d069      	beq.n	80023d8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002304:	4b53      	ldr	r3, [pc, #332]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d105      	bne.n	800231c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002310:	4b50      	ldr	r3, [pc, #320]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0ad      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002320:	4b4c      	ldr	r3, [pc, #304]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a4b      	ldr	r2, [pc, #300]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 8002326:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800232a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800232c:	f7ff f910 	bl	8001550 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002334:	f7ff f90c 	bl	8001550 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e09a      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002346:	4b43      	ldr	r3, [pc, #268]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002352:	4b40      	ldr	r3, [pc, #256]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	4b40      	ldr	r3, [pc, #256]	@ (8002458 <HAL_RCC_OscConfig+0x784>)
 8002358:	4013      	ands	r3, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002362:	3a01      	subs	r2, #1
 8002364:	0112      	lsls	r2, r2, #4
 8002366:	4311      	orrs	r1, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800236c:	0212      	lsls	r2, r2, #8
 800236e:	4311      	orrs	r1, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002374:	0852      	lsrs	r2, r2, #1
 8002376:	3a01      	subs	r2, #1
 8002378:	0552      	lsls	r2, r2, #21
 800237a:	4311      	orrs	r1, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002380:	0852      	lsrs	r2, r2, #1
 8002382:	3a01      	subs	r2, #1
 8002384:	0652      	lsls	r2, r2, #25
 8002386:	4311      	orrs	r1, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800238c:	0912      	lsrs	r2, r2, #4
 800238e:	0452      	lsls	r2, r2, #17
 8002390:	430a      	orrs	r2, r1
 8002392:	4930      	ldr	r1, [pc, #192]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 8002394:	4313      	orrs	r3, r2
 8002396:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002398:	4b2e      	ldr	r3, [pc, #184]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a2d      	ldr	r2, [pc, #180]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 800239e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 80023aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023b0:	f7ff f8ce 	bl	8001550 <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b8:	f7ff f8ca 	bl	8001550 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e058      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ca:	4b22      	ldr	r3, [pc, #136]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f0      	beq.n	80023b8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023d6:	e050      	b.n	800247a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e04f      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d148      	bne.n	800247a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a19      	ldr	r2, [pc, #100]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 80023ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023f4:	4b17      	ldr	r3, [pc, #92]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4a16      	ldr	r2, [pc, #88]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 80023fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002400:	f7ff f8a6 	bl	8001550 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002408:	f7ff f8a2 	bl	8001550 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e030      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241a:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x734>
 8002426:	e028      	b.n	800247a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	2b0c      	cmp	r3, #12
 800242c:	d023      	beq.n	8002476 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242e:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a08      	ldr	r2, [pc, #32]	@ (8002454 <HAL_RCC_OscConfig+0x780>)
 8002434:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7ff f889 	bl	8001550 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002440:	e00c      	b.n	800245c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002442:	f7ff f885 	bl	8001550 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d905      	bls.n	800245c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e013      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
 8002454:	40021000 	.word	0x40021000
 8002458:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800245c:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <HAL_RCC_OscConfig+0x7b0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1ec      	bne.n	8002442 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HAL_RCC_OscConfig+0x7b0>)
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	4905      	ldr	r1, [pc, #20]	@ (8002484 <HAL_RCC_OscConfig+0x7b0>)
 800246e:	4b06      	ldr	r3, [pc, #24]	@ (8002488 <HAL_RCC_OscConfig+0x7b4>)
 8002470:	4013      	ands	r3, r2
 8002472:	60cb      	str	r3, [r1, #12]
 8002474:	e001      	b.n	800247a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3720      	adds	r7, #32
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40021000 	.word	0x40021000
 8002488:	feeefffc 	.word	0xfeeefffc

0800248c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0e7      	b.n	8002670 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a0:	4b75      	ldr	r3, [pc, #468]	@ (8002678 <HAL_RCC_ClockConfig+0x1ec>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d910      	bls.n	80024d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b72      	ldr	r3, [pc, #456]	@ (8002678 <HAL_RCC_ClockConfig+0x1ec>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 0207 	bic.w	r2, r3, #7
 80024b6:	4970      	ldr	r1, [pc, #448]	@ (8002678 <HAL_RCC_ClockConfig+0x1ec>)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b6e      	ldr	r3, [pc, #440]	@ (8002678 <HAL_RCC_ClockConfig+0x1ec>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0cf      	b.n	8002670 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d010      	beq.n	80024fe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	4b66      	ldr	r3, [pc, #408]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d908      	bls.n	80024fe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b63      	ldr	r3, [pc, #396]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4960      	ldr	r1, [pc, #384]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d04c      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b03      	cmp	r3, #3
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002512:	4b5a      	ldr	r3, [pc, #360]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d121      	bne.n	8002562 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0a6      	b.n	8002670 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800252a:	4b54      	ldr	r3, [pc, #336]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d115      	bne.n	8002562 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e09a      	b.n	8002670 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002542:	4b4e      	ldr	r3, [pc, #312]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d109      	bne.n	8002562 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e08e      	b.n	8002670 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002552:	4b4a      	ldr	r3, [pc, #296]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e086      	b.n	8002670 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002562:	4b46      	ldr	r3, [pc, #280]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 0203 	bic.w	r2, r3, #3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4943      	ldr	r1, [pc, #268]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 8002570:	4313      	orrs	r3, r2
 8002572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002574:	f7fe ffec 	bl	8001550 <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	e00a      	b.n	8002592 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257c:	f7fe ffe8 	bl	8001550 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258a:	4293      	cmp	r3, r2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e06e      	b.n	8002670 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002592:	4b3a      	ldr	r3, [pc, #232]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 020c 	and.w	r2, r3, #12
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d1eb      	bne.n	800257c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d010      	beq.n	80025d2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	4b31      	ldr	r3, [pc, #196]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025bc:	429a      	cmp	r2, r3
 80025be:	d208      	bcs.n	80025d2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c0:	4b2e      	ldr	r3, [pc, #184]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	492b      	ldr	r1, [pc, #172]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025d2:	4b29      	ldr	r3, [pc, #164]	@ (8002678 <HAL_RCC_ClockConfig+0x1ec>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d210      	bcs.n	8002602 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e0:	4b25      	ldr	r3, [pc, #148]	@ (8002678 <HAL_RCC_ClockConfig+0x1ec>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f023 0207 	bic.w	r2, r3, #7
 80025e8:	4923      	ldr	r1, [pc, #140]	@ (8002678 <HAL_RCC_ClockConfig+0x1ec>)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f0:	4b21      	ldr	r3, [pc, #132]	@ (8002678 <HAL_RCC_ClockConfig+0x1ec>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d001      	beq.n	8002602 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e036      	b.n	8002670 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800260e:	4b1b      	ldr	r3, [pc, #108]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	4918      	ldr	r1, [pc, #96]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 800261c:	4313      	orrs	r3, r2
 800261e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d009      	beq.n	8002640 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800262c:	4b13      	ldr	r3, [pc, #76]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4910      	ldr	r1, [pc, #64]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 800263c:	4313      	orrs	r3, r2
 800263e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002640:	f000 f824 	bl	800268c <HAL_RCC_GetSysClockFreq>
 8002644:	4602      	mov	r2, r0
 8002646:	4b0d      	ldr	r3, [pc, #52]	@ (800267c <HAL_RCC_ClockConfig+0x1f0>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	490b      	ldr	r1, [pc, #44]	@ (8002680 <HAL_RCC_ClockConfig+0x1f4>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
 800265c:	4a09      	ldr	r2, [pc, #36]	@ (8002684 <HAL_RCC_ClockConfig+0x1f8>)
 800265e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002660:	4b09      	ldr	r3, [pc, #36]	@ (8002688 <HAL_RCC_ClockConfig+0x1fc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7fe ff23 	bl	80014b0 <HAL_InitTick>
 800266a:	4603      	mov	r3, r0
 800266c:	72fb      	strb	r3, [r7, #11]

  return status;
 800266e:	7afb      	ldrb	r3, [r7, #11]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40022000 	.word	0x40022000
 800267c:	40021000 	.word	0x40021000
 8002680:	08005d68 	.word	0x08005d68
 8002684:	20000000 	.word	0x20000000
 8002688:	20000004 	.word	0x20000004

0800268c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800268c:	b480      	push	{r7}
 800268e:	b089      	sub	sp, #36	@ 0x24
 8002690:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800269a:	4b3e      	ldr	r3, [pc, #248]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x108>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0x34>
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	2b0c      	cmp	r3, #12
 80026b8:	d121      	bne.n	80026fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d11e      	bne.n	80026fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026c0:	4b34      	ldr	r3, [pc, #208]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d107      	bne.n	80026dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026cc:	4b31      	ldr	r3, [pc, #196]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	f003 030f 	and.w	r3, r3, #15
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	e005      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x108>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10d      	bne.n	8002714 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026fc:	e00a      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	2b04      	cmp	r3, #4
 8002702:	d102      	bne.n	800270a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002704:	4b25      	ldr	r3, [pc, #148]	@ (800279c <HAL_RCC_GetSysClockFreq+0x110>)
 8002706:	61bb      	str	r3, [r7, #24]
 8002708:	e004      	b.n	8002714 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	2b08      	cmp	r3, #8
 800270e:	d101      	bne.n	8002714 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002710:	4b23      	ldr	r3, [pc, #140]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002712:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b0c      	cmp	r3, #12
 8002718:	d134      	bne.n	8002784 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800271a:	4b1e      	ldr	r3, [pc, #120]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x108>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d003      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0xa6>
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d003      	beq.n	8002738 <HAL_RCC_GetSysClockFreq+0xac>
 8002730:	e005      	b.n	800273e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002732:	4b1a      	ldr	r3, [pc, #104]	@ (800279c <HAL_RCC_GetSysClockFreq+0x110>)
 8002734:	617b      	str	r3, [r7, #20]
      break;
 8002736:	e005      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002738:	4b19      	ldr	r3, [pc, #100]	@ (80027a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800273a:	617b      	str	r3, [r7, #20]
      break;
 800273c:	e002      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	617b      	str	r3, [r7, #20]
      break;
 8002742:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002744:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x108>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	3301      	adds	r3, #1
 8002750:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002752:	4b10      	ldr	r3, [pc, #64]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x108>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	fb03 f202 	mul.w	r2, r3, r2
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800276a:	4b0a      	ldr	r3, [pc, #40]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x108>)
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	0e5b      	lsrs	r3, r3, #25
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	3301      	adds	r3, #1
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002782:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002784:	69bb      	ldr	r3, [r7, #24]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3724      	adds	r7, #36	@ 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
 8002798:	08005d80 	.word	0x08005d80
 800279c:	00f42400 	.word	0x00f42400
 80027a0:	007a1200 	.word	0x007a1200

080027a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a8:	4b03      	ldr	r3, [pc, #12]	@ (80027b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000000 	.word	0x20000000

080027bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027c0:	f7ff fff0 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b06      	ldr	r3, [pc, #24]	@ (80027e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	4904      	ldr	r1, [pc, #16]	@ (80027e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027d2:	5ccb      	ldrb	r3, [r1, r3]
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027dc:	4618      	mov	r0, r3
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08005d78 	.word	0x08005d78

080027e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027ec:	f7ff ffda 	bl	80027a4 <HAL_RCC_GetHCLKFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b06      	ldr	r3, [pc, #24]	@ (800280c <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	0adb      	lsrs	r3, r3, #11
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	4904      	ldr	r1, [pc, #16]	@ (8002810 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000
 8002810:	08005d78 	.word	0x08005d78

08002814 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800281c:	2300      	movs	r3, #0
 800281e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002820:	4b2a      	ldr	r3, [pc, #168]	@ (80028cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002824:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d003      	beq.n	8002834 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800282c:	f7ff f9ee 	bl	8001c0c <HAL_PWREx_GetVoltageRange>
 8002830:	6178      	str	r0, [r7, #20]
 8002832:	e014      	b.n	800285e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002834:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002838:	4a24      	ldr	r2, [pc, #144]	@ (80028cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800283a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800283e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002840:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800284c:	f7ff f9de 	bl	8001c0c <HAL_PWREx_GetVoltageRange>
 8002850:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002852:	4b1e      	ldr	r3, [pc, #120]	@ (80028cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002856:	4a1d      	ldr	r2, [pc, #116]	@ (80028cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002858:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800285c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002864:	d10b      	bne.n	800287e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b80      	cmp	r3, #128	@ 0x80
 800286a:	d919      	bls.n	80028a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002870:	d902      	bls.n	8002878 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002872:	2302      	movs	r3, #2
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	e013      	b.n	80028a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002878:	2301      	movs	r3, #1
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	e010      	b.n	80028a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b80      	cmp	r3, #128	@ 0x80
 8002882:	d902      	bls.n	800288a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002884:	2303      	movs	r3, #3
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	e00a      	b.n	80028a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b80      	cmp	r3, #128	@ 0x80
 800288e:	d102      	bne.n	8002896 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002890:	2302      	movs	r3, #2
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	e004      	b.n	80028a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b70      	cmp	r3, #112	@ 0x70
 800289a:	d101      	bne.n	80028a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800289c:	2301      	movs	r3, #1
 800289e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028a0:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 0207 	bic.w	r2, r3, #7
 80028a8:	4909      	ldr	r1, [pc, #36]	@ (80028d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028b0:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d001      	beq.n	80028c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e000      	b.n	80028c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40022000 	.word	0x40022000

080028d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028dc:	2300      	movs	r3, #0
 80028de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028e0:	2300      	movs	r3, #0
 80028e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d041      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028f8:	d02a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028fa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028fe:	d824      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002900:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002904:	d008      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002906:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800290a:	d81e      	bhi.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002910:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002914:	d010      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002916:	e018      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002918:	4b86      	ldr	r3, [pc, #536]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a85      	ldr	r2, [pc, #532]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002922:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002924:	e015      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3304      	adds	r3, #4
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fabb 	bl	8002ea8 <RCCEx_PLLSAI1_Config>
 8002932:	4603      	mov	r3, r0
 8002934:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002936:	e00c      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3320      	adds	r3, #32
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fba6 	bl	8003090 <RCCEx_PLLSAI2_Config>
 8002944:	4603      	mov	r3, r0
 8002946:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002948:	e003      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	74fb      	strb	r3, [r7, #19]
      break;
 800294e:	e000      	b.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002950:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002952:	7cfb      	ldrb	r3, [r7, #19]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10b      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002958:	4b76      	ldr	r3, [pc, #472]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002966:	4973      	ldr	r1, [pc, #460]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800296e:	e001      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d041      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002984:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002988:	d02a      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800298a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800298e:	d824      	bhi.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002990:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002994:	d008      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002996:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800299a:	d81e      	bhi.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80029a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029a4:	d010      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029a6:	e018      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029a8:	4b62      	ldr	r3, [pc, #392]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a61      	ldr	r2, [pc, #388]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029b4:	e015      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3304      	adds	r3, #4
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fa73 	bl	8002ea8 <RCCEx_PLLSAI1_Config>
 80029c2:	4603      	mov	r3, r0
 80029c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029c6:	e00c      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3320      	adds	r3, #32
 80029cc:	2100      	movs	r1, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fb5e 	bl	8003090 <RCCEx_PLLSAI2_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029d8:	e003      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	74fb      	strb	r3, [r7, #19]
      break;
 80029de:	e000      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80029e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029e2:	7cfb      	ldrb	r3, [r7, #19]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10b      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029e8:	4b52      	ldr	r3, [pc, #328]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029f6:	494f      	ldr	r1, [pc, #316]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80029fe:	e001      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80a0 	beq.w	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a12:	2300      	movs	r3, #0
 8002a14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a16:	4b47      	ldr	r3, [pc, #284]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a22:	2301      	movs	r3, #1
 8002a24:	e000      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a26:	2300      	movs	r3, #0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00d      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2c:	4b41      	ldr	r3, [pc, #260]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a30:	4a40      	ldr	r2, [pc, #256]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a38:	4b3e      	ldr	r3, [pc, #248]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a44:	2301      	movs	r3, #1
 8002a46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a48:	4b3b      	ldr	r3, [pc, #236]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a3a      	ldr	r2, [pc, #232]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a54:	f7fe fd7c 	bl	8001550 <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a5a:	e009      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5c:	f7fe fd78 	bl	8001550 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d902      	bls.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	74fb      	strb	r3, [r7, #19]
        break;
 8002a6e:	e005      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a70:	4b31      	ldr	r3, [pc, #196]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0ef      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a7c:	7cfb      	ldrb	r3, [r7, #19]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d15c      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a82:	4b2c      	ldr	r3, [pc, #176]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01f      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d019      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002aa0:	4b24      	ldr	r3, [pc, #144]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aaa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aac:	4b21      	ldr	r3, [pc, #132]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab2:	4a20      	ldr	r2, [pc, #128]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002abc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002acc:	4a19      	ldr	r2, [pc, #100]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d016      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ade:	f7fe fd37 	bl	8001550 <HAL_GetTick>
 8002ae2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae4:	e00b      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7fe fd33 	bl	8001550 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d902      	bls.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	74fb      	strb	r3, [r7, #19]
            break;
 8002afc:	e006      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002afe:	4b0d      	ldr	r3, [pc, #52]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0ec      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b0c:	7cfb      	ldrb	r3, [r7, #19]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b12:	4b08      	ldr	r3, [pc, #32]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b22:	4904      	ldr	r1, [pc, #16]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b2a:	e009      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b2c:	7cfb      	ldrb	r3, [r7, #19]
 8002b2e:	74bb      	strb	r3, [r7, #18]
 8002b30:	e006      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b40:	7c7b      	ldrb	r3, [r7, #17]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d105      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b46:	4b9e      	ldr	r3, [pc, #632]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4a:	4a9d      	ldr	r2, [pc, #628]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b50:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b5e:	4b98      	ldr	r3, [pc, #608]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b64:	f023 0203 	bic.w	r2, r3, #3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6c:	4994      	ldr	r1, [pc, #592]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b80:	4b8f      	ldr	r3, [pc, #572]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b86:	f023 020c 	bic.w	r2, r3, #12
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8e:	498c      	ldr	r1, [pc, #560]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ba2:	4b87      	ldr	r3, [pc, #540]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb0:	4983      	ldr	r1, [pc, #524]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bc4:	4b7e      	ldr	r3, [pc, #504]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	497b      	ldr	r1, [pc, #492]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002be6:	4b76      	ldr	r3, [pc, #472]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf4:	4972      	ldr	r1, [pc, #456]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c08:	4b6d      	ldr	r3, [pc, #436]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c16:	496a      	ldr	r1, [pc, #424]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c2a:	4b65      	ldr	r3, [pc, #404]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c30:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c38:	4961      	ldr	r1, [pc, #388]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c4c:	4b5c      	ldr	r3, [pc, #368]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5a:	4959      	ldr	r1, [pc, #356]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c6e:	4b54      	ldr	r3, [pc, #336]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c74:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c7c:	4950      	ldr	r1, [pc, #320]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c90:	4b4b      	ldr	r3, [pc, #300]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c96:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9e:	4948      	ldr	r1, [pc, #288]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cb2:	4b43      	ldr	r3, [pc, #268]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc0:	493f      	ldr	r1, [pc, #252]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d028      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cda:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ce2:	4937      	ldr	r1, [pc, #220]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cf2:	d106      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf4:	4b32      	ldr	r3, [pc, #200]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a31      	ldr	r2, [pc, #196]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cfe:	60d3      	str	r3, [r2, #12]
 8002d00:	e011      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d0a:	d10c      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	2101      	movs	r1, #1
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f8c8 	bl	8002ea8 <RCCEx_PLLSAI1_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d22:	7cfb      	ldrb	r3, [r7, #19]
 8002d24:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d028      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d32:	4b23      	ldr	r3, [pc, #140]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d38:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d40:	491f      	ldr	r1, [pc, #124]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d50:	d106      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d52:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	4a1a      	ldr	r2, [pc, #104]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d5c:	60d3      	str	r3, [r2, #12]
 8002d5e:	e011      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d64:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	2101      	movs	r1, #1
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 f899 	bl	8002ea8 <RCCEx_PLLSAI1_Config>
 8002d76:	4603      	mov	r3, r0
 8002d78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d7a:	7cfb      	ldrb	r3, [r7, #19]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d80:	7cfb      	ldrb	r3, [r7, #19]
 8002d82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d02b      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d90:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d96:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d9e:	4908      	ldr	r1, [pc, #32]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002daa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dae:	d109      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002db0:	4b03      	ldr	r3, [pc, #12]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4a02      	ldr	r2, [pc, #8]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dba:	60d3      	str	r3, [r2, #12]
 8002dbc:	e014      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 f867 	bl	8002ea8 <RCCEx_PLLSAI1_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dde:	7cfb      	ldrb	r3, [r7, #19]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d02f      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002df4:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e02:	4928      	ldr	r1, [pc, #160]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e12:	d10d      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3304      	adds	r3, #4
 8002e18:	2102      	movs	r1, #2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 f844 	bl	8002ea8 <RCCEx_PLLSAI1_Config>
 8002e20:	4603      	mov	r3, r0
 8002e22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e24:	7cfb      	ldrb	r3, [r7, #19]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d014      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e2a:	7cfb      	ldrb	r3, [r7, #19]
 8002e2c:	74bb      	strb	r3, [r7, #18]
 8002e2e:	e011      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3320      	adds	r3, #32
 8002e3e:	2102      	movs	r1, #2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 f925 	bl	8003090 <RCCEx_PLLSAI2_Config>
 8002e46:	4603      	mov	r3, r0
 8002e48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e4a:	7cfb      	ldrb	r3, [r7, #19]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e50:	7cfb      	ldrb	r3, [r7, #19]
 8002e52:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e60:	4b10      	ldr	r3, [pc, #64]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e66:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e6e:	490d      	ldr	r1, [pc, #52]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00b      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e82:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e92:	4904      	ldr	r1, [pc, #16]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e9a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021000 	.word	0x40021000

08002ea8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eb6:	4b75      	ldr	r3, [pc, #468]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d018      	beq.n	8002ef4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ec2:	4b72      	ldr	r3, [pc, #456]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0203 	and.w	r2, r3, #3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d10d      	bne.n	8002eee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002eda:	4b6c      	ldr	r3, [pc, #432]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
       ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d047      	beq.n	8002f7e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
 8002ef2:	e044      	b.n	8002f7e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d018      	beq.n	8002f2e <RCCEx_PLLSAI1_Config+0x86>
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d825      	bhi.n	8002f4c <RCCEx_PLLSAI1_Config+0xa4>
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d002      	beq.n	8002f0a <RCCEx_PLLSAI1_Config+0x62>
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d009      	beq.n	8002f1c <RCCEx_PLLSAI1_Config+0x74>
 8002f08:	e020      	b.n	8002f4c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f0a:	4b60      	ldr	r3, [pc, #384]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d11d      	bne.n	8002f52 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f1a:	e01a      	b.n	8002f52 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f1c:	4b5b      	ldr	r3, [pc, #364]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d116      	bne.n	8002f56 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2c:	e013      	b.n	8002f56 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f2e:	4b57      	ldr	r3, [pc, #348]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10f      	bne.n	8002f5a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f3a:	4b54      	ldr	r3, [pc, #336]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f4a:	e006      	b.n	8002f5a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f50:	e004      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f52:	bf00      	nop
 8002f54:	e002      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f56:	bf00      	nop
 8002f58:	e000      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10d      	bne.n	8002f7e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f62:	4b4a      	ldr	r3, [pc, #296]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6819      	ldr	r1, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	011b      	lsls	r3, r3, #4
 8002f76:	430b      	orrs	r3, r1
 8002f78:	4944      	ldr	r1, [pc, #272]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d17d      	bne.n	8003080 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f84:	4b41      	ldr	r3, [pc, #260]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a40      	ldr	r2, [pc, #256]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f90:	f7fe fade 	bl	8001550 <HAL_GetTick>
 8002f94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f96:	e009      	b.n	8002fac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f98:	f7fe fada 	bl	8001550 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d902      	bls.n	8002fac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	73fb      	strb	r3, [r7, #15]
        break;
 8002faa:	e005      	b.n	8002fb8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fac:	4b37      	ldr	r3, [pc, #220]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1ef      	bne.n	8002f98 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d160      	bne.n	8003080 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d111      	bne.n	8002fe8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc4:	4b31      	ldr	r3, [pc, #196]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002fcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6892      	ldr	r2, [r2, #8]
 8002fd4:	0211      	lsls	r1, r2, #8
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68d2      	ldr	r2, [r2, #12]
 8002fda:	0912      	lsrs	r2, r2, #4
 8002fdc:	0452      	lsls	r2, r2, #17
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	492a      	ldr	r1, [pc, #168]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	610b      	str	r3, [r1, #16]
 8002fe6:	e027      	b.n	8003038 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d112      	bne.n	8003014 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fee:	4b27      	ldr	r3, [pc, #156]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002ff6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6892      	ldr	r2, [r2, #8]
 8002ffe:	0211      	lsls	r1, r2, #8
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6912      	ldr	r2, [r2, #16]
 8003004:	0852      	lsrs	r2, r2, #1
 8003006:	3a01      	subs	r2, #1
 8003008:	0552      	lsls	r2, r2, #21
 800300a:	430a      	orrs	r2, r1
 800300c:	491f      	ldr	r1, [pc, #124]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 800300e:	4313      	orrs	r3, r2
 8003010:	610b      	str	r3, [r1, #16]
 8003012:	e011      	b.n	8003038 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003014:	4b1d      	ldr	r3, [pc, #116]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800301c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6892      	ldr	r2, [r2, #8]
 8003024:	0211      	lsls	r1, r2, #8
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6952      	ldr	r2, [r2, #20]
 800302a:	0852      	lsrs	r2, r2, #1
 800302c:	3a01      	subs	r2, #1
 800302e:	0652      	lsls	r2, r2, #25
 8003030:	430a      	orrs	r2, r1
 8003032:	4916      	ldr	r1, [pc, #88]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003034:	4313      	orrs	r3, r2
 8003036:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003038:	4b14      	ldr	r3, [pc, #80]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a13      	ldr	r2, [pc, #76]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 800303e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003042:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003044:	f7fe fa84 	bl	8001550 <HAL_GetTick>
 8003048:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800304a:	e009      	b.n	8003060 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800304c:	f7fe fa80 	bl	8001550 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d902      	bls.n	8003060 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	73fb      	strb	r3, [r7, #15]
          break;
 800305e:	e005      	b.n	800306c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003060:	4b0a      	ldr	r3, [pc, #40]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0ef      	beq.n	800304c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003072:	4b06      	ldr	r3, [pc, #24]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	4904      	ldr	r1, [pc, #16]	@ (800308c <RCCEx_PLLSAI1_Config+0x1e4>)
 800307c:	4313      	orrs	r3, r2
 800307e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003080:	7bfb      	ldrb	r3, [r7, #15]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000

08003090 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800309e:	4b6a      	ldr	r3, [pc, #424]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d018      	beq.n	80030dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80030aa:	4b67      	ldr	r3, [pc, #412]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f003 0203 	and.w	r2, r3, #3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d10d      	bne.n	80030d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
       ||
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80030c2:	4b61      	ldr	r3, [pc, #388]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	1c5a      	adds	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
       ||
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d047      	beq.n	8003166 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
 80030da:	e044      	b.n	8003166 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d018      	beq.n	8003116 <RCCEx_PLLSAI2_Config+0x86>
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d825      	bhi.n	8003134 <RCCEx_PLLSAI2_Config+0xa4>
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d002      	beq.n	80030f2 <RCCEx_PLLSAI2_Config+0x62>
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d009      	beq.n	8003104 <RCCEx_PLLSAI2_Config+0x74>
 80030f0:	e020      	b.n	8003134 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030f2:	4b55      	ldr	r3, [pc, #340]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d11d      	bne.n	800313a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003102:	e01a      	b.n	800313a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003104:	4b50      	ldr	r3, [pc, #320]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800310c:	2b00      	cmp	r3, #0
 800310e:	d116      	bne.n	800313e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003114:	e013      	b.n	800313e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003116:	4b4c      	ldr	r3, [pc, #304]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10f      	bne.n	8003142 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003122:	4b49      	ldr	r3, [pc, #292]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003132:	e006      	b.n	8003142 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
      break;
 8003138:	e004      	b.n	8003144 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800313a:	bf00      	nop
 800313c:	e002      	b.n	8003144 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800313e:	bf00      	nop
 8003140:	e000      	b.n	8003144 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003142:	bf00      	nop
    }

    if(status == HAL_OK)
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10d      	bne.n	8003166 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800314a:	4b3f      	ldr	r3, [pc, #252]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6819      	ldr	r1, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	430b      	orrs	r3, r1
 8003160:	4939      	ldr	r1, [pc, #228]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003162:	4313      	orrs	r3, r2
 8003164:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d167      	bne.n	800323c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800316c:	4b36      	ldr	r3, [pc, #216]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a35      	ldr	r2, [pc, #212]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003172:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003178:	f7fe f9ea 	bl	8001550 <HAL_GetTick>
 800317c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800317e:	e009      	b.n	8003194 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003180:	f7fe f9e6 	bl	8001550 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d902      	bls.n	8003194 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	73fb      	strb	r3, [r7, #15]
        break;
 8003192:	e005      	b.n	80031a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003194:	4b2c      	ldr	r3, [pc, #176]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1ef      	bne.n	8003180 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d14a      	bne.n	800323c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d111      	bne.n	80031d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031ac:	4b26      	ldr	r3, [pc, #152]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80031b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6892      	ldr	r2, [r2, #8]
 80031bc:	0211      	lsls	r1, r2, #8
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68d2      	ldr	r2, [r2, #12]
 80031c2:	0912      	lsrs	r2, r2, #4
 80031c4:	0452      	lsls	r2, r2, #17
 80031c6:	430a      	orrs	r2, r1
 80031c8:	491f      	ldr	r1, [pc, #124]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	614b      	str	r3, [r1, #20]
 80031ce:	e011      	b.n	80031f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80031d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6892      	ldr	r2, [r2, #8]
 80031e0:	0211      	lsls	r1, r2, #8
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6912      	ldr	r2, [r2, #16]
 80031e6:	0852      	lsrs	r2, r2, #1
 80031e8:	3a01      	subs	r2, #1
 80031ea:	0652      	lsls	r2, r2, #25
 80031ec:	430a      	orrs	r2, r1
 80031ee:	4916      	ldr	r1, [pc, #88]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031f4:	4b14      	ldr	r3, [pc, #80]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a13      	ldr	r2, [pc, #76]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003200:	f7fe f9a6 	bl	8001550 <HAL_GetTick>
 8003204:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003206:	e009      	b.n	800321c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003208:	f7fe f9a2 	bl	8001550 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d902      	bls.n	800321c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	73fb      	strb	r3, [r7, #15]
          break;
 800321a:	e005      	b.n	8003228 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800321c:	4b0a      	ldr	r3, [pc, #40]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0ef      	beq.n	8003208 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800322e:	4b06      	ldr	r3, [pc, #24]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	4904      	ldr	r1, [pc, #16]	@ (8003248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003238:	4313      	orrs	r3, r2
 800323a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800323c:	7bfb      	ldrb	r3, [r7, #15]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000

0800324c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e049      	b.n	80032f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fd ffee 	bl	8001254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3304      	adds	r3, #4
 8003288:	4619      	mov	r1, r3
 800328a:	4610      	mov	r0, r2
 800328c:	f000 fb7a 	bl	8003984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e049      	b.n	80033a0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d106      	bne.n	8003326 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f841 	bl	80033a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3304      	adds	r3, #4
 8003336:	4619      	mov	r1, r3
 8003338:	4610      	mov	r0, r2
 800333a:	f000 fb23 	bl	8003984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d109      	bne.n	80033e0 <HAL_TIM_PWM_Start+0x24>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	bf14      	ite	ne
 80033d8:	2301      	movne	r3, #1
 80033da:	2300      	moveq	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	e03c      	b.n	800345a <HAL_TIM_PWM_Start+0x9e>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d109      	bne.n	80033fa <HAL_TIM_PWM_Start+0x3e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	bf14      	ite	ne
 80033f2:	2301      	movne	r3, #1
 80033f4:	2300      	moveq	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	e02f      	b.n	800345a <HAL_TIM_PWM_Start+0x9e>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d109      	bne.n	8003414 <HAL_TIM_PWM_Start+0x58>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	bf14      	ite	ne
 800340c:	2301      	movne	r3, #1
 800340e:	2300      	moveq	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	e022      	b.n	800345a <HAL_TIM_PWM_Start+0x9e>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b0c      	cmp	r3, #12
 8003418:	d109      	bne.n	800342e <HAL_TIM_PWM_Start+0x72>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b01      	cmp	r3, #1
 8003424:	bf14      	ite	ne
 8003426:	2301      	movne	r3, #1
 8003428:	2300      	moveq	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	e015      	b.n	800345a <HAL_TIM_PWM_Start+0x9e>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b10      	cmp	r3, #16
 8003432:	d109      	bne.n	8003448 <HAL_TIM_PWM_Start+0x8c>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	bf14      	ite	ne
 8003440:	2301      	movne	r3, #1
 8003442:	2300      	moveq	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e008      	b.n	800345a <HAL_TIM_PWM_Start+0x9e>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b01      	cmp	r3, #1
 8003452:	bf14      	ite	ne
 8003454:	2301      	movne	r3, #1
 8003456:	2300      	moveq	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e09c      	b.n	800359c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d104      	bne.n	8003472 <HAL_TIM_PWM_Start+0xb6>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003470:	e023      	b.n	80034ba <HAL_TIM_PWM_Start+0xfe>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b04      	cmp	r3, #4
 8003476:	d104      	bne.n	8003482 <HAL_TIM_PWM_Start+0xc6>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003480:	e01b      	b.n	80034ba <HAL_TIM_PWM_Start+0xfe>
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	2b08      	cmp	r3, #8
 8003486:	d104      	bne.n	8003492 <HAL_TIM_PWM_Start+0xd6>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003490:	e013      	b.n	80034ba <HAL_TIM_PWM_Start+0xfe>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b0c      	cmp	r3, #12
 8003496:	d104      	bne.n	80034a2 <HAL_TIM_PWM_Start+0xe6>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034a0:	e00b      	b.n	80034ba <HAL_TIM_PWM_Start+0xfe>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d104      	bne.n	80034b2 <HAL_TIM_PWM_Start+0xf6>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034b0:	e003      	b.n	80034ba <HAL_TIM_PWM_Start+0xfe>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2201      	movs	r2, #1
 80034c0:	6839      	ldr	r1, [r7, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fe74 	bl	80041b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a35      	ldr	r2, [pc, #212]	@ (80035a4 <HAL_TIM_PWM_Start+0x1e8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <HAL_TIM_PWM_Start+0x13e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a34      	ldr	r2, [pc, #208]	@ (80035a8 <HAL_TIM_PWM_Start+0x1ec>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00e      	beq.n	80034fa <HAL_TIM_PWM_Start+0x13e>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a32      	ldr	r2, [pc, #200]	@ (80035ac <HAL_TIM_PWM_Start+0x1f0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_TIM_PWM_Start+0x13e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a31      	ldr	r2, [pc, #196]	@ (80035b0 <HAL_TIM_PWM_Start+0x1f4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_TIM_PWM_Start+0x13e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a2f      	ldr	r2, [pc, #188]	@ (80035b4 <HAL_TIM_PWM_Start+0x1f8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_PWM_Start+0x142>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_TIM_PWM_Start+0x144>
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d007      	beq.n	8003514 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003512:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a22      	ldr	r2, [pc, #136]	@ (80035a4 <HAL_TIM_PWM_Start+0x1e8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01d      	beq.n	800355a <HAL_TIM_PWM_Start+0x19e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003526:	d018      	beq.n	800355a <HAL_TIM_PWM_Start+0x19e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a22      	ldr	r2, [pc, #136]	@ (80035b8 <HAL_TIM_PWM_Start+0x1fc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <HAL_TIM_PWM_Start+0x19e>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a21      	ldr	r2, [pc, #132]	@ (80035bc <HAL_TIM_PWM_Start+0x200>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00e      	beq.n	800355a <HAL_TIM_PWM_Start+0x19e>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1f      	ldr	r2, [pc, #124]	@ (80035c0 <HAL_TIM_PWM_Start+0x204>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d009      	beq.n	800355a <HAL_TIM_PWM_Start+0x19e>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a17      	ldr	r2, [pc, #92]	@ (80035a8 <HAL_TIM_PWM_Start+0x1ec>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d004      	beq.n	800355a <HAL_TIM_PWM_Start+0x19e>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a15      	ldr	r2, [pc, #84]	@ (80035ac <HAL_TIM_PWM_Start+0x1f0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d115      	bne.n	8003586 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	4b18      	ldr	r3, [pc, #96]	@ (80035c4 <HAL_TIM_PWM_Start+0x208>)
 8003562:	4013      	ands	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b06      	cmp	r3, #6
 800356a:	d015      	beq.n	8003598 <HAL_TIM_PWM_Start+0x1dc>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003572:	d011      	beq.n	8003598 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003584:	e008      	b.n	8003598 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	e000      	b.n	800359a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003598:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40012c00 	.word	0x40012c00
 80035a8:	40013400 	.word	0x40013400
 80035ac:	40014000 	.word	0x40014000
 80035b0:	40014400 	.word	0x40014400
 80035b4:	40014800 	.word	0x40014800
 80035b8:	40000400 	.word	0x40000400
 80035bc:	40000800 	.word	0x40000800
 80035c0:	40000c00 	.word	0x40000c00
 80035c4:	00010007 	.word	0x00010007

080035c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e0ff      	b.n	80037e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b14      	cmp	r3, #20
 80035f2:	f200 80f0 	bhi.w	80037d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80035f6:	a201      	add	r2, pc, #4	@ (adr r2, 80035fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fc:	08003651 	.word	0x08003651
 8003600:	080037d7 	.word	0x080037d7
 8003604:	080037d7 	.word	0x080037d7
 8003608:	080037d7 	.word	0x080037d7
 800360c:	08003691 	.word	0x08003691
 8003610:	080037d7 	.word	0x080037d7
 8003614:	080037d7 	.word	0x080037d7
 8003618:	080037d7 	.word	0x080037d7
 800361c:	080036d3 	.word	0x080036d3
 8003620:	080037d7 	.word	0x080037d7
 8003624:	080037d7 	.word	0x080037d7
 8003628:	080037d7 	.word	0x080037d7
 800362c:	08003713 	.word	0x08003713
 8003630:	080037d7 	.word	0x080037d7
 8003634:	080037d7 	.word	0x080037d7
 8003638:	080037d7 	.word	0x080037d7
 800363c:	08003755 	.word	0x08003755
 8003640:	080037d7 	.word	0x080037d7
 8003644:	080037d7 	.word	0x080037d7
 8003648:	080037d7 	.word	0x080037d7
 800364c:	08003795 	.word	0x08003795
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fa3a 	bl	8003ad0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699a      	ldr	r2, [r3, #24]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0208 	orr.w	r2, r2, #8
 800366a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0204 	bic.w	r2, r2, #4
 800367a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6999      	ldr	r1, [r3, #24]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	691a      	ldr	r2, [r3, #16]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	619a      	str	r2, [r3, #24]
      break;
 800368e:	e0a5      	b.n	80037dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 faaa 	bl	8003bf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	699a      	ldr	r2, [r3, #24]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6999      	ldr	r1, [r3, #24]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	021a      	lsls	r2, r3, #8
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	619a      	str	r2, [r3, #24]
      break;
 80036d0:	e084      	b.n	80037dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fb13 	bl	8003d04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69da      	ldr	r2, [r3, #28]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0208 	orr.w	r2, r2, #8
 80036ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69da      	ldr	r2, [r3, #28]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0204 	bic.w	r2, r2, #4
 80036fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69d9      	ldr	r1, [r3, #28]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	61da      	str	r2, [r3, #28]
      break;
 8003710:	e064      	b.n	80037dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fb7b 	bl	8003e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69da      	ldr	r2, [r3, #28]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800372c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800373c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	69d9      	ldr	r1, [r3, #28]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	021a      	lsls	r2, r3, #8
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	61da      	str	r2, [r3, #28]
      break;
 8003752:	e043      	b.n	80037dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fbc4 	bl	8003ee8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0208 	orr.w	r2, r2, #8
 800376e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0204 	bic.w	r2, r2, #4
 800377e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003792:	e023      	b.n	80037dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fc08 	bl	8003fb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	021a      	lsls	r2, r3, #8
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80037d4:	e002      	b.n	80037dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	75fb      	strb	r3, [r7, #23]
      break;
 80037da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop

080037f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_TIM_ConfigClockSource+0x1c>
 8003808:	2302      	movs	r3, #2
 800380a:	e0b6      	b.n	800397a <HAL_TIM_ConfigClockSource+0x18a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800382a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800382e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003836:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003848:	d03e      	beq.n	80038c8 <HAL_TIM_ConfigClockSource+0xd8>
 800384a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800384e:	f200 8087 	bhi.w	8003960 <HAL_TIM_ConfigClockSource+0x170>
 8003852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003856:	f000 8086 	beq.w	8003966 <HAL_TIM_ConfigClockSource+0x176>
 800385a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800385e:	d87f      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x170>
 8003860:	2b70      	cmp	r3, #112	@ 0x70
 8003862:	d01a      	beq.n	800389a <HAL_TIM_ConfigClockSource+0xaa>
 8003864:	2b70      	cmp	r3, #112	@ 0x70
 8003866:	d87b      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x170>
 8003868:	2b60      	cmp	r3, #96	@ 0x60
 800386a:	d050      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x11e>
 800386c:	2b60      	cmp	r3, #96	@ 0x60
 800386e:	d877      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x170>
 8003870:	2b50      	cmp	r3, #80	@ 0x50
 8003872:	d03c      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0xfe>
 8003874:	2b50      	cmp	r3, #80	@ 0x50
 8003876:	d873      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x170>
 8003878:	2b40      	cmp	r3, #64	@ 0x40
 800387a:	d058      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x13e>
 800387c:	2b40      	cmp	r3, #64	@ 0x40
 800387e:	d86f      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x170>
 8003880:	2b30      	cmp	r3, #48	@ 0x30
 8003882:	d064      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x15e>
 8003884:	2b30      	cmp	r3, #48	@ 0x30
 8003886:	d86b      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x170>
 8003888:	2b20      	cmp	r3, #32
 800388a:	d060      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x15e>
 800388c:	2b20      	cmp	r3, #32
 800388e:	d867      	bhi.n	8003960 <HAL_TIM_ConfigClockSource+0x170>
 8003890:	2b00      	cmp	r3, #0
 8003892:	d05c      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x15e>
 8003894:	2b10      	cmp	r3, #16
 8003896:	d05a      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x15e>
 8003898:	e062      	b.n	8003960 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038aa:	f000 fc61 	bl	8004170 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	609a      	str	r2, [r3, #8]
      break;
 80038c6:	e04f      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038d8:	f000 fc4a 	bl	8004170 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038ea:	609a      	str	r2, [r3, #8]
      break;
 80038ec:	e03c      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fa:	461a      	mov	r2, r3
 80038fc:	f000 fbbe 	bl	800407c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2150      	movs	r1, #80	@ 0x50
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fc17 	bl	800413a <TIM_ITRx_SetConfig>
      break;
 800390c:	e02c      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800391a:	461a      	mov	r2, r3
 800391c:	f000 fbdd 	bl	80040da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2160      	movs	r1, #96	@ 0x60
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fc07 	bl	800413a <TIM_ITRx_SetConfig>
      break;
 800392c:	e01c      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800393a:	461a      	mov	r2, r3
 800393c:	f000 fb9e 	bl	800407c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2140      	movs	r1, #64	@ 0x40
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fbf7 	bl	800413a <TIM_ITRx_SetConfig>
      break;
 800394c:	e00c      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4619      	mov	r1, r3
 8003958:	4610      	mov	r0, r2
 800395a:	f000 fbee 	bl	800413a <TIM_ITRx_SetConfig>
      break;
 800395e:	e003      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
      break;
 8003964:	e000      	b.n	8003968 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a46      	ldr	r2, [pc, #280]	@ (8003ab0 <TIM_Base_SetConfig+0x12c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d013      	beq.n	80039c4 <TIM_Base_SetConfig+0x40>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039a2:	d00f      	beq.n	80039c4 <TIM_Base_SetConfig+0x40>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a43      	ldr	r2, [pc, #268]	@ (8003ab4 <TIM_Base_SetConfig+0x130>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00b      	beq.n	80039c4 <TIM_Base_SetConfig+0x40>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a42      	ldr	r2, [pc, #264]	@ (8003ab8 <TIM_Base_SetConfig+0x134>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d007      	beq.n	80039c4 <TIM_Base_SetConfig+0x40>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a41      	ldr	r2, [pc, #260]	@ (8003abc <TIM_Base_SetConfig+0x138>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d003      	beq.n	80039c4 <TIM_Base_SetConfig+0x40>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a40      	ldr	r2, [pc, #256]	@ (8003ac0 <TIM_Base_SetConfig+0x13c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d108      	bne.n	80039d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a35      	ldr	r2, [pc, #212]	@ (8003ab0 <TIM_Base_SetConfig+0x12c>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01f      	beq.n	8003a1e <TIM_Base_SetConfig+0x9a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039e4:	d01b      	beq.n	8003a1e <TIM_Base_SetConfig+0x9a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a32      	ldr	r2, [pc, #200]	@ (8003ab4 <TIM_Base_SetConfig+0x130>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d017      	beq.n	8003a1e <TIM_Base_SetConfig+0x9a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a31      	ldr	r2, [pc, #196]	@ (8003ab8 <TIM_Base_SetConfig+0x134>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <TIM_Base_SetConfig+0x9a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a30      	ldr	r2, [pc, #192]	@ (8003abc <TIM_Base_SetConfig+0x138>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00f      	beq.n	8003a1e <TIM_Base_SetConfig+0x9a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a2f      	ldr	r2, [pc, #188]	@ (8003ac0 <TIM_Base_SetConfig+0x13c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00b      	beq.n	8003a1e <TIM_Base_SetConfig+0x9a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a2e      	ldr	r2, [pc, #184]	@ (8003ac4 <TIM_Base_SetConfig+0x140>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d007      	beq.n	8003a1e <TIM_Base_SetConfig+0x9a>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a2d      	ldr	r2, [pc, #180]	@ (8003ac8 <TIM_Base_SetConfig+0x144>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d003      	beq.n	8003a1e <TIM_Base_SetConfig+0x9a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a2c      	ldr	r2, [pc, #176]	@ (8003acc <TIM_Base_SetConfig+0x148>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d108      	bne.n	8003a30 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a16      	ldr	r2, [pc, #88]	@ (8003ab0 <TIM_Base_SetConfig+0x12c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00f      	beq.n	8003a7c <TIM_Base_SetConfig+0xf8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a18      	ldr	r2, [pc, #96]	@ (8003ac0 <TIM_Base_SetConfig+0x13c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00b      	beq.n	8003a7c <TIM_Base_SetConfig+0xf8>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a17      	ldr	r2, [pc, #92]	@ (8003ac4 <TIM_Base_SetConfig+0x140>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d007      	beq.n	8003a7c <TIM_Base_SetConfig+0xf8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a16      	ldr	r2, [pc, #88]	@ (8003ac8 <TIM_Base_SetConfig+0x144>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d003      	beq.n	8003a7c <TIM_Base_SetConfig+0xf8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a15      	ldr	r2, [pc, #84]	@ (8003acc <TIM_Base_SetConfig+0x148>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d103      	bne.n	8003a84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d105      	bne.n	8003aa2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	f023 0201 	bic.w	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	611a      	str	r2, [r3, #16]
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40012c00 	.word	0x40012c00
 8003ab4:	40000400 	.word	0x40000400
 8003ab8:	40000800 	.word	0x40000800
 8003abc:	40000c00 	.word	0x40000c00
 8003ac0:	40013400 	.word	0x40013400
 8003ac4:	40014000 	.word	0x40014000
 8003ac8:	40014400 	.word	0x40014400
 8003acc:	40014800 	.word	0x40014800

08003ad0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f023 0201 	bic.w	r2, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0303 	bic.w	r3, r3, #3
 8003b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f023 0302 	bic.w	r3, r3, #2
 8003b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a2c      	ldr	r2, [pc, #176]	@ (8003bdc <TIM_OC1_SetConfig+0x10c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00f      	beq.n	8003b50 <TIM_OC1_SetConfig+0x80>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a2b      	ldr	r2, [pc, #172]	@ (8003be0 <TIM_OC1_SetConfig+0x110>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d00b      	beq.n	8003b50 <TIM_OC1_SetConfig+0x80>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8003be4 <TIM_OC1_SetConfig+0x114>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d007      	beq.n	8003b50 <TIM_OC1_SetConfig+0x80>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a29      	ldr	r2, [pc, #164]	@ (8003be8 <TIM_OC1_SetConfig+0x118>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d003      	beq.n	8003b50 <TIM_OC1_SetConfig+0x80>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a28      	ldr	r2, [pc, #160]	@ (8003bec <TIM_OC1_SetConfig+0x11c>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10c      	bne.n	8003b6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0308 	bic.w	r3, r3, #8
 8003b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f023 0304 	bic.w	r3, r3, #4
 8003b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bdc <TIM_OC1_SetConfig+0x10c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d00f      	beq.n	8003b92 <TIM_OC1_SetConfig+0xc2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a1a      	ldr	r2, [pc, #104]	@ (8003be0 <TIM_OC1_SetConfig+0x110>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00b      	beq.n	8003b92 <TIM_OC1_SetConfig+0xc2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	@ (8003be4 <TIM_OC1_SetConfig+0x114>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <TIM_OC1_SetConfig+0xc2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a18      	ldr	r2, [pc, #96]	@ (8003be8 <TIM_OC1_SetConfig+0x118>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d003      	beq.n	8003b92 <TIM_OC1_SetConfig+0xc2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a17      	ldr	r2, [pc, #92]	@ (8003bec <TIM_OC1_SetConfig+0x11c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d111      	bne.n	8003bb6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	621a      	str	r2, [r3, #32]
}
 8003bd0:	bf00      	nop
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	40013400 	.word	0x40013400
 8003be4:	40014000 	.word	0x40014000
 8003be8:	40014400 	.word	0x40014400
 8003bec:	40014800 	.word	0x40014800

08003bf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	f023 0210 	bic.w	r2, r3, #16
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f023 0320 	bic.w	r3, r3, #32
 8003c3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a28      	ldr	r2, [pc, #160]	@ (8003cf0 <TIM_OC2_SetConfig+0x100>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d003      	beq.n	8003c5c <TIM_OC2_SetConfig+0x6c>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a27      	ldr	r2, [pc, #156]	@ (8003cf4 <TIM_OC2_SetConfig+0x104>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d10d      	bne.n	8003c78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003cf0 <TIM_OC2_SetConfig+0x100>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d00f      	beq.n	8003ca0 <TIM_OC2_SetConfig+0xb0>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a1c      	ldr	r2, [pc, #112]	@ (8003cf4 <TIM_OC2_SetConfig+0x104>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00b      	beq.n	8003ca0 <TIM_OC2_SetConfig+0xb0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf8 <TIM_OC2_SetConfig+0x108>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d007      	beq.n	8003ca0 <TIM_OC2_SetConfig+0xb0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a1a      	ldr	r2, [pc, #104]	@ (8003cfc <TIM_OC2_SetConfig+0x10c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_OC2_SetConfig+0xb0>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a19      	ldr	r2, [pc, #100]	@ (8003d00 <TIM_OC2_SetConfig+0x110>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d113      	bne.n	8003cc8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ca6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	621a      	str	r2, [r3, #32]
}
 8003ce2:	bf00      	nop
 8003ce4:	371c      	adds	r7, #28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40012c00 	.word	0x40012c00
 8003cf4:	40013400 	.word	0x40013400
 8003cf8:	40014000 	.word	0x40014000
 8003cfc:	40014400 	.word	0x40014400
 8003d00:	40014800 	.word	0x40014800

08003d04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0303 	bic.w	r3, r3, #3
 8003d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	021b      	lsls	r3, r3, #8
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a27      	ldr	r2, [pc, #156]	@ (8003e00 <TIM_OC3_SetConfig+0xfc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d003      	beq.n	8003d6e <TIM_OC3_SetConfig+0x6a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a26      	ldr	r2, [pc, #152]	@ (8003e04 <TIM_OC3_SetConfig+0x100>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d10d      	bne.n	8003d8a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e00 <TIM_OC3_SetConfig+0xfc>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00f      	beq.n	8003db2 <TIM_OC3_SetConfig+0xae>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1b      	ldr	r2, [pc, #108]	@ (8003e04 <TIM_OC3_SetConfig+0x100>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00b      	beq.n	8003db2 <TIM_OC3_SetConfig+0xae>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8003e08 <TIM_OC3_SetConfig+0x104>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d007      	beq.n	8003db2 <TIM_OC3_SetConfig+0xae>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a19      	ldr	r2, [pc, #100]	@ (8003e0c <TIM_OC3_SetConfig+0x108>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d003      	beq.n	8003db2 <TIM_OC3_SetConfig+0xae>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a18      	ldr	r2, [pc, #96]	@ (8003e10 <TIM_OC3_SetConfig+0x10c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d113      	bne.n	8003dda <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	621a      	str	r2, [r3, #32]
}
 8003df4:	bf00      	nop
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40013400 	.word	0x40013400
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	40014400 	.word	0x40014400
 8003e10:	40014800 	.word	0x40014800

08003e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	031b      	lsls	r3, r3, #12
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a18      	ldr	r2, [pc, #96]	@ (8003ed4 <TIM_OC4_SetConfig+0xc0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00f      	beq.n	8003e98 <TIM_OC4_SetConfig+0x84>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a17      	ldr	r2, [pc, #92]	@ (8003ed8 <TIM_OC4_SetConfig+0xc4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00b      	beq.n	8003e98 <TIM_OC4_SetConfig+0x84>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a16      	ldr	r2, [pc, #88]	@ (8003edc <TIM_OC4_SetConfig+0xc8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d007      	beq.n	8003e98 <TIM_OC4_SetConfig+0x84>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a15      	ldr	r2, [pc, #84]	@ (8003ee0 <TIM_OC4_SetConfig+0xcc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <TIM_OC4_SetConfig+0x84>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4a14      	ldr	r2, [pc, #80]	@ (8003ee4 <TIM_OC4_SetConfig+0xd0>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d109      	bne.n	8003eac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	019b      	lsls	r3, r3, #6
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	621a      	str	r2, [r3, #32]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40012c00 	.word	0x40012c00
 8003ed8:	40013400 	.word	0x40013400
 8003edc:	40014000 	.word	0x40014000
 8003ee0:	40014400 	.word	0x40014400
 8003ee4:	40014800 	.word	0x40014800

08003ee8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003f2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a17      	ldr	r2, [pc, #92]	@ (8003f9c <TIM_OC5_SetConfig+0xb4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00f      	beq.n	8003f62 <TIM_OC5_SetConfig+0x7a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a16      	ldr	r2, [pc, #88]	@ (8003fa0 <TIM_OC5_SetConfig+0xb8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00b      	beq.n	8003f62 <TIM_OC5_SetConfig+0x7a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a15      	ldr	r2, [pc, #84]	@ (8003fa4 <TIM_OC5_SetConfig+0xbc>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d007      	beq.n	8003f62 <TIM_OC5_SetConfig+0x7a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a14      	ldr	r2, [pc, #80]	@ (8003fa8 <TIM_OC5_SetConfig+0xc0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d003      	beq.n	8003f62 <TIM_OC5_SetConfig+0x7a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a13      	ldr	r2, [pc, #76]	@ (8003fac <TIM_OC5_SetConfig+0xc4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d109      	bne.n	8003f76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	621a      	str	r2, [r3, #32]
}
 8003f90:	bf00      	nop
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	40012c00 	.word	0x40012c00
 8003fa0:	40013400 	.word	0x40013400
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40014400 	.word	0x40014400
 8003fac:	40014800 	.word	0x40014800

08003fb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	051b      	lsls	r3, r3, #20
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a18      	ldr	r2, [pc, #96]	@ (8004068 <TIM_OC6_SetConfig+0xb8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00f      	beq.n	800402c <TIM_OC6_SetConfig+0x7c>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a17      	ldr	r2, [pc, #92]	@ (800406c <TIM_OC6_SetConfig+0xbc>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00b      	beq.n	800402c <TIM_OC6_SetConfig+0x7c>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a16      	ldr	r2, [pc, #88]	@ (8004070 <TIM_OC6_SetConfig+0xc0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d007      	beq.n	800402c <TIM_OC6_SetConfig+0x7c>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a15      	ldr	r2, [pc, #84]	@ (8004074 <TIM_OC6_SetConfig+0xc4>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d003      	beq.n	800402c <TIM_OC6_SetConfig+0x7c>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a14      	ldr	r2, [pc, #80]	@ (8004078 <TIM_OC6_SetConfig+0xc8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d109      	bne.n	8004040 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004032:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	029b      	lsls	r3, r3, #10
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	621a      	str	r2, [r3, #32]
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40013400 	.word	0x40013400
 8004070:	40014000 	.word	0x40014000
 8004074:	40014400 	.word	0x40014400
 8004078:	40014800 	.word	0x40014800

0800407c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800407c:	b480      	push	{r7}
 800407e:	b087      	sub	sp, #28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	f023 0201 	bic.w	r2, r3, #1
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f023 030a 	bic.w	r3, r3, #10
 80040b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	621a      	str	r2, [r3, #32]
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040da:	b480      	push	{r7}
 80040dc:	b087      	sub	sp, #28
 80040de:	af00      	add	r7, sp, #0
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	f023 0210 	bic.w	r2, r3, #16
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004104:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	031b      	lsls	r3, r3, #12
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004116:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	621a      	str	r2, [r3, #32]
}
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004150:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	f043 0307 	orr.w	r3, r3, #7
 800415c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	609a      	str	r2, [r3, #8]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800418a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	021a      	lsls	r2, r3, #8
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	431a      	orrs	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4313      	orrs	r3, r2
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	4313      	orrs	r3, r2
 800419c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	609a      	str	r2, [r3, #8]
}
 80041a4:	bf00      	nop
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f003 031f 	and.w	r3, r3, #31
 80041c2:	2201      	movs	r2, #1
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a1a      	ldr	r2, [r3, #32]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	43db      	mvns	r3, r3
 80041d2:	401a      	ands	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a1a      	ldr	r2, [r3, #32]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	431a      	orrs	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	621a      	str	r2, [r3, #32]
}
 80041ee:	bf00      	nop
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004210:	2302      	movs	r3, #2
 8004212:	e068      	b.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2e      	ldr	r2, [pc, #184]	@ (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a2d      	ldr	r2, [pc, #180]	@ (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d108      	bne.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800424e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004260:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1e      	ldr	r2, [pc, #120]	@ (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d01d      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004286:	d018      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1b      	ldr	r2, [pc, #108]	@ (80042fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1a      	ldr	r2, [pc, #104]	@ (8004300 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00e      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a18      	ldr	r2, [pc, #96]	@ (8004304 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d009      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a13      	ldr	r2, [pc, #76]	@ (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d004      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a14      	ldr	r2, [pc, #80]	@ (8004308 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d10c      	bne.n	80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40012c00 	.word	0x40012c00
 80042f8:	40013400 	.word	0x40013400
 80042fc:	40000400 	.word	0x40000400
 8004300:	40000800 	.word	0x40000800
 8004304:	40000c00 	.word	0x40000c00
 8004308:	40014000 	.word	0x40014000

0800430c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004320:	2b01      	cmp	r3, #1
 8004322:	d101      	bne.n	8004328 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004324:	2302      	movs	r3, #2
 8004326:	e065      	b.n	80043f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	4313      	orrs	r3, r2
 8004358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4313      	orrs	r3, r2
 8004366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	041b      	lsls	r3, r3, #16
 800439e:	4313      	orrs	r3, r2
 80043a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a16      	ldr	r2, [pc, #88]	@ (8004400 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d004      	beq.n	80043b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a14      	ldr	r2, [pc, #80]	@ (8004404 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d115      	bne.n	80043e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c0:	051b      	lsls	r3, r3, #20
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	40012c00 	.word	0x40012c00
 8004404:	40013400 	.word	0x40013400

08004408 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e040      	b.n	800449c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fc fd94 	bl	8000f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2224      	movs	r2, #36	@ 0x24
 8004434:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0201 	bic.w	r2, r2, #1
 8004444:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fedc 	bl	800520c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fc21 	bl	8004c9c <UART_SetConfig>
 800445a:	4603      	mov	r3, r0
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e01b      	b.n	800449c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004472:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004482:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 ff5b 	bl	8005350 <UART_CheckIdleState>
 800449a:	4603      	mov	r3, r0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	@ 0x28
 80044a8:	af02      	add	r7, sp, #8
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	4613      	mov	r3, r2
 80044b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044b8:	2b20      	cmp	r3, #32
 80044ba:	d177      	bne.n	80045ac <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <HAL_UART_Transmit+0x24>
 80044c2:	88fb      	ldrh	r3, [r7, #6]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e070      	b.n	80045ae <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2221      	movs	r2, #33	@ 0x21
 80044d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044da:	f7fd f839 	bl	8001550 <HAL_GetTick>
 80044de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	88fa      	ldrh	r2, [r7, #6]
 80044e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	88fa      	ldrh	r2, [r7, #6]
 80044ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f8:	d108      	bne.n	800450c <HAL_UART_Transmit+0x68>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d104      	bne.n	800450c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	e003      	b.n	8004514 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004510:	2300      	movs	r3, #0
 8004512:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004514:	e02f      	b.n	8004576 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2200      	movs	r2, #0
 800451e:	2180      	movs	r1, #128	@ 0x80
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 ffbd 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d004      	beq.n	8004536 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e03b      	b.n	80045ae <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10b      	bne.n	8004554 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	881a      	ldrh	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004548:	b292      	uxth	r2, r2
 800454a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	3302      	adds	r3, #2
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	e007      	b.n	8004564 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	781a      	ldrb	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3301      	adds	r3, #1
 8004562:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1c9      	bne.n	8004516 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	2200      	movs	r2, #0
 800458a:	2140      	movs	r1, #64	@ 0x40
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f000 ff87 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d004      	beq.n	80045a2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e005      	b.n	80045ae <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	e000      	b.n	80045ae <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80045ac:	2302      	movs	r3, #2
  }
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08a      	sub	sp, #40	@ 0x28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	4613      	mov	r3, r2
 80045c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d137      	bne.n	8004640 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <HAL_UART_Receive_IT+0x24>
 80045d6:	88fb      	ldrh	r3, [r7, #6]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e030      	b.n	8004642 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a18      	ldr	r2, [pc, #96]	@ (800464c <HAL_UART_Receive_IT+0x94>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d01f      	beq.n	8004630 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d018      	beq.n	8004630 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	613b      	str	r3, [r7, #16]
   return(result);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004612:	627b      	str	r3, [r7, #36]	@ 0x24
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	623b      	str	r3, [r7, #32]
 800461e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	69f9      	ldr	r1, [r7, #28]
 8004622:	6a3a      	ldr	r2, [r7, #32]
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	61bb      	str	r3, [r7, #24]
   return(result);
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e6      	bne.n	80045fe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004630:	88fb      	ldrh	r3, [r7, #6]
 8004632:	461a      	mov	r2, r3
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 ffa0 	bl	800557c <UART_Start_Receive_IT>
 800463c:	4603      	mov	r3, r0
 800463e:	e000      	b.n	8004642 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004640:	2302      	movs	r3, #2
  }
}
 8004642:	4618      	mov	r0, r3
 8004644:	3728      	adds	r7, #40	@ 0x28
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40008000 	.word	0x40008000

08004650 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b0ba      	sub	sp, #232	@ 0xe8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004676:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800467a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800467e:	4013      	ands	r3, r2
 8004680:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004684:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d115      	bne.n	80046b8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800468c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00f      	beq.n	80046b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800469c:	f003 0320 	and.w	r3, r3, #32
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d009      	beq.n	80046b8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 82ca 	beq.w	8004c42 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	4798      	blx	r3
      }
      return;
 80046b6:	e2c4      	b.n	8004c42 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80046b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8117 	beq.w	80048f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80046ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80046d2:	4b85      	ldr	r3, [pc, #532]	@ (80048e8 <HAL_UART_IRQHandler+0x298>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 810a 	beq.w	80048f0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d011      	beq.n	800470c <HAL_UART_IRQHandler+0xbc>
 80046e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00b      	beq.n	800470c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2201      	movs	r2, #1
 80046fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004702:	f043 0201 	orr.w	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800470c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d011      	beq.n	800473c <HAL_UART_IRQHandler+0xec>
 8004718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00b      	beq.n	800473c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2202      	movs	r2, #2
 800472a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004732:	f043 0204 	orr.w	r2, r3, #4
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800473c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d011      	beq.n	800476c <HAL_UART_IRQHandler+0x11c>
 8004748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800474c:	f003 0301 	and.w	r3, r3, #1
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00b      	beq.n	800476c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2204      	movs	r2, #4
 800475a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004762:	f043 0202 	orr.w	r2, r3, #2
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800476c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d017      	beq.n	80047a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b00      	cmp	r3, #0
 8004782:	d105      	bne.n	8004790 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004788:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00b      	beq.n	80047a8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2208      	movs	r2, #8
 8004796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800479e:	f043 0208 	orr.w	r2, r3, #8
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d012      	beq.n	80047da <HAL_UART_IRQHandler+0x18a>
 80047b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00c      	beq.n	80047da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 8230 	beq.w	8004c46 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00d      	beq.n	800480e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d007      	beq.n	800480e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004814:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004822:	2b40      	cmp	r3, #64	@ 0x40
 8004824:	d005      	beq.n	8004832 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800482a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800482e:	2b00      	cmp	r3, #0
 8004830:	d04f      	beq.n	80048d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 ff68 	bl	8005708 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004842:	2b40      	cmp	r3, #64	@ 0x40
 8004844:	d141      	bne.n	80048ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3308      	adds	r3, #8
 800484c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800485c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	3308      	adds	r3, #8
 800486e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004872:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004876:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800487e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800488a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1d9      	bne.n	8004846 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004896:	2b00      	cmp	r3, #0
 8004898:	d013      	beq.n	80048c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800489e:	4a13      	ldr	r2, [pc, #76]	@ (80048ec <HAL_UART_IRQHandler+0x29c>)
 80048a0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fc ffad 	bl	8001806 <HAL_DMA_Abort_IT>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d017      	beq.n	80048e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80048bc:	4610      	mov	r0, r2
 80048be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c0:	e00f      	b.n	80048e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f9d4 	bl	8004c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c8:	e00b      	b.n	80048e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f9d0 	bl	8004c70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	e007      	b.n	80048e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f9cc 	bl	8004c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80048e0:	e1b1      	b.n	8004c46 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e2:	bf00      	nop
    return;
 80048e4:	e1af      	b.n	8004c46 <HAL_UART_IRQHandler+0x5f6>
 80048e6:	bf00      	nop
 80048e8:	04000120 	.word	0x04000120
 80048ec:	080057d1 	.word	0x080057d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	f040 816a 	bne.w	8004bce <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fe:	f003 0310 	and.w	r3, r3, #16
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 8163 	beq.w	8004bce <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 815c 	beq.w	8004bce <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2210      	movs	r2, #16
 800491c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004928:	2b40      	cmp	r3, #64	@ 0x40
 800492a:	f040 80d4 	bne.w	8004ad6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800493a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800493e:	2b00      	cmp	r3, #0
 8004940:	f000 80ad 	beq.w	8004a9e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800494a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800494e:	429a      	cmp	r2, r3
 8004950:	f080 80a5 	bcs.w	8004a9e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800495a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0320 	and.w	r3, r3, #32
 800496a:	2b00      	cmp	r3, #0
 800496c:	f040 8086 	bne.w	8004a7c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004984:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800498c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800499a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800499e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80049a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80049b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1da      	bne.n	8004970 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3308      	adds	r3, #8
 80049c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80049ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3308      	adds	r3, #8
 80049da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80049de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80049e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80049e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80049f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e1      	bne.n	80049ba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3308      	adds	r3, #8
 80049fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3308      	adds	r3, #8
 8004a16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004a1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004a20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004a28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e3      	bne.n	80049f6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a4c:	f023 0310 	bic.w	r3, r3, #16
 8004a50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a66:	e841 2300 	strex	r3, r2, [r1]
 8004a6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e4      	bne.n	8004a3c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fc fe87 	bl	800178a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	4619      	mov	r1, r3
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f8f4 	bl	8004c84 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004a9c:	e0d5      	b.n	8004c4a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004aa4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	f040 80ce 	bne.w	8004c4a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	f040 80c5 	bne.w	8004c4a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004acc:	4619      	mov	r1, r3
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8d8 	bl	8004c84 <HAL_UARTEx_RxEventCallback>
      return;
 8004ad4:	e0b9      	b.n	8004c4a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 80ab 	beq.w	8004c4e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8004af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 80a6 	beq.w	8004c4e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e4      	bne.n	8004b02 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	623b      	str	r3, [r7, #32]
   return(result);
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	f023 0301 	bic.w	r3, r3, #1
 8004b4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3308      	adds	r3, #8
 8004b58:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004b5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8004b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b64:	e841 2300 	strex	r3, r2, [r1]
 8004b68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1e3      	bne.n	8004b38 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	e853 3f00 	ldrex	r3, [r3]
 8004b90:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f023 0310 	bic.w	r3, r3, #16
 8004b98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ba6:	61fb      	str	r3, [r7, #28]
 8004ba8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004baa:	69b9      	ldr	r1, [r7, #24]
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	e841 2300 	strex	r3, r2, [r1]
 8004bb2:	617b      	str	r3, [r7, #20]
   return(result);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1e4      	bne.n	8004b84 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f85c 	bl	8004c84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bcc:	e03f      	b.n	8004c4e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00e      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x5a8>
 8004bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d008      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004bee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 ffe9 	bl	8005bc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bf6:	e02d      	b.n	8004c54 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00e      	beq.n	8004c22 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01c      	beq.n	8004c52 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	4798      	blx	r3
    }
    return;
 8004c20:	e017      	b.n	8004c52 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d012      	beq.n	8004c54 <HAL_UART_IRQHandler+0x604>
 8004c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00c      	beq.n	8004c54 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fdde 	bl	80057fc <UART_EndTransmit_IT>
    return;
 8004c40:	e008      	b.n	8004c54 <HAL_UART_IRQHandler+0x604>
      return;
 8004c42:	bf00      	nop
 8004c44:	e006      	b.n	8004c54 <HAL_UART_IRQHandler+0x604>
    return;
 8004c46:	bf00      	nop
 8004c48:	e004      	b.n	8004c54 <HAL_UART_IRQHandler+0x604>
      return;
 8004c4a:	bf00      	nop
 8004c4c:	e002      	b.n	8004c54 <HAL_UART_IRQHandler+0x604>
      return;
 8004c4e:	bf00      	nop
 8004c50:	e000      	b.n	8004c54 <HAL_UART_IRQHandler+0x604>
    return;
 8004c52:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004c54:	37e8      	adds	r7, #232	@ 0xe8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop

08004c5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca0:	b08a      	sub	sp, #40	@ 0x28
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4ba4      	ldr	r3, [pc, #656]	@ (8004f5c <UART_SetConfig+0x2c0>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	6812      	ldr	r2, [r2, #0]
 8004cd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a99      	ldr	r2, [pc, #612]	@ (8004f60 <UART_SetConfig+0x2c4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d004      	beq.n	8004d08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d04:	4313      	orrs	r3, r2
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a90      	ldr	r2, [pc, #576]	@ (8004f64 <UART_SetConfig+0x2c8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d126      	bne.n	8004d74 <UART_SetConfig+0xd8>
 8004d26:	4b90      	ldr	r3, [pc, #576]	@ (8004f68 <UART_SetConfig+0x2cc>)
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	2b03      	cmp	r3, #3
 8004d32:	d81b      	bhi.n	8004d6c <UART_SetConfig+0xd0>
 8004d34:	a201      	add	r2, pc, #4	@ (adr r2, 8004d3c <UART_SetConfig+0xa0>)
 8004d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3a:	bf00      	nop
 8004d3c:	08004d4d 	.word	0x08004d4d
 8004d40:	08004d5d 	.word	0x08004d5d
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004d65 	.word	0x08004d65
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d52:	e116      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004d54:	2302      	movs	r3, #2
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d5a:	e112      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d62:	e10e      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004d64:	2308      	movs	r3, #8
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d6a:	e10a      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d72:	e106      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a7c      	ldr	r2, [pc, #496]	@ (8004f6c <UART_SetConfig+0x2d0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d138      	bne.n	8004df0 <UART_SetConfig+0x154>
 8004d7e:	4b7a      	ldr	r3, [pc, #488]	@ (8004f68 <UART_SetConfig+0x2cc>)
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d84:	f003 030c 	and.w	r3, r3, #12
 8004d88:	2b0c      	cmp	r3, #12
 8004d8a:	d82d      	bhi.n	8004de8 <UART_SetConfig+0x14c>
 8004d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d94 <UART_SetConfig+0xf8>)
 8004d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d92:	bf00      	nop
 8004d94:	08004dc9 	.word	0x08004dc9
 8004d98:	08004de9 	.word	0x08004de9
 8004d9c:	08004de9 	.word	0x08004de9
 8004da0:	08004de9 	.word	0x08004de9
 8004da4:	08004dd9 	.word	0x08004dd9
 8004da8:	08004de9 	.word	0x08004de9
 8004dac:	08004de9 	.word	0x08004de9
 8004db0:	08004de9 	.word	0x08004de9
 8004db4:	08004dd1 	.word	0x08004dd1
 8004db8:	08004de9 	.word	0x08004de9
 8004dbc:	08004de9 	.word	0x08004de9
 8004dc0:	08004de9 	.word	0x08004de9
 8004dc4:	08004de1 	.word	0x08004de1
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dce:	e0d8      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dd6:	e0d4      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004dd8:	2304      	movs	r3, #4
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dde:	e0d0      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004de0:	2308      	movs	r3, #8
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004de6:	e0cc      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004de8:	2310      	movs	r3, #16
 8004dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dee:	e0c8      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a5e      	ldr	r2, [pc, #376]	@ (8004f70 <UART_SetConfig+0x2d4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d125      	bne.n	8004e46 <UART_SetConfig+0x1aa>
 8004dfa:	4b5b      	ldr	r3, [pc, #364]	@ (8004f68 <UART_SetConfig+0x2cc>)
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e00:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e04:	2b30      	cmp	r3, #48	@ 0x30
 8004e06:	d016      	beq.n	8004e36 <UART_SetConfig+0x19a>
 8004e08:	2b30      	cmp	r3, #48	@ 0x30
 8004e0a:	d818      	bhi.n	8004e3e <UART_SetConfig+0x1a2>
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d00a      	beq.n	8004e26 <UART_SetConfig+0x18a>
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d814      	bhi.n	8004e3e <UART_SetConfig+0x1a2>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <UART_SetConfig+0x182>
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d008      	beq.n	8004e2e <UART_SetConfig+0x192>
 8004e1c:	e00f      	b.n	8004e3e <UART_SetConfig+0x1a2>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e24:	e0ad      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e26:	2302      	movs	r3, #2
 8004e28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e2c:	e0a9      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e2e:	2304      	movs	r3, #4
 8004e30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e34:	e0a5      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e36:	2308      	movs	r3, #8
 8004e38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e3c:	e0a1      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e3e:	2310      	movs	r3, #16
 8004e40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e44:	e09d      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a4a      	ldr	r2, [pc, #296]	@ (8004f74 <UART_SetConfig+0x2d8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d125      	bne.n	8004e9c <UART_SetConfig+0x200>
 8004e50:	4b45      	ldr	r3, [pc, #276]	@ (8004f68 <UART_SetConfig+0x2cc>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e5c:	d016      	beq.n	8004e8c <UART_SetConfig+0x1f0>
 8004e5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e60:	d818      	bhi.n	8004e94 <UART_SetConfig+0x1f8>
 8004e62:	2b80      	cmp	r3, #128	@ 0x80
 8004e64:	d00a      	beq.n	8004e7c <UART_SetConfig+0x1e0>
 8004e66:	2b80      	cmp	r3, #128	@ 0x80
 8004e68:	d814      	bhi.n	8004e94 <UART_SetConfig+0x1f8>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <UART_SetConfig+0x1d8>
 8004e6e:	2b40      	cmp	r3, #64	@ 0x40
 8004e70:	d008      	beq.n	8004e84 <UART_SetConfig+0x1e8>
 8004e72:	e00f      	b.n	8004e94 <UART_SetConfig+0x1f8>
 8004e74:	2300      	movs	r3, #0
 8004e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e7a:	e082      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e82:	e07e      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e84:	2304      	movs	r3, #4
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e8a:	e07a      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e92:	e076      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e94:	2310      	movs	r3, #16
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9a:	e072      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a35      	ldr	r2, [pc, #212]	@ (8004f78 <UART_SetConfig+0x2dc>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d12a      	bne.n	8004efc <UART_SetConfig+0x260>
 8004ea6:	4b30      	ldr	r3, [pc, #192]	@ (8004f68 <UART_SetConfig+0x2cc>)
 8004ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004eb4:	d01a      	beq.n	8004eec <UART_SetConfig+0x250>
 8004eb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004eba:	d81b      	bhi.n	8004ef4 <UART_SetConfig+0x258>
 8004ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ec0:	d00c      	beq.n	8004edc <UART_SetConfig+0x240>
 8004ec2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ec6:	d815      	bhi.n	8004ef4 <UART_SetConfig+0x258>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <UART_SetConfig+0x238>
 8004ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ed0:	d008      	beq.n	8004ee4 <UART_SetConfig+0x248>
 8004ed2:	e00f      	b.n	8004ef4 <UART_SetConfig+0x258>
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eda:	e052      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004edc:	2302      	movs	r3, #2
 8004ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee2:	e04e      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eea:	e04a      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004eec:	2308      	movs	r3, #8
 8004eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef2:	e046      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004efa:	e042      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a17      	ldr	r2, [pc, #92]	@ (8004f60 <UART_SetConfig+0x2c4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d13a      	bne.n	8004f7c <UART_SetConfig+0x2e0>
 8004f06:	4b18      	ldr	r3, [pc, #96]	@ (8004f68 <UART_SetConfig+0x2cc>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f14:	d01a      	beq.n	8004f4c <UART_SetConfig+0x2b0>
 8004f16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f1a:	d81b      	bhi.n	8004f54 <UART_SetConfig+0x2b8>
 8004f1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f20:	d00c      	beq.n	8004f3c <UART_SetConfig+0x2a0>
 8004f22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f26:	d815      	bhi.n	8004f54 <UART_SetConfig+0x2b8>
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <UART_SetConfig+0x298>
 8004f2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f30:	d008      	beq.n	8004f44 <UART_SetConfig+0x2a8>
 8004f32:	e00f      	b.n	8004f54 <UART_SetConfig+0x2b8>
 8004f34:	2300      	movs	r3, #0
 8004f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f3a:	e022      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f42:	e01e      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004f44:	2304      	movs	r3, #4
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4a:	e01a      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004f4c:	2308      	movs	r3, #8
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f52:	e016      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004f54:	2310      	movs	r3, #16
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f5a:	e012      	b.n	8004f82 <UART_SetConfig+0x2e6>
 8004f5c:	efff69f3 	.word	0xefff69f3
 8004f60:	40008000 	.word	0x40008000
 8004f64:	40013800 	.word	0x40013800
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	40004400 	.word	0x40004400
 8004f70:	40004800 	.word	0x40004800
 8004f74:	40004c00 	.word	0x40004c00
 8004f78:	40005000 	.word	0x40005000
 8004f7c:	2310      	movs	r3, #16
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a9f      	ldr	r2, [pc, #636]	@ (8005204 <UART_SetConfig+0x568>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d17a      	bne.n	8005082 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d824      	bhi.n	8004fde <UART_SetConfig+0x342>
 8004f94:	a201      	add	r2, pc, #4	@ (adr r2, 8004f9c <UART_SetConfig+0x300>)
 8004f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9a:	bf00      	nop
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004fdf 	.word	0x08004fdf
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08004fdf 	.word	0x08004fdf
 8004fac:	08004fcf 	.word	0x08004fcf
 8004fb0:	08004fdf 	.word	0x08004fdf
 8004fb4:	08004fdf 	.word	0x08004fdf
 8004fb8:	08004fdf 	.word	0x08004fdf
 8004fbc:	08004fd7 	.word	0x08004fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc0:	f7fd fbfc 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 8004fc4:	61f8      	str	r0, [r7, #28]
        break;
 8004fc6:	e010      	b.n	8004fea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fc8:	4b8f      	ldr	r3, [pc, #572]	@ (8005208 <UART_SetConfig+0x56c>)
 8004fca:	61fb      	str	r3, [r7, #28]
        break;
 8004fcc:	e00d      	b.n	8004fea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fce:	f7fd fb5d 	bl	800268c <HAL_RCC_GetSysClockFreq>
 8004fd2:	61f8      	str	r0, [r7, #28]
        break;
 8004fd4:	e009      	b.n	8004fea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fda:	61fb      	str	r3, [r7, #28]
        break;
 8004fdc:	e005      	b.n	8004fea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fe8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 80fb 	beq.w	80051e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	4413      	add	r3, r2
 8004ffc:	69fa      	ldr	r2, [r7, #28]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d305      	bcc.n	800500e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	429a      	cmp	r2, r3
 800500c:	d903      	bls.n	8005016 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005014:	e0e8      	b.n	80051e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	2200      	movs	r2, #0
 800501a:	461c      	mov	r4, r3
 800501c:	4615      	mov	r5, r2
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	022b      	lsls	r3, r5, #8
 8005028:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800502c:	0222      	lsls	r2, r4, #8
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	6849      	ldr	r1, [r1, #4]
 8005032:	0849      	lsrs	r1, r1, #1
 8005034:	2000      	movs	r0, #0
 8005036:	4688      	mov	r8, r1
 8005038:	4681      	mov	r9, r0
 800503a:	eb12 0a08 	adds.w	sl, r2, r8
 800503e:	eb43 0b09 	adc.w	fp, r3, r9
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005050:	4650      	mov	r0, sl
 8005052:	4659      	mov	r1, fp
 8005054:	f7fb f8b8 	bl	80001c8 <__aeabi_uldivmod>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4613      	mov	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005066:	d308      	bcc.n	800507a <UART_SetConfig+0x3de>
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800506e:	d204      	bcs.n	800507a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	60da      	str	r2, [r3, #12]
 8005078:	e0b6      	b.n	80051e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005080:	e0b2      	b.n	80051e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800508a:	d15e      	bne.n	800514a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800508c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005090:	2b08      	cmp	r3, #8
 8005092:	d828      	bhi.n	80050e6 <UART_SetConfig+0x44a>
 8005094:	a201      	add	r2, pc, #4	@ (adr r2, 800509c <UART_SetConfig+0x400>)
 8005096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509a:	bf00      	nop
 800509c:	080050c1 	.word	0x080050c1
 80050a0:	080050c9 	.word	0x080050c9
 80050a4:	080050d1 	.word	0x080050d1
 80050a8:	080050e7 	.word	0x080050e7
 80050ac:	080050d7 	.word	0x080050d7
 80050b0:	080050e7 	.word	0x080050e7
 80050b4:	080050e7 	.word	0x080050e7
 80050b8:	080050e7 	.word	0x080050e7
 80050bc:	080050df 	.word	0x080050df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c0:	f7fd fb7c 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 80050c4:	61f8      	str	r0, [r7, #28]
        break;
 80050c6:	e014      	b.n	80050f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050c8:	f7fd fb8e 	bl	80027e8 <HAL_RCC_GetPCLK2Freq>
 80050cc:	61f8      	str	r0, [r7, #28]
        break;
 80050ce:	e010      	b.n	80050f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d0:	4b4d      	ldr	r3, [pc, #308]	@ (8005208 <UART_SetConfig+0x56c>)
 80050d2:	61fb      	str	r3, [r7, #28]
        break;
 80050d4:	e00d      	b.n	80050f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050d6:	f7fd fad9 	bl	800268c <HAL_RCC_GetSysClockFreq>
 80050da:	61f8      	str	r0, [r7, #28]
        break;
 80050dc:	e009      	b.n	80050f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050e2:	61fb      	str	r3, [r7, #28]
        break;
 80050e4:	e005      	b.n	80050f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d077      	beq.n	80051e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	005a      	lsls	r2, r3, #1
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	085b      	lsrs	r3, r3, #1
 8005102:	441a      	add	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	fbb2 f3f3 	udiv	r3, r2, r3
 800510c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b0f      	cmp	r3, #15
 8005112:	d916      	bls.n	8005142 <UART_SetConfig+0x4a6>
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800511a:	d212      	bcs.n	8005142 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f023 030f 	bic.w	r3, r3, #15
 8005124:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	085b      	lsrs	r3, r3, #1
 800512a:	b29b      	uxth	r3, r3
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	b29a      	uxth	r2, r3
 8005132:	8afb      	ldrh	r3, [r7, #22]
 8005134:	4313      	orrs	r3, r2
 8005136:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	8afa      	ldrh	r2, [r7, #22]
 800513e:	60da      	str	r2, [r3, #12]
 8005140:	e052      	b.n	80051e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005148:	e04e      	b.n	80051e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800514a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800514e:	2b08      	cmp	r3, #8
 8005150:	d827      	bhi.n	80051a2 <UART_SetConfig+0x506>
 8005152:	a201      	add	r2, pc, #4	@ (adr r2, 8005158 <UART_SetConfig+0x4bc>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	0800517d 	.word	0x0800517d
 800515c:	08005185 	.word	0x08005185
 8005160:	0800518d 	.word	0x0800518d
 8005164:	080051a3 	.word	0x080051a3
 8005168:	08005193 	.word	0x08005193
 800516c:	080051a3 	.word	0x080051a3
 8005170:	080051a3 	.word	0x080051a3
 8005174:	080051a3 	.word	0x080051a3
 8005178:	0800519b 	.word	0x0800519b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800517c:	f7fd fb1e 	bl	80027bc <HAL_RCC_GetPCLK1Freq>
 8005180:	61f8      	str	r0, [r7, #28]
        break;
 8005182:	e014      	b.n	80051ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005184:	f7fd fb30 	bl	80027e8 <HAL_RCC_GetPCLK2Freq>
 8005188:	61f8      	str	r0, [r7, #28]
        break;
 800518a:	e010      	b.n	80051ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800518c:	4b1e      	ldr	r3, [pc, #120]	@ (8005208 <UART_SetConfig+0x56c>)
 800518e:	61fb      	str	r3, [r7, #28]
        break;
 8005190:	e00d      	b.n	80051ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005192:	f7fd fa7b 	bl	800268c <HAL_RCC_GetSysClockFreq>
 8005196:	61f8      	str	r0, [r7, #28]
        break;
 8005198:	e009      	b.n	80051ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800519e:	61fb      	str	r3, [r7, #28]
        break;
 80051a0:	e005      	b.n	80051ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051ac:	bf00      	nop
    }

    if (pclk != 0U)
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d019      	beq.n	80051e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	085a      	lsrs	r2, r3, #1
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	441a      	add	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	2b0f      	cmp	r3, #15
 80051cc:	d909      	bls.n	80051e2 <UART_SetConfig+0x546>
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d4:	d205      	bcs.n	80051e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60da      	str	r2, [r3, #12]
 80051e0:	e002      	b.n	80051e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80051f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3728      	adds	r7, #40	@ 0x28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005202:	bf00      	nop
 8005204:	40008000 	.word	0x40008000
 8005208:	00f42400 	.word	0x00f42400

0800520c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a0:	f003 0310 	and.w	r3, r3, #16
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01a      	beq.n	8005322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005306:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800530a:	d10a      	bne.n	8005322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	430a      	orrs	r2, r1
 8005342:	605a      	str	r2, [r3, #4]
  }
}
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b098      	sub	sp, #96	@ 0x60
 8005354:	af02      	add	r7, sp, #8
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005360:	f7fc f8f6 	bl	8001550 <HAL_GetTick>
 8005364:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b08      	cmp	r3, #8
 8005372:	d12e      	bne.n	80053d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005374:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800537c:	2200      	movs	r2, #0
 800537e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f88c 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d021      	beq.n	80053d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800539c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80053ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e6      	bne.n	800538e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e062      	b.n	8005498 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d149      	bne.n	8005474 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e8:	2200      	movs	r2, #0
 80053ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f856 	bl	80054a0 <UART_WaitOnFlagUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d03c      	beq.n	8005474 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	e853 3f00 	ldrex	r3, [r3]
 8005406:	623b      	str	r3, [r7, #32]
   return(result);
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800540e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	461a      	mov	r2, r3
 8005416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005418:	633b      	str	r3, [r7, #48]	@ 0x30
 800541a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800541e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e6      	bne.n	80053fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3308      	adds	r3, #8
 8005432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	e853 3f00 	ldrex	r3, [r3]
 800543a:	60fb      	str	r3, [r7, #12]
   return(result);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0301 	bic.w	r3, r3, #1
 8005442:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3308      	adds	r3, #8
 800544a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800544c:	61fa      	str	r2, [r7, #28]
 800544e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	69b9      	ldr	r1, [r7, #24]
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	e841 2300 	strex	r3, r2, [r1]
 8005458:	617b      	str	r3, [r7, #20]
   return(result);
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e5      	bne.n	800542c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e011      	b.n	8005498 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3758      	adds	r7, #88	@ 0x58
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b0:	e04f      	b.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d04b      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ba:	f7fc f849 	bl	8001550 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d302      	bcc.n	80054d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e04e      	b.n	8005572 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d037      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b80      	cmp	r3, #128	@ 0x80
 80054e6:	d034      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b40      	cmp	r3, #64	@ 0x40
 80054ec:	d031      	beq.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d110      	bne.n	800551e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2208      	movs	r2, #8
 8005502:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f8ff 	bl	8005708 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2208      	movs	r2, #8
 800550e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e029      	b.n	8005572 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800552c:	d111      	bne.n	8005552 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005536:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f8e5 	bl	8005708 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e00f      	b.n	8005572 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69da      	ldr	r2, [r3, #28]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4013      	ands	r3, r2
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	429a      	cmp	r2, r3
 8005560:	bf0c      	ite	eq
 8005562:	2301      	moveq	r3, #1
 8005564:	2300      	movne	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	79fb      	ldrb	r3, [r7, #7]
 800556c:	429a      	cmp	r2, r3
 800556e:	d0a0      	beq.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800557c:	b480      	push	{r7}
 800557e:	b097      	sub	sp, #92	@ 0x5c
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	88fa      	ldrh	r2, [r7, #6]
 8005594:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ae:	d10e      	bne.n	80055ce <UART_Start_Receive_IT+0x52>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d105      	bne.n	80055c4 <UART_Start_Receive_IT+0x48>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80055be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055c2:	e02d      	b.n	8005620 <UART_Start_Receive_IT+0xa4>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	22ff      	movs	r2, #255	@ 0xff
 80055c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055cc:	e028      	b.n	8005620 <UART_Start_Receive_IT+0xa4>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10d      	bne.n	80055f2 <UART_Start_Receive_IT+0x76>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d104      	bne.n	80055e8 <UART_Start_Receive_IT+0x6c>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	22ff      	movs	r2, #255	@ 0xff
 80055e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055e6:	e01b      	b.n	8005620 <UART_Start_Receive_IT+0xa4>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	227f      	movs	r2, #127	@ 0x7f
 80055ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80055f0:	e016      	b.n	8005620 <UART_Start_Receive_IT+0xa4>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055fa:	d10d      	bne.n	8005618 <UART_Start_Receive_IT+0x9c>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <UART_Start_Receive_IT+0x92>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	227f      	movs	r2, #127	@ 0x7f
 8005608:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800560c:	e008      	b.n	8005620 <UART_Start_Receive_IT+0xa4>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	223f      	movs	r2, #63	@ 0x3f
 8005612:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005616:	e003      	b.n	8005620 <UART_Start_Receive_IT+0xa4>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2222      	movs	r2, #34	@ 0x22
 800562c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3308      	adds	r3, #8
 8005636:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800563a:	e853 3f00 	ldrex	r3, [r3]
 800563e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005642:	f043 0301 	orr.w	r3, r3, #1
 8005646:	657b      	str	r3, [r7, #84]	@ 0x54
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3308      	adds	r3, #8
 800564e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005650:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005652:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005654:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005656:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005658:	e841 2300 	strex	r3, r2, [r1]
 800565c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800565e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e5      	bne.n	8005630 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800566c:	d107      	bne.n	800567e <UART_Start_Receive_IT+0x102>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4a21      	ldr	r2, [pc, #132]	@ (8005700 <UART_Start_Receive_IT+0x184>)
 800567a:	669a      	str	r2, [r3, #104]	@ 0x68
 800567c:	e002      	b.n	8005684 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4a20      	ldr	r2, [pc, #128]	@ (8005704 <UART_Start_Receive_IT+0x188>)
 8005682:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d019      	beq.n	80056c0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80056a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80056ac:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80056b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80056b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e6      	bne.n	800568c <UART_Start_Receive_IT+0x110>
 80056be:	e018      	b.n	80056f2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	613b      	str	r3, [r7, #16]
   return(result);
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f043 0320 	orr.w	r3, r3, #32
 80056d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056de:	623b      	str	r3, [r7, #32]
 80056e0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	69f9      	ldr	r1, [r7, #28]
 80056e4:	6a3a      	ldr	r2, [r7, #32]
 80056e6:	e841 2300 	strex	r3, r2, [r1]
 80056ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1e6      	bne.n	80056c0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	375c      	adds	r7, #92	@ 0x5c
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	08005a0d 	.word	0x08005a0d
 8005704:	08005851 	.word	0x08005851

08005708 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005708:	b480      	push	{r7}
 800570a:	b095      	sub	sp, #84	@ 0x54
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800571e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005720:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005724:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800572e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005730:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005734:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800573c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e6      	bne.n	8005710 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3308      	adds	r3, #8
 8005748:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	61fb      	str	r3, [r7, #28]
   return(result);
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	f023 0301 	bic.w	r3, r3, #1
 8005758:	64bb      	str	r3, [r7, #72]	@ 0x48
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3308      	adds	r3, #8
 8005760:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005762:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005764:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005766:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005768:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800576a:	e841 2300 	strex	r3, r2, [r1]
 800576e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005772:	2b00      	cmp	r3, #0
 8005774:	d1e5      	bne.n	8005742 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800577a:	2b01      	cmp	r3, #1
 800577c:	d118      	bne.n	80057b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	60bb      	str	r3, [r7, #8]
   return(result);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f023 0310 	bic.w	r3, r3, #16
 8005792:	647b      	str	r3, [r7, #68]	@ 0x44
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a0:	6979      	ldr	r1, [r7, #20]
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	e841 2300 	strex	r3, r2, [r1]
 80057a8:	613b      	str	r3, [r7, #16]
   return(result);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e6      	bne.n	800577e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2220      	movs	r2, #32
 80057b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80057c4:	bf00      	nop
 80057c6:	3754      	adds	r7, #84	@ 0x54
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff fa3e 	bl	8004c70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057f4:	bf00      	nop
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	60bb      	str	r3, [r7, #8]
   return(result);
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005818:	61fb      	str	r3, [r7, #28]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	61bb      	str	r3, [r7, #24]
 8005824:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005826:	6979      	ldr	r1, [r7, #20]
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	613b      	str	r3, [r7, #16]
   return(result);
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e6      	bne.n	8005804 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff fa0a 	bl	8004c5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005848:	bf00      	nop
 800584a:	3720      	adds	r7, #32
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b09c      	sub	sp, #112	@ 0x70
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800585e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005868:	2b22      	cmp	r3, #34	@ 0x22
 800586a:	f040 80be 	bne.w	80059ea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005874:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005878:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800587c:	b2d9      	uxtb	r1, r3
 800587e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005882:	b2da      	uxtb	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005888:	400a      	ands	r2, r1
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f040 80a3 	bne.w	80059fe <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058c0:	e853 3f00 	ldrex	r3, [r3]
 80058c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80058c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058de:	e841 2300 	strex	r3, r2, [r1]
 80058e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80058e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1e6      	bne.n	80058b8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3308      	adds	r3, #8
 80058f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058fc:	f023 0301 	bic.w	r3, r3, #1
 8005900:	667b      	str	r3, [r7, #100]	@ 0x64
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	3308      	adds	r3, #8
 8005908:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800590a:	647a      	str	r2, [r7, #68]	@ 0x44
 800590c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e5      	bne.n	80058ea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a34      	ldr	r2, [pc, #208]	@ (8005a08 <UART_RxISR_8BIT+0x1b8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d01f      	beq.n	800597c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d018      	beq.n	800597c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	623b      	str	r3, [r7, #32]
   return(result);
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800595e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	461a      	mov	r2, r3
 8005966:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005968:	633b      	str	r3, [r7, #48]	@ 0x30
 800596a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800596e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e6      	bne.n	800594a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005980:	2b01      	cmp	r3, #1
 8005982:	d12e      	bne.n	80059e2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	e853 3f00 	ldrex	r3, [r3]
 8005996:	60fb      	str	r3, [r7, #12]
   return(result);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0310 	bic.w	r3, r3, #16
 800599e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	69b9      	ldr	r1, [r7, #24]
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	e841 2300 	strex	r3, r2, [r1]
 80059b4:	617b      	str	r3, [r7, #20]
   return(result);
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e6      	bne.n	800598a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	f003 0310 	and.w	r3, r3, #16
 80059c6:	2b10      	cmp	r3, #16
 80059c8:	d103      	bne.n	80059d2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2210      	movs	r2, #16
 80059d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff f952 	bl	8004c84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059e0:	e00d      	b.n	80059fe <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7fb fa18 	bl	8000e18 <HAL_UART_RxCpltCallback>
}
 80059e8:	e009      	b.n	80059fe <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	8b1b      	ldrh	r3, [r3, #24]
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0208 	orr.w	r2, r2, #8
 80059fa:	b292      	uxth	r2, r2
 80059fc:	831a      	strh	r2, [r3, #24]
}
 80059fe:	bf00      	nop
 8005a00:	3770      	adds	r7, #112	@ 0x70
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	40008000 	.word	0x40008000

08005a0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b09c      	sub	sp, #112	@ 0x70
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a1a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a24:	2b22      	cmp	r3, #34	@ 0x22
 8005a26:	f040 80be 	bne.w	8005ba6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005a30:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a38:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005a3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005a42:	4013      	ands	r3, r2
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a4e:	1c9a      	adds	r2, r3, #2
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f040 80a3 	bne.w	8005bba <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a88:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a92:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a94:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005a98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e6      	bne.n	8005a74 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3308      	adds	r3, #8
 8005aac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab0:	e853 3f00 	ldrex	r3, [r3]
 8005ab4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab8:	f023 0301 	bic.w	r3, r3, #1
 8005abc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ac6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005acc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e5      	bne.n	8005aa6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a34      	ldr	r2, [pc, #208]	@ (8005bc4 <UART_RxISR_16BIT+0x1b8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d01f      	beq.n	8005b38 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d018      	beq.n	8005b38 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b26:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e6      	bne.n	8005b06 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d12e      	bne.n	8005b9e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f023 0310 	bic.w	r3, r3, #16
 8005b5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	461a      	mov	r2, r3
 8005b62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b64:	61bb      	str	r3, [r7, #24]
 8005b66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	6979      	ldr	r1, [r7, #20]
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	613b      	str	r3, [r7, #16]
   return(result);
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e6      	bne.n	8005b46 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f003 0310 	and.w	r3, r3, #16
 8005b82:	2b10      	cmp	r3, #16
 8005b84:	d103      	bne.n	8005b8e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2210      	movs	r2, #16
 8005b8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005b94:	4619      	mov	r1, r3
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7ff f874 	bl	8004c84 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b9c:	e00d      	b.n	8005bba <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fb f93a 	bl	8000e18 <HAL_UART_RxCpltCallback>
}
 8005ba4:	e009      	b.n	8005bba <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	8b1b      	ldrh	r3, [r3, #24]
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0208 	orr.w	r2, r2, #8
 8005bb6:	b292      	uxth	r2, r2
 8005bb8:	831a      	strh	r2, [r3, #24]
}
 8005bba:	bf00      	nop
 8005bbc:	3770      	adds	r7, #112	@ 0x70
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40008000 	.word	0x40008000

08005bc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <atoi>:
 8005bdc:	220a      	movs	r2, #10
 8005bde:	2100      	movs	r1, #0
 8005be0:	f000 b87a 	b.w	8005cd8 <strtol>

08005be4 <_strtol_l.constprop.0>:
 8005be4:	2b24      	cmp	r3, #36	@ 0x24
 8005be6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bea:	4686      	mov	lr, r0
 8005bec:	4690      	mov	r8, r2
 8005bee:	d801      	bhi.n	8005bf4 <_strtol_l.constprop.0+0x10>
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d106      	bne.n	8005c02 <_strtol_l.constprop.0+0x1e>
 8005bf4:	f000 f882 	bl	8005cfc <__errno>
 8005bf8:	2316      	movs	r3, #22
 8005bfa:	6003      	str	r3, [r0, #0]
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c02:	4834      	ldr	r0, [pc, #208]	@ (8005cd4 <_strtol_l.constprop.0+0xf0>)
 8005c04:	460d      	mov	r5, r1
 8005c06:	462a      	mov	r2, r5
 8005c08:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c0c:	5d06      	ldrb	r6, [r0, r4]
 8005c0e:	f016 0608 	ands.w	r6, r6, #8
 8005c12:	d1f8      	bne.n	8005c06 <_strtol_l.constprop.0+0x22>
 8005c14:	2c2d      	cmp	r4, #45	@ 0x2d
 8005c16:	d12d      	bne.n	8005c74 <_strtol_l.constprop.0+0x90>
 8005c18:	782c      	ldrb	r4, [r5, #0]
 8005c1a:	2601      	movs	r6, #1
 8005c1c:	1c95      	adds	r5, r2, #2
 8005c1e:	f033 0210 	bics.w	r2, r3, #16
 8005c22:	d109      	bne.n	8005c38 <_strtol_l.constprop.0+0x54>
 8005c24:	2c30      	cmp	r4, #48	@ 0x30
 8005c26:	d12a      	bne.n	8005c7e <_strtol_l.constprop.0+0x9a>
 8005c28:	782a      	ldrb	r2, [r5, #0]
 8005c2a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005c2e:	2a58      	cmp	r2, #88	@ 0x58
 8005c30:	d125      	bne.n	8005c7e <_strtol_l.constprop.0+0x9a>
 8005c32:	786c      	ldrb	r4, [r5, #1]
 8005c34:	2310      	movs	r3, #16
 8005c36:	3502      	adds	r5, #2
 8005c38:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005c3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005c40:	2200      	movs	r2, #0
 8005c42:	fbbc f9f3 	udiv	r9, ip, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	fb03 ca19 	mls	sl, r3, r9, ip
 8005c4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005c50:	2f09      	cmp	r7, #9
 8005c52:	d81b      	bhi.n	8005c8c <_strtol_l.constprop.0+0xa8>
 8005c54:	463c      	mov	r4, r7
 8005c56:	42a3      	cmp	r3, r4
 8005c58:	dd27      	ble.n	8005caa <_strtol_l.constprop.0+0xc6>
 8005c5a:	1c57      	adds	r7, r2, #1
 8005c5c:	d007      	beq.n	8005c6e <_strtol_l.constprop.0+0x8a>
 8005c5e:	4581      	cmp	r9, r0
 8005c60:	d320      	bcc.n	8005ca4 <_strtol_l.constprop.0+0xc0>
 8005c62:	d101      	bne.n	8005c68 <_strtol_l.constprop.0+0x84>
 8005c64:	45a2      	cmp	sl, r4
 8005c66:	db1d      	blt.n	8005ca4 <_strtol_l.constprop.0+0xc0>
 8005c68:	fb00 4003 	mla	r0, r0, r3, r4
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c72:	e7eb      	b.n	8005c4c <_strtol_l.constprop.0+0x68>
 8005c74:	2c2b      	cmp	r4, #43	@ 0x2b
 8005c76:	bf04      	itt	eq
 8005c78:	782c      	ldrbeq	r4, [r5, #0]
 8005c7a:	1c95      	addeq	r5, r2, #2
 8005c7c:	e7cf      	b.n	8005c1e <_strtol_l.constprop.0+0x3a>
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1da      	bne.n	8005c38 <_strtol_l.constprop.0+0x54>
 8005c82:	2c30      	cmp	r4, #48	@ 0x30
 8005c84:	bf0c      	ite	eq
 8005c86:	2308      	moveq	r3, #8
 8005c88:	230a      	movne	r3, #10
 8005c8a:	e7d5      	b.n	8005c38 <_strtol_l.constprop.0+0x54>
 8005c8c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005c90:	2f19      	cmp	r7, #25
 8005c92:	d801      	bhi.n	8005c98 <_strtol_l.constprop.0+0xb4>
 8005c94:	3c37      	subs	r4, #55	@ 0x37
 8005c96:	e7de      	b.n	8005c56 <_strtol_l.constprop.0+0x72>
 8005c98:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005c9c:	2f19      	cmp	r7, #25
 8005c9e:	d804      	bhi.n	8005caa <_strtol_l.constprop.0+0xc6>
 8005ca0:	3c57      	subs	r4, #87	@ 0x57
 8005ca2:	e7d8      	b.n	8005c56 <_strtol_l.constprop.0+0x72>
 8005ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca8:	e7e1      	b.n	8005c6e <_strtol_l.constprop.0+0x8a>
 8005caa:	1c53      	adds	r3, r2, #1
 8005cac:	d108      	bne.n	8005cc0 <_strtol_l.constprop.0+0xdc>
 8005cae:	2322      	movs	r3, #34	@ 0x22
 8005cb0:	f8ce 3000 	str.w	r3, [lr]
 8005cb4:	4660      	mov	r0, ip
 8005cb6:	f1b8 0f00 	cmp.w	r8, #0
 8005cba:	d0a0      	beq.n	8005bfe <_strtol_l.constprop.0+0x1a>
 8005cbc:	1e69      	subs	r1, r5, #1
 8005cbe:	e006      	b.n	8005cce <_strtol_l.constprop.0+0xea>
 8005cc0:	b106      	cbz	r6, 8005cc4 <_strtol_l.constprop.0+0xe0>
 8005cc2:	4240      	negs	r0, r0
 8005cc4:	f1b8 0f00 	cmp.w	r8, #0
 8005cc8:	d099      	beq.n	8005bfe <_strtol_l.constprop.0+0x1a>
 8005cca:	2a00      	cmp	r2, #0
 8005ccc:	d1f6      	bne.n	8005cbc <_strtol_l.constprop.0+0xd8>
 8005cce:	f8c8 1000 	str.w	r1, [r8]
 8005cd2:	e794      	b.n	8005bfe <_strtol_l.constprop.0+0x1a>
 8005cd4:	08005db1 	.word	0x08005db1

08005cd8 <strtol>:
 8005cd8:	4613      	mov	r3, r2
 8005cda:	460a      	mov	r2, r1
 8005cdc:	4601      	mov	r1, r0
 8005cde:	4802      	ldr	r0, [pc, #8]	@ (8005ce8 <strtol+0x10>)
 8005ce0:	6800      	ldr	r0, [r0, #0]
 8005ce2:	f7ff bf7f 	b.w	8005be4 <_strtol_l.constprop.0>
 8005ce6:	bf00      	nop
 8005ce8:	2000000c 	.word	0x2000000c

08005cec <memset>:
 8005cec:	4402      	add	r2, r0
 8005cee:	4603      	mov	r3, r0
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d100      	bne.n	8005cf6 <memset+0xa>
 8005cf4:	4770      	bx	lr
 8005cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8005cfa:	e7f9      	b.n	8005cf0 <memset+0x4>

08005cfc <__errno>:
 8005cfc:	4b01      	ldr	r3, [pc, #4]	@ (8005d04 <__errno+0x8>)
 8005cfe:	6818      	ldr	r0, [r3, #0]
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	2000000c 	.word	0x2000000c

08005d08 <__libc_init_array>:
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	4d0d      	ldr	r5, [pc, #52]	@ (8005d40 <__libc_init_array+0x38>)
 8005d0c:	4c0d      	ldr	r4, [pc, #52]	@ (8005d44 <__libc_init_array+0x3c>)
 8005d0e:	1b64      	subs	r4, r4, r5
 8005d10:	10a4      	asrs	r4, r4, #2
 8005d12:	2600      	movs	r6, #0
 8005d14:	42a6      	cmp	r6, r4
 8005d16:	d109      	bne.n	8005d2c <__libc_init_array+0x24>
 8005d18:	4d0b      	ldr	r5, [pc, #44]	@ (8005d48 <__libc_init_array+0x40>)
 8005d1a:	4c0c      	ldr	r4, [pc, #48]	@ (8005d4c <__libc_init_array+0x44>)
 8005d1c:	f000 f818 	bl	8005d50 <_init>
 8005d20:	1b64      	subs	r4, r4, r5
 8005d22:	10a4      	asrs	r4, r4, #2
 8005d24:	2600      	movs	r6, #0
 8005d26:	42a6      	cmp	r6, r4
 8005d28:	d105      	bne.n	8005d36 <__libc_init_array+0x2e>
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
 8005d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d30:	4798      	blx	r3
 8005d32:	3601      	adds	r6, #1
 8005d34:	e7ee      	b.n	8005d14 <__libc_init_array+0xc>
 8005d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d3a:	4798      	blx	r3
 8005d3c:	3601      	adds	r6, #1
 8005d3e:	e7f2      	b.n	8005d26 <__libc_init_array+0x1e>
 8005d40:	08005ebc 	.word	0x08005ebc
 8005d44:	08005ebc 	.word	0x08005ebc
 8005d48:	08005ebc 	.word	0x08005ebc
 8005d4c:	08005ec0 	.word	0x08005ec0

08005d50 <_init>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	bf00      	nop
 8005d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d56:	bc08      	pop	{r3}
 8005d58:	469e      	mov	lr, r3
 8005d5a:	4770      	bx	lr

08005d5c <_fini>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	bf00      	nop
 8005d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d62:	bc08      	pop	{r3}
 8005d64:	469e      	mov	lr, r3
 8005d66:	4770      	bx	lr
