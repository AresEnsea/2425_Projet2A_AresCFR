
servo_cfr_l476rg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005828  08005828  00006828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005870  08005870  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005870  08005870  00006870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005878  08005878  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005878  08005878  00006878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800587c  0800587c  0000687c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005880  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  2000000c  0800588c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  0800588c  000071e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ce5  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c1  00000000  00000000  00017d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00019fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bfa  00000000  00000000  0001af30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026be7  00000000  00000000  0001bb2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001229e  00000000  00000000  00042711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f254a  00000000  00000000  000549af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146ef9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004080  00000000  00000000  00146f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0014afbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005810 	.word	0x08005810

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005810 	.word	0x08005810

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b088      	sub	sp, #32
 80004bc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004be:	f000 fdc5 	bl	800104c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004c2:	f000 f941 	bl	8000748 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004c6:	f000 fb4d 	bl	8000b64 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004ca:	f000 fb1b 	bl	8000b04 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 80004ce:	f000 f98d 	bl	80007ec <MX_TIM1_Init>
	MX_TIM3_Init();
 80004d2:	f000 fa4f 	bl	8000974 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 80004d6:	f000 fae5 	bl	8000aa4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);  // PA7 (première pince, milieu)
 80004da:	2104      	movs	r1, #4
 80004dc:	4892      	ldr	r0, [pc, #584]	@ (8000728 <main+0x270>)
 80004de:	f002 fd5b 	bl	8002f98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);  // PB0 (première pince, droit)
 80004e2:	2108      	movs	r1, #8
 80004e4:	4890      	ldr	r0, [pc, #576]	@ (8000728 <main+0x270>)
 80004e6:	f002 fd57 	bl	8002f98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // PA8 (première pince, gauche)
 80004ea:	2100      	movs	r1, #0
 80004ec:	488f      	ldr	r0, [pc, #572]	@ (800072c <main+0x274>)
 80004ee:	f002 fd53 	bl	8002f98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);  // PA9 (deuxième pince, milieu)
 80004f2:	2104      	movs	r1, #4
 80004f4:	488d      	ldr	r0, [pc, #564]	@ (800072c <main+0x274>)
 80004f6:	f002 fd4f 	bl	8002f98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);  // PA10 (deuxième pince, droit)
 80004fa:	2108      	movs	r1, #8
 80004fc:	488b      	ldr	r0, [pc, #556]	@ (800072c <main+0x274>)
 80004fe:	f002 fd4b 	bl	8002f98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);  // PA6 (deuxième pince, gauche)
 8000502:	2100      	movs	r1, #0
 8000504:	4888      	ldr	r0, [pc, #544]	@ (8000728 <main+0x270>)
 8000506:	f002 fd47 	bl	8002f98 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);  // PB1 (banderolle)
 800050a:	210c      	movs	r1, #12
 800050c:	4886      	ldr	r0, [pc, #536]	@ (8000728 <main+0x270>)
 800050e:	f002 fd43 	bl	8002f98 <HAL_TIM_PWM_Start>

	HAL_UART_Receive_IT(&huart1, (uint8_t *)rx_data, 13);
 8000512:	220d      	movs	r2, #13
 8000514:	4986      	ldr	r1, [pc, #536]	@ (8000730 <main+0x278>)
 8000516:	4887      	ldr	r0, [pc, #540]	@ (8000734 <main+0x27c>)
 8000518:	f003 fe3c 	bl	8004194 <HAL_UART_Receive_IT>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// Find the start marker '<' in rx_data
		int offset = -1;
 800051c:	f04f 33ff 	mov.w	r3, #4294967295
 8000520:	61fb      	str	r3, [r7, #28]
		for (int j = 0; j < sizeof(rx_data); j++) {
 8000522:	2300      	movs	r3, #0
 8000524:	61bb      	str	r3, [r7, #24]
 8000526:	e00b      	b.n	8000540 <main+0x88>
			if (rx_data[j] == '<') {
 8000528:	4a81      	ldr	r2, [pc, #516]	@ (8000730 <main+0x278>)
 800052a:	69bb      	ldr	r3, [r7, #24]
 800052c:	4413      	add	r3, r2
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b3c      	cmp	r3, #60	@ 0x3c
 8000532:	d102      	bne.n	800053a <main+0x82>
				offset = j;
 8000534:	69bb      	ldr	r3, [r7, #24]
 8000536:	61fb      	str	r3, [r7, #28]
				break;
 8000538:	e005      	b.n	8000546 <main+0x8e>
		for (int j = 0; j < sizeof(rx_data); j++) {
 800053a:	69bb      	ldr	r3, [r7, #24]
 800053c:	3301      	adds	r3, #1
 800053e:	61bb      	str	r3, [r7, #24]
 8000540:	69bb      	ldr	r3, [r7, #24]
 8000542:	2b0c      	cmp	r3, #12
 8000544:	d9f0      	bls.n	8000528 <main+0x70>
			}
		}

		// Process data if '>' is found
		if (offset >= 0) {
 8000546:	69fb      	ldr	r3, [r7, #28]
 8000548:	2b00      	cmp	r3, #0
 800054a:	f2c0 80e7 	blt.w	800071c <main+0x264>
			// Debug output: Reconstruct the message in circular order
			char message[15]; // 13 caractères de rx_data + 2 pour "\r\n"
			for (int i = 0; i < 13; i++) {
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	e018      	b.n	8000586 <main+0xce>
				message[i] = rx_data[(offset + i) % 13];
 8000554:	69fa      	ldr	r2, [r7, #28]
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	18d1      	adds	r1, r2, r3
 800055a:	4b77      	ldr	r3, [pc, #476]	@ (8000738 <main+0x280>)
 800055c:	fb83 2301 	smull	r2, r3, r3, r1
 8000560:	109a      	asrs	r2, r3, #2
 8000562:	17cb      	asrs	r3, r1, #31
 8000564:	1ad2      	subs	r2, r2, r3
 8000566:	4613      	mov	r3, r2
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	4413      	add	r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	4413      	add	r3, r2
 8000570:	1aca      	subs	r2, r1, r3
 8000572:	4b6f      	ldr	r3, [pc, #444]	@ (8000730 <main+0x278>)
 8000574:	5c99      	ldrb	r1, [r3, r2]
 8000576:	1d3a      	adds	r2, r7, #4
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	4413      	add	r3, r2
 800057c:	460a      	mov	r2, r1
 800057e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 13; i++) {
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	3301      	adds	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	2b0c      	cmp	r3, #12
 800058a:	dde3      	ble.n	8000554 <main+0x9c>
			}
			message[13] = '\r'; // Ajouter retour chariot
 800058c:	230d      	movs	r3, #13
 800058e:	747b      	strb	r3, [r7, #17]
			message[14] = '\n'; // Ajouter nouvelle ligne
 8000590:	230a      	movs	r3, #10
 8000592:	74bb      	strb	r3, [r7, #18]
			HAL_UART_Transmit(&huart2, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);
 8000594:	1d39      	adds	r1, r7, #4
 8000596:	f04f 33ff 	mov.w	r3, #4294967295
 800059a:	220f      	movs	r2, #15
 800059c:	4867      	ldr	r0, [pc, #412]	@ (800073c <main+0x284>)
 800059e:	f003 fd6f 	bl	8004080 <HAL_UART_Transmit>

			// Première pince
			if (rx_data[(offset + 1) % 13] == '0') { // PA7 (TIM3_CH2) milieu
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	1c59      	adds	r1, r3, #1
 80005a6:	4b64      	ldr	r3, [pc, #400]	@ (8000738 <main+0x280>)
 80005a8:	fb83 2301 	smull	r2, r3, r3, r1
 80005ac:	109a      	asrs	r2, r3, #2
 80005ae:	17cb      	asrs	r3, r1, #31
 80005b0:	1ad2      	subs	r2, r2, r3
 80005b2:	4613      	mov	r3, r2
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	4413      	add	r3, r2
 80005b8:	009b      	lsls	r3, r3, #2
 80005ba:	4413      	add	r3, r2
 80005bc:	1aca      	subs	r2, r1, r3
 80005be:	4b5c      	ldr	r3, [pc, #368]	@ (8000730 <main+0x278>)
 80005c0:	5c9b      	ldrb	r3, [r3, r2]
 80005c2:	2b30      	cmp	r3, #48	@ 0x30
 80005c4:	d104      	bne.n	80005d0 <main+0x118>
				TIM3->CCR2 = SERVO_MAX_M;
 80005c6:	4b5e      	ldr	r3, [pc, #376]	@ (8000740 <main+0x288>)
 80005c8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80005cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80005ce:	e003      	b.n	80005d8 <main+0x120>
			} else {
				TIM3->CCR2 = SERVO_MIN_M;
 80005d0:	4b5b      	ldr	r3, [pc, #364]	@ (8000740 <main+0x288>)
 80005d2:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80005d6:	639a      	str	r2, [r3, #56]	@ 0x38
			}
			if (rx_data[(offset + 2) % 13] == '0') { // PB0 (TIM3_CH3) droit
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	1c99      	adds	r1, r3, #2
 80005dc:	4b56      	ldr	r3, [pc, #344]	@ (8000738 <main+0x280>)
 80005de:	fb83 2301 	smull	r2, r3, r3, r1
 80005e2:	109a      	asrs	r2, r3, #2
 80005e4:	17cb      	asrs	r3, r1, #31
 80005e6:	1ad2      	subs	r2, r2, r3
 80005e8:	4613      	mov	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	4413      	add	r3, r2
 80005f2:	1aca      	subs	r2, r1, r3
 80005f4:	4b4e      	ldr	r3, [pc, #312]	@ (8000730 <main+0x278>)
 80005f6:	5c9b      	ldrb	r3, [r3, r2]
 80005f8:	2b30      	cmp	r3, #48	@ 0x30
 80005fa:	d104      	bne.n	8000606 <main+0x14e>
				TIM3->CCR3 = SERVO_MIN_D;
 80005fc:	4b50      	ldr	r3, [pc, #320]	@ (8000740 <main+0x288>)
 80005fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000602:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000604:	e003      	b.n	800060e <main+0x156>
			} else {
				TIM3->CCR3 = SERVO_MAX_D;
 8000606:	4b4e      	ldr	r3, [pc, #312]	@ (8000740 <main+0x288>)
 8000608:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 800060c:	63da      	str	r2, [r3, #60]	@ 0x3c
			}

			if (rx_data[(offset + 3) % 13] == '0') { // PA8 (TIM1_CH1) gauche
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	1cd9      	adds	r1, r3, #3
 8000612:	4b49      	ldr	r3, [pc, #292]	@ (8000738 <main+0x280>)
 8000614:	fb83 2301 	smull	r2, r3, r3, r1
 8000618:	109a      	asrs	r2, r3, #2
 800061a:	17cb      	asrs	r3, r1, #31
 800061c:	1ad2      	subs	r2, r2, r3
 800061e:	4613      	mov	r3, r2
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	4413      	add	r3, r2
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	4413      	add	r3, r2
 8000628:	1aca      	subs	r2, r1, r3
 800062a:	4b41      	ldr	r3, [pc, #260]	@ (8000730 <main+0x278>)
 800062c:	5c9b      	ldrb	r3, [r3, r2]
 800062e:	2b30      	cmp	r3, #48	@ 0x30
 8000630:	d104      	bne.n	800063c <main+0x184>
				TIM1->CCR1 = SERVO_MAX_G;
 8000632:	4b44      	ldr	r3, [pc, #272]	@ (8000744 <main+0x28c>)
 8000634:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000638:	635a      	str	r2, [r3, #52]	@ 0x34
 800063a:	e003      	b.n	8000644 <main+0x18c>
			} else {
				TIM1->CCR1 = SERVO_MIN_G;
 800063c:	4b41      	ldr	r3, [pc, #260]	@ (8000744 <main+0x28c>)
 800063e:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000642:	635a      	str	r2, [r3, #52]	@ 0x34
			}

			// Deuxième pince
			if (rx_data[(offset + 4) % 13] == '0') { // PA9 (TIM1_CH2) milieu
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	1d19      	adds	r1, r3, #4
 8000648:	4b3b      	ldr	r3, [pc, #236]	@ (8000738 <main+0x280>)
 800064a:	fb83 2301 	smull	r2, r3, r3, r1
 800064e:	109a      	asrs	r2, r3, #2
 8000650:	17cb      	asrs	r3, r1, #31
 8000652:	1ad2      	subs	r2, r2, r3
 8000654:	4613      	mov	r3, r2
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	4413      	add	r3, r2
 800065e:	1aca      	subs	r2, r1, r3
 8000660:	4b33      	ldr	r3, [pc, #204]	@ (8000730 <main+0x278>)
 8000662:	5c9b      	ldrb	r3, [r3, r2]
 8000664:	2b30      	cmp	r3, #48	@ 0x30
 8000666:	d104      	bne.n	8000672 <main+0x1ba>
				TIM1->CCR2 = SERVO_MAX_M;
 8000668:	4b36      	ldr	r3, [pc, #216]	@ (8000744 <main+0x28c>)
 800066a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800066e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000670:	e003      	b.n	800067a <main+0x1c2>
			} else {
				TIM1->CCR2 = SERVO_MIN_M;
 8000672:	4b34      	ldr	r3, [pc, #208]	@ (8000744 <main+0x28c>)
 8000674:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000678:	639a      	str	r2, [r3, #56]	@ 0x38
			}
			if (rx_data[(offset + 5) % 13] == '0') { // PA10 (TIM1_CH3) droit
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	1d59      	adds	r1, r3, #5
 800067e:	4b2e      	ldr	r3, [pc, #184]	@ (8000738 <main+0x280>)
 8000680:	fb83 2301 	smull	r2, r3, r3, r1
 8000684:	109a      	asrs	r2, r3, #2
 8000686:	17cb      	asrs	r3, r1, #31
 8000688:	1ad2      	subs	r2, r2, r3
 800068a:	4613      	mov	r3, r2
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	4413      	add	r3, r2
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	4413      	add	r3, r2
 8000694:	1aca      	subs	r2, r1, r3
 8000696:	4b26      	ldr	r3, [pc, #152]	@ (8000730 <main+0x278>)
 8000698:	5c9b      	ldrb	r3, [r3, r2]
 800069a:	2b30      	cmp	r3, #48	@ 0x30
 800069c:	d104      	bne.n	80006a8 <main+0x1f0>
				TIM1->CCR3 = SERVO_MIN_D;
 800069e:	4b29      	ldr	r3, [pc, #164]	@ (8000744 <main+0x28c>)
 80006a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006a6:	e003      	b.n	80006b0 <main+0x1f8>
			} else {
				TIM1->CCR3 = SERVO_MAX_D;
 80006a8:	4b26      	ldr	r3, [pc, #152]	@ (8000744 <main+0x28c>)
 80006aa:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
			}

			if (rx_data[(offset + 6) % 13] == '0') { // PA6 (TIM3_CH1) gauche
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	1d99      	adds	r1, r3, #6
 80006b4:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <main+0x280>)
 80006b6:	fb83 2301 	smull	r2, r3, r3, r1
 80006ba:	109a      	asrs	r2, r3, #2
 80006bc:	17cb      	asrs	r3, r1, #31
 80006be:	1ad2      	subs	r2, r2, r3
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	4413      	add	r3, r2
 80006ca:	1aca      	subs	r2, r1, r3
 80006cc:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <main+0x278>)
 80006ce:	5c9b      	ldrb	r3, [r3, r2]
 80006d0:	2b30      	cmp	r3, #48	@ 0x30
 80006d2:	d104      	bne.n	80006de <main+0x226>
				TIM3->CCR1 = SERVO_MAX_G;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <main+0x288>)
 80006d6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80006da:	635a      	str	r2, [r3, #52]	@ 0x34
 80006dc:	e003      	b.n	80006e6 <main+0x22e>
			} else {
				TIM3->CCR1 = SERVO_MIN_G;
 80006de:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <main+0x288>)
 80006e0:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 80006e4:	635a      	str	r2, [r3, #52]	@ 0x34
			}

			// banderolle
			if (rx_data[(offset + 7) % 13] == '0') { // PB1 (TIM3_CH4)
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	1dd9      	adds	r1, r3, #7
 80006ea:	4b13      	ldr	r3, [pc, #76]	@ (8000738 <main+0x280>)
 80006ec:	fb83 2301 	smull	r2, r3, r3, r1
 80006f0:	109a      	asrs	r2, r3, #2
 80006f2:	17cb      	asrs	r3, r1, #31
 80006f4:	1ad2      	subs	r2, r2, r3
 80006f6:	4613      	mov	r3, r2
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4413      	add	r3, r2
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	4413      	add	r3, r2
 8000700:	1aca      	subs	r2, r1, r3
 8000702:	4b0b      	ldr	r3, [pc, #44]	@ (8000730 <main+0x278>)
 8000704:	5c9b      	ldrb	r3, [r3, r2]
 8000706:	2b30      	cmp	r3, #48	@ 0x30
 8000708:	d104      	bne.n	8000714 <main+0x25c>
				TIM3->CCR4 = SERVO_MAX_G;
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <main+0x288>)
 800070c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000710:	641a      	str	r2, [r3, #64]	@ 0x40
 8000712:	e003      	b.n	800071c <main+0x264>
			} else {
				TIM3->CCR4 = SERVO_MIN_G;
 8000714:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <main+0x288>)
 8000716:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 800071a:	641a      	str	r2, [r3, #64]	@ 0x40
			}
		}

		// Re-enable UART reception to resynchronize
		HAL_UART_Receive_IT(&huart1, (uint8_t *)rx_data, sizeof(rx_data));
 800071c:	220d      	movs	r2, #13
 800071e:	4904      	ldr	r1, [pc, #16]	@ (8000730 <main+0x278>)
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <main+0x27c>)
 8000722:	f003 fd37 	bl	8004194 <HAL_UART_Receive_IT>
	{
 8000726:	e6f9      	b.n	800051c <main+0x64>
 8000728:	20000074 	.word	0x20000074
 800072c:	20000028 	.word	0x20000028
 8000730:	200001d0 	.word	0x200001d0
 8000734:	200000c0 	.word	0x200000c0
 8000738:	4ec4ec4f 	.word	0x4ec4ec4f
 800073c:	20000148 	.word	0x20000148
 8000740:	40000400 	.word	0x40000400
 8000744:	40012c00 	.word	0x40012c00

08000748 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b096      	sub	sp, #88	@ 0x58
 800074c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2244      	movs	r2, #68	@ 0x44
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f005 f82e 	bl	80057b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	463b      	mov	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800076a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800076e:	f001 f849 	bl	8001804 <HAL_PWREx_ControlVoltageScaling>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000778:	f000 fa70 	bl	8000c5c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000784:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000786:	2310      	movs	r3, #16
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078a:	2302      	movs	r3, #2
 800078c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078e:	2302      	movs	r3, #2
 8000790:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000792:	2301      	movs	r3, #1
 8000794:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000796:	230a      	movs	r3, #10
 8000798:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800079a:	2307      	movs	r3, #7
 800079c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800079e:	2302      	movs	r3, #2
 80007a0:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 f880 	bl	80018b0 <HAL_RCC_OscConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x72>
	{
		Error_Handler();
 80007b6:	f000 fa51 	bl	8000c5c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ba:	230f      	movs	r3, #15
 80007bc:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007be:	2303      	movs	r3, #3
 80007c0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	2104      	movs	r1, #4
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 fc48 	bl	8002068 <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80007de:	f000 fa3d 	bl	8000c5c <Error_Handler>
	}
}
 80007e2:	bf00      	nop
 80007e4:	3758      	adds	r7, #88	@ 0x58
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b09a      	sub	sp, #104	@ 0x68
 80007f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000800:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800080c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
 800081c:	615a      	str	r2, [r3, #20]
 800081e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	222c      	movs	r2, #44	@ 0x2c
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f004 ffc6 	bl	80057b8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800082c:	4b4f      	ldr	r3, [pc, #316]	@ (800096c <MX_TIM1_Init+0x180>)
 800082e:	4a50      	ldr	r2, [pc, #320]	@ (8000970 <MX_TIM1_Init+0x184>)
 8000830:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 80-1;
 8000832:	4b4e      	ldr	r3, [pc, #312]	@ (800096c <MX_TIM1_Init+0x180>)
 8000834:	224f      	movs	r2, #79	@ 0x4f
 8000836:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	4b4c      	ldr	r3, [pc, #304]	@ (800096c <MX_TIM1_Init+0x180>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 3002-1;
 800083e:	4b4b      	ldr	r3, [pc, #300]	@ (800096c <MX_TIM1_Init+0x180>)
 8000840:	f640 32b9 	movw	r2, #3001	@ 0xbb9
 8000844:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000846:	4b49      	ldr	r3, [pc, #292]	@ (800096c <MX_TIM1_Init+0x180>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800084c:	4b47      	ldr	r3, [pc, #284]	@ (800096c <MX_TIM1_Init+0x180>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000852:	4b46      	ldr	r3, [pc, #280]	@ (800096c <MX_TIM1_Init+0x180>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000858:	4844      	ldr	r0, [pc, #272]	@ (800096c <MX_TIM1_Init+0x180>)
 800085a:	f002 fae5 	bl	8002e28 <HAL_TIM_Base_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 8000864:	f000 f9fa 	bl	8000c5c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800086c:	65bb      	str	r3, [r7, #88]	@ 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800086e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000872:	4619      	mov	r1, r3
 8000874:	483d      	ldr	r0, [pc, #244]	@ (800096c <MX_TIM1_Init+0x180>)
 8000876:	f002 fda9 	bl	80033cc <HAL_TIM_ConfigClockSource>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM1_Init+0x98>
	{
		Error_Handler();
 8000880:	f000 f9ec 	bl	8000c5c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000884:	4839      	ldr	r0, [pc, #228]	@ (800096c <MX_TIM1_Init+0x180>)
 8000886:	f002 fb26 	bl	8002ed6 <HAL_TIM_PWM_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM1_Init+0xa8>
	{
		Error_Handler();
 8000890:	f000 f9e4 	bl	8000c5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000894:	2300      	movs	r3, #0
 8000896:	64fb      	str	r3, [r7, #76]	@ 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000898:	2300      	movs	r3, #0
 800089a:	653b      	str	r3, [r7, #80]	@ 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80008a4:	4619      	mov	r1, r3
 80008a6:	4831      	ldr	r0, [pc, #196]	@ (800096c <MX_TIM1_Init+0x180>)
 80008a8:	f003 fa96 	bl	8003dd8 <HAL_TIMEx_MasterConfigSynchronization>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0xca>
	{
		Error_Handler();
 80008b2:	f000 f9d3 	bl	8000c5c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b6:	2360      	movs	r3, #96	@ 0x60
 80008b8:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.Pulse = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008be:	2300      	movs	r3, #0
 80008c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008c2:	2300      	movs	r3, #0
 80008c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c6:	2300      	movs	r3, #0
 80008c8:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ca:	2300      	movs	r3, #0
 80008cc:	647b      	str	r3, [r7, #68]	@ 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008d6:	2200      	movs	r2, #0
 80008d8:	4619      	mov	r1, r3
 80008da:	4824      	ldr	r0, [pc, #144]	@ (800096c <MX_TIM1_Init+0x180>)
 80008dc:	f002 fc62 	bl	80031a4 <HAL_TIM_PWM_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM1_Init+0xfe>
	{
		Error_Handler();
 80008e6:	f000 f9b9 	bl	8000c5c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80008ee:	2204      	movs	r2, #4
 80008f0:	4619      	mov	r1, r3
 80008f2:	481e      	ldr	r0, [pc, #120]	@ (800096c <MX_TIM1_Init+0x180>)
 80008f4:	f002 fc56 	bl	80031a4 <HAL_TIM_PWM_ConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM1_Init+0x116>
	{
		Error_Handler();
 80008fe:	f000 f9ad 	bl	8000c5c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000902:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000906:	2208      	movs	r2, #8
 8000908:	4619      	mov	r1, r3
 800090a:	4818      	ldr	r0, [pc, #96]	@ (800096c <MX_TIM1_Init+0x180>)
 800090c:	f002 fc4a 	bl	80031a4 <HAL_TIM_PWM_ConfigChannel>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM1_Init+0x12e>
	{
		Error_Handler();
 8000916:	f000 f9a1 	bl	8000c5c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800092e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000932:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800093c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	62bb      	str	r3, [r7, #40]	@ 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4807      	ldr	r0, [pc, #28]	@ (800096c <MX_TIM1_Init+0x180>)
 8000950:	f003 faca 	bl	8003ee8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM1_Init+0x172>
	{
		Error_Handler();
 800095a:	f000 f97f 	bl	8000c5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800095e:	4803      	ldr	r0, [pc, #12]	@ (800096c <MX_TIM1_Init+0x180>)
 8000960:	f000 f9da 	bl	8000d18 <HAL_TIM_MspPostInit>

}
 8000964:	bf00      	nop
 8000966:	3768      	adds	r7, #104	@ 0x68
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000028 	.word	0x20000028
 8000970:	40012c00 	.word	0x40012c00

08000974 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	@ 0x38
 8000978:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80009a6:	4b3d      	ldr	r3, [pc, #244]	@ (8000a9c <MX_TIM3_Init+0x128>)
 80009a8:	4a3d      	ldr	r2, [pc, #244]	@ (8000aa0 <MX_TIM3_Init+0x12c>)
 80009aa:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 80-1;
 80009ac:	4b3b      	ldr	r3, [pc, #236]	@ (8000a9c <MX_TIM3_Init+0x128>)
 80009ae:	224f      	movs	r2, #79	@ 0x4f
 80009b0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b2:	4b3a      	ldr	r3, [pc, #232]	@ (8000a9c <MX_TIM3_Init+0x128>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 3002-1;
 80009b8:	4b38      	ldr	r3, [pc, #224]	@ (8000a9c <MX_TIM3_Init+0x128>)
 80009ba:	f640 32b9 	movw	r2, #3001	@ 0xbb9
 80009be:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c0:	4b36      	ldr	r3, [pc, #216]	@ (8000a9c <MX_TIM3_Init+0x128>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c6:	4b35      	ldr	r3, [pc, #212]	@ (8000a9c <MX_TIM3_Init+0x128>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009cc:	4833      	ldr	r0, [pc, #204]	@ (8000a9c <MX_TIM3_Init+0x128>)
 80009ce:	f002 fa2b 	bl	8002e28 <HAL_TIM_Base_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 80009d8:	f000 f940 	bl	8000c5c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009e6:	4619      	mov	r1, r3
 80009e8:	482c      	ldr	r0, [pc, #176]	@ (8000a9c <MX_TIM3_Init+0x128>)
 80009ea:	f002 fcef 	bl	80033cc <HAL_TIM_ConfigClockSource>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 80009f4:	f000 f932 	bl	8000c5c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009f8:	4828      	ldr	r0, [pc, #160]	@ (8000a9c <MX_TIM3_Init+0x128>)
 80009fa:	f002 fa6c 	bl	8002ed6 <HAL_TIM_PWM_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 8000a04:	f000 f92a 	bl	8000c5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4821      	ldr	r0, [pc, #132]	@ (8000a9c <MX_TIM3_Init+0x128>)
 8000a18:	f003 f9de 	bl	8003dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8000a22:	f000 f91b 	bl	8000c5c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a26:	2360      	movs	r3, #96	@ 0x60
 8000a28:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a36:	463b      	mov	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4817      	ldr	r0, [pc, #92]	@ (8000a9c <MX_TIM3_Init+0x128>)
 8000a3e:	f002 fbb1 	bl	80031a4 <HAL_TIM_PWM_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM3_Init+0xd8>
	{
		Error_Handler();
 8000a48:	f000 f908 	bl	8000c5c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	2204      	movs	r2, #4
 8000a50:	4619      	mov	r1, r3
 8000a52:	4812      	ldr	r0, [pc, #72]	@ (8000a9c <MX_TIM3_Init+0x128>)
 8000a54:	f002 fba6 	bl	80031a4 <HAL_TIM_PWM_ConfigChannel>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM3_Init+0xee>
	{
		Error_Handler();
 8000a5e:	f000 f8fd 	bl	8000c5c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	2208      	movs	r2, #8
 8000a66:	4619      	mov	r1, r3
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <MX_TIM3_Init+0x128>)
 8000a6a:	f002 fb9b 	bl	80031a4 <HAL_TIM_PWM_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM3_Init+0x104>
	{
		Error_Handler();
 8000a74:	f000 f8f2 	bl	8000c5c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4807      	ldr	r0, [pc, #28]	@ (8000a9c <MX_TIM3_Init+0x128>)
 8000a80:	f002 fb90 	bl	80031a4 <HAL_TIM_PWM_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM3_Init+0x11a>
	{
		Error_Handler();
 8000a8a:	f000 f8e7 	bl	8000c5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000a8e:	4803      	ldr	r0, [pc, #12]	@ (8000a9c <MX_TIM3_Init+0x128>)
 8000a90:	f000 f942 	bl	8000d18 <HAL_TIM_MspPostInit>

}
 8000a94:	bf00      	nop
 8000a96:	3738      	adds	r7, #56	@ 0x38
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000074 	.word	0x20000074
 8000aa0:	40000400 	.word	0x40000400

08000aa4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <MX_USART1_UART_Init+0x58>)
 8000aaa:	4a15      	ldr	r2, [pc, #84]	@ (8000b00 <MX_USART1_UART_Init+0x5c>)
 8000aac:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000aae:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <MX_USART1_UART_Init+0x58>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <MX_USART1_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <MX_USART1_UART_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <MX_USART1_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <MX_USART1_UART_Init+0x58>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <MX_USART1_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_USART1_UART_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <MX_USART1_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <MX_USART1_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_USART1_UART_Init+0x58>)
 8000ae8:	f003 fa7c 	bl	8003fe4 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 8000af2:	f000 f8b3 	bl	8000c5c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200000c0 	.word	0x200000c0
 8000b00:	40013800 	.word	0x40013800

08000b04 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000b08:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b0a:	4a15      	ldr	r2, [pc, #84]	@ (8000b60 <MX_USART2_UART_Init+0x5c>)
 8000b0c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b48:	f003 fa4c 	bl	8003fe4 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000b52:	f000 f883 	bl	8000c5c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000148 	.word	0x20000148
 8000b60:	40004400 	.word	0x40004400

08000b64 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	@ 0x28
 8000b68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000c28 <MX_GPIO_Init+0xc4>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8000c28 <MX_GPIO_Init+0xc4>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b86:	4b28      	ldr	r3, [pc, #160]	@ (8000c28 <MX_GPIO_Init+0xc4>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	4b25      	ldr	r3, [pc, #148]	@ (8000c28 <MX_GPIO_Init+0xc4>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	4a24      	ldr	r2, [pc, #144]	@ (8000c28 <MX_GPIO_Init+0xc4>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9e:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <MX_GPIO_Init+0xc4>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <MX_GPIO_Init+0xc4>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bae:	4a1e      	ldr	r2, [pc, #120]	@ (8000c28 <MX_GPIO_Init+0xc4>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <MX_GPIO_Init+0xc4>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <MX_GPIO_Init+0xc4>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	4a18      	ldr	r2, [pc, #96]	@ (8000c28 <MX_GPIO_Init+0xc4>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bce:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <MX_GPIO_Init+0xc4>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2120      	movs	r1, #32
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be2:	f000 fde9 	bl	80017b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000be6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bf0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480b      	ldr	r0, [pc, #44]	@ (8000c2c <MX_GPIO_Init+0xc8>)
 8000bfe:	f000 fc31 	bl	8001464 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000c02:	2320      	movs	r3, #32
 8000c04:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c1c:	f000 fc22 	bl	8001464 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	@ 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48000800 	.word	0x48000800

08000c30 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	if (huart == &huart1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a06      	ldr	r2, [pc, #24]	@ (8000c54 <HAL_UART_RxCpltCallback+0x24>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d104      	bne.n	8000c4a <HAL_UART_RxCpltCallback+0x1a>
	{
		HAL_UART_Receive_IT(&huart1, (uint8_t *)rx_data, sizeof(rx_data)); // Relancer la réception
 8000c40:	220d      	movs	r2, #13
 8000c42:	4905      	ldr	r1, [pc, #20]	@ (8000c58 <HAL_UART_RxCpltCallback+0x28>)
 8000c44:	4803      	ldr	r0, [pc, #12]	@ (8000c54 <HAL_UART_RxCpltCallback+0x24>)
 8000c46:	f003 faa5 	bl	8004194 <HAL_UART_Receive_IT>
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000c0 	.word	0x200000c0
 8000c58:	200001d0 	.word	0x200001d0

08000c5c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x8>

08000c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <HAL_MspInit+0x44>)
 8000c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c72:	4a0e      	ldr	r2, [pc, #56]	@ (8000cac <HAL_MspInit+0x44>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <HAL_MspInit+0x44>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <HAL_MspInit+0x44>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8a:	4a08      	ldr	r2, [pc, #32]	@ (8000cac <HAL_MspInit+0x44>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c92:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <HAL_MspInit+0x44>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000

08000cb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a13      	ldr	r2, [pc, #76]	@ (8000d0c <HAL_TIM_Base_MspInit+0x5c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d10c      	bne.n	8000cdc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cc2:	4b13      	ldr	r3, [pc, #76]	@ (8000d10 <HAL_TIM_Base_MspInit+0x60>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc6:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <HAL_TIM_Base_MspInit+0x60>)
 8000cc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ccc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <HAL_TIM_Base_MspInit+0x60>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cda:	e010      	b.n	8000cfe <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0c      	ldr	r2, [pc, #48]	@ (8000d14 <HAL_TIM_Base_MspInit+0x64>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d10b      	bne.n	8000cfe <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <HAL_TIM_Base_MspInit+0x60>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cea:	4a09      	ldr	r2, [pc, #36]	@ (8000d10 <HAL_TIM_Base_MspInit+0x60>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cf2:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <HAL_TIM_Base_MspInit+0x60>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	40012c00 	.word	0x40012c00
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40000400 	.word	0x40000400

08000d18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	@ 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a31      	ldr	r2, [pc, #196]	@ (8000dfc <HAL_TIM_MspPostInit+0xe4>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d11e      	bne.n	8000d78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b31      	ldr	r3, [pc, #196]	@ (8000e00 <HAL_TIM_MspPostInit+0xe8>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	4a30      	ldr	r2, [pc, #192]	@ (8000e00 <HAL_TIM_MspPostInit+0xe8>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d46:	4b2e      	ldr	r3, [pc, #184]	@ (8000e00 <HAL_TIM_MspPostInit+0xe8>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000d52:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d64:	2301      	movs	r3, #1
 8000d66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d72:	f000 fb77 	bl	8001464 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d76:	e03d      	b.n	8000df4 <HAL_TIM_MspPostInit+0xdc>
  else if(htim->Instance==TIM3)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a21      	ldr	r2, [pc, #132]	@ (8000e04 <HAL_TIM_MspPostInit+0xec>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d138      	bne.n	8000df4 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	4b1f      	ldr	r3, [pc, #124]	@ (8000e00 <HAL_TIM_MspPostInit+0xe8>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	4a1e      	ldr	r2, [pc, #120]	@ (8000e00 <HAL_TIM_MspPostInit+0xe8>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <HAL_TIM_MspPostInit+0xe8>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	4b19      	ldr	r3, [pc, #100]	@ (8000e00 <HAL_TIM_MspPostInit+0xe8>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9e:	4a18      	ldr	r2, [pc, #96]	@ (8000e00 <HAL_TIM_MspPostInit+0xe8>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000da6:	4b16      	ldr	r3, [pc, #88]	@ (8000e00 <HAL_TIM_MspPostInit+0xe8>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000daa:	f003 0302 	and.w	r3, r3, #2
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db2:	23c0      	movs	r3, #192	@ 0xc0
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd0:	f000 fb48 	bl	8001464 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	4806      	ldr	r0, [pc, #24]	@ (8000e08 <HAL_TIM_MspPostInit+0xf0>)
 8000df0:	f000 fb38 	bl	8001464 <HAL_GPIO_Init>
}
 8000df4:	bf00      	nop
 8000df6:	3728      	adds	r7, #40	@ 0x28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40012c00 	.word	0x40012c00
 8000e00:	40021000 	.word	0x40021000
 8000e04:	40000400 	.word	0x40000400
 8000e08:	48000400 	.word	0x48000400

08000e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0ae      	sub	sp, #184	@ 0xb8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	2288      	movs	r2, #136	@ 0x88
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f004 fcc3 	bl	80057b8 <memset>
  if(huart->Instance==USART1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a46      	ldr	r2, [pc, #280]	@ (8000f50 <HAL_UART_MspInit+0x144>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d143      	bne.n	8000ec4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e40:	2300      	movs	r3, #0
 8000e42:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f001 fb31 	bl	80024b0 <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e54:	f7ff ff02 	bl	8000c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e58:	4b3e      	ldr	r3, [pc, #248]	@ (8000f54 <HAL_UART_MspInit+0x148>)
 8000e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5c:	4a3d      	ldr	r2, [pc, #244]	@ (8000f54 <HAL_UART_MspInit+0x148>)
 8000e5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e62:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e64:	4b3b      	ldr	r3, [pc, #236]	@ (8000f54 <HAL_UART_MspInit+0x148>)
 8000e66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b38      	ldr	r3, [pc, #224]	@ (8000f54 <HAL_UART_MspInit+0x148>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e74:	4a37      	ldr	r2, [pc, #220]	@ (8000f54 <HAL_UART_MspInit+0x148>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e7c:	4b35      	ldr	r3, [pc, #212]	@ (8000f54 <HAL_UART_MspInit+0x148>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	617b      	str	r3, [r7, #20]
 8000e86:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e88:	23c0      	movs	r3, #192	@ 0xc0
 8000e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	482a      	ldr	r0, [pc, #168]	@ (8000f58 <HAL_UART_MspInit+0x14c>)
 8000eae:	f000 fad9 	bl	8001464 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2025      	movs	r0, #37	@ 0x25
 8000eb8:	f000 fa1f 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ebc:	2025      	movs	r0, #37	@ 0x25
 8000ebe:	f000 fa38 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ec2:	e040      	b.n	8000f46 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART2)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a24      	ldr	r2, [pc, #144]	@ (8000f5c <HAL_UART_MspInit+0x150>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d13b      	bne.n	8000f46 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 fae8 	bl	80024b0 <HAL_RCCEx_PeriphCLKConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_UART_MspInit+0xde>
      Error_Handler();
 8000ee6:	f7ff feb9 	bl	8000c5c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eea:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <HAL_UART_MspInit+0x148>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eee:	4a19      	ldr	r2, [pc, #100]	@ (8000f54 <HAL_UART_MspInit+0x148>)
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ef6:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <HAL_UART_MspInit+0x148>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <HAL_UART_MspInit+0x148>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	4a13      	ldr	r2, [pc, #76]	@ (8000f54 <HAL_UART_MspInit+0x148>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0e:	4b11      	ldr	r3, [pc, #68]	@ (8000f54 <HAL_UART_MspInit+0x148>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f1a:	230c      	movs	r3, #12
 8000f1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f32:	2307      	movs	r3, #7
 8000f34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f42:	f000 fa8f 	bl	8001464 <HAL_GPIO_Init>
}
 8000f46:	bf00      	nop
 8000f48:	37b8      	adds	r7, #184	@ 0xb8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40013800 	.word	0x40013800
 8000f54:	40021000 	.word	0x40021000
 8000f58:	48000400 	.word	0x48000400
 8000f5c:	40004400 	.word	0x40004400

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <NMI_Handler+0x4>

08000f68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <MemManage_Handler+0x4>

08000f78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb6:	f000 f8a5 	bl	8001104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <USART1_IRQHandler+0x10>)
 8000fc6:	f003 f931 	bl	800422c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200000c0 	.word	0x200000c0

08000fd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <SystemInit+0x20>)
 8000fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fde:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <SystemInit+0x20>)
 8000fe0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001030 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ffc:	f7ff ffea 	bl	8000fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	@ (8001034 <LoopForever+0x6>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	@ (8001038 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	@ (800103c <LoopForever+0xe>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	@ (8001044 <LoopForever+0x16>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001026:	f004 fbcf 	bl	80057c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800102a:	f7ff fa45 	bl	80004b8 <main>

0800102e <LoopForever>:

LoopForever:
    b LoopForever
 800102e:	e7fe      	b.n	800102e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001030:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800103c:	08005880 	.word	0x08005880
  ldr r2, =_sbss
 8001040:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001044:	200001e4 	.word	0x200001e4

08001048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC1_2_IRQHandler>
	...

0800104c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001056:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <HAL_Init+0x3c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a0b      	ldr	r2, [pc, #44]	@ (8001088 <HAL_Init+0x3c>)
 800105c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001060:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001062:	2003      	movs	r0, #3
 8001064:	f000 f93e 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001068:	2000      	movs	r0, #0
 800106a:	f000 f80f 	bl	800108c <HAL_InitTick>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	e001      	b.n	800107e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800107a:	f7ff fdf5 	bl	8000c68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800107e:	79fb      	ldrb	r3, [r7, #7]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40022000 	.word	0x40022000

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <HAL_InitTick+0x6c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d023      	beq.n	80010e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010a0:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <HAL_InitTick+0x70>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <HAL_InitTick+0x6c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f949 	bl	800134e <HAL_SYSTICK_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10f      	bne.n	80010e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d809      	bhi.n	80010dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 f913 	bl	80012fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <HAL_InitTick+0x74>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e007      	b.n	80010ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	e004      	b.n	80010ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	e001      	b.n	80010ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000004 	.word	0x20000004

08001104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_IncTick+0x20>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_IncTick+0x24>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	4a04      	ldr	r2, [pc, #16]	@ (8001128 <HAL_IncTick+0x24>)
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000008 	.word	0x20000008
 8001128:	200001e0 	.word	0x200001e0

0800112c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b03      	ldr	r3, [pc, #12]	@ (8001140 <HAL_GetTick+0x14>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200001e0 	.word	0x200001e0

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	@ (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	@ (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	@ (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	@ 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	@ 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001366:	b480      	push	{r7}
 8001368:	b085      	sub	sp, #20
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d008      	beq.n	8001390 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2204      	movs	r2, #4
 8001382:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e022      	b.n	80013d6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 020e 	bic.w	r2, r2, #14
 800139e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0201 	bic.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b4:	f003 021c 	and.w	r2, r3, #28
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	2101      	movs	r1, #1
 80013be:	fa01 f202 	lsl.w	r2, r1, r2
 80013c2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b084      	sub	sp, #16
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d005      	beq.n	8001406 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2204      	movs	r2, #4
 80013fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e029      	b.n	800145a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 020e 	bic.w	r2, r2, #14
 8001414:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f022 0201 	bic.w	r2, r2, #1
 8001424:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	f003 021c 	and.w	r2, r3, #28
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	2101      	movs	r1, #1
 8001434:	fa01 f202 	lsl.w	r2, r1, r2
 8001438:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	4798      	blx	r3
    }
  }
  return status;
 800145a:	7bfb      	ldrb	r3, [r7, #15]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001472:	e17f      	b.n	8001774 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2101      	movs	r1, #1
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8171 	beq.w	800176e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d005      	beq.n	80014a4 <HAL_GPIO_Init+0x40>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d130      	bne.n	8001506 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014da:	2201      	movs	r2, #1
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f003 0201 	and.w	r2, r3, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b03      	cmp	r3, #3
 8001510:	d118      	bne.n	8001544 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001518:	2201      	movs	r2, #1
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	08db      	lsrs	r3, r3, #3
 800152e:	f003 0201 	and.w	r2, r3, #1
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b03      	cmp	r3, #3
 800154e:	d017      	beq.n	8001580 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	2203      	movs	r2, #3
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d123      	bne.n	80015d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	08da      	lsrs	r2, r3, #3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3208      	adds	r2, #8
 8001594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	220f      	movs	r2, #15
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4013      	ands	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	08da      	lsrs	r2, r3, #3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3208      	adds	r2, #8
 80015ce:	6939      	ldr	r1, [r7, #16]
 80015d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	2203      	movs	r2, #3
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0203 	and.w	r2, r3, #3
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001610:	2b00      	cmp	r3, #0
 8001612:	f000 80ac 	beq.w	800176e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	4b5f      	ldr	r3, [pc, #380]	@ (8001794 <HAL_GPIO_Init+0x330>)
 8001618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800161a:	4a5e      	ldr	r2, [pc, #376]	@ (8001794 <HAL_GPIO_Init+0x330>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6613      	str	r3, [r2, #96]	@ 0x60
 8001622:	4b5c      	ldr	r3, [pc, #368]	@ (8001794 <HAL_GPIO_Init+0x330>)
 8001624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800162e:	4a5a      	ldr	r2, [pc, #360]	@ (8001798 <HAL_GPIO_Init+0x334>)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	220f      	movs	r2, #15
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001658:	d025      	beq.n	80016a6 <HAL_GPIO_Init+0x242>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a4f      	ldr	r2, [pc, #316]	@ (800179c <HAL_GPIO_Init+0x338>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d01f      	beq.n	80016a2 <HAL_GPIO_Init+0x23e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a4e      	ldr	r2, [pc, #312]	@ (80017a0 <HAL_GPIO_Init+0x33c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d019      	beq.n	800169e <HAL_GPIO_Init+0x23a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a4d      	ldr	r2, [pc, #308]	@ (80017a4 <HAL_GPIO_Init+0x340>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d013      	beq.n	800169a <HAL_GPIO_Init+0x236>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a4c      	ldr	r2, [pc, #304]	@ (80017a8 <HAL_GPIO_Init+0x344>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d00d      	beq.n	8001696 <HAL_GPIO_Init+0x232>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a4b      	ldr	r2, [pc, #300]	@ (80017ac <HAL_GPIO_Init+0x348>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d007      	beq.n	8001692 <HAL_GPIO_Init+0x22e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4a      	ldr	r2, [pc, #296]	@ (80017b0 <HAL_GPIO_Init+0x34c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d101      	bne.n	800168e <HAL_GPIO_Init+0x22a>
 800168a:	2306      	movs	r3, #6
 800168c:	e00c      	b.n	80016a8 <HAL_GPIO_Init+0x244>
 800168e:	2307      	movs	r3, #7
 8001690:	e00a      	b.n	80016a8 <HAL_GPIO_Init+0x244>
 8001692:	2305      	movs	r3, #5
 8001694:	e008      	b.n	80016a8 <HAL_GPIO_Init+0x244>
 8001696:	2304      	movs	r3, #4
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_Init+0x244>
 800169a:	2303      	movs	r3, #3
 800169c:	e004      	b.n	80016a8 <HAL_GPIO_Init+0x244>
 800169e:	2302      	movs	r3, #2
 80016a0:	e002      	b.n	80016a8 <HAL_GPIO_Init+0x244>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_Init+0x244>
 80016a6:	2300      	movs	r3, #0
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	f002 0203 	and.w	r2, r2, #3
 80016ae:	0092      	lsls	r2, r2, #2
 80016b0:	4093      	lsls	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016b8:	4937      	ldr	r1, [pc, #220]	@ (8001798 <HAL_GPIO_Init+0x334>)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	089b      	lsrs	r3, r3, #2
 80016be:	3302      	adds	r3, #2
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016c6:	4b3b      	ldr	r3, [pc, #236]	@ (80017b4 <HAL_GPIO_Init+0x350>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016ea:	4a32      	ldr	r2, [pc, #200]	@ (80017b4 <HAL_GPIO_Init+0x350>)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016f0:	4b30      	ldr	r3, [pc, #192]	@ (80017b4 <HAL_GPIO_Init+0x350>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001714:	4a27      	ldr	r2, [pc, #156]	@ (80017b4 <HAL_GPIO_Init+0x350>)
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800171a:	4b26      	ldr	r3, [pc, #152]	@ (80017b4 <HAL_GPIO_Init+0x350>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	43db      	mvns	r3, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4013      	ands	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800173e:	4a1d      	ldr	r2, [pc, #116]	@ (80017b4 <HAL_GPIO_Init+0x350>)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001744:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <HAL_GPIO_Init+0x350>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001768:	4a12      	ldr	r2, [pc, #72]	@ (80017b4 <HAL_GPIO_Init+0x350>)
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3301      	adds	r3, #1
 8001772:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	f47f ae78 	bne.w	8001474 <HAL_GPIO_Init+0x10>
  }
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	40010000 	.word	0x40010000
 800179c:	48000400 	.word	0x48000400
 80017a0:	48000800 	.word	0x48000800
 80017a4:	48000c00 	.word	0x48000c00
 80017a8:	48001000 	.word	0x48001000
 80017ac:	48001400 	.word	0x48001400
 80017b0:	48001800 	.word	0x48001800
 80017b4:	40010400 	.word	0x40010400

080017b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	807b      	strh	r3, [r7, #2]
 80017c4:	4613      	mov	r3, r2
 80017c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017c8:	787b      	ldrb	r3, [r7, #1]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017d4:	e002      	b.n	80017dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017ec:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <HAL_PWREx_GetVoltageRange+0x18>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40007000 	.word	0x40007000

08001804 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001812:	d130      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001814:	4b23      	ldr	r3, [pc, #140]	@ (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800181c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001820:	d038      	beq.n	8001894 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001822:	4b20      	ldr	r3, [pc, #128]	@ (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800182a:	4a1e      	ldr	r2, [pc, #120]	@ (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001830:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001832:	4b1d      	ldr	r3, [pc, #116]	@ (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2232      	movs	r2, #50	@ 0x32
 8001838:	fb02 f303 	mul.w	r3, r2, r3
 800183c:	4a1b      	ldr	r2, [pc, #108]	@ (80018ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800183e:	fba2 2303 	umull	r2, r3, r2, r3
 8001842:	0c9b      	lsrs	r3, r3, #18
 8001844:	3301      	adds	r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001848:	e002      	b.n	8001850 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	3b01      	subs	r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001850:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800185c:	d102      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x60>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f2      	bne.n	800184a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001864:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800186c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001870:	d110      	bne.n	8001894 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e00f      	b.n	8001896 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001876:	4b0b      	ldr	r3, [pc, #44]	@ (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800187e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001882:	d007      	beq.n	8001894 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001884:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800188c:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001892:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40007000 	.word	0x40007000
 80018a8:	20000000 	.word	0x20000000
 80018ac:	431bde83 	.word	0x431bde83

080018b0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e3ca      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c2:	4b97      	ldr	r3, [pc, #604]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018cc:	4b94      	ldr	r3, [pc, #592]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80e4 	beq.w	8001aac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d007      	beq.n	80018fa <HAL_RCC_OscConfig+0x4a>
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	f040 808b 	bne.w	8001a08 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	f040 8087 	bne.w	8001a08 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018fa:	4b89      	ldr	r3, [pc, #548]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_RCC_OscConfig+0x62>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e3a2      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a1a      	ldr	r2, [r3, #32]
 8001916:	4b82      	ldr	r3, [pc, #520]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d004      	beq.n	800192c <HAL_RCC_OscConfig+0x7c>
 8001922:	4b7f      	ldr	r3, [pc, #508]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800192a:	e005      	b.n	8001938 <HAL_RCC_OscConfig+0x88>
 800192c:	4b7c      	ldr	r3, [pc, #496]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 800192e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001932:	091b      	lsrs	r3, r3, #4
 8001934:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001938:	4293      	cmp	r3, r2
 800193a:	d223      	bcs.n	8001984 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	4618      	mov	r0, r3
 8001942:	f000 fd55 	bl	80023f0 <RCC_SetFlashLatencyFromMSIRange>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e383      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001950:	4b73      	ldr	r3, [pc, #460]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a72      	ldr	r2, [pc, #456]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001956:	f043 0308 	orr.w	r3, r3, #8
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b70      	ldr	r3, [pc, #448]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	496d      	ldr	r1, [pc, #436]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 800196a:	4313      	orrs	r3, r2
 800196c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800196e:	4b6c      	ldr	r3, [pc, #432]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	4968      	ldr	r1, [pc, #416]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 800197e:	4313      	orrs	r3, r2
 8001980:	604b      	str	r3, [r1, #4]
 8001982:	e025      	b.n	80019d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001984:	4b66      	ldr	r3, [pc, #408]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a65      	ldr	r2, [pc, #404]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 800198a:	f043 0308 	orr.w	r3, r3, #8
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b63      	ldr	r3, [pc, #396]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	4960      	ldr	r1, [pc, #384]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a2:	4b5f      	ldr	r3, [pc, #380]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	021b      	lsls	r3, r3, #8
 80019b0:	495b      	ldr	r1, [pc, #364]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d109      	bne.n	80019d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 fd15 	bl	80023f0 <RCC_SetFlashLatencyFromMSIRange>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e343      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019d0:	f000 fc4a 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 80019d4:	4602      	mov	r2, r0
 80019d6:	4b52      	ldr	r3, [pc, #328]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	f003 030f 	and.w	r3, r3, #15
 80019e0:	4950      	ldr	r1, [pc, #320]	@ (8001b24 <HAL_RCC_OscConfig+0x274>)
 80019e2:	5ccb      	ldrb	r3, [r1, r3]
 80019e4:	f003 031f 	and.w	r3, r3, #31
 80019e8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001b28 <HAL_RCC_OscConfig+0x278>)
 80019ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019f0:	4b4e      	ldr	r3, [pc, #312]	@ (8001b2c <HAL_RCC_OscConfig+0x27c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fb49 	bl	800108c <HAL_InitTick>
 80019fa:	4603      	mov	r3, r0
 80019fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d052      	beq.n	8001aaa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	e327      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d032      	beq.n	8001a76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a10:	4b43      	ldr	r3, [pc, #268]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a42      	ldr	r2, [pc, #264]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fb86 	bl	800112c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a24:	f7ff fb82 	bl	800112c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e310      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a36:	4b3a      	ldr	r3, [pc, #232]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a42:	4b37      	ldr	r3, [pc, #220]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a36      	ldr	r2, [pc, #216]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b34      	ldr	r3, [pc, #208]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4931      	ldr	r1, [pc, #196]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a60:	4b2f      	ldr	r3, [pc, #188]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	021b      	lsls	r3, r3, #8
 8001a6e:	492c      	ldr	r1, [pc, #176]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	604b      	str	r3, [r1, #4]
 8001a74:	e01a      	b.n	8001aac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a76:	4b2a      	ldr	r3, [pc, #168]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a29      	ldr	r2, [pc, #164]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a82:	f7ff fb53 	bl	800112c <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a8a:	f7ff fb4f 	bl	800112c <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e2dd      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a9c:	4b20      	ldr	r3, [pc, #128]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x1da>
 8001aa8:	e000      	b.n	8001aac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aaa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d074      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d005      	beq.n	8001aca <HAL_RCC_OscConfig+0x21a>
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	2b0c      	cmp	r3, #12
 8001ac2:	d10e      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d10b      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d064      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x2f0>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d160      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e2ba      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_OscConfig+0x24a>
 8001aec:	4b0c      	ldr	r3, [pc, #48]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001af2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	e026      	b.n	8001b48 <HAL_RCC_OscConfig+0x298>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b02:	d115      	bne.n	8001b30 <HAL_RCC_OscConfig+0x280>
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a05      	ldr	r2, [pc, #20]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001b0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b03      	ldr	r3, [pc, #12]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a02      	ldr	r2, [pc, #8]	@ (8001b20 <HAL_RCC_OscConfig+0x270>)
 8001b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	e014      	b.n	8001b48 <HAL_RCC_OscConfig+0x298>
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	08005828 	.word	0x08005828
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000004 	.word	0x20000004
 8001b30:	4ba0      	ldr	r3, [pc, #640]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a9f      	ldr	r2, [pc, #636]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001b36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b9d      	ldr	r3, [pc, #628]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a9c      	ldr	r2, [pc, #624]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001b42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d013      	beq.n	8001b78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff faec 	bl	800112c <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b58:	f7ff fae8 	bl	800112c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	@ 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e276      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b6a:	4b92      	ldr	r3, [pc, #584]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x2a8>
 8001b76:	e014      	b.n	8001ba2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff fad8 	bl	800112c <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b80:	f7ff fad4 	bl	800112c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	@ 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e262      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b92:	4b88      	ldr	r3, [pc, #544]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2d0>
 8001b9e:	e000      	b.n	8001ba2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d060      	beq.n	8001c70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d005      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x310>
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d119      	bne.n	8001bee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d116      	bne.n	8001bee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc0:	4b7c      	ldr	r3, [pc, #496]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x328>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e23f      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b76      	ldr	r3, [pc, #472]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	061b      	lsls	r3, r3, #24
 8001be6:	4973      	ldr	r1, [pc, #460]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bec:	e040      	b.n	8001c70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d023      	beq.n	8001c3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf6:	4b6f      	ldr	r3, [pc, #444]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a6e      	ldr	r2, [pc, #440]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c02:	f7ff fa93 	bl	800112c <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0a:	f7ff fa8f 	bl	800112c <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e21d      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1c:	4b65      	ldr	r3, [pc, #404]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b62      	ldr	r3, [pc, #392]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	495f      	ldr	r1, [pc, #380]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
 8001c3c:	e018      	b.n	8001c70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a5c      	ldr	r2, [pc, #368]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001c44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7ff fa6f 	bl	800112c <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c52:	f7ff fa6b 	bl	800112c <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e1f9      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c64:	4b53      	ldr	r3, [pc, #332]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1f0      	bne.n	8001c52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d03c      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01c      	beq.n	8001cbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c84:	4b4b      	ldr	r3, [pc, #300]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c8a:	4a4a      	ldr	r2, [pc, #296]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7ff fa4a 	bl	800112c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fa46 	bl	800112c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e1d4      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cae:	4b41      	ldr	r3, [pc, #260]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0ef      	beq.n	8001c9c <HAL_RCC_OscConfig+0x3ec>
 8001cbc:	e01b      	b.n	8001cf6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cc4:	4a3b      	ldr	r2, [pc, #236]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cce:	f7ff fa2d 	bl	800112c <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd6:	f7ff fa29 	bl	800112c <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e1b7      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ce8:	4b32      	ldr	r3, [pc, #200]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1ef      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80a6 	beq.w	8001e50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d04:	2300      	movs	r3, #0
 8001d06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d08:	4b2a      	ldr	r3, [pc, #168]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10d      	bne.n	8001d30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d14:	4b27      	ldr	r3, [pc, #156]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d18:	4a26      	ldr	r2, [pc, #152]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d20:	4b24      	ldr	r3, [pc, #144]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d30:	4b21      	ldr	r3, [pc, #132]	@ (8001db8 <HAL_RCC_OscConfig+0x508>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d118      	bne.n	8001d6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <HAL_RCC_OscConfig+0x508>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1d      	ldr	r2, [pc, #116]	@ (8001db8 <HAL_RCC_OscConfig+0x508>)
 8001d42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d48:	f7ff f9f0 	bl	800112c <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d50:	f7ff f9ec 	bl	800112c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e17a      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <HAL_RCC_OscConfig+0x508>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d108      	bne.n	8001d88 <HAL_RCC_OscConfig+0x4d8>
 8001d76:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d86:	e029      	b.n	8001ddc <HAL_RCC_OscConfig+0x52c>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b05      	cmp	r3, #5
 8001d8e:	d115      	bne.n	8001dbc <HAL_RCC_OscConfig+0x50c>
 8001d90:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d96:	4a07      	ldr	r2, [pc, #28]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001da0:	4b04      	ldr	r3, [pc, #16]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001da6:	4a03      	ldr	r2, [pc, #12]	@ (8001db4 <HAL_RCC_OscConfig+0x504>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001db0:	e014      	b.n	8001ddc <HAL_RCC_OscConfig+0x52c>
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40007000 	.word	0x40007000
 8001dbc:	4b9c      	ldr	r3, [pc, #624]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc2:	4a9b      	ldr	r2, [pc, #620]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dcc:	4b98      	ldr	r3, [pc, #608]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd2:	4a97      	ldr	r2, [pc, #604]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001dd4:	f023 0304 	bic.w	r3, r3, #4
 8001dd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d016      	beq.n	8001e12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de4:	f7ff f9a2 	bl	800112c <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dec:	f7ff f99e 	bl	800112c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e12a      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e02:	4b8b      	ldr	r3, [pc, #556]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0ed      	beq.n	8001dec <HAL_RCC_OscConfig+0x53c>
 8001e10:	e015      	b.n	8001e3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e12:	f7ff f98b 	bl	800112c <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e18:	e00a      	b.n	8001e30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7ff f987 	bl	800112c <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e113      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e30:	4b7f      	ldr	r3, [pc, #508]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1ed      	bne.n	8001e1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e3e:	7ffb      	ldrb	r3, [r7, #31]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e44:	4b7a      	ldr	r3, [pc, #488]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e48:	4a79      	ldr	r2, [pc, #484]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e4e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80fe 	beq.w	8002056 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	f040 80d0 	bne.w	8002004 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e64:	4b72      	ldr	r3, [pc, #456]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f003 0203 	and.w	r2, r3, #3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d130      	bne.n	8001eda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	3b01      	subs	r3, #1
 8001e84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d127      	bne.n	8001eda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d11f      	bne.n	8001eda <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001ea4:	2a07      	cmp	r2, #7
 8001ea6:	bf14      	ite	ne
 8001ea8:	2201      	movne	r2, #1
 8001eaa:	2200      	moveq	r2, #0
 8001eac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d113      	bne.n	8001eda <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ebc:	085b      	lsrs	r3, r3, #1
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d109      	bne.n	8001eda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	085b      	lsrs	r3, r3, #1
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d06e      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2b0c      	cmp	r3, #12
 8001ede:	d069      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ee0:	4b53      	ldr	r3, [pc, #332]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d105      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001eec:	4b50      	ldr	r3, [pc, #320]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0ad      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001efc:	4b4c      	ldr	r3, [pc, #304]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a4b      	ldr	r2, [pc, #300]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001f02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f06:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f08:	f7ff f910 	bl	800112c <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff f90c 	bl	800112c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e09a      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f22:	4b43      	ldr	r3, [pc, #268]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f2e:	4b40      	ldr	r3, [pc, #256]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	4b40      	ldr	r3, [pc, #256]	@ (8002034 <HAL_RCC_OscConfig+0x784>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f3e:	3a01      	subs	r2, #1
 8001f40:	0112      	lsls	r2, r2, #4
 8001f42:	4311      	orrs	r1, r2
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f48:	0212      	lsls	r2, r2, #8
 8001f4a:	4311      	orrs	r1, r2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f50:	0852      	lsrs	r2, r2, #1
 8001f52:	3a01      	subs	r2, #1
 8001f54:	0552      	lsls	r2, r2, #21
 8001f56:	4311      	orrs	r1, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f5c:	0852      	lsrs	r2, r2, #1
 8001f5e:	3a01      	subs	r2, #1
 8001f60:	0652      	lsls	r2, r2, #25
 8001f62:	4311      	orrs	r1, r2
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f68:	0912      	lsrs	r2, r2, #4
 8001f6a:	0452      	lsls	r2, r2, #17
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	4930      	ldr	r1, [pc, #192]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f74:	4b2e      	ldr	r3, [pc, #184]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a2d      	ldr	r2, [pc, #180]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001f7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f7e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f80:	4b2b      	ldr	r3, [pc, #172]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4a2a      	ldr	r2, [pc, #168]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001f86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f8a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f8c:	f7ff f8ce 	bl	800112c <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f94:	f7ff f8ca 	bl	800112c <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e058      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa6:	4b22      	ldr	r3, [pc, #136]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb2:	e050      	b.n	8002056 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e04f      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d148      	bne.n	8002056 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a19      	ldr	r2, [pc, #100]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd0:	4b17      	ldr	r3, [pc, #92]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4a16      	ldr	r2, [pc, #88]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001fd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fdc:	f7ff f8a6 	bl	800112c <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7ff f8a2 	bl	800112c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e030      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x734>
 8002002:	e028      	b.n	8002056 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d023      	beq.n	8002052 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200a:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a08      	ldr	r2, [pc, #32]	@ (8002030 <HAL_RCC_OscConfig+0x780>)
 8002010:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7ff f889 	bl	800112c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800201c:	e00c      	b.n	8002038 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7ff f885 	bl	800112c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d905      	bls.n	8002038 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e013      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
 8002030:	40021000 	.word	0x40021000
 8002034:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002038:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <HAL_RCC_OscConfig+0x7b0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1ec      	bne.n	800201e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <HAL_RCC_OscConfig+0x7b0>)
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	4905      	ldr	r1, [pc, #20]	@ (8002060 <HAL_RCC_OscConfig+0x7b0>)
 800204a:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <HAL_RCC_OscConfig+0x7b4>)
 800204c:	4013      	ands	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]
 8002050:	e001      	b.n	8002056 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3720      	adds	r7, #32
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000
 8002064:	feeefffc 	.word	0xfeeefffc

08002068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0e7      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b75      	ldr	r3, [pc, #468]	@ (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d910      	bls.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b72      	ldr	r3, [pc, #456]	@ (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 0207 	bic.w	r2, r3, #7
 8002092:	4970      	ldr	r1, [pc, #448]	@ (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b6e      	ldr	r3, [pc, #440]	@ (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0cf      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d010      	beq.n	80020da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	4b66      	ldr	r3, [pc, #408]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d908      	bls.n	80020da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c8:	4b63      	ldr	r3, [pc, #396]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4960      	ldr	r1, [pc, #384]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d04c      	beq.n	8002180 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ee:	4b5a      	ldr	r3, [pc, #360]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d121      	bne.n	800213e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e0a6      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002106:	4b54      	ldr	r3, [pc, #336]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d115      	bne.n	800213e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e09a      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d107      	bne.n	800212e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800211e:	4b4e      	ldr	r3, [pc, #312]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e08e      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800212e:	4b4a      	ldr	r3, [pc, #296]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e086      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800213e:	4b46      	ldr	r3, [pc, #280]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f023 0203 	bic.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4943      	ldr	r1, [pc, #268]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 800214c:	4313      	orrs	r3, r2
 800214e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002150:	f7fe ffec 	bl	800112c <HAL_GetTick>
 8002154:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	e00a      	b.n	800216e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7fe ffe8 	bl	800112c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002166:	4293      	cmp	r3, r2
 8002168:	d901      	bls.n	800216e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e06e      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216e:	4b3a      	ldr	r3, [pc, #232]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 020c 	and.w	r2, r3, #12
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d1eb      	bne.n	8002158 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d010      	beq.n	80021ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	4b31      	ldr	r3, [pc, #196]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002198:	429a      	cmp	r2, r3
 800219a:	d208      	bcs.n	80021ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800219c:	4b2e      	ldr	r3, [pc, #184]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	492b      	ldr	r1, [pc, #172]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021ae:	4b29      	ldr	r3, [pc, #164]	@ (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d210      	bcs.n	80021de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021bc:	4b25      	ldr	r3, [pc, #148]	@ (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 0207 	bic.w	r2, r3, #7
 80021c4:	4923      	ldr	r1, [pc, #140]	@ (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021cc:	4b21      	ldr	r3, [pc, #132]	@ (8002254 <HAL_RCC_ClockConfig+0x1ec>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d001      	beq.n	80021de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e036      	b.n	800224c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	4918      	ldr	r1, [pc, #96]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d009      	beq.n	800221c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002208:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4910      	ldr	r1, [pc, #64]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002218:	4313      	orrs	r3, r2
 800221a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800221c:	f000 f824 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b0d      	ldr	r3, [pc, #52]	@ (8002258 <HAL_RCC_ClockConfig+0x1f0>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	091b      	lsrs	r3, r3, #4
 8002228:	f003 030f 	and.w	r3, r3, #15
 800222c:	490b      	ldr	r1, [pc, #44]	@ (800225c <HAL_RCC_ClockConfig+0x1f4>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
 8002238:	4a09      	ldr	r2, [pc, #36]	@ (8002260 <HAL_RCC_ClockConfig+0x1f8>)
 800223a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800223c:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <HAL_RCC_ClockConfig+0x1fc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe ff23 	bl	800108c <HAL_InitTick>
 8002246:	4603      	mov	r3, r0
 8002248:	72fb      	strb	r3, [r7, #11]

  return status;
 800224a:	7afb      	ldrb	r3, [r7, #11]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40022000 	.word	0x40022000
 8002258:	40021000 	.word	0x40021000
 800225c:	08005828 	.word	0x08005828
 8002260:	20000000 	.word	0x20000000
 8002264:	20000004 	.word	0x20000004

08002268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	@ 0x24
 800226c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002276:	4b3e      	ldr	r3, [pc, #248]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002280:	4b3b      	ldr	r3, [pc, #236]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x34>
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d121      	bne.n	80022da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d11e      	bne.n	80022da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800229c:	4b34      	ldr	r3, [pc, #208]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d107      	bne.n	80022b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022a8:	4b31      	ldr	r3, [pc, #196]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 80022aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	f003 030f 	and.w	r3, r3, #15
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e005      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022b8:	4b2d      	ldr	r3, [pc, #180]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002374 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10d      	bne.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d102      	bne.n	80022e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022e0:	4b25      	ldr	r3, [pc, #148]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x110>)
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	e004      	b.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	2b08      	cmp	r3, #8
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022ec:	4b23      	ldr	r3, [pc, #140]	@ (800237c <HAL_RCC_GetSysClockFreq+0x114>)
 80022ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	2b0c      	cmp	r3, #12
 80022f4:	d134      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d003      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0xa6>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b03      	cmp	r3, #3
 800230a:	d003      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0xac>
 800230c:	e005      	b.n	800231a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800230e:	4b1a      	ldr	r3, [pc, #104]	@ (8002378 <HAL_RCC_GetSysClockFreq+0x110>)
 8002310:	617b      	str	r3, [r7, #20]
      break;
 8002312:	e005      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002314:	4b19      	ldr	r3, [pc, #100]	@ (800237c <HAL_RCC_GetSysClockFreq+0x114>)
 8002316:	617b      	str	r3, [r7, #20]
      break;
 8002318:	e002      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	617b      	str	r3, [r7, #20]
      break;
 800231e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002320:	4b13      	ldr	r3, [pc, #76]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	3301      	adds	r3, #1
 800232c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800232e:	4b10      	ldr	r3, [pc, #64]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	fb03 f202 	mul.w	r2, r3, r2
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	fbb2 f3f3 	udiv	r3, r2, r3
 8002344:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002346:	4b0a      	ldr	r3, [pc, #40]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x108>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	0e5b      	lsrs	r3, r3, #25
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	3301      	adds	r3, #1
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002360:	69bb      	ldr	r3, [r7, #24]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3724      	adds	r7, #36	@ 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	08005840 	.word	0x08005840
 8002378:	00f42400 	.word	0x00f42400
 800237c:	007a1200 	.word	0x007a1200

08002380 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002384:	4b03      	ldr	r3, [pc, #12]	@ (8002394 <HAL_RCC_GetHCLKFreq+0x14>)
 8002386:	681b      	ldr	r3, [r3, #0]
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	20000000 	.word	0x20000000

08002398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800239c:	f7ff fff0 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023a0:	4602      	mov	r2, r0
 80023a2:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	4904      	ldr	r1, [pc, #16]	@ (80023c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023ae:	5ccb      	ldrb	r3, [r1, r3]
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	08005838 	.word	0x08005838

080023c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023c8:	f7ff ffda 	bl	8002380 <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	0adb      	lsrs	r3, r3, #11
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4904      	ldr	r1, [pc, #16]	@ (80023ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	08005838 	.word	0x08005838

080023f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023f8:	2300      	movs	r3, #0
 80023fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023fc:	4b2a      	ldr	r3, [pc, #168]	@ (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002400:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002408:	f7ff f9ee 	bl	80017e8 <HAL_PWREx_GetVoltageRange>
 800240c:	6178      	str	r0, [r7, #20]
 800240e:	e014      	b.n	800243a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002410:	4b25      	ldr	r3, [pc, #148]	@ (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002414:	4a24      	ldr	r2, [pc, #144]	@ (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800241a:	6593      	str	r3, [r2, #88]	@ 0x58
 800241c:	4b22      	ldr	r3, [pc, #136]	@ (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002428:	f7ff f9de 	bl	80017e8 <HAL_PWREx_GetVoltageRange>
 800242c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4b1e      	ldr	r3, [pc, #120]	@ (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002432:	4a1d      	ldr	r2, [pc, #116]	@ (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002434:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002438:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002440:	d10b      	bne.n	800245a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b80      	cmp	r3, #128	@ 0x80
 8002446:	d919      	bls.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2ba0      	cmp	r3, #160	@ 0xa0
 800244c:	d902      	bls.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800244e:	2302      	movs	r3, #2
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	e013      	b.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002454:	2301      	movs	r3, #1
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	e010      	b.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b80      	cmp	r3, #128	@ 0x80
 800245e:	d902      	bls.n	8002466 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002460:	2303      	movs	r3, #3
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	e00a      	b.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b80      	cmp	r3, #128	@ 0x80
 800246a:	d102      	bne.n	8002472 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800246c:	2302      	movs	r3, #2
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	e004      	b.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b70      	cmp	r3, #112	@ 0x70
 8002476:	d101      	bne.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002478:	2301      	movs	r3, #1
 800247a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800247c:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 0207 	bic.w	r2, r3, #7
 8002484:	4909      	ldr	r1, [pc, #36]	@ (80024ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800248c:	4b07      	ldr	r3, [pc, #28]	@ (80024ac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	429a      	cmp	r2, r3
 8002498:	d001      	beq.n	800249e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40022000 	.word	0x40022000

080024b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024b8:	2300      	movs	r3, #0
 80024ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024bc:	2300      	movs	r3, #0
 80024be:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d041      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80024d4:	d02a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024d6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80024da:	d824      	bhi.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80024e0:	d008      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80024e6:	d81e      	bhi.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024f0:	d010      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024f2:	e018      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024f4:	4b86      	ldr	r3, [pc, #536]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4a85      	ldr	r2, [pc, #532]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024fe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002500:	e015      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3304      	adds	r3, #4
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f000 fabb 	bl	8002a84 <RCCEx_PLLSAI1_Config>
 800250e:	4603      	mov	r3, r0
 8002510:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002512:	e00c      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3320      	adds	r3, #32
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fba6 	bl	8002c6c <RCCEx_PLLSAI2_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002524:	e003      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	74fb      	strb	r3, [r7, #19]
      break;
 800252a:	e000      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800252c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800252e:	7cfb      	ldrb	r3, [r7, #19]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10b      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002534:	4b76      	ldr	r3, [pc, #472]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002542:	4973      	ldr	r1, [pc, #460]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800254a:	e001      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d041      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002560:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002564:	d02a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002566:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800256a:	d824      	bhi.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800256c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002570:	d008      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002572:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002576:	d81e      	bhi.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800257c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002580:	d010      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002582:	e018      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002584:	4b62      	ldr	r3, [pc, #392]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4a61      	ldr	r2, [pc, #388]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800258e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002590:	e015      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3304      	adds	r3, #4
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f000 fa73 	bl	8002a84 <RCCEx_PLLSAI1_Config>
 800259e:	4603      	mov	r3, r0
 80025a0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025a2:	e00c      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3320      	adds	r3, #32
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f000 fb5e 	bl	8002c6c <RCCEx_PLLSAI2_Config>
 80025b0:	4603      	mov	r3, r0
 80025b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025b4:	e003      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	74fb      	strb	r3, [r7, #19]
      break;
 80025ba:	e000      	b.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025be:	7cfb      	ldrb	r3, [r7, #19]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10b      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025c4:	4b52      	ldr	r3, [pc, #328]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ca:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025d2:	494f      	ldr	r1, [pc, #316]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80025da:	e001      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025dc:	7cfb      	ldrb	r3, [r7, #19]
 80025de:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80a0 	beq.w	800272e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025f2:	4b47      	ldr	r3, [pc, #284]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002602:	2300      	movs	r3, #0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00d      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002608:	4b41      	ldr	r3, [pc, #260]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260c:	4a40      	ldr	r2, [pc, #256]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002612:	6593      	str	r3, [r2, #88]	@ 0x58
 8002614:	4b3e      	ldr	r3, [pc, #248]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002620:	2301      	movs	r3, #1
 8002622:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002624:	4b3b      	ldr	r3, [pc, #236]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a3a      	ldr	r2, [pc, #232]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800262a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002630:	f7fe fd7c 	bl	800112c <HAL_GetTick>
 8002634:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002636:	e009      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002638:	f7fe fd78 	bl	800112c <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d902      	bls.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	74fb      	strb	r3, [r7, #19]
        break;
 800264a:	e005      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800264c:	4b31      	ldr	r3, [pc, #196]	@ (8002714 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0ef      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002658:	7cfb      	ldrb	r3, [r7, #19]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d15c      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800265e:	4b2c      	ldr	r3, [pc, #176]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002664:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002668:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d01f      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	d019      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800267c:	4b24      	ldr	r3, [pc, #144]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002686:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002688:	4b21      	ldr	r3, [pc, #132]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800268e:	4a20      	ldr	r2, [pc, #128]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002698:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269e:	4a1c      	ldr	r2, [pc, #112]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026a8:	4a19      	ldr	r2, [pc, #100]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7fe fd37 	bl	800112c <HAL_GetTick>
 80026be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c0:	e00b      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c2:	f7fe fd33 	bl	800112c <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d902      	bls.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	74fb      	strb	r3, [r7, #19]
            break;
 80026d8:	e006      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026da:	4b0d      	ldr	r3, [pc, #52]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ec      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10c      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ee:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026fe:	4904      	ldr	r1, [pc, #16]	@ (8002710 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002706:	e009      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	74bb      	strb	r3, [r7, #18]
 800270c:	e006      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800271c:	7c7b      	ldrb	r3, [r7, #17]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d105      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002722:	4b9e      	ldr	r3, [pc, #632]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002726:	4a9d      	ldr	r2, [pc, #628]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002728:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800272c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800273a:	4b98      	ldr	r3, [pc, #608]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002740:	f023 0203 	bic.w	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002748:	4994      	ldr	r1, [pc, #592]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800275c:	4b8f      	ldr	r3, [pc, #572]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002762:	f023 020c 	bic.w	r2, r3, #12
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800276a:	498c      	ldr	r1, [pc, #560]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800277e:	4b87      	ldr	r3, [pc, #540]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002784:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	4983      	ldr	r1, [pc, #524]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027a0:	4b7e      	ldr	r3, [pc, #504]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ae:	497b      	ldr	r1, [pc, #492]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027c2:	4b76      	ldr	r3, [pc, #472]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d0:	4972      	ldr	r1, [pc, #456]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027e4:	4b6d      	ldr	r3, [pc, #436]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f2:	496a      	ldr	r1, [pc, #424]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002806:	4b65      	ldr	r3, [pc, #404]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002814:	4961      	ldr	r1, [pc, #388]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002828:	4b5c      	ldr	r3, [pc, #368]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002836:	4959      	ldr	r1, [pc, #356]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800284a:	4b54      	ldr	r3, [pc, #336]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002850:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002858:	4950      	ldr	r1, [pc, #320]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00a      	beq.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800286c:	4b4b      	ldr	r3, [pc, #300]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002872:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287a:	4948      	ldr	r1, [pc, #288]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800288e:	4b43      	ldr	r3, [pc, #268]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002894:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289c:	493f      	ldr	r1, [pc, #252]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d028      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028b0:	4b3a      	ldr	r3, [pc, #232]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028be:	4937      	ldr	r1, [pc, #220]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028ce:	d106      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d0:	4b32      	ldr	r3, [pc, #200]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4a31      	ldr	r2, [pc, #196]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028da:	60d3      	str	r3, [r2, #12]
 80028dc:	e011      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028e6:	d10c      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	2101      	movs	r1, #1
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f8c8 	bl	8002a84 <RCCEx_PLLSAI1_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80028fe:	7cfb      	ldrb	r3, [r7, #19]
 8002900:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d028      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800290e:	4b23      	ldr	r3, [pc, #140]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002914:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291c:	491f      	ldr	r1, [pc, #124]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291e:	4313      	orrs	r3, r2
 8002920:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002928:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800292c:	d106      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800292e:	4b1b      	ldr	r3, [pc, #108]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	4a1a      	ldr	r2, [pc, #104]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002934:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002938:	60d3      	str	r3, [r2, #12]
 800293a:	e011      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002940:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002944:	d10c      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3304      	adds	r3, #4
 800294a:	2101      	movs	r1, #1
 800294c:	4618      	mov	r0, r3
 800294e:	f000 f899 	bl	8002a84 <RCCEx_PLLSAI1_Config>
 8002952:	4603      	mov	r3, r0
 8002954:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002956:	7cfb      	ldrb	r3, [r7, #19]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d02b      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800296c:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002972:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800297a:	4908      	ldr	r1, [pc, #32]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002986:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800298a:	d109      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800298c:	4b03      	ldr	r3, [pc, #12]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a02      	ldr	r2, [pc, #8]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002992:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002996:	60d3      	str	r3, [r2, #12]
 8002998:	e014      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3304      	adds	r3, #4
 80029ae:	2101      	movs	r1, #1
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 f867 	bl	8002a84 <RCCEx_PLLSAI1_Config>
 80029b6:	4603      	mov	r3, r0
 80029b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ba:	7cfb      	ldrb	r3, [r7, #19]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d02f      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029de:	4928      	ldr	r1, [pc, #160]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029ee:	d10d      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3304      	adds	r3, #4
 80029f4:	2102      	movs	r1, #2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f844 	bl	8002a84 <RCCEx_PLLSAI1_Config>
 80029fc:	4603      	mov	r3, r0
 80029fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d014      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a06:	7cfb      	ldrb	r3, [r7, #19]
 8002a08:	74bb      	strb	r3, [r7, #18]
 8002a0a:	e011      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3320      	adds	r3, #32
 8002a1a:	2102      	movs	r1, #2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 f925 	bl	8002c6c <RCCEx_PLLSAI2_Config>
 8002a22:	4603      	mov	r3, r0
 8002a24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00a      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a3c:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a42:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a4a:	490d      	ldr	r1, [pc, #52]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00b      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a5e:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a6e:	4904      	ldr	r1, [pc, #16]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a76:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000

08002a84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a92:	4b75      	ldr	r3, [pc, #468]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d018      	beq.n	8002ad0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a9e:	4b72      	ldr	r3, [pc, #456]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f003 0203 	and.w	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d10d      	bne.n	8002aca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d009      	beq.n	8002aca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ab6:	4b6c      	ldr	r3, [pc, #432]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d047      	beq.n	8002b5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	e044      	b.n	8002b5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d018      	beq.n	8002b0a <RCCEx_PLLSAI1_Config+0x86>
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d825      	bhi.n	8002b28 <RCCEx_PLLSAI1_Config+0xa4>
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d002      	beq.n	8002ae6 <RCCEx_PLLSAI1_Config+0x62>
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d009      	beq.n	8002af8 <RCCEx_PLLSAI1_Config+0x74>
 8002ae4:	e020      	b.n	8002b28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ae6:	4b60      	ldr	r3, [pc, #384]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d11d      	bne.n	8002b2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af6:	e01a      	b.n	8002b2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002af8:	4b5b      	ldr	r3, [pc, #364]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d116      	bne.n	8002b32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b08:	e013      	b.n	8002b32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b0a:	4b57      	ldr	r3, [pc, #348]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10f      	bne.n	8002b36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b16:	4b54      	ldr	r3, [pc, #336]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b26:	e006      	b.n	8002b36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b2c:	e004      	b.n	8002b38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b2e:	bf00      	nop
 8002b30:	e002      	b.n	8002b38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b36:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10d      	bne.n	8002b5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6819      	ldr	r1, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	430b      	orrs	r3, r1
 8002b54:	4944      	ldr	r1, [pc, #272]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d17d      	bne.n	8002c5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b60:	4b41      	ldr	r3, [pc, #260]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a40      	ldr	r2, [pc, #256]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b6c:	f7fe fade 	bl	800112c <HAL_GetTick>
 8002b70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b72:	e009      	b.n	8002b88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b74:	f7fe fada 	bl	800112c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d902      	bls.n	8002b88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	73fb      	strb	r3, [r7, #15]
        break;
 8002b86:	e005      	b.n	8002b94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b88:	4b37      	ldr	r3, [pc, #220]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1ef      	bne.n	8002b74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d160      	bne.n	8002c5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d111      	bne.n	8002bc4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ba0:	4b31      	ldr	r3, [pc, #196]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ba8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6892      	ldr	r2, [r2, #8]
 8002bb0:	0211      	lsls	r1, r2, #8
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68d2      	ldr	r2, [r2, #12]
 8002bb6:	0912      	lsrs	r2, r2, #4
 8002bb8:	0452      	lsls	r2, r2, #17
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	492a      	ldr	r1, [pc, #168]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	610b      	str	r3, [r1, #16]
 8002bc2:	e027      	b.n	8002c14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d112      	bne.n	8002bf0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bca:	4b27      	ldr	r3, [pc, #156]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002bd2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6892      	ldr	r2, [r2, #8]
 8002bda:	0211      	lsls	r1, r2, #8
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6912      	ldr	r2, [r2, #16]
 8002be0:	0852      	lsrs	r2, r2, #1
 8002be2:	3a01      	subs	r2, #1
 8002be4:	0552      	lsls	r2, r2, #21
 8002be6:	430a      	orrs	r2, r1
 8002be8:	491f      	ldr	r1, [pc, #124]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	610b      	str	r3, [r1, #16]
 8002bee:	e011      	b.n	8002c14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002bf8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6892      	ldr	r2, [r2, #8]
 8002c00:	0211      	lsls	r1, r2, #8
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6952      	ldr	r2, [r2, #20]
 8002c06:	0852      	lsrs	r2, r2, #1
 8002c08:	3a01      	subs	r2, #1
 8002c0a:	0652      	lsls	r2, r2, #25
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	4916      	ldr	r1, [pc, #88]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c14:	4b14      	ldr	r3, [pc, #80]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a13      	ldr	r2, [pc, #76]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c1a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7fe fa84 	bl	800112c <HAL_GetTick>
 8002c24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c26:	e009      	b.n	8002c3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c28:	f7fe fa80 	bl	800112c <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d902      	bls.n	8002c3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	73fb      	strb	r3, [r7, #15]
          break;
 8002c3a:	e005      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d0ef      	beq.n	8002c28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c4e:	4b06      	ldr	r3, [pc, #24]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	4904      	ldr	r1, [pc, #16]	@ (8002c68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000

08002c6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d018      	beq.n	8002cb8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c86:	4b67      	ldr	r3, [pc, #412]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f003 0203 	and.w	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d10d      	bne.n	8002cb2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
       ||
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c9e:	4b61      	ldr	r3, [pc, #388]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	091b      	lsrs	r3, r3, #4
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
       ||
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d047      	beq.n	8002d42 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	e044      	b.n	8002d42 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d018      	beq.n	8002cf2 <RCCEx_PLLSAI2_Config+0x86>
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d825      	bhi.n	8002d10 <RCCEx_PLLSAI2_Config+0xa4>
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d002      	beq.n	8002cce <RCCEx_PLLSAI2_Config+0x62>
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d009      	beq.n	8002ce0 <RCCEx_PLLSAI2_Config+0x74>
 8002ccc:	e020      	b.n	8002d10 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cce:	4b55      	ldr	r3, [pc, #340]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d11d      	bne.n	8002d16 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cde:	e01a      	b.n	8002d16 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ce0:	4b50      	ldr	r3, [pc, #320]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d116      	bne.n	8002d1a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf0:	e013      	b.n	8002d1a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cf2:	4b4c      	ldr	r3, [pc, #304]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10f      	bne.n	8002d1e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cfe:	4b49      	ldr	r3, [pc, #292]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d0e:	e006      	b.n	8002d1e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
      break;
 8002d14:	e004      	b.n	8002d20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d16:	bf00      	nop
 8002d18:	e002      	b.n	8002d20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e000      	b.n	8002d20 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10d      	bne.n	8002d42 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d26:	4b3f      	ldr	r3, [pc, #252]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6819      	ldr	r1, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	430b      	orrs	r3, r1
 8002d3c:	4939      	ldr	r1, [pc, #228]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d167      	bne.n	8002e18 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d48:	4b36      	ldr	r3, [pc, #216]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a35      	ldr	r2, [pc, #212]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d54:	f7fe f9ea 	bl	800112c <HAL_GetTick>
 8002d58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d5a:	e009      	b.n	8002d70 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d5c:	f7fe f9e6 	bl	800112c <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d902      	bls.n	8002d70 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d6e:	e005      	b.n	8002d7c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d70:	4b2c      	ldr	r3, [pc, #176]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1ef      	bne.n	8002d5c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d14a      	bne.n	8002e18 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d111      	bne.n	8002dac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d88:	4b26      	ldr	r3, [pc, #152]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6892      	ldr	r2, [r2, #8]
 8002d98:	0211      	lsls	r1, r2, #8
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68d2      	ldr	r2, [r2, #12]
 8002d9e:	0912      	lsrs	r2, r2, #4
 8002da0:	0452      	lsls	r2, r2, #17
 8002da2:	430a      	orrs	r2, r1
 8002da4:	491f      	ldr	r1, [pc, #124]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	614b      	str	r3, [r1, #20]
 8002daa:	e011      	b.n	8002dd0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dac:	4b1d      	ldr	r3, [pc, #116]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002db4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6892      	ldr	r2, [r2, #8]
 8002dbc:	0211      	lsls	r1, r2, #8
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6912      	ldr	r2, [r2, #16]
 8002dc2:	0852      	lsrs	r2, r2, #1
 8002dc4:	3a01      	subs	r2, #1
 8002dc6:	0652      	lsls	r2, r2, #25
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	4916      	ldr	r1, [pc, #88]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dd0:	4b14      	ldr	r3, [pc, #80]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a13      	ldr	r2, [pc, #76]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ddc:	f7fe f9a6 	bl	800112c <HAL_GetTick>
 8002de0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002de2:	e009      	b.n	8002df8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002de4:	f7fe f9a2 	bl	800112c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d902      	bls.n	8002df8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	73fb      	strb	r3, [r7, #15]
          break;
 8002df6:	e005      	b.n	8002e04 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002df8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0ef      	beq.n	8002de4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e0a:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	4904      	ldr	r1, [pc, #16]	@ (8002e24 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000

08002e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e049      	b.n	8002ece <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7fd ff2e 	bl	8000cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	4619      	mov	r1, r3
 8002e66:	4610      	mov	r0, r2
 8002e68:	f000 fb7a 	bl	8003560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e049      	b.n	8002f7c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d106      	bne.n	8002f02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f841 	bl	8002f84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2202      	movs	r2, #2
 8002f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3304      	adds	r3, #4
 8002f12:	4619      	mov	r1, r3
 8002f14:	4610      	mov	r0, r2
 8002f16:	f000 fb23 	bl	8003560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d109      	bne.n	8002fbc <HAL_TIM_PWM_Start+0x24>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	bf14      	ite	ne
 8002fb4:	2301      	movne	r3, #1
 8002fb6:	2300      	moveq	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e03c      	b.n	8003036 <HAL_TIM_PWM_Start+0x9e>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d109      	bne.n	8002fd6 <HAL_TIM_PWM_Start+0x3e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	bf14      	ite	ne
 8002fce:	2301      	movne	r3, #1
 8002fd0:	2300      	moveq	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	e02f      	b.n	8003036 <HAL_TIM_PWM_Start+0x9e>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d109      	bne.n	8002ff0 <HAL_TIM_PWM_Start+0x58>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e022      	b.n	8003036 <HAL_TIM_PWM_Start+0x9e>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	2b0c      	cmp	r3, #12
 8002ff4:	d109      	bne.n	800300a <HAL_TIM_PWM_Start+0x72>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	bf14      	ite	ne
 8003002:	2301      	movne	r3, #1
 8003004:	2300      	moveq	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	e015      	b.n	8003036 <HAL_TIM_PWM_Start+0x9e>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b10      	cmp	r3, #16
 800300e:	d109      	bne.n	8003024 <HAL_TIM_PWM_Start+0x8c>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e008      	b.n	8003036 <HAL_TIM_PWM_Start+0x9e>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b01      	cmp	r3, #1
 800302e:	bf14      	ite	ne
 8003030:	2301      	movne	r3, #1
 8003032:	2300      	moveq	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e09c      	b.n	8003178 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d104      	bne.n	800304e <HAL_TIM_PWM_Start+0xb6>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800304c:	e023      	b.n	8003096 <HAL_TIM_PWM_Start+0xfe>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b04      	cmp	r3, #4
 8003052:	d104      	bne.n	800305e <HAL_TIM_PWM_Start+0xc6>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2202      	movs	r2, #2
 8003058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800305c:	e01b      	b.n	8003096 <HAL_TIM_PWM_Start+0xfe>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b08      	cmp	r3, #8
 8003062:	d104      	bne.n	800306e <HAL_TIM_PWM_Start+0xd6>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800306c:	e013      	b.n	8003096 <HAL_TIM_PWM_Start+0xfe>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b0c      	cmp	r3, #12
 8003072:	d104      	bne.n	800307e <HAL_TIM_PWM_Start+0xe6>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800307c:	e00b      	b.n	8003096 <HAL_TIM_PWM_Start+0xfe>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b10      	cmp	r3, #16
 8003082:	d104      	bne.n	800308e <HAL_TIM_PWM_Start+0xf6>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800308c:	e003      	b.n	8003096 <HAL_TIM_PWM_Start+0xfe>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2202      	movs	r2, #2
 8003092:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2201      	movs	r2, #1
 800309c:	6839      	ldr	r1, [r7, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fe74 	bl	8003d8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a35      	ldr	r2, [pc, #212]	@ (8003180 <HAL_TIM_PWM_Start+0x1e8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_TIM_PWM_Start+0x13e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a34      	ldr	r2, [pc, #208]	@ (8003184 <HAL_TIM_PWM_Start+0x1ec>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d00e      	beq.n	80030d6 <HAL_TIM_PWM_Start+0x13e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a32      	ldr	r2, [pc, #200]	@ (8003188 <HAL_TIM_PWM_Start+0x1f0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d009      	beq.n	80030d6 <HAL_TIM_PWM_Start+0x13e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a31      	ldr	r2, [pc, #196]	@ (800318c <HAL_TIM_PWM_Start+0x1f4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_TIM_PWM_Start+0x13e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a2f      	ldr	r2, [pc, #188]	@ (8003190 <HAL_TIM_PWM_Start+0x1f8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_TIM_PWM_Start+0x142>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <HAL_TIM_PWM_Start+0x144>
 80030da:	2300      	movs	r3, #0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d007      	beq.n	80030f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030ee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a22      	ldr	r2, [pc, #136]	@ (8003180 <HAL_TIM_PWM_Start+0x1e8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d01d      	beq.n	8003136 <HAL_TIM_PWM_Start+0x19e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003102:	d018      	beq.n	8003136 <HAL_TIM_PWM_Start+0x19e>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a22      	ldr	r2, [pc, #136]	@ (8003194 <HAL_TIM_PWM_Start+0x1fc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <HAL_TIM_PWM_Start+0x19e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a21      	ldr	r2, [pc, #132]	@ (8003198 <HAL_TIM_PWM_Start+0x200>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00e      	beq.n	8003136 <HAL_TIM_PWM_Start+0x19e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1f      	ldr	r2, [pc, #124]	@ (800319c <HAL_TIM_PWM_Start+0x204>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d009      	beq.n	8003136 <HAL_TIM_PWM_Start+0x19e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a17      	ldr	r2, [pc, #92]	@ (8003184 <HAL_TIM_PWM_Start+0x1ec>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d004      	beq.n	8003136 <HAL_TIM_PWM_Start+0x19e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a15      	ldr	r2, [pc, #84]	@ (8003188 <HAL_TIM_PWM_Start+0x1f0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d115      	bne.n	8003162 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	4b18      	ldr	r3, [pc, #96]	@ (80031a0 <HAL_TIM_PWM_Start+0x208>)
 800313e:	4013      	ands	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2b06      	cmp	r3, #6
 8003146:	d015      	beq.n	8003174 <HAL_TIM_PWM_Start+0x1dc>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800314e:	d011      	beq.n	8003174 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003160:	e008      	b.n	8003174 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	e000      	b.n	8003176 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003174:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40012c00 	.word	0x40012c00
 8003184:	40013400 	.word	0x40013400
 8003188:	40014000 	.word	0x40014000
 800318c:	40014400 	.word	0x40014400
 8003190:	40014800 	.word	0x40014800
 8003194:	40000400 	.word	0x40000400
 8003198:	40000800 	.word	0x40000800
 800319c:	40000c00 	.word	0x40000c00
 80031a0:	00010007 	.word	0x00010007

080031a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031be:	2302      	movs	r3, #2
 80031c0:	e0ff      	b.n	80033c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b14      	cmp	r3, #20
 80031ce:	f200 80f0 	bhi.w	80033b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80031d2:	a201      	add	r2, pc, #4	@ (adr r2, 80031d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d8:	0800322d 	.word	0x0800322d
 80031dc:	080033b3 	.word	0x080033b3
 80031e0:	080033b3 	.word	0x080033b3
 80031e4:	080033b3 	.word	0x080033b3
 80031e8:	0800326d 	.word	0x0800326d
 80031ec:	080033b3 	.word	0x080033b3
 80031f0:	080033b3 	.word	0x080033b3
 80031f4:	080033b3 	.word	0x080033b3
 80031f8:	080032af 	.word	0x080032af
 80031fc:	080033b3 	.word	0x080033b3
 8003200:	080033b3 	.word	0x080033b3
 8003204:	080033b3 	.word	0x080033b3
 8003208:	080032ef 	.word	0x080032ef
 800320c:	080033b3 	.word	0x080033b3
 8003210:	080033b3 	.word	0x080033b3
 8003214:	080033b3 	.word	0x080033b3
 8003218:	08003331 	.word	0x08003331
 800321c:	080033b3 	.word	0x080033b3
 8003220:	080033b3 	.word	0x080033b3
 8003224:	080033b3 	.word	0x080033b3
 8003228:	08003371 	.word	0x08003371
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68b9      	ldr	r1, [r7, #8]
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fa3a 	bl	80036ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0208 	orr.w	r2, r2, #8
 8003246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0204 	bic.w	r2, r2, #4
 8003256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6999      	ldr	r1, [r3, #24]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	619a      	str	r2, [r3, #24]
      break;
 800326a:	e0a5      	b.n	80033b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 faaa 	bl	80037cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6999      	ldr	r1, [r3, #24]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	021a      	lsls	r2, r3, #8
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	619a      	str	r2, [r3, #24]
      break;
 80032ac:	e084      	b.n	80033b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fb13 	bl	80038e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0208 	orr.w	r2, r2, #8
 80032c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69da      	ldr	r2, [r3, #28]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0204 	bic.w	r2, r2, #4
 80032d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69d9      	ldr	r1, [r3, #28]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	61da      	str	r2, [r3, #28]
      break;
 80032ec:	e064      	b.n	80033b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68b9      	ldr	r1, [r7, #8]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fb7b 	bl	80039f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69d9      	ldr	r1, [r3, #28]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	021a      	lsls	r2, r3, #8
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	61da      	str	r2, [r3, #28]
      break;
 800332e:	e043      	b.n	80033b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68b9      	ldr	r1, [r7, #8]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fbc4 	bl	8003ac4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0208 	orr.w	r2, r2, #8
 800334a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0204 	bic.w	r2, r2, #4
 800335a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	691a      	ldr	r2, [r3, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800336e:	e023      	b.n	80033b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fc08 	bl	8003b8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800338a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800339a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	021a      	lsls	r2, r3, #8
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80033b0:	e002      	b.n	80033b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
      break;
 80033b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop

080033cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_TIM_ConfigClockSource+0x1c>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e0b6      	b.n	8003556 <HAL_TIM_ConfigClockSource+0x18a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003406:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800340a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003412:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003424:	d03e      	beq.n	80034a4 <HAL_TIM_ConfigClockSource+0xd8>
 8003426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800342a:	f200 8087 	bhi.w	800353c <HAL_TIM_ConfigClockSource+0x170>
 800342e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003432:	f000 8086 	beq.w	8003542 <HAL_TIM_ConfigClockSource+0x176>
 8003436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800343a:	d87f      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x170>
 800343c:	2b70      	cmp	r3, #112	@ 0x70
 800343e:	d01a      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0xaa>
 8003440:	2b70      	cmp	r3, #112	@ 0x70
 8003442:	d87b      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x170>
 8003444:	2b60      	cmp	r3, #96	@ 0x60
 8003446:	d050      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x11e>
 8003448:	2b60      	cmp	r3, #96	@ 0x60
 800344a:	d877      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x170>
 800344c:	2b50      	cmp	r3, #80	@ 0x50
 800344e:	d03c      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0xfe>
 8003450:	2b50      	cmp	r3, #80	@ 0x50
 8003452:	d873      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x170>
 8003454:	2b40      	cmp	r3, #64	@ 0x40
 8003456:	d058      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x13e>
 8003458:	2b40      	cmp	r3, #64	@ 0x40
 800345a:	d86f      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x170>
 800345c:	2b30      	cmp	r3, #48	@ 0x30
 800345e:	d064      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15e>
 8003460:	2b30      	cmp	r3, #48	@ 0x30
 8003462:	d86b      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x170>
 8003464:	2b20      	cmp	r3, #32
 8003466:	d060      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15e>
 8003468:	2b20      	cmp	r3, #32
 800346a:	d867      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x170>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d05c      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15e>
 8003470:	2b10      	cmp	r3, #16
 8003472:	d05a      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15e>
 8003474:	e062      	b.n	800353c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003486:	f000 fc61 	bl	8003d4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003498:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	609a      	str	r2, [r3, #8]
      break;
 80034a2:	e04f      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034b4:	f000 fc4a 	bl	8003d4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034c6:	609a      	str	r2, [r3, #8]
      break;
 80034c8:	e03c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d6:	461a      	mov	r2, r3
 80034d8:	f000 fbbe 	bl	8003c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2150      	movs	r1, #80	@ 0x50
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fc17 	bl	8003d16 <TIM_ITRx_SetConfig>
      break;
 80034e8:	e02c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034f6:	461a      	mov	r2, r3
 80034f8:	f000 fbdd 	bl	8003cb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2160      	movs	r1, #96	@ 0x60
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fc07 	bl	8003d16 <TIM_ITRx_SetConfig>
      break;
 8003508:	e01c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003516:	461a      	mov	r2, r3
 8003518:	f000 fb9e 	bl	8003c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2140      	movs	r1, #64	@ 0x40
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fbf7 	bl	8003d16 <TIM_ITRx_SetConfig>
      break;
 8003528:	e00c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4619      	mov	r1, r3
 8003534:	4610      	mov	r0, r2
 8003536:	f000 fbee 	bl	8003d16 <TIM_ITRx_SetConfig>
      break;
 800353a:	e003      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      break;
 8003540:	e000      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003542:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a46      	ldr	r2, [pc, #280]	@ (800368c <TIM_Base_SetConfig+0x12c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d013      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800357e:	d00f      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a43      	ldr	r2, [pc, #268]	@ (8003690 <TIM_Base_SetConfig+0x130>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00b      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a42      	ldr	r2, [pc, #264]	@ (8003694 <TIM_Base_SetConfig+0x134>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d007      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a41      	ldr	r2, [pc, #260]	@ (8003698 <TIM_Base_SetConfig+0x138>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <TIM_Base_SetConfig+0x40>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a40      	ldr	r2, [pc, #256]	@ (800369c <TIM_Base_SetConfig+0x13c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d108      	bne.n	80035b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a35      	ldr	r2, [pc, #212]	@ (800368c <TIM_Base_SetConfig+0x12c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01f      	beq.n	80035fa <TIM_Base_SetConfig+0x9a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c0:	d01b      	beq.n	80035fa <TIM_Base_SetConfig+0x9a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a32      	ldr	r2, [pc, #200]	@ (8003690 <TIM_Base_SetConfig+0x130>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d017      	beq.n	80035fa <TIM_Base_SetConfig+0x9a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a31      	ldr	r2, [pc, #196]	@ (8003694 <TIM_Base_SetConfig+0x134>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d013      	beq.n	80035fa <TIM_Base_SetConfig+0x9a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a30      	ldr	r2, [pc, #192]	@ (8003698 <TIM_Base_SetConfig+0x138>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d00f      	beq.n	80035fa <TIM_Base_SetConfig+0x9a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a2f      	ldr	r2, [pc, #188]	@ (800369c <TIM_Base_SetConfig+0x13c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00b      	beq.n	80035fa <TIM_Base_SetConfig+0x9a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a2e      	ldr	r2, [pc, #184]	@ (80036a0 <TIM_Base_SetConfig+0x140>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d007      	beq.n	80035fa <TIM_Base_SetConfig+0x9a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a2d      	ldr	r2, [pc, #180]	@ (80036a4 <TIM_Base_SetConfig+0x144>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d003      	beq.n	80035fa <TIM_Base_SetConfig+0x9a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a2c      	ldr	r2, [pc, #176]	@ (80036a8 <TIM_Base_SetConfig+0x148>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d108      	bne.n	800360c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a16      	ldr	r2, [pc, #88]	@ (800368c <TIM_Base_SetConfig+0x12c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00f      	beq.n	8003658 <TIM_Base_SetConfig+0xf8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a18      	ldr	r2, [pc, #96]	@ (800369c <TIM_Base_SetConfig+0x13c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00b      	beq.n	8003658 <TIM_Base_SetConfig+0xf8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a17      	ldr	r2, [pc, #92]	@ (80036a0 <TIM_Base_SetConfig+0x140>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d007      	beq.n	8003658 <TIM_Base_SetConfig+0xf8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a16      	ldr	r2, [pc, #88]	@ (80036a4 <TIM_Base_SetConfig+0x144>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_Base_SetConfig+0xf8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a15      	ldr	r2, [pc, #84]	@ (80036a8 <TIM_Base_SetConfig+0x148>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d103      	bne.n	8003660 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b01      	cmp	r3, #1
 8003670:	d105      	bne.n	800367e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f023 0201 	bic.w	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	611a      	str	r2, [r3, #16]
  }
}
 800367e:	bf00      	nop
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40012c00 	.word	0x40012c00
 8003690:	40000400 	.word	0x40000400
 8003694:	40000800 	.word	0x40000800
 8003698:	40000c00 	.word	0x40000c00
 800369c:	40013400 	.word	0x40013400
 80036a0:	40014000 	.word	0x40014000
 80036a4:	40014400 	.word	0x40014400
 80036a8:	40014800 	.word	0x40014800

080036ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	f023 0201 	bic.w	r2, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0303 	bic.w	r3, r3, #3
 80036e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f023 0302 	bic.w	r3, r3, #2
 80036f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a2c      	ldr	r2, [pc, #176]	@ (80037b8 <TIM_OC1_SetConfig+0x10c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00f      	beq.n	800372c <TIM_OC1_SetConfig+0x80>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a2b      	ldr	r2, [pc, #172]	@ (80037bc <TIM_OC1_SetConfig+0x110>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00b      	beq.n	800372c <TIM_OC1_SetConfig+0x80>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a2a      	ldr	r2, [pc, #168]	@ (80037c0 <TIM_OC1_SetConfig+0x114>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d007      	beq.n	800372c <TIM_OC1_SetConfig+0x80>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a29      	ldr	r2, [pc, #164]	@ (80037c4 <TIM_OC1_SetConfig+0x118>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_OC1_SetConfig+0x80>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a28      	ldr	r2, [pc, #160]	@ (80037c8 <TIM_OC1_SetConfig+0x11c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d10c      	bne.n	8003746 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f023 0308 	bic.w	r3, r3, #8
 8003732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f023 0304 	bic.w	r3, r3, #4
 8003744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a1b      	ldr	r2, [pc, #108]	@ (80037b8 <TIM_OC1_SetConfig+0x10c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00f      	beq.n	800376e <TIM_OC1_SetConfig+0xc2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a1a      	ldr	r2, [pc, #104]	@ (80037bc <TIM_OC1_SetConfig+0x110>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00b      	beq.n	800376e <TIM_OC1_SetConfig+0xc2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a19      	ldr	r2, [pc, #100]	@ (80037c0 <TIM_OC1_SetConfig+0x114>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d007      	beq.n	800376e <TIM_OC1_SetConfig+0xc2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a18      	ldr	r2, [pc, #96]	@ (80037c4 <TIM_OC1_SetConfig+0x118>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d003      	beq.n	800376e <TIM_OC1_SetConfig+0xc2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a17      	ldr	r2, [pc, #92]	@ (80037c8 <TIM_OC1_SetConfig+0x11c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d111      	bne.n	8003792 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800377c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	621a      	str	r2, [r3, #32]
}
 80037ac:	bf00      	nop
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	40012c00 	.word	0x40012c00
 80037bc:	40013400 	.word	0x40013400
 80037c0:	40014000 	.word	0x40014000
 80037c4:	40014400 	.word	0x40014400
 80037c8:	40014800 	.word	0x40014800

080037cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f023 0210 	bic.w	r2, r3, #16
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	021b      	lsls	r3, r3, #8
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f023 0320 	bic.w	r3, r3, #32
 800381a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	4313      	orrs	r3, r2
 8003826:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a28      	ldr	r2, [pc, #160]	@ (80038cc <TIM_OC2_SetConfig+0x100>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d003      	beq.n	8003838 <TIM_OC2_SetConfig+0x6c>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a27      	ldr	r2, [pc, #156]	@ (80038d0 <TIM_OC2_SetConfig+0x104>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d10d      	bne.n	8003854 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800383e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003852:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a1d      	ldr	r2, [pc, #116]	@ (80038cc <TIM_OC2_SetConfig+0x100>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d00f      	beq.n	800387c <TIM_OC2_SetConfig+0xb0>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a1c      	ldr	r2, [pc, #112]	@ (80038d0 <TIM_OC2_SetConfig+0x104>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00b      	beq.n	800387c <TIM_OC2_SetConfig+0xb0>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a1b      	ldr	r2, [pc, #108]	@ (80038d4 <TIM_OC2_SetConfig+0x108>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d007      	beq.n	800387c <TIM_OC2_SetConfig+0xb0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a1a      	ldr	r2, [pc, #104]	@ (80038d8 <TIM_OC2_SetConfig+0x10c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d003      	beq.n	800387c <TIM_OC2_SetConfig+0xb0>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a19      	ldr	r2, [pc, #100]	@ (80038dc <TIM_OC2_SetConfig+0x110>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d113      	bne.n	80038a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003882:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800388a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	621a      	str	r2, [r3, #32]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40012c00 	.word	0x40012c00
 80038d0:	40013400 	.word	0x40013400
 80038d4:	40014000 	.word	0x40014000
 80038d8:	40014400 	.word	0x40014400
 80038dc:	40014800 	.word	0x40014800

080038e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800390e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0303 	bic.w	r3, r3, #3
 800391a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800392c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a27      	ldr	r2, [pc, #156]	@ (80039dc <TIM_OC3_SetConfig+0xfc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d003      	beq.n	800394a <TIM_OC3_SetConfig+0x6a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a26      	ldr	r2, [pc, #152]	@ (80039e0 <TIM_OC3_SetConfig+0x100>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d10d      	bne.n	8003966 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a1c      	ldr	r2, [pc, #112]	@ (80039dc <TIM_OC3_SetConfig+0xfc>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00f      	beq.n	800398e <TIM_OC3_SetConfig+0xae>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1b      	ldr	r2, [pc, #108]	@ (80039e0 <TIM_OC3_SetConfig+0x100>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00b      	beq.n	800398e <TIM_OC3_SetConfig+0xae>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a1a      	ldr	r2, [pc, #104]	@ (80039e4 <TIM_OC3_SetConfig+0x104>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d007      	beq.n	800398e <TIM_OC3_SetConfig+0xae>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a19      	ldr	r2, [pc, #100]	@ (80039e8 <TIM_OC3_SetConfig+0x108>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d003      	beq.n	800398e <TIM_OC3_SetConfig+0xae>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a18      	ldr	r2, [pc, #96]	@ (80039ec <TIM_OC3_SetConfig+0x10c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d113      	bne.n	80039b6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800399c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	621a      	str	r2, [r3, #32]
}
 80039d0:	bf00      	nop
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	40012c00 	.word	0x40012c00
 80039e0:	40013400 	.word	0x40013400
 80039e4:	40014000 	.word	0x40014000
 80039e8:	40014400 	.word	0x40014400
 80039ec:	40014800 	.word	0x40014800

080039f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	031b      	lsls	r3, r3, #12
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a18      	ldr	r2, [pc, #96]	@ (8003ab0 <TIM_OC4_SetConfig+0xc0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00f      	beq.n	8003a74 <TIM_OC4_SetConfig+0x84>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a17      	ldr	r2, [pc, #92]	@ (8003ab4 <TIM_OC4_SetConfig+0xc4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00b      	beq.n	8003a74 <TIM_OC4_SetConfig+0x84>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a16      	ldr	r2, [pc, #88]	@ (8003ab8 <TIM_OC4_SetConfig+0xc8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d007      	beq.n	8003a74 <TIM_OC4_SetConfig+0x84>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a15      	ldr	r2, [pc, #84]	@ (8003abc <TIM_OC4_SetConfig+0xcc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d003      	beq.n	8003a74 <TIM_OC4_SetConfig+0x84>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a14      	ldr	r2, [pc, #80]	@ (8003ac0 <TIM_OC4_SetConfig+0xd0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d109      	bne.n	8003a88 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	019b      	lsls	r3, r3, #6
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40012c00 	.word	0x40012c00
 8003ab4:	40013400 	.word	0x40013400
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40014400 	.word	0x40014400
 8003ac0:	40014800 	.word	0x40014800

08003ac4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003b08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	041b      	lsls	r3, r3, #16
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a17      	ldr	r2, [pc, #92]	@ (8003b78 <TIM_OC5_SetConfig+0xb4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00f      	beq.n	8003b3e <TIM_OC5_SetConfig+0x7a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a16      	ldr	r2, [pc, #88]	@ (8003b7c <TIM_OC5_SetConfig+0xb8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <TIM_OC5_SetConfig+0x7a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a15      	ldr	r2, [pc, #84]	@ (8003b80 <TIM_OC5_SetConfig+0xbc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d007      	beq.n	8003b3e <TIM_OC5_SetConfig+0x7a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a14      	ldr	r2, [pc, #80]	@ (8003b84 <TIM_OC5_SetConfig+0xc0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_OC5_SetConfig+0x7a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a13      	ldr	r2, [pc, #76]	@ (8003b88 <TIM_OC5_SetConfig+0xc4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d109      	bne.n	8003b52 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	621a      	str	r2, [r3, #32]
}
 8003b6c:	bf00      	nop
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40013400 	.word	0x40013400
 8003b80:	40014000 	.word	0x40014000
 8003b84:	40014400 	.word	0x40014400
 8003b88:	40014800 	.word	0x40014800

08003b8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	051b      	lsls	r3, r3, #20
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a18      	ldr	r2, [pc, #96]	@ (8003c44 <TIM_OC6_SetConfig+0xb8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d00f      	beq.n	8003c08 <TIM_OC6_SetConfig+0x7c>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a17      	ldr	r2, [pc, #92]	@ (8003c48 <TIM_OC6_SetConfig+0xbc>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00b      	beq.n	8003c08 <TIM_OC6_SetConfig+0x7c>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a16      	ldr	r2, [pc, #88]	@ (8003c4c <TIM_OC6_SetConfig+0xc0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d007      	beq.n	8003c08 <TIM_OC6_SetConfig+0x7c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a15      	ldr	r2, [pc, #84]	@ (8003c50 <TIM_OC6_SetConfig+0xc4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_OC6_SetConfig+0x7c>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a14      	ldr	r2, [pc, #80]	@ (8003c54 <TIM_OC6_SetConfig+0xc8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d109      	bne.n	8003c1c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	029b      	lsls	r3, r3, #10
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40012c00 	.word	0x40012c00
 8003c48:	40013400 	.word	0x40013400
 8003c4c:	40014000 	.word	0x40014000
 8003c50:	40014400 	.word	0x40014400
 8003c54:	40014800 	.word	0x40014800

08003c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f023 0201 	bic.w	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f023 030a 	bic.w	r3, r3, #10
 8003c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	621a      	str	r2, [r3, #32]
}
 8003caa:	bf00      	nop
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b087      	sub	sp, #28
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f023 0210 	bic.w	r2, r3, #16
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ce0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	031b      	lsls	r3, r3, #12
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cf2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	621a      	str	r2, [r3, #32]
}
 8003d0a:	bf00      	nop
 8003d0c:	371c      	adds	r7, #28
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b085      	sub	sp, #20
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f043 0307 	orr.w	r3, r3, #7
 8003d38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	609a      	str	r2, [r3, #8]
}
 8003d40:	bf00      	nop
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
 8003d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	021a      	lsls	r2, r3, #8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	609a      	str	r2, [r3, #8]
}
 8003d80:	bf00      	nop
 8003d82:	371c      	adds	r7, #28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	2201      	movs	r2, #1
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a1a      	ldr	r2, [r3, #32]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	43db      	mvns	r3, r3
 8003dae:	401a      	ands	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a1a      	ldr	r2, [r3, #32]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e068      	b.n	8003ec2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a2e      	ldr	r2, [pc, #184]	@ (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d004      	beq.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d108      	bne.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003e2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01d      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e62:	d018      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1b      	ldr	r2, [pc, #108]	@ (8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d013      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1a      	ldr	r2, [pc, #104]	@ (8003edc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00e      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a18      	ldr	r2, [pc, #96]	@ (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d009      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a13      	ldr	r2, [pc, #76]	@ (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d004      	beq.n	8003e96 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a14      	ldr	r2, [pc, #80]	@ (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d10c      	bne.n	8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	40012c00 	.word	0x40012c00
 8003ed4:	40013400 	.word	0x40013400
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40000800 	.word	0x40000800
 8003ee0:	40000c00 	.word	0x40000c00
 8003ee4:	40014000 	.word	0x40014000

08003ee8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e065      	b.n	8003fd0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	041b      	lsls	r3, r3, #16
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a16      	ldr	r2, [pc, #88]	@ (8003fdc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d004      	beq.n	8003f92 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a14      	ldr	r2, [pc, #80]	@ (8003fe0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d115      	bne.n	8003fbe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	051b      	lsls	r3, r3, #20
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	40012c00 	.word	0x40012c00
 8003fe0:	40013400 	.word	0x40013400

08003fe4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e040      	b.n	8004078 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d106      	bne.n	800400c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fc ff00 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2224      	movs	r2, #36	@ 0x24
 8004010:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0201 	bic.w	r2, r2, #1
 8004020:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fedc 	bl	8004de8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fc21 	bl	8004878 <UART_SetConfig>
 8004036:	4603      	mov	r3, r0
 8004038:	2b01      	cmp	r3, #1
 800403a:	d101      	bne.n	8004040 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e01b      	b.n	8004078 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800404e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800405e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 ff5b 	bl	8004f2c <UART_CheckIdleState>
 8004076:	4603      	mov	r3, r0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08a      	sub	sp, #40	@ 0x28
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	4613      	mov	r3, r2
 800408e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004094:	2b20      	cmp	r3, #32
 8004096:	d177      	bne.n	8004188 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_UART_Transmit+0x24>
 800409e:	88fb      	ldrh	r3, [r7, #6]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e070      	b.n	800418a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2221      	movs	r2, #33	@ 0x21
 80040b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040b6:	f7fd f839 	bl	800112c <HAL_GetTick>
 80040ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	88fa      	ldrh	r2, [r7, #6]
 80040c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d4:	d108      	bne.n	80040e8 <HAL_UART_Transmit+0x68>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d104      	bne.n	80040e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	e003      	b.n	80040f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040f0:	e02f      	b.n	8004152 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2200      	movs	r2, #0
 80040fa:	2180      	movs	r1, #128	@ 0x80
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 ffbd 	bl	800507c <UART_WaitOnFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d004      	beq.n	8004112 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e03b      	b.n	800418a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10b      	bne.n	8004130 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	881a      	ldrh	r2, [r3, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004124:	b292      	uxth	r2, r2
 8004126:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	3302      	adds	r3, #2
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	e007      	b.n	8004140 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	781a      	ldrb	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	3301      	adds	r3, #1
 800413e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1c9      	bne.n	80040f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2200      	movs	r2, #0
 8004166:	2140      	movs	r1, #64	@ 0x40
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 ff87 	bl	800507c <UART_WaitOnFlagUntilTimeout>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d004      	beq.n	800417e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e005      	b.n	800418a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2220      	movs	r2, #32
 8004182:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	e000      	b.n	800418a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004188:	2302      	movs	r3, #2
  }
}
 800418a:	4618      	mov	r0, r3
 800418c:	3720      	adds	r7, #32
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b08a      	sub	sp, #40	@ 0x28
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	4613      	mov	r3, r2
 80041a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	d137      	bne.n	800421c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <HAL_UART_Receive_IT+0x24>
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e030      	b.n	800421e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a18      	ldr	r2, [pc, #96]	@ (8004228 <HAL_UART_Receive_IT+0x94>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d01f      	beq.n	800420c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d018      	beq.n	800420c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	613b      	str	r3, [r7, #16]
   return(result);
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	461a      	mov	r2, r3
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	623b      	str	r3, [r7, #32]
 80041fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fc:	69f9      	ldr	r1, [r7, #28]
 80041fe:	6a3a      	ldr	r2, [r7, #32]
 8004200:	e841 2300 	strex	r3, r2, [r1]
 8004204:	61bb      	str	r3, [r7, #24]
   return(result);
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1e6      	bne.n	80041da <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	461a      	mov	r2, r3
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 ffa0 	bl	8005158 <UART_Start_Receive_IT>
 8004218:	4603      	mov	r3, r0
 800421a:	e000      	b.n	800421e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800421c:	2302      	movs	r3, #2
  }
}
 800421e:	4618      	mov	r0, r3
 8004220:	3728      	adds	r7, #40	@ 0x28
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40008000 	.word	0x40008000

0800422c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b0ba      	sub	sp, #232	@ 0xe8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004252:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004256:	f640 030f 	movw	r3, #2063	@ 0x80f
 800425a:	4013      	ands	r3, r2
 800425c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004260:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d115      	bne.n	8004294 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00f      	beq.n	8004294 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 82ca 	beq.w	800481e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	4798      	blx	r3
      }
      return;
 8004292:	e2c4      	b.n	800481e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8117 	beq.w	80044cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800429e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80042aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80042ae:	4b85      	ldr	r3, [pc, #532]	@ (80044c4 <HAL_UART_IRQHandler+0x298>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 810a 	beq.w	80044cc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d011      	beq.n	80042e8 <HAL_UART_IRQHandler+0xbc>
 80042c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00b      	beq.n	80042e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2201      	movs	r2, #1
 80042d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042de:	f043 0201 	orr.w	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d011      	beq.n	8004318 <HAL_UART_IRQHandler+0xec>
 80042f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d00b      	beq.n	8004318 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2202      	movs	r2, #2
 8004306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800430e:	f043 0204 	orr.w	r2, r3, #4
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d011      	beq.n	8004348 <HAL_UART_IRQHandler+0x11c>
 8004324:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00b      	beq.n	8004348 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2204      	movs	r2, #4
 8004336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800433e:	f043 0202 	orr.w	r2, r3, #2
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d017      	beq.n	8004384 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d105      	bne.n	800436c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004364:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00b      	beq.n	8004384 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2208      	movs	r2, #8
 8004372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800437a:	f043 0208 	orr.w	r2, r3, #8
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800438c:	2b00      	cmp	r3, #0
 800438e:	d012      	beq.n	80043b6 <HAL_UART_IRQHandler+0x18a>
 8004390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004394:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00c      	beq.n	80043b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043ac:	f043 0220 	orr.w	r2, r3, #32
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8230 	beq.w	8004822 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00d      	beq.n	80043ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043fe:	2b40      	cmp	r3, #64	@ 0x40
 8004400:	d005      	beq.n	800440e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004406:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800440a:	2b00      	cmp	r3, #0
 800440c:	d04f      	beq.n	80044ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 ff68 	bl	80052e4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800441e:	2b40      	cmp	r3, #64	@ 0x40
 8004420:	d141      	bne.n	80044a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004438:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800443c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004440:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3308      	adds	r3, #8
 800444a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800444e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004452:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800445a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800445e:	e841 2300 	strex	r3, r2, [r1]
 8004462:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1d9      	bne.n	8004422 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004472:	2b00      	cmp	r3, #0
 8004474:	d013      	beq.n	800449e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800447a:	4a13      	ldr	r2, [pc, #76]	@ (80044c8 <HAL_UART_IRQHandler+0x29c>)
 800447c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004482:	4618      	mov	r0, r3
 8004484:	f7fc ffad 	bl	80013e2 <HAL_DMA_Abort_IT>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d017      	beq.n	80044be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004498:	4610      	mov	r0, r2
 800449a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449c:	e00f      	b.n	80044be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f9d4 	bl	800484c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	e00b      	b.n	80044be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f9d0 	bl	800484c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ac:	e007      	b.n	80044be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f9cc 	bl	800484c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80044bc:	e1b1      	b.n	8004822 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044be:	bf00      	nop
    return;
 80044c0:	e1af      	b.n	8004822 <HAL_UART_IRQHandler+0x5f6>
 80044c2:	bf00      	nop
 80044c4:	04000120 	.word	0x04000120
 80044c8:	080053ad 	.word	0x080053ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	f040 816a 	bne.w	80047aa <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80044d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 8163 	beq.w	80047aa <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 815c 	beq.w	80047aa <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2210      	movs	r2, #16
 80044f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004504:	2b40      	cmp	r3, #64	@ 0x40
 8004506:	f040 80d4 	bne.w	80046b2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004516:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80ad 	beq.w	800467a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800452a:	429a      	cmp	r2, r3
 800452c:	f080 80a5 	bcs.w	800467a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004536:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b00      	cmp	r3, #0
 8004548:	f040 8086 	bne.w	8004658 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004560:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004568:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004576:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800457a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004582:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800458e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1da      	bne.n	800454c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3308      	adds	r3, #8
 800459c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3308      	adds	r3, #8
 80045b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80045be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80045c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e1      	bne.n	8004596 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3308      	adds	r3, #8
 80045d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3308      	adds	r3, #8
 80045f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045fe:	e841 2300 	strex	r3, r2, [r1]
 8004602:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004604:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1e3      	bne.n	80045d2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2220      	movs	r2, #32
 800460e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004628:	f023 0310 	bic.w	r3, r3, #16
 800462c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	461a      	mov	r2, r3
 8004636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800463a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800463c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004640:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e4      	bne.n	8004618 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004652:	4618      	mov	r0, r3
 8004654:	f7fc fe87 	bl	8001366 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800466a:	b29b      	uxth	r3, r3
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	b29b      	uxth	r3, r3
 8004670:	4619      	mov	r1, r3
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f8f4 	bl	8004860 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004678:	e0d5      	b.n	8004826 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004680:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004684:	429a      	cmp	r2, r3
 8004686:	f040 80ce 	bne.w	8004826 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b20      	cmp	r3, #32
 8004698:	f040 80c5 	bne.w	8004826 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80046a8:	4619      	mov	r1, r3
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f8d8 	bl	8004860 <HAL_UARTEx_RxEventCallback>
      return;
 80046b0:	e0b9      	b.n	8004826 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 80ab 	beq.w	800482a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80046d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80a6 	beq.w	800482a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e6:	e853 3f00 	ldrex	r3, [r3]
 80046ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004700:	647b      	str	r3, [r7, #68]	@ 0x44
 8004702:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004704:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004706:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004708:	e841 2300 	strex	r3, r2, [r1]
 800470c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800470e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1e4      	bne.n	80046de <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3308      	adds	r3, #8
 800471a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	623b      	str	r3, [r7, #32]
   return(result);
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	f023 0301 	bic.w	r3, r3, #1
 800472a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3308      	adds	r3, #8
 8004734:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004738:	633a      	str	r2, [r7, #48]	@ 0x30
 800473a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800473e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004740:	e841 2300 	strex	r3, r2, [r1]
 8004744:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1e3      	bne.n	8004714 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	60fb      	str	r3, [r7, #12]
   return(result);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f023 0310 	bic.w	r3, r3, #16
 8004774:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004782:	61fb      	str	r3, [r7, #28]
 8004784:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	69b9      	ldr	r1, [r7, #24]
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	617b      	str	r3, [r7, #20]
   return(result);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e4      	bne.n	8004760 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2202      	movs	r2, #2
 800479a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800479c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047a0:	4619      	mov	r1, r3
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f85c 	bl	8004860 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047a8:	e03f      	b.n	800482a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00e      	beq.n	80047d4 <HAL_UART_IRQHandler+0x5a8>
 80047b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d008      	beq.n	80047d4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80047ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 ffe9 	bl	80057a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047d2:	e02d      	b.n	8004830 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80047d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00e      	beq.n	80047fe <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80047e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d01c      	beq.n	800482e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4798      	blx	r3
    }
    return;
 80047fc:	e017      	b.n	800482e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004806:	2b00      	cmp	r3, #0
 8004808:	d012      	beq.n	8004830 <HAL_UART_IRQHandler+0x604>
 800480a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800480e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00c      	beq.n	8004830 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fdde 	bl	80053d8 <UART_EndTransmit_IT>
    return;
 800481c:	e008      	b.n	8004830 <HAL_UART_IRQHandler+0x604>
      return;
 800481e:	bf00      	nop
 8004820:	e006      	b.n	8004830 <HAL_UART_IRQHandler+0x604>
    return;
 8004822:	bf00      	nop
 8004824:	e004      	b.n	8004830 <HAL_UART_IRQHandler+0x604>
      return;
 8004826:	bf00      	nop
 8004828:	e002      	b.n	8004830 <HAL_UART_IRQHandler+0x604>
      return;
 800482a:	bf00      	nop
 800482c:	e000      	b.n	8004830 <HAL_UART_IRQHandler+0x604>
    return;
 800482e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004830:	37e8      	adds	r7, #232	@ 0xe8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop

08004838 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800487c:	b08a      	sub	sp, #40	@ 0x28
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	431a      	orrs	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	431a      	orrs	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	4313      	orrs	r3, r2
 800489e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	4ba4      	ldr	r3, [pc, #656]	@ (8004b38 <UART_SetConfig+0x2c0>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	6812      	ldr	r2, [r2, #0]
 80048ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048b0:	430b      	orrs	r3, r1
 80048b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a99      	ldr	r2, [pc, #612]	@ (8004b3c <UART_SetConfig+0x2c4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e0:	4313      	orrs	r3, r2
 80048e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f4:	430a      	orrs	r2, r1
 80048f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a90      	ldr	r2, [pc, #576]	@ (8004b40 <UART_SetConfig+0x2c8>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d126      	bne.n	8004950 <UART_SetConfig+0xd8>
 8004902:	4b90      	ldr	r3, [pc, #576]	@ (8004b44 <UART_SetConfig+0x2cc>)
 8004904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	2b03      	cmp	r3, #3
 800490e:	d81b      	bhi.n	8004948 <UART_SetConfig+0xd0>
 8004910:	a201      	add	r2, pc, #4	@ (adr r2, 8004918 <UART_SetConfig+0xa0>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	08004929 	.word	0x08004929
 800491c:	08004939 	.word	0x08004939
 8004920:	08004931 	.word	0x08004931
 8004924:	08004941 	.word	0x08004941
 8004928:	2301      	movs	r3, #1
 800492a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800492e:	e116      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004930:	2302      	movs	r3, #2
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004936:	e112      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004938:	2304      	movs	r3, #4
 800493a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800493e:	e10e      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004940:	2308      	movs	r3, #8
 8004942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004946:	e10a      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004948:	2310      	movs	r3, #16
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800494e:	e106      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a7c      	ldr	r2, [pc, #496]	@ (8004b48 <UART_SetConfig+0x2d0>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d138      	bne.n	80049cc <UART_SetConfig+0x154>
 800495a:	4b7a      	ldr	r3, [pc, #488]	@ (8004b44 <UART_SetConfig+0x2cc>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004960:	f003 030c 	and.w	r3, r3, #12
 8004964:	2b0c      	cmp	r3, #12
 8004966:	d82d      	bhi.n	80049c4 <UART_SetConfig+0x14c>
 8004968:	a201      	add	r2, pc, #4	@ (adr r2, 8004970 <UART_SetConfig+0xf8>)
 800496a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496e:	bf00      	nop
 8004970:	080049a5 	.word	0x080049a5
 8004974:	080049c5 	.word	0x080049c5
 8004978:	080049c5 	.word	0x080049c5
 800497c:	080049c5 	.word	0x080049c5
 8004980:	080049b5 	.word	0x080049b5
 8004984:	080049c5 	.word	0x080049c5
 8004988:	080049c5 	.word	0x080049c5
 800498c:	080049c5 	.word	0x080049c5
 8004990:	080049ad 	.word	0x080049ad
 8004994:	080049c5 	.word	0x080049c5
 8004998:	080049c5 	.word	0x080049c5
 800499c:	080049c5 	.word	0x080049c5
 80049a0:	080049bd 	.word	0x080049bd
 80049a4:	2300      	movs	r3, #0
 80049a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049aa:	e0d8      	b.n	8004b5e <UART_SetConfig+0x2e6>
 80049ac:	2302      	movs	r3, #2
 80049ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b2:	e0d4      	b.n	8004b5e <UART_SetConfig+0x2e6>
 80049b4:	2304      	movs	r3, #4
 80049b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ba:	e0d0      	b.n	8004b5e <UART_SetConfig+0x2e6>
 80049bc:	2308      	movs	r3, #8
 80049be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049c2:	e0cc      	b.n	8004b5e <UART_SetConfig+0x2e6>
 80049c4:	2310      	movs	r3, #16
 80049c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ca:	e0c8      	b.n	8004b5e <UART_SetConfig+0x2e6>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a5e      	ldr	r2, [pc, #376]	@ (8004b4c <UART_SetConfig+0x2d4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d125      	bne.n	8004a22 <UART_SetConfig+0x1aa>
 80049d6:	4b5b      	ldr	r3, [pc, #364]	@ (8004b44 <UART_SetConfig+0x2cc>)
 80049d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80049e0:	2b30      	cmp	r3, #48	@ 0x30
 80049e2:	d016      	beq.n	8004a12 <UART_SetConfig+0x19a>
 80049e4:	2b30      	cmp	r3, #48	@ 0x30
 80049e6:	d818      	bhi.n	8004a1a <UART_SetConfig+0x1a2>
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d00a      	beq.n	8004a02 <UART_SetConfig+0x18a>
 80049ec:	2b20      	cmp	r3, #32
 80049ee:	d814      	bhi.n	8004a1a <UART_SetConfig+0x1a2>
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <UART_SetConfig+0x182>
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	d008      	beq.n	8004a0a <UART_SetConfig+0x192>
 80049f8:	e00f      	b.n	8004a1a <UART_SetConfig+0x1a2>
 80049fa:	2300      	movs	r3, #0
 80049fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a00:	e0ad      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004a02:	2302      	movs	r3, #2
 8004a04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a08:	e0a9      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a10:	e0a5      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004a12:	2308      	movs	r3, #8
 8004a14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a18:	e0a1      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004a1a:	2310      	movs	r3, #16
 8004a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a20:	e09d      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a4a      	ldr	r2, [pc, #296]	@ (8004b50 <UART_SetConfig+0x2d8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d125      	bne.n	8004a78 <UART_SetConfig+0x200>
 8004a2c:	4b45      	ldr	r3, [pc, #276]	@ (8004b44 <UART_SetConfig+0x2cc>)
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a36:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a38:	d016      	beq.n	8004a68 <UART_SetConfig+0x1f0>
 8004a3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a3c:	d818      	bhi.n	8004a70 <UART_SetConfig+0x1f8>
 8004a3e:	2b80      	cmp	r3, #128	@ 0x80
 8004a40:	d00a      	beq.n	8004a58 <UART_SetConfig+0x1e0>
 8004a42:	2b80      	cmp	r3, #128	@ 0x80
 8004a44:	d814      	bhi.n	8004a70 <UART_SetConfig+0x1f8>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <UART_SetConfig+0x1d8>
 8004a4a:	2b40      	cmp	r3, #64	@ 0x40
 8004a4c:	d008      	beq.n	8004a60 <UART_SetConfig+0x1e8>
 8004a4e:	e00f      	b.n	8004a70 <UART_SetConfig+0x1f8>
 8004a50:	2300      	movs	r3, #0
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a56:	e082      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a5e:	e07e      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004a60:	2304      	movs	r3, #4
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a66:	e07a      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004a68:	2308      	movs	r3, #8
 8004a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6e:	e076      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004a70:	2310      	movs	r3, #16
 8004a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a76:	e072      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a35      	ldr	r2, [pc, #212]	@ (8004b54 <UART_SetConfig+0x2dc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d12a      	bne.n	8004ad8 <UART_SetConfig+0x260>
 8004a82:	4b30      	ldr	r3, [pc, #192]	@ (8004b44 <UART_SetConfig+0x2cc>)
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a90:	d01a      	beq.n	8004ac8 <UART_SetConfig+0x250>
 8004a92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a96:	d81b      	bhi.n	8004ad0 <UART_SetConfig+0x258>
 8004a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a9c:	d00c      	beq.n	8004ab8 <UART_SetConfig+0x240>
 8004a9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aa2:	d815      	bhi.n	8004ad0 <UART_SetConfig+0x258>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <UART_SetConfig+0x238>
 8004aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004aac:	d008      	beq.n	8004ac0 <UART_SetConfig+0x248>
 8004aae:	e00f      	b.n	8004ad0 <UART_SetConfig+0x258>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ab6:	e052      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004abe:	e04e      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004ac0:	2304      	movs	r3, #4
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac6:	e04a      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004ac8:	2308      	movs	r3, #8
 8004aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ace:	e046      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ad6:	e042      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a17      	ldr	r2, [pc, #92]	@ (8004b3c <UART_SetConfig+0x2c4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d13a      	bne.n	8004b58 <UART_SetConfig+0x2e0>
 8004ae2:	4b18      	ldr	r3, [pc, #96]	@ (8004b44 <UART_SetConfig+0x2cc>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004aec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004af0:	d01a      	beq.n	8004b28 <UART_SetConfig+0x2b0>
 8004af2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004af6:	d81b      	bhi.n	8004b30 <UART_SetConfig+0x2b8>
 8004af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004afc:	d00c      	beq.n	8004b18 <UART_SetConfig+0x2a0>
 8004afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b02:	d815      	bhi.n	8004b30 <UART_SetConfig+0x2b8>
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d003      	beq.n	8004b10 <UART_SetConfig+0x298>
 8004b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b0c:	d008      	beq.n	8004b20 <UART_SetConfig+0x2a8>
 8004b0e:	e00f      	b.n	8004b30 <UART_SetConfig+0x2b8>
 8004b10:	2300      	movs	r3, #0
 8004b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b16:	e022      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b1e:	e01e      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004b20:	2304      	movs	r3, #4
 8004b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b26:	e01a      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004b28:	2308      	movs	r3, #8
 8004b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b2e:	e016      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004b30:	2310      	movs	r3, #16
 8004b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b36:	e012      	b.n	8004b5e <UART_SetConfig+0x2e6>
 8004b38:	efff69f3 	.word	0xefff69f3
 8004b3c:	40008000 	.word	0x40008000
 8004b40:	40013800 	.word	0x40013800
 8004b44:	40021000 	.word	0x40021000
 8004b48:	40004400 	.word	0x40004400
 8004b4c:	40004800 	.word	0x40004800
 8004b50:	40004c00 	.word	0x40004c00
 8004b54:	40005000 	.word	0x40005000
 8004b58:	2310      	movs	r3, #16
 8004b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a9f      	ldr	r2, [pc, #636]	@ (8004de0 <UART_SetConfig+0x568>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d17a      	bne.n	8004c5e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d824      	bhi.n	8004bba <UART_SetConfig+0x342>
 8004b70:	a201      	add	r2, pc, #4	@ (adr r2, 8004b78 <UART_SetConfig+0x300>)
 8004b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b76:	bf00      	nop
 8004b78:	08004b9d 	.word	0x08004b9d
 8004b7c:	08004bbb 	.word	0x08004bbb
 8004b80:	08004ba5 	.word	0x08004ba5
 8004b84:	08004bbb 	.word	0x08004bbb
 8004b88:	08004bab 	.word	0x08004bab
 8004b8c:	08004bbb 	.word	0x08004bbb
 8004b90:	08004bbb 	.word	0x08004bbb
 8004b94:	08004bbb 	.word	0x08004bbb
 8004b98:	08004bb3 	.word	0x08004bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b9c:	f7fd fbfc 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8004ba0:	61f8      	str	r0, [r7, #28]
        break;
 8004ba2:	e010      	b.n	8004bc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ba4:	4b8f      	ldr	r3, [pc, #572]	@ (8004de4 <UART_SetConfig+0x56c>)
 8004ba6:	61fb      	str	r3, [r7, #28]
        break;
 8004ba8:	e00d      	b.n	8004bc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004baa:	f7fd fb5d 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8004bae:	61f8      	str	r0, [r7, #28]
        break;
 8004bb0:	e009      	b.n	8004bc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bb6:	61fb      	str	r3, [r7, #28]
        break;
 8004bb8:	e005      	b.n	8004bc6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004bc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80fb 	beq.w	8004dc4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	4413      	add	r3, r2
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d305      	bcc.n	8004bea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004be4:	69fa      	ldr	r2, [r7, #28]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d903      	bls.n	8004bf2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004bf0:	e0e8      	b.n	8004dc4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	461c      	mov	r4, r3
 8004bf8:	4615      	mov	r5, r2
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	022b      	lsls	r3, r5, #8
 8004c04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004c08:	0222      	lsls	r2, r4, #8
 8004c0a:	68f9      	ldr	r1, [r7, #12]
 8004c0c:	6849      	ldr	r1, [r1, #4]
 8004c0e:	0849      	lsrs	r1, r1, #1
 8004c10:	2000      	movs	r0, #0
 8004c12:	4688      	mov	r8, r1
 8004c14:	4681      	mov	r9, r0
 8004c16:	eb12 0a08 	adds.w	sl, r2, r8
 8004c1a:	eb43 0b09 	adc.w	fp, r3, r9
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c2c:	4650      	mov	r0, sl
 8004c2e:	4659      	mov	r1, fp
 8004c30:	f7fb faca 	bl	80001c8 <__aeabi_uldivmod>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4613      	mov	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c42:	d308      	bcc.n	8004c56 <UART_SetConfig+0x3de>
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c4a:	d204      	bcs.n	8004c56 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	60da      	str	r2, [r3, #12]
 8004c54:	e0b6      	b.n	8004dc4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c5c:	e0b2      	b.n	8004dc4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c66:	d15e      	bne.n	8004d26 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004c68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d828      	bhi.n	8004cc2 <UART_SetConfig+0x44a>
 8004c70:	a201      	add	r2, pc, #4	@ (adr r2, 8004c78 <UART_SetConfig+0x400>)
 8004c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c76:	bf00      	nop
 8004c78:	08004c9d 	.word	0x08004c9d
 8004c7c:	08004ca5 	.word	0x08004ca5
 8004c80:	08004cad 	.word	0x08004cad
 8004c84:	08004cc3 	.word	0x08004cc3
 8004c88:	08004cb3 	.word	0x08004cb3
 8004c8c:	08004cc3 	.word	0x08004cc3
 8004c90:	08004cc3 	.word	0x08004cc3
 8004c94:	08004cc3 	.word	0x08004cc3
 8004c98:	08004cbb 	.word	0x08004cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c9c:	f7fd fb7c 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8004ca0:	61f8      	str	r0, [r7, #28]
        break;
 8004ca2:	e014      	b.n	8004cce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ca4:	f7fd fb8e 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 8004ca8:	61f8      	str	r0, [r7, #28]
        break;
 8004caa:	e010      	b.n	8004cce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cac:	4b4d      	ldr	r3, [pc, #308]	@ (8004de4 <UART_SetConfig+0x56c>)
 8004cae:	61fb      	str	r3, [r7, #28]
        break;
 8004cb0:	e00d      	b.n	8004cce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb2:	f7fd fad9 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8004cb6:	61f8      	str	r0, [r7, #28]
        break;
 8004cb8:	e009      	b.n	8004cce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cbe:	61fb      	str	r3, [r7, #28]
        break;
 8004cc0:	e005      	b.n	8004cce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ccc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d077      	beq.n	8004dc4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	005a      	lsls	r2, r3, #1
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	085b      	lsrs	r3, r3, #1
 8004cde:	441a      	add	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b0f      	cmp	r3, #15
 8004cee:	d916      	bls.n	8004d1e <UART_SetConfig+0x4a6>
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf6:	d212      	bcs.n	8004d1e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	f023 030f 	bic.w	r3, r3, #15
 8004d00:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	085b      	lsrs	r3, r3, #1
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	8afb      	ldrh	r3, [r7, #22]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	8afa      	ldrh	r2, [r7, #22]
 8004d1a:	60da      	str	r2, [r3, #12]
 8004d1c:	e052      	b.n	8004dc4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d24:	e04e      	b.n	8004dc4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d2a:	2b08      	cmp	r3, #8
 8004d2c:	d827      	bhi.n	8004d7e <UART_SetConfig+0x506>
 8004d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d34 <UART_SetConfig+0x4bc>)
 8004d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d34:	08004d59 	.word	0x08004d59
 8004d38:	08004d61 	.word	0x08004d61
 8004d3c:	08004d69 	.word	0x08004d69
 8004d40:	08004d7f 	.word	0x08004d7f
 8004d44:	08004d6f 	.word	0x08004d6f
 8004d48:	08004d7f 	.word	0x08004d7f
 8004d4c:	08004d7f 	.word	0x08004d7f
 8004d50:	08004d7f 	.word	0x08004d7f
 8004d54:	08004d77 	.word	0x08004d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d58:	f7fd fb1e 	bl	8002398 <HAL_RCC_GetPCLK1Freq>
 8004d5c:	61f8      	str	r0, [r7, #28]
        break;
 8004d5e:	e014      	b.n	8004d8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d60:	f7fd fb30 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 8004d64:	61f8      	str	r0, [r7, #28]
        break;
 8004d66:	e010      	b.n	8004d8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d68:	4b1e      	ldr	r3, [pc, #120]	@ (8004de4 <UART_SetConfig+0x56c>)
 8004d6a:	61fb      	str	r3, [r7, #28]
        break;
 8004d6c:	e00d      	b.n	8004d8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d6e:	f7fd fa7b 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8004d72:	61f8      	str	r0, [r7, #28]
        break;
 8004d74:	e009      	b.n	8004d8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d7a:	61fb      	str	r3, [r7, #28]
        break;
 8004d7c:	e005      	b.n	8004d8a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d88:	bf00      	nop
    }

    if (pclk != 0U)
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d019      	beq.n	8004dc4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	085a      	lsrs	r2, r3, #1
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	441a      	add	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b0f      	cmp	r3, #15
 8004da8:	d909      	bls.n	8004dbe <UART_SetConfig+0x546>
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004db0:	d205      	bcs.n	8004dbe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60da      	str	r2, [r3, #12]
 8004dbc:	e002      	b.n	8004dc4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004dd0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3728      	adds	r7, #40	@ 0x28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dde:	bf00      	nop
 8004de0:	40008000 	.word	0x40008000
 8004de4:	00f42400 	.word	0x00f42400

08004de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7c:	f003 0310 	and.w	r3, r3, #16
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01a      	beq.n	8004efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ee6:	d10a      	bne.n	8004efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	605a      	str	r2, [r3, #4]
  }
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b098      	sub	sp, #96	@ 0x60
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f3c:	f7fc f8f6 	bl	800112c <HAL_GetTick>
 8004f40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d12e      	bne.n	8004fae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f88c 	bl	800507c <UART_WaitOnFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d021      	beq.n	8004fae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	461a      	mov	r2, r3
 8004f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e6      	bne.n	8004f6a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e062      	b.n	8005074 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b04      	cmp	r3, #4
 8004fba:	d149      	bne.n	8005050 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f856 	bl	800507c <UART_WaitOnFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d03c      	beq.n	8005050 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fde:	e853 3f00 	ldrex	r3, [r3]
 8004fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ff4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e6      	bne.n	8004fd6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3308      	adds	r3, #8
 800500e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	60fb      	str	r3, [r7, #12]
   return(result);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f023 0301 	bic.w	r3, r3, #1
 800501e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3308      	adds	r3, #8
 8005026:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005028:	61fa      	str	r2, [r7, #28]
 800502a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	69b9      	ldr	r1, [r7, #24]
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	617b      	str	r3, [r7, #20]
   return(result);
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e5      	bne.n	8005008 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e011      	b.n	8005074 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3758      	adds	r7, #88	@ 0x58
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	4613      	mov	r3, r2
 800508a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800508c:	e04f      	b.n	800512e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005094:	d04b      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005096:	f7fc f849 	bl	800112c <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d302      	bcc.n	80050ac <UART_WaitOnFlagUntilTimeout+0x30>
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e04e      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d037      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0xb2>
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b80      	cmp	r3, #128	@ 0x80
 80050c2:	d034      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0xb2>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	2b40      	cmp	r3, #64	@ 0x40
 80050c8:	d031      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d110      	bne.n	80050fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2208      	movs	r2, #8
 80050de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f8ff 	bl	80052e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2208      	movs	r2, #8
 80050ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e029      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005108:	d111      	bne.n	800512e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 f8e5 	bl	80052e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2220      	movs	r2, #32
 800511e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e00f      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69da      	ldr	r2, [r3, #28]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	429a      	cmp	r2, r3
 800513c:	bf0c      	ite	eq
 800513e:	2301      	moveq	r3, #1
 8005140:	2300      	movne	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	461a      	mov	r2, r3
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	429a      	cmp	r2, r3
 800514a:	d0a0      	beq.n	800508e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005158:	b480      	push	{r7}
 800515a:	b097      	sub	sp, #92	@ 0x5c
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	4613      	mov	r3, r2
 8005164:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	88fa      	ldrh	r2, [r7, #6]
 8005170:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	88fa      	ldrh	r2, [r7, #6]
 8005178:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800518a:	d10e      	bne.n	80051aa <UART_Start_Receive_IT+0x52>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d105      	bne.n	80051a0 <UART_Start_Receive_IT+0x48>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800519a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800519e:	e02d      	b.n	80051fc <UART_Start_Receive_IT+0xa4>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	22ff      	movs	r2, #255	@ 0xff
 80051a4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051a8:	e028      	b.n	80051fc <UART_Start_Receive_IT+0xa4>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10d      	bne.n	80051ce <UART_Start_Receive_IT+0x76>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d104      	bne.n	80051c4 <UART_Start_Receive_IT+0x6c>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	22ff      	movs	r2, #255	@ 0xff
 80051be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051c2:	e01b      	b.n	80051fc <UART_Start_Receive_IT+0xa4>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	227f      	movs	r2, #127	@ 0x7f
 80051c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051cc:	e016      	b.n	80051fc <UART_Start_Receive_IT+0xa4>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051d6:	d10d      	bne.n	80051f4 <UART_Start_Receive_IT+0x9c>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d104      	bne.n	80051ea <UART_Start_Receive_IT+0x92>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	227f      	movs	r2, #127	@ 0x7f
 80051e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051e8:	e008      	b.n	80051fc <UART_Start_Receive_IT+0xa4>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	223f      	movs	r2, #63	@ 0x3f
 80051ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80051f2:	e003      	b.n	80051fc <UART_Start_Receive_IT+0xa4>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2222      	movs	r2, #34	@ 0x22
 8005208:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	3308      	adds	r3, #8
 8005212:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005216:	e853 3f00 	ldrex	r3, [r3]
 800521a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800521c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800521e:	f043 0301 	orr.w	r3, r3, #1
 8005222:	657b      	str	r3, [r7, #84]	@ 0x54
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3308      	adds	r3, #8
 800522a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800522c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800522e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005232:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005234:	e841 2300 	strex	r3, r2, [r1]
 8005238:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800523a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e5      	bne.n	800520c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005248:	d107      	bne.n	800525a <UART_Start_Receive_IT+0x102>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d103      	bne.n	800525a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4a21      	ldr	r2, [pc, #132]	@ (80052dc <UART_Start_Receive_IT+0x184>)
 8005256:	669a      	str	r2, [r3, #104]	@ 0x68
 8005258:	e002      	b.n	8005260 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4a20      	ldr	r2, [pc, #128]	@ (80052e0 <UART_Start_Receive_IT+0x188>)
 800525e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d019      	beq.n	800529c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005270:	e853 3f00 	ldrex	r3, [r3]
 8005274:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005278:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800527c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005286:	637b      	str	r3, [r7, #52]	@ 0x34
 8005288:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800528c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e6      	bne.n	8005268 <UART_Start_Receive_IT+0x110>
 800529a:	e018      	b.n	80052ce <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	e853 3f00 	ldrex	r3, [r3]
 80052a8:	613b      	str	r3, [r7, #16]
   return(result);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f043 0320 	orr.w	r3, r3, #32
 80052b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052ba:	623b      	str	r3, [r7, #32]
 80052bc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	69f9      	ldr	r1, [r7, #28]
 80052c0:	6a3a      	ldr	r2, [r7, #32]
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e6      	bne.n	800529c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	375c      	adds	r7, #92	@ 0x5c
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	080055e9 	.word	0x080055e9
 80052e0:	0800542d 	.word	0x0800542d

080052e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b095      	sub	sp, #84	@ 0x54
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005300:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800530a:	643b      	str	r3, [r7, #64]	@ 0x40
 800530c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005310:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e6      	bne.n	80052ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3308      	adds	r3, #8
 8005324:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	61fb      	str	r3, [r7, #28]
   return(result);
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	f023 0301 	bic.w	r3, r3, #1
 8005334:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3308      	adds	r3, #8
 800533c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800533e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005340:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800534c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e5      	bne.n	800531e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005356:	2b01      	cmp	r3, #1
 8005358:	d118      	bne.n	800538c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	e853 3f00 	ldrex	r3, [r3]
 8005366:	60bb      	str	r3, [r7, #8]
   return(result);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f023 0310 	bic.w	r3, r3, #16
 800536e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005378:	61bb      	str	r3, [r7, #24]
 800537a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537c:	6979      	ldr	r1, [r7, #20]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	e841 2300 	strex	r3, r2, [r1]
 8005384:	613b      	str	r3, [r7, #16]
   return(result);
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1e6      	bne.n	800535a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2220      	movs	r2, #32
 8005390:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80053a0:	bf00      	nop
 80053a2:	3754      	adds	r7, #84	@ 0x54
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f7ff fa3e 	bl	800484c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d0:	bf00      	nop
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	e853 3f00 	ldrex	r3, [r3]
 80053ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005402:	6979      	ldr	r1, [r7, #20]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	e841 2300 	strex	r3, r2, [r1]
 800540a:	613b      	str	r3, [r7, #16]
   return(result);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1e6      	bne.n	80053e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2220      	movs	r2, #32
 8005416:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff fa0a 	bl	8004838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005424:	bf00      	nop
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b09c      	sub	sp, #112	@ 0x70
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800543a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005444:	2b22      	cmp	r3, #34	@ 0x22
 8005446:	f040 80be 	bne.w	80055c6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005450:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005454:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005458:	b2d9      	uxtb	r1, r3
 800545a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800545e:	b2da      	uxtb	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005464:	400a      	ands	r2, r1
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	f040 80a3 	bne.w	80055da <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e6      	bne.n	8005494 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	3308      	adds	r3, #8
 80054cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d0:	e853 3f00 	ldrex	r3, [r3]
 80054d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d8:	f023 0301 	bic.w	r3, r3, #1
 80054dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3308      	adds	r3, #8
 80054e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80054e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80054e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054ee:	e841 2300 	strex	r3, r2, [r1]
 80054f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1e5      	bne.n	80054c6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a34      	ldr	r2, [pc, #208]	@ (80055e4 <UART_RxISR_8BIT+0x1b8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d01f      	beq.n	8005558 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d018      	beq.n	8005558 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	623b      	str	r3, [r7, #32]
   return(result);
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800553a:	663b      	str	r3, [r7, #96]	@ 0x60
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005544:	633b      	str	r3, [r7, #48]	@ 0x30
 8005546:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800554a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e6      	bne.n	8005526 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800555c:	2b01      	cmp	r3, #1
 800555e:	d12e      	bne.n	80055be <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	e853 3f00 	ldrex	r3, [r3]
 8005572:	60fb      	str	r3, [r7, #12]
   return(result);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f023 0310 	bic.w	r3, r3, #16
 800557a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005588:	69b9      	ldr	r1, [r7, #24]
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	e841 2300 	strex	r3, r2, [r1]
 8005590:	617b      	str	r3, [r7, #20]
   return(result);
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e6      	bne.n	8005566 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d103      	bne.n	80055ae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2210      	movs	r2, #16
 80055ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7ff f952 	bl	8004860 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055bc:	e00d      	b.n	80055da <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fb fb36 	bl	8000c30 <HAL_UART_RxCpltCallback>
}
 80055c4:	e009      	b.n	80055da <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	8b1b      	ldrh	r3, [r3, #24]
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0208 	orr.w	r2, r2, #8
 80055d6:	b292      	uxth	r2, r2
 80055d8:	831a      	strh	r2, [r3, #24]
}
 80055da:	bf00      	nop
 80055dc:	3770      	adds	r7, #112	@ 0x70
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40008000 	.word	0x40008000

080055e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b09c      	sub	sp, #112	@ 0x70
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80055f6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005600:	2b22      	cmp	r3, #34	@ 0x22
 8005602:	f040 80be 	bne.w	8005782 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800560c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005614:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005616:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800561a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800561e:	4013      	ands	r3, r2
 8005620:	b29a      	uxth	r2, r3
 8005622:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005624:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562a:	1c9a      	adds	r2, r3, #2
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	f040 80a3 	bne.w	8005796 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005658:	e853 3f00 	ldrex	r3, [r3]
 800565c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800565e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005660:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005664:	667b      	str	r3, [r7, #100]	@ 0x64
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800566e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005670:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005674:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800567c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e6      	bne.n	8005650 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3308      	adds	r3, #8
 8005688:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	663b      	str	r3, [r7, #96]	@ 0x60
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80056a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80056a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e5      	bne.n	8005682 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a34      	ldr	r2, [pc, #208]	@ (80057a0 <UART_RxISR_16BIT+0x1b8>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d01f      	beq.n	8005714 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d018      	beq.n	8005714 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80056f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005702:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005704:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005706:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005708:	e841 2300 	strex	r3, r2, [r1]
 800570c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800570e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e6      	bne.n	80056e2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005718:	2b01      	cmp	r3, #1
 800571a:	d12e      	bne.n	800577a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f023 0310 	bic.w	r3, r3, #16
 8005736:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005740:	61bb      	str	r3, [r7, #24]
 8005742:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005744:	6979      	ldr	r1, [r7, #20]
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	e841 2300 	strex	r3, r2, [r1]
 800574c:	613b      	str	r3, [r7, #16]
   return(result);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e6      	bne.n	8005722 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	f003 0310 	and.w	r3, r3, #16
 800575e:	2b10      	cmp	r3, #16
 8005760:	d103      	bne.n	800576a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2210      	movs	r2, #16
 8005768:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff f874 	bl	8004860 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005778:	e00d      	b.n	8005796 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fb fa58 	bl	8000c30 <HAL_UART_RxCpltCallback>
}
 8005780:	e009      	b.n	8005796 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	8b1b      	ldrh	r3, [r3, #24]
 8005788:	b29a      	uxth	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0208 	orr.w	r2, r2, #8
 8005792:	b292      	uxth	r2, r2
 8005794:	831a      	strh	r2, [r3, #24]
}
 8005796:	bf00      	nop
 8005798:	3770      	adds	r7, #112	@ 0x70
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	40008000 	.word	0x40008000

080057a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <memset>:
 80057b8:	4402      	add	r2, r0
 80057ba:	4603      	mov	r3, r0
 80057bc:	4293      	cmp	r3, r2
 80057be:	d100      	bne.n	80057c2 <memset+0xa>
 80057c0:	4770      	bx	lr
 80057c2:	f803 1b01 	strb.w	r1, [r3], #1
 80057c6:	e7f9      	b.n	80057bc <memset+0x4>

080057c8 <__libc_init_array>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005800 <__libc_init_array+0x38>)
 80057cc:	4c0d      	ldr	r4, [pc, #52]	@ (8005804 <__libc_init_array+0x3c>)
 80057ce:	1b64      	subs	r4, r4, r5
 80057d0:	10a4      	asrs	r4, r4, #2
 80057d2:	2600      	movs	r6, #0
 80057d4:	42a6      	cmp	r6, r4
 80057d6:	d109      	bne.n	80057ec <__libc_init_array+0x24>
 80057d8:	4d0b      	ldr	r5, [pc, #44]	@ (8005808 <__libc_init_array+0x40>)
 80057da:	4c0c      	ldr	r4, [pc, #48]	@ (800580c <__libc_init_array+0x44>)
 80057dc:	f000 f818 	bl	8005810 <_init>
 80057e0:	1b64      	subs	r4, r4, r5
 80057e2:	10a4      	asrs	r4, r4, #2
 80057e4:	2600      	movs	r6, #0
 80057e6:	42a6      	cmp	r6, r4
 80057e8:	d105      	bne.n	80057f6 <__libc_init_array+0x2e>
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
 80057ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f0:	4798      	blx	r3
 80057f2:	3601      	adds	r6, #1
 80057f4:	e7ee      	b.n	80057d4 <__libc_init_array+0xc>
 80057f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057fa:	4798      	blx	r3
 80057fc:	3601      	adds	r6, #1
 80057fe:	e7f2      	b.n	80057e6 <__libc_init_array+0x1e>
 8005800:	08005878 	.word	0x08005878
 8005804:	08005878 	.word	0x08005878
 8005808:	08005878 	.word	0x08005878
 800580c:	0800587c 	.word	0x0800587c

08005810 <_init>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	bf00      	nop
 8005814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005816:	bc08      	pop	{r3}
 8005818:	469e      	mov	lr, r3
 800581a:	4770      	bx	lr

0800581c <_fini>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	bf00      	nop
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr
